
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f3 77 00 00       	call   c0007813 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 b0 f4 01 c0       	mov    eax,0xc001f4b0
c0000025:	3d b0 f4 01 c0       	cmp    eax,0xc001f4b0
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 b0 f4 01 c0       	push   0xc001f4b0
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 b0 f4 01 c0       	mov    eax,0xc001f4b0
c0000051:	2d b0 f4 01 c0       	sub    eax,0xc001f4b0
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 b0 f4 01 c0       	push   0xc001f4b0
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d e0 f6 01 c0 00 	cmp    BYTE PTR ds:0xc001f6e0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 48 c9 01 c0       	mov    ebx,0xc001c948
c0000097:	81 eb 44 c9 01 c0    	sub    ebx,0xc001c944
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 44 c9 01 c0       	mov    esi,0xc001c944
c00000a6:	a1 e4 f6 01 c0       	mov    eax,ds:0xc001f6e4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 e4 f6 01 c0       	mov    ds:0xc001f6e4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 e4 f6 01 c0       	mov    eax,ds:0xc001f6e4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 b0 f4 01 c0       	push   0xc001f4b0
c00000d8:	e8 23 ff ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 e0 f6 01 c0 01 	mov    BYTE PTR ds:0xc001f6e0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 e8 f6 01 c0       	push   0xc001f6e8
c0000108:	68 b0 f4 01 c0       	push   0xc001f4b0
c000010d:	e8 ee fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000297:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000029a:	0f 20 d9             	mov    ecx,cr3
c000029d:	39 c8                	cmp    eax,ecx
c000029f:	74 03                	je     c00002a4 <commonThreadSwitch.doneVAS>
c00002a1:	0f 22 d8             	mov    cr3,eax

c00002a4 <commonThreadSwitch.doneVAS>:
c00002a4:	85 d2                	test   edx,edx
c00002a6:	75 11                	jne    c00002b9 <commonThreadSwitch.firstTime>
c00002a8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002ab:	e8 5c 29 01 00       	call   c0012c0c <changeTSS>
c00002b0:	5d                   	pop    ebp
c00002b1:	5f                   	pop    edi
c00002b2:	5e                   	pop    esi
c00002b3:	5a                   	pop    edx
c00002b4:	59                   	pop    ecx
c00002b5:	5b                   	pop    ebx
c00002b6:	58                   	pop    eax
c00002b7:	9d                   	popf   
c00002b8:	c3                   	ret    

c00002b9 <commonThreadSwitch.firstTime>:
c00002b9:	fa                   	cli    
c00002ba:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002bd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002c2:	60                   	pusha  
c00002c3:	e8 18 a0 00 00       	call   c000a2e0 <mapVASFirstTime>
c00002c8:	61                   	popa   
c00002c9:	89 c4                	mov    esp,eax
c00002cb:	56                   	push   esi
c00002cc:	52                   	push   edx
c00002cd:	e8 3a 29 01 00       	call   c0012c0c <changeTSS>
c00002d2:	5a                   	pop    edx
c00002d3:	5e                   	pop    esi
c00002d4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002db:	5d                   	pop    ebp
c00002dc:	5f                   	pop    edi
c00002dd:	5e                   	pop    esi
c00002de:	59                   	pop    ecx
c00002df:	59                   	pop    ecx
c00002e0:	5b                   	pop    ebx
c00002e1:	58                   	pop    eax
c00002e2:	81 c4 04 00 00 00    	add    esp,0x4
c00002e8:	6a 02                	push   0x2
c00002ea:	9d                   	popf   
c00002eb:	52                   	push   edx
c00002ec:	e8 23 2e 01 00       	call   c0013114 <taskStartupFunction>
c00002f1:	5a                   	pop    edx
c00002f2:	50                   	push   eax
c00002f3:	ff d2                	call   edx
c00002f5:	e8 72 34 01 00       	call   c001376c <taskReturned>
c00002fa:	e9 fb ff ff ff       	jmp    c00002fa <commonThreadSwitch.firstTime+0x41>

c00002ff <asmQuickAcquireLock>:
c00002ff:	55                   	push   ebp
c0000300:	89 e5                	mov    ebp,esp
c0000302:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000305 <asmQuickAcquireLock.retry>:
c0000305:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000030a:	72 02                	jb     c000030e <asmQuickAcquireLock.spin_with_pause>
c000030c:	fa                   	cli    
c000030d:	c3                   	ret    

c000030e <asmQuickAcquireLock.spin_with_pause>:
c000030e:	f3 90                	pause  
c0000310:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000316:	75 f6                	jne    c000030e <asmQuickAcquireLock.spin_with_pause>
c0000318:	e9 e8 ff ff ff       	jmp    c0000305 <asmQuickAcquireLock.retry>

c000031d <asmQuickReleaseLock>:
c000031d:	55                   	push   ebp
c000031e:	89 e5                	mov    ebp,esp
c0000320:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000327:	5d                   	pop    ebp
c0000328:	c3                   	ret    

c0000329 <asmAcquireLock>:
c0000329:	55                   	push   ebp
c000032a:	89 e5                	mov    ebp,esp
c000032c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032f <asmAcquireLock.retry>:
c000032f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000334:	72 05                	jb     c000033b <asmAcquireLock.spin_with_pause>
c0000336:	9c                   	pushf  
c0000337:	58                   	pop    eax
c0000338:	fa                   	cli    
c0000339:	5d                   	pop    ebp
c000033a:	c3                   	ret    

c000033b <asmAcquireLock.spin_with_pause>:
c000033b:	f3 90                	pause  
c000033d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000343:	75 f6                	jne    c000033b <asmAcquireLock.spin_with_pause>
c0000345:	e9 e5 ff ff ff       	jmp    c000032f <asmAcquireLock.retry>

c000034a <asmReleaseLock>:
c000034a:	55                   	push   ebp
c000034b:	89 e5                	mov    ebp,esp
c000034d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000350:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000353:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000359:	52                   	push   edx
c000035a:	9d                   	popf   
c000035b:	5d                   	pop    ebp
c000035c:	c3                   	ret    

c000035d <loadGDT>:
c000035d:	0f 01 15 e0 04 02 c0 	lgdtd  ds:0xc00204e0
c0000364:	66 b8 10 00          	mov    ax,0x10
c0000368:	66 8e d8             	mov    ds,ax
c000036b:	66 8e c0             	mov    es,ax
c000036e:	66 8e e0             	mov    fs,ax
c0000371:	66 8e e8             	mov    gs,ax
c0000374:	66 8e d0             	mov    ss,ax
c0000377:	e9 00 00 00 00       	jmp    c000037c <flush2>

c000037c <flush2>:
c000037c:	c3                   	ret    

c000037d <memcpy>:
c000037d:	e9 c4 fd 00 00       	jmp    c0010146 <__not_memcpy>
c0000382:	66 90                	xchg   ax,ax
c0000384:	66 90                	xchg   ax,ax
c0000386:	66 90                	xchg   ax,ax
c0000388:	66 90                	xchg   ax,ax
c000038a:	66 90                	xchg   ax,ax
c000038c:	66 90                	xchg   ax,ax
c000038e:	66 90                	xchg   ax,ax

c0000390 <memcmp>:
c0000390:	56                   	push   esi
c0000391:	53                   	push   ebx
c0000392:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000396:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000039a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000039e:	85 f6                	test   esi,esi
c00003a0:	74 1c                	je     c00003be <memcmp+0x2e>
c00003a2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003a6:	38 cb                	cmp    bl,cl
c00003a8:	75 26                	jne    c00003d0 <memcmp+0x40>
c00003aa:	01 c6                	add    esi,eax
c00003ac:	eb 0a                	jmp    c00003b8 <memcmp+0x28>
c00003ae:	66 90                	xchg   ax,ax
c00003b0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003b2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003b4:	38 d9                	cmp    cl,bl
c00003b6:	75 18                	jne    c00003d0 <memcmp+0x40>
c00003b8:	40                   	inc    eax
c00003b9:	42                   	inc    edx
c00003ba:	39 f0                	cmp    eax,esi
c00003bc:	75 f2                	jne    c00003b0 <memcmp+0x20>
c00003be:	31 c0                	xor    eax,eax
c00003c0:	5b                   	pop    ebx
c00003c1:	5e                   	pop    esi
c00003c2:	c3                   	ret    
c00003c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003d0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003d6:	31 c0                	xor    eax,eax
c00003d8:	88 c8                	mov    al,cl
c00003da:	29 d8                	sub    eax,ebx
c00003dc:	5b                   	pop    ebx
c00003dd:	5e                   	pop    esi
c00003de:	c3                   	ret    
c00003df:	90                   	nop

c00003e0 <memmove>:
c00003e0:	55                   	push   ebp
c00003e1:	57                   	push   edi
c00003e2:	56                   	push   esi
c00003e3:	53                   	push   ebx
c00003e4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003e8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003ec:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003f0:	39 dd                	cmp    ebp,ebx
c00003f2:	0f 83 98 00 00 00    	jae    c0000490 <memmove+0xb0>
c00003f8:	85 d2                	test   edx,edx
c00003fa:	0f 84 7c 00 00 00    	je     c000047c <memmove+0x9c>
c0000400:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000403:	8d 75 04             	lea    esi,[ebp+0x4]
c0000406:	39 cd                	cmp    ebp,ecx
c0000408:	0f 93 c1             	setae  cl
c000040b:	39 f3                	cmp    ebx,esi
c000040d:	0f 93 c0             	setae  al
c0000410:	89 c6                	mov    esi,eax
c0000412:	09 ce                	or     esi,ecx
c0000414:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000417:	89 f0                	mov    eax,esi
c0000419:	83 f9 0c             	cmp    ecx,0xc
c000041c:	0f 97 c1             	seta   cl
c000041f:	84 c8                	test   al,cl
c0000421:	0f 84 89 00 00 00    	je     c00004b0 <memmove+0xd0>
c0000427:	89 e9                	mov    ecx,ebp
c0000429:	09 d9                	or     ecx,ebx
c000042b:	83 e1 03             	and    ecx,0x3
c000042e:	0f 85 7c 00 00 00    	jne    c00004b0 <memmove+0xd0>
c0000434:	89 d7                	mov    edi,edx
c0000436:	89 d9                	mov    ecx,ebx
c0000438:	83 e7 fc             	and    edi,0xfffffffc
c000043b:	89 ee                	mov    esi,ebp
c000043d:	01 df                	add    edi,ebx
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x60>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0x9c>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0x9c>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0x9c>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0x9c>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0x9c>
c0000496:	4b                   	dec    ebx
c0000497:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	4a                   	dec    edx
c00004a7:	75 f7                	jne    c00004a0 <memmove+0xc0>
c00004a9:	5b                   	pop    ebx
c00004aa:	89 e8                	mov    eax,ebp
c00004ac:	5e                   	pop    esi
c00004ad:	5f                   	pop    edi
c00004ae:	5d                   	pop    ebp
c00004af:	c3                   	ret    
c00004b0:	01 ea                	add    edx,ebp
c00004b2:	89 e9                	mov    ecx,ebp
c00004b4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ba:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004c2:	41                   	inc    ecx
c00004c3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004c6:	43                   	inc    ebx
c00004c7:	39 d1                	cmp    ecx,edx
c00004c9:	75 f5                	jne    c00004c0 <memmove+0xe0>
c00004cb:	eb af                	jmp    c000047c <memmove+0x9c>
c00004cd:	8d 76 00             	lea    esi,[esi+0x0]

c00004d0 <memset>:
c00004d0:	57                   	push   edi
c00004d1:	53                   	push   ebx
c00004d2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004d6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004da:	85 d2                	test   edx,edx
c00004dc:	74 1f                	je     c00004fd <memset+0x2d>
c00004de:	31 c0                	xor    eax,eax
c00004e0:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00004e4:	88 c4                	mov    ah,al
c00004e6:	89 c1                	mov    ecx,eax
c00004e8:	c1 e1 10             	shl    ecx,0x10
c00004eb:	09 c8                	or     eax,ecx
c00004ed:	83 fa 04             	cmp    edx,0x4
c00004f0:	73 1e                	jae    c0000510 <memset+0x40>
c00004f2:	85 d2                	test   edx,edx
c00004f4:	74 07                	je     c00004fd <memset+0x2d>
c00004f6:	88 03                	mov    BYTE PTR [ebx],al
c00004f8:	f6 c2 02             	test   dl,0x2
c00004fb:	75 30                	jne    c000052d <memset+0x5d>
c00004fd:	89 d8                	mov    eax,ebx
c00004ff:	5b                   	pop    ebx
c0000500:	5f                   	pop    edi
c0000501:	c3                   	ret    
c0000502:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000509:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000510:	89 03                	mov    DWORD PTR [ebx],eax
c0000512:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000515:	89 d9                	mov    ecx,ebx
c0000517:	83 e7 fc             	and    edi,0xfffffffc
c000051a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000051e:	29 f9                	sub    ecx,edi
c0000520:	01 d1                	add    ecx,edx
c0000522:	c1 e9 02             	shr    ecx,0x2
c0000525:	fc                   	cld    
c0000526:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000528:	89 d8                	mov    eax,ebx
c000052a:	5b                   	pop    ebx
c000052b:	5f                   	pop    edi
c000052c:	c3                   	ret    
c000052d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000532:	eb c9                	jmp    c00004fd <memset+0x2d>
c0000534:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000053a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000540 <strlen>:
c0000540:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000544:	31 c0                	xor    eax,eax
c0000546:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000549:	74 15                	je     c0000560 <strlen+0x20>
c000054b:	90                   	nop
c000054c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000550:	40                   	inc    eax
c0000551:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000555:	75 f9                	jne    c0000550 <strlen+0x10>
c0000557:	c3                   	ret    
c0000558:	90                   	nop
c0000559:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000560:	c3                   	ret    
c0000561:	eb 0d                	jmp    c0000570 <strpbrk>
c0000563:	90                   	nop
c0000564:	90                   	nop
c0000565:	90                   	nop
c0000566:	90                   	nop
c0000567:	90                   	nop
c0000568:	90                   	nop
c0000569:	90                   	nop
c000056a:	90                   	nop
c000056b:	90                   	nop
c000056c:	90                   	nop
c000056d:	90                   	nop
c000056e:	90                   	nop
c000056f:	90                   	nop

c0000570 <strpbrk>:
c0000570:	57                   	push   edi
c0000571:	56                   	push   esi
c0000572:	53                   	push   ebx
c0000573:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000577:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000057b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000057d:	84 db                	test   bl,bl
c000057f:	74 21                	je     c00005a2 <strpbrk+0x32>
c0000581:	8a 07                	mov    al,BYTE PTR [edi]
c0000583:	84 c0                	test   al,al
c0000585:	74 14                	je     c000059b <strpbrk+0x2b>
c0000587:	38 d8                	cmp    al,bl
c0000589:	74 19                	je     c00005a4 <strpbrk+0x34>
c000058b:	89 fa                	mov    edx,edi
c000058d:	eb 05                	jmp    c0000594 <strpbrk+0x24>
c000058f:	90                   	nop
c0000590:	38 d9                	cmp    cl,bl
c0000592:	74 10                	je     c00005a4 <strpbrk+0x34>
c0000594:	42                   	inc    edx
c0000595:	8a 0a                	mov    cl,BYTE PTR [edx]
c0000597:	84 c9                	test   cl,cl
c0000599:	75 f5                	jne    c0000590 <strpbrk+0x20>
c000059b:	46                   	inc    esi
c000059c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059e:	84 db                	test   bl,bl
c00005a0:	75 e1                	jne    c0000583 <strpbrk+0x13>
c00005a2:	31 f6                	xor    esi,esi
c00005a4:	89 f0                	mov    eax,esi
c00005a6:	5b                   	pop    ebx
c00005a7:	5e                   	pop    esi
c00005a8:	5f                   	pop    edi
c00005a9:	c3                   	ret    
c00005aa:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005b0 <strtok>:
c00005b0:	56                   	push   esi
c00005b1:	53                   	push   ebx
c00005b2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005b6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005ba:	85 db                	test   ebx,ebx
c00005bc:	75 07                	jne    c00005c5 <strtok+0x15>
c00005be:	eb 30                	jmp    c00005f0 <strtok+0x40>
c00005c0:	43                   	inc    ebx
c00005c1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005c5:	56                   	push   esi
c00005c6:	53                   	push   ebx
c00005c7:	e8 a4 ff ff ff       	call   c0000570 <strpbrk>
c00005cc:	5a                   	pop    edx
c00005cd:	a3 00 f7 01 c0       	mov    ds:0xc001f700,eax
c00005d2:	59                   	pop    ecx
c00005d3:	39 d8                	cmp    eax,ebx
c00005d5:	74 e9                	je     c00005c0 <strtok+0x10>
c00005d7:	85 c0                	test   eax,eax
c00005d9:	74 1f                	je     c00005fa <strtok+0x4a>
c00005db:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005de:	8d 50 01             	lea    edx,[eax+0x1]
c00005e1:	89 d8                	mov    eax,ebx
c00005e3:	89 15 00 f7 01 c0    	mov    DWORD PTR ds:0xc001f700,edx
c00005e9:	5b                   	pop    ebx
c00005ea:	5e                   	pop    esi
c00005eb:	c3                   	ret    
c00005ec:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00005f0:	8b 1d 00 f7 01 c0    	mov    ebx,DWORD PTR ds:0xc001f700
c00005f6:	85 db                	test   ebx,ebx
c00005f8:	75 cb                	jne    c00005c5 <strtok+0x15>
c00005fa:	31 c0                	xor    eax,eax
c00005fc:	5b                   	pop    ebx
c00005fd:	5e                   	pop    esi
c00005fe:	c3                   	ret    
c00005ff:	90                   	nop

c0000600 <strcpy>:
c0000600:	53                   	push   ebx
c0000601:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000605:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000609:	89 c3                	mov    ebx,eax
c000060b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000060d:	84 d2                	test   dl,dl
c000060f:	74 19                	je     c000062a <strcpy+0x2a>
c0000611:	eb 0d                	jmp    c0000620 <strcpy+0x20>
c0000613:	90                   	nop
c0000614:	90                   	nop
c0000615:	90                   	nop
c0000616:	90                   	nop
c0000617:	90                   	nop
c0000618:	90                   	nop
c0000619:	90                   	nop
c000061a:	90                   	nop
c000061b:	90                   	nop
c000061c:	90                   	nop
c000061d:	90                   	nop
c000061e:	90                   	nop
c000061f:	90                   	nop
c0000620:	88 13                	mov    BYTE PTR [ebx],dl
c0000622:	41                   	inc    ecx
c0000623:	43                   	inc    ebx
c0000624:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000626:	84 d2                	test   dl,dl
c0000628:	75 f6                	jne    c0000620 <strcpy+0x20>
c000062a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000062d:	5b                   	pop    ebx
c000062e:	c3                   	ret    
c000062f:	90                   	nop

c0000630 <strncpy>:
c0000630:	57                   	push   edi
c0000631:	56                   	push   esi
c0000632:	53                   	push   ebx
c0000633:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000637:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000063b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000063f:	85 ff                	test   edi,edi
c0000641:	74 3e                	je     c0000681 <strncpy+0x51>
c0000643:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000645:	8d 47 ff             	lea    eax,[edi-0x1]
c0000648:	8d 4a 01             	lea    ecx,[edx+0x1]
c000064b:	88 1a                	mov    BYTE PTR [edx],bl
c000064d:	84 db                	test   bl,bl
c000064f:	74 3f                	je     c0000690 <strncpy+0x60>
c0000651:	85 c0                	test   eax,eax
c0000653:	74 2c                	je     c0000681 <strncpy+0x51>
c0000655:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000658:	8d 47 fe             	lea    eax,[edi-0x2]
c000065b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000065e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000661:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000664:	84 db                	test   bl,bl
c0000666:	75 15                	jne    c000067d <strncpy+0x4d>
c0000668:	eb 26                	jmp    c0000690 <strncpy+0x60>
c000066a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000670:	47                   	inc    edi
c0000671:	41                   	inc    ecx
c0000672:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000675:	48                   	dec    eax
c0000676:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000679:	84 db                	test   bl,bl
c000067b:	74 13                	je     c0000690 <strncpy+0x60>
c000067d:	85 c0                	test   eax,eax
c000067f:	75 ef                	jne    c0000670 <strncpy+0x40>
c0000681:	5b                   	pop    ebx
c0000682:	89 d0                	mov    eax,edx
c0000684:	5e                   	pop    esi
c0000685:	5f                   	pop    edi
c0000686:	c3                   	ret    
c0000687:	89 f6                	mov    esi,esi
c0000689:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000690:	85 c0                	test   eax,eax
c0000692:	74 ed                	je     c0000681 <strncpy+0x51>
c0000694:	83 f8 04             	cmp    eax,0x4
c0000697:	73 17                	jae    c00006b0 <strncpy+0x80>
c0000699:	85 c0                	test   eax,eax
c000069b:	74 e4                	je     c0000681 <strncpy+0x51>
c000069d:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006a0:	a8 02                	test   al,0x2
c00006a2:	74 dd                	je     c0000681 <strncpy+0x51>
c00006a4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006ab:	eb d4                	jmp    c0000681 <strncpy+0x51>
c00006ad:	8d 76 00             	lea    esi,[esi+0x0]
c00006b0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006b6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006b9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006c1:	83 e7 fc             	and    edi,0xfffffffc
c00006c4:	29 f9                	sub    ecx,edi
c00006c6:	01 c1                	add    ecx,eax
c00006c8:	c1 e9 02             	shr    ecx,0x2
c00006cb:	fc                   	cld    
c00006cc:	31 c0                	xor    eax,eax
c00006ce:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006d0:	89 d0                	mov    eax,edx
c00006d2:	5b                   	pop    ebx
c00006d3:	5e                   	pop    esi
c00006d4:	5f                   	pop    edi
c00006d5:	c3                   	ret    
c00006d6:	8d 76 00             	lea    esi,[esi+0x0]
c00006d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00006e0 <strcmp>:
c00006e0:	56                   	push   esi
c00006e1:	53                   	push   ebx
c00006e2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00006e6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00006ea:	8a 16                	mov    dl,BYTE PTR [esi]
c00006ec:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00006ee:	38 d1                	cmp    cl,dl
c00006f0:	75 1d                	jne    c000070f <strcmp+0x2f>
c00006f2:	84 c9                	test   cl,cl
c00006f4:	74 2a                	je     c0000720 <strcmp+0x40>
c00006f6:	b8 01 00 00 00       	mov    eax,0x1
c00006fb:	eb 08                	jmp    c0000705 <strcmp+0x25>
c00006fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000700:	40                   	inc    eax
c0000701:	84 d2                	test   dl,dl
c0000703:	74 1b                	je     c0000720 <strcmp+0x40>
c0000705:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000708:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000070b:	38 ca                	cmp    dl,cl
c000070d:	74 f1                	je     c0000700 <strcmp+0x20>
c000070f:	31 c0                	xor    eax,eax
c0000711:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000717:	88 d0                	mov    al,dl
c0000719:	5b                   	pop    ebx
c000071a:	29 c8                	sub    eax,ecx
c000071c:	5e                   	pop    esi
c000071d:	c3                   	ret    
c000071e:	66 90                	xchg   ax,ax
c0000720:	31 c0                	xor    eax,eax
c0000722:	5b                   	pop    ebx
c0000723:	5e                   	pop    esi
c0000724:	c3                   	ret    
c0000725:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000729:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000730 <strchr>:
c0000730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000734:	8a 10                	mov    dl,BYTE PTR [eax]
c0000736:	84 d2                	test   dl,dl
c0000738:	74 21                	je     c000075b <strchr+0x2b>
c000073a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000073e:	38 ca                	cmp    dl,cl
c0000740:	75 12                	jne    c0000754 <strchr+0x24>
c0000742:	eb 1a                	jmp    c000075e <strchr+0x2e>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000750:	38 ca                	cmp    dl,cl
c0000752:	74 09                	je     c000075d <strchr+0x2d>
c0000754:	40                   	inc    eax
c0000755:	8a 10                	mov    dl,BYTE PTR [eax]
c0000757:	84 d2                	test   dl,dl
c0000759:	75 f5                	jne    c0000750 <strchr+0x20>
c000075b:	31 c0                	xor    eax,eax
c000075d:	c3                   	ret    
c000075e:	c3                   	ret    
c000075f:	90                   	nop

c0000760 <strncmp>:
c0000760:	57                   	push   edi
c0000761:	56                   	push   esi
c0000762:	53                   	push   ebx
c0000763:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000767:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000076f:	85 ff                	test   edi,edi
c0000771:	74 2f                	je     c00007a2 <strncmp+0x42>
c0000773:	8a 16                	mov    dl,BYTE PTR [esi]
c0000775:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000777:	38 d1                	cmp    cl,dl
c0000779:	75 35                	jne    c00007b0 <strncmp+0x50>
c000077b:	8d 46 01             	lea    eax,[esi+0x1]
c000077e:	84 c9                	test   cl,cl
c0000780:	74 20                	je     c00007a2 <strncmp+0x42>
c0000782:	01 fe                	add    esi,edi
c0000784:	eb 17                	jmp    c000079d <strncmp+0x3d>
c0000786:	8d 76 00             	lea    esi,[esi+0x0]
c0000789:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000790:	8a 10                	mov    dl,BYTE PTR [eax]
c0000792:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000794:	38 ca                	cmp    dl,cl
c0000796:	75 18                	jne    c00007b0 <strncmp+0x50>
c0000798:	40                   	inc    eax
c0000799:	84 d2                	test   dl,dl
c000079b:	74 05                	je     c00007a2 <strncmp+0x42>
c000079d:	43                   	inc    ebx
c000079e:	39 c6                	cmp    esi,eax
c00007a0:	75 ee                	jne    c0000790 <strncmp+0x30>
c00007a2:	5b                   	pop    ebx
c00007a3:	31 c0                	xor    eax,eax
c00007a5:	5e                   	pop    esi
c00007a6:	5f                   	pop    edi
c00007a7:	c3                   	ret    
c00007a8:	90                   	nop
c00007a9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007b0:	5b                   	pop    ebx
c00007b1:	31 c0                	xor    eax,eax
c00007b3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007b9:	88 d0                	mov    al,dl
c00007bb:	5e                   	pop    esi
c00007bc:	29 c8                	sub    eax,ecx
c00007be:	5f                   	pop    edi
c00007bf:	c3                   	ret    

c00007c0 <strcat>:
c00007c0:	56                   	push   esi
c00007c1:	53                   	push   ebx
c00007c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007c6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ca:	89 c3                	mov    ebx,eax
c00007cc:	eb 04                	jmp    c00007d2 <strcat+0x12>
c00007ce:	66 90                	xchg   ax,ax
c00007d0:	89 d3                	mov    ebx,edx
c00007d2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007d5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007d9:	75 f5                	jne    c00007d0 <strcat+0x10>
c00007db:	31 d2                	xor    edx,edx
c00007dd:	8d 76 00             	lea    esi,[esi+0x0]
c00007e0:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c00007e3:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00007e6:	42                   	inc    edx
c00007e7:	84 c9                	test   cl,cl
c00007e9:	75 f5                	jne    c00007e0 <strcat+0x20>
c00007eb:	5b                   	pop    ebx
c00007ec:	5e                   	pop    esi
c00007ed:	c3                   	ret    
c00007ee:	66 90                	xchg   ax,ax

c00007f0 <strncat>:
c00007f0:	56                   	push   esi
c00007f1:	53                   	push   ebx
c00007f2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00007f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007fa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00007fe:	85 f6                	test   esi,esi
c0000800:	74 2e                	je     c0000830 <strncat+0x40>
c0000802:	89 c2                	mov    edx,eax
c0000804:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000080a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000810:	42                   	inc    edx
c0000811:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000815:	75 f9                	jne    c0000810 <strncat+0x20>
c0000817:	01 ce                	add    esi,ecx
c0000819:	eb 0a                	jmp    c0000825 <strncat+0x35>
c000081b:	90                   	nop
c000081c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000820:	39 f1                	cmp    ecx,esi
c0000822:	74 1c                	je     c0000840 <strncat+0x50>
c0000824:	42                   	inc    edx
c0000825:	41                   	inc    ecx
c0000826:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000829:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000082c:	84 db                	test   bl,bl
c000082e:	75 f0                	jne    c0000820 <strncat+0x30>
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000839:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000840:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000843:	5b                   	pop    ebx
c0000844:	5e                   	pop    esi
c0000845:	c3                   	ret    
c0000846:	8d 76 00             	lea    esi,[esi+0x0]
c0000849:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000850 <strstr>:
c0000850:	57                   	push   edi
c0000851:	56                   	push   esi
c0000852:	53                   	push   ebx
c0000853:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000857:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000085b:	57                   	push   edi
c000085c:	e8 df fc ff ff       	call   c0000540 <strlen>
c0000861:	59                   	pop    ecx
c0000862:	85 c0                	test   eax,eax
c0000864:	74 3a                	je     c00008a0 <strstr+0x50>
c0000866:	89 c6                	mov    esi,eax
c0000868:	eb 16                	jmp    c0000880 <strstr+0x30>
c000086a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000870:	56                   	push   esi
c0000871:	57                   	push   edi
c0000872:	53                   	push   ebx
c0000873:	e8 18 fb ff ff       	call   c0000390 <memcmp>
c0000878:	83 c4 0c             	add    esp,0xc
c000087b:	85 c0                	test   eax,eax
c000087d:	74 21                	je     c00008a0 <strstr+0x50>
c000087f:	43                   	inc    ebx
c0000880:	53                   	push   ebx
c0000881:	e8 ba fc ff ff       	call   c0000540 <strlen>
c0000886:	5a                   	pop    edx
c0000887:	39 f0                	cmp    eax,esi
c0000889:	73 e5                	jae    c0000870 <strstr+0x20>
c000088b:	5b                   	pop    ebx
c000088c:	31 c0                	xor    eax,eax
c000088e:	5e                   	pop    esi
c000088f:	5f                   	pop    edi
c0000890:	c3                   	ret    
c0000891:	eb 0d                	jmp    c00008a0 <strstr+0x50>
c0000893:	90                   	nop
c0000894:	90                   	nop
c0000895:	90                   	nop
c0000896:	90                   	nop
c0000897:	90                   	nop
c0000898:	90                   	nop
c0000899:	90                   	nop
c000089a:	90                   	nop
c000089b:	90                   	nop
c000089c:	90                   	nop
c000089d:	90                   	nop
c000089e:	90                   	nop
c000089f:	90                   	nop
c00008a0:	89 d8                	mov    eax,ebx
c00008a2:	5b                   	pop    ebx
c00008a3:	5e                   	pop    esi
c00008a4:	5f                   	pop    edi
c00008a5:	c3                   	ret    
c00008a6:	8d 76 00             	lea    esi,[esi+0x0]
c00008a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008b0 <toupper>:
c00008b0:	31 d2                	xor    edx,edx
c00008b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008b6:	88 c2                	mov    dl,al
c00008b8:	f6 82 60 c9 01 c0 02 	test   BYTE PTR [edx-0x3ffe36a0],0x2
c00008bf:	74 03                	je     c00008c4 <toupper+0x14>
c00008c1:	83 e8 20             	sub    eax,0x20
c00008c4:	c3                   	ret    
c00008c5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <tolower>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 60 c9 01 c0 01 	test   BYTE PTR [edx-0x3ffe36a0],0x1
c00008df:	74 03                	je     c00008e4 <tolower+0x14>
c00008e1:	83 c0 20             	add    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <simple_strtoul>:
c00008f0:	55                   	push   ebp
c00008f1:	57                   	push   edi
c00008f2:	56                   	push   esi
c00008f3:	53                   	push   ebx
c00008f4:	83 ec 08             	sub    esp,0x8
c00008f7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00008fb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00008ff:	90                   	nop
c0000900:	31 d2                	xor    edx,edx
c0000902:	8a 01                	mov    al,BYTE PTR [ecx]
c0000904:	88 c2                	mov    dl,al
c0000906:	f6 82 60 c9 01 c0 08 	test   BYTE PTR [edx-0x3ffe36a0],0x8
c000090d:	75 04                	jne    c0000913 <simple_strtoul+0x23>
c000090f:	3c 09                	cmp    al,0x9
c0000911:	75 0d                	jne    c0000920 <simple_strtoul+0x30>
c0000913:	41                   	inc    ecx
c0000914:	eb ea                	jmp    c0000900 <simple_strtoul+0x10>
c0000916:	8d 76 00             	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	3c 2d                	cmp    al,0x2d
c0000922:	0f 84 48 01 00 00    	je     c0000a70 <simple_strtoul+0x180>
c0000928:	3c 2b                	cmp    al,0x2b
c000092a:	0f 84 e0 00 00 00    	je     c0000a10 <simple_strtoul+0x120>
c0000930:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000938:	85 f6                	test   esi,esi
c000093a:	0f 85 e1 00 00 00    	jne    c0000a21 <simple_strtoul+0x131>
c0000940:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000943:	80 fa 30             	cmp    dl,0x30
c0000946:	0f 84 75 01 00 00    	je     c0000ac1 <simple_strtoul+0x1d1>
c000094c:	be 0a 00 00 00       	mov    esi,0xa
c0000951:	84 d2                	test   dl,dl
c0000953:	0f 84 9f 01 00 00    	je     c0000af8 <simple_strtoul+0x208>
c0000959:	31 ed                	xor    ebp,ebp
c000095b:	31 ff                	xor    edi,edi
c000095d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000964:	eb 35                	jmp    c000099b <simple_strtoul+0xab>
c0000966:	8d 76 00             	lea    esi,[esi+0x0]
c0000969:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000970:	83 eb 30             	sub    ebx,0x30
c0000973:	39 f3                	cmp    ebx,esi
c0000975:	73 59                	jae    c00009d0 <simple_strtoul+0xe0>
c0000977:	31 d2                	xor    edx,edx
c0000979:	89 d8                	mov    eax,ebx
c000097b:	f7 d0                	not    eax
c000097d:	f7 f6                	div    esi
c000097f:	39 f8                	cmp    eax,edi
c0000981:	0f 82 c9 00 00 00    	jb     c0000a50 <simple_strtoul+0x160>
c0000987:	0f af fe             	imul   edi,esi
c000098a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000991:	01 df                	add    edi,ebx
c0000993:	41                   	inc    ecx
c0000994:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000997:	84 d2                	test   dl,dl
c0000999:	74 35                	je     c00009d0 <simple_strtoul+0xe0>
c000099b:	31 db                	xor    ebx,ebx
c000099d:	88 d3                	mov    bl,dl
c000099f:	f6 83 60 c9 01 c0 04 	test   BYTE PTR [ebx-0x3ffe36a0],0x4
c00009a6:	75 c8                	jne    c0000970 <simple_strtoul+0x80>
c00009a8:	52                   	push   edx
c00009a9:	e8 02 ff ff ff       	call   c00008b0 <toupper>
c00009ae:	31 d2                	xor    edx,edx
c00009b0:	5b                   	pop    ebx
c00009b1:	88 c2                	mov    dl,al
c00009b3:	f6 82 60 c9 01 c0 01 	test   BYTE PTR [edx-0x3ffe36a0],0x1
c00009ba:	74 14                	je     c00009d0 <simple_strtoul+0xe0>
c00009bc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009bf:	39 f3                	cmp    ebx,esi
c00009c1:	72 b4                	jb     c0000977 <simple_strtoul+0x87>
c00009c3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009d4:	85 c0                	test   eax,eax
c00009d6:	74 18                	je     c00009f0 <simple_strtoul+0x100>
c00009d8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009db:	09 f8                	or     eax,edi
c00009dd:	0f 85 7d 00 00 00    	jne    c0000a60 <simple_strtoul+0x170>
c00009e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009e7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00009eb:	31 ff                	xor    edi,edi
c00009ed:	89 30                	mov    DWORD PTR [eax],esi
c00009ef:	90                   	nop
c00009f0:	4d                   	dec    ebp
c00009f1:	75 05                	jne    c00009f8 <simple_strtoul+0x108>
c00009f3:	bf ff ff ff ff       	mov    edi,0xffffffff
c00009f8:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c00009fd:	75 02                	jne    c0000a01 <simple_strtoul+0x111>
c00009ff:	f7 df                	neg    edi
c0000a01:	83 c4 08             	add    esp,0x8
c0000a04:	89 f8                	mov    eax,edi
c0000a06:	5b                   	pop    ebx
c0000a07:	5e                   	pop    esi
c0000a08:	5f                   	pop    edi
c0000a09:	5d                   	pop    ebp
c0000a0a:	c3                   	ret    
c0000a0b:	90                   	nop
c0000a0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a10:	41                   	inc    ecx
c0000a11:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a19:	85 f6                	test   esi,esi
c0000a1b:	0f 84 1f ff ff ff    	je     c0000940 <simple_strtoul+0x50>
c0000a21:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a24:	83 f8 22             	cmp    eax,0x22
c0000a27:	77 7b                	ja     c0000aa4 <simple_strtoul+0x1b4>
c0000a29:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a2c:	83 fe 08             	cmp    esi,0x8
c0000a2f:	0f 84 b3 00 00 00    	je     c0000ae8 <simple_strtoul+0x1f8>
c0000a35:	83 fe 10             	cmp    esi,0x10
c0000a38:	0f 85 13 ff ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000a3e:	80 fa 30             	cmp    dl,0x30
c0000a41:	74 3b                	je     c0000a7e <simple_strtoul+0x18e>
c0000a43:	be 10 00 00 00       	mov    esi,0x10
c0000a48:	e9 04 ff ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a50:	bd 01 00 00 00       	mov    ebp,0x1
c0000a55:	31 ff                	xor    edi,edi
c0000a57:	e9 37 ff ff ff       	jmp    c0000993 <simple_strtoul+0xa3>
c0000a5c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	89 08                	mov    DWORD PTR [eax],ecx
c0000a66:	eb 88                	jmp    c00009f0 <simple_strtoul+0x100>
c0000a68:	90                   	nop
c0000a69:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a70:	41                   	inc    ecx
c0000a71:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a79:	e9 ba fe ff ff       	jmp    c0000938 <simple_strtoul+0x48>
c0000a7e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000a82:	88 04 24             	mov    BYTE PTR [esp],al
c0000a85:	50                   	push   eax
c0000a86:	e8 45 fe ff ff       	call   c00008d0 <tolower>
c0000a8b:	5e                   	pop    esi
c0000a8c:	83 f8 78             	cmp    eax,0x78
c0000a8f:	0f 84 88 00 00 00    	je     c0000b1d <simple_strtoul+0x22d>
c0000a95:	41                   	inc    ecx
c0000a96:	be 10 00 00 00       	mov    esi,0x10
c0000a9b:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000a9f:	e9 ad fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000aa4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000aa8:	85 ff                	test   edi,edi
c0000aaa:	74 5e                	je     c0000b0a <simple_strtoul+0x21a>
c0000aac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ab0:	85 c9                	test   ecx,ecx
c0000ab2:	75 50                	jne    c0000b04 <simple_strtoul+0x214>
c0000ab4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000aba:	31 ff                	xor    edi,edi
c0000abc:	e9 37 ff ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000ac1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ac5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ac8:	50                   	push   eax
c0000ac9:	e8 02 fe ff ff       	call   c00008d0 <tolower>
c0000ace:	5d                   	pop    ebp
c0000acf:	83 f8 78             	cmp    eax,0x78
c0000ad2:	74 3d                	je     c0000b11 <simple_strtoul+0x221>
c0000ad4:	41                   	inc    ecx
c0000ad5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000ad9:	80 fa 30             	cmp    dl,0x30
c0000adc:	74 13                	je     c0000af1 <simple_strtoul+0x201>
c0000ade:	be 08 00 00 00       	mov    esi,0x8
c0000ae3:	e9 69 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>
c0000ae8:	80 fa 30             	cmp    dl,0x30
c0000aeb:	0f 85 60 fe ff ff    	jne    c0000951 <simple_strtoul+0x61>
c0000af1:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000af5:	41                   	inc    ecx
c0000af6:	eb e6                	jmp    c0000ade <simple_strtoul+0x1ee>
c0000af8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000afc:	85 d2                	test   edx,edx
c0000afe:	74 0a                	je     c0000b0a <simple_strtoul+0x21a>
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b08:	89 30                	mov    DWORD PTR [eax],esi
c0000b0a:	31 ff                	xor    edi,edi
c0000b0c:	e9 e7 fe ff ff       	jmp    c00009f8 <simple_strtoul+0x108>
c0000b11:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b15:	83 c1 02             	add    ecx,0x2
c0000b18:	e9 21 ff ff ff       	jmp    c0000a3e <simple_strtoul+0x14e>
c0000b1d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b21:	be 10 00 00 00       	mov    esi,0x10
c0000b26:	83 c1 02             	add    ecx,0x2
c0000b29:	e9 23 fe ff ff       	jmp    c0000951 <simple_strtoul+0x61>

c0000b2e <largebin_index>:
c0000b2e:	89 c2                	mov    edx,eax
c0000b30:	c1 ea 08             	shr    edx,0x8
c0000b33:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b39:	77 10                	ja     c0000b4b <largebin_index+0x1d>
c0000b3b:	0f bd d2             	bsr    edx,edx
c0000b3e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b41:	d3 e8                	shr    eax,cl
c0000b43:	83 e0 03             	and    eax,0x3
c0000b46:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b4a:	c3                   	ret    
c0000b4b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b50:	c3                   	ret    

c0000b51 <malloc_init_state>:
c0000b51:	53                   	push   ebx
c0000b52:	8d 50 34             	lea    edx,[eax+0x34]
c0000b55:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b5b:	89 d1                	mov    ecx,edx
c0000b5d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b60:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b63:	83 c2 08             	add    edx,0x8
c0000b66:	39 da                	cmp    edx,ebx
c0000b68:	75 f3                	jne    c0000b5d <malloc_init_state+0xc>
c0000b6a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b6c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b76:	83 e2 03             	and    edx,0x3
c0000b79:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000b83:	83 ca 48             	or     edx,0x48
c0000b86:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000b90:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000b9a:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000ba1:	89 10                	mov    DWORD PTR [eax],edx
c0000ba3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000ba6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bb0:	5b                   	pop    ebx
c0000bb1:	c3                   	ret    

c0000bb2 <malloc_consolidate>:
c0000bb2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bb4:	85 d2                	test   edx,edx
c0000bb6:	0f 84 d8 00 00 00    	je     c0000c94 <malloc_consolidate+0xe2>
c0000bbc:	55                   	push   ebp
c0000bbd:	83 e2 fd             	and    edx,0xfffffffd
c0000bc0:	57                   	push   edi
c0000bc1:	89 c5                	mov    ebp,eax
c0000bc3:	56                   	push   esi
c0000bc4:	8d 78 34             	lea    edi,[eax+0x34]
c0000bc7:	53                   	push   ebx
c0000bc8:	83 ec 10             	sub    esp,0x10
c0000bcb:	89 10                	mov    DWORD PTR [eax],edx
c0000bcd:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bd1:	c1 ea 03             	shr    edx,0x3
c0000bd4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bd8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bdc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bdf:	85 d2                	test   edx,edx
c0000be1:	0f 84 98 00 00 00    	je     c0000c7f <malloc_consolidate+0xcd>
c0000be7:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000bee:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000bf1:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000bf4:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000bf8:	89 f9                	mov    ecx,edi
c0000bfa:	83 e1 fe             	and    ecx,0xfffffffe
c0000bfd:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c00:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c03:	83 e3 fc             	and    ebx,0xfffffffc
c0000c06:	83 e7 01             	and    edi,0x1
c0000c09:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c0c:	75 14                	jne    c0000c22 <malloc_consolidate+0x70>
c0000c0e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c10:	29 fa                	sub    edx,edi
c0000c12:	01 f9                	add    ecx,edi
c0000c14:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c17:	89 fb                	mov    ebx,edi
c0000c19:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c1c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c1f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c22:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c25:	74 40                	je     c0000c67 <malloc_consolidate+0xb5>
c0000c27:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c2a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c2d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c31:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c34:	83 e7 01             	and    edi,0x1
c0000c37:	75 0e                	jne    c0000c47 <malloc_consolidate+0x95>
c0000c39:	01 d9                	add    ecx,ebx
c0000c3b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c3e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c41:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c44:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c47:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c4a:	89 ce                	mov    esi,ecx
c0000c4c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c4f:	83 ce 01             	or     esi,0x1
c0000c52:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c55:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c58:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c5b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c5f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c62:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c65:	eb 0c                	jmp    c0000c73 <malloc_consolidate+0xc1>
c0000c67:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c6a:	83 c9 01             	or     ecx,0x1
c0000c6d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c70:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c73:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c77:	85 d2                	test   edx,edx
c0000c79:	0f 85 6f ff ff ff    	jne    c0000bee <malloc_consolidate+0x3c>
c0000c7f:	83 c5 04             	add    ebp,0x4
c0000c82:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000c86:	0f 85 50 ff ff ff    	jne    c0000bdc <malloc_consolidate+0x2a>
c0000c8c:	83 c4 10             	add    esp,0x10
c0000c8f:	5b                   	pop    ebx
c0000c90:	5e                   	pop    esi
c0000c91:	5f                   	pop    edi
c0000c92:	5d                   	pop    ebp
c0000c93:	c3                   	ret    
c0000c94:	e9 b8 fe ff ff       	jmp    c0000b51 <malloc_init_state>

c0000c99 <dlfree>:
c0000c99:	57                   	push   edi
c0000c9a:	56                   	push   esi
c0000c9b:	53                   	push   ebx
c0000c9c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000ca0:	85 db                	test   ebx,ebx
c0000ca2:	0f 84 e2 00 00 00    	je     c0000d8a <dlfree+0xf1>
c0000ca8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000cab:	8b 0d 20 f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f720
c0000cb1:	89 f0                	mov    eax,esi
c0000cb3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cb6:	83 e0 fc             	and    eax,0xfffffffc
c0000cb9:	39 c1                	cmp    ecx,eax
c0000cbb:	72 24                	jb     c0000ce1 <dlfree+0x48>
c0000cbd:	83 c9 03             	or     ecx,0x3
c0000cc0:	c1 e8 03             	shr    eax,0x3
c0000cc3:	89 0d 20 f7 01 c0    	mov    DWORD PTR ds:0xc001f720,ecx
c0000cc9:	83 e8 02             	sub    eax,0x2
c0000ccc:	8b 0c 85 24 f7 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe08dc]
c0000cd3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cd5:	89 14 85 24 f7 01 c0 	mov    DWORD PTR [eax*4-0x3ffe08dc],edx
c0000cdc:	e9 a9 00 00 00       	jmp    c0000d8a <dlfree+0xf1>
c0000ce1:	83 e6 02             	and    esi,0x2
c0000ce4:	0f 85 a0 00 00 00    	jne    c0000d8a <dlfree+0xf1>
c0000cea:	83 c9 01             	or     ecx,0x1
c0000ced:	8d 34 02             	lea    esi,[edx+eax*1]
c0000cf0:	89 0d 20 f7 01 c0    	mov    DWORD PTR ds:0xc001f720,ecx
c0000cf6:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000cf9:	83 e1 fc             	and    ecx,0xfffffffc
c0000cfc:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d00:	75 13                	jne    c0000d15 <dlfree+0x7c>
c0000d02:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d05:	29 da                	sub    edx,ebx
c0000d07:	01 d8                	add    eax,ebx
c0000d09:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d0c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d0f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d12:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d15:	39 35 4c f7 01 c0    	cmp    DWORD PTR ds:0xc001f74c,esi
c0000d1b:	74 40                	je     c0000d5d <dlfree+0xc4>
c0000d1d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d21:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d24:	80 e3 01             	and    bl,0x1
c0000d27:	75 0e                	jne    c0000d37 <dlfree+0x9e>
c0000d29:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d2c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d2f:	01 c8                	add    eax,ecx
c0000d31:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d34:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d37:	8b 0d 5c f7 01 c0    	mov    ecx,DWORD PTR ds:0xc001f75c
c0000d3d:	c7 42 0c 54 f7 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f754
c0000d44:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d47:	89 15 5c f7 01 c0    	mov    DWORD PTR ds:0xc001f75c,edx
c0000d4d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d50:	89 c1                	mov    ecx,eax
c0000d52:	83 c9 01             	or     ecx,0x1
c0000d55:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d58:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d5b:	eb 10                	jmp    c0000d6d <dlfree+0xd4>
c0000d5d:	01 c8                	add    eax,ecx
c0000d5f:	89 c1                	mov    ecx,eax
c0000d61:	83 c9 01             	or     ecx,0x1
c0000d64:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d67:	89 15 4c f7 01 c0    	mov    DWORD PTR ds:0xc001f74c,edx
c0000d6d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d72:	76 16                	jbe    c0000d8a <dlfree+0xf1>
c0000d74:	f6 05 20 f7 01 c0 02 	test   BYTE PTR ds:0xc001f720,0x2
c0000d7b:	74 0d                	je     c0000d8a <dlfree+0xf1>
c0000d7d:	5b                   	pop    ebx
c0000d7e:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c0000d83:	5e                   	pop    esi
c0000d84:	5f                   	pop    edi
c0000d85:	e9 28 fe ff ff       	jmp    c0000bb2 <malloc_consolidate>
c0000d8a:	5b                   	pop    ebx
c0000d8b:	5e                   	pop    esi
c0000d8c:	5f                   	pop    edi
c0000d8d:	c3                   	ret    

c0000d8e <sYSMALLOc>:
c0000d8e:	55                   	push   ebp
c0000d8f:	57                   	push   edi
c0000d90:	56                   	push   esi
c0000d91:	53                   	push   ebx
c0000d92:	89 d3                	mov    ebx,edx
c0000d94:	83 ec 2c             	sub    esp,0x2c
c0000d97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000d9b:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000da1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000da4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000da7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dab:	74 1f                	je     c0000dcc <sYSMALLOc+0x3e>
c0000dad:	89 d8                	mov    eax,ebx
c0000daf:	e8 fe fd ff ff       	call   c0000bb2 <malloc_consolidate>
c0000db4:	83 ec 0c             	sub    esp,0xc
c0000db7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000dbb:	83 e8 07             	sub    eax,0x7
c0000dbe:	50                   	push   eax
c0000dbf:	e8 30 02 00 00       	call   c0000ff4 <dlmalloc>
c0000dc4:	83 c4 10             	add    esp,0x10
c0000dc7:	e9 20 02 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000dcc:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000dcf:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000dd5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000dd8:	83 e0 fc             	and    eax,0xfffffffc
c0000ddb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ddf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000de3:	83 c0 10             	add    eax,0x10
c0000de6:	01 c1                	add    ecx,eax
c0000de8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000dec:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000df3:	74 04                	je     c0000df9 <sYSMALLOc+0x6b>
c0000df5:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000df9:	f7 da                	neg    edx
c0000dfb:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000dff:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e03:	21 d1                	and    ecx,edx
c0000e05:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e09:	7f 07                	jg     c0000e12 <sYSMALLOc+0x84>
c0000e0b:	31 c0                	xor    eax,eax
c0000e0d:	e9 da 01 00 00       	jmp    c0000fec <sYSMALLOc+0x25e>
c0000e12:	83 ec 0c             	sub    esp,0xc
c0000e15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e19:	e8 72 68 00 00       	call   c0007690 <sbrk>
c0000e1e:	83 c4 10             	add    esp,0x10
c0000e21:	89 c6                	mov    esi,eax
c0000e23:	83 f8 ff             	cmp    eax,0xffffffff
c0000e26:	74 e3                	je     c0000e0b <sYSMALLOc+0x7d>
c0000e28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e2c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e30:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e33:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e39:	39 f1                	cmp    ecx,esi
c0000e3b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e41:	75 13                	jne    c0000e56 <sYSMALLOc+0xc8>
c0000e43:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e47:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e4b:	83 c8 01             	or     eax,0x1
c0000e4e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e51:	e9 3e 01 00 00       	jmp    c0000f94 <sYSMALLOc+0x206>
c0000e56:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e5c:	88 d0                	mov    al,dl
c0000e5e:	83 e0 01             	and    eax,0x1
c0000e61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e66:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e6a:	0f 95 c0             	setne  al
c0000e6d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e71:	39 f1                	cmp    ecx,esi
c0000e73:	76 12                	jbe    c0000e87 <sYSMALLOc+0xf9>
c0000e75:	84 c0                	test   al,al
c0000e77:	74 0e                	je     c0000e87 <sYSMALLOc+0xf9>
c0000e79:	83 e2 fe             	and    edx,0xfffffffe
c0000e7c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000e82:	e9 83 00 00 00       	jmp    c0000f0a <sYSMALLOc+0x17c>
c0000e87:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000e8c:	74 7c                	je     c0000f0a <sYSMALLOc+0x17c>
c0000e8e:	84 c0                	test   al,al
c0000e90:	74 0c                	je     c0000e9e <sYSMALLOc+0x110>
c0000e92:	89 f0                	mov    eax,esi
c0000e94:	29 c8                	sub    eax,ecx
c0000e96:	01 e8                	add    eax,ebp
c0000e98:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000e9e:	89 f2                	mov    edx,esi
c0000ea0:	83 e2 07             	and    edx,0x7
c0000ea3:	74 0c                	je     c0000eb1 <sYSMALLOc+0x123>
c0000ea5:	b8 08 00 00 00       	mov    eax,0x8
c0000eaa:	29 d0                	sub    eax,edx
c0000eac:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000eaf:	eb 04                	jmp    c0000eb5 <sYSMALLOc+0x127>
c0000eb1:	89 f5                	mov    ebp,esi
c0000eb3:	31 c0                	xor    eax,eax
c0000eb5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000eb9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000ebd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ec1:	01 c1                	add    ecx,eax
c0000ec3:	83 ec 0c             	sub    esp,0xc
c0000ec6:	01 f1                	add    ecx,esi
c0000ec8:	01 ca                	add    edx,ecx
c0000eca:	29 c8                	sub    eax,ecx
c0000ecc:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ed0:	01 c2                	add    edx,eax
c0000ed2:	52                   	push   edx
c0000ed3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ed7:	e8 b4 67 00 00       	call   c0007690 <sbrk>
c0000edc:	83 c4 10             	add    esp,0x10
c0000edf:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee6:	75 0f                	jne    c0000ef7 <sYSMALLOc+0x169>
c0000ee8:	83 ec 0c             	sub    esp,0xc
c0000eeb:	6a 00                	push   0x0
c0000eed:	e8 9e 67 00 00       	call   c0007690 <sbrk>
c0000ef2:	83 c4 10             	add    esp,0x10
c0000ef5:	eb 30                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000ef7:	39 c6                	cmp    esi,eax
c0000ef9:	76 33                	jbe    c0000f2e <sYSMALLOc+0x1a0>
c0000efb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eff:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f06:	01 f0                	add    eax,esi
c0000f08:	eb 1d                	jmp    c0000f27 <sYSMALLOc+0x199>
c0000f0a:	83 ec 0c             	sub    esp,0xc
c0000f0d:	89 f5                	mov    ebp,esi
c0000f0f:	6a 00                	push   0x0
c0000f11:	e8 7a 67 00 00       	call   c0007690 <sbrk>
c0000f16:	89 c2                	mov    edx,eax
c0000f18:	29 f2                	sub    edx,esi
c0000f1a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f1e:	83 c4 10             	add    esp,0x10
c0000f21:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f27:	31 d2                	xor    edx,edx
c0000f29:	83 f8 ff             	cmp    eax,0xffffffff
c0000f2c:	74 66                	je     c0000f94 <sYSMALLOc+0x206>
c0000f2e:	29 e8                	sub    eax,ebp
c0000f30:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f33:	01 d0                	add    eax,edx
c0000f35:	83 c8 01             	or     eax,0x1
c0000f38:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f3b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f41:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f46:	74 4c                	je     c0000f94 <sYSMALLOc+0x206>
c0000f48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4c:	83 e8 0c             	sub    eax,0xc
c0000f4f:	83 e0 f8             	and    eax,0xfffffff8
c0000f52:	89 c2                	mov    edx,eax
c0000f54:	83 ca 01             	or     edx,0x1
c0000f57:	83 f8 0f             	cmp    eax,0xf
c0000f5a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f5d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f65:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f6d:	76 25                	jbe    c0000f94 <sYSMALLOc+0x206>
c0000f6f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f75:	83 ec 0c             	sub    esp,0xc
c0000f78:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000f82:	83 c7 08             	add    edi,0x8
c0000f85:	57                   	push   edi
c0000f86:	e8 0e fd ff ff       	call   c0000c99 <dlfree>
c0000f8b:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000f91:	83 c4 10             	add    esp,0x10
c0000f94:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000f9a:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fa0:	73 06                	jae    c0000fa8 <sYSMALLOc+0x21a>
c0000fa2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fa8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fae:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fb4:	73 06                	jae    c0000fbc <sYSMALLOc+0x22e>
c0000fb6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fbc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fbf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fc2:	83 e2 fc             	and    edx,0xfffffffc
c0000fc5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fc9:	0f 82 3c fe ff ff    	jb     c0000e0b <sYSMALLOc+0x7d>
c0000fcf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000fd3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000fd6:	29 fa                	sub    edx,edi
c0000fd8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000fdb:	83 ca 01             	or     edx,0x1
c0000fde:	89 fb                	mov    ebx,edi
c0000fe0:	83 c0 08             	add    eax,0x8
c0000fe3:	83 cb 01             	or     ebx,0x1
c0000fe6:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0000fe9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0000fec:	83 c4 2c             	add    esp,0x2c
c0000fef:	5b                   	pop    ebx
c0000ff0:	5e                   	pop    esi
c0000ff1:	5f                   	pop    edi
c0000ff2:	5d                   	pop    ebp
c0000ff3:	c3                   	ret    

c0000ff4 <dlmalloc>:
c0000ff4:	55                   	push   ebp
c0000ff5:	57                   	push   edi
c0000ff6:	56                   	push   esi
c0000ff7:	53                   	push   ebx
c0000ff8:	83 ec 1c             	sub    esp,0x1c
c0000ffb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0000fff:	83 f8 df             	cmp    eax,0xffffffdf
c0001002:	0f 87 70 03 00 00    	ja     c0001378 <dlmalloc+0x384>
c0001008:	83 c0 0b             	add    eax,0xb
c000100b:	be 10 00 00 00       	mov    esi,0x10
c0001010:	83 f8 0f             	cmp    eax,0xf
c0001013:	76 05                	jbe    c000101a <dlmalloc+0x26>
c0001015:	83 e0 f8             	and    eax,0xfffffff8
c0001018:	89 c6                	mov    esi,eax
c000101a:	8b 3d 20 f7 01 c0    	mov    edi,DWORD PTR ds:0xc001f720
c0001020:	f7 c7 01 00 00 00    	test   edi,0x1
c0001026:	75 17                	jne    c000103f <dlmalloc+0x4b>
c0001028:	85 ff                	test   edi,edi
c000102a:	0f 85 05 03 00 00    	jne    c0001335 <dlmalloc+0x341>
c0001030:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c0001035:	e8 78 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c000103a:	e9 f6 02 00 00       	jmp    c0001335 <dlmalloc+0x341>
c000103f:	39 f7                	cmp    edi,esi
c0001041:	72 1f                	jb     c0001062 <dlmalloc+0x6e>
c0001043:	89 f2                	mov    edx,esi
c0001045:	c1 ea 03             	shr    edx,0x3
c0001048:	83 ea 02             	sub    edx,0x2
c000104b:	8b 04 95 24 f7 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe08dc]
c0001052:	85 c0                	test   eax,eax
c0001054:	74 0c                	je     c0001062 <dlmalloc+0x6e>
c0001056:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001059:	89 0c 95 24 f7 01 c0 	mov    DWORD PTR [edx*4-0x3ffe08dc],ecx
c0001060:	eb 30                	jmp    c0001092 <dlmalloc+0x9e>
c0001062:	89 f0                	mov    eax,esi
c0001064:	81 fe ff 00 00 00    	cmp    esi,0xff
c000106a:	77 2e                	ja     c000109a <dlmalloc+0xa6>
c000106c:	c1 e8 03             	shr    eax,0x3
c000106f:	8d 14 c5 54 f7 01 c0 	lea    edx,[eax*8-0x3ffe08ac]
c0001076:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000107a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000107d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001080:	39 c3                	cmp    ebx,eax
c0001082:	74 2e                	je     c00010b2 <dlmalloc+0xbe>
c0001084:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0001087:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c000108c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c000108f:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001092:	83 c0 08             	add    eax,0x8
c0001095:	e9 e0 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c000109a:	e8 8f fa ff ff       	call   c0000b2e <largebin_index>
c000109f:	83 e7 02             	and    edi,0x2
c00010a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010a6:	74 0a                	je     c00010b2 <dlmalloc+0xbe>
c00010a8:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c00010ad:	e8 00 fb ff ff       	call   c0000bb2 <malloc_consolidate>
c00010b2:	8d 46 10             	lea    eax,[esi+0x10]
c00010b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010b9:	8b 1d 60 f7 01 c0    	mov    ebx,DWORD PTR ds:0xc001f760
c00010bf:	81 fb 54 f7 01 c0    	cmp    ebx,0xc001f754
c00010c5:	0f 84 13 01 00 00    	je     c00011de <dlmalloc+0x1ea>
c00010cb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ce:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010d1:	83 e7 fc             	and    edi,0xfffffffc
c00010d4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010da:	77 4c                	ja     c0001128 <dlmalloc+0x134>
c00010dc:	3d 54 f7 01 c0       	cmp    eax,0xc001f754
c00010e1:	75 45                	jne    c0001128 <dlmalloc+0x134>
c00010e3:	39 1d 50 f7 01 c0    	cmp    DWORD PTR ds:0xc001f750,ebx
c00010e9:	75 3d                	jne    c0001128 <dlmalloc+0x134>
c00010eb:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00010ef:	73 37                	jae    c0001128 <dlmalloc+0x134>
c00010f1:	8d 04 33             	lea    eax,[ebx+esi*1]
c00010f4:	89 fa                	mov    edx,edi
c00010f6:	a3 5c f7 01 c0       	mov    ds:0xc001f75c,eax
c00010fb:	a3 60 f7 01 c0       	mov    ds:0xc001f760,eax
c0001100:	a3 50 f7 01 c0       	mov    ds:0xc001f750,eax
c0001105:	29 f2                	sub    edx,esi
c0001107:	c7 40 08 54 f7 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f754
c000110e:	c7 40 0c 54 f7 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f754
c0001115:	83 ce 01             	or     esi,0x1
c0001118:	89 d1                	mov    ecx,edx
c000111a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000111d:	83 c9 01             	or     ecx,0x1
c0001120:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001123:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001126:	eb 15                	jmp    c000113d <dlmalloc+0x149>
c0001128:	a3 60 f7 01 c0       	mov    ds:0xc001f760,eax
c000112d:	39 fe                	cmp    esi,edi
c000112f:	c7 40 08 54 f7 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f754
c0001136:	75 0d                	jne    c0001145 <dlmalloc+0x151>
c0001138:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000113d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001140:	e9 35 02 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001145:	89 f8                	mov    eax,edi
c0001147:	81 ff ff 00 00 00    	cmp    edi,0xff
c000114d:	77 19                	ja     c0001168 <dlmalloc+0x174>
c000114f:	c1 e8 03             	shr    eax,0x3
c0001152:	8d 14 00             	lea    edx,[eax+eax*1]
c0001155:	83 c2 0d             	add    edx,0xd
c0001158:	8d 2c 95 18 f7 01 c0 	lea    ebp,[edx*4-0x3ffe08e8]
c000115f:	8b 14 95 20 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08e0]
c0001166:	eb 46                	jmp    c00011ae <dlmalloc+0x1ba>
c0001168:	e8 c1 f9 ff ff       	call   c0000b2e <largebin_index>
c000116d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001170:	83 c2 0d             	add    edx,0xd
c0001173:	8d 0c 95 20 f7 01 c0 	lea    ecx,[edx*4-0x3ffe08e0]
c000117a:	8b 14 95 20 f7 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe08e0]
c0001181:	8d 69 f8             	lea    ebp,[ecx-0x8]
c0001184:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0001188:	89 d5                	mov    ebp,edx
c000118a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c000118e:	74 1e                	je     c00011ae <dlmalloc+0x1ba>
c0001190:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c0001193:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c0001196:	77 12                	ja     c00011aa <dlmalloc+0x1b6>
c0001198:	83 cf 01             	or     edi,0x1
c000119b:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c000119e:	76 05                	jbe    c00011a5 <dlmalloc+0x1b1>
c00011a0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011a3:	eb f6                	jmp    c000119b <dlmalloc+0x1a7>
c00011a5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011a8:	eb 04                	jmp    c00011ae <dlmalloc+0x1ba>
c00011aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ae:	89 c7                	mov    edi,eax
c00011b0:	88 c1                	mov    cl,al
c00011b2:	c1 ff 05             	sar    edi,0x5
c00011b5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011b9:	bf 01 00 00 00       	mov    edi,0x1
c00011be:	d3 e7                	shl    edi,cl
c00011c0:	89 f8                	mov    eax,edi
c00011c2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011c6:	09 04 bd 54 fa 01 c0 	or     DWORD PTR [edi*4-0x3ffe05ac],eax
c00011cd:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011d0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011d3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011d6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011d9:	e9 db fe ff ff       	jmp    c00010b9 <dlmalloc+0xc5>
c00011de:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011e4:	76 78                	jbe    c000125e <dlmalloc+0x26a>
c00011e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00011ea:	8d 04 c5 54 f7 01 c0 	lea    eax,[eax*8-0x3ffe08ac]
c00011f1:	8d 48 f8             	lea    ecx,[eax-0x8]
c00011f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00011f7:	39 ca                	cmp    edx,ecx
c00011f9:	74 63                	je     c000125e <dlmalloc+0x26a>
c00011fb:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00011fe:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001201:	83 e3 fc             	and    ebx,0xfffffffc
c0001204:	39 de                	cmp    esi,ebx
c0001206:	77 52                	ja     c000125a <dlmalloc+0x266>
c0001208:	89 df                	mov    edi,ebx
c000120a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000120d:	29 f7                	sub    edi,esi
c000120f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001212:	01 d3                	add    ebx,edx
c0001214:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001217:	83 ff 0f             	cmp    edi,0xf
c000121a:	8d 42 08             	lea    eax,[edx+0x8]
c000121d:	77 09                	ja     c0001228 <dlmalloc+0x234>
c000121f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001223:	e9 52 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c0001228:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000122b:	83 ce 01             	or     esi,0x1
c000122e:	89 0d 5c f7 01 c0    	mov    DWORD PTR ds:0xc001f75c,ecx
c0001234:	89 0d 60 f7 01 c0    	mov    DWORD PTR ds:0xc001f760,ecx
c000123a:	c7 41 08 54 f7 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f754
c0001241:	c7 41 0c 54 f7 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f754
c0001248:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000124b:	89 fa                	mov    edx,edi
c000124d:	83 ca 01             	or     edx,0x1
c0001250:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001253:	89 3b                	mov    DWORD PTR [ebx],edi
c0001255:	e9 20 01 00 00       	jmp    c000137a <dlmalloc+0x386>
c000125a:	89 c2                	mov    edx,eax
c000125c:	eb 99                	jmp    c00011f7 <dlmalloc+0x203>
c000125e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001262:	b8 01 00 00 00       	mov    eax,0x1
c0001267:	41                   	inc    ecx
c0001268:	89 cb                	mov    ebx,ecx
c000126a:	8d 14 cd 4c f7 01 c0 	lea    edx,[ecx*8-0x3ffe08b4]
c0001271:	c1 eb 05             	shr    ebx,0x5
c0001274:	d3 e0                	shl    eax,cl
c0001276:	8b 3c 9d 54 fa 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe05ac]
c000127d:	39 f8                	cmp    eax,edi
c000127f:	77 04                	ja     c0001285 <dlmalloc+0x291>
c0001281:	85 c0                	test   eax,eax
c0001283:	75 26                	jne    c00012ab <dlmalloc+0x2b7>
c0001285:	43                   	inc    ebx
c0001286:	83 fb 02             	cmp    ebx,0x2
c0001289:	0f 87 a6 00 00 00    	ja     c0001335 <dlmalloc+0x341>
c000128f:	8b 3c 9d 54 fa 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe05ac]
c0001296:	85 ff                	test   edi,edi
c0001298:	74 eb                	je     c0001285 <dlmalloc+0x291>
c000129a:	89 d8                	mov    eax,ebx
c000129c:	c1 e0 06             	shl    eax,0x6
c000129f:	8d 14 85 4c f7 01 c0 	lea    edx,[eax*4-0x3ffe08b4]
c00012a6:	b8 01 00 00 00       	mov    eax,0x1
c00012ab:	85 f8                	test   eax,edi
c00012ad:	75 07                	jne    c00012b6 <dlmalloc+0x2c2>
c00012af:	83 c2 08             	add    edx,0x8
c00012b2:	01 c0                	add    eax,eax
c00012b4:	eb f5                	jmp    c00012ab <dlmalloc+0x2b7>
c00012b6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012b9:	39 ca                	cmp    edx,ecx
c00012bb:	75 14                	jne    c00012d1 <dlmalloc+0x2dd>
c00012bd:	89 c1                	mov    ecx,eax
c00012bf:	83 c2 08             	add    edx,0x8
c00012c2:	f7 d1                	not    ecx
c00012c4:	01 c0                	add    eax,eax
c00012c6:	21 cf                	and    edi,ecx
c00012c8:	89 3c 9d 54 fa 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe05ac],edi
c00012cf:	eb ac                	jmp    c000127d <dlmalloc+0x289>
c00012d1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012d4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012d7:	83 e0 fc             	and    eax,0xfffffffc
c00012da:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012dd:	89 c3                	mov    ebx,eax
c00012df:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00012e2:	29 f3                	sub    ebx,esi
c00012e4:	8d 14 01             	lea    edx,[ecx+eax*1]
c00012e7:	83 fb 0f             	cmp    ebx,0xf
c00012ea:	8d 41 08             	lea    eax,[ecx+0x8]
c00012ed:	77 09                	ja     c00012f8 <dlmalloc+0x304>
c00012ef:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00012f3:	e9 82 00 00 00       	jmp    c000137a <dlmalloc+0x386>
c00012f8:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00012fb:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001301:	89 3d 5c f7 01 c0    	mov    DWORD PTR ds:0xc001f75c,edi
c0001307:	89 3d 60 f7 01 c0    	mov    DWORD PTR ds:0xc001f760,edi
c000130d:	c7 47 08 54 f7 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f754
c0001314:	c7 47 0c 54 f7 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f754
c000131b:	77 06                	ja     c0001323 <dlmalloc+0x32f>
c000131d:	89 3d 50 f7 01 c0    	mov    DWORD PTR ds:0xc001f750,edi
c0001323:	83 ce 01             	or     esi,0x1
c0001326:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001329:	89 d9                	mov    ecx,ebx
c000132b:	83 c9 01             	or     ecx,0x1
c000132e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001331:	89 1a                	mov    DWORD PTR [edx],ebx
c0001333:	eb 45                	jmp    c000137a <dlmalloc+0x386>
c0001335:	a1 4c f7 01 c0       	mov    eax,ds:0xc001f74c
c000133a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000133d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001340:	83 e2 fc             	and    edx,0xfffffffc
c0001343:	39 d1                	cmp    ecx,edx
c0001345:	77 1e                	ja     c0001365 <dlmalloc+0x371>
c0001347:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000134a:	89 f3                	mov    ebx,esi
c000134c:	89 0d 4c f7 01 c0    	mov    DWORD PTR ds:0xc001f74c,ecx
c0001352:	83 cb 01             	or     ebx,0x1
c0001355:	29 f2                	sub    edx,esi
c0001357:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000135a:	83 ca 01             	or     edx,0x1
c000135d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001360:	e9 2d fd ff ff       	jmp    c0001092 <dlmalloc+0x9e>
c0001365:	83 c4 1c             	add    esp,0x1c
c0001368:	89 f0                	mov    eax,esi
c000136a:	5b                   	pop    ebx
c000136b:	ba 20 f7 01 c0       	mov    edx,0xc001f720
c0001370:	5e                   	pop    esi
c0001371:	5f                   	pop    edi
c0001372:	5d                   	pop    ebp
c0001373:	e9 16 fa ff ff       	jmp    c0000d8e <sYSMALLOc>
c0001378:	31 c0                	xor    eax,eax
c000137a:	83 c4 1c             	add    esp,0x1c
c000137d:	5b                   	pop    ebx
c000137e:	5e                   	pop    esi
c000137f:	5f                   	pop    edi
c0001380:	5d                   	pop    ebp
c0001381:	c3                   	ret    

c0001382 <iALLOc>:
c0001382:	55                   	push   ebp
c0001383:	89 c5                	mov    ebp,eax
c0001385:	57                   	push   edi
c0001386:	56                   	push   esi
c0001387:	53                   	push   ebx
c0001388:	83 ec 2c             	sub    esp,0x2c
c000138b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000138f:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0001393:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001397:	83 3d 20 f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f720,0x0
c000139e:	75 12                	jne    c00013b2 <iALLOc+0x30>
c00013a0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013a4:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c00013a9:	e8 04 f8 ff ff       	call   c0000bb2 <malloc_consolidate>
c00013ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013b2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013b7:	74 12                	je     c00013cb <iALLOc+0x49>
c00013b9:	85 ed                	test   ebp,ebp
c00013bb:	0f 84 64 01 00 00    	je     c0001525 <iALLOc+0x1a3>
c00013c1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013c9:	eb 33                	jmp    c00013fe <iALLOc+0x7c>
c00013cb:	85 ed                	test   ebp,ebp
c00013cd:	75 14                	jne    c00013e3 <iALLOc+0x61>
c00013cf:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013d7:	83 c4 2c             	add    esp,0x2c
c00013da:	5b                   	pop    ebx
c00013db:	5e                   	pop    esi
c00013dc:	5f                   	pop    edi
c00013dd:	5d                   	pop    ebp
c00013de:	e9 11 fc ff ff       	jmp    c0000ff4 <dlmalloc>
c00013e3:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00013ea:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00013f2:	83 f8 0f             	cmp    eax,0xf
c00013f5:	76 07                	jbe    c00013fe <iALLOc+0x7c>
c00013f7:	83 e0 f8             	and    eax,0xfffffff8
c00013fa:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00013fe:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001403:	75 09                	jne    c000140e <iALLOc+0x8c>
c0001405:	89 d0                	mov    eax,edx
c0001407:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000140a:	31 f6                	xor    esi,esi
c000140c:	eb 3b                	jmp    c0001449 <iALLOc+0xc7>
c000140e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001410:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001418:	83 c0 0b             	add    eax,0xb
c000141b:	83 f8 0f             	cmp    eax,0xf
c000141e:	76 07                	jbe    c0001427 <iALLOc+0xa5>
c0001420:	83 e0 f8             	and    eax,0xfffffff8
c0001423:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001427:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000142b:	0f af f5             	imul   esi,ebp
c000142e:	eb 25                	jmp    c0001455 <iALLOc+0xd3>
c0001430:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001432:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001435:	bb 10 00 00 00       	mov    ebx,0x10
c000143a:	83 f9 0f             	cmp    ecx,0xf
c000143d:	76 05                	jbe    c0001444 <iALLOc+0xc2>
c000143f:	83 e1 f8             	and    ecx,0xfffffff8
c0001442:	89 cb                	mov    ebx,ecx
c0001444:	01 de                	add    esi,ebx
c0001446:	83 c0 04             	add    eax,0x4
c0001449:	39 c7                	cmp    edi,eax
c000144b:	75 e3                	jne    c0001430 <iALLOc+0xae>
c000144d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001455:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001459:	8b 1d 74 fa 01 c0    	mov    ebx,DWORD PTR ds:0xc001fa74
c000145f:	83 ec 0c             	sub    esp,0xc
c0001462:	c7 05 74 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fa74,0x0
c000146c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001470:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001474:	50                   	push   eax
c0001475:	e8 7a fb ff ff       	call   c0000ff4 <dlmalloc>
c000147a:	83 c4 10             	add    esp,0x10
c000147d:	89 1d 74 fa 01 c0    	mov    DWORD PTR ds:0xc001fa74,ebx
c0001483:	85 c0                	test   eax,eax
c0001485:	0f 84 92 00 00 00    	je     c000151d <iALLOc+0x19b>
c000148b:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c000148e:	8d 78 f8             	lea    edi,[eax-0x8]
c0001491:	83 e3 fc             	and    ebx,0xfffffffc
c0001494:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0001498:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c000149d:	74 1e                	je     c00014bd <iALLOc+0x13b>
c000149f:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014a3:	89 d9                	mov    ecx,ebx
c00014a5:	52                   	push   edx
c00014a6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014aa:	83 e9 04             	sub    ecx,0x4
c00014ad:	51                   	push   ecx
c00014ae:	6a 00                	push   0x0
c00014b0:	50                   	push   eax
c00014b1:	e8 1a f0 ff ff       	call   c00004d0 <memset>
c00014b6:	83 c4 10             	add    esp,0x10
c00014b9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014bd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014c2:	75 14                	jne    c00014d8 <iALLOc+0x156>
c00014c4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014c7:	29 f3                	sub    ebx,esi
c00014c9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014cc:	83 cb 01             	or     ebx,0x1
c00014cf:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014d3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014d6:	89 f3                	mov    ebx,esi
c00014d8:	31 c0                	xor    eax,eax
c00014da:	4d                   	dec    ebp
c00014db:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014de:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00014e2:	39 c5                	cmp    ebp,eax
c00014e4:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00014e7:	74 2c                	je     c0001515 <iALLOc+0x193>
c00014e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00014ed:	85 c9                	test   ecx,ecx
c00014ef:	75 15                	jne    c0001506 <iALLOc+0x184>
c00014f1:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00014f4:	8d 71 0b             	lea    esi,[ecx+0xb]
c00014f7:	b9 10 00 00 00       	mov    ecx,0x10
c00014fc:	83 fe 0f             	cmp    esi,0xf
c00014ff:	76 05                	jbe    c0001506 <iALLOc+0x184>
c0001501:	83 e6 f8             	and    esi,0xfffffff8
c0001504:	89 f1                	mov    ecx,esi
c0001506:	89 ce                	mov    esi,ecx
c0001508:	29 cb                	sub    ebx,ecx
c000150a:	83 ce 01             	or     esi,0x1
c000150d:	40                   	inc    eax
c000150e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001511:	01 cf                	add    edi,ecx
c0001513:	eb c6                	jmp    c00014db <iALLOc+0x159>
c0001515:	83 cb 01             	or     ebx,0x1
c0001518:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000151b:	eb 08                	jmp    c0001525 <iALLOc+0x1a3>
c000151d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001525:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001529:	83 c4 2c             	add    esp,0x2c
c000152c:	5b                   	pop    ebx
c000152d:	5e                   	pop    esi
c000152e:	5f                   	pop    edi
c000152f:	5d                   	pop    ebp
c0001530:	c3                   	ret    

c0001531 <dlrealloc>:
c0001531:	55                   	push   ebp
c0001532:	57                   	push   edi
c0001533:	56                   	push   esi
c0001534:	53                   	push   ebx
c0001535:	83 ec 1c             	sub    esp,0x1c
c0001538:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000153c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001540:	85 db                	test   ebx,ebx
c0001542:	75 10                	jne    c0001554 <dlrealloc+0x23>
c0001544:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001548:	83 c4 1c             	add    esp,0x1c
c000154b:	5b                   	pop    ebx
c000154c:	5e                   	pop    esi
c000154d:	5f                   	pop    edi
c000154e:	5d                   	pop    ebp
c000154f:	e9 a0 fa ff ff       	jmp    c0000ff4 <dlmalloc>
c0001554:	83 f8 df             	cmp    eax,0xffffffdf
c0001557:	76 07                	jbe    c0001560 <dlrealloc+0x2f>
c0001559:	31 db                	xor    ebx,ebx
c000155b:	e9 6a 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c0001560:	83 c0 0b             	add    eax,0xb
c0001563:	bd 10 00 00 00       	mov    ebp,0x10
c0001568:	83 f8 0f             	cmp    eax,0xf
c000156b:	76 05                	jbe    c0001572 <dlrealloc+0x41>
c000156d:	83 e0 f8             	and    eax,0xfffffff8
c0001570:	89 c5                	mov    ebp,eax
c0001572:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001575:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001578:	89 c6                	mov    esi,eax
c000157a:	83 e6 fc             	and    esi,0xfffffffc
c000157d:	a8 02                	test   al,0x2
c000157f:	75 d8                	jne    c0001559 <dlrealloc+0x28>
c0001581:	39 f5                	cmp    ebp,esi
c0001583:	0f 86 04 01 00 00    	jbe    c000168d <dlrealloc+0x15c>
c0001589:	8d 14 37             	lea    edx,[edi+esi*1]
c000158c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c000158f:	39 15 4c f7 01 c0    	cmp    DWORD PTR ds:0xc001f74c,edx
c0001595:	75 33                	jne    c00015ca <dlrealloc+0x99>
c0001597:	83 e1 fc             	and    ecx,0xfffffffc
c000159a:	01 f1                	add    ecx,esi
c000159c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015a0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015a3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015a7:	77 49                	ja     c00015f2 <dlrealloc+0xc1>
c00015a9:	01 ef                	add    edi,ebp
c00015ab:	83 e0 01             	and    eax,0x1
c00015ae:	09 e8                	or     eax,ebp
c00015b0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015b3:	89 3d 4c f7 01 c0    	mov    DWORD PTR ds:0xc001f74c,edi
c00015b9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015bd:	29 e8                	sub    eax,ebp
c00015bf:	83 c8 01             	or     eax,0x1
c00015c2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015c5:	e9 00 01 00 00       	jmp    c00016ca <dlrealloc+0x199>
c00015ca:	89 c8                	mov    eax,ecx
c00015cc:	83 e0 fe             	and    eax,0xfffffffe
c00015cf:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015d4:	75 1c                	jne    c00015f2 <dlrealloc+0xc1>
c00015d6:	83 e1 fc             	and    ecx,0xfffffffc
c00015d9:	01 f1                	add    ecx,esi
c00015db:	39 cd                	cmp    ebp,ecx
c00015dd:	77 13                	ja     c00015f2 <dlrealloc+0xc1>
c00015df:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c00015e2:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00015e5:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c00015e8:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00015eb:	89 ce                	mov    esi,ecx
c00015ed:	e9 9b 00 00 00       	jmp    c000168d <dlrealloc+0x15c>
c00015f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00015f6:	8d 45 f9             	lea    eax,[ebp-0x7]
c00015f9:	83 ec 0c             	sub    esp,0xc
c00015fc:	50                   	push   eax
c00015fd:	e8 f2 f9 ff ff       	call   c0000ff4 <dlmalloc>
c0001602:	83 c4 10             	add    esp,0x10
c0001605:	85 c0                	test   eax,eax
c0001607:	0f 84 4c ff ff ff    	je     c0001559 <dlrealloc+0x28>
c000160d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001610:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001614:	39 ca                	cmp    edx,ecx
c0001616:	75 0a                	jne    c0001622 <dlrealloc+0xf1>
c0001618:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000161b:	83 e0 fc             	and    eax,0xfffffffc
c000161e:	01 c6                	add    esi,eax
c0001620:	eb 6b                	jmp    c000168d <dlrealloc+0x15c>
c0001622:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001625:	83 f9 27             	cmp    ecx,0x27
c0001628:	76 08                	jbe    c0001632 <dlrealloc+0x101>
c000162a:	89 de                	mov    esi,ebx
c000162c:	89 c7                	mov    edi,eax
c000162e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001630:	eb 43                	jmp    c0001675 <dlrealloc+0x144>
c0001632:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001634:	83 f9 13             	cmp    ecx,0x13
c0001637:	89 10                	mov    DWORD PTR [eax],edx
c0001639:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000163c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000163f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001642:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001645:	76 2e                	jbe    c0001675 <dlrealloc+0x144>
c0001647:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000164a:	83 f9 1b             	cmp    ecx,0x1b
c000164d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001650:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001653:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001656:	76 1d                	jbe    c0001675 <dlrealloc+0x144>
c0001658:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000165b:	83 f9 23             	cmp    ecx,0x23
c000165e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001661:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001664:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001667:	76 0c                	jbe    c0001675 <dlrealloc+0x144>
c0001669:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000166c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000166f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001672:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001675:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001679:	83 ec 0c             	sub    esp,0xc
c000167c:	53                   	push   ebx
c000167d:	e8 17 f6 ff ff       	call   c0000c99 <dlfree>
c0001682:	83 c4 10             	add    esp,0x10
c0001685:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001689:	89 c3                	mov    ebx,eax
c000168b:	eb 3d                	jmp    c00016ca <dlrealloc+0x199>
c000168d:	89 f2                	mov    edx,esi
c000168f:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001692:	29 ea                	sub    edx,ebp
c0001694:	83 e1 01             	and    ecx,0x1
c0001697:	8d 04 37             	lea    eax,[edi+esi*1]
c000169a:	83 fa 0f             	cmp    edx,0xf
c000169d:	77 0b                	ja     c00016aa <dlrealloc+0x179>
c000169f:	09 ce                	or     esi,ecx
c00016a1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016a4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016a8:	eb 20                	jmp    c00016ca <dlrealloc+0x199>
c00016aa:	01 ef                	add    edi,ebp
c00016ac:	83 ec 0c             	sub    esp,0xc
c00016af:	09 cd                	or     ebp,ecx
c00016b1:	83 ca 01             	or     edx,0x1
c00016b4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016b7:	83 c7 08             	add    edi,0x8
c00016ba:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016bd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c1:	57                   	push   edi
c00016c2:	e8 d2 f5 ff ff       	call   c0000c99 <dlfree>
c00016c7:	83 c4 10             	add    esp,0x10
c00016ca:	83 c4 1c             	add    esp,0x1c
c00016cd:	89 d8                	mov    eax,ebx
c00016cf:	5b                   	pop    ebx
c00016d0:	5e                   	pop    esi
c00016d1:	5f                   	pop    edi
c00016d2:	5d                   	pop    ebp
c00016d3:	c3                   	ret    

c00016d4 <dlmemalign>:
c00016d4:	55                   	push   ebp
c00016d5:	57                   	push   edi
c00016d6:	56                   	push   esi
c00016d7:	53                   	push   ebx
c00016d8:	83 ec 0c             	sub    esp,0xc
c00016db:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00016e3:	83 fa 08             	cmp    edx,0x8
c00016e6:	77 10                	ja     c00016f8 <dlmemalign+0x24>
c00016e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00016ec:	83 c4 0c             	add    esp,0xc
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	e9 fc f8 ff ff       	jmp    c0000ff4 <dlmalloc>
c00016f8:	bf 10 00 00 00       	mov    edi,0x10
c00016fd:	83 fa 0f             	cmp    edx,0xf
c0001700:	76 13                	jbe    c0001715 <dlmemalign+0x41>
c0001702:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001705:	85 d1                	test   ecx,edx
c0001707:	75 04                	jne    c000170d <dlmemalign+0x39>
c0001709:	89 d7                	mov    edi,edx
c000170b:	eb 08                	jmp    c0001715 <dlmemalign+0x41>
c000170d:	39 d7                	cmp    edi,edx
c000170f:	73 04                	jae    c0001715 <dlmemalign+0x41>
c0001711:	01 ff                	add    edi,edi
c0001713:	eb f8                	jmp    c000170d <dlmemalign+0x39>
c0001715:	83 f8 df             	cmp    eax,0xffffffdf
c0001718:	76 07                	jbe    c0001721 <dlmemalign+0x4d>
c000171a:	31 c0                	xor    eax,eax
c000171c:	e9 ce 00 00 00       	jmp    c00017ef <dlmemalign+0x11b>
c0001721:	83 c0 0b             	add    eax,0xb
c0001724:	bd 10 00 00 00       	mov    ebp,0x10
c0001729:	83 f8 0f             	cmp    eax,0xf
c000172c:	76 05                	jbe    c0001733 <dlmemalign+0x5f>
c000172e:	83 e0 f8             	and    eax,0xfffffff8
c0001731:	89 c5                	mov    ebp,eax
c0001733:	83 ec 0c             	sub    esp,0xc
c0001736:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000173a:	50                   	push   eax
c000173b:	e8 b4 f8 ff ff       	call   c0000ff4 <dlmalloc>
c0001740:	83 c4 10             	add    esp,0x10
c0001743:	89 c1                	mov    ecx,eax
c0001745:	85 c0                	test   eax,eax
c0001747:	74 d1                	je     c000171a <dlmemalign+0x46>
c0001749:	31 d2                	xor    edx,edx
c000174b:	8d 70 f8             	lea    esi,[eax-0x8]
c000174e:	f7 f7                	div    edi
c0001750:	85 d2                	test   edx,edx
c0001752:	74 62                	je     c00017b6 <dlmemalign+0xe2>
c0001754:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001758:	89 f8                	mov    eax,edi
c000175a:	f7 d8                	neg    eax
c000175c:	21 c3                	and    ebx,eax
c000175e:	83 eb 08             	sub    ebx,0x8
c0001761:	89 d8                	mov    eax,ebx
c0001763:	29 f0                	sub    eax,esi
c0001765:	83 f8 0f             	cmp    eax,0xf
c0001768:	77 02                	ja     c000176c <dlmemalign+0x98>
c000176a:	01 fb                	add    ebx,edi
c000176c:	89 d8                	mov    eax,ebx
c000176e:	29 f0                	sub    eax,esi
c0001770:	89 c6                	mov    esi,eax
c0001772:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001775:	89 c2                	mov    edx,eax
c0001777:	83 e2 fc             	and    edx,0xfffffffc
c000177a:	29 f2                	sub    edx,esi
c000177c:	a8 02                	test   al,0x2
c000177e:	74 10                	je     c0001790 <dlmemalign+0xbc>
c0001780:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001783:	83 ca 02             	or     edx,0x2
c0001786:	8d 43 08             	lea    eax,[ebx+0x8]
c0001789:	89 33                	mov    DWORD PTR [ebx],esi
c000178b:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c000178e:	eb 5f                	jmp    c00017ef <dlmemalign+0x11b>
c0001790:	83 ec 0c             	sub    esp,0xc
c0001793:	89 d0                	mov    eax,edx
c0001795:	83 c8 01             	or     eax,0x1
c0001798:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000179b:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017a0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017a3:	83 e0 01             	and    eax,0x1
c00017a6:	09 f0                	or     eax,esi
c00017a8:	89 de                	mov    esi,ebx
c00017aa:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017ad:	51                   	push   ecx
c00017ae:	e8 e6 f4 ff ff       	call   c0000c99 <dlfree>
c00017b3:	83 c4 10             	add    esp,0x10
c00017b6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017b9:	a8 02                	test   al,0x2
c00017bb:	75 2f                	jne    c00017ec <dlmemalign+0x118>
c00017bd:	83 e0 fc             	and    eax,0xfffffffc
c00017c0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017c3:	39 c2                	cmp    edx,eax
c00017c5:	73 25                	jae    c00017ec <dlmemalign+0x118>
c00017c7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ca:	83 ec 0c             	sub    esp,0xc
c00017cd:	29 e8                	sub    eax,ebp
c00017cf:	83 c2 08             	add    edx,0x8
c00017d2:	83 c8 01             	or     eax,0x1
c00017d5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017d8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017db:	83 e0 01             	and    eax,0x1
c00017de:	09 c5                	or     ebp,eax
c00017e0:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00017e3:	52                   	push   edx
c00017e4:	e8 b0 f4 ff ff       	call   c0000c99 <dlfree>
c00017e9:	83 c4 10             	add    esp,0x10
c00017ec:	8d 46 08             	lea    eax,[esi+0x8]
c00017ef:	83 c4 0c             	add    esp,0xc
c00017f2:	5b                   	pop    ebx
c00017f3:	5e                   	pop    esi
c00017f4:	5f                   	pop    edi
c00017f5:	5d                   	pop    ebp
c00017f6:	c3                   	ret    

c00017f7 <dlcalloc>:
c00017f7:	53                   	push   ebx
c00017f8:	83 ec 14             	sub    esp,0x14
c00017fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00017ff:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001804:	50                   	push   eax
c0001805:	e8 ea f7 ff ff       	call   c0000ff4 <dlmalloc>
c000180a:	83 c4 10             	add    esp,0x10
c000180d:	89 c3                	mov    ebx,eax
c000180f:	85 c0                	test   eax,eax
c0001811:	74 77                	je     c000188a <dlcalloc+0x93>
c0001813:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001816:	89 d0                	mov    eax,edx
c0001818:	83 e0 fc             	and    eax,0xfffffffc
c000181b:	80 e2 02             	and    dl,0x2
c000181e:	75 5a                	jne    c000187a <dlcalloc+0x83>
c0001820:	83 e8 04             	sub    eax,0x4
c0001823:	83 f8 27             	cmp    eax,0x27
c0001826:	76 03                	jbe    c000182b <dlcalloc+0x34>
c0001828:	51                   	push   ecx
c0001829:	eb 53                	jmp    c000187e <dlcalloc+0x87>
c000182b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001831:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001838:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000183f:	83 f8 13             	cmp    eax,0x13
c0001842:	76 46                	jbe    c000188a <dlcalloc+0x93>
c0001844:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000184b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001852:	83 f8 1b             	cmp    eax,0x1b
c0001855:	76 33                	jbe    c000188a <dlcalloc+0x93>
c0001857:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000185e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001865:	83 f8 23             	cmp    eax,0x23
c0001868:	76 20                	jbe    c000188a <dlcalloc+0x93>
c000186a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001871:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001878:	eb 10                	jmp    c000188a <dlcalloc+0x93>
c000187a:	83 e8 08             	sub    eax,0x8
c000187d:	52                   	push   edx
c000187e:	50                   	push   eax
c000187f:	6a 00                	push   0x0
c0001881:	53                   	push   ebx
c0001882:	e8 49 ec ff ff       	call   c00004d0 <memset>
c0001887:	83 c4 10             	add    esp,0x10
c000188a:	89 d8                	mov    eax,ebx
c000188c:	83 c4 08             	add    esp,0x8
c000188f:	5b                   	pop    ebx
c0001890:	c3                   	ret    

c0001891 <dlcfree>:
c0001891:	e9 03 f4 ff ff       	jmp    c0000c99 <dlfree>

c0001896 <dlindependent_calloc>:
c0001896:	83 ec 28             	sub    esp,0x28
c0001899:	b9 03 00 00 00       	mov    ecx,0x3
c000189e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018a2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018a6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018aa:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018b2:	e8 cb fa ff ff       	call   c0001382 <iALLOc>
c00018b7:	83 c4 2c             	add    esp,0x2c
c00018ba:	c3                   	ret    

c00018bb <dlindependent_comalloc>:
c00018bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018bf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018c3:	31 c9                	xor    ecx,ecx
c00018c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018c9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018cd:	e9 b0 fa ff ff       	jmp    c0001382 <iALLOc>

c00018d2 <dlvalloc>:
c00018d2:	83 ec 0c             	sub    esp,0xc
c00018d5:	83 3d 20 f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f720,0x0
c00018dc:	75 0a                	jne    c00018e8 <dlvalloc+0x16>
c00018de:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c00018e3:	e8 ca f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c00018e8:	50                   	push   eax
c00018e9:	50                   	push   eax
c00018ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00018ee:	ff 35 7c fa 01 c0    	push   DWORD PTR ds:0xc001fa7c
c00018f4:	e8 db fd ff ff       	call   c00016d4 <dlmemalign>
c00018f9:	83 c4 1c             	add    esp,0x1c
c00018fc:	c3                   	ret    

c00018fd <dlpvalloc>:
c00018fd:	83 ec 0c             	sub    esp,0xc
c0001900:	83 3d 20 f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f720,0x0
c0001907:	75 0a                	jne    c0001913 <dlpvalloc+0x16>
c0001909:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c000190e:	e8 9f f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001913:	a1 7c fa 01 c0       	mov    eax,ds:0xc001fa7c
c0001918:	89 c1                	mov    ecx,eax
c000191a:	52                   	push   edx
c000191b:	f7 d9                	neg    ecx
c000191d:	52                   	push   edx
c000191e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001922:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001926:	21 ca                	and    edx,ecx
c0001928:	52                   	push   edx
c0001929:	50                   	push   eax
c000192a:	e8 a5 fd ff ff       	call   c00016d4 <dlmemalign>
c000192f:	83 c4 1c             	add    esp,0x1c
c0001932:	c3                   	ret    

c0001933 <dlmalloc_trim>:
c0001933:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c0001938:	e8 75 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000193d:	31 c0                	xor    eax,eax
c000193f:	c3                   	ret    

c0001940 <dlmalloc_usable_size>:
c0001940:	53                   	push   ebx
c0001941:	31 c0                	xor    eax,eax
c0001943:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001947:	85 c9                	test   ecx,ecx
c0001949:	74 24                	je     c000196f <dlmalloc_usable_size+0x2f>
c000194b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000194e:	f6 c2 02             	test   dl,0x2
c0001951:	74 08                	je     c000195b <dlmalloc_usable_size+0x1b>
c0001953:	83 e2 fc             	and    edx,0xfffffffc
c0001956:	8d 42 f8             	lea    eax,[edx-0x8]
c0001959:	eb 14                	jmp    c000196f <dlmalloc_usable_size+0x2f>
c000195b:	89 d3                	mov    ebx,edx
c000195d:	31 c0                	xor    eax,eax
c000195f:	83 e3 fe             	and    ebx,0xfffffffe
c0001962:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001967:	74 06                	je     c000196f <dlmalloc_usable_size+0x2f>
c0001969:	83 e2 fc             	and    edx,0xfffffffc
c000196c:	8d 42 fc             	lea    eax,[edx-0x4]
c000196f:	5b                   	pop    ebx
c0001970:	c3                   	ret    

c0001971 <dlmallinfo>:
c0001971:	55                   	push   ebp
c0001972:	57                   	push   edi
c0001973:	56                   	push   esi
c0001974:	53                   	push   ebx
c0001975:	83 ec 08             	sub    esp,0x8
c0001978:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000197c:	83 3d 4c f7 01 c0 00 	cmp    DWORD PTR ds:0xc001f74c,0x0
c0001983:	75 0a                	jne    c000198f <dlmallinfo+0x1e>
c0001985:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c000198a:	e8 23 f2 ff ff       	call   c0000bb2 <malloc_consolidate>
c000198f:	a1 4c f7 01 c0       	mov    eax,ds:0xc001f74c
c0001994:	31 ed                	xor    ebp,ebp
c0001996:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001999:	31 c9                	xor    ecx,ecx
c000199b:	83 e0 fc             	and    eax,0xfffffffc
c000199e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019a2:	31 c0                	xor    eax,eax
c00019a4:	8b 14 85 24 f7 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe08dc]
c00019ab:	85 d2                	test   edx,edx
c00019ad:	74 0e                	je     c00019bd <dlmallinfo+0x4c>
c00019af:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019b2:	45                   	inc    ebp
c00019b3:	83 e6 fc             	and    esi,0xfffffffc
c00019b6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019b9:	01 f1                	add    ecx,esi
c00019bb:	eb ee                	jmp    c00019ab <dlmallinfo+0x3a>
c00019bd:	40                   	inc    eax
c00019be:	83 f8 0a             	cmp    eax,0xa
c00019c1:	75 e1                	jne    c00019a4 <dlmallinfo+0x33>
c00019c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019c7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ce:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019d1:	b8 54 f7 01 c0       	mov    eax,0xc001f754
c00019d6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019d9:	39 f0                	cmp    eax,esi
c00019db:	74 10                	je     c00019ed <dlmallinfo+0x7c>
c00019dd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c00019e0:	ff 04 24             	inc    DWORD PTR [esp]
c00019e3:	83 e7 fc             	and    edi,0xfffffffc
c00019e6:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c00019e9:	01 fa                	add    edx,edi
c00019eb:	eb ec                	jmp    c00019d9 <dlmallinfo+0x68>
c00019ed:	83 c0 08             	add    eax,0x8
c00019f0:	3d 4c fa 01 c0       	cmp    eax,0xc001fa4c
c00019f5:	75 df                	jne    c00019d6 <dlmallinfo+0x65>
c00019f7:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c00019fa:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c00019fd:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a00:	a1 88 fa 01 c0       	mov    eax,ds:0xc001fa88
c0001a05:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a08:	89 03                	mov    DWORD PTR [ebx],eax
c0001a0a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a0d:	8b 35 70 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa70
c0001a13:	29 d0                	sub    eax,edx
c0001a15:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a18:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a1b:	8b 35 84 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa84
c0001a21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a25:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a28:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a2b:	8b 35 94 fa 01 c0    	mov    esi,DWORD PTR ds:0xc001fa94
c0001a31:	89 d8                	mov    eax,ebx
c0001a33:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a36:	83 c4 08             	add    esp,0x8
c0001a39:	5b                   	pop    ebx
c0001a3a:	5e                   	pop    esi
c0001a3b:	5f                   	pop    edi
c0001a3c:	5d                   	pop    ebp
c0001a3d:	c2 04 00             	ret    0x4

c0001a40 <dlmalloc_stats>:
c0001a40:	83 ec 30             	sub    esp,0x30
c0001a43:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a47:	50                   	push   eax
c0001a48:	e8 24 ff ff ff       	call   c0001971 <dlmallinfo>
c0001a4d:	83 c4 30             	add    esp,0x30
c0001a50:	c3                   	ret    

c0001a51 <dlmallopt>:
c0001a51:	56                   	push   esi
c0001a52:	b8 20 f7 01 c0       	mov    eax,0xc001f720
c0001a57:	53                   	push   ebx
c0001a58:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a60:	e8 4d f1 ff ff       	call   c0000bb2 <malloc_consolidate>
c0001a65:	8d 46 04             	lea    eax,[esi+0x4]
c0001a68:	83 f8 05             	cmp    eax,0x5
c0001a6b:	77 67                	ja     c0001ad4 <dlmallopt+0x83>
c0001a6d:	ff 24 85 64 ca 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe359c]
c0001a74:	83 fb 50             	cmp    ebx,0x50
c0001a77:	77 5b                	ja     c0001ad4 <dlmallopt+0x83>
c0001a79:	ba 08 00 00 00       	mov    edx,0x8
c0001a7e:	85 db                	test   ebx,ebx
c0001a80:	74 12                	je     c0001a94 <dlmallopt+0x43>
c0001a82:	83 c3 0b             	add    ebx,0xb
c0001a85:	ba 10 00 00 00       	mov    edx,0x10
c0001a8a:	83 fb 0f             	cmp    ebx,0xf
c0001a8d:	76 05                	jbe    c0001a94 <dlmallopt+0x43>
c0001a8f:	89 da                	mov    edx,ebx
c0001a91:	83 e2 f8             	and    edx,0xfffffff8
c0001a94:	a1 20 f7 01 c0       	mov    eax,ds:0xc001f720
c0001a99:	83 e0 03             	and    eax,0x3
c0001a9c:	09 d0                	or     eax,edx
c0001a9e:	a3 20 f7 01 c0       	mov    ds:0xc001f720,eax
c0001aa3:	eb 31                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aa5:	89 1d 64 fa 01 c0    	mov    DWORD PTR ds:0xc001fa64,ebx
c0001aab:	eb 06                	jmp    c0001ab3 <dlmallopt+0x62>
c0001aad:	89 1d 68 fa 01 c0    	mov    DWORD PTR ds:0xc001fa68,ebx
c0001ab3:	be 01 00 00 00       	mov    esi,0x1
c0001ab8:	eb 1c                	jmp    c0001ad6 <dlmallopt+0x85>
c0001aba:	89 1d 6c fa 01 c0    	mov    DWORD PTR ds:0xc001fa6c,ebx
c0001ac0:	eb f1                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ac2:	31 f6                	xor    esi,esi
c0001ac4:	85 db                	test   ebx,ebx
c0001ac6:	75 0e                	jne    c0001ad6 <dlmallopt+0x85>
c0001ac8:	c7 05 74 fa 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fa74,0x0
c0001ad2:	eb df                	jmp    c0001ab3 <dlmallopt+0x62>
c0001ad4:	31 f6                	xor    esi,esi
c0001ad6:	89 f0                	mov    eax,esi
c0001ad8:	5b                   	pop    ebx
c0001ad9:	5e                   	pop    esi
c0001ada:	c3                   	ret    
c0001adb:	90                   	nop

c0001adc <isblank>:
c0001adc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001ae1:	74 09                	je     c0001aec <isblank+0x10>
c0001ae3:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ae8:	75 0a                	jne    c0001af4 <isblank+0x18>
c0001aea:	66 90                	xchg   ax,ax
c0001aec:	b8 01 00 00 00       	mov    eax,0x1
c0001af1:	c3                   	ret    
c0001af2:	66 90                	xchg   ax,ax
c0001af4:	b8 00 00 00 00       	mov    eax,0x0
c0001af9:	c3                   	ret    
c0001afa:	66 90                	xchg   ax,ax

c0001afc <iscntrl>:
c0001afc:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b01:	7e 09                	jle    c0001b0c <iscntrl+0x10>
c0001b03:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b08:	75 0a                	jne    c0001b14 <iscntrl+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <isdigit>:
c0001b1c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b21:	7e 0d                	jle    c0001b30 <isdigit+0x14>
c0001b23:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b28:	7f 06                	jg     c0001b30 <isdigit+0x14>
c0001b2a:	b8 01 00 00 00       	mov    eax,0x1
c0001b2f:	c3                   	ret    
c0001b30:	b8 00 00 00 00       	mov    eax,0x0
c0001b35:	c3                   	ret    
c0001b36:	66 90                	xchg   ax,ax

c0001b38 <islower>:
c0001b38:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b3d:	7e 0d                	jle    c0001b4c <islower+0x14>
c0001b3f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b44:	7f 06                	jg     c0001b4c <islower+0x14>
c0001b46:	b8 01 00 00 00       	mov    eax,0x1
c0001b4b:	c3                   	ret    
c0001b4c:	b8 00 00 00 00       	mov    eax,0x0
c0001b51:	c3                   	ret    
c0001b52:	66 90                	xchg   ax,ax

c0001b54 <isspace>:
c0001b54:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b59:	7c 19                	jl     c0001b74 <isspace+0x20>
c0001b5b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b60:	7e 0a                	jle    c0001b6c <isspace+0x18>
c0001b62:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b67:	75 0b                	jne    c0001b74 <isspace+0x20>
c0001b69:	8d 76 00             	lea    esi,[esi+0x0]
c0001b6c:	b8 01 00 00 00       	mov    eax,0x1
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax
c0001b74:	b8 00 00 00 00       	mov    eax,0x0
c0001b79:	c3                   	ret    
c0001b7a:	66 90                	xchg   ax,ax

c0001b7c <isupper>:
c0001b7c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001b81:	7e 0d                	jle    c0001b90 <isupper+0x14>
c0001b83:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001b88:	7f 06                	jg     c0001b90 <isupper+0x14>
c0001b8a:	b8 01 00 00 00       	mov    eax,0x1
c0001b8f:	c3                   	ret    
c0001b90:	b8 00 00 00 00       	mov    eax,0x0
c0001b95:	c3                   	ret    
c0001b96:	66 90                	xchg   ax,ax

c0001b98 <isalpha>:
c0001b98:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001b9c:	e8 db ff ff ff       	call   c0001b7c <isupper>
c0001ba1:	83 c4 04             	add    esp,0x4
c0001ba4:	85 c0                	test   eax,eax
c0001ba6:	75 10                	jne    c0001bb8 <isalpha+0x20>
c0001ba8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bac:	e8 87 ff ff ff       	call   c0001b38 <islower>
c0001bb1:	83 c4 04             	add    esp,0x4
c0001bb4:	85 c0                	test   eax,eax
c0001bb6:	74 08                	je     c0001bc0 <isalpha+0x28>
c0001bb8:	b8 01 00 00 00       	mov    eax,0x1
c0001bbd:	c3                   	ret    
c0001bbe:	66 90                	xchg   ax,ax
c0001bc0:	b8 00 00 00 00       	mov    eax,0x0
c0001bc5:	c3                   	ret    
c0001bc6:	66 90                	xchg   ax,ax

c0001bc8 <isalnum>:
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 c7 ff ff ff       	call   c0001b98 <isalpha>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	75 10                	jne    c0001be8 <isalnum+0x20>
c0001bd8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bdc:	e8 3b ff ff ff       	call   c0001b1c <isdigit>
c0001be1:	83 c4 04             	add    esp,0x4
c0001be4:	85 c0                	test   eax,eax
c0001be6:	74 08                	je     c0001bf0 <isalnum+0x28>
c0001be8:	b8 01 00 00 00       	mov    eax,0x1
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax
c0001bf0:	b8 00 00 00 00       	mov    eax,0x0
c0001bf5:	c3                   	ret    
c0001bf6:	66 90                	xchg   ax,ax

c0001bf8 <ispunct>:
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 c7 ff ff ff       	call   c0001bc8 <isalnum>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	75 28                	jne    c0001c30 <ispunct+0x38>
c0001c08:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c0c:	e8 43 ff ff ff       	call   c0001b54 <isspace>
c0001c11:	83 c4 04             	add    esp,0x4
c0001c14:	85 c0                	test   eax,eax
c0001c16:	75 18                	jne    c0001c30 <ispunct+0x38>
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 db fe ff ff       	call   c0001afc <iscntrl>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 08                	jne    c0001c30 <ispunct+0x38>
c0001c28:	b8 01 00 00 00       	mov    eax,0x1
c0001c2d:	c3                   	ret    
c0001c2e:	66 90                	xchg   ax,ax
c0001c30:	b8 00 00 00 00       	mov    eax,0x0
c0001c35:	c3                   	ret    
c0001c36:	66 90                	xchg   ax,ax

c0001c38 <isgraph>:
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 87 ff ff ff       	call   c0001bc8 <isalnum>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 10                	jne    c0001c58 <isgraph+0x20>
c0001c48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c4c:	e8 a7 ff ff ff       	call   c0001bf8 <ispunct>
c0001c51:	83 c4 04             	add    esp,0x4
c0001c54:	85 c0                	test   eax,eax
c0001c56:	74 08                	je     c0001c60 <isgraph+0x28>
c0001c58:	b8 01 00 00 00       	mov    eax,0x1
c0001c5d:	c3                   	ret    
c0001c5e:	66 90                	xchg   ax,ax
c0001c60:	b8 00 00 00 00       	mov    eax,0x0
c0001c65:	c3                   	ret    
c0001c66:	66 90                	xchg   ax,ax

c0001c68 <isprint>:
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 c7 ff ff ff       	call   c0001c38 <isgraph>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	75 08                	jne    c0001c80 <isprint+0x18>
c0001c78:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c7d:	75 09                	jne    c0001c88 <isprint+0x20>
c0001c7f:	90                   	nop
c0001c80:	b8 01 00 00 00       	mov    eax,0x1
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax
c0001c88:	b8 00 00 00 00       	mov    eax,0x0
c0001c8d:	c3                   	ret    
c0001c8e:	66 90                	xchg   ax,ax

c0001c90 <isxdigit>:
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 83 fe ff ff       	call   c0001b1c <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	75 20                	jne    c0001cc0 <isxdigit+0x30>
c0001ca0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ca5:	7e 09                	jle    c0001cb0 <isxdigit+0x20>
c0001ca7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001cac:	7e 12                	jle    c0001cc0 <isxdigit+0x30>
c0001cae:	66 90                	xchg   ax,ax
c0001cb0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cb5:	7e 11                	jle    c0001cc8 <isxdigit+0x38>
c0001cb7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cbc:	7f 0a                	jg     c0001cc8 <isxdigit+0x38>
c0001cbe:	66 90                	xchg   ax,ax
c0001cc0:	b8 01 00 00 00       	mov    eax,0x1
c0001cc5:	c3                   	ret    
c0001cc6:	66 90                	xchg   ax,ax
c0001cc8:	b8 00 00 00 00       	mov    eax,0x0
c0001ccd:	c3                   	ret    

c0001cce <disk_status>:
c0001cce:	31 c0                	xor    eax,eax
c0001cd0:	c3                   	ret    

c0001cd1 <disk_initialize>:
c0001cd1:	31 c0                	xor    eax,eax
c0001cd3:	c3                   	ret    

c0001cd4 <disk_read>:
c0001cd4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cd9:	0f b6 04 85 e0 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc720]
c0001ce1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ce5:	e9 12 4e 01 00       	jmp    c0016afc <fatWrapperReadDisk>

c0001cea <disk_write>:
c0001cea:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cef:	0f b6 04 85 e0 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc720]
c0001cf7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001cfb:	e9 40 4e 01 00       	jmp    c0016b40 <fatWrapperWriteDisk>

c0001d00 <disk_ioctl>:
c0001d00:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d05:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d09:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0e:	0f b6 04 85 e0 38 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc720]
c0001d16:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1a:	e9 65 4e 01 00       	jmp    c0016b84 <fatWrapperIoctl>

c0001d1f <ld_word>:
c0001d1f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d26:	c1 e2 08             	shl    edx,0x8
c0001d29:	09 d0                	or     eax,edx
c0001d2b:	c3                   	ret    

c0001d2c <ld_dword>:
c0001d2c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d30:	89 d1                	mov    ecx,edx
c0001d32:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d36:	c1 e1 08             	shl    ecx,0x8
c0001d39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d3c:	09 ca                	or     edx,ecx
c0001d3e:	c1 e2 08             	shl    edx,0x8
c0001d41:	09 d0                	or     eax,edx
c0001d43:	c3                   	ret    

c0001d44 <st_word>:
c0001d44:	66 89 10             	mov    WORD PTR [eax],dx
c0001d47:	c3                   	ret    

c0001d48 <st_dword>:
c0001d48:	89 10                	mov    DWORD PTR [eax],edx
c0001d4a:	c3                   	ret    

c0001d4b <mem_cpy>:
c0001d4b:	85 c9                	test   ecx,ecx
c0001d4d:	74 10                	je     c0001d5f <mem_cpy+0x14>
c0001d4f:	57                   	push   edi
c0001d50:	01 c1                	add    ecx,eax
c0001d52:	56                   	push   esi
c0001d53:	89 c7                	mov    edi,eax
c0001d55:	89 d6                	mov    esi,edx
c0001d57:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d58:	39 f9                	cmp    ecx,edi
c0001d5a:	75 fb                	jne    c0001d57 <mem_cpy+0xc>
c0001d5c:	5e                   	pop    esi
c0001d5d:	5f                   	pop    edi
c0001d5e:	c3                   	ret    
c0001d5f:	c3                   	ret    

c0001d60 <mem_set>:
c0001d60:	01 c1                	add    ecx,eax
c0001d62:	40                   	inc    eax
c0001d63:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d66:	39 c8                	cmp    eax,ecx
c0001d68:	75 f8                	jne    c0001d62 <mem_set+0x2>
c0001d6a:	c3                   	ret    

c0001d6b <mem_cmp>:
c0001d6b:	57                   	push   edi
c0001d6c:	56                   	push   esi
c0001d6d:	89 c6                	mov    esi,eax
c0001d6f:	53                   	push   ebx
c0001d70:	46                   	inc    esi
c0001d71:	42                   	inc    edx
c0001d72:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d76:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d7a:	29 fb                	sub    ebx,edi
c0001d7c:	89 cf                	mov    edi,ecx
c0001d7e:	29 f7                	sub    edi,esi
c0001d80:	01 c7                	add    edi,eax
c0001d82:	74 04                	je     c0001d88 <mem_cmp+0x1d>
c0001d84:	85 db                	test   ebx,ebx
c0001d86:	74 e8                	je     c0001d70 <mem_cmp+0x5>
c0001d88:	89 d8                	mov    eax,ebx
c0001d8a:	5b                   	pop    ebx
c0001d8b:	5e                   	pop    esi
c0001d8c:	5f                   	pop    edi
c0001d8d:	c3                   	ret    

c0001d8e <chk_chr>:
c0001d8e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d91:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d94:	74 07                	je     c0001d9d <chk_chr+0xf>
c0001d96:	39 d1                	cmp    ecx,edx
c0001d98:	74 03                	je     c0001d9d <chk_chr+0xf>
c0001d9a:	40                   	inc    eax
c0001d9b:	eb f1                	jmp    c0001d8e <chk_chr>
c0001d9d:	89 c8                	mov    eax,ecx
c0001d9f:	c3                   	ret    

c0001da0 <dbc_1st>:
c0001da0:	31 c0                	xor    eax,eax
c0001da2:	c3                   	ret    

c0001da3 <dbc_2nd>:
c0001da3:	31 c0                	xor    eax,eax
c0001da5:	c3                   	ret    

c0001da6 <tchar2uni>:
c0001da6:	57                   	push   edi
c0001da7:	89 c7                	mov    edi,eax
c0001da9:	56                   	push   esi
c0001daa:	53                   	push   ebx
c0001dab:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dad:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001daf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001db2:	84 c9                	test   cl,cl
c0001db4:	78 0a                	js     c0001dc0 <tchar2uni+0x1a>
c0001db6:	0f b6 d1             	movzx  edx,cl
c0001db9:	89 f3                	mov    ebx,esi
c0001dbb:	e9 9f 00 00 00       	jmp    c0001e5f <tchar2uni+0xb9>
c0001dc0:	88 ca                	mov    dl,cl
c0001dc2:	83 e2 e0             	and    edx,0xffffffe0
c0001dc5:	80 fa c0             	cmp    dl,0xc0
c0001dc8:	75 0c                	jne    c0001dd6 <tchar2uni+0x30>
c0001dca:	89 ca                	mov    edx,ecx
c0001dcc:	b9 01 00 00 00       	mov    ecx,0x1
c0001dd1:	83 e2 1f             	and    edx,0x1f
c0001dd4:	eb 2e                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dd6:	88 ca                	mov    dl,cl
c0001dd8:	83 e2 f0             	and    edx,0xfffffff0
c0001ddb:	80 fa e0             	cmp    dl,0xe0
c0001dde:	75 0c                	jne    c0001dec <tchar2uni+0x46>
c0001de0:	89 ca                	mov    edx,ecx
c0001de2:	b9 02 00 00 00       	mov    ecx,0x2
c0001de7:	83 e2 0f             	and    edx,0xf
c0001dea:	eb 18                	jmp    c0001e04 <tchar2uni+0x5e>
c0001dec:	88 ca                	mov    dl,cl
c0001dee:	83 e2 f8             	and    edx,0xfffffff8
c0001df1:	88 d0                	mov    al,dl
c0001df3:	83 ca ff             	or     edx,0xffffffff
c0001df6:	3c f0                	cmp    al,0xf0
c0001df8:	75 6c                	jne    c0001e66 <tchar2uni+0xc0>
c0001dfa:	89 ca                	mov    edx,ecx
c0001dfc:	b9 03 00 00 00       	mov    ecx,0x3
c0001e01:	83 e2 07             	and    edx,0x7
c0001e04:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e08:	46                   	inc    esi
c0001e09:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e0c:	88 c8                	mov    al,cl
c0001e0e:	83 e0 c0             	and    eax,0xffffffc0
c0001e11:	3c 80                	cmp    al,0x80
c0001e13:	75 4e                	jne    c0001e63 <tchar2uni+0xbd>
c0001e15:	c1 e2 06             	shl    edx,0x6
c0001e18:	83 e1 3f             	and    ecx,0x3f
c0001e1b:	09 ca                	or     edx,ecx
c0001e1d:	39 de                	cmp    esi,ebx
c0001e1f:	75 e7                	jne    c0001e08 <tchar2uni+0x62>
c0001e21:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e24:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e2a:	77 37                	ja     c0001e63 <tchar2uni+0xbd>
c0001e2c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e32:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e38:	76 29                	jbe    c0001e63 <tchar2uni+0xbd>
c0001e3a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e40:	76 1d                	jbe    c0001e5f <tchar2uni+0xb9>
c0001e42:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e48:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e4e:	c1 e1 06             	shl    ecx,0x6
c0001e51:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e57:	09 ca                	or     edx,ecx
c0001e59:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e5f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e61:	eb 03                	jmp    c0001e66 <tchar2uni+0xc0>
c0001e63:	83 ca ff             	or     edx,0xffffffff
c0001e66:	5b                   	pop    ebx
c0001e67:	89 d0                	mov    eax,edx
c0001e69:	5e                   	pop    esi
c0001e6a:	5f                   	pop    edi
c0001e6b:	c3                   	ret    

c0001e6c <put_utf>:
c0001e6c:	53                   	push   ebx
c0001e6d:	83 f8 7f             	cmp    eax,0x7f
c0001e70:	89 c3                	mov    ebx,eax
c0001e72:	b0 00                	mov    al,0x0
c0001e74:	77 11                	ja     c0001e87 <put_utf+0x1b>
c0001e76:	85 c9                	test   ecx,ecx
c0001e78:	0f 84 e5 00 00 00    	je     c0001f63 <put_utf+0xf7>
c0001e7e:	88 1a                	mov    BYTE PTR [edx],bl
c0001e80:	b0 01                	mov    al,0x1
c0001e82:	e9 dc 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001e87:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e8d:	77 23                	ja     c0001eb2 <put_utf+0x46>
c0001e8f:	83 f9 01             	cmp    ecx,0x1
c0001e92:	0f 86 cb 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001e98:	89 d8                	mov    eax,ebx
c0001e9a:	83 e3 3f             	and    ebx,0x3f
c0001e9d:	c1 e8 06             	shr    eax,0x6
c0001ea0:	83 cb 80             	or     ebx,0xffffff80
c0001ea3:	83 c8 c0             	or     eax,0xffffffc0
c0001ea6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ea9:	88 02                	mov    BYTE PTR [edx],al
c0001eab:	b0 02                	mov    al,0x2
c0001ead:	e9 b1 00 00 00       	jmp    c0001f63 <put_utf+0xf7>
c0001eb2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001eb8:	77 40                	ja     c0001efa <put_utf+0x8e>
c0001eba:	83 f9 02             	cmp    ecx,0x2
c0001ebd:	0f 86 a0 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ec3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ec9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001ecf:	0f 86 8e 00 00 00    	jbe    c0001f63 <put_utf+0xf7>
c0001ed5:	89 d8                	mov    eax,ebx
c0001ed7:	c1 e8 0c             	shr    eax,0xc
c0001eda:	83 c8 e0             	or     eax,0xffffffe0
c0001edd:	88 02                	mov    BYTE PTR [edx],al
c0001edf:	89 d8                	mov    eax,ebx
c0001ee1:	83 e3 3f             	and    ebx,0x3f
c0001ee4:	c1 e8 06             	shr    eax,0x6
c0001ee7:	83 cb 80             	or     ebx,0xffffff80
c0001eea:	83 e0 3f             	and    eax,0x3f
c0001eed:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001ef0:	83 c8 80             	or     eax,0xffffff80
c0001ef3:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ef6:	b0 03                	mov    al,0x3
c0001ef8:	eb 69                	jmp    c0001f63 <put_utf+0xf7>
c0001efa:	83 f9 03             	cmp    ecx,0x3
c0001efd:	76 64                	jbe    c0001f63 <put_utf+0xf7>
c0001eff:	89 d9                	mov    ecx,ebx
c0001f01:	0f b7 c3             	movzx  eax,bx
c0001f04:	66 31 c9             	xor    cx,cx
c0001f07:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f0d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f13:	c1 e9 06             	shr    ecx,0x6
c0001f16:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f1c:	77 43                	ja     c0001f61 <put_utf+0xf5>
c0001f1e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f24:	77 3b                	ja     c0001f61 <put_utf+0xf5>
c0001f26:	09 cb                	or     ebx,ecx
c0001f28:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f2e:	89 d8                	mov    eax,ebx
c0001f30:	c1 e8 12             	shr    eax,0x12
c0001f33:	83 c8 f0             	or     eax,0xfffffff0
c0001f36:	88 02                	mov    BYTE PTR [edx],al
c0001f38:	89 d8                	mov    eax,ebx
c0001f3a:	c1 e8 0c             	shr    eax,0xc
c0001f3d:	83 e0 3f             	and    eax,0x3f
c0001f40:	83 c8 80             	or     eax,0xffffff80
c0001f43:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f46:	89 d8                	mov    eax,ebx
c0001f48:	83 e3 3f             	and    ebx,0x3f
c0001f4b:	c1 e8 06             	shr    eax,0x6
c0001f4e:	83 cb 80             	or     ebx,0xffffff80
c0001f51:	83 e0 3f             	and    eax,0x3f
c0001f54:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f57:	83 c8 80             	or     eax,0xffffff80
c0001f5a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f5d:	b0 04                	mov    al,0x4
c0001f5f:	eb 02                	jmp    c0001f63 <put_utf+0xf7>
c0001f61:	31 c0                	xor    eax,eax
c0001f63:	5b                   	pop    ebx
c0001f64:	c3                   	ret    

c0001f65 <clst2sect>:
c0001f65:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f68:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f6b:	83 ea 02             	sub    edx,0x2
c0001f6e:	39 ca                	cmp    edx,ecx
c0001f70:	76 0d                	jbe    c0001f7f <clst2sect+0x1a>
c0001f72:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f76:	0f af d1             	imul   edx,ecx
c0001f79:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f7c:	89 d0                	mov    eax,edx
c0001f7e:	c3                   	ret    
c0001f7f:	31 c0                	xor    eax,eax
c0001f81:	c3                   	ret    

c0001f82 <pick_lfn>:
c0001f82:	55                   	push   ebp
c0001f83:	57                   	push   edi
c0001f84:	56                   	push   esi
c0001f85:	89 d6                	mov    esi,edx
c0001f87:	53                   	push   ebx
c0001f88:	89 c3                	mov    ebx,eax
c0001f8a:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f8d:	e8 8d fd ff ff       	call   c0001d1f <ld_word>
c0001f92:	66 85 c0             	test   ax,ax
c0001f95:	74 04                	je     c0001f9b <pick_lfn+0x19>
c0001f97:	31 c0                	xor    eax,eax
c0001f99:	eb 5c                	jmp    c0001ff7 <pick_lfn+0x75>
c0001f9b:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f9e:	bd 01 00 00 00       	mov    ebp,0x1
c0001fa3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fa6:	31 ff                	xor    edi,edi
c0001fa8:	49                   	dec    ecx
c0001fa9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fac:	0f b6 87 c0 cb 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3440]
c0001fb3:	01 f0                	add    eax,esi
c0001fb5:	e8 65 fd ff ff       	call   c0001d1f <ld_word>
c0001fba:	66 85 ed             	test   bp,bp
c0001fbd:	74 11                	je     c0001fd0 <pick_lfn+0x4e>
c0001fbf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fc5:	77 d0                	ja     c0001f97 <pick_lfn+0x15>
c0001fc7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fcb:	89 c5                	mov    ebp,eax
c0001fcd:	41                   	inc    ecx
c0001fce:	eb 04                	jmp    c0001fd4 <pick_lfn+0x52>
c0001fd0:	66 40                	inc    ax
c0001fd2:	75 c3                	jne    c0001f97 <pick_lfn+0x15>
c0001fd4:	47                   	inc    edi
c0001fd5:	83 ff 0d             	cmp    edi,0xd
c0001fd8:	75 d2                	jne    c0001fac <pick_lfn+0x2a>
c0001fda:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fdd:	74 13                	je     c0001ff2 <pick_lfn+0x70>
c0001fdf:	66 85 ed             	test   bp,bp
c0001fe2:	74 0e                	je     c0001ff2 <pick_lfn+0x70>
c0001fe4:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fea:	77 ab                	ja     c0001f97 <pick_lfn+0x15>
c0001fec:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001ff2:	b8 01 00 00 00       	mov    eax,0x1
c0001ff7:	5b                   	pop    ebx
c0001ff8:	5e                   	pop    esi
c0001ff9:	5f                   	pop    edi
c0001ffa:	5d                   	pop    ebp
c0001ffb:	c3                   	ret    

c0001ffc <put_lfn>:
c0001ffc:	55                   	push   ebp
c0001ffd:	31 ed                	xor    ebp,ebp
c0001fff:	57                   	push   edi
c0002000:	89 d7                	mov    edi,edx
c0002002:	56                   	push   esi
c0002003:	31 f6                	xor    esi,esi
c0002005:	53                   	push   ebx
c0002006:	83 ec 08             	sub    esp,0x8
c0002009:	89 04 24             	mov    DWORD PTR [esp],eax
c000200c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002010:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002014:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000201a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000201d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002020:	31 d2                	xor    edx,edx
c0002022:	e8 1d fd ff ff       	call   c0001d44 <st_word>
c0002027:	0f b6 d9             	movzx  ebx,cl
c000202a:	4b                   	dec    ebx
c000202b:	6b db 0d             	imul   ebx,ebx,0xd
c000202e:	66 83 fe ff          	cmp    si,0xffff
c0002032:	74 08                	je     c000203c <put_lfn+0x40>
c0002034:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002037:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000203b:	43                   	inc    ebx
c000203c:	0f b6 85 c0 cb 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3440]
c0002043:	0f b7 d6             	movzx  edx,si
c0002046:	01 f8                	add    eax,edi
c0002048:	e8 f7 fc ff ff       	call   c0001d44 <st_word>
c000204d:	66 85 f6             	test   si,si
c0002050:	75 03                	jne    c0002055 <put_lfn+0x59>
c0002052:	83 ce ff             	or     esi,0xffffffff
c0002055:	45                   	inc    ebp
c0002056:	83 fd 0d             	cmp    ebp,0xd
c0002059:	75 d3                	jne    c000202e <put_lfn+0x32>
c000205b:	66 46                	inc    si
c000205d:	74 0a                	je     c0002069 <put_lfn+0x6d>
c000205f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002062:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002067:	75 09                	jne    c0002072 <put_lfn+0x76>
c0002069:	88 c8                	mov    al,cl
c000206b:	83 c8 40             	or     eax,0x40
c000206e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002072:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002076:	88 07                	mov    BYTE PTR [edi],al
c0002078:	83 c4 08             	add    esp,0x8
c000207b:	5b                   	pop    ebx
c000207c:	5e                   	pop    esi
c000207d:	5f                   	pop    edi
c000207e:	5d                   	pop    ebp
c000207f:	c3                   	ret    

c0002080 <gen_numname>:
c0002080:	57                   	push   edi
c0002081:	89 cf                	mov    edi,ecx
c0002083:	56                   	push   esi
c0002084:	b9 0b 00 00 00       	mov    ecx,0xb
c0002089:	53                   	push   ebx
c000208a:	89 c6                	mov    esi,eax
c000208c:	83 ec 10             	sub    esp,0x10
c000208f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002093:	e8 b3 fc ff ff       	call   c0001d4b <mem_cpy>
c0002098:	83 fb 05             	cmp    ebx,0x5
c000209b:	76 2d                	jbe    c00020ca <gen_numname+0x4a>
c000209d:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020a0:	66 85 c0             	test   ax,ax
c00020a3:	74 25                	je     c00020ca <gen_numname+0x4a>
c00020a5:	83 c7 02             	add    edi,0x2
c00020a8:	ba 10 00 00 00       	mov    edx,0x10
c00020ad:	01 db                	add    ebx,ebx
c00020af:	89 c1                	mov    ecx,eax
c00020b1:	66 d1 e8             	shr    ax,1
c00020b4:	83 e1 01             	and    ecx,0x1
c00020b7:	01 cb                	add    ebx,ecx
c00020b9:	0f ba e3 10          	bt     ebx,0x10
c00020bd:	73 06                	jae    c00020c5 <gen_numname+0x45>
c00020bf:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020c5:	4a                   	dec    edx
c00020c6:	75 e5                	jne    c00020ad <gen_numname+0x2d>
c00020c8:	eb d3                	jmp    c000209d <gen_numname+0x1d>
c00020ca:	b8 07 00 00 00       	mov    eax,0x7
c00020cf:	88 d9                	mov    cl,bl
c00020d1:	83 e1 0f             	and    ecx,0xf
c00020d4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020d7:	80 fa 39             	cmp    dl,0x39
c00020da:	76 03                	jbe    c00020df <gen_numname+0x5f>
c00020dc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020df:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020e2:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020e6:	89 da                	mov    edx,ebx
c00020e8:	c1 ea 04             	shr    edx,0x4
c00020eb:	83 fb 0f             	cmp    ebx,0xf
c00020ee:	76 06                	jbe    c00020f6 <gen_numname+0x76>
c00020f0:	89 c8                	mov    eax,ecx
c00020f2:	89 d3                	mov    ebx,edx
c00020f4:	eb d9                	jmp    c00020cf <gen_numname+0x4f>
c00020f6:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020fb:	31 d2                	xor    edx,edx
c00020fd:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002100:	8d 04 16             	lea    eax,[esi+edx*1]
c0002103:	39 ca                	cmp    edx,ecx
c0002105:	73 18                	jae    c000211f <gen_numname+0x9f>
c0002107:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000210a:	3c 20                	cmp    al,0x20
c000210c:	74 11                	je     c000211f <gen_numname+0x9f>
c000210e:	e8 8d fc ff ff       	call   c0001da0 <dbc_1st>
c0002113:	85 c0                	test   eax,eax
c0002115:	74 05                	je     c000211c <gen_numname+0x9c>
c0002117:	39 d3                	cmp    ebx,edx
c0002119:	74 04                	je     c000211f <gen_numname+0x9f>
c000211b:	42                   	inc    edx
c000211c:	42                   	inc    edx
c000211d:	eb e1                	jmp    c0002100 <gen_numname+0x80>
c000211f:	b0 20                	mov    al,0x20
c0002121:	83 f9 07             	cmp    ecx,0x7
c0002124:	77 05                	ja     c000212b <gen_numname+0xab>
c0002126:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000212a:	41                   	inc    ecx
c000212b:	42                   	inc    edx
c000212c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002130:	83 fa 07             	cmp    edx,0x7
c0002133:	76 ea                	jbe    c000211f <gen_numname+0x9f>
c0002135:	83 c4 10             	add    esp,0x10
c0002138:	5b                   	pop    ebx
c0002139:	5e                   	pop    esi
c000213a:	5f                   	pop    edi
c000213b:	c3                   	ret    

c000213c <sum_sfn>:
c000213c:	31 c9                	xor    ecx,ecx
c000213e:	31 d2                	xor    edx,edx
c0002140:	d0 ca                	ror    dl,1
c0002142:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002145:	41                   	inc    ecx
c0002146:	83 f9 0b             	cmp    ecx,0xb
c0002149:	75 f5                	jne    c0002140 <sum_sfn+0x4>
c000214b:	88 d0                	mov    al,dl
c000214d:	c3                   	ret    

c000214e <get_ldnumber>:
c000214e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002150:	85 d2                	test   edx,edx
c0002152:	74 14                	je     c0002168 <get_ldnumber+0x1a>
c0002154:	56                   	push   esi
c0002155:	53                   	push   ebx
c0002156:	89 d3                	mov    ebx,edx
c0002158:	43                   	inc    ebx
c0002159:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000215c:	80 f9 1f             	cmp    cl,0x1f
c000215f:	76 0d                	jbe    c000216e <get_ldnumber+0x20>
c0002161:	80 f9 3a             	cmp    cl,0x3a
c0002164:	75 f2                	jne    c0002158 <get_ldnumber+0xa>
c0002166:	eb 0a                	jmp    c0002172 <get_ldnumber+0x24>
c0002168:	83 c9 ff             	or     ecx,0xffffffff
c000216b:	89 c8                	mov    eax,ecx
c000216d:	c3                   	ret    
c000216e:	31 c9                	xor    ecx,ecx
c0002170:	eb 24                	jmp    c0002196 <get_ldnumber+0x48>
c0002172:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002175:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002178:	80 f9 09             	cmp    cl,0x9
c000217b:	77 16                	ja     c0002193 <get_ldnumber+0x45>
c000217d:	83 c2 02             	add    edx,0x2
c0002180:	83 c9 ff             	or     ecx,0xffffffff
c0002183:	39 d3                	cmp    ebx,edx
c0002185:	75 0f                	jne    c0002196 <get_ldnumber+0x48>
c0002187:	89 f2                	mov    edx,esi
c0002189:	89 18                	mov    DWORD PTR [eax],ebx
c000218b:	0f be ca             	movsx  ecx,dl
c000218e:	83 e9 30             	sub    ecx,0x30
c0002191:	eb 03                	jmp    c0002196 <get_ldnumber+0x48>
c0002193:	83 c9 ff             	or     ecx,0xffffffff
c0002196:	89 c8                	mov    eax,ecx
c0002198:	5b                   	pop    ebx
c0002199:	5e                   	pop    esi
c000219a:	c3                   	ret    

c000219b <validate>:
c000219b:	56                   	push   esi
c000219c:	53                   	push   ebx
c000219d:	89 d6                	mov    esi,edx
c000219f:	51                   	push   ecx
c00021a0:	85 c0                	test   eax,eax
c00021a2:	75 09                	jne    c00021ad <validate+0x12>
c00021a4:	b8 09 00 00 00       	mov    eax,0x9
c00021a9:	31 c9                	xor    ecx,ecx
c00021ab:	eb 2f                	jmp    c00021dc <validate+0x41>
c00021ad:	89 c3                	mov    ebx,eax
c00021af:	8b 00                	mov    eax,DWORD PTR [eax]
c00021b1:	85 c0                	test   eax,eax
c00021b3:	74 ef                	je     c00021a4 <validate+0x9>
c00021b5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021b8:	74 ea                	je     c00021a4 <validate+0x9>
c00021ba:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021be:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021c2:	75 e0                	jne    c00021a4 <validate+0x9>
c00021c4:	83 ec 0c             	sub    esp,0xc
c00021c7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021cb:	50                   	push   eax
c00021cc:	e8 fd fa ff ff       	call   c0001cce <disk_status>
c00021d1:	83 c4 10             	add    esp,0x10
c00021d4:	a8 01                	test   al,0x1
c00021d6:	75 cc                	jne    c00021a4 <validate+0x9>
c00021d8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021da:	31 c0                	xor    eax,eax
c00021dc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021de:	5a                   	pop    edx
c00021df:	5b                   	pop    ebx
c00021e0:	5e                   	pop    esi
c00021e1:	c3                   	ret    

c00021e2 <sync_window>:
c00021e2:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00021e6:	74 58                	je     c0002240 <sync_window+0x5e>
c00021e8:	56                   	push   esi
c00021e9:	53                   	push   ebx
c00021ea:	8d 70 34             	lea    esi,[eax+0x34]
c00021ed:	51                   	push   ecx
c00021ee:	89 c3                	mov    ebx,eax
c00021f0:	6a 01                	push   0x1
c00021f2:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00021f5:	56                   	push   esi
c00021f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021fa:	50                   	push   eax
c00021fb:	e8 ea fa ff ff       	call   c0001cea <disk_write>
c0002200:	83 c4 10             	add    esp,0x10
c0002203:	ba 01 00 00 00       	mov    edx,0x1
c0002208:	85 c0                	test   eax,eax
c000220a:	75 2e                	jne    c000223a <sync_window+0x58>
c000220c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000220f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002212:	89 c1                	mov    ecx,eax
c0002214:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002218:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000221b:	39 d1                	cmp    ecx,edx
c000221d:	73 19                	jae    c0002238 <sync_window+0x56>
c000221f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002223:	75 13                	jne    c0002238 <sync_window+0x56>
c0002225:	6a 01                	push   0x1
c0002227:	01 d0                	add    eax,edx
c0002229:	50                   	push   eax
c000222a:	56                   	push   esi
c000222b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000222f:	50                   	push   eax
c0002230:	e8 b5 fa ff ff       	call   c0001cea <disk_write>
c0002235:	83 c4 10             	add    esp,0x10
c0002238:	31 d2                	xor    edx,edx
c000223a:	89 d0                	mov    eax,edx
c000223c:	5a                   	pop    edx
c000223d:	5b                   	pop    ebx
c000223e:	5e                   	pop    esi
c000223f:	c3                   	ret    
c0002240:	31 d2                	xor    edx,edx
c0002242:	89 d0                	mov    eax,edx
c0002244:	c3                   	ret    

c0002245 <move_window>:
c0002245:	57                   	push   edi
c0002246:	56                   	push   esi
c0002247:	31 f6                	xor    esi,esi
c0002249:	53                   	push   ebx
c000224a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000224d:	74 32                	je     c0002281 <move_window+0x3c>
c000224f:	89 c3                	mov    ebx,eax
c0002251:	89 d7                	mov    edi,edx
c0002253:	e8 8a ff ff ff       	call   c00021e2 <sync_window>
c0002258:	89 c6                	mov    esi,eax
c000225a:	85 c0                	test   eax,eax
c000225c:	75 23                	jne    c0002281 <move_window+0x3c>
c000225e:	6a 01                	push   0x1
c0002260:	8d 43 34             	lea    eax,[ebx+0x34]
c0002263:	57                   	push   edi
c0002264:	50                   	push   eax
c0002265:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002269:	50                   	push   eax
c000226a:	e8 65 fa ff ff       	call   c0001cd4 <disk_read>
c000226f:	83 c4 10             	add    esp,0x10
c0002272:	85 c0                	test   eax,eax
c0002274:	74 08                	je     c000227e <move_window+0x39>
c0002276:	be 01 00 00 00       	mov    esi,0x1
c000227b:	83 cf ff             	or     edi,0xffffffff
c000227e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c0002281:	89 f0                	mov    eax,esi
c0002283:	5b                   	pop    ebx
c0002284:	5e                   	pop    esi
c0002285:	5f                   	pop    edi
c0002286:	c3                   	ret    

c0002287 <check_fs>:
c0002287:	53                   	push   ebx
c0002288:	89 c3                	mov    ebx,eax
c000228a:	83 ec 08             	sub    esp,0x8
c000228d:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c0002291:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002298:	e8 a8 ff ff ff       	call   c0002245 <move_window>
c000229d:	ba 04 00 00 00       	mov    edx,0x4
c00022a2:	85 c0                	test   eax,eax
c00022a4:	75 68                	jne    c000230e <check_fs+0x87>
c00022a6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022ac:	e8 6e fa ff ff       	call   c0001d1f <ld_word>
c00022b1:	ba 03 00 00 00       	mov    edx,0x3
c00022b6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022ba:	75 52                	jne    c000230e <check_fs+0x87>
c00022bc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022bf:	8d 50 18             	lea    edx,[eax+0x18]
c00022c2:	80 fa 01             	cmp    dl,0x1
c00022c5:	76 09                	jbe    c00022d0 <check_fs+0x49>
c00022c7:	ba 02 00 00 00       	mov    edx,0x2
c00022cc:	3c eb                	cmp    al,0xeb
c00022ce:	75 3e                	jne    c000230e <check_fs+0x87>
c00022d0:	ba 24 ea 01 c0       	mov    edx,0xc001ea24
c00022d5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022d8:	b9 03 00 00 00       	mov    ecx,0x3
c00022dd:	e8 89 fa ff ff       	call   c0001d6b <mem_cmp>
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	85 c0                	test   eax,eax
c00022e6:	74 26                	je     c000230e <check_fs+0x87>
c00022e8:	ba 7c ca 01 c0       	mov    edx,0xc001ca7c
c00022ed:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00022f3:	b9 05 00 00 00       	mov    ecx,0x5
c00022f8:	e8 6e fa ff ff       	call   c0001d6b <mem_cmp>
c00022fd:	31 d2                	xor    edx,edx
c00022ff:	85 c0                	test   eax,eax
c0002301:	74 0b                	je     c000230e <check_fs+0x87>
c0002303:	31 d2                	xor    edx,edx
c0002305:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002309:	0f 95 c2             	setne  dl
c000230c:	01 d2                	add    edx,edx
c000230e:	89 d0                	mov    eax,edx
c0002310:	83 c4 08             	add    esp,0x8
c0002313:	5b                   	pop    ebx
c0002314:	c3                   	ret    

c0002315 <find_volume>:
c0002315:	55                   	push   ebp
c0002316:	57                   	push   edi
c0002317:	56                   	push   esi
c0002318:	89 c6                	mov    esi,eax
c000231a:	53                   	push   ebx
c000231b:	89 d3                	mov    ebx,edx
c000231d:	83 ec 2c             	sub    esp,0x2c
c0002320:	31 d2                	xor    edx,edx
c0002322:	e8 60 ff ff ff       	call   c0002287 <check_fs>
c0002327:	83 f8 02             	cmp    eax,0x2
c000232a:	74 06                	je     c0002332 <find_volume+0x1d>
c000232c:	77 62                	ja     c0002390 <find_volume+0x7b>
c000232e:	85 db                	test   ebx,ebx
c0002330:	74 5e                	je     c0002390 <find_volume+0x7b>
c0002332:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002336:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000233c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002342:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002346:	89 cf                	mov    edi,ecx
c0002348:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000234c:	89 e8                	mov    eax,ebp
c000234e:	83 c5 10             	add    ebp,0x10
c0002351:	e8 d6 f9 ff ff       	call   c0001d2c <ld_dword>
c0002356:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000235a:	89 01                	mov    DWORD PTR [ecx],eax
c000235c:	83 c1 04             	add    ecx,0x4
c000235f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002363:	75 e3                	jne    c0002348 <find_volume+0x33>
c0002365:	31 ed                	xor    ebp,ebp
c0002367:	85 db                	test   ebx,ebx
c0002369:	74 03                	je     c000236e <find_volume+0x59>
c000236b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000236e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002371:	b8 03 00 00 00       	mov    eax,0x3
c0002376:	85 d2                	test   edx,edx
c0002378:	74 0c                	je     c0002386 <find_volume+0x71>
c000237a:	89 f0                	mov    eax,esi
c000237c:	e8 06 ff ff ff       	call   c0002287 <check_fs>
c0002381:	83 f8 01             	cmp    eax,0x1
c0002384:	76 0a                	jbe    c0002390 <find_volume+0x7b>
c0002386:	85 db                	test   ebx,ebx
c0002388:	75 06                	jne    c0002390 <find_volume+0x7b>
c000238a:	45                   	inc    ebp
c000238b:	83 fd 03             	cmp    ebp,0x3
c000238e:	76 de                	jbe    c000236e <find_volume+0x59>
c0002390:	83 c4 2c             	add    esp,0x2c
c0002393:	5b                   	pop    ebx
c0002394:	5e                   	pop    esi
c0002395:	5f                   	pop    edi
c0002396:	5d                   	pop    ebp
c0002397:	c3                   	ret    

c0002398 <mount_volume>:
c0002398:	55                   	push   ebp
c0002399:	89 d5                	mov    ebp,edx
c000239b:	57                   	push   edi
c000239c:	89 cf                	mov    edi,ecx
c000239e:	56                   	push   esi
c000239f:	53                   	push   ebx
c00023a0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023a5:	83 ec 2c             	sub    esp,0x2c
c00023a8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ae:	e8 9b fd ff ff       	call   c000214e <get_ldnumber>
c00023b3:	85 c0                	test   eax,eax
c00023b5:	0f 88 d6 02 00 00    	js     c0002691 <mount_volume+0x2f9>
c00023bb:	8b 34 85 c0 fa 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0540]
c00023c2:	89 c2                	mov    edx,eax
c00023c4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023c9:	85 f6                	test   esi,esi
c00023cb:	0f 84 c0 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c00023d1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023d4:	83 e7 fe             	and    edi,0xfffffffe
c00023d7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023da:	74 3a                	je     c0002416 <mount_volume+0x7e>
c00023dc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00023e0:	83 ec 0c             	sub    esp,0xc
c00023e3:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00023e7:	50                   	push   eax
c00023e8:	e8 e1 f8 ff ff       	call   c0001cce <disk_status>
c00023ed:	83 c4 10             	add    esp,0x10
c00023f0:	a8 01                	test   al,0x1
c00023f2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00023f6:	75 1e                	jne    c0002416 <mount_volume+0x7e>
c00023f8:	31 db                	xor    ebx,ebx
c00023fa:	89 f9                	mov    ecx,edi
c00023fc:	84 c9                	test   cl,cl
c00023fe:	0f 84 8d 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002404:	a8 04                	test   al,0x4
c0002406:	0f 84 85 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c000240c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002411:	e9 7b 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002416:	83 ec 0c             	sub    esp,0xc
c0002419:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000241c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000241f:	0f b6 c2             	movzx  eax,dl
c0002422:	bb 03 00 00 00       	mov    ebx,0x3
c0002427:	50                   	push   eax
c0002428:	e8 a4 f8 ff ff       	call   c0001cd1 <disk_initialize>
c000242d:	83 c4 10             	add    esp,0x10
c0002430:	a8 01                	test   al,0x1
c0002432:	0f 85 59 02 00 00    	jne    c0002691 <mount_volume+0x2f9>
c0002438:	89 f9                	mov    ecx,edi
c000243a:	84 c9                	test   cl,cl
c000243c:	74 04                	je     c0002442 <mount_volume+0xaa>
c000243e:	a8 04                	test   al,0x4
c0002440:	75 ca                	jne    c000240c <mount_volume+0x74>
c0002442:	31 d2                	xor    edx,edx
c0002444:	89 f0                	mov    eax,esi
c0002446:	bb 01 00 00 00       	mov    ebx,0x1
c000244b:	e8 c5 fe ff ff       	call   c0002315 <find_volume>
c0002450:	83 f8 04             	cmp    eax,0x4
c0002453:	0f 84 38 02 00 00    	je     c0002691 <mount_volume+0x2f9>
c0002459:	83 f8 01             	cmp    eax,0x1
c000245c:	76 0a                	jbe    c0002468 <mount_volume+0xd0>
c000245e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002463:	e9 29 02 00 00       	jmp    c0002691 <mount_volume+0x2f9>
c0002468:	8d 46 3f             	lea    eax,[esi+0x3f]
c000246b:	e8 af f8 ff ff       	call   c0001d1f <ld_word>
c0002470:	66 3d 00 02          	cmp    ax,0x200
c0002474:	75 e8                	jne    c000245e <mount_volume+0xc6>
c0002476:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002479:	e8 a1 f8 ff ff       	call   c0001d1f <ld_word>
c000247e:	0f b7 c0             	movzx  eax,ax
c0002481:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002485:	85 c0                	test   eax,eax
c0002487:	75 0c                	jne    c0002495 <mount_volume+0xfd>
c0002489:	8d 46 58             	lea    eax,[esi+0x58]
c000248c:	e8 9b f8 ff ff       	call   c0001d2c <ld_dword>
c0002491:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002495:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002498:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c000249b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000249f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024a3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024a6:	89 e8                	mov    eax,ebp
c00024a8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024ab:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ae:	3c 01                	cmp    al,0x1
c00024b0:	77 ac                	ja     c000245e <mount_volume+0xc6>
c00024b2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024b6:	89 c3                	mov    ebx,eax
c00024b8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024bc:	66 85 c0             	test   ax,ax
c00024bf:	74 9d                	je     c000245e <mount_volume+0xc6>
c00024c1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024c4:	85 d8                	test   eax,ebx
c00024c6:	75 96                	jne    c000245e <mount_volume+0xc6>
c00024c8:	8d 46 45             	lea    eax,[esi+0x45]
c00024cb:	e8 4f f8 ff ff       	call   c0001d1f <ld_word>
c00024d0:	89 c7                	mov    edi,eax
c00024d2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024d6:	a8 0f                	test   al,0xf
c00024d8:	75 84                	jne    c000245e <mount_volume+0xc6>
c00024da:	8d 46 47             	lea    eax,[esi+0x47]
c00024dd:	e8 3d f8 ff ff       	call   c0001d1f <ld_word>
c00024e2:	0f b7 d0             	movzx  edx,ax
c00024e5:	85 d2                	test   edx,edx
c00024e7:	75 0a                	jne    c00024f3 <mount_volume+0x15b>
c00024e9:	8d 46 54             	lea    eax,[esi+0x54]
c00024ec:	e8 3b f8 ff ff       	call   c0001d2c <ld_dword>
c00024f1:	89 c2                	mov    edx,eax
c00024f3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00024f7:	8d 46 42             	lea    eax,[esi+0x42]
c00024fa:	e8 20 f8 ff ff       	call   c0001d1f <ld_word>
c00024ff:	66 85 c0             	test   ax,ax
c0002502:	0f 84 56 ff ff ff    	je     c000245e <mount_volume+0xc6>
c0002508:	89 e9                	mov    ecx,ebp
c000250a:	0f b7 c0             	movzx  eax,ax
c000250d:	0f b6 e9             	movzx  ebp,cl
c0002510:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002514:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002518:	89 f8                	mov    eax,edi
c000251a:	0f af cd             	imul   ecx,ebp
c000251d:	66 c1 e8 04          	shr    ax,0x4
c0002521:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002525:	0f b7 c0             	movzx  eax,ax
c0002528:	01 c8                	add    eax,ecx
c000252a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000252e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002532:	39 c2                	cmp    edx,eax
c0002534:	0f 82 24 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000253a:	29 c2                	sub    edx,eax
c000253c:	89 d5                	mov    ebp,edx
c000253e:	89 d0                	mov    eax,edx
c0002540:	31 d2                	xor    edx,edx
c0002542:	f7 f3                	div    ebx
c0002544:	39 dd                	cmp    ebp,ebx
c0002546:	0f 82 12 ff ff ff    	jb     c000245e <mount_volume+0xc6>
c000254c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002551:	0f 87 07 ff ff ff    	ja     c000245e <mount_volume+0xc6>
c0002557:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000255c:	0f 86 1f 01 00 00    	jbe    c0002681 <mount_volume+0x2e9>
c0002562:	bb 03 00 00 00       	mov    ebx,0x3
c0002567:	8d 68 02             	lea    ebp,[eax+0x2]
c000256a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000256e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002572:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002576:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002579:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000257c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002580:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c0002583:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002587:	83 fb 03             	cmp    ebx,0x3
c000258a:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000258d:	75 21                	jne    c00025b0 <mount_volume+0x218>
c000258f:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002592:	e8 88 f7 ff ff       	call   c0001d1f <ld_word>
c0002597:	66 09 c7             	or     di,ax
c000259a:	0f 85 be fe ff ff    	jne    c000245e <mount_volume+0xc6>
c00025a0:	8d 46 60             	lea    eax,[esi+0x60]
c00025a3:	c1 e5 02             	shl    ebp,0x2
c00025a6:	e8 81 f7 ff ff       	call   c0001d2c <ld_dword>
c00025ab:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ae:	eb 22                	jmp    c00025d2 <mount_volume+0x23a>
c00025b0:	66 85 ff             	test   di,di
c00025b3:	0f 84 a5 fe ff ff    	je     c000245e <mount_volume+0xc6>
c00025b9:	01 c8                	add    eax,ecx
c00025bb:	83 fb 02             	cmp    ebx,0x2
c00025be:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025c1:	75 04                	jne    c00025c7 <mount_volume+0x22f>
c00025c3:	01 ed                	add    ebp,ebp
c00025c5:	eb 0b                	jmp    c00025d2 <mount_volume+0x23a>
c00025c7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025cb:	83 e5 01             	and    ebp,0x1
c00025ce:	d1 e8                	shr    eax,1
c00025d0:	01 c5                	add    ebp,eax
c00025d2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025d8:	c1 ed 09             	shr    ebp,0x9
c00025db:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025df:	0f 87 79 fe ff ff    	ja     c000245e <mount_volume+0xc6>
c00025e5:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00025ec:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00025f3:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00025f7:	83 fb 03             	cmp    ebx,0x3
c00025fa:	75 6e                	jne    c000266a <mount_volume+0x2d2>
c00025fc:	8d 46 64             	lea    eax,[esi+0x64]
c00025ff:	e8 1b f7 ff ff       	call   c0001d1f <ld_word>
c0002604:	66 48                	dec    ax
c0002606:	75 62                	jne    c000266a <mount_volume+0x2d2>
c0002608:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000260c:	89 f0                	mov    eax,esi
c000260e:	42                   	inc    edx
c000260f:	e8 31 fc ff ff       	call   c0002245 <move_window>
c0002614:	85 c0                	test   eax,eax
c0002616:	75 52                	jne    c000266a <mount_volume+0x2d2>
c0002618:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000261c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002622:	e8 f8 f6 ff ff       	call   c0001d1f <ld_word>
c0002627:	66 3d 55 aa          	cmp    ax,0xaa55
c000262b:	75 3d                	jne    c000266a <mount_volume+0x2d2>
c000262d:	8d 46 34             	lea    eax,[esi+0x34]
c0002630:	e8 f7 f6 ff ff       	call   c0001d2c <ld_dword>
c0002635:	3d 52 52 61 41       	cmp    eax,0x41615252
c000263a:	75 2e                	jne    c000266a <mount_volume+0x2d2>
c000263c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002642:	e8 e5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002647:	3d 72 72 41 61       	cmp    eax,0x61417272
c000264c:	75 1c                	jne    c000266a <mount_volume+0x2d2>
c000264e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002654:	e8 d3 f6 ff ff       	call   c0001d2c <ld_dword>
c0002659:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000265c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002662:	e8 c5 f6 ff ff       	call   c0001d2c <ld_dword>
c0002667:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000266a:	66 a1 a0 fa 01 c0    	mov    ax,ds:0xc001faa0
c0002670:	88 1e                	mov    BYTE PTR [esi],bl
c0002672:	40                   	inc    eax
c0002673:	31 db                	xor    ebx,ebx
c0002675:	66 a3 a0 fa 01 c0    	mov    ds:0xc001faa0,ax
c000267b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000267f:	eb 10                	jmp    c0002691 <mount_volume+0x2f9>
c0002681:	31 db                	xor    ebx,ebx
c0002683:	3d f5 0f 00 00       	cmp    eax,0xff5
c0002688:	0f 97 c3             	seta   bl
c000268b:	43                   	inc    ebx
c000268c:	e9 d6 fe ff ff       	jmp    c0002567 <mount_volume+0x1cf>
c0002691:	83 c4 2c             	add    esp,0x2c
c0002694:	89 d8                	mov    eax,ebx
c0002696:	5b                   	pop    ebx
c0002697:	5e                   	pop    esi
c0002698:	5f                   	pop    edi
c0002699:	5d                   	pop    ebp
c000269a:	c3                   	ret    

c000269b <put_fat>:
c000269b:	55                   	push   ebp
c000269c:	bd 02 00 00 00       	mov    ebp,0x2
c00026a1:	57                   	push   edi
c00026a2:	56                   	push   esi
c00026a3:	53                   	push   ebx
c00026a4:	83 ec 1c             	sub    esp,0x1c
c00026a7:	83 fa 01             	cmp    edx,0x1
c00026aa:	0f 86 31 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026b3:	0f 86 28 01 00 00    	jbe    c00027e1 <put_fat+0x146>
c00026b9:	89 c6                	mov    esi,eax
c00026bb:	89 cf                	mov    edi,ecx
c00026bd:	8a 00                	mov    al,BYTE PTR [eax]
c00026bf:	89 d3                	mov    ebx,edx
c00026c1:	3c 02                	cmp    al,0x2
c00026c3:	0f 84 ac 00 00 00    	je     c0002775 <put_fat+0xda>
c00026c9:	3c 03                	cmp    al,0x3
c00026cb:	0f 84 d1 00 00 00    	je     c00027a2 <put_fat+0x107>
c00026d1:	fe c8                	dec    al
c00026d3:	0f 85 08 01 00 00    	jne    c00027e1 <put_fat+0x146>
c00026d9:	89 d1                	mov    ecx,edx
c00026db:	89 f0                	mov    eax,esi
c00026dd:	d1 e9                	shr    ecx,1
c00026df:	01 d1                	add    ecx,edx
c00026e1:	89 ca                	mov    edx,ecx
c00026e3:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00026e7:	c1 ea 09             	shr    edx,0x9
c00026ea:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00026ed:	e8 53 fb ff ff       	call   c0002245 <move_window>
c00026f2:	89 c5                	mov    ebp,eax
c00026f4:	85 c0                	test   eax,eax
c00026f6:	0f 85 e5 00 00 00    	jne    c00027e1 <put_fat+0x146>
c00026fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002700:	8d 46 34             	lea    eax,[esi+0x34]
c0002703:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002707:	8d 41 01             	lea    eax,[ecx+0x1]
c000270a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002710:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002714:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002718:	89 f8                	mov    eax,edi
c000271a:	83 e3 01             	and    ebx,0x1
c000271d:	74 0c                	je     c000272b <put_fat+0x90>
c000271f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002721:	89 f8                	mov    eax,edi
c0002723:	83 e2 0f             	and    edx,0xf
c0002726:	c1 e0 04             	shl    eax,0x4
c0002729:	09 d0                	or     eax,edx
c000272b:	88 01                	mov    BYTE PTR [ecx],al
c000272d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002731:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002735:	c1 ea 09             	shr    edx,0x9
c0002738:	89 f0                	mov    eax,esi
c000273a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000273d:	e8 03 fb ff ff       	call   c0002245 <move_window>
c0002742:	89 c5                	mov    ebp,eax
c0002744:	85 c0                	test   eax,eax
c0002746:	0f 85 95 00 00 00    	jne    c00027e1 <put_fat+0x146>
c000274c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002750:	25 ff 01 00 00       	and    eax,0x1ff
c0002755:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002759:	85 db                	test   ebx,ebx
c000275b:	74 07                	je     c0002764 <put_fat+0xc9>
c000275d:	c1 ef 04             	shr    edi,0x4
c0002760:	89 f9                	mov    ecx,edi
c0002762:	eb 0d                	jmp    c0002771 <put_fat+0xd6>
c0002764:	8a 08                	mov    cl,BYTE PTR [eax]
c0002766:	c1 ef 08             	shr    edi,0x8
c0002769:	83 e1 f0             	and    ecx,0xfffffff0
c000276c:	83 e7 0f             	and    edi,0xf
c000276f:	09 f9                	or     ecx,edi
c0002771:	88 08                	mov    BYTE PTR [eax],cl
c0002773:	eb 27                	jmp    c000279c <put_fat+0x101>
c0002775:	c1 ea 08             	shr    edx,0x8
c0002778:	89 f0                	mov    eax,esi
c000277a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000277d:	e8 c3 fa ff ff       	call   c0002245 <move_window>
c0002782:	89 c5                	mov    ebp,eax
c0002784:	85 c0                	test   eax,eax
c0002786:	75 59                	jne    c00027e1 <put_fat+0x146>
c0002788:	01 db                	add    ebx,ebx
c000278a:	0f b7 d7             	movzx  edx,di
c000278d:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002793:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002797:	e8 a8 f5 ff ff       	call   c0001d44 <st_word>
c000279c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027a0:	eb 3f                	jmp    c00027e1 <put_fat+0x146>
c00027a2:	c1 ea 07             	shr    edx,0x7
c00027a5:	89 f0                	mov    eax,esi
c00027a7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027aa:	e8 96 fa ff ff       	call   c0002245 <move_window>
c00027af:	89 c5                	mov    ebp,eax
c00027b1:	85 c0                	test   eax,eax
c00027b3:	75 2c                	jne    c00027e1 <put_fat+0x146>
c00027b5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027bb:	c1 e3 02             	shl    ebx,0x2
c00027be:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027c4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027c8:	89 d8                	mov    eax,ebx
c00027ca:	e8 5d f5 ff ff       	call   c0001d2c <ld_dword>
c00027cf:	25 00 00 00 f0       	and    eax,0xf0000000
c00027d4:	09 f8                	or     eax,edi
c00027d6:	89 c2                	mov    edx,eax
c00027d8:	89 d8                	mov    eax,ebx
c00027da:	e8 69 f5 ff ff       	call   c0001d48 <st_dword>
c00027df:	eb bb                	jmp    c000279c <put_fat+0x101>
c00027e1:	83 c4 1c             	add    esp,0x1c
c00027e4:	89 e8                	mov    eax,ebp
c00027e6:	5b                   	pop    ebx
c00027e7:	5e                   	pop    esi
c00027e8:	5f                   	pop    edi
c00027e9:	5d                   	pop    ebp
c00027ea:	c3                   	ret    

c00027eb <dir_clear>:
c00027eb:	55                   	push   ebp
c00027ec:	57                   	push   edi
c00027ed:	56                   	push   esi
c00027ee:	89 c6                	mov    esi,eax
c00027f0:	53                   	push   ebx
c00027f1:	83 ec 1c             	sub    esp,0x1c
c00027f4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027f8:	e8 e5 f9 ff ff       	call   c00021e2 <sync_window>
c00027fd:	85 c0                	test   eax,eax
c00027ff:	0f 85 c0 00 00 00    	jne    c00028c5 <dir_clear+0xda>
c0002805:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002809:	89 f0                	mov    eax,esi
c000280b:	e8 55 f7 ff ff       	call   c0001f65 <clst2sect>
c0002810:	31 d2                	xor    edx,edx
c0002812:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002815:	89 c5                	mov    ebp,eax
c0002817:	b9 00 02 00 00       	mov    ecx,0x200
c000281c:	8d 46 34             	lea    eax,[esi+0x34]
c000281f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002823:	e8 38 f5 ff ff       	call   c0001d60 <mem_set>
c0002828:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000282c:	c1 e3 09             	shl    ebx,0x9
c000282f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002835:	76 1b                	jbe    c0002852 <dir_clear+0x67>
c0002837:	bb 00 80 00 00       	mov    ebx,0x8000
c000283c:	eb 14                	jmp    c0002852 <dir_clear+0x67>
c000283e:	83 ec 0c             	sub    esp,0xc
c0002841:	53                   	push   ebx
c0002842:	e8 25 32 00 00       	call   c0005a6c <ff_memalloc>
c0002847:	83 c4 10             	add    esp,0x10
c000284a:	89 c7                	mov    edi,eax
c000284c:	85 c0                	test   eax,eax
c000284e:	75 7c                	jne    c00028cc <dir_clear+0xe1>
c0002850:	d1 eb                	shr    ebx,1
c0002852:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002858:	77 e4                	ja     c000283e <dir_clear+0x53>
c000285a:	31 db                	xor    ebx,ebx
c000285c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002860:	39 d8                	cmp    eax,ebx
c0002862:	76 53                	jbe    c00028b7 <dir_clear+0xcc>
c0002864:	6a 01                	push   0x1
c0002866:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002869:	50                   	push   eax
c000286a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000286e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002872:	50                   	push   eax
c0002873:	e8 72 f4 ff ff       	call   c0001cea <disk_write>
c0002878:	83 c4 10             	add    esp,0x10
c000287b:	85 c0                	test   eax,eax
c000287d:	75 38                	jne    c00028b7 <dir_clear+0xcc>
c000287f:	43                   	inc    ebx
c0002880:	eb da                	jmp    c000285c <dir_clear+0x71>
c0002882:	52                   	push   edx
c0002883:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002886:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000288a:	50                   	push   eax
c000288b:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288f:	57                   	push   edi
c0002890:	50                   	push   eax
c0002891:	e8 54 f4 ff ff       	call   c0001cea <disk_write>
c0002896:	83 c4 10             	add    esp,0x10
c0002899:	85 c0                	test   eax,eax
c000289b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000289f:	75 0a                	jne    c00028ab <dir_clear+0xc0>
c00028a1:	01 d3                	add    ebx,edx
c00028a3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028a7:	39 d8                	cmp    eax,ebx
c00028a9:	77 d7                	ja     c0002882 <dir_clear+0x97>
c00028ab:	83 ec 0c             	sub    esp,0xc
c00028ae:	57                   	push   edi
c00028af:	e8 d0 31 00 00       	call   c0005a84 <ff_memfree>
c00028b4:	83 c4 10             	add    esp,0x10
c00028b7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028bb:	39 d8                	cmp    eax,ebx
c00028bd:	0f 95 c0             	setne  al
c00028c0:	0f b6 c0             	movzx  eax,al
c00028c3:	eb 19                	jmp    c00028de <dir_clear+0xf3>
c00028c5:	b8 01 00 00 00       	mov    eax,0x1
c00028ca:	eb 12                	jmp    c00028de <dir_clear+0xf3>
c00028cc:	89 d9                	mov    ecx,ebx
c00028ce:	31 d2                	xor    edx,edx
c00028d0:	e8 8b f4 ff ff       	call   c0001d60 <mem_set>
c00028d5:	89 da                	mov    edx,ebx
c00028d7:	31 db                	xor    ebx,ebx
c00028d9:	c1 ea 09             	shr    edx,0x9
c00028dc:	eb c5                	jmp    c00028a3 <dir_clear+0xb8>
c00028de:	83 c4 1c             	add    esp,0x1c
c00028e1:	5b                   	pop    ebx
c00028e2:	5e                   	pop    esi
c00028e3:	5f                   	pop    edi
c00028e4:	5d                   	pop    ebp
c00028e5:	c3                   	ret    

c00028e6 <create_name>:
c00028e6:	55                   	push   ebp
c00028e7:	89 d5                	mov    ebp,edx
c00028e9:	57                   	push   edi
c00028ea:	89 c7                	mov    edi,eax
c00028ec:	56                   	push   esi
c00028ed:	31 f6                	xor    esi,esi
c00028ef:	53                   	push   ebx
c00028f0:	83 ec 3c             	sub    esp,0x3c
c00028f3:	8b 02                	mov    eax,DWORD PTR [edx]
c00028f5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00028f9:	8b 07                	mov    eax,DWORD PTR [edi]
c00028fb:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00028fe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002902:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002906:	e8 9b f4 ff ff       	call   c0001da6 <tchar2uni>
c000290b:	89 c3                	mov    ebx,eax
c000290d:	83 f8 ff             	cmp    eax,0xffffffff
c0002910:	75 0a                	jne    c000291c <create_name+0x36>
c0002912:	b8 06 00 00 00       	mov    eax,0x6
c0002917:	e9 9e 02 00 00       	jmp    c0002bba <create_name+0x2d4>
c000291c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002921:	76 0c                	jbe    c000292f <create_name+0x49>
c0002923:	c1 e8 10             	shr    eax,0x10
c0002926:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000292a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000292e:	46                   	inc    esi
c000292f:	66 83 fb 1f          	cmp    bx,0x1f
c0002933:	76 4f                	jbe    c0002984 <create_name+0x9e>
c0002935:	66 83 fb 5c          	cmp    bx,0x5c
c0002939:	74 35                	je     c0002970 <create_name+0x8a>
c000293b:	66 83 fb 2f          	cmp    bx,0x2f
c000293f:	74 2f                	je     c0002970 <create_name+0x8a>
c0002941:	66 83 fb 7f          	cmp    bx,0x7f
c0002945:	77 11                	ja     c0002958 <create_name+0x72>
c0002947:	0f b7 d3             	movzx  edx,bx
c000294a:	b8 82 ca 01 c0       	mov    eax,0xc001ca82
c000294f:	e8 3a f4 ff ff       	call   c0001d8e <chk_chr>
c0002954:	85 c0                	test   eax,eax
c0002956:	75 ba                	jne    c0002912 <create_name+0x2c>
c0002958:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000295e:	77 b2                	ja     c0002912 <create_name+0x2c>
c0002960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002964:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002968:	46                   	inc    esi
c0002969:	eb 97                	jmp    c0002902 <create_name+0x1c>
c000296b:	40                   	inc    eax
c000296c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002970:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002974:	8a 10                	mov    dl,BYTE PTR [eax]
c0002976:	80 fa 2f             	cmp    dl,0x2f
c0002979:	74 f0                	je     c000296b <create_name+0x85>
c000297b:	80 fa 5c             	cmp    dl,0x5c
c000297e:	74 eb                	je     c000296b <create_name+0x85>
c0002980:	31 db                	xor    ebx,ebx
c0002982:	eb 02                	jmp    c0002986 <create_name+0xa0>
c0002984:	b3 04                	mov    bl,0x4
c0002986:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000298a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000298d:	85 f6                	test   esi,esi
c000298f:	74 18                	je     c00029a9 <create_name+0xc3>
c0002991:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002995:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c000299a:	66 83 f8 20          	cmp    ax,0x20
c000299e:	74 06                	je     c00029a6 <create_name+0xc0>
c00029a0:	66 83 f8 2e          	cmp    ax,0x2e
c00029a4:	75 03                	jne    c00029a9 <create_name+0xc3>
c00029a6:	4e                   	dec    esi
c00029a7:	eb e4                	jmp    c000298d <create_name+0xa7>
c00029a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ad:	31 ed                	xor    ebp,ebp
c00029af:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029b5:	85 f6                	test   esi,esi
c00029b7:	0f 84 55 ff ff ff    	je     c0002912 <create_name+0x2c>
c00029bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029c1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029c4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029c8:	66 83 f8 20          	cmp    ax,0x20
c00029cc:	75 04                	jne    c00029d2 <create_name+0xec>
c00029ce:	89 d5                	mov    ebp,edx
c00029d0:	eb eb                	jmp    c00029bd <create_name+0xd7>
c00029d2:	85 ed                	test   ebp,ebp
c00029d4:	75 06                	jne    c00029dc <create_name+0xf6>
c00029d6:	66 83 f8 2e          	cmp    ax,0x2e
c00029da:	75 08                	jne    c00029e4 <create_name+0xfe>
c00029dc:	83 cb 03             	or     ebx,0x3
c00029df:	eb 03                	jmp    c00029e4 <create_name+0xfe>
c00029e1:	4e                   	dec    esi
c00029e2:	74 0c                	je     c00029f0 <create_name+0x10a>
c00029e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e8:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c00029ee:	75 f1                	jne    c00029e1 <create_name+0xfb>
c00029f0:	b9 0b 00 00 00       	mov    ecx,0xb
c00029f5:	8d 47 20             	lea    eax,[edi+0x20]
c00029f8:	ba 20 00 00 00       	mov    edx,0x20
c00029fd:	e8 5e f3 ff ff       	call   c0001d60 <mem_set>
c0002a02:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a0a:	31 c9                	xor    ecx,ecx
c0002a0c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a11:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a1c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a20:	66 85 ed             	test   bp,bp
c0002a23:	0f 84 30 01 00 00    	je     c0002b59 <create_name+0x273>
c0002a29:	66 83 fd 20          	cmp    bp,0x20
c0002a2d:	74 10                	je     c0002a3f <create_name+0x159>
c0002a2f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a33:	75 13                	jne    c0002a48 <create_name+0x162>
c0002a35:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a39:	0f 84 6b 01 00 00    	je     c0002baa <create_name+0x2c4>
c0002a3f:	83 cb 03             	or     ebx,0x3
c0002a42:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a46:	eb c9                	jmp    c0002a11 <create_name+0x12b>
c0002a48:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a4c:	73 0b                	jae    c0002a59 <create_name+0x173>
c0002a4e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a52:	75 47                	jne    c0002a9b <create_name+0x1b5>
c0002a54:	e9 51 01 00 00       	jmp    c0002baa <create_name+0x2c4>
c0002a59:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a5e:	75 10                	jne    c0002a70 <create_name+0x18a>
c0002a60:	83 cb 03             	or     ebx,0x3
c0002a63:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a6b:	e9 e9 00 00 00       	jmp    c0002b59 <create_name+0x273>
c0002a70:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a74:	74 0d                	je     c0002a83 <create_name+0x19d>
c0002a76:	83 cb 03             	or     ebx,0x3
c0002a79:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a7d:	0f 87 d6 00 00 00    	ja     c0002b59 <create_name+0x273>
c0002a83:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002a88:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002a8c:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a94:	b9 08 00 00 00       	mov    ecx,0x8
c0002a99:	eb a7                	jmp    c0002a42 <create_name+0x15c>
c0002a9b:	66 83 fd 7f          	cmp    bp,0x7f
c0002a9f:	76 68                	jbe    c0002b09 <create_name+0x223>
c0002aa1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002aa5:	88 da                	mov    dl,bl
c0002aa7:	83 ca 02             	or     edx,0x2
c0002aaa:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002aae:	50                   	push   eax
c0002aaf:	50                   	push   eax
c0002ab0:	68 b5 01 00 00       	push   0x1b5
c0002ab5:	55                   	push   ebp
c0002ab6:	e8 e1 2f 00 00       	call   c0005a9c <ff_uni2oem>
c0002abb:	83 c4 10             	add    esp,0x10
c0002abe:	89 c5                	mov    ebp,eax
c0002ac0:	a8 80                	test   al,0x80
c0002ac2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ac6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aca:	74 0c                	je     c0002ad8 <create_name+0x1f2>
c0002acc:	83 e5 7f             	and    ebp,0x7f
c0002acf:	0f b6 ad 40 cb 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe34c0]
c0002ad6:	eb 2a                	jmp    c0002b02 <create_name+0x21c>
c0002ad8:	66 3d ff 00          	cmp    ax,0xff
c0002adc:	76 24                	jbe    c0002b02 <create_name+0x21c>
c0002ade:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002ae2:	48                   	dec    eax
c0002ae3:	39 c8                	cmp    eax,ecx
c0002ae5:	77 0c                	ja     c0002af3 <create_name+0x20d>
c0002ae7:	83 cb 03             	or     ebx,0x3
c0002aea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002aee:	e9 4f ff ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002af3:	89 e8                	mov    eax,ebp
c0002af5:	88 d3                	mov    bl,dl
c0002af7:	66 c1 e8 08          	shr    ax,0x8
c0002afb:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002aff:	41                   	inc    ecx
c0002b00:	eb 4b                	jmp    c0002b4d <create_name+0x267>
c0002b02:	88 d3                	mov    bl,dl
c0002b04:	66 85 ed             	test   bp,bp
c0002b07:	74 19                	je     c0002b22 <create_name+0x23c>
c0002b09:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b0d:	0f b7 d5             	movzx  edx,bp
c0002b10:	b8 8b ca 01 c0       	mov    eax,0xc001ca8b
c0002b15:	e8 74 f2 ff ff       	call   c0001d8e <chk_chr>
c0002b1a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b1e:	85 c0                	test   eax,eax
c0002b20:	74 0a                	je     c0002b2c <create_name+0x246>
c0002b22:	83 cb 03             	or     ebx,0x3
c0002b25:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b2a:	eb 21                	jmp    c0002b4d <create_name+0x267>
c0002b2c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b2f:	66 83 f8 19          	cmp    ax,0x19
c0002b33:	77 07                	ja     c0002b3c <create_name+0x256>
c0002b35:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b3a:	eb 11                	jmp    c0002b4d <create_name+0x267>
c0002b3c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b3f:	66 83 f8 19          	cmp    ax,0x19
c0002b43:	77 08                	ja     c0002b4d <create_name+0x267>
c0002b45:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b4a:	83 ed 20             	sub    ebp,0x20
c0002b4d:	89 e8                	mov    eax,ebp
c0002b4f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b53:	41                   	inc    ecx
c0002b54:	e9 e9 fe ff ff       	jmp    c0002a42 <create_name+0x15c>
c0002b59:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b5d:	75 04                	jne    c0002b63 <create_name+0x27d>
c0002b5f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b63:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b68:	75 05                	jne    c0002b6f <create_name+0x289>
c0002b6a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b6f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b73:	83 e0 0c             	and    eax,0xc
c0002b76:	3c 0c                	cmp    al,0xc
c0002b78:	74 0b                	je     c0002b85 <create_name+0x29f>
c0002b7a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b7e:	83 e0 03             	and    eax,0x3
c0002b81:	3c 03                	cmp    al,0x3
c0002b83:	75 05                	jne    c0002b8a <create_name+0x2a4>
c0002b85:	83 cb 02             	or     ebx,0x2
c0002b88:	eb 19                	jmp    c0002ba3 <create_name+0x2bd>
c0002b8a:	f6 c3 02             	test   bl,0x2
c0002b8d:	75 14                	jne    c0002ba3 <create_name+0x2bd>
c0002b8f:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002b94:	74 03                	je     c0002b99 <create_name+0x2b3>
c0002b96:	83 cb 10             	or     ebx,0x10
c0002b99:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002b9e:	74 03                	je     c0002ba3 <create_name+0x2bd>
c0002ba0:	83 cb 08             	or     ebx,0x8
c0002ba3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002ba6:	31 c0                	xor    eax,eax
c0002ba8:	eb 10                	jmp    c0002bba <create_name+0x2d4>
c0002baa:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002baf:	0f 85 ce fe ff ff    	jne    c0002a83 <create_name+0x19d>
c0002bb5:	e9 a6 fe ff ff       	jmp    c0002a60 <create_name+0x17a>
c0002bba:	83 c4 3c             	add    esp,0x3c
c0002bbd:	5b                   	pop    ebx
c0002bbe:	5e                   	pop    esi
c0002bbf:	5f                   	pop    edi
c0002bc0:	5d                   	pop    ebp
c0002bc1:	c3                   	ret    

c0002bc2 <cmp_lfn>:
c0002bc2:	55                   	push   ebp
c0002bc3:	57                   	push   edi
c0002bc4:	89 d7                	mov    edi,edx
c0002bc6:	56                   	push   esi
c0002bc7:	53                   	push   ebx
c0002bc8:	83 ec 1c             	sub    esp,0x1c
c0002bcb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bcf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bd2:	e8 48 f1 ff ff       	call   c0001d1f <ld_word>
c0002bd7:	66 85 c0             	test   ax,ax
c0002bda:	74 07                	je     c0002be3 <cmp_lfn+0x21>
c0002bdc:	31 c0                	xor    eax,eax
c0002bde:	e9 9a 00 00 00       	jmp    c0002c7d <cmp_lfn+0xbb>
c0002be3:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002be5:	bd 01 00 00 00       	mov    ebp,0x1
c0002bea:	83 e3 3f             	and    ebx,0x3f
c0002bed:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002bf5:	4b                   	dec    ebx
c0002bf6:	6b db 0d             	imul   ebx,ebx,0xd
c0002bf9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002bfd:	0f b6 80 c0 cb 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3440]
c0002c04:	01 f8                	add    eax,edi
c0002c06:	e8 14 f1 ff ff       	call   c0001d1f <ld_word>
c0002c0b:	66 85 ed             	test   bp,bp
c0002c0e:	89 c6                	mov    esi,eax
c0002c10:	74 3c                	je     c0002c4e <cmp_lfn+0x8c>
c0002c12:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c18:	77 c2                	ja     c0002bdc <cmp_lfn+0x1a>
c0002c1a:	83 ec 0c             	sub    esp,0xc
c0002c1d:	0f b7 c0             	movzx  eax,ax
c0002c20:	50                   	push   eax
c0002c21:	e8 8e 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c26:	89 c5                	mov    ebp,eax
c0002c28:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c2b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c2f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c33:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c37:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c3a:	e8 75 2f 00 00       	call   c0005bb4 <ff_wtoupper>
c0002c3f:	83 c4 10             	add    esp,0x10
c0002c42:	39 c5                	cmp    ebp,eax
c0002c44:	75 96                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c46:	89 f5                	mov    ebp,esi
c0002c48:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c4c:	eb 04                	jmp    c0002c52 <cmp_lfn+0x90>
c0002c4e:	66 46                	inc    si
c0002c50:	75 8a                	jne    c0002bdc <cmp_lfn+0x1a>
c0002c52:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c56:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c5b:	75 9c                	jne    c0002bf9 <cmp_lfn+0x37>
c0002c5d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c60:	74 16                	je     c0002c78 <cmp_lfn+0xb6>
c0002c62:	66 85 ed             	test   bp,bp
c0002c65:	74 11                	je     c0002c78 <cmp_lfn+0xb6>
c0002c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c6b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c70:	0f 94 c0             	sete   al
c0002c73:	0f b6 c0             	movzx  eax,al
c0002c76:	eb 05                	jmp    c0002c7d <cmp_lfn+0xbb>
c0002c78:	b8 01 00 00 00       	mov    eax,0x1
c0002c7d:	83 c4 1c             	add    esp,0x1c
c0002c80:	5b                   	pop    ebx
c0002c81:	5e                   	pop    esi
c0002c82:	5f                   	pop    edi
c0002c83:	5d                   	pop    ebp
c0002c84:	c3                   	ret    

c0002c85 <sync_fs>:
c0002c85:	56                   	push   esi
c0002c86:	53                   	push   ebx
c0002c87:	53                   	push   ebx
c0002c88:	89 c3                	mov    ebx,eax
c0002c8a:	e8 53 f5 ff ff       	call   c00021e2 <sync_window>
c0002c8f:	85 c0                	test   eax,eax
c0002c91:	0f 85 9a 00 00 00    	jne    c0002d31 <sync_fs+0xac>
c0002c97:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002c9a:	75 7b                	jne    c0002d17 <sync_fs+0x92>
c0002c9c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002ca0:	75 75                	jne    c0002d17 <sync_fs+0x92>
c0002ca2:	b9 00 02 00 00       	mov    ecx,0x200
c0002ca7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002caa:	31 d2                	xor    edx,edx
c0002cac:	89 f0                	mov    eax,esi
c0002cae:	e8 ad f0 ff ff       	call   c0001d60 <mem_set>
c0002cb3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cb9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cbe:	e8 81 f0 ff ff       	call   c0001d44 <st_word>
c0002cc3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002cc8:	89 f0                	mov    eax,esi
c0002cca:	e8 79 f0 ff ff       	call   c0001d48 <st_dword>
c0002ccf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cd5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cda:	e8 69 f0 ff ff       	call   c0001d48 <st_dword>
c0002cdf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002ce2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002ce8:	e8 5b f0 ff ff       	call   c0001d48 <st_dword>
c0002ced:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002cf0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002cf6:	e8 4d f0 ff ff       	call   c0001d48 <st_dword>
c0002cfb:	6a 01                	push   0x1
c0002cfd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d00:	40                   	inc    eax
c0002d01:	50                   	push   eax
c0002d02:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d05:	56                   	push   esi
c0002d06:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d0a:	50                   	push   eax
c0002d0b:	e8 da ef ff ff       	call   c0001cea <disk_write>
c0002d10:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d14:	83 c4 10             	add    esp,0x10
c0002d17:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d1b:	51                   	push   ecx
c0002d1c:	6a 00                	push   0x0
c0002d1e:	6a 00                	push   0x0
c0002d20:	50                   	push   eax
c0002d21:	e8 da ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d26:	83 c4 10             	add    esp,0x10
c0002d29:	85 c0                	test   eax,eax
c0002d2b:	0f 95 c0             	setne  al
c0002d2e:	0f b6 c0             	movzx  eax,al
c0002d31:	5a                   	pop    edx
c0002d32:	5b                   	pop    ebx
c0002d33:	5e                   	pop    esi
c0002d34:	c3                   	ret    

c0002d35 <create_partition>:
c0002d35:	55                   	push   ebp
c0002d36:	0f b6 c0             	movzx  eax,al
c0002d39:	57                   	push   edi
c0002d3a:	56                   	push   esi
c0002d3b:	53                   	push   ebx
c0002d3c:	83 ec 40             	sub    esp,0x40
c0002d3f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d43:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d47:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d4b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d4f:	50                   	push   eax
c0002d50:	6a 01                	push   0x1
c0002d52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d56:	e8 a5 ef ff ff       	call   c0001d00 <disk_ioctl>
c0002d5b:	83 c4 10             	add    esp,0x10
c0002d5e:	85 c0                	test   eax,eax
c0002d60:	0f 85 69 01 00 00    	jne    c0002ecf <create_partition+0x19a>
c0002d66:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d6a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d6f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d73:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d78:	31 d2                	xor    edx,edx
c0002d7a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002d83:	f7 f3                	div    ebx
c0002d85:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002d8a:	76 0c                	jbe    c0002d98 <create_partition+0x63>
c0002d8c:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002d90:	49                   	dec    ecx
c0002d91:	75 e5                	jne    c0002d78 <create_partition+0x43>
c0002d93:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002d98:	b9 00 02 00 00       	mov    ecx,0x200
c0002d9d:	31 d2                	xor    edx,edx
c0002d9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002da3:	e8 b8 ef ff ff       	call   c0001d60 <mem_set>
c0002da8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002db1:	31 d2                	xor    edx,edx
c0002db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002dbb:	f7 f1                	div    ecx
c0002dbd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002dc2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002dc6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dca:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002dd0:	85 c9                	test   ecx,ecx
c0002dd2:	75 34                	jne    c0002e08 <create_partition+0xd3>
c0002dd4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dd8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ddd:	05 fe 01 00 00       	add    eax,0x1fe
c0002de2:	e8 5d ef ff ff       	call   c0001d44 <st_word>
c0002de7:	6a 01                	push   0x1
c0002de9:	6a 00                	push   0x0
c0002deb:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002def:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002df3:	e8 f2 ee ff ff       	call   c0001cea <disk_write>
c0002df8:	83 c4 10             	add    esp,0x10
c0002dfb:	85 c0                	test   eax,eax
c0002dfd:	0f 95 c0             	setne  al
c0002e00:	0f b6 c0             	movzx  eax,al
c0002e03:	e9 cc 00 00 00       	jmp    c0002ed4 <create_partition+0x19f>
c0002e08:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e0c:	76 c6                	jbe    c0002dd4 <create_partition+0x9f>
c0002e0e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e12:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e16:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e19:	83 fe 64             	cmp    esi,0x64
c0002e1c:	77 0d                	ja     c0002e2b <create_partition+0xf6>
c0002e1e:	74 07                	je     c0002e27 <create_partition+0xf2>
c0002e20:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e25:	eb 04                	jmp    c0002e2b <create_partition+0xf6>
c0002e27:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e2b:	31 c0                	xor    eax,eax
c0002e2d:	89 f2                	mov    edx,esi
c0002e2f:	01 ca                	add    edx,ecx
c0002e31:	0f 92 c0             	setb   al
c0002e34:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e38:	77 04                	ja     c0002e3e <create_partition+0x109>
c0002e3a:	85 c0                	test   eax,eax
c0002e3c:	74 08                	je     c0002e46 <create_partition+0x111>
c0002e3e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e42:	29 ce                	sub    esi,ecx
c0002e44:	eb 04                	jmp    c0002e4a <create_partition+0x115>
c0002e46:	85 f6                	test   esi,esi
c0002e48:	74 8a                	je     c0002dd4 <create_partition+0x9f>
c0002e4a:	89 ca                	mov    edx,ecx
c0002e4c:	89 d8                	mov    eax,ebx
c0002e4e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e53:	e8 f0 ee ff ff       	call   c0001d48 <st_dword>
c0002e58:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e5b:	89 f2                	mov    edx,esi
c0002e5d:	83 c3 10             	add    ebx,0x10
c0002e60:	e8 e3 ee ff ff       	call   c0001d48 <st_dword>
c0002e65:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e6a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e6e:	31 d2                	xor    edx,edx
c0002e70:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e73:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e77:	89 c8                	mov    eax,ecx
c0002e79:	01 f1                	add    ecx,esi
c0002e7b:	f7 f5                	div    ebp
c0002e7d:	89 d5                	mov    ebp,edx
c0002e7f:	31 d2                	xor    edx,edx
c0002e81:	45                   	inc    ebp
c0002e82:	f7 f7                	div    edi
c0002e84:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002e87:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002e8a:	89 c2                	mov    edx,eax
c0002e8c:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002e8f:	c1 ea 02             	shr    edx,0x2
c0002e92:	83 e2 c0             	and    edx,0xffffffc0
c0002e95:	09 ea                	or     edx,ebp
c0002e97:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e9c:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	f7 f5                	div    ebp
c0002ea3:	89 d6                	mov    esi,edx
c0002ea5:	31 d2                	xor    edx,edx
c0002ea7:	46                   	inc    esi
c0002ea8:	f7 f7                	div    edi
c0002eaa:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ead:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002eb0:	89 c7                	mov    edi,eax
c0002eb2:	c1 ef 02             	shr    edi,0x2
c0002eb5:	83 e7 c0             	and    edi,0xffffffc0
c0002eb8:	09 fe                	or     esi,edi
c0002eba:	89 f2                	mov    edx,esi
c0002ebc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002ebf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ec4:	0f 85 06 ff ff ff    	jne    c0002dd0 <create_partition+0x9b>
c0002eca:	e9 05 ff ff ff       	jmp    c0002dd4 <create_partition+0x9f>
c0002ecf:	b8 01 00 00 00       	mov    eax,0x1
c0002ed4:	83 c4 3c             	add    esp,0x3c
c0002ed7:	5b                   	pop    ebx
c0002ed8:	5e                   	pop    esi
c0002ed9:	5f                   	pop    edi
c0002eda:	5d                   	pop    ebp
c0002edb:	c3                   	ret    

c0002edc <get_fileinfo>:
c0002edc:	55                   	push   ebp
c0002edd:	57                   	push   edi
c0002ede:	56                   	push   esi
c0002edf:	53                   	push   ebx
c0002ee0:	83 ec 1c             	sub    esp,0x1c
c0002ee3:	8b 30                	mov    esi,DWORD PTR [eax]
c0002ee5:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002ee9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002eed:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002ef1:	0f 84 c1 01 00 00    	je     c00030b8 <get_fileinfo+0x1dc>
c0002ef7:	89 d3                	mov    ebx,edx
c0002ef9:	89 c6                	mov    esi,eax
c0002efb:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002eff:	74 6a                	je     c0002f6b <get_fileinfo+0x8f>
c0002f01:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f09:	31 ed                	xor    ebp,ebp
c0002f0b:	31 ff                	xor    edi,edi
c0002f0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f11:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f15:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f18:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f1c:	66 85 d2             	test   dx,dx
c0002f1f:	74 3e                	je     c0002f5f <get_fileinfo+0x83>
c0002f21:	66 85 ed             	test   bp,bp
c0002f24:	75 0c                	jne    c0002f32 <get_fileinfo+0x56>
c0002f26:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f2c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f30:	76 22                	jbe    c0002f54 <get_fileinfo+0x78>
c0002f32:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f37:	89 e8                	mov    eax,ebp
c0002f39:	29 f9                	sub    ecx,edi
c0002f3b:	c1 e0 10             	shl    eax,0x10
c0002f3e:	09 d0                	or     eax,edx
c0002f40:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f44:	e8 23 ef ff ff       	call   c0001e6c <put_utf>
c0002f49:	84 c0                	test   al,al
c0002f4b:	74 10                	je     c0002f5d <get_fileinfo+0x81>
c0002f4d:	0f b6 c0             	movzx  eax,al
c0002f50:	31 d2                	xor    edx,edx
c0002f52:	01 c7                	add    edi,eax
c0002f54:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f59:	89 d5                	mov    ebp,edx
c0002f5b:	eb b0                	jmp    c0002f0d <get_fileinfo+0x31>
c0002f5d:	31 ff                	xor    edi,edi
c0002f5f:	66 85 ed             	test   bp,bp
c0002f62:	74 02                	je     c0002f66 <get_fileinfo+0x8a>
c0002f64:	31 ff                	xor    edi,edi
c0002f66:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f6b:	31 ff                	xor    edi,edi
c0002f6d:	31 c9                	xor    ecx,ecx
c0002f6f:	83 f9 0a             	cmp    ecx,0xa
c0002f72:	0f 87 ad 00 00 00    	ja     c0003025 <get_fileinfo+0x149>
c0002f78:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f7b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f7e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002f82:	66 83 fa 20          	cmp    dx,0x20
c0002f86:	0f 84 92 00 00 00    	je     c000301e <get_fileinfo+0x142>
c0002f8c:	66 83 fa 05          	cmp    dx,0x5
c0002f90:	75 05                	jne    c0002f97 <get_fileinfo+0xbb>
c0002f92:	ba e5 00 00 00       	mov    edx,0xe5
c0002f97:	83 ff 0b             	cmp    edi,0xb
c0002f9a:	77 0b                	ja     c0002fa7 <get_fileinfo+0xcb>
c0002f9c:	83 fd 09             	cmp    ebp,0x9
c0002f9f:	75 06                	jne    c0002fa7 <get_fileinfo+0xcb>
c0002fa1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fa6:	47                   	inc    edi
c0002fa7:	0f b7 c2             	movzx  eax,dx
c0002faa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fae:	e8 ed ed ff ff       	call   c0001da0 <dbc_1st>
c0002fb3:	85 c0                	test   eax,eax
c0002fb5:	74 2f                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fb7:	83 fd 08             	cmp    ebp,0x8
c0002fba:	74 2a                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fbc:	83 fd 0b             	cmp    ebp,0xb
c0002fbf:	74 25                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fc1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fc4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fc8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fcc:	e8 d2 ed ff ff       	call   c0001da3 <dbc_2nd>
c0002fd1:	85 c0                	test   eax,eax
c0002fd3:	74 11                	je     c0002fe6 <get_fileinfo+0x10a>
c0002fd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002fd9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002fde:	c1 e2 08             	shl    edx,0x8
c0002fe1:	8d 69 02             	lea    ebp,[ecx+0x2]
c0002fe4:	09 c2                	or     edx,eax
c0002fe6:	0f b7 d2             	movzx  edx,dx
c0002fe9:	50                   	push   eax
c0002fea:	50                   	push   eax
c0002feb:	68 b5 01 00 00       	push   0x1b5
c0002ff0:	52                   	push   edx
c0002ff1:	e8 46 2b 00 00       	call   c0005b3c <ff_oem2uni>
c0002ff6:	83 c4 10             	add    esp,0x10
c0002ff9:	66 85 c0             	test   ax,ax
c0002ffc:	75 04                	jne    c0003002 <get_fileinfo+0x126>
c0002ffe:	31 ff                	xor    edi,edi
c0003000:	eb 23                	jmp    c0003025 <get_fileinfo+0x149>
c0003002:	b9 0c 00 00 00       	mov    ecx,0xc
c0003007:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000300b:	29 f9                	sub    ecx,edi
c000300d:	0f b7 c0             	movzx  eax,ax
c0003010:	e8 57 ee ff ff       	call   c0001e6c <put_utf>
c0003015:	84 c0                	test   al,al
c0003017:	74 e5                	je     c0002ffe <get_fileinfo+0x122>
c0003019:	0f b6 c0             	movzx  eax,al
c000301c:	01 c7                	add    edi,eax
c000301e:	89 e9                	mov    ecx,ebp
c0003020:	e9 4a ff ff ff       	jmp    c0002f6f <get_fileinfo+0x93>
c0003025:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000302a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000302e:	75 54                	jne    c0003084 <get_fileinfo+0x1a8>
c0003030:	85 ff                	test   edi,edi
c0003032:	75 0b                	jne    c000303f <get_fileinfo+0x163>
c0003034:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003038:	ba 01 00 00 00       	mov    edx,0x1
c000303d:	eb 33                	jmp    c0003072 <get_fileinfo+0x196>
c000303f:	b1 08                	mov    cl,0x8
c0003041:	31 d2                	xor    edx,edx
c0003043:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003049:	84 c0                	test   al,al
c000304b:	74 25                	je     c0003072 <get_fileinfo+0x196>
c000304d:	66 83 f8 2e          	cmp    ax,0x2e
c0003051:	74 16                	je     c0003069 <get_fileinfo+0x18d>
c0003053:	8d 78 bf             	lea    edi,[eax-0x41]
c0003056:	66 83 ff 19          	cmp    di,0x19
c000305a:	77 0f                	ja     c000306b <get_fileinfo+0x18f>
c000305c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000305f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003062:	74 07                	je     c000306b <get_fileinfo+0x18f>
c0003064:	83 c0 20             	add    eax,0x20
c0003067:	eb 02                	jmp    c000306b <get_fileinfo+0x18f>
c0003069:	b1 10                	mov    cl,0x10
c000306b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000306f:	42                   	inc    edx
c0003070:	eb d1                	jmp    c0003043 <get_fileinfo+0x167>
c0003072:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003077:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000307a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000307e:	75 04                	jne    c0003084 <get_fileinfo+0x1a8>
c0003080:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003084:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003087:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000308a:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c000308d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003090:	83 c0 1c             	add    eax,0x1c
c0003093:	e8 94 ec ff ff       	call   c0001d2c <ld_dword>
c0003098:	89 03                	mov    DWORD PTR [ebx],eax
c000309a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309d:	83 c0 16             	add    eax,0x16
c00030a0:	e8 7a ec ff ff       	call   c0001d1f <ld_word>
c00030a5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030a9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030ac:	83 c0 18             	add    eax,0x18
c00030af:	e8 6b ec ff ff       	call   c0001d1f <ld_word>
c00030b4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030b8:	83 c4 1c             	add    esp,0x1c
c00030bb:	5b                   	pop    ebx
c00030bc:	5e                   	pop    esi
c00030bd:	5f                   	pop    edi
c00030be:	5d                   	pop    ebp
c00030bf:	c3                   	ret    

c00030c0 <ld_clust.isra.0>:
c00030c0:	56                   	push   esi
c00030c1:	89 c6                	mov    esi,eax
c00030c3:	53                   	push   ebx
c00030c4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030c7:	89 d3                	mov    ebx,edx
c00030c9:	e8 51 ec ff ff       	call   c0001d1f <ld_word>
c00030ce:	0f b7 c8             	movzx  ecx,ax
c00030d1:	89 f0                	mov    eax,esi
c00030d3:	3c 03                	cmp    al,0x3
c00030d5:	75 0d                	jne    c00030e4 <ld_clust.isra.0+0x24>
c00030d7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030da:	e8 40 ec ff ff       	call   c0001d1f <ld_word>
c00030df:	c1 e0 10             	shl    eax,0x10
c00030e2:	09 c1                	or     ecx,eax
c00030e4:	89 c8                	mov    eax,ecx
c00030e6:	5b                   	pop    ebx
c00030e7:	5e                   	pop    esi
c00030e8:	c3                   	ret    

c00030e9 <st_clust.isra.1>:
c00030e9:	56                   	push   esi
c00030ea:	89 c6                	mov    esi,eax
c00030ec:	53                   	push   ebx
c00030ed:	89 d3                	mov    ebx,edx
c00030ef:	0f b7 d1             	movzx  edx,cx
c00030f2:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00030f5:	e8 4a ec ff ff       	call   c0001d44 <st_word>
c00030fa:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c00030fd:	75 0f                	jne    c000310e <st_clust.isra.1+0x25>
c00030ff:	c1 e9 10             	shr    ecx,0x10
c0003102:	8d 43 14             	lea    eax,[ebx+0x14]
c0003105:	89 ca                	mov    edx,ecx
c0003107:	5b                   	pop    ebx
c0003108:	5e                   	pop    esi
c0003109:	e9 36 ec ff ff       	jmp    c0001d44 <st_word>
c000310e:	5b                   	pop    ebx
c000310f:	5e                   	pop    esi
c0003110:	c3                   	ret    

c0003111 <get_fat.isra.2>:
c0003111:	b9 01 00 00 00       	mov    ecx,0x1
c0003116:	83 fa 01             	cmp    edx,0x1
c0003119:	0f 86 f1 00 00 00    	jbe    c0003210 <get_fat.isra.2+0xff>
c000311f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003122:	0f 83 e8 00 00 00    	jae    c0003210 <get_fat.isra.2+0xff>
c0003128:	55                   	push   ebp
c0003129:	57                   	push   edi
c000312a:	89 c7                	mov    edi,eax
c000312c:	56                   	push   esi
c000312d:	89 d6                	mov    esi,edx
c000312f:	53                   	push   ebx
c0003130:	83 ec 0c             	sub    esp,0xc
c0003133:	8a 00                	mov    al,BYTE PTR [eax]
c0003135:	3c 02                	cmp    al,0x2
c0003137:	74 78                	je     c00031b1 <get_fat.isra.2+0xa0>
c0003139:	3c 03                	cmp    al,0x3
c000313b:	0f 84 97 00 00 00    	je     c00031d8 <get_fat.isra.2+0xc7>
c0003141:	fe c8                	dec    al
c0003143:	0f 85 bd 00 00 00    	jne    c0003206 <get_fat.isra.2+0xf5>
c0003149:	89 d3                	mov    ebx,edx
c000314b:	89 f8                	mov    eax,edi
c000314d:	d1 eb                	shr    ebx,1
c000314f:	01 d3                	add    ebx,edx
c0003151:	89 da                	mov    edx,ebx
c0003153:	c1 ea 09             	shr    edx,0x9
c0003156:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003159:	e8 e7 f0 ff ff       	call   c0002245 <move_window>
c000315e:	85 c0                	test   eax,eax
c0003160:	74 08                	je     c000316a <get_fat.isra.2+0x59>
c0003162:	83 c9 ff             	or     ecx,0xffffffff
c0003165:	e9 9c 00 00 00       	jmp    c0003206 <get_fat.isra.2+0xf5>
c000316a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000316d:	89 f8                	mov    eax,edi
c000316f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003175:	89 ea                	mov    edx,ebp
c0003177:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000317b:	c1 ea 09             	shr    edx,0x9
c000317e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003181:	e8 bf f0 ff ff       	call   c0002245 <move_window>
c0003186:	85 c0                	test   eax,eax
c0003188:	75 d8                	jne    c0003162 <get_fat.isra.2+0x51>
c000318a:	0f b6 c3             	movzx  eax,bl
c000318d:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003193:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c0003198:	c1 e3 08             	shl    ebx,0x8
c000319b:	09 c3                	or     ebx,eax
c000319d:	89 d9                	mov    ecx,ebx
c000319f:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031a5:	83 e6 01             	and    esi,0x1
c00031a8:	74 5c                	je     c0003206 <get_fat.isra.2+0xf5>
c00031aa:	89 d9                	mov    ecx,ebx
c00031ac:	c1 e9 04             	shr    ecx,0x4
c00031af:	eb 55                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031b1:	c1 ea 08             	shr    edx,0x8
c00031b4:	89 f8                	mov    eax,edi
c00031b6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031b9:	e8 87 f0 ff ff       	call   c0002245 <move_window>
c00031be:	85 c0                	test   eax,eax
c00031c0:	75 a0                	jne    c0003162 <get_fat.isra.2+0x51>
c00031c2:	01 f6                	add    esi,esi
c00031c4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ca:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ce:	e8 4c eb ff ff       	call   c0001d1f <ld_word>
c00031d3:	0f b7 c8             	movzx  ecx,ax
c00031d6:	eb 2e                	jmp    c0003206 <get_fat.isra.2+0xf5>
c00031d8:	c1 ea 07             	shr    edx,0x7
c00031db:	89 f8                	mov    eax,edi
c00031dd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031e0:	e8 60 f0 ff ff       	call   c0002245 <move_window>
c00031e5:	85 c0                	test   eax,eax
c00031e7:	0f 85 75 ff ff ff    	jne    c0003162 <get_fat.isra.2+0x51>
c00031ed:	c1 e6 02             	shl    esi,0x2
c00031f0:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00031f6:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031fa:	e8 2d eb ff ff       	call   c0001d2c <ld_dword>
c00031ff:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003204:	89 c1                	mov    ecx,eax
c0003206:	83 c4 0c             	add    esp,0xc
c0003209:	89 c8                	mov    eax,ecx
c000320b:	5b                   	pop    ebx
c000320c:	5e                   	pop    esi
c000320d:	5f                   	pop    edi
c000320e:	5d                   	pop    ebp
c000320f:	c3                   	ret    
c0003210:	89 c8                	mov    eax,ecx
c0003212:	c3                   	ret    

c0003213 <dir_sdi>:
c0003213:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003219:	0f 87 b6 00 00 00    	ja     c00032d5 <dir_sdi+0xc2>
c000321f:	55                   	push   ebp
c0003220:	57                   	push   edi
c0003221:	56                   	push   esi
c0003222:	53                   	push   ebx
c0003223:	89 d3                	mov    ebx,edx
c0003225:	83 ec 1c             	sub    esp,0x1c
c0003228:	f6 c2 1f             	test   dl,0x1f
c000322b:	74 0a                	je     c0003237 <dir_sdi+0x24>
c000322d:	b8 02 00 00 00       	mov    eax,0x2
c0003232:	e9 96 00 00 00       	jmp    c00032cd <dir_sdi+0xba>
c0003237:	89 c6                	mov    esi,eax
c0003239:	8b 38                	mov    edi,DWORD PTR [eax]
c000323b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000323e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003241:	85 c9                	test   ecx,ecx
c0003243:	75 23                	jne    c0003268 <dir_sdi+0x55>
c0003245:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003248:	76 07                	jbe    c0003251 <dir_sdi+0x3e>
c000324a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000324d:	85 c0                	test   eax,eax
c000324f:	75 15                	jne    c0003266 <dir_sdi+0x53>
c0003251:	89 da                	mov    edx,ebx
c0003253:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003257:	c1 ea 05             	shr    edx,0x5
c000325a:	39 c2                	cmp    edx,eax
c000325c:	73 cf                	jae    c000322d <dir_sdi+0x1a>
c000325e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003261:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003264:	eb 3d                	jmp    c00032a3 <dir_sdi+0x90>
c0003266:	89 c1                	mov    ecx,eax
c0003268:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000326c:	c1 e5 09             	shl    ebp,0x9
c000326f:	89 ca                	mov    edx,ecx
c0003271:	39 eb                	cmp    ebx,ebp
c0003273:	72 1c                	jb     c0003291 <dir_sdi+0x7e>
c0003275:	8b 06                	mov    eax,DWORD PTR [esi]
c0003277:	e8 95 fe ff ff       	call   c0003111 <get_fat.isra.2>
c000327c:	89 c1                	mov    ecx,eax
c000327e:	83 f8 ff             	cmp    eax,0xffffffff
c0003281:	74 45                	je     c00032c8 <dir_sdi+0xb5>
c0003283:	83 f8 01             	cmp    eax,0x1
c0003286:	76 a5                	jbe    c000322d <dir_sdi+0x1a>
c0003288:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c000328b:	76 a0                	jbe    c000322d <dir_sdi+0x1a>
c000328d:	29 eb                	sub    ebx,ebp
c000328f:	eb de                	jmp    c000326f <dir_sdi+0x5c>
c0003291:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003295:	89 f8                	mov    eax,edi
c0003297:	e8 c9 ec ff ff       	call   c0001f65 <clst2sect>
c000329c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032a0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032a3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032a6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032a9:	85 d2                	test   edx,edx
c00032ab:	74 80                	je     c000322d <dir_sdi+0x1a>
c00032ad:	89 d8                	mov    eax,ebx
c00032af:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032b5:	c1 e8 09             	shr    eax,0x9
c00032b8:	01 d0                	add    eax,edx
c00032ba:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032bd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032c1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032c4:	31 c0                	xor    eax,eax
c00032c6:	eb 05                	jmp    c00032cd <dir_sdi+0xba>
c00032c8:	b8 01 00 00 00       	mov    eax,0x1
c00032cd:	83 c4 1c             	add    esp,0x1c
c00032d0:	5b                   	pop    ebx
c00032d1:	5e                   	pop    esi
c00032d2:	5f                   	pop    edi
c00032d3:	5d                   	pop    ebp
c00032d4:	c3                   	ret    
c00032d5:	b8 02 00 00 00       	mov    eax,0x2
c00032da:	c3                   	ret    

c00032db <create_chain>:
c00032db:	55                   	push   ebp
c00032dc:	89 c5                	mov    ebp,eax
c00032de:	57                   	push   edi
c00032df:	89 d7                	mov    edi,edx
c00032e1:	56                   	push   esi
c00032e2:	53                   	push   ebx
c00032e3:	83 ec 1c             	sub    esp,0x1c
c00032e6:	85 d2                	test   edx,edx
c00032e8:	8b 30                	mov    esi,DWORD PTR [eax]
c00032ea:	75 0e                	jne    c00032fa <create_chain+0x1f>
c00032ec:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00032ef:	85 c9                	test   ecx,ecx
c00032f1:	74 34                	je     c0003327 <create_chain+0x4c>
c00032f3:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00032f6:	77 34                	ja     c000332c <create_chain+0x51>
c00032f8:	eb 2d                	jmp    c0003327 <create_chain+0x4c>
c00032fa:	89 f0                	mov    eax,esi
c00032fc:	e8 10 fe ff ff       	call   c0003111 <get_fat.isra.2>
c0003301:	89 c3                	mov    ebx,eax
c0003303:	83 f8 01             	cmp    eax,0x1
c0003306:	77 0a                	ja     c0003312 <create_chain+0x37>
c0003308:	bb 01 00 00 00       	mov    ebx,0x1
c000330d:	e9 f9 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003312:	83 f8 ff             	cmp    eax,0xffffffff
c0003315:	0f 84 ed 00 00 00    	je     c0003408 <create_chain+0x12d>
c000331b:	89 f9                	mov    ecx,edi
c000331d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003320:	76 0a                	jbe    c000332c <create_chain+0x51>
c0003322:	e9 e4 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003327:	b9 01 00 00 00       	mov    ecx,0x1
c000332c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003330:	75 07                	jne    c0003339 <create_chain+0x5e>
c0003332:	31 db                	xor    ebx,ebx
c0003334:	e9 d2 00 00 00       	jmp    c000340b <create_chain+0x130>
c0003339:	39 f9                	cmp    ecx,edi
c000333b:	75 46                	jne    c0003383 <create_chain+0xa8>
c000333d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003340:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003343:	77 05                	ja     c000334a <create_chain+0x6f>
c0003345:	bb 02 00 00 00       	mov    ebx,0x2
c000334a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000334e:	89 da                	mov    edx,ebx
c0003350:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003353:	e8 b9 fd ff ff       	call   c0003111 <get_fat.isra.2>
c0003358:	83 f8 01             	cmp    eax,0x1
c000335b:	74 ab                	je     c0003308 <create_chain+0x2d>
c000335d:	83 f8 ff             	cmp    eax,0xffffffff
c0003360:	0f 84 a2 00 00 00    	je     c0003408 <create_chain+0x12d>
c0003366:	85 c0                	test   eax,eax
c0003368:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000336c:	74 11                	je     c000337f <create_chain+0xa4>
c000336e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003371:	83 f8 01             	cmp    eax,0x1
c0003374:	76 0d                	jbe    c0003383 <create_chain+0xa8>
c0003376:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003379:	73 08                	jae    c0003383 <create_chain+0xa8>
c000337b:	89 c1                	mov    ecx,eax
c000337d:	eb 04                	jmp    c0003383 <create_chain+0xa8>
c000337f:	85 db                	test   ebx,ebx
c0003381:	75 3d                	jne    c00033c0 <create_chain+0xe5>
c0003383:	89 cb                	mov    ebx,ecx
c0003385:	43                   	inc    ebx
c0003386:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003389:	77 0a                	ja     c0003395 <create_chain+0xba>
c000338b:	83 f9 01             	cmp    ecx,0x1
c000338e:	76 a2                	jbe    c0003332 <create_chain+0x57>
c0003390:	bb 02 00 00 00       	mov    ebx,0x2
c0003395:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003399:	89 da                	mov    edx,ebx
c000339b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000339e:	e8 6e fd ff ff       	call   c0003111 <get_fat.isra.2>
c00033a3:	85 c0                	test   eax,eax
c00033a5:	74 19                	je     c00033c0 <create_chain+0xe5>
c00033a7:	83 f8 01             	cmp    eax,0x1
c00033aa:	0f 84 58 ff ff ff    	je     c0003308 <create_chain+0x2d>
c00033b0:	40                   	inc    eax
c00033b1:	74 55                	je     c0003408 <create_chain+0x12d>
c00033b3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033b7:	39 cb                	cmp    ebx,ecx
c00033b9:	75 ca                	jne    c0003385 <create_chain+0xaa>
c00033bb:	e9 72 ff ff ff       	jmp    c0003332 <create_chain+0x57>
c00033c0:	83 c9 ff             	or     ecx,0xffffffff
c00033c3:	89 da                	mov    edx,ebx
c00033c5:	89 f0                	mov    eax,esi
c00033c7:	e8 cf f2 ff ff       	call   c000269b <put_fat>
c00033cc:	85 c0                	test   eax,eax
c00033ce:	75 31                	jne    c0003401 <create_chain+0x126>
c00033d0:	85 ff                	test   edi,edi
c00033d2:	75 16                	jne    c00033ea <create_chain+0x10f>
c00033d4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033d7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033da:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033dd:	8d 57 fe             	lea    edx,[edi-0x2]
c00033e0:	39 d0                	cmp    eax,edx
c00033e2:	77 17                	ja     c00033fb <create_chain+0x120>
c00033e4:	48                   	dec    eax
c00033e5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00033e8:	eb 11                	jmp    c00033fb <create_chain+0x120>
c00033ea:	89 d9                	mov    ecx,ebx
c00033ec:	89 fa                	mov    edx,edi
c00033ee:	89 f0                	mov    eax,esi
c00033f0:	e8 a6 f2 ff ff       	call   c000269b <put_fat>
c00033f5:	85 c0                	test   eax,eax
c00033f7:	74 db                	je     c00033d4 <create_chain+0xf9>
c00033f9:	eb 06                	jmp    c0003401 <create_chain+0x126>
c00033fb:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c00033ff:	eb 0a                	jmp    c000340b <create_chain+0x130>
c0003401:	48                   	dec    eax
c0003402:	0f 85 00 ff ff ff    	jne    c0003308 <create_chain+0x2d>
c0003408:	83 cb ff             	or     ebx,0xffffffff
c000340b:	83 c4 1c             	add    esp,0x1c
c000340e:	89 d8                	mov    eax,ebx
c0003410:	5b                   	pop    ebx
c0003411:	5e                   	pop    esi
c0003412:	5f                   	pop    edi
c0003413:	5d                   	pop    ebp
c0003414:	c3                   	ret    

c0003415 <remove_chain>:
c0003415:	55                   	push   ebp
c0003416:	57                   	push   edi
c0003417:	56                   	push   esi
c0003418:	89 d6                	mov    esi,edx
c000341a:	53                   	push   ebx
c000341b:	83 ec 0c             	sub    esp,0xc
c000341e:	83 fa 01             	cmp    edx,0x1
c0003421:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003423:	76 65                	jbe    c000348a <remove_chain+0x75>
c0003425:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003428:	76 60                	jbe    c000348a <remove_chain+0x75>
c000342a:	89 c5                	mov    ebp,eax
c000342c:	89 ca                	mov    edx,ecx
c000342e:	85 c9                	test   ecx,ecx
c0003430:	74 0e                	je     c0003440 <remove_chain+0x2b>
c0003432:	83 c9 ff             	or     ecx,0xffffffff
c0003435:	89 d8                	mov    eax,ebx
c0003437:	e8 5f f2 ff ff       	call   c000269b <put_fat>
c000343c:	85 c0                	test   eax,eax
c000343e:	75 56                	jne    c0003496 <remove_chain+0x81>
c0003440:	89 f2                	mov    edx,esi
c0003442:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003445:	e8 c7 fc ff ff       	call   c0003111 <get_fat.isra.2>
c000344a:	89 c7                	mov    edi,eax
c000344c:	85 c0                	test   eax,eax
c000344e:	75 04                	jne    c0003454 <remove_chain+0x3f>
c0003450:	31 c0                	xor    eax,eax
c0003452:	eb 42                	jmp    c0003496 <remove_chain+0x81>
c0003454:	83 f8 01             	cmp    eax,0x1
c0003457:	74 31                	je     c000348a <remove_chain+0x75>
c0003459:	83 f8 ff             	cmp    eax,0xffffffff
c000345c:	74 33                	je     c0003491 <remove_chain+0x7c>
c000345e:	31 c9                	xor    ecx,ecx
c0003460:	89 f2                	mov    edx,esi
c0003462:	89 d8                	mov    eax,ebx
c0003464:	e8 32 f2 ff ff       	call   c000269b <put_fat>
c0003469:	85 c0                	test   eax,eax
c000346b:	75 29                	jne    c0003496 <remove_chain+0x81>
c000346d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003470:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003473:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003476:	39 c8                	cmp    eax,ecx
c0003478:	73 08                	jae    c0003482 <remove_chain+0x6d>
c000347a:	40                   	inc    eax
c000347b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000347f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003482:	89 fe                	mov    esi,edi
c0003484:	39 fa                	cmp    edx,edi
c0003486:	77 b8                	ja     c0003440 <remove_chain+0x2b>
c0003488:	eb c6                	jmp    c0003450 <remove_chain+0x3b>
c000348a:	b8 02 00 00 00       	mov    eax,0x2
c000348f:	eb 05                	jmp    c0003496 <remove_chain+0x81>
c0003491:	b8 01 00 00 00       	mov    eax,0x1
c0003496:	83 c4 0c             	add    esp,0xc
c0003499:	5b                   	pop    ebx
c000349a:	5e                   	pop    esi
c000349b:	5f                   	pop    edi
c000349c:	5d                   	pop    ebp
c000349d:	c3                   	ret    

c000349e <dir_next>:
c000349e:	55                   	push   ebp
c000349f:	57                   	push   edi
c00034a0:	56                   	push   esi
c00034a1:	53                   	push   ebx
c00034a2:	83 ec 1c             	sub    esp,0x1c
c00034a5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034a8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034aa:	83 c7 20             	add    edi,0x20
c00034ad:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034b3:	76 07                	jbe    c00034bc <dir_next+0x1e>
c00034b5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034bc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034bf:	b9 04 00 00 00       	mov    ecx,0x4
c00034c4:	85 f6                	test   esi,esi
c00034c6:	0f 84 cd 00 00 00    	je     c0003599 <dir_next+0xfb>
c00034cc:	89 c3                	mov    ebx,eax
c00034ce:	89 d1                	mov    ecx,edx
c00034d0:	89 f8                	mov    eax,edi
c00034d2:	25 ff 01 00 00       	and    eax,0x1ff
c00034d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034db:	0f 85 a8 00 00 00    	jne    c0003589 <dir_next+0xeb>
c00034e1:	46                   	inc    esi
c00034e2:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00034e5:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00034e8:	85 d2                	test   edx,edx
c00034ea:	75 22                	jne    c000350e <dir_next+0x70>
c00034ec:	89 fa                	mov    edx,edi
c00034ee:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c00034f2:	c1 ea 05             	shr    edx,0x5
c00034f5:	39 c2                	cmp    edx,eax
c00034f7:	0f 82 8c 00 00 00    	jb     c0003589 <dir_next+0xeb>
c00034fd:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003504:	b9 04 00 00 00       	mov    ecx,0x4
c0003509:	e9 8b 00 00 00       	jmp    c0003599 <dir_next+0xfb>
c000350e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003512:	89 fe                	mov    esi,edi
c0003514:	48                   	dec    eax
c0003515:	c1 ee 09             	shr    esi,0x9
c0003518:	85 f0                	test   eax,esi
c000351a:	75 6d                	jne    c0003589 <dir_next+0xeb>
c000351c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003520:	89 e8                	mov    eax,ebp
c0003522:	e8 ea fb ff ff       	call   c0003111 <get_fat.isra.2>
c0003527:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000352b:	89 c6                	mov    esi,eax
c000352d:	83 f8 01             	cmp    eax,0x1
c0003530:	77 07                	ja     c0003539 <dir_next+0x9b>
c0003532:	b9 02 00 00 00       	mov    ecx,0x2
c0003537:	eb 60                	jmp    c0003599 <dir_next+0xfb>
c0003539:	83 f8 ff             	cmp    eax,0xffffffff
c000353c:	75 07                	jne    c0003545 <dir_next+0xa7>
c000353e:	b9 01 00 00 00       	mov    ecx,0x1
c0003543:	eb 54                	jmp    c0003599 <dir_next+0xfb>
c0003545:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003548:	77 30                	ja     c000357a <dir_next+0xdc>
c000354a:	85 c9                	test   ecx,ecx
c000354c:	74 af                	je     c00034fd <dir_next+0x5f>
c000354e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003551:	89 d8                	mov    eax,ebx
c0003553:	e8 83 fd ff ff       	call   c00032db <create_chain>
c0003558:	b9 07 00 00 00       	mov    ecx,0x7
c000355d:	89 c6                	mov    esi,eax
c000355f:	85 c0                	test   eax,eax
c0003561:	74 36                	je     c0003599 <dir_next+0xfb>
c0003563:	83 f8 01             	cmp    eax,0x1
c0003566:	74 ca                	je     c0003532 <dir_next+0x94>
c0003568:	83 f8 ff             	cmp    eax,0xffffffff
c000356b:	74 d1                	je     c000353e <dir_next+0xa0>
c000356d:	89 c2                	mov    edx,eax
c000356f:	89 e8                	mov    eax,ebp
c0003571:	e8 75 f2 ff ff       	call   c00027eb <dir_clear>
c0003576:	85 c0                	test   eax,eax
c0003578:	75 c4                	jne    c000353e <dir_next+0xa0>
c000357a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000357d:	89 f2                	mov    edx,esi
c000357f:	89 e8                	mov    eax,ebp
c0003581:	e8 df e9 ff ff       	call   c0001f65 <clst2sect>
c0003586:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003589:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000358d:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0003590:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c0003594:	31 c9                	xor    ecx,ecx
c0003596:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003599:	83 c4 1c             	add    esp,0x1c
c000359c:	89 c8                	mov    eax,ecx
c000359e:	5b                   	pop    ebx
c000359f:	5e                   	pop    esi
c00035a0:	5f                   	pop    edi
c00035a1:	5d                   	pop    ebp
c00035a2:	c3                   	ret    

c00035a3 <dir_alloc>:
c00035a3:	55                   	push   ebp
c00035a4:	89 c5                	mov    ebp,eax
c00035a6:	57                   	push   edi
c00035a7:	89 d7                	mov    edi,edx
c00035a9:	56                   	push   esi
c00035aa:	31 d2                	xor    edx,edx
c00035ac:	53                   	push   ebx
c00035ad:	83 ec 0c             	sub    esp,0xc
c00035b0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035b2:	e8 5c fc ff ff       	call   c0003213 <dir_sdi>
c00035b7:	85 c0                	test   eax,eax
c00035b9:	75 37                	jne    c00035f2 <dir_alloc+0x4f>
c00035bb:	31 db                	xor    ebx,ebx
c00035bd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035c0:	89 f0                	mov    eax,esi
c00035c2:	e8 7e ec ff ff       	call   c0002245 <move_window>
c00035c7:	85 c0                	test   eax,eax
c00035c9:	75 27                	jne    c00035f2 <dir_alloc+0x4f>
c00035cb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ce:	8a 12                	mov    dl,BYTE PTR [edx]
c00035d0:	84 d2                	test   dl,dl
c00035d2:	74 05                	je     c00035d9 <dir_alloc+0x36>
c00035d4:	80 fa e5             	cmp    dl,0xe5
c00035d7:	75 07                	jne    c00035e0 <dir_alloc+0x3d>
c00035d9:	43                   	inc    ebx
c00035da:	39 fb                	cmp    ebx,edi
c00035dc:	75 04                	jne    c00035e2 <dir_alloc+0x3f>
c00035de:	eb 1c                	jmp    c00035fc <dir_alloc+0x59>
c00035e0:	31 db                	xor    ebx,ebx
c00035e2:	ba 01 00 00 00       	mov    edx,0x1
c00035e7:	89 e8                	mov    eax,ebp
c00035e9:	e8 b0 fe ff ff       	call   c000349e <dir_next>
c00035ee:	85 c0                	test   eax,eax
c00035f0:	74 cb                	je     c00035bd <dir_alloc+0x1a>
c00035f2:	83 f8 04             	cmp    eax,0x4
c00035f5:	75 05                	jne    c00035fc <dir_alloc+0x59>
c00035f7:	b8 07 00 00 00       	mov    eax,0x7
c00035fc:	83 c4 0c             	add    esp,0xc
c00035ff:	5b                   	pop    ebx
c0003600:	5e                   	pop    esi
c0003601:	5f                   	pop    edi
c0003602:	5d                   	pop    ebp
c0003603:	c3                   	ret    

c0003604 <dir_read>:
c0003604:	55                   	push   ebp
c0003605:	57                   	push   edi
c0003606:	bf ff ff ff ff       	mov    edi,0xffffffff
c000360b:	56                   	push   esi
c000360c:	be 04 00 00 00       	mov    esi,0x4
c0003611:	53                   	push   ebx
c0003612:	89 c3                	mov    ebx,eax
c0003614:	83 ec 1c             	sub    esp,0x1c
c0003617:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000361b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000361d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003622:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003625:	85 d2                	test   edx,edx
c0003627:	0f 84 d8 00 00 00    	je     c0003705 <dir_read+0x101>
c000362d:	89 e8                	mov    eax,ebp
c000362f:	e8 11 ec ff ff       	call   c0002245 <move_window>
c0003634:	89 c6                	mov    esi,eax
c0003636:	85 c0                	test   eax,eax
c0003638:	0f 85 d2 00 00 00    	jne    c0003710 <dir_read+0x10c>
c000363e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003641:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003643:	84 c9                	test   cl,cl
c0003645:	0f 84 c0 00 00 00    	je     c000370b <dir_read+0x107>
c000364b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000364e:	83 e0 3f             	and    eax,0x3f
c0003651:	80 f9 2e             	cmp    cl,0x2e
c0003654:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003658:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000365b:	0f 84 8a 00 00 00    	je     c00036eb <dir_read+0xe7>
c0003661:	80 f9 e5             	cmp    cl,0xe5
c0003664:	0f 84 81 00 00 00    	je     c00036eb <dir_read+0xe7>
c000366a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000366e:	83 e0 1f             	and    eax,0x1f
c0003671:	83 f8 08             	cmp    eax,0x8
c0003674:	0f 94 c0             	sete   al
c0003677:	0f b6 c0             	movzx  eax,al
c000367a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000367e:	75 6b                	jne    c00036eb <dir_read+0xe7>
c0003680:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003685:	75 44                	jne    c00036cb <dir_read+0xc7>
c0003687:	f6 c1 40             	test   cl,0x40
c000368a:	74 12                	je     c000369e <dir_read+0x9a>
c000368c:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c000368f:	83 e1 bf             	and    ecx,0xffffffbf
c0003692:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003696:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003699:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c000369c:	eb 06                	jmp    c00036a4 <dir_read+0xa0>
c000369e:	89 f8                	mov    eax,edi
c00036a0:	38 c8                	cmp    al,cl
c00036a2:	75 47                	jne    c00036eb <dir_read+0xe7>
c00036a4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036a8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036ad:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036b0:	75 3e                	jne    c00036f0 <dir_read+0xec>
c00036b2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036b9:	e8 c4 e8 ff ff       	call   c0001f82 <pick_lfn>
c00036be:	85 c0                	test   eax,eax
c00036c0:	74 2e                	je     c00036f0 <dir_read+0xec>
c00036c2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036c6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036c9:	eb 25                	jmp    c00036f0 <dir_read+0xec>
c00036cb:	89 f8                	mov    eax,edi
c00036cd:	84 c0                	test   al,al
c00036cf:	75 11                	jne    c00036e2 <dir_read+0xde>
c00036d1:	89 d0                	mov    eax,edx
c00036d3:	e8 64 ea ff ff       	call   c000213c <sum_sfn>
c00036d8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036dc:	75 04                	jne    c00036e2 <dir_read+0xde>
c00036de:	31 f6                	xor    esi,esi
c00036e0:	eb 35                	jmp    c0003717 <dir_read+0x113>
c00036e2:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00036e9:	eb 2c                	jmp    c0003717 <dir_read+0x113>
c00036eb:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036f0:	31 d2                	xor    edx,edx
c00036f2:	89 d8                	mov    eax,ebx
c00036f4:	e8 a5 fd ff ff       	call   c000349e <dir_next>
c00036f9:	89 c6                	mov    esi,eax
c00036fb:	85 c0                	test   eax,eax
c00036fd:	0f 84 1f ff ff ff    	je     c0003622 <dir_read+0x1e>
c0003703:	eb 0b                	jmp    c0003710 <dir_read+0x10c>
c0003705:	85 f6                	test   esi,esi
c0003707:	74 d5                	je     c00036de <dir_read+0xda>
c0003709:	eb 05                	jmp    c0003710 <dir_read+0x10c>
c000370b:	be 04 00 00 00       	mov    esi,0x4
c0003710:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003717:	83 c4 1c             	add    esp,0x1c
c000371a:	89 f0                	mov    eax,esi
c000371c:	5b                   	pop    ebx
c000371d:	5e                   	pop    esi
c000371e:	5f                   	pop    edi
c000371f:	5d                   	pop    ebp
c0003720:	c3                   	ret    

c0003721 <dir_remove>:
c0003721:	57                   	push   edi
c0003722:	56                   	push   esi
c0003723:	53                   	push   ebx
c0003724:	89 c3                	mov    ebx,eax
c0003726:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003729:	8b 30                	mov    esi,DWORD PTR [eax]
c000372b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000372e:	83 fa ff             	cmp    edx,0xffffffff
c0003731:	74 09                	je     c000373c <dir_remove+0x1b>
c0003733:	e8 db fa ff ff       	call   c0003213 <dir_sdi>
c0003738:	85 c0                	test   eax,eax
c000373a:	75 34                	jne    c0003770 <dir_remove+0x4f>
c000373c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000373f:	89 f0                	mov    eax,esi
c0003741:	e8 ff ea ff ff       	call   c0002245 <move_window>
c0003746:	85 c0                	test   eax,eax
c0003748:	75 1c                	jne    c0003766 <dir_remove+0x45>
c000374a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000374d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003750:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003754:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003757:	73 17                	jae    c0003770 <dir_remove+0x4f>
c0003759:	31 d2                	xor    edx,edx
c000375b:	89 d8                	mov    eax,ebx
c000375d:	e8 3c fd ff ff       	call   c000349e <dir_next>
c0003762:	85 c0                	test   eax,eax
c0003764:	74 d6                	je     c000373c <dir_remove+0x1b>
c0003766:	83 f8 04             	cmp    eax,0x4
c0003769:	75 05                	jne    c0003770 <dir_remove+0x4f>
c000376b:	b8 02 00 00 00       	mov    eax,0x2
c0003770:	5b                   	pop    ebx
c0003771:	5e                   	pop    esi
c0003772:	5f                   	pop    edi
c0003773:	c3                   	ret    

c0003774 <dir_find>:
c0003774:	55                   	push   ebp
c0003775:	31 d2                	xor    edx,edx
c0003777:	57                   	push   edi
c0003778:	56                   	push   esi
c0003779:	53                   	push   ebx
c000377a:	89 c3                	mov    ebx,eax
c000377c:	83 ec 1c             	sub    esp,0x1c
c000377f:	8b 00                	mov    eax,DWORD PTR [eax]
c0003781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003785:	89 d8                	mov    eax,ebx
c0003787:	e8 87 fa ff ff       	call   c0003213 <dir_sdi>
c000378c:	89 c6                	mov    esi,eax
c000378e:	85 c0                	test   eax,eax
c0003790:	0f 85 02 01 00 00    	jne    c0003898 <dir_find+0x124>
c0003796:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c000379d:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037a2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037a7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ae:	e8 92 ea ff ff       	call   c0002245 <move_window>
c00037b3:	89 c6                	mov    esi,eax
c00037b5:	85 c0                	test   eax,eax
c00037b7:	0f 85 db 00 00 00    	jne    c0003898 <dir_find+0x124>
c00037bd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037c0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037c3:	84 c9                	test   cl,cl
c00037c5:	0f 84 c8 00 00 00    	je     c0003893 <dir_find+0x11f>
c00037cb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ce:	88 d0                	mov    al,dl
c00037d0:	83 e0 3f             	and    eax,0x3f
c00037d3:	80 f9 e5             	cmp    cl,0xe5
c00037d6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037d9:	0f 84 93 00 00 00    	je     c0003872 <dir_find+0xfe>
c00037df:	80 e2 08             	and    dl,0x8
c00037e2:	74 0a                	je     c00037ee <dir_find+0x7a>
c00037e4:	3c 0f                	cmp    al,0xf
c00037e6:	0f 85 86 00 00 00    	jne    c0003872 <dir_find+0xfe>
c00037ec:	eb 04                	jmp    c00037f2 <dir_find+0x7e>
c00037ee:	3c 0f                	cmp    al,0xf
c00037f0:	75 54                	jne    c0003846 <dir_find+0xd2>
c00037f2:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c00037f6:	0f 85 82 00 00 00    	jne    c000387e <dir_find+0x10a>
c00037fc:	f6 c1 40             	test   cl,0x40
c00037ff:	74 12                	je     c0003813 <dir_find+0x9f>
c0003801:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003804:	83 e1 bf             	and    ecx,0xffffffbf
c0003807:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000380b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000380e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003811:	eb 06                	jmp    c0003819 <dir_find+0xa5>
c0003813:	89 f8                	mov    eax,edi
c0003815:	38 c8                	cmp    al,cl
c0003817:	75 60                	jne    c0003879 <dir_find+0x105>
c0003819:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000381d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003822:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003825:	75 57                	jne    c000387e <dir_find+0x10a>
c0003827:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000382b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000382f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003832:	89 ea                	mov    edx,ebp
c0003834:	e8 89 f3 ff ff       	call   c0002bc2 <cmp_lfn>
c0003839:	85 c0                	test   eax,eax
c000383b:	74 41                	je     c000387e <dir_find+0x10a>
c000383d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003841:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003844:	eb 38                	jmp    c000387e <dir_find+0x10a>
c0003846:	89 f8                	mov    eax,edi
c0003848:	84 c0                	test   al,al
c000384a:	75 0d                	jne    c0003859 <dir_find+0xe5>
c000384c:	89 e8                	mov    eax,ebp
c000384e:	e8 e9 e8 ff ff       	call   c000213c <sum_sfn>
c0003853:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003857:	74 3f                	je     c0003898 <dir_find+0x124>
c0003859:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000385d:	75 13                	jne    c0003872 <dir_find+0xfe>
c000385f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003862:	b9 0b 00 00 00       	mov    ecx,0xb
c0003867:	89 e8                	mov    eax,ebp
c0003869:	e8 fd e4 ff ff       	call   c0001d6b <mem_cmp>
c000386e:	85 c0                	test   eax,eax
c0003870:	74 26                	je     c0003898 <dir_find+0x124>
c0003872:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003879:	bf ff ff ff ff       	mov    edi,0xffffffff
c000387e:	31 d2                	xor    edx,edx
c0003880:	89 d8                	mov    eax,ebx
c0003882:	e8 17 fc ff ff       	call   c000349e <dir_next>
c0003887:	89 c6                	mov    esi,eax
c0003889:	85 c0                	test   eax,eax
c000388b:	0f 84 16 ff ff ff    	je     c00037a7 <dir_find+0x33>
c0003891:	eb 05                	jmp    c0003898 <dir_find+0x124>
c0003893:	be 04 00 00 00       	mov    esi,0x4
c0003898:	83 c4 1c             	add    esp,0x1c
c000389b:	89 f0                	mov    eax,esi
c000389d:	5b                   	pop    ebx
c000389e:	5e                   	pop    esi
c000389f:	5f                   	pop    edi
c00038a0:	5d                   	pop    ebp
c00038a1:	c3                   	ret    

c00038a2 <follow_path>:
c00038a2:	56                   	push   esi
c00038a3:	53                   	push   ebx
c00038a4:	89 c3                	mov    ebx,eax
c00038a6:	83 ec 14             	sub    esp,0x14
c00038a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038ad:	8b 30                	mov    esi,DWORD PTR [eax]
c00038af:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038b3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038b5:	80 fa 5c             	cmp    dl,0x5c
c00038b8:	75 07                	jne    c00038c1 <follow_path+0x1f>
c00038ba:	40                   	inc    eax
c00038bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038bf:	eb ee                	jmp    c00038af <follow_path+0xd>
c00038c1:	80 fa 2f             	cmp    dl,0x2f
c00038c4:	74 f4                	je     c00038ba <follow_path+0x18>
c00038c6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038cd:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038d0:	77 3e                	ja     c0003910 <follow_path+0x6e>
c00038d2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038d6:	31 d2                	xor    edx,edx
c00038d8:	89 d8                	mov    eax,ebx
c00038da:	e8 34 f9 ff ff       	call   c0003213 <dir_sdi>
c00038df:	eb 4f                	jmp    c0003930 <follow_path+0x8e>
c00038e1:	89 d8                	mov    eax,ebx
c00038e3:	e8 8c fe ff ff       	call   c0003774 <dir_find>
c00038e8:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c00038eb:	85 c0                	test   eax,eax
c00038ed:	75 32                	jne    c0003921 <follow_path+0x7f>
c00038ef:	80 e2 04             	and    dl,0x4
c00038f2:	75 3c                	jne    c0003930 <follow_path+0x8e>
c00038f4:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c00038f8:	74 31                	je     c000392b <follow_path+0x89>
c00038fa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00038fd:	25 ff 01 00 00       	and    eax,0x1ff
c0003902:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003906:	8a 06                	mov    al,BYTE PTR [esi]
c0003908:	e8 b3 f7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000390d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003910:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003914:	89 d8                	mov    eax,ebx
c0003916:	e8 cb ef ff ff       	call   c00028e6 <create_name>
c000391b:	85 c0                	test   eax,eax
c000391d:	74 c2                	je     c00038e1 <follow_path+0x3f>
c000391f:	eb 0f                	jmp    c0003930 <follow_path+0x8e>
c0003921:	83 f8 04             	cmp    eax,0x4
c0003924:	75 0a                	jne    c0003930 <follow_path+0x8e>
c0003926:	80 e2 04             	and    dl,0x4
c0003929:	75 05                	jne    c0003930 <follow_path+0x8e>
c000392b:	b8 05 00 00 00       	mov    eax,0x5
c0003930:	83 c4 14             	add    esp,0x14
c0003933:	5b                   	pop    ebx
c0003934:	5e                   	pop    esi
c0003935:	c3                   	ret    

c0003936 <dir_register>:
c0003936:	55                   	push   ebp
c0003937:	57                   	push   edi
c0003938:	56                   	push   esi
c0003939:	be 06 00 00 00       	mov    esi,0x6
c000393e:	53                   	push   ebx
c000393f:	83 ec 2c             	sub    esp,0x2c
c0003942:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003946:	0f 85 65 01 00 00    	jne    c0003ab1 <dir_register+0x17b>
c000394c:	8b 38                	mov    edi,DWORD PTR [eax]
c000394e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003956:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000395d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003962:	74 06                	je     c000396a <dir_register+0x34>
c0003964:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003968:	eb ef                	jmp    c0003959 <dir_register+0x23>
c000396a:	89 c3                	mov    ebx,eax
c000396c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003971:	8d 40 20             	lea    eax,[eax+0x20]
c0003974:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003978:	89 c2                	mov    edx,eax
c000397a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000397e:	e8 c8 e3 ff ff       	call   c0001d4b <mem_cpy>
c0003983:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003988:	74 48                	je     c00039d2 <dir_register+0x9c>
c000398a:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c000398e:	bd 01 00 00 00       	mov    ebp,0x1
c0003993:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003996:	55                   	push   ebp
c0003997:	8d 54 24 18          	lea    edx,[esp+0x18]
c000399b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000399f:	e8 dc e6 ff ff       	call   c0002080 <gen_numname>
c00039a4:	58                   	pop    eax
c00039a5:	89 d8                	mov    eax,ebx
c00039a7:	e8 c8 fd ff ff       	call   c0003774 <dir_find>
c00039ac:	89 c6                	mov    esi,eax
c00039ae:	85 c0                	test   eax,eax
c00039b0:	75 10                	jne    c00039c2 <dir_register+0x8c>
c00039b2:	45                   	inc    ebp
c00039b3:	83 fd 64             	cmp    ebp,0x64
c00039b6:	75 db                	jne    c0003993 <dir_register+0x5d>
c00039b8:	be 07 00 00 00       	mov    esi,0x7
c00039bd:	e9 ef 00 00 00       	jmp    c0003ab1 <dir_register+0x17b>
c00039c2:	83 f8 04             	cmp    eax,0x4
c00039c5:	0f 85 e6 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c00039cb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039cf:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039d2:	bd 01 00 00 00       	mov    ebp,0x1
c00039d7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039dc:	74 13                	je     c00039f1 <dir_register+0xbb>
c00039de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039e2:	b9 0d 00 00 00       	mov    ecx,0xd
c00039e7:	83 c0 0c             	add    eax,0xc
c00039ea:	31 d2                	xor    edx,edx
c00039ec:	f7 f1                	div    ecx
c00039ee:	8d 68 01             	lea    ebp,[eax+0x1]
c00039f1:	89 ea                	mov    edx,ebp
c00039f3:	89 d8                	mov    eax,ebx
c00039f5:	e8 a9 fb ff ff       	call   c00035a3 <dir_alloc>
c00039fa:	89 c6                	mov    esi,eax
c00039fc:	85 c0                	test   eax,eax
c00039fe:	0f 85 ad 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a04:	4d                   	dec    ebp
c0003a05:	74 6a                	je     c0003a71 <dir_register+0x13b>
c0003a07:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a0a:	89 e8                	mov    eax,ebp
c0003a0c:	c1 e0 05             	shl    eax,0x5
c0003a0f:	29 c2                	sub    edx,eax
c0003a11:	89 d8                	mov    eax,ebx
c0003a13:	e8 fb f7 ff ff       	call   c0003213 <dir_sdi>
c0003a18:	89 c6                	mov    esi,eax
c0003a1a:	85 c0                	test   eax,eax
c0003a1c:	0f 85 8f 00 00 00    	jne    c0003ab1 <dir_register+0x17b>
c0003a22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a26:	e8 11 e7 ff ff       	call   c000213c <sum_sfn>
c0003a2b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a2f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a32:	89 f8                	mov    eax,edi
c0003a34:	e8 0c e8 ff ff       	call   c0002245 <move_window>
c0003a39:	89 c6                	mov    esi,eax
c0003a3b:	85 c0                	test   eax,eax
c0003a3d:	75 72                	jne    c0003ab1 <dir_register+0x17b>
c0003a3f:	83 ec 0c             	sub    esp,0xc
c0003a42:	89 e8                	mov    eax,ebp
c0003a44:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a49:	0f b6 c8             	movzx  ecx,al
c0003a4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a4f:	52                   	push   edx
c0003a50:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a53:	e8 a4 e5 ff ff       	call   c0001ffc <put_lfn>
c0003a58:	31 d2                	xor    edx,edx
c0003a5a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a5e:	89 d8                	mov    eax,ebx
c0003a60:	e8 39 fa ff ff       	call   c000349e <dir_next>
c0003a65:	83 c4 10             	add    esp,0x10
c0003a68:	89 c6                	mov    esi,eax
c0003a6a:	85 c0                	test   eax,eax
c0003a6c:	75 43                	jne    c0003ab1 <dir_register+0x17b>
c0003a6e:	4d                   	dec    ebp
c0003a6f:	75 be                	jne    c0003a2f <dir_register+0xf9>
c0003a71:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a74:	89 f8                	mov    eax,edi
c0003a76:	e8 ca e7 ff ff       	call   c0002245 <move_window>
c0003a7b:	89 c6                	mov    esi,eax
c0003a7d:	85 c0                	test   eax,eax
c0003a7f:	75 30                	jne    c0003ab1 <dir_register+0x17b>
c0003a81:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a84:	b9 20 00 00 00       	mov    ecx,0x20
c0003a89:	31 d2                	xor    edx,edx
c0003a8b:	e8 d0 e2 ff ff       	call   c0001d60 <mem_set>
c0003a90:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003a93:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003a97:	b9 0b 00 00 00       	mov    ecx,0xb
c0003a9c:	e8 aa e2 ff ff       	call   c0001d4b <mem_cpy>
c0003aa1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003aa4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003aa7:	83 e0 18             	and    eax,0x18
c0003aaa:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003aad:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ab1:	83 c4 2c             	add    esp,0x2c
c0003ab4:	89 f0                	mov    eax,esi
c0003ab6:	5b                   	pop    ebx
c0003ab7:	5e                   	pop    esi
c0003ab8:	5f                   	pop    edi
c0003ab9:	5d                   	pop    ebp
c0003aba:	c3                   	ret    

c0003abb <f_mount>:
c0003abb:	53                   	push   ebx
c0003abc:	83 ec 18             	sub    esp,0x18
c0003abf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ac3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ac7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003acb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003acf:	e8 7a e6 ff ff       	call   c000214e <get_ldnumber>
c0003ad4:	89 c2                	mov    edx,eax
c0003ad6:	b8 0b 00 00 00       	mov    eax,0xb
c0003adb:	85 d2                	test   edx,edx
c0003add:	78 39                	js     c0003b18 <f_mount+0x5d>
c0003adf:	8b 04 95 c0 fa 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0540]
c0003ae6:	85 c0                	test   eax,eax
c0003ae8:	74 03                	je     c0003aed <f_mount+0x32>
c0003aea:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003af1:	85 c0                	test   eax,eax
c0003af3:	74 03                	je     c0003af8 <f_mount+0x3d>
c0003af5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003af8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003afc:	89 04 95 c0 fa 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0540],eax
c0003b03:	31 c0                	xor    eax,eax
c0003b05:	84 db                	test   bl,bl
c0003b07:	74 0f                	je     c0003b18 <f_mount+0x5d>
c0003b09:	31 c9                	xor    ecx,ecx
c0003b0b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b0f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b13:	e8 80 e8 ff ff       	call   c0002398 <mount_volume>
c0003b18:	83 c4 18             	add    esp,0x18
c0003b1b:	5b                   	pop    ebx
c0003b1c:	c3                   	ret    

c0003b1d <f_open>:
c0003b1d:	55                   	push   ebp
c0003b1e:	b8 09 00 00 00       	mov    eax,0x9
c0003b23:	57                   	push   edi
c0003b24:	56                   	push   esi
c0003b25:	53                   	push   ebx
c0003b26:	83 ec 5c             	sub    esp,0x5c
c0003b29:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b2d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b31:	85 db                	test   ebx,ebx
c0003b33:	0f 84 a7 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b39:	89 fe                	mov    esi,edi
c0003b3b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b3f:	83 e6 3f             	and    esi,0x3f
c0003b42:	89 f0                	mov    eax,esi
c0003b44:	0f b6 c8             	movzx  ecx,al
c0003b47:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b4b:	e8 48 e8 ff ff       	call   c0002398 <mount_volume>
c0003b50:	85 c0                	test   eax,eax
c0003b52:	0f 85 82 02 00 00    	jne    c0003dda <f_open+0x2bd>
c0003b58:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b5c:	83 ec 0c             	sub    esp,0xc
c0003b5f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b63:	68 00 02 00 00       	push   0x200
c0003b68:	e8 ff 1e 00 00       	call   c0005a6c <ff_memalloc>
c0003b6d:	83 c4 10             	add    esp,0x10
c0003b70:	89 c5                	mov    ebp,eax
c0003b72:	b8 11 00 00 00       	mov    eax,0x11
c0003b77:	85 ed                	test   ebp,ebp
c0003b79:	0f 84 61 02 00 00    	je     c0003de0 <f_open+0x2c3>
c0003b7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b83:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003b87:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003b8a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003b8e:	e8 0f fd ff ff       	call   c00038a2 <follow_path>
c0003b93:	85 c0                	test   eax,eax
c0003b95:	75 0c                	jne    c0003ba3 <f_open+0x86>
c0003b97:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003b9c:	79 05                	jns    c0003ba3 <f_open+0x86>
c0003b9e:	b8 06 00 00 00       	mov    eax,0x6
c0003ba3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003ba9:	0f 84 de 00 00 00    	je     c0003c8d <f_open+0x170>
c0003baf:	85 c0                	test   eax,eax
c0003bb1:	74 1e                	je     c0003bd1 <f_open+0xb4>
c0003bb3:	83 f8 04             	cmp    eax,0x4
c0003bb6:	0f 85 06 02 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bbc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bc0:	83 ce 08             	or     esi,0x8
c0003bc3:	e8 6e fd ff ff       	call   c0003936 <dir_register>
c0003bc8:	85 c0                	test   eax,eax
c0003bca:	74 2f                	je     c0003bfb <f_open+0xde>
c0003bcc:	e9 f1 01 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003bd1:	b8 07 00 00 00       	mov    eax,0x7
c0003bd6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bdb:	0f 85 e1 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003be1:	b8 08 00 00 00       	mov    eax,0x8
c0003be6:	f7 c7 04 00 00 00    	test   edi,0x4
c0003bec:	0f 85 d0 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003bf2:	83 e7 08             	and    edi,0x8
c0003bf5:	0f 84 bf 00 00 00    	je     c0003cba <f_open+0x19d>
c0003bfb:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003bff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c03:	89 ca                	mov    edx,ecx
c0003c05:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c09:	8a 00                	mov    al,BYTE PTR [eax]
c0003c0b:	e8 b0 f4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003c10:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c14:	89 c7                	mov    edi,eax
c0003c16:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c1b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c1e:	e8 25 e1 ff ff       	call   c0001d48 <st_dword>
c0003c23:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c27:	31 c9                	xor    ecx,ecx
c0003c29:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c2d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c35:	e8 af f4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0003c3a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c3e:	31 d2                	xor    edx,edx
c0003c40:	83 c0 1c             	add    eax,0x1c
c0003c43:	e8 00 e1 ff ff       	call   c0001d48 <st_dword>
c0003c48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c4c:	85 ff                	test   edi,edi
c0003c4e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c52:	74 66                	je     c0003cba <f_open+0x19d>
c0003c54:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c58:	31 c9                	xor    ecx,ecx
c0003c5a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c5d:	89 fa                	mov    edx,edi
c0003c5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c63:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c67:	e8 a9 f7 ff ff       	call   c0003415 <remove_chain>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	0f 85 4e 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c74:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c78:	4f                   	dec    edi
c0003c79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c7d:	e8 c3 e5 ff ff       	call   c0002245 <move_window>
c0003c82:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003c86:	85 c0                	test   eax,eax
c0003c88:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003c8b:	eb 27                	jmp    c0003cb4 <f_open+0x197>
c0003c8d:	85 c0                	test   eax,eax
c0003c8f:	0f 85 2d 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003c95:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003c99:	b8 04 00 00 00       	mov    eax,0x4
c0003c9e:	f6 c2 10             	test   dl,0x10
c0003ca1:	0f 85 1b 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003ca7:	83 e7 02             	and    edi,0x2
c0003caa:	74 0e                	je     c0003cba <f_open+0x19d>
c0003cac:	b8 07 00 00 00       	mov    eax,0x7
c0003cb1:	80 e2 01             	and    dl,0x1
c0003cb4:	0f 85 08 01 00 00    	jne    c0003dc2 <f_open+0x2a5>
c0003cba:	f7 c6 08 00 00 00    	test   esi,0x8
c0003cc0:	74 03                	je     c0003cc5 <f_open+0x1a8>
c0003cc2:	83 ce 40             	or     esi,0x40
c0003cc5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003cc9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ccd:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cd0:	89 fa                	mov    edx,edi
c0003cd2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cd6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cd9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cdc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cde:	e8 dd f3 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0003ce3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003ce6:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003ce9:	e8 3e e0 ff ff       	call   c0001d2c <ld_dword>
c0003cee:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003cf2:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003cf5:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003cf7:	31 d2                	xor    edx,edx
c0003cf9:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003cfd:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d01:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d05:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d0c:	89 f0                	mov    eax,esi
c0003d0e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d15:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d18:	b9 00 02 00 00       	mov    ecx,0x200
c0003d1d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d24:	e8 37 e0 ff ff       	call   c0001d60 <mem_set>
c0003d29:	83 e6 20             	and    esi,0x20
c0003d2c:	75 07                	jne    c0003d35 <f_open+0x218>
c0003d2e:	31 c0                	xor    eax,eax
c0003d30:	e9 8d 00 00 00       	jmp    c0003dc2 <f_open+0x2a5>
c0003d35:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d38:	85 ff                	test   edi,edi
c0003d3a:	74 f2                	je     c0003d2e <f_open+0x211>
c0003d3c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d3f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d43:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d46:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d4a:	c1 e6 09             	shl    esi,0x9
c0003d4d:	39 fe                	cmp    esi,edi
c0003d4f:	73 1c                	jae    c0003d6d <f_open+0x250>
c0003d51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d53:	29 f7                	sub    edi,esi
c0003d55:	e8 b7 f3 ff ff       	call   c0003111 <get_fat.isra.2>
c0003d5a:	89 c2                	mov    edx,eax
c0003d5c:	83 f8 01             	cmp    eax,0x1
c0003d5f:	76 10                	jbe    c0003d71 <f_open+0x254>
c0003d61:	83 f8 ff             	cmp    eax,0xffffffff
c0003d64:	75 e7                	jne    c0003d4d <f_open+0x230>
c0003d66:	b8 01 00 00 00       	mov    eax,0x1
c0003d6b:	eb 09                	jmp    c0003d76 <f_open+0x259>
c0003d6d:	31 c0                	xor    eax,eax
c0003d6f:	eb 05                	jmp    c0003d76 <f_open+0x259>
c0003d71:	b8 02 00 00 00       	mov    eax,0x2
c0003d76:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d79:	85 c0                	test   eax,eax
c0003d7b:	75 45                	jne    c0003dc2 <f_open+0x2a5>
c0003d7d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003d83:	74 a9                	je     c0003d2e <f_open+0x211>
c0003d85:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003d89:	89 f0                	mov    eax,esi
c0003d8b:	e8 d5 e1 ff ff       	call   c0001f65 <clst2sect>
c0003d90:	89 c2                	mov    edx,eax
c0003d92:	b8 02 00 00 00       	mov    eax,0x2
c0003d97:	85 d2                	test   edx,edx
c0003d99:	74 27                	je     c0003dc2 <f_open+0x2a5>
c0003d9b:	89 f9                	mov    ecx,edi
c0003d9d:	c1 e9 09             	shr    ecx,0x9
c0003da0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003da3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003da6:	6a 01                	push   0x1
c0003da8:	50                   	push   eax
c0003da9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dad:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003db1:	50                   	push   eax
c0003db2:	e8 1d df ff ff       	call   c0001cd4 <disk_read>
c0003db7:	83 c4 10             	add    esp,0x10
c0003dba:	85 c0                	test   eax,eax
c0003dbc:	0f 95 c0             	setne  al
c0003dbf:	0f b6 c0             	movzx  eax,al
c0003dc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003dc6:	83 ec 0c             	sub    esp,0xc
c0003dc9:	55                   	push   ebp
c0003dca:	e8 b5 1c 00 00       	call   c0005a84 <ff_memfree>
c0003dcf:	83 c4 10             	add    esp,0x10
c0003dd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003dd6:	85 c0                	test   eax,eax
c0003dd8:	74 06                	je     c0003de0 <f_open+0x2c3>
c0003dda:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003de0:	83 c4 5c             	add    esp,0x5c
c0003de3:	5b                   	pop    ebx
c0003de4:	5e                   	pop    esi
c0003de5:	5f                   	pop    edi
c0003de6:	5d                   	pop    ebp
c0003de7:	c3                   	ret    

c0003de8 <f_read>:
c0003de8:	55                   	push   ebp
c0003de9:	57                   	push   edi
c0003dea:	56                   	push   esi
c0003deb:	53                   	push   ebx
c0003dec:	83 ec 2c             	sub    esp,0x2c
c0003def:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003df3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003dfd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e01:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e05:	89 d8                	mov    eax,ebx
c0003e07:	e8 8f e3 ff ff       	call   c000219b <validate>
c0003e0c:	89 c5                	mov    ebp,eax
c0003e0e:	85 c0                	test   eax,eax
c0003e10:	0f 85 c7 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e16:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e1a:	85 ed                	test   ebp,ebp
c0003e1c:	0f 85 bb 01 00 00    	jne    c0003fdd <f_read+0x1f5>
c0003e22:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e26:	0f 84 ac 01 00 00    	je     c0003fd8 <f_read+0x1f0>
c0003e2c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e2f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e32:	89 c7                	mov    edi,eax
c0003e34:	39 f0                	cmp    eax,esi
c0003e36:	0f 86 ad 00 00 00    	jbe    c0003ee9 <f_read+0x101>
c0003e3c:	89 f7                	mov    edi,esi
c0003e3e:	e9 a6 00 00 00       	jmp    c0003ee9 <f_read+0x101>
c0003e43:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e46:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e4c:	0f 85 5b 01 00 00    	jne    c0003fad <f_read+0x1c5>
c0003e52:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e56:	89 d1                	mov    ecx,edx
c0003e58:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e5c:	c1 e9 09             	shr    ecx,0x9
c0003e5f:	48                   	dec    eax
c0003e60:	21 c8                	and    eax,ecx
c0003e62:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e66:	0f 84 8a 00 00 00    	je     c0003ef6 <f_read+0x10e>
c0003e6c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e70:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e73:	89 c8                	mov    eax,ecx
c0003e75:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e79:	e8 e7 e0 ff ff       	call   c0001f65 <clst2sect>
c0003e7e:	85 c0                	test   eax,eax
c0003e80:	0f 84 88 00 00 00    	je     c0003f0e <f_read+0x126>
c0003e86:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003e8a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003e8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003e92:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003e98:	0f 86 bd 00 00 00    	jbe    c0003f5b <f_read+0x173>
c0003e9e:	89 fe                	mov    esi,edi
c0003ea0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ea4:	c1 ee 09             	shr    esi,0x9
c0003ea7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003eab:	01 f2                	add    edx,esi
c0003ead:	39 c2                	cmp    edx,eax
c0003eaf:	76 06                	jbe    c0003eb7 <f_read+0xcf>
c0003eb1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003eb5:	89 c6                	mov    esi,eax
c0003eb7:	56                   	push   esi
c0003eb8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003ebc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ec0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ec4:	50                   	push   eax
c0003ec5:	e8 0a de ff ff       	call   c0001cd4 <disk_read>
c0003eca:	83 c4 10             	add    esp,0x10
c0003ecd:	85 c0                	test   eax,eax
c0003ecf:	75 50                	jne    c0003f21 <f_read+0x139>
c0003ed1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ed5:	78 60                	js     c0003f37 <f_read+0x14f>
c0003ed7:	c1 e6 09             	shl    esi,0x9
c0003eda:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ede:	29 f7                	sub    edi,esi
c0003ee0:	01 30                	add    DWORD PTR [eax],esi
c0003ee2:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003ee6:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003ee9:	85 ff                	test   edi,edi
c0003eeb:	0f 85 52 ff ff ff    	jne    c0003e43 <f_read+0x5b>
c0003ef1:	e9 e7 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003ef6:	85 d2                	test   edx,edx
c0003ef8:	75 05                	jne    c0003eff <f_read+0x117>
c0003efa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003efd:	eb 0a                	jmp    c0003f09 <f_read+0x121>
c0003eff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f02:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f04:	e8 08 f2 ff ff       	call   c0003111 <get_fat.isra.2>
c0003f09:	83 f8 01             	cmp    eax,0x1
c0003f0c:	77 0e                	ja     c0003f1c <f_read+0x134>
c0003f0e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f12:	bd 02 00 00 00       	mov    ebp,0x2
c0003f17:	e9 c1 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f1c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f1f:	75 0e                	jne    c0003f2f <f_read+0x147>
c0003f21:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f25:	bd 01 00 00 00       	mov    ebp,0x1
c0003f2a:	e9 ae 00 00 00       	jmp    c0003fdd <f_read+0x1f5>
c0003f2f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f32:	e9 35 ff ff ff       	jmp    c0003e6c <f_read+0x84>
c0003f37:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f3a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f3e:	39 f0                	cmp    eax,esi
c0003f40:	73 95                	jae    c0003ed7 <f_read+0xef>
c0003f42:	c1 e0 09             	shl    eax,0x9
c0003f45:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f48:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f4c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f51:	e8 f5 dd ff ff       	call   c0001d4b <mem_cpy>
c0003f56:	e9 7c ff ff ff       	jmp    c0003ed7 <f_read+0xef>
c0003f5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f62:	74 42                	je     c0003fa6 <f_read+0x1be>
c0003f64:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f67:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f6b:	79 19                	jns    c0003f86 <f_read+0x19e>
c0003f6d:	6a 01                	push   0x1
c0003f6f:	50                   	push   eax
c0003f70:	56                   	push   esi
c0003f71:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f75:	50                   	push   eax
c0003f76:	e8 6f dd ff ff       	call   c0001cea <disk_write>
c0003f7b:	83 c4 10             	add    esp,0x10
c0003f7e:	85 c0                	test   eax,eax
c0003f80:	75 9f                	jne    c0003f21 <f_read+0x139>
c0003f82:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003f86:	6a 01                	push   0x1
c0003f88:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003f8c:	56                   	push   esi
c0003f8d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003f91:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 39 dd ff ff       	call   c0001cd4 <disk_read>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	0f 85 7b ff ff ff    	jne    c0003f21 <f_read+0x139>
c0003fa6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003faa:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fad:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fb0:	ba 00 02 00 00       	mov    edx,0x200
c0003fb5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fba:	89 fe                	mov    esi,edi
c0003fbc:	29 c2                	sub    edx,eax
c0003fbe:	39 d7                	cmp    edi,edx
c0003fc0:	76 02                	jbe    c0003fc4 <f_read+0x1dc>
c0003fc2:	89 d6                	mov    esi,edx
c0003fc4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fc8:	89 f1                	mov    ecx,esi
c0003fca:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fce:	e8 78 dd ff ff       	call   c0001d4b <mem_cpy>
c0003fd3:	e9 02 ff ff ff       	jmp    c0003eda <f_read+0xf2>
c0003fd8:	bd 07 00 00 00       	mov    ebp,0x7
c0003fdd:	83 c4 2c             	add    esp,0x2c
c0003fe0:	89 e8                	mov    eax,ebp
c0003fe2:	5b                   	pop    ebx
c0003fe3:	5e                   	pop    esi
c0003fe4:	5f                   	pop    edi
c0003fe5:	5d                   	pop    ebp
c0003fe6:	c3                   	ret    

c0003fe7 <f_write>:
c0003fe7:	55                   	push   ebp
c0003fe8:	57                   	push   edi
c0003fe9:	56                   	push   esi
c0003fea:	53                   	push   ebx
c0003feb:	83 ec 2c             	sub    esp,0x2c
c0003fee:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003ff2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003ff6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003ffc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004000:	89 d8                	mov    eax,ebx
c0004002:	e8 94 e1 ff ff       	call   c000219b <validate>
c0004007:	89 c5                	mov    ebp,eax
c0004009:	85 c0                	test   eax,eax
c000400b:	0f 85 00 02 00 00    	jne    c0004211 <f_write+0x22a>
c0004011:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004015:	85 ed                	test   ebp,ebp
c0004017:	0f 85 f4 01 00 00    	jne    c0004211 <f_write+0x22a>
c000401d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004021:	0f 84 e5 01 00 00    	je     c000420c <f_write+0x225>
c0004027:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000402a:	89 c7                	mov    edi,eax
c000402c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004030:	0f 83 ea 00 00 00    	jae    c0004120 <f_write+0x139>
c0004036:	f7 d0                	not    eax
c0004038:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000403c:	e9 df 00 00 00       	jmp    c0004120 <f_write+0x139>
c0004041:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004044:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000404a:	0f 85 8b 01 00 00    	jne    c00041db <f_write+0x1f4>
c0004050:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004054:	89 d1                	mov    ecx,edx
c0004056:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000405a:	c1 e9 09             	shr    ecx,0x9
c000405d:	48                   	dec    eax
c000405e:	21 c8                	and    eax,ecx
c0004060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004064:	0f 84 c3 00 00 00    	je     c000412d <f_write+0x146>
c000406a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000406e:	0f 88 18 01 00 00    	js     c000418c <f_write+0x1a5>
c0004074:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004078:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000407b:	89 c8                	mov    eax,ecx
c000407d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004081:	e8 df de ff ff       	call   c0001f65 <clst2sect>
c0004086:	85 c0                	test   eax,eax
c0004088:	0f 84 c8 00 00 00    	je     c0004156 <f_write+0x16f>
c000408e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0004092:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004096:	01 c7                	add    edi,eax
c0004098:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040a0:	0f 86 0d 01 00 00    	jbe    c00041b3 <f_write+0x1cc>
c00040a6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040aa:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ae:	c1 ee 09             	shr    esi,0x9
c00040b1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040b5:	01 f2                	add    edx,esi
c00040b7:	39 c2                	cmp    edx,eax
c00040b9:	76 06                	jbe    c00040c1 <f_write+0xda>
c00040bb:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040bf:	89 c6                	mov    esi,eax
c00040c1:	56                   	push   esi
c00040c2:	57                   	push   edi
c00040c3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040cb:	50                   	push   eax
c00040cc:	e8 19 dc ff ff       	call   c0001cea <disk_write>
c00040d1:	83 c4 10             	add    esp,0x10
c00040d4:	85 c0                	test   eax,eax
c00040d6:	0f 85 8d 00 00 00    	jne    c0004169 <f_write+0x182>
c00040dc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040df:	29 fa                	sub    edx,edi
c00040e1:	39 f2                	cmp    edx,esi
c00040e3:	73 18                	jae    c00040fd <f_write+0x116>
c00040e5:	c1 e2 09             	shl    edx,0x9
c00040e8:	8d 43 28             	lea    eax,[ebx+0x28]
c00040eb:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c00040ef:	b9 00 02 00 00       	mov    ecx,0x200
c00040f4:	e8 52 dc ff ff       	call   c0001d4b <mem_cpy>
c00040f9:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00040fd:	c1 e6 09             	shl    esi,0x9
c0004100:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004104:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004108:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000410c:	01 30                	add    DWORD PTR [eax],esi
c000410e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004111:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004114:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004117:	39 f0                	cmp    eax,esi
c0004119:	73 02                	jae    c000411d <f_write+0x136>
c000411b:	89 f0                	mov    eax,esi
c000411d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004120:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004125:	0f 85 16 ff ff ff    	jne    c0004041 <f_write+0x5a>
c000412b:	eb 1b                	jmp    c0004148 <f_write+0x161>
c000412d:	85 d2                	test   edx,edx
c000412f:	75 09                	jne    c000413a <f_write+0x153>
c0004131:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004134:	85 c0                	test   eax,eax
c0004136:	75 19                	jne    c0004151 <f_write+0x16a>
c0004138:	eb 03                	jmp    c000413d <f_write+0x156>
c000413a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000413d:	89 d8                	mov    eax,ebx
c000413f:	e8 97 f1 ff ff       	call   c00032db <create_chain>
c0004144:	85 c0                	test   eax,eax
c0004146:	75 09                	jne    c0004151 <f_write+0x16a>
c0004148:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000414c:	e9 c0 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004151:	83 f8 01             	cmp    eax,0x1
c0004154:	75 0e                	jne    c0004164 <f_write+0x17d>
c0004156:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000415a:	bd 02 00 00 00       	mov    ebp,0x2
c000415f:	e9 ad 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004164:	83 f8 ff             	cmp    eax,0xffffffff
c0004167:	75 0e                	jne    c0004177 <f_write+0x190>
c0004169:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000416d:	bd 01 00 00 00       	mov    ebp,0x1
c0004172:	e9 9a 00 00 00       	jmp    c0004211 <f_write+0x22a>
c0004177:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000417a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000417e:	0f 85 e6 fe ff ff    	jne    c000406a <f_write+0x83>
c0004184:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004187:	e9 de fe ff ff       	jmp    c000406a <f_write+0x83>
c000418c:	6a 01                	push   0x1
c000418e:	8d 43 28             	lea    eax,[ebx+0x28]
c0004191:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004194:	50                   	push   eax
c0004195:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004199:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000419d:	50                   	push   eax
c000419e:	e8 47 db ff ff       	call   c0001cea <disk_write>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	85 c0                	test   eax,eax
c00041a8:	75 bf                	jne    c0004169 <f_write+0x182>
c00041aa:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ae:	e9 c1 fe ff ff       	jmp    c0004074 <f_write+0x8d>
c00041b3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041b6:	74 20                	je     c00041d8 <f_write+0x1f1>
c00041b8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041bb:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041be:	76 18                	jbe    c00041d8 <f_write+0x1f1>
c00041c0:	6a 01                	push   0x1
c00041c2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041c5:	57                   	push   edi
c00041c6:	50                   	push   eax
c00041c7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041cb:	50                   	push   eax
c00041cc:	e8 03 db ff ff       	call   c0001cd4 <disk_read>
c00041d1:	83 c4 10             	add    esp,0x10
c00041d4:	85 c0                	test   eax,eax
c00041d6:	75 91                	jne    c0004169 <f_write+0x182>
c00041d8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041db:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041de:	ba 00 02 00 00       	mov    edx,0x200
c00041e3:	25 ff 01 00 00       	and    eax,0x1ff
c00041e8:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041ec:	29 c2                	sub    edx,eax
c00041ee:	39 d6                	cmp    esi,edx
c00041f0:	76 02                	jbe    c00041f4 <f_write+0x20d>
c00041f2:	89 d6                	mov    esi,edx
c00041f4:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c00041f8:	89 f1                	mov    ecx,esi
c00041fa:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00041fe:	e8 48 db ff ff       	call   c0001d4b <mem_cpy>
c0004203:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004207:	e9 f4 fe ff ff       	jmp    c0004100 <f_write+0x119>
c000420c:	bd 07 00 00 00       	mov    ebp,0x7
c0004211:	83 c4 2c             	add    esp,0x2c
c0004214:	89 e8                	mov    eax,ebp
c0004216:	5b                   	pop    ebx
c0004217:	5e                   	pop    esi
c0004218:	5f                   	pop    edi
c0004219:	5d                   	pop    ebp
c000421a:	c3                   	ret    

c000421b <f_sync>:
c000421b:	56                   	push   esi
c000421c:	53                   	push   ebx
c000421d:	83 ec 14             	sub    esp,0x14
c0004220:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004224:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004228:	89 d8                	mov    eax,ebx
c000422a:	e8 6c df ff ff       	call   c000219b <validate>
c000422f:	85 c0                	test   eax,eax
c0004231:	0f 85 93 00 00 00    	jne    c00042ca <f_sync+0xaf>
c0004237:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000423a:	f6 c2 40             	test   dl,0x40
c000423d:	0f 84 87 00 00 00    	je     c00042ca <f_sync+0xaf>
c0004243:	84 d2                	test   dl,dl
c0004245:	79 29                	jns    c0004270 <f_sync+0x55>
c0004247:	6a 01                	push   0x1
c0004249:	8d 43 28             	lea    eax,[ebx+0x28]
c000424c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000424f:	50                   	push   eax
c0004250:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004254:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004258:	50                   	push   eax
c0004259:	e8 8c da ff ff       	call   c0001cea <disk_write>
c000425e:	83 c4 10             	add    esp,0x10
c0004261:	89 c2                	mov    edx,eax
c0004263:	b8 01 00 00 00       	mov    eax,0x1
c0004268:	85 d2                	test   edx,edx
c000426a:	75 5e                	jne    c00042ca <f_sync+0xaf>
c000426c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004270:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004273:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004277:	e8 c9 df ff ff       	call   c0002245 <move_window>
c000427c:	85 c0                	test   eax,eax
c000427e:	75 4a                	jne    c00042ca <f_sync+0xaf>
c0004280:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0004283:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0004287:	89 f2                	mov    edx,esi
c0004289:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c000428c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000428e:	e8 56 ee ff ff       	call   c00030e9 <st_clust.isra.1>
c0004293:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0004296:	8d 46 1c             	lea    eax,[esi+0x1c]
c0004299:	e8 aa da ff ff       	call   c0001d48 <st_dword>
c000429e:	8d 46 16             	lea    eax,[esi+0x16]
c00042a1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042a6:	e8 9d da ff ff       	call   c0001d48 <st_dword>
c00042ab:	8d 46 12             	lea    eax,[esi+0x12]
c00042ae:	31 d2                	xor    edx,edx
c00042b0:	e8 8f da ff ff       	call   c0001d44 <st_word>
c00042b5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042b9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042c1:	e8 bf e9 ff ff       	call   c0002c85 <sync_fs>
c00042c6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ca:	83 c4 14             	add    esp,0x14
c00042cd:	5b                   	pop    ebx
c00042ce:	5e                   	pop    esi
c00042cf:	c3                   	ret    

c00042d0 <f_close>:
c00042d0:	53                   	push   ebx
c00042d1:	83 ec 24             	sub    esp,0x24
c00042d4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042d8:	53                   	push   ebx
c00042d9:	e8 3d ff ff ff       	call   c000421b <f_sync>
c00042de:	83 c4 10             	add    esp,0x10
c00042e1:	85 c0                	test   eax,eax
c00042e3:	75 15                	jne    c00042fa <f_close+0x2a>
c00042e5:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00042e9:	89 d8                	mov    eax,ebx
c00042eb:	e8 ab de ff ff       	call   c000219b <validate>
c00042f0:	85 c0                	test   eax,eax
c00042f2:	75 06                	jne    c00042fa <f_close+0x2a>
c00042f4:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00042fa:	83 c4 18             	add    esp,0x18
c00042fd:	5b                   	pop    ebx
c00042fe:	c3                   	ret    

c00042ff <f_lseek>:
c00042ff:	55                   	push   ebp
c0004300:	57                   	push   edi
c0004301:	56                   	push   esi
c0004302:	53                   	push   ebx
c0004303:	83 ec 2c             	sub    esp,0x2c
c0004306:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000430a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000430e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004312:	89 d8                	mov    eax,ebx
c0004314:	e8 82 de ff ff       	call   c000219b <validate>
c0004319:	89 c5                	mov    ebp,eax
c000431b:	85 c0                	test   eax,eax
c000431d:	0f 85 79 01 00 00    	jne    c000449c <f_lseek+0x19d>
c0004323:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004327:	85 ed                	test   ebp,ebp
c0004329:	0f 85 6d 01 00 00    	jne    c000449c <f_lseek+0x19d>
c000432f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004332:	39 f0                	cmp    eax,esi
c0004334:	73 08                	jae    c000433e <f_lseek+0x3f>
c0004336:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000433a:	75 02                	jne    c000433e <f_lseek+0x3f>
c000433c:	89 c6                	mov    esi,eax
c000433e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004341:	85 f6                	test   esi,esi
c0004343:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000434a:	75 07                	jne    c0004353 <f_lseek+0x54>
c000434c:	31 f6                	xor    esi,esi
c000434e:	e9 e2 00 00 00       	jmp    c0004435 <f_lseek+0x136>
c0004353:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004357:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000435b:	c1 e7 09             	shl    edi,0x9
c000435e:	85 c9                	test   ecx,ecx
c0004360:	74 28                	je     c000438a <f_lseek+0x8b>
c0004362:	49                   	dec    ecx
c0004363:	31 d2                	xor    edx,edx
c0004365:	8d 46 ff             	lea    eax,[esi-0x1]
c0004368:	f7 f7                	div    edi
c000436a:	31 d2                	xor    edx,edx
c000436c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004370:	89 c8                	mov    eax,ecx
c0004372:	f7 f7                	div    edi
c0004374:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004378:	72 10                	jb     c000438a <f_lseek+0x8b>
c000437a:	89 f8                	mov    eax,edi
c000437c:	f7 d8                	neg    eax
c000437e:	21 c1                	and    ecx,eax
c0004380:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0004383:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c0004386:	29 ce                	sub    esi,ecx
c0004388:	eb 3c                	jmp    c00043c6 <f_lseek+0xc7>
c000438a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000438d:	85 c0                	test   eax,eax
c000438f:	75 32                	jne    c00043c3 <f_lseek+0xc4>
c0004391:	31 d2                	xor    edx,edx
c0004393:	89 d8                	mov    eax,ebx
c0004395:	e8 41 ef ff ff       	call   c00032db <create_chain>
c000439a:	83 f8 01             	cmp    eax,0x1
c000439d:	75 0e                	jne    c00043ad <f_lseek+0xae>
c000439f:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043a3:	bd 02 00 00 00       	mov    ebp,0x2
c00043a8:	e9 ef 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043ad:	83 f8 ff             	cmp    eax,0xffffffff
c00043b0:	75 0e                	jne    c00043c0 <f_lseek+0xc1>
c00043b2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043b6:	bd 01 00 00 00       	mov    ebp,0x1
c00043bb:	e9 dc 00 00 00       	jmp    c000449c <f_lseek+0x19d>
c00043c0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043c6:	85 c0                	test   eax,eax
c00043c8:	74 82                	je     c000434c <f_lseek+0x4d>
c00043ca:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043cd:	39 fe                	cmp    esi,edi
c00043cf:	76 3d                	jbe    c000440e <f_lseek+0x10f>
c00043d1:	01 fa                	add    edx,edi
c00043d3:	29 fe                	sub    esi,edi
c00043d5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043d8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043dc:	89 c2                	mov    edx,eax
c00043de:	74 0d                	je     c00043ed <f_lseek+0xee>
c00043e0:	89 d8                	mov    eax,ebx
c00043e2:	e8 f4 ee ff ff       	call   c00032db <create_chain>
c00043e7:	85 c0                	test   eax,eax
c00043e9:	75 09                	jne    c00043f4 <f_lseek+0xf5>
c00043eb:	eb 1f                	jmp    c000440c <f_lseek+0x10d>
c00043ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043ef:	e8 1d ed ff ff       	call   c0003111 <get_fat.isra.2>
c00043f4:	83 f8 ff             	cmp    eax,0xffffffff
c00043f7:	74 b9                	je     c00043b2 <f_lseek+0xb3>
c00043f9:	83 f8 01             	cmp    eax,0x1
c00043fc:	76 a1                	jbe    c000439f <f_lseek+0xa0>
c00043fe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004402:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004405:	76 98                	jbe    c000439f <f_lseek+0xa0>
c0004407:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000440a:	eb be                	jmp    c00043ca <f_lseek+0xcb>
c000440c:	31 f6                	xor    esi,esi
c000440e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004411:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004417:	0f 84 2f ff ff ff    	je     c000434c <f_lseek+0x4d>
c000441d:	89 c2                	mov    edx,eax
c000441f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004423:	e8 3d db ff ff       	call   c0001f65 <clst2sect>
c0004428:	85 c0                	test   eax,eax
c000442a:	0f 84 6f ff ff ff    	je     c000439f <f_lseek+0xa0>
c0004430:	c1 ee 09             	shr    esi,0x9
c0004433:	01 c6                	add    esi,eax
c0004435:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004438:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000443b:	76 07                	jbe    c0004444 <f_lseek+0x145>
c000443d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004440:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004444:	a9 ff 01 00 00       	test   eax,0x1ff
c0004449:	74 51                	je     c000449c <f_lseek+0x19d>
c000444b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000444e:	39 f0                	cmp    eax,esi
c0004450:	74 4a                	je     c000449c <f_lseek+0x19d>
c0004452:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004455:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004459:	79 21                	jns    c000447c <f_lseek+0x17d>
c000445b:	6a 01                	push   0x1
c000445d:	50                   	push   eax
c000445e:	57                   	push   edi
c000445f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004463:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004467:	50                   	push   eax
c0004468:	e8 7d d8 ff ff       	call   c0001cea <disk_write>
c000446d:	83 c4 10             	add    esp,0x10
c0004470:	85 c0                	test   eax,eax
c0004472:	0f 85 3a ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004478:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000447c:	6a 01                	push   0x1
c000447e:	56                   	push   esi
c000447f:	57                   	push   edi
c0004480:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004484:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004488:	50                   	push   eax
c0004489:	e8 46 d8 ff ff       	call   c0001cd4 <disk_read>
c000448e:	83 c4 10             	add    esp,0x10
c0004491:	85 c0                	test   eax,eax
c0004493:	0f 85 19 ff ff ff    	jne    c00043b2 <f_lseek+0xb3>
c0004499:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000449c:	83 c4 2c             	add    esp,0x2c
c000449f:	89 e8                	mov    eax,ebp
c00044a1:	5b                   	pop    ebx
c00044a2:	5e                   	pop    esi
c00044a3:	5f                   	pop    edi
c00044a4:	5d                   	pop    ebp
c00044a5:	c3                   	ret    

c00044a6 <f_opendir>:
c00044a6:	56                   	push   esi
c00044a7:	b8 09 00 00 00       	mov    eax,0x9
c00044ac:	53                   	push   ebx
c00044ad:	83 ec 24             	sub    esp,0x24
c00044b0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044b4:	85 db                	test   ebx,ebx
c00044b6:	0f 84 af 00 00 00    	je     c000456b <f_opendir+0xc5>
c00044bc:	31 c9                	xor    ecx,ecx
c00044be:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044c2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044c6:	e8 cd de ff ff       	call   c0002398 <mount_volume>
c00044cb:	85 c0                	test   eax,eax
c00044cd:	0f 85 92 00 00 00    	jne    c0004565 <f_opendir+0xbf>
c00044d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044d7:	83 ec 0c             	sub    esp,0xc
c00044da:	89 03                	mov    DWORD PTR [ebx],eax
c00044dc:	68 00 02 00 00       	push   0x200
c00044e1:	e8 86 15 00 00       	call   c0005a6c <ff_memalloc>
c00044e6:	83 c4 10             	add    esp,0x10
c00044e9:	89 c6                	mov    esi,eax
c00044eb:	b8 11 00 00 00       	mov    eax,0x11
c00044f0:	85 f6                	test   esi,esi
c00044f2:	74 77                	je     c000456b <f_opendir+0xc5>
c00044f4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00044fc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00044ff:	89 d8                	mov    eax,ebx
c0004501:	e8 9c f3 ff ff       	call   c00038a2 <follow_path>
c0004506:	85 c0                	test   eax,eax
c0004508:	75 37                	jne    c0004541 <f_opendir+0x9b>
c000450a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000450e:	78 1c                	js     c000452c <f_opendir+0x86>
c0004510:	b8 05 00 00 00       	mov    eax,0x5
c0004515:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004519:	74 26                	je     c0004541 <f_opendir+0x9b>
c000451b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000451e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004522:	8a 00                	mov    al,BYTE PTR [eax]
c0004524:	e8 97 eb ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004529:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000452c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004530:	31 d2                	xor    edx,edx
c0004532:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004536:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000453a:	89 d8                	mov    eax,ebx
c000453c:	e8 d2 ec ff ff       	call   c0003213 <dir_sdi>
c0004541:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004545:	83 ec 0c             	sub    esp,0xc
c0004548:	56                   	push   esi
c0004549:	e8 36 15 00 00       	call   c0005a84 <ff_memfree>
c000454e:	83 c4 10             	add    esp,0x10
c0004551:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004555:	83 f8 04             	cmp    eax,0x4
c0004558:	74 06                	je     c0004560 <f_opendir+0xba>
c000455a:	85 c0                	test   eax,eax
c000455c:	74 0d                	je     c000456b <f_opendir+0xc5>
c000455e:	eb 05                	jmp    c0004565 <f_opendir+0xbf>
c0004560:	b8 05 00 00 00       	mov    eax,0x5
c0004565:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000456b:	83 c4 24             	add    esp,0x24
c000456e:	5b                   	pop    ebx
c000456f:	5e                   	pop    esi
c0004570:	c3                   	ret    

c0004571 <f_closedir>:
c0004571:	53                   	push   ebx
c0004572:	83 ec 18             	sub    esp,0x18
c0004575:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004579:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000457d:	89 d8                	mov    eax,ebx
c000457f:	e8 17 dc ff ff       	call   c000219b <validate>
c0004584:	85 c0                	test   eax,eax
c0004586:	75 06                	jne    c000458e <f_closedir+0x1d>
c0004588:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458e:	83 c4 18             	add    esp,0x18
c0004591:	5b                   	pop    ebx
c0004592:	c3                   	ret    

c0004593 <f_readdir>:
c0004593:	57                   	push   edi
c0004594:	56                   	push   esi
c0004595:	53                   	push   ebx
c0004596:	83 ec 20             	sub    esp,0x20
c0004599:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000459d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045a1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045a5:	89 d8                	mov    eax,ebx
c00045a7:	e8 ef db ff ff       	call   c000219b <validate>
c00045ac:	85 c0                	test   eax,eax
c00045ae:	75 6e                	jne    c000461e <f_readdir+0x8b>
c00045b0:	85 ff                	test   edi,edi
c00045b2:	75 0b                	jne    c00045bf <f_readdir+0x2c>
c00045b4:	31 d2                	xor    edx,edx
c00045b6:	89 d8                	mov    eax,ebx
c00045b8:	e8 56 ec ff ff       	call   c0003213 <dir_sdi>
c00045bd:	eb 5f                	jmp    c000461e <f_readdir+0x8b>
c00045bf:	83 ec 0c             	sub    esp,0xc
c00045c2:	68 00 02 00 00       	push   0x200
c00045c7:	e8 a0 14 00 00       	call   c0005a6c <ff_memalloc>
c00045cc:	83 c4 10             	add    esp,0x10
c00045cf:	89 c6                	mov    esi,eax
c00045d1:	b8 11 00 00 00       	mov    eax,0x11
c00045d6:	85 f6                	test   esi,esi
c00045d8:	74 44                	je     c000461e <f_readdir+0x8b>
c00045da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045de:	31 d2                	xor    edx,edx
c00045e0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00045e3:	89 d8                	mov    eax,ebx
c00045e5:	e8 1a f0 ff ff       	call   c0003604 <dir_read>
c00045ea:	a9 fb ff ff ff       	test   eax,0xfffffffb
c00045ef:	75 19                	jne    c000460a <f_readdir+0x77>
c00045f1:	89 fa                	mov    edx,edi
c00045f3:	89 d8                	mov    eax,ebx
c00045f5:	e8 e2 e8 ff ff       	call   c0002edc <get_fileinfo>
c00045fa:	31 d2                	xor    edx,edx
c00045fc:	89 d8                	mov    eax,ebx
c00045fe:	e8 9b ee ff ff       	call   c000349e <dir_next>
c0004603:	83 f8 04             	cmp    eax,0x4
c0004606:	75 02                	jne    c000460a <f_readdir+0x77>
c0004608:	31 c0                	xor    eax,eax
c000460a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000460e:	83 ec 0c             	sub    esp,0xc
c0004611:	56                   	push   esi
c0004612:	e8 6d 14 00 00       	call   c0005a84 <ff_memfree>
c0004617:	83 c4 10             	add    esp,0x10
c000461a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000461e:	83 c4 20             	add    esp,0x20
c0004621:	5b                   	pop    ebx
c0004622:	5e                   	pop    esi
c0004623:	5f                   	pop    edi
c0004624:	c3                   	ret    

c0004625 <f_stat>:
c0004625:	57                   	push   edi
c0004626:	31 c9                	xor    ecx,ecx
c0004628:	56                   	push   esi
c0004629:	53                   	push   ebx
c000462a:	83 ec 30             	sub    esp,0x30
c000462d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004631:	89 e2                	mov    edx,esp
c0004633:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004637:	e8 5c dd ff ff       	call   c0002398 <mount_volume>
c000463c:	89 c3                	mov    ebx,eax
c000463e:	85 c0                	test   eax,eax
c0004640:	75 59                	jne    c000469b <f_stat+0x76>
c0004642:	83 ec 0c             	sub    esp,0xc
c0004645:	bb 11 00 00 00       	mov    ebx,0x11
c000464a:	68 00 02 00 00       	push   0x200
c000464f:	e8 18 14 00 00       	call   c0005a6c <ff_memalloc>
c0004654:	83 c4 10             	add    esp,0x10
c0004657:	89 c6                	mov    esi,eax
c0004659:	85 c0                	test   eax,eax
c000465b:	74 3e                	je     c000469b <f_stat+0x76>
c000465d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004660:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004664:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004667:	89 e0                	mov    eax,esp
c0004669:	e8 34 f2 ff ff       	call   c00038a2 <follow_path>
c000466e:	89 c3                	mov    ebx,eax
c0004670:	85 c0                	test   eax,eax
c0004672:	75 1b                	jne    c000468f <f_stat+0x6a>
c0004674:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004679:	78 0f                	js     c000468a <f_stat+0x65>
c000467b:	85 ff                	test   edi,edi
c000467d:	74 10                	je     c000468f <f_stat+0x6a>
c000467f:	89 fa                	mov    edx,edi
c0004681:	89 e0                	mov    eax,esp
c0004683:	e8 54 e8 ff ff       	call   c0002edc <get_fileinfo>
c0004688:	eb 05                	jmp    c000468f <f_stat+0x6a>
c000468a:	bb 06 00 00 00       	mov    ebx,0x6
c000468f:	83 ec 0c             	sub    esp,0xc
c0004692:	56                   	push   esi
c0004693:	e8 ec 13 00 00       	call   c0005a84 <ff_memfree>
c0004698:	83 c4 10             	add    esp,0x10
c000469b:	83 c4 30             	add    esp,0x30
c000469e:	89 d8                	mov    eax,ebx
c00046a0:	5b                   	pop    ebx
c00046a1:	5e                   	pop    esi
c00046a2:	5f                   	pop    edi
c00046a3:	c3                   	ret    

c00046a4 <f_getfree>:
c00046a4:	55                   	push   ebp
c00046a5:	31 c9                	xor    ecx,ecx
c00046a7:	57                   	push   edi
c00046a8:	56                   	push   esi
c00046a9:	53                   	push   ebx
c00046aa:	83 ec 2c             	sub    esp,0x2c
c00046ad:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046b1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046b5:	e8 de dc ff ff       	call   c0002398 <mount_volume>
c00046ba:	89 c7                	mov    edi,eax
c00046bc:	85 c0                	test   eax,eax
c00046be:	0f 85 d8 00 00 00    	jne    c000479c <f_getfree+0xf8>
c00046c4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046c8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046cc:	89 30                	mov    DWORD PTR [eax],esi
c00046ce:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046d1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046d4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046d7:	39 d0                	cmp    eax,edx
c00046d9:	77 0b                	ja     c00046e6 <f_getfree+0x42>
c00046db:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046df:	89 01                	mov    DWORD PTR [ecx],eax
c00046e1:	e9 b6 00 00 00       	jmp    c000479c <f_getfree+0xf8>
c00046e6:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c00046e9:	75 29                	jne    c0004714 <f_getfree+0x70>
c00046eb:	bd 02 00 00 00       	mov    ebp,0x2
c00046f0:	31 db                	xor    ebx,ebx
c00046f2:	89 ea                	mov    edx,ebp
c00046f4:	89 f0                	mov    eax,esi
c00046f6:	e8 16 ea ff ff       	call   c0003111 <get_fat.isra.2>
c00046fb:	83 f8 ff             	cmp    eax,0xffffffff
c00046fe:	74 7b                	je     c000477b <f_getfree+0xd7>
c0004700:	83 f8 01             	cmp    eax,0x1
c0004703:	74 7d                	je     c0004782 <f_getfree+0xde>
c0004705:	83 d3 00             	adc    ebx,0x0
c0004708:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000470c:	45                   	inc    ebp
c000470d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004710:	77 e0                	ja     c00046f2 <f_getfree+0x4e>
c0004712:	eb 77                	jmp    c000478b <f_getfree+0xe7>
c0004714:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004717:	31 db                	xor    ebx,ebx
c0004719:	31 f6                	xor    esi,esi
c000471b:	85 f6                	test   esi,esi
c000471d:	75 18                	jne    c0004737 <f_getfree+0x93>
c000471f:	8d 42 01             	lea    eax,[edx+0x1]
c0004722:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004726:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472a:	e8 16 db ff ff       	call   c0002245 <move_window>
c000472f:	85 c0                	test   eax,eax
c0004731:	75 56                	jne    c0004789 <f_getfree+0xe5>
c0004733:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004737:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000473b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000473f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004743:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004746:	75 11                	jne    c0004759 <f_getfree+0xb5>
c0004748:	e8 d2 d5 ff ff       	call   c0001d1f <ld_word>
c000474d:	66 83 f8 01          	cmp    ax,0x1
c0004751:	83 d3 00             	adc    ebx,0x0
c0004754:	83 c6 02             	add    esi,0x2
c0004757:	eb 13                	jmp    c000476c <f_getfree+0xc8>
c0004759:	e8 ce d5 ff ff       	call   c0001d2c <ld_dword>
c000475e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004763:	83 f8 01             	cmp    eax,0x1
c0004766:	83 d3 00             	adc    ebx,0x0
c0004769:	83 c6 04             	add    esi,0x4
c000476c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004772:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004776:	4d                   	dec    ebp
c0004777:	75 a2                	jne    c000471b <f_getfree+0x77>
c0004779:	eb 10                	jmp    c000478b <f_getfree+0xe7>
c000477b:	bf 01 00 00 00       	mov    edi,0x1
c0004780:	eb 09                	jmp    c000478b <f_getfree+0xe7>
c0004782:	bf 02 00 00 00       	mov    edi,0x2
c0004787:	eb 02                	jmp    c000478b <f_getfree+0xe7>
c0004789:	89 c7                	mov    edi,eax
c000478b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000478f:	89 18                	mov    DWORD PTR [eax],ebx
c0004791:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004795:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004798:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c000479c:	83 c4 2c             	add    esp,0x2c
c000479f:	89 f8                	mov    eax,edi
c00047a1:	5b                   	pop    ebx
c00047a2:	5e                   	pop    esi
c00047a3:	5f                   	pop    edi
c00047a4:	5d                   	pop    ebp
c00047a5:	c3                   	ret    

c00047a6 <f_truncate>:
c00047a6:	56                   	push   esi
c00047a7:	53                   	push   ebx
c00047a8:	83 ec 14             	sub    esp,0x14
c00047ab:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047af:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047b3:	89 d8                	mov    eax,ebx
c00047b5:	e8 e1 d9 ff ff       	call   c000219b <validate>
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	0f 85 be 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047c4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047c8:	85 f6                	test   esi,esi
c00047ca:	0f 85 b2 00 00 00    	jne    c0004882 <f_truncate+0xdc>
c00047d0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047d4:	0f 84 a3 00 00 00    	je     c000487d <f_truncate+0xd7>
c00047da:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047dd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c00047e0:	0f 83 9c 00 00 00    	jae    c0004882 <f_truncate+0xdc>
c00047e6:	85 c0                	test   eax,eax
c00047e8:	75 15                	jne    c00047ff <f_truncate+0x59>
c00047ea:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00047ed:	31 c9                	xor    ecx,ecx
c00047ef:	89 d8                	mov    eax,ebx
c00047f1:	e8 1f ec ff ff       	call   c0003415 <remove_chain>
c00047f6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00047fd:	eb 35                	jmp    c0004834 <f_truncate+0x8e>
c00047ff:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004802:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004804:	e8 08 e9 ff ff       	call   c0003111 <get_fat.isra.2>
c0004809:	89 c2                	mov    edx,eax
c000480b:	b8 01 00 00 00       	mov    eax,0x1
c0004810:	83 fa ff             	cmp    edx,0xffffffff
c0004813:	74 1f                	je     c0004834 <f_truncate+0x8e>
c0004815:	b8 02 00 00 00       	mov    eax,0x2
c000481a:	83 fa 01             	cmp    edx,0x1
c000481d:	74 15                	je     c0004834 <f_truncate+0x8e>
c000481f:	31 c0                	xor    eax,eax
c0004821:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004825:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004828:	76 0a                	jbe    c0004834 <f_truncate+0x8e>
c000482a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000482d:	89 d8                	mov    eax,ebx
c000482f:	e8 e1 eb ff ff       	call   c0003415 <remove_chain>
c0004834:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004837:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000483a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000483d:	83 ca 40             	or     edx,0x40
c0004840:	85 c0                	test   eax,eax
c0004842:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004845:	75 2f                	jne    c0004876 <f_truncate+0xd0>
c0004847:	84 d2                	test   dl,dl
c0004849:	79 37                	jns    c0004882 <f_truncate+0xdc>
c000484b:	6a 01                	push   0x1
c000484d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004850:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004853:	50                   	push   eax
c0004854:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004858:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000485c:	50                   	push   eax
c000485d:	e8 88 d4 ff ff       	call   c0001cea <disk_write>
c0004862:	83 c4 10             	add    esp,0x10
c0004865:	85 c0                	test   eax,eax
c0004867:	75 08                	jne    c0004871 <f_truncate+0xcb>
c0004869:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000486d:	31 f6                	xor    esi,esi
c000486f:	eb 11                	jmp    c0004882 <f_truncate+0xdc>
c0004871:	b8 01 00 00 00       	mov    eax,0x1
c0004876:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004879:	89 c6                	mov    esi,eax
c000487b:	eb 05                	jmp    c0004882 <f_truncate+0xdc>
c000487d:	be 07 00 00 00       	mov    esi,0x7
c0004882:	89 f0                	mov    eax,esi
c0004884:	83 c4 14             	add    esp,0x14
c0004887:	5b                   	pop    ebx
c0004888:	5e                   	pop    esi
c0004889:	c3                   	ret    

c000488a <f_unlink>:
c000488a:	55                   	push   ebp
c000488b:	b9 02 00 00 00       	mov    ecx,0x2
c0004890:	57                   	push   edi
c0004891:	56                   	push   esi
c0004892:	53                   	push   ebx
c0004893:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004899:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000489d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048a4:	e8 ef da ff ff       	call   c0002398 <mount_volume>
c00048a9:	85 c0                	test   eax,eax
c00048ab:	0f 85 f0 00 00 00    	jne    c00049a1 <f_unlink+0x117>
c00048b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048b5:	83 ec 0c             	sub    esp,0xc
c00048b8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048bc:	68 00 02 00 00       	push   0x200
c00048c1:	e8 a6 11 00 00       	call   c0005a6c <ff_memalloc>
c00048c6:	83 c4 10             	add    esp,0x10
c00048c9:	89 c3                	mov    ebx,eax
c00048cb:	b8 11 00 00 00       	mov    eax,0x11
c00048d0:	85 db                	test   ebx,ebx
c00048d2:	0f 84 c9 00 00 00    	je     c00049a1 <f_unlink+0x117>
c00048d8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048dc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c00048e3:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00048e6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00048ea:	e8 b3 ef ff ff       	call   c00038a2 <follow_path>
c00048ef:	85 c0                	test   eax,eax
c00048f1:	0f 85 96 00 00 00    	jne    c000498d <f_unlink+0x103>
c00048f7:	b8 06 00 00 00       	mov    eax,0x6
c00048fc:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004901:	0f 88 86 00 00 00    	js     c000498d <f_unlink+0x103>
c0004907:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000490c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004912:	74 07                	je     c000491b <f_unlink+0x91>
c0004914:	b8 07 00 00 00       	mov    eax,0x7
c0004919:	eb 72                	jmp    c000498d <f_unlink+0x103>
c000491b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000491f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004923:	8a 07                	mov    al,BYTE PTR [edi]
c0004925:	e8 96 e7 ff ff       	call   c00030c0 <ld_clust.isra.0>
c000492a:	83 e5 10             	and    ebp,0x10
c000492d:	89 c6                	mov    esi,eax
c000492f:	75 0f                	jne    c0004940 <f_unlink+0xb6>
c0004931:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004935:	e8 e7 ed ff ff       	call   c0003721 <dir_remove>
c000493a:	85 c0                	test   eax,eax
c000493c:	74 2f                	je     c000496d <f_unlink+0xe3>
c000493e:	eb 4d                	jmp    c000498d <f_unlink+0x103>
c0004940:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004944:	31 d2                	xor    edx,edx
c0004946:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000494a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000494e:	e8 c0 e8 ff ff       	call   c0003213 <dir_sdi>
c0004953:	85 c0                	test   eax,eax
c0004955:	75 36                	jne    c000498d <f_unlink+0x103>
c0004957:	31 d2                	xor    edx,edx
c0004959:	8d 44 24 50          	lea    eax,[esp+0x50]
c000495d:	e8 a2 ec ff ff       	call   c0003604 <dir_read>
c0004962:	85 c0                	test   eax,eax
c0004964:	74 ae                	je     c0004914 <f_unlink+0x8a>
c0004966:	83 f8 04             	cmp    eax,0x4
c0004969:	75 22                	jne    c000498d <f_unlink+0x103>
c000496b:	eb c4                	jmp    c0004931 <f_unlink+0xa7>
c000496d:	85 f6                	test   esi,esi
c000496f:	75 0b                	jne    c000497c <f_unlink+0xf2>
c0004971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004975:	e8 0b e3 ff ff       	call   c0002c85 <sync_fs>
c000497a:	eb 11                	jmp    c000498d <f_unlink+0x103>
c000497c:	31 c9                	xor    ecx,ecx
c000497e:	89 f2                	mov    edx,esi
c0004980:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004984:	e8 8c ea ff ff       	call   c0003415 <remove_chain>
c0004989:	85 c0                	test   eax,eax
c000498b:	74 e4                	je     c0004971 <f_unlink+0xe7>
c000498d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004991:	83 ec 0c             	sub    esp,0xc
c0004994:	53                   	push   ebx
c0004995:	e8 ea 10 00 00       	call   c0005a84 <ff_memfree>
c000499a:	83 c4 10             	add    esp,0x10
c000499d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049a1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049a7:	5b                   	pop    ebx
c00049a8:	5e                   	pop    esi
c00049a9:	5f                   	pop    edi
c00049aa:	5d                   	pop    ebp
c00049ab:	c3                   	ret    

c00049ac <f_mkdir>:
c00049ac:	57                   	push   edi
c00049ad:	b9 02 00 00 00       	mov    ecx,0x2
c00049b2:	56                   	push   esi
c00049b3:	53                   	push   ebx
c00049b4:	83 ec 50             	sub    esp,0x50
c00049b7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049bb:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049bf:	e8 d4 d9 ff ff       	call   c0002398 <mount_volume>
c00049c4:	89 c3                	mov    ebx,eax
c00049c6:	85 c0                	test   eax,eax
c00049c8:	0f 85 70 01 00 00    	jne    c0004b3e <f_mkdir+0x192>
c00049ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049d2:	bb 11 00 00 00       	mov    ebx,0x11
c00049d7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049db:	83 ec 0c             	sub    esp,0xc
c00049de:	68 00 02 00 00       	push   0x200
c00049e3:	e8 84 10 00 00       	call   c0005a6c <ff_memalloc>
c00049e8:	83 c4 10             	add    esp,0x10
c00049eb:	89 c7                	mov    edi,eax
c00049ed:	85 c0                	test   eax,eax
c00049ef:	0f 84 49 01 00 00    	je     c0004b3e <f_mkdir+0x192>
c00049f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f9:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00049fd:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a00:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a04:	e8 99 ee ff ff       	call   c00038a2 <follow_path>
c0004a09:	89 c3                	mov    ebx,eax
c0004a0b:	85 c0                	test   eax,eax
c0004a0d:	74 3e                	je     c0004a4d <f_mkdir+0xa1>
c0004a0f:	83 f8 04             	cmp    eax,0x4
c0004a12:	75 3e                	jne    c0004a52 <f_mkdir+0xa6>
c0004a14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a18:	31 d2                	xor    edx,edx
c0004a1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a1e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a22:	e8 b4 e8 ff ff       	call   c00032db <create_chain>
c0004a27:	89 c6                	mov    esi,eax
c0004a29:	85 c0                	test   eax,eax
c0004a2b:	74 0c                	je     c0004a39 <f_mkdir+0x8d>
c0004a2d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a32:	83 f8 01             	cmp    eax,0x1
c0004a35:	74 07                	je     c0004a3e <f_mkdir+0x92>
c0004a37:	eb 2a                	jmp    c0004a63 <f_mkdir+0xb7>
c0004a39:	bb 07 00 00 00       	mov    ebx,0x7
c0004a3e:	31 c9                	xor    ecx,ecx
c0004a40:	89 f2                	mov    edx,esi
c0004a42:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a46:	e8 ca e9 ff ff       	call   c0003415 <remove_chain>
c0004a4b:	eb 05                	jmp    c0004a52 <f_mkdir+0xa6>
c0004a4d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a52:	83 ec 0c             	sub    esp,0xc
c0004a55:	57                   	push   edi
c0004a56:	e8 29 10 00 00       	call   c0005a84 <ff_memfree>
c0004a5b:	83 c4 10             	add    esp,0x10
c0004a5e:	e9 db 00 00 00       	jmp    c0004b3e <f_mkdir+0x192>
c0004a63:	bb 01 00 00 00       	mov    ebx,0x1
c0004a68:	83 f8 ff             	cmp    eax,0xffffffff
c0004a6b:	74 d1                	je     c0004a3e <f_mkdir+0x92>
c0004a6d:	89 f2                	mov    edx,esi
c0004a6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a73:	e8 73 dd ff ff       	call   c00027eb <dir_clear>
c0004a78:	89 c3                	mov    ebx,eax
c0004a7a:	85 c0                	test   eax,eax
c0004a7c:	75 c0                	jne    c0004a3e <f_mkdir+0x92>
c0004a7e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004a83:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a87:	ba 20 00 00 00       	mov    edx,0x20
c0004a8c:	83 c0 34             	add    eax,0x34
c0004a8f:	e8 cc d2 ff ff       	call   c0001d60 <mem_set>
c0004a94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a98:	ba 00 00 21 50       	mov    edx,0x50210000
c0004a9d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004aa1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004aa5:	83 c0 4a             	add    eax,0x4a
c0004aa8:	e8 9b d2 ff ff       	call   c0001d48 <st_dword>
c0004aad:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab1:	89 f1                	mov    ecx,esi
c0004ab3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ab6:	e8 2e e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004abb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004abf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ac4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ac7:	83 c0 54             	add    eax,0x54
c0004aca:	e8 7c d2 ff ff       	call   c0001d4b <mem_cpy>
c0004acf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004ad7:	8d 50 54             	lea    edx,[eax+0x54]
c0004ada:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004ade:	e8 06 e6 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004ae3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ae7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004aeb:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aef:	e8 42 ee ff ff       	call   c0003936 <dir_register>
c0004af4:	89 c3                	mov    ebx,eax
c0004af6:	85 c0                	test   eax,eax
c0004af8:	0f 85 40 ff ff ff    	jne    c0004a3e <f_mkdir+0x92>
c0004afe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b02:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b07:	83 c0 16             	add    eax,0x16
c0004b0a:	e8 39 d2 ff ff       	call   c0001d48 <st_dword>
c0004b0f:	89 f1                	mov    ecx,esi
c0004b11:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b19:	e8 cb e5 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b2a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b32:	e8 4e e1 ff ff       	call   c0002c85 <sync_fs>
c0004b37:	89 c3                	mov    ebx,eax
c0004b39:	e9 14 ff ff ff       	jmp    c0004a52 <f_mkdir+0xa6>
c0004b3e:	83 c4 50             	add    esp,0x50
c0004b41:	89 d8                	mov    eax,ebx
c0004b43:	5b                   	pop    ebx
c0004b44:	5e                   	pop    esi
c0004b45:	5f                   	pop    edi
c0004b46:	c3                   	ret    

c0004b47 <f_rename>:
c0004b47:	57                   	push   edi
c0004b48:	56                   	push   esi
c0004b49:	53                   	push   ebx
c0004b4a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b50:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b57:	e8 f2 d5 ff ff       	call   c000214e <get_ldnumber>
c0004b5c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b61:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b65:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b6c:	e8 27 d8 ff ff       	call   c0002398 <mount_volume>
c0004b71:	85 c0                	test   eax,eax
c0004b73:	0f 85 7a 01 00 00    	jne    c0004cf3 <f_rename+0x1ac>
c0004b79:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b7d:	83 ec 0c             	sub    esp,0xc
c0004b80:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004b84:	68 00 02 00 00       	push   0x200
c0004b89:	e8 de 0e 00 00       	call   c0005a6c <ff_memalloc>
c0004b8e:	83 c4 10             	add    esp,0x10
c0004b91:	89 c6                	mov    esi,eax
c0004b93:	b8 11 00 00 00       	mov    eax,0x11
c0004b98:	85 f6                	test   esi,esi
c0004b9a:	0f 84 53 01 00 00    	je     c0004cf3 <f_rename+0x1ac>
c0004ba0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ba4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bab:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bae:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bb2:	e8 eb ec ff ff       	call   c00038a2 <follow_path>
c0004bb7:	85 c0                	test   eax,eax
c0004bb9:	0f 85 20 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bbf:	b8 06 00 00 00       	mov    eax,0x6
c0004bc4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004bc9:	0f 85 10 01 00 00    	jne    c0004cdf <f_rename+0x198>
c0004bcf:	b9 20 00 00 00       	mov    ecx,0x20
c0004bd4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bd8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bdc:	e8 6a d1 ff ff       	call   c0001d4b <mem_cpy>
c0004be1:	b9 30 00 00 00       	mov    ecx,0x30
c0004be6:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004bea:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bee:	e8 58 d1 ff ff       	call   c0001d4b <mem_cpy>
c0004bf3:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004bfa:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004bfe:	e8 9f ec ff ff       	call   c00038a2 <follow_path>
c0004c03:	85 c0                	test   eax,eax
c0004c05:	75 20                	jne    c0004c27 <f_rename+0xe0>
c0004c07:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c0b:	b8 08 00 00 00       	mov    eax,0x8
c0004c10:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c14:	0f 85 c5 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c1a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c1e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c25:	eb 03                	jmp    c0004c2a <f_rename+0xe3>
c0004c27:	83 f8 04             	cmp    eax,0x4
c0004c2a:	0f 85 af 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c30:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c34:	e8 fd ec ff ff       	call   c0003936 <dir_register>
c0004c39:	85 c0                	test   eax,eax
c0004c3b:	0f 85 9e 00 00 00    	jne    c0004cdf <f_rename+0x198>
c0004c41:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c48:	b9 13 00 00 00       	mov    ecx,0x13
c0004c4d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c50:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c54:	e8 f2 d0 ff ff       	call   c0001d4b <mem_cpy>
c0004c59:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c5d:	a8 10                	test   al,0x10
c0004c5f:	75 03                	jne    c0004c64 <f_rename+0x11d>
c0004c61:	83 c8 20             	or     eax,0x20
c0004c64:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c67:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c6b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c6f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c73:	74 54                	je     c0004cc9 <f_rename+0x182>
c0004c75:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c79:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c7d:	74 4a                	je     c0004cc9 <f_rename+0x182>
c0004c7f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004c83:	89 da                	mov    edx,ebx
c0004c85:	8a 07                	mov    al,BYTE PTR [edi]
c0004c87:	e8 34 e4 ff ff       	call   c00030c0 <ld_clust.isra.0>
c0004c8c:	89 c2                	mov    edx,eax
c0004c8e:	89 f8                	mov    eax,edi
c0004c90:	e8 d0 d2 ff ff       	call   c0001f65 <clst2sect>
c0004c95:	89 c2                	mov    edx,eax
c0004c97:	b8 02 00 00 00       	mov    eax,0x2
c0004c9c:	85 d2                	test   edx,edx
c0004c9e:	74 3f                	je     c0004cdf <f_rename+0x198>
c0004ca0:	89 f8                	mov    eax,edi
c0004ca2:	e8 9e d5 ff ff       	call   c0002245 <move_window>
c0004ca7:	85 c0                	test   eax,eax
c0004ca9:	75 34                	jne    c0004cdf <f_rename+0x198>
c0004cab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004caf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cb3:	75 14                	jne    c0004cc9 <f_rename+0x182>
c0004cb5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cb8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cbc:	e8 28 e4 ff ff       	call   c00030e9 <st_clust.isra.1>
c0004cc1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cc5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004cc9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ccd:	e8 4f ea ff ff       	call   c0003721 <dir_remove>
c0004cd2:	85 c0                	test   eax,eax
c0004cd4:	75 09                	jne    c0004cdf <f_rename+0x198>
c0004cd6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cda:	e8 a6 df ff ff       	call   c0002c85 <sync_fs>
c0004cdf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ce3:	83 ec 0c             	sub    esp,0xc
c0004ce6:	56                   	push   esi
c0004ce7:	e8 98 0d 00 00       	call   c0005a84 <ff_memfree>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004cf3:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004cf9:	5b                   	pop    ebx
c0004cfa:	5e                   	pop    esi
c0004cfb:	5f                   	pop    edi
c0004cfc:	c3                   	ret    

c0004cfd <f_chmod>:
c0004cfd:	57                   	push   edi
c0004cfe:	b9 02 00 00 00       	mov    ecx,0x2
c0004d03:	56                   	push   esi
c0004d04:	53                   	push   ebx
c0004d05:	83 ec 50             	sub    esp,0x50
c0004d08:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d0c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d10:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d14:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d18:	e8 7b d6 ff ff       	call   c0002398 <mount_volume>
c0004d1d:	85 c0                	test   eax,eax
c0004d1f:	75 7e                	jne    c0004d9f <f_chmod+0xa2>
c0004d21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d25:	83 ec 0c             	sub    esp,0xc
c0004d28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d2c:	68 00 02 00 00       	push   0x200
c0004d31:	e8 36 0d 00 00       	call   c0005a6c <ff_memalloc>
c0004d36:	83 c4 10             	add    esp,0x10
c0004d39:	89 c6                	mov    esi,eax
c0004d3b:	b8 11 00 00 00       	mov    eax,0x11
c0004d40:	85 f6                	test   esi,esi
c0004d42:	74 5b                	je     c0004d9f <f_chmod+0xa2>
c0004d44:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d48:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d4c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d4f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d53:	e8 4a eb ff ff       	call   c00038a2 <follow_path>
c0004d58:	85 c0                	test   eax,eax
c0004d5a:	75 2f                	jne    c0004d8b <f_chmod+0x8e>
c0004d5c:	b8 06 00 00 00       	mov    eax,0x6
c0004d61:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d66:	75 23                	jne    c0004d8b <f_chmod+0x8e>
c0004d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d6c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d6f:	21 fb                	and    ebx,edi
c0004d71:	83 e3 27             	and    ebx,0x27
c0004d74:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d77:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d7e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004d82:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d86:	e8 fa de ff ff       	call   c0002c85 <sync_fs>
c0004d8b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d8f:	83 ec 0c             	sub    esp,0xc
c0004d92:	56                   	push   esi
c0004d93:	e8 ec 0c 00 00       	call   c0005a84 <ff_memfree>
c0004d98:	83 c4 10             	add    esp,0x10
c0004d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d9f:	83 c4 50             	add    esp,0x50
c0004da2:	5b                   	pop    ebx
c0004da3:	5e                   	pop    esi
c0004da4:	5f                   	pop    edi
c0004da5:	c3                   	ret    

c0004da6 <f_utime>:
c0004da6:	56                   	push   esi
c0004da7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dac:	53                   	push   ebx
c0004dad:	83 ec 54             	sub    esp,0x54
c0004db0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004db4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004db8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004dbc:	e8 d7 d5 ff ff       	call   c0002398 <mount_volume>
c0004dc1:	85 c0                	test   eax,eax
c0004dc3:	0f 85 85 00 00 00    	jne    c0004e4e <f_utime+0xa8>
c0004dc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004dcd:	83 ec 0c             	sub    esp,0xc
c0004dd0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004dd4:	68 00 02 00 00       	push   0x200
c0004dd9:	e8 8e 0c 00 00       	call   c0005a6c <ff_memalloc>
c0004dde:	83 c4 10             	add    esp,0x10
c0004de1:	89 c3                	mov    ebx,eax
c0004de3:	b8 11 00 00 00       	mov    eax,0x11
c0004de8:	85 db                	test   ebx,ebx
c0004dea:	74 62                	je     c0004e4e <f_utime+0xa8>
c0004dec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004df0:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004df4:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004df7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004dfb:	e8 a2 ea ff ff       	call   c00038a2 <follow_path>
c0004e00:	85 c0                	test   eax,eax
c0004e02:	75 36                	jne    c0004e3a <f_utime+0x94>
c0004e04:	b8 06 00 00 00       	mov    eax,0x6
c0004e09:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e0e:	75 2a                	jne    c0004e3a <f_utime+0x94>
c0004e10:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e14:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e18:	c1 e2 10             	shl    edx,0x10
c0004e1b:	09 c2                	or     edx,eax
c0004e1d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e21:	83 c0 16             	add    eax,0x16
c0004e24:	e8 1f cf ff ff       	call   c0001d48 <st_dword>
c0004e29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e2d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e31:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e35:	e8 4b de ff ff       	call   c0002c85 <sync_fs>
c0004e3a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e3e:	83 ec 0c             	sub    esp,0xc
c0004e41:	53                   	push   ebx
c0004e42:	e8 3d 0c 00 00       	call   c0005a84 <ff_memfree>
c0004e47:	83 c4 10             	add    esp,0x10
c0004e4a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e4e:	83 c4 54             	add    esp,0x54
c0004e51:	5b                   	pop    ebx
c0004e52:	5e                   	pop    esi
c0004e53:	c3                   	ret    

c0004e54 <f_getlabel>:
c0004e54:	55                   	push   ebp
c0004e55:	31 c9                	xor    ecx,ecx
c0004e57:	57                   	push   edi
c0004e58:	56                   	push   esi
c0004e59:	53                   	push   ebx
c0004e5a:	83 ec 5c             	sub    esp,0x5c
c0004e5d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e61:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e65:	e8 2e d5 ff ff       	call   c0002398 <mount_volume>
c0004e6a:	89 c6                	mov    esi,eax
c0004e6c:	85 c0                	test   eax,eax
c0004e6e:	0f 85 27 01 00 00    	jne    c0004f9b <f_getlabel+0x147>
c0004e74:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e79:	0f 84 d1 00 00 00    	je     c0004f50 <f_getlabel+0xfc>
c0004e7f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004e89:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004e91:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e95:	e8 79 e3 ff ff       	call   c0003213 <dir_sdi>
c0004e9a:	85 c0                	test   eax,eax
c0004e9c:	0f 85 a2 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004ea2:	ba 01 00 00 00       	mov    edx,0x1
c0004ea7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eab:	e8 54 e7 ff ff       	call   c0003604 <dir_read>
c0004eb0:	85 c0                	test   eax,eax
c0004eb2:	0f 85 8c 00 00 00    	jne    c0004f44 <f_getlabel+0xf0>
c0004eb8:	31 db                	xor    ebx,ebx
c0004eba:	31 c9                	xor    ecx,ecx
c0004ebc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ec0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ec3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ec8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004ecd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ed1:	e8 ca ce ff ff       	call   c0001da0 <dbc_1st>
c0004ed6:	85 c0                	test   eax,eax
c0004ed8:	74 16                	je     c0004ef0 <f_getlabel+0x9c>
c0004eda:	83 ff 0b             	cmp    edi,0xb
c0004edd:	74 11                	je     c0004ef0 <f_getlabel+0x9c>
c0004edf:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004ee4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ee8:	8d 79 02             	lea    edi,[ecx+0x2]
c0004eeb:	c1 e0 08             	shl    eax,0x8
c0004eee:	09 c2                	or     edx,eax
c0004ef0:	0f b7 d2             	movzx  edx,dx
c0004ef3:	50                   	push   eax
c0004ef4:	50                   	push   eax
c0004ef5:	68 b5 01 00 00       	push   0x1b5
c0004efa:	52                   	push   edx
c0004efb:	e8 3c 0c 00 00       	call   c0005b3c <ff_oem2uni>
c0004f00:	83 c4 10             	add    esp,0x10
c0004f03:	66 85 c0             	test   ax,ax
c0004f06:	74 25                	je     c0004f2d <f_getlabel+0xd9>
c0004f08:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f0c:	0f b7 c0             	movzx  eax,ax
c0004f0f:	01 da                	add    edx,ebx
c0004f11:	b9 04 00 00 00       	mov    ecx,0x4
c0004f16:	e8 51 cf ff ff       	call   c0001e6c <put_utf>
c0004f1b:	84 c0                	test   al,al
c0004f1d:	74 0e                	je     c0004f2d <f_getlabel+0xd9>
c0004f1f:	0f b6 c0             	movzx  eax,al
c0004f22:	01 c3                	add    ebx,eax
c0004f24:	83 ff 0b             	cmp    edi,0xb
c0004f27:	74 06                	je     c0004f2f <f_getlabel+0xdb>
c0004f29:	89 f9                	mov    ecx,edi
c0004f2b:	eb 8f                	jmp    c0004ebc <f_getlabel+0x68>
c0004f2d:	31 db                	xor    ebx,ebx
c0004f2f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f33:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f36:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f3a:	74 14                	je     c0004f50 <f_getlabel+0xfc>
c0004f3c:	4b                   	dec    ebx
c0004f3d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f40:	74 f1                	je     c0004f33 <f_getlabel+0xdf>
c0004f42:	eb 0c                	jmp    c0004f50 <f_getlabel+0xfc>
c0004f44:	83 f8 04             	cmp    eax,0x4
c0004f47:	75 50                	jne    c0004f99 <f_getlabel+0x145>
c0004f49:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f4d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f50:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f55:	74 44                	je     c0004f9b <f_getlabel+0x147>
c0004f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f5b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f5e:	e8 e2 d2 ff ff       	call   c0002245 <move_window>
c0004f63:	89 c6                	mov    esi,eax
c0004f65:	85 c0                	test   eax,eax
c0004f67:	75 32                	jne    c0004f9b <f_getlabel+0x147>
c0004f69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f6d:	b8 43 00 00 00       	mov    eax,0x43
c0004f72:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f74:	80 f9 03             	cmp    cl,0x3
c0004f77:	74 0f                	je     c0004f88 <f_getlabel+0x134>
c0004f79:	31 c0                	xor    eax,eax
c0004f7b:	80 f9 04             	cmp    cl,0x4
c0004f7e:	0f 94 c0             	sete   al
c0004f81:	48                   	dec    eax
c0004f82:	83 e0 c3             	and    eax,0xffffffc3
c0004f85:	83 c0 64             	add    eax,0x64
c0004f88:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004f8c:	e8 9b cd ff ff       	call   c0001d2c <ld_dword>
c0004f91:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004f95:	89 07                	mov    DWORD PTR [edi],eax
c0004f97:	eb 02                	jmp    c0004f9b <f_getlabel+0x147>
c0004f99:	89 c6                	mov    esi,eax
c0004f9b:	83 c4 5c             	add    esp,0x5c
c0004f9e:	89 f0                	mov    eax,esi
c0004fa0:	5b                   	pop    ebx
c0004fa1:	5e                   	pop    esi
c0004fa2:	5f                   	pop    edi
c0004fa3:	5d                   	pop    ebp
c0004fa4:	c3                   	ret    

c0004fa5 <f_setlabel>:
c0004fa5:	56                   	push   esi
c0004fa6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fab:	53                   	push   ebx
c0004fac:	83 ec 54             	sub    esp,0x54
c0004faf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fb3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fb7:	e8 dc d3 ff ff       	call   c0002398 <mount_volume>
c0004fbc:	89 c6                	mov    esi,eax
c0004fbe:	85 c0                	test   eax,eax
c0004fc0:	0f 85 67 01 00 00    	jne    c000512d <f_setlabel+0x188>
c0004fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004fcb:	ba 20 00 00 00       	mov    edx,0x20
c0004fd0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004fd4:	31 db                	xor    ebx,ebx
c0004fd6:	e8 85 cd ff ff       	call   c0001d60 <mem_set>
c0004fdb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fdf:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004fe2:	76 5b                	jbe    c000503f <f_setlabel+0x9a>
c0004fe4:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fe8:	e8 b9 cd ff ff       	call   c0001da6 <tchar2uni>
c0004fed:	3d ff ff 00 00       	cmp    eax,0xffff
c0004ff2:	76 0a                	jbe    c0004ffe <f_setlabel+0x59>
c0004ff4:	be 06 00 00 00       	mov    esi,0x6
c0004ff9:	e9 2f 01 00 00       	jmp    c000512d <f_setlabel+0x188>
c0004ffe:	83 ec 0c             	sub    esp,0xc
c0005001:	50                   	push   eax
c0005002:	e8 ad 0b 00 00       	call   c0005bb4 <ff_wtoupper>
c0005007:	5a                   	pop    edx
c0005008:	59                   	pop    ecx
c0005009:	68 b5 01 00 00       	push   0x1b5
c000500e:	50                   	push   eax
c000500f:	e8 88 0a 00 00       	call   c0005a9c <ff_uni2oem>
c0005014:	83 c4 10             	add    esp,0x10
c0005017:	89 c6                	mov    esi,eax
c0005019:	66 85 c0             	test   ax,ax
c000501c:	74 d6                	je     c0004ff4 <f_setlabel+0x4f>
c000501e:	0f b7 d0             	movzx  edx,ax
c0005021:	b8 10 cb 01 c0       	mov    eax,0xc001cb10
c0005026:	e8 63 cd ff ff       	call   c0001d8e <chk_chr>
c000502b:	85 c0                	test   eax,eax
c000502d:	75 c5                	jne    c0004ff4 <f_setlabel+0x4f>
c000502f:	66 81 fe ff 00       	cmp    si,0xff
c0005034:	0f 87 c9 00 00 00    	ja     c0005103 <f_setlabel+0x15e>
c000503a:	e9 e4 00 00 00       	jmp    c0005123 <f_setlabel+0x17e>
c000503f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005044:	74 ae                	je     c0004ff4 <f_setlabel+0x4f>
c0005046:	85 db                	test   ebx,ebx
c0005048:	74 0e                	je     c0005058 <f_setlabel+0xb3>
c000504a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000504d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005052:	75 04                	jne    c0005058 <f_setlabel+0xb3>
c0005054:	89 c3                	mov    ebx,eax
c0005056:	eb ee                	jmp    c0005046 <f_setlabel+0xa1>
c0005058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000505c:	31 d2                	xor    edx,edx
c000505e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005062:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000506a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000506e:	e8 a0 e1 ff ff       	call   c0003213 <dir_sdi>
c0005073:	89 c6                	mov    esi,eax
c0005075:	85 c0                	test   eax,eax
c0005077:	0f 85 b0 00 00 00    	jne    c000512d <f_setlabel+0x188>
c000507d:	ba 01 00 00 00       	mov    edx,0x1
c0005082:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005086:	e8 79 e5 ff ff       	call   c0003604 <dir_read>
c000508b:	85 c0                	test   eax,eax
c000508d:	75 18                	jne    c00050a7 <f_setlabel+0x102>
c000508f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005093:	85 db                	test   ebx,ebx
c0005095:	74 0b                	je     c00050a2 <f_setlabel+0xfd>
c0005097:	b9 0b 00 00 00       	mov    ecx,0xb
c000509c:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050a0:	eb 47                	jmp    c00050e9 <f_setlabel+0x144>
c00050a2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050a5:	eb 47                	jmp    c00050ee <f_setlabel+0x149>
c00050a7:	83 f8 04             	cmp    eax,0x4
c00050aa:	75 53                	jne    c00050ff <f_setlabel+0x15a>
c00050ac:	85 db                	test   ebx,ebx
c00050ae:	74 7d                	je     c000512d <f_setlabel+0x188>
c00050b0:	ba 01 00 00 00       	mov    edx,0x1
c00050b5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050b9:	e8 e5 e4 ff ff       	call   c00035a3 <dir_alloc>
c00050be:	89 c6                	mov    esi,eax
c00050c0:	85 c0                	test   eax,eax
c00050c2:	75 69                	jne    c000512d <f_setlabel+0x188>
c00050c4:	b9 20 00 00 00       	mov    ecx,0x20
c00050c9:	31 d2                	xor    edx,edx
c00050cb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050cf:	e8 8c cc ff ff       	call   c0001d60 <mem_set>
c00050d4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050dd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c00050e1:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050e9:	e8 5d cc ff ff       	call   c0001d4b <mem_cpy>
c00050ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050f2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00050f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00050fa:	e8 86 db ff ff       	call   c0002c85 <sync_fs>
c00050ff:	89 c6                	mov    esi,eax
c0005101:	eb 2a                	jmp    c000512d <f_setlabel+0x188>
c0005103:	83 fb 09             	cmp    ebx,0x9
c0005106:	0f 87 e8 fe ff ff    	ja     c0004ff4 <f_setlabel+0x4f>
c000510c:	89 f0                	mov    eax,esi
c000510e:	66 c1 e8 08          	shr    ax,0x8
c0005112:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005116:	43                   	inc    ebx
c0005117:	89 f0                	mov    eax,esi
c0005119:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000511d:	43                   	inc    ebx
c000511e:	e9 b8 fe ff ff       	jmp    c0004fdb <f_setlabel+0x36>
c0005123:	83 fb 0a             	cmp    ebx,0xa
c0005126:	76 ef                	jbe    c0005117 <f_setlabel+0x172>
c0005128:	e9 c7 fe ff ff       	jmp    c0004ff4 <f_setlabel+0x4f>
c000512d:	89 f0                	mov    eax,esi
c000512f:	83 c4 54             	add    esp,0x54
c0005132:	5b                   	pop    ebx
c0005133:	5e                   	pop    esi
c0005134:	c3                   	ret    

c0005135 <f_expand>:
c0005135:	55                   	push   ebp
c0005136:	57                   	push   edi
c0005137:	56                   	push   esi
c0005138:	53                   	push   ebx
c0005139:	83 ec 2c             	sub    esp,0x2c
c000513c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005140:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005144:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005148:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000514c:	89 d8                	mov    eax,ebx
c000514e:	e8 48 d0 ff ff       	call   c000219b <validate>
c0005153:	89 c6                	mov    esi,eax
c0005155:	85 c0                	test   eax,eax
c0005157:	0f 85 2e 01 00 00    	jne    c000528b <f_expand+0x156>
c000515d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005161:	85 f6                	test   esi,esi
c0005163:	0f 85 22 01 00 00    	jne    c000528b <f_expand+0x156>
c0005169:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000516e:	75 0a                	jne    c000517a <f_expand+0x45>
c0005170:	be 07 00 00 00       	mov    esi,0x7
c0005175:	e9 11 01 00 00       	jmp    c000528b <f_expand+0x156>
c000517a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000517e:	75 f0                	jne    c0005170 <f_expand+0x3b>
c0005180:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0005184:	74 ea                	je     c0005170 <f_expand+0x3b>
c0005186:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c000518a:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c000518e:	c1 e1 09             	shl    ecx,0x9
c0005191:	8d 41 ff             	lea    eax,[ecx-0x1]
c0005194:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005198:	0f 95 c0             	setne  al
c000519b:	31 d2                	xor    edx,edx
c000519d:	0f b6 c0             	movzx  eax,al
c00051a0:	89 c7                	mov    edi,eax
c00051a2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051a6:	f7 f1                	div    ecx
c00051a8:	01 f8                	add    eax,edi
c00051aa:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051ad:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051b1:	83 ff 01             	cmp    edi,0x1
c00051b4:	76 05                	jbe    c00051bb <f_expand+0x86>
c00051b6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051b9:	77 05                	ja     c00051c0 <f_expand+0x8b>
c00051bb:	bf 02 00 00 00       	mov    edi,0x2
c00051c0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051c3:	89 fd                	mov    ebp,edi
c00051c5:	31 c9                	xor    ecx,ecx
c00051c7:	89 ea                	mov    edx,ebp
c00051c9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051cf:	45                   	inc    ebp
c00051d0:	e8 3c df ff ff       	call   c0003111 <get_fat.isra.2>
c00051d5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051dd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c00051e0:	77 05                	ja     c00051e7 <f_expand+0xb2>
c00051e2:	bd 02 00 00 00       	mov    ebp,0x2
c00051e7:	83 f8 01             	cmp    eax,0x1
c00051ea:	74 20                	je     c000520c <f_expand+0xd7>
c00051ec:	83 f8 ff             	cmp    eax,0xffffffff
c00051ef:	74 22                	je     c0005213 <f_expand+0xde>
c00051f1:	85 c0                	test   eax,eax
c00051f3:	75 09                	jne    c00051fe <f_expand+0xc9>
c00051f5:	41                   	inc    ecx
c00051f6:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c00051fa:	75 07                	jne    c0005203 <f_expand+0xce>
c00051fc:	eb 1c                	jmp    c000521a <f_expand+0xe5>
c00051fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005201:	31 c9                	xor    ecx,ecx
c0005203:	39 fd                	cmp    ebp,edi
c0005205:	75 c0                	jne    c00051c7 <f_expand+0x92>
c0005207:	e9 64 ff ff ff       	jmp    c0005170 <f_expand+0x3b>
c000520c:	be 02 00 00 00       	mov    esi,0x2
c0005211:	eb 78                	jmp    c000528b <f_expand+0x156>
c0005213:	be 01 00 00 00       	mov    esi,0x1
c0005218:	eb 71                	jmp    c000528b <f_expand+0x156>
c000521a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000521f:	74 2b                	je     c000524c <f_expand+0x117>
c0005221:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005224:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005228:	85 ed                	test   ebp,ebp
c000522a:	74 24                	je     c0005250 <f_expand+0x11b>
c000522c:	83 c9 ff             	or     ecx,0xffffffff
c000522f:	83 fd 01             	cmp    ebp,0x1
c0005232:	74 03                	je     c0005237 <f_expand+0x102>
c0005234:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005237:	89 fa                	mov    edx,edi
c0005239:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000523d:	e8 59 d4 ff ff       	call   c000269b <put_fat>
c0005242:	85 c0                	test   eax,eax
c0005244:	75 43                	jne    c0005289 <f_expand+0x154>
c0005246:	89 f8                	mov    eax,edi
c0005248:	4d                   	dec    ebp
c0005249:	47                   	inc    edi
c000524a:	eb dc                	jmp    c0005228 <f_expand+0xf3>
c000524c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000524f:	48                   	dec    eax
c0005250:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005254:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005259:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000525c:	74 2d                	je     c000528b <f_expand+0x156>
c000525e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005262:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005265:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005268:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000526c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000526f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005272:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005275:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005278:	39 c8                	cmp    eax,ecx
c000527a:	77 0f                	ja     c000528b <f_expand+0x156>
c000527c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005280:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c0005284:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005287:	eb 02                	jmp    c000528b <f_expand+0x156>
c0005289:	89 c6                	mov    esi,eax
c000528b:	83 c4 2c             	add    esp,0x2c
c000528e:	89 f0                	mov    eax,esi
c0005290:	5b                   	pop    ebx
c0005291:	5e                   	pop    esi
c0005292:	5f                   	pop    edi
c0005293:	5d                   	pop    ebp
c0005294:	c3                   	ret    

c0005295 <f_mkfs>:
c0005295:	55                   	push   ebp
c0005296:	57                   	push   edi
c0005297:	bf 0b 00 00 00       	mov    edi,0xb
c000529c:	56                   	push   esi
c000529d:	53                   	push   ebx
c000529e:	83 ec 4c             	sub    esp,0x4c
c00052a1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052a5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052a9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052ad:	e8 9c ce ff ff       	call   c000214e <get_ldnumber>
c00052b2:	85 c0                	test   eax,eax
c00052b4:	0f 88 a6 07 00 00    	js     c0005a60 <f_mkfs+0x7cb>
c00052ba:	8b 14 85 c0 fa 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0540]
c00052c1:	85 d2                	test   edx,edx
c00052c3:	74 03                	je     c00052c8 <f_mkfs+0x33>
c00052c5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052c8:	85 db                	test   ebx,ebx
c00052ca:	75 05                	jne    c00052d1 <f_mkfs+0x3c>
c00052cc:	bb 00 cb 01 c0       	mov    ebx,0xc001cb00
c00052d1:	83 ec 0c             	sub    esp,0xc
c00052d4:	0f b6 c0             	movzx  eax,al
c00052d7:	bf 03 00 00 00       	mov    edi,0x3
c00052dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00052e0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00052e4:	e8 e8 c9 ff ff       	call   c0001cd1 <disk_initialize>
c00052e9:	83 c4 10             	add    esp,0x10
c00052ec:	a8 01                	test   al,0x1
c00052ee:	0f 85 6c 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c00052f4:	bf 0a 00 00 00       	mov    edi,0xa
c00052f9:	a8 04                	test   al,0x4
c00052fb:	0f 85 5f 07 00 00    	jne    c0005a60 <f_mkfs+0x7cb>
c0005301:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005304:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005308:	85 c0                	test   eax,eax
c000530a:	75 20                	jne    c000532c <f_mkfs+0x97>
c000530c:	51                   	push   ecx
c000530d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005311:	50                   	push   eax
c0005312:	6a 03                	push   0x3
c0005314:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005318:	e8 e3 c9 ff ff       	call   c0001d00 <disk_ioctl>
c000531d:	83 c4 10             	add    esp,0x10
c0005320:	85 c0                	test   eax,eax
c0005322:	74 08                	je     c000532c <f_mkfs+0x97>
c0005324:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000532c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005330:	8d 42 ff             	lea    eax,[edx-0x1]
c0005333:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005338:	77 04                	ja     c000533e <f_mkfs+0xa9>
c000533a:	85 c2                	test   edx,eax
c000533c:	74 08                	je     c0005346 <f_mkfs+0xb1>
c000533e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005346:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005349:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000534d:	48                   	dec    eax
c000534e:	3c 01                	cmp    al,0x1
c0005350:	76 05                	jbe    c0005357 <f_mkfs+0xc2>
c0005352:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005357:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000535a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000535e:	48                   	dec    eax
c000535f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005364:	77 07                	ja     c000536d <f_mkfs+0xd8>
c0005366:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000536b:	74 08                	je     c0005375 <f_mkfs+0xe0>
c000536d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005375:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005378:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000537e:	77 07                	ja     c0005387 <f_mkfs+0xf2>
c0005380:	8d 47 ff             	lea    eax,[edi-0x1]
c0005383:	85 f8                	test   eax,edi
c0005385:	74 02                	je     c0005389 <f_mkfs+0xf4>
c0005387:	31 ff                	xor    edi,edi
c0005389:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c0005391:	77 0a                	ja     c000539d <f_mkfs+0x108>
c0005393:	bf 11 00 00 00       	mov    edi,0x11
c0005398:	e9 c3 06 00 00       	jmp    c0005a60 <f_mkfs+0x7cb>
c000539d:	8a 1b                	mov    bl,BYTE PTR [ebx]
c000539f:	89 ee                	mov    esi,ebp
c00053a1:	85 ed                	test   ebp,ebp
c00053a3:	75 1b                	jne    c00053c0 <f_mkfs+0x12b>
c00053a5:	83 ec 0c             	sub    esp,0xc
c00053a8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053ac:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053b1:	50                   	push   eax
c00053b2:	e8 b5 06 00 00       	call   c0005a6c <ff_memalloc>
c00053b7:	83 c4 10             	add    esp,0x10
c00053ba:	89 c6                	mov    esi,eax
c00053bc:	85 c0                	test   eax,eax
c00053be:	74 d3                	je     c0005393 <f_mkfs+0xfe>
c00053c0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053c8:	52                   	push   edx
c00053c9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053cd:	50                   	push   eax
c00053ce:	6a 01                	push   0x1
c00053d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053d4:	e8 27 c9 ff ff       	call   c0001d00 <disk_ioctl>
c00053d9:	83 c4 10             	add    esp,0x10
c00053dc:	85 c0                	test   eax,eax
c00053de:	0f 85 25 06 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00053e4:	88 d8                	mov    al,bl
c00053e6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00053ee:	24 08                	and    al,0x8
c00053f0:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00053f4:	75 18                	jne    c000540e <f_mkfs+0x179>
c00053f6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00053fa:	83 f8 3f             	cmp    eax,0x3f
c00053fd:	76 0f                	jbe    c000540e <f_mkfs+0x179>
c00053ff:	83 e8 3f             	sub    eax,0x3f
c0005402:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000540a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000540e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005412:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005416:	83 f8 7f             	cmp    eax,0x7f
c0005419:	0f 86 52 02 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000541f:	b9 80 00 00 00       	mov    ecx,0x80
c0005424:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000542a:	77 05                	ja     c0005431 <f_mkfs+0x19c>
c000542c:	89 f9                	mov    ecx,edi
c000542e:	c1 e9 09             	shr    ecx,0x9
c0005431:	88 d8                	mov    al,bl
c0005433:	83 e0 01             	and    eax,0x1
c0005436:	80 e3 02             	and    bl,0x2
c0005439:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000543d:	74 0a                	je     c0005449 <f_mkfs+0x1b4>
c000543f:	84 c0                	test   al,al
c0005441:	0f 84 4c 01 00 00    	je     c0005593 <f_mkfs+0x2fe>
c0005447:	eb 38                	jmp    c0005481 <f_mkfs+0x1ec>
c0005449:	bf 13 00 00 00       	mov    edi,0x13
c000544e:	84 c0                	test   al,al
c0005450:	75 2f                	jne    c0005481 <f_mkfs+0x1ec>
c0005452:	e9 c9 05 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c0005457:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000545c:	0f 85 08 02 00 00    	jne    c000566a <f_mkfs+0x3d5>
c0005462:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005467:	0f 86 e1 01 00 00    	jbe    c000564e <f_mkfs+0x3b9>
c000546d:	85 c9                	test   ecx,ecx
c000546f:	0f 85 bd 05 00 00    	jne    c0005a32 <f_mkfs+0x79d>
c0005475:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005478:	83 f9 40             	cmp    ecx,0x40
c000547b:	0f 87 c1 05 00 00    	ja     c0005a42 <f_mkfs+0x7ad>
c0005481:	89 cf                	mov    edi,ecx
c0005483:	85 c9                	test   ecx,ecx
c0005485:	75 1d                	jne    c00054a4 <f_mkfs+0x20f>
c0005487:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000548b:	ba e0 ca 01 c0       	mov    edx,0xc001cae0
c0005490:	c1 eb 0c             	shr    ebx,0xc
c0005493:	bf 01 00 00 00       	mov    edi,0x1
c0005498:	0f b7 02             	movzx  eax,WORD PTR [edx]
c000549b:	66 85 c0             	test   ax,ax
c000549e:	0f 85 5f 01 00 00    	jne    c0005603 <f_mkfs+0x36e>
c00054a4:	31 d2                	xor    edx,edx
c00054a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054aa:	f7 f7                	div    edi
c00054ac:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054b1:	0f 86 5e 01 00 00    	jbe    c0005615 <f_mkfs+0x380>
c00054b7:	83 c0 02             	add    eax,0x2
c00054ba:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054bf:	01 c0                	add    eax,eax
c00054c1:	05 ff 01 00 00       	add    eax,0x1ff
c00054c6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ce:	c1 e8 09             	shr    eax,0x9
c00054d1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054d9:	c1 e0 05             	shl    eax,0x5
c00054dc:	c1 e8 09             	shr    eax,0x9
c00054df:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00054e3:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00054e8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00054ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00054f0:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c00054f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00054f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00054fc:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005501:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005505:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005509:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000550d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005511:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005515:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005519:	f7 d8                	neg    eax
c000551b:	21 c3                	and    ebx,eax
c000551d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005521:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005526:	0f 85 fc 00 00 00    	jne    c0005628 <f_mkfs+0x393>
c000552c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005530:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005534:	89 f8                	mov    eax,edi
c0005536:	c1 e0 04             	shl    eax,0x4
c0005539:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000553d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005541:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005545:	0f 82 26 01 00 00    	jb     c0005671 <f_mkfs+0x3dc>
c000554b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000554f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005553:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005557:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000555c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005560:	29 d0                	sub    eax,edx
c0005562:	31 d2                	xor    edx,edx
c0005564:	f7 f7                	div    edi
c0005566:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000556b:	89 c3                	mov    ebx,eax
c000556d:	0f 85 e4 fe ff ff    	jne    c0005457 <f_mkfs+0x1c2>
c0005573:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005578:	0f 87 02 01 00 00    	ja     c0005680 <f_mkfs+0x3eb>
c000557e:	85 c9                	test   ecx,ecx
c0005580:	0f 85 eb 00 00 00    	jne    c0005671 <f_mkfs+0x3dc>
c0005586:	83 ff 01             	cmp    edi,0x1
c0005589:	0f 86 e2 00 00 00    	jbe    c0005671 <f_mkfs+0x3dc>
c000558f:	89 f9                	mov    ecx,edi
c0005591:	d1 e9                	shr    ecx,1
c0005593:	89 cb                	mov    ebx,ecx
c0005595:	85 c9                	test   ecx,ecx
c0005597:	75 26                	jne    c00055bf <f_mkfs+0x32a>
c0005599:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000559d:	ba f0 ca 01 c0       	mov    edx,0xc001caf0
c00055a2:	c1 eb 11             	shr    ebx,0x11
c00055a5:	b9 01 00 00 00       	mov    ecx,0x1
c00055aa:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055ad:	66 85 c0             	test   ax,ax
c00055b0:	74 0b                	je     c00055bd <f_mkfs+0x328>
c00055b2:	83 c2 02             	add    edx,0x2
c00055b5:	39 d8                	cmp    eax,ebx
c00055b7:	77 04                	ja     c00055bd <f_mkfs+0x328>
c00055b9:	01 c9                	add    ecx,ecx
c00055bb:	eb ed                	jmp    c00055aa <f_mkfs+0x315>
c00055bd:	31 db                	xor    ebx,ebx
c00055bf:	31 d2                	xor    edx,edx
c00055c1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055c5:	f7 f1                	div    ecx
c00055c7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ce:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055d3:	c1 ea 09             	shr    edx,0x9
c00055d6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055db:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055df:	0f 87 8c 00 00 00    	ja     c0005671 <f_mkfs+0x3dc>
c00055e5:	89 cf                	mov    edi,ecx
c00055e7:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00055ef:	89 d9                	mov    ecx,ebx
c00055f1:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c00055f9:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c00055fe:	e9 e0 fe ff ff       	jmp    c00054e3 <f_mkfs+0x24e>
c0005603:	83 c2 02             	add    edx,0x2
c0005606:	39 d8                	cmp    eax,ebx
c0005608:	0f 87 96 fe ff ff    	ja     c00054a4 <f_mkfs+0x20f>
c000560e:	01 ff                	add    edi,edi
c0005610:	e9 83 fe ff ff       	jmp    c0005498 <f_mkfs+0x203>
c0005615:	8d 04 40             	lea    eax,[eax+eax*2]
c0005618:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000561d:	40                   	inc    eax
c000561e:	d1 e8                	shr    eax,1
c0005620:	83 c0 03             	add    eax,0x3
c0005623:	e9 99 fe ff ff       	jmp    c00054c1 <f_mkfs+0x22c>
c0005628:	31 d2                	xor    edx,edx
c000562a:	89 d8                	mov    eax,ebx
c000562c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005630:	85 d2                	test   edx,edx
c0005632:	74 09                	je     c000563d <f_mkfs+0x3a8>
c0005634:	4b                   	dec    ebx
c0005635:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005639:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000563d:	89 d8                	mov    eax,ebx
c000563f:	31 d2                	xor    edx,edx
c0005641:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005645:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005649:	e9 e6 fe ff ff       	jmp    c0005534 <f_mkfs+0x29f>
c000564e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005653:	77 2b                	ja     c0005680 <f_mkfs+0x3eb>
c0005655:	85 c9                	test   ecx,ecx
c0005657:	75 18                	jne    c0005671 <f_mkfs+0x3dc>
c0005659:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000565c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005662:	0f 86 19 fe ff ff    	jbe    c0005481 <f_mkfs+0x1ec>
c0005668:	eb 07                	jmp    c0005671 <f_mkfs+0x3dc>
c000566a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000566f:	76 0a                	jbe    c000567b <f_mkfs+0x3e6>
c0005671:	bf 0e 00 00 00       	mov    edi,0xe
c0005676:	e9 a5 03 00 00       	jmp    c0005a20 <f_mkfs+0x78b>
c000567b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c0005680:	31 d2                	xor    edx,edx
c0005682:	b9 00 02 00 00       	mov    ecx,0x200
c0005687:	89 f0                	mov    eax,esi
c0005689:	e8 d2 c6 ff ff       	call   c0001d60 <mem_set>
c000568e:	b9 0b 00 00 00       	mov    ecx,0xb
c0005693:	ba 92 ca 01 c0       	mov    edx,0xc001ca92
c0005698:	89 f0                	mov    eax,esi
c000569a:	e8 ac c6 ff ff       	call   c0001d4b <mem_cpy>
c000569f:	8d 46 0b             	lea    eax,[esi+0xb]
c00056a2:	ba 00 02 00 00       	mov    edx,0x200
c00056a7:	e8 98 c6 ff ff       	call   c0001d44 <st_word>
c00056ac:	89 f8                	mov    eax,edi
c00056ae:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056b3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056b6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056b9:	e8 86 c6 ff ff       	call   c0001d44 <st_word>
c00056be:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056c2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056c7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ca:	75 08                	jne    c00056d4 <f_mkfs+0x43f>
c00056cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056d8:	8d 46 11             	lea    eax,[esi+0x11]
c00056db:	e8 64 c6 ff ff       	call   c0001d44 <st_word>
c00056e0:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056e4:	81 fa ff ff 00 00    	cmp    edx,0xffff
c00056ea:	77 0a                	ja     c00056f6 <f_mkfs+0x461>
c00056ec:	8d 46 13             	lea    eax,[esi+0x13]
c00056ef:	e8 50 c6 ff ff       	call   c0001d44 <st_word>
c00056f4:	eb 08                	jmp    c00056fe <f_mkfs+0x469>
c00056f6:	8d 46 20             	lea    eax,[esi+0x20]
c00056f9:	e8 4a c6 ff ff       	call   c0001d48 <st_dword>
c00056fe:	8d 46 18             	lea    eax,[esi+0x18]
c0005701:	ba 3f 00 00 00       	mov    edx,0x3f
c0005706:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000570a:	e8 35 c6 ff ff       	call   c0001d44 <st_word>
c000570f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005712:	ba ff 00 00 00       	mov    edx,0xff
c0005717:	e8 28 c6 ff ff       	call   c0001d44 <st_word>
c000571c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000571f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005723:	e8 20 c6 ff ff       	call   c0001d48 <st_dword>
c0005728:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000572d:	75 57                	jne    c0005786 <f_mkfs+0x4f1>
c000572f:	8d 46 43             	lea    eax,[esi+0x43]
c0005732:	ba 00 00 21 50       	mov    edx,0x50210000
c0005737:	e8 0c c6 ff ff       	call   c0001d48 <st_dword>
c000573c:	8d 46 24             	lea    eax,[esi+0x24]
c000573f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005743:	e8 00 c6 ff ff       	call   c0001d48 <st_dword>
c0005748:	8d 46 2c             	lea    eax,[esi+0x2c]
c000574b:	ba 02 00 00 00       	mov    edx,0x2
c0005750:	e8 f3 c5 ff ff       	call   c0001d48 <st_dword>
c0005755:	8d 46 30             	lea    eax,[esi+0x30]
c0005758:	ba 01 00 00 00       	mov    edx,0x1
c000575d:	e8 e2 c5 ff ff       	call   c0001d44 <st_word>
c0005762:	8d 46 32             	lea    eax,[esi+0x32]
c0005765:	ba 06 00 00 00       	mov    edx,0x6
c000576a:	e8 d5 c5 ff ff       	call   c0001d44 <st_word>
c000576f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005773:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005777:	8d 46 47             	lea    eax,[esi+0x47]
c000577a:	b9 13 00 00 00       	mov    ecx,0x13
c000577f:	ba 9e ca 01 c0       	mov    edx,0xc001ca9e
c0005784:	eb 2f                	jmp    c00057b5 <f_mkfs+0x520>
c0005786:	8d 46 27             	lea    eax,[esi+0x27]
c0005789:	ba 00 00 21 50       	mov    edx,0x50210000
c000578e:	e8 b5 c5 ff ff       	call   c0001d48 <st_dword>
c0005793:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c0005798:	8d 46 16             	lea    eax,[esi+0x16]
c000579b:	e8 a4 c5 ff ff       	call   c0001d44 <st_word>
c00057a0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057a4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057a8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057ab:	b9 13 00 00 00       	mov    ecx,0x13
c00057b0:	ba b2 ca 01 c0       	mov    edx,0xc001cab2
c00057b5:	e8 91 c5 ff ff       	call   c0001d4b <mem_cpy>
c00057ba:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057c0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057c9:	e8 76 c5 ff ff       	call   c0001d44 <st_word>
c00057ce:	6a 01                	push   0x1
c00057d0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057d4:	56                   	push   esi
c00057d5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057d9:	e8 0c c5 ff ff       	call   c0001cea <disk_write>
c00057de:	83 c4 10             	add    esp,0x10
c00057e1:	85 c0                	test   eax,eax
c00057e3:	0f 85 20 02 00 00    	jne    c0005a09 <f_mkfs+0x774>
c00057e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00057ee:	0f 85 98 00 00 00    	jne    c000588c <f_mkfs+0x5f7>
c00057f4:	6a 01                	push   0x1
c00057f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00057fa:	83 c0 06             	add    eax,0x6
c00057fd:	50                   	push   eax
c00057fe:	56                   	push   esi
c00057ff:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005803:	e8 e2 c4 ff ff       	call   c0001cea <disk_write>
c0005808:	b9 00 02 00 00       	mov    ecx,0x200
c000580d:	31 d2                	xor    edx,edx
c000580f:	89 f0                	mov    eax,esi
c0005811:	e8 4a c5 ff ff       	call   c0001d60 <mem_set>
c0005816:	ba 52 52 61 41       	mov    edx,0x41615252
c000581b:	89 f0                	mov    eax,esi
c000581d:	e8 26 c5 ff ff       	call   c0001d48 <st_dword>
c0005822:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005828:	ba 72 72 41 61       	mov    edx,0x61417272
c000582d:	e8 16 c5 ff ff       	call   c0001d48 <st_dword>
c0005832:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005835:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000583b:	e8 08 c5 ff ff       	call   c0001d48 <st_dword>
c0005840:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005846:	ba 02 00 00 00       	mov    edx,0x2
c000584b:	e8 f8 c4 ff ff       	call   c0001d48 <st_dword>
c0005850:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005855:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000585b:	e8 e4 c4 ff ff       	call   c0001d44 <st_word>
c0005860:	6a 01                	push   0x1
c0005862:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005866:	83 c0 07             	add    eax,0x7
c0005869:	50                   	push   eax
c000586a:	56                   	push   esi
c000586b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000586f:	e8 76 c4 ff ff       	call   c0001cea <disk_write>
c0005874:	83 c4 20             	add    esp,0x20
c0005877:	6a 01                	push   0x1
c0005879:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000587d:	40                   	inc    eax
c000587e:	50                   	push   eax
c000587f:	56                   	push   esi
c0005880:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005884:	e8 61 c4 ff ff       	call   c0001cea <disk_write>
c0005889:	83 c4 10             	add    esp,0x10
c000588c:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0005890:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0005894:	c1 e8 09             	shr    eax,0x9
c0005897:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000589d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058a1:	31 d2                	xor    edx,edx
c00058a3:	31 db                	xor    ebx,ebx
c00058a5:	89 f0                	mov    eax,esi
c00058a7:	e8 b4 c4 ff ff       	call   c0001d60 <mem_set>
c00058ac:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058b1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058b9:	0f 94 c3             	sete   bl
c00058bc:	4b                   	dec    ebx
c00058bd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058c3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058c9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ce:	75 21                	jne    c00058f1 <f_mkfs+0x65c>
c00058d0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058d5:	89 f0                	mov    eax,esi
c00058d7:	e8 6c c4 ff ff       	call   c0001d48 <st_dword>
c00058dc:	8d 46 04             	lea    eax,[esi+0x4]
c00058df:	83 ca ff             	or     edx,0xffffffff
c00058e2:	e8 61 c4 ff ff       	call   c0001d48 <st_dword>
c00058e7:	8d 46 08             	lea    eax,[esi+0x8]
c00058ea:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00058ef:	eb 04                	jmp    c00058f5 <f_mkfs+0x660>
c00058f1:	89 da                	mov    edx,ebx
c00058f3:	89 f0                	mov    eax,esi
c00058f5:	e8 4e c4 ff ff       	call   c0001d48 <st_dword>
c00058fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00058fe:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005902:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000590a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000590e:	76 08                	jbe    c0005918 <f_mkfs+0x683>
c0005910:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005914:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005918:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000591c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005920:	56                   	push   esi
c0005921:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005925:	e8 c0 c3 ff ff       	call   c0001cea <disk_write>
c000592a:	83 c4 10             	add    esp,0x10
c000592d:	85 c0                	test   eax,eax
c000592f:	0f 85 d4 00 00 00    	jne    c0005a09 <f_mkfs+0x774>
c0005935:	b9 00 02 00 00       	mov    ecx,0x200
c000593a:	31 d2                	xor    edx,edx
c000593c:	89 f0                	mov    eax,esi
c000593e:	e8 1d c4 ff ff       	call   c0001d60 <mem_set>
c0005943:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005947:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000594b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000594f:	75 b1                	jne    c0005902 <f_mkfs+0x66d>
c0005951:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005955:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000595d:	40                   	inc    eax
c000595e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005962:	0f 87 61 ff ff ff    	ja     c00058c9 <f_mkfs+0x634>
c0005968:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000596d:	74 04                	je     c0005973 <f_mkfs+0x6de>
c000596f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005973:	89 fb                	mov    ebx,edi
c0005975:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005979:	76 04                	jbe    c000597f <f_mkfs+0x6ea>
c000597b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000597f:	53                   	push   ebx
c0005980:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005984:	56                   	push   esi
c0005985:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005989:	e8 5c c3 ff ff       	call   c0001cea <disk_write>
c000598e:	83 c4 10             	add    esp,0x10
c0005991:	85 c0                	test   eax,eax
c0005993:	75 74                	jne    c0005a09 <f_mkfs+0x774>
c0005995:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005999:	29 df                	sub    edi,ebx
c000599b:	75 d6                	jne    c0005973 <f_mkfs+0x6de>
c000599d:	b1 0c                	mov    cl,0xc
c000599f:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059a4:	74 18                	je     c00059be <f_mkfs+0x729>
c00059a6:	b1 06                	mov    cl,0x6
c00059a8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059b0:	77 0c                	ja     c00059be <f_mkfs+0x729>
c00059b2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059b7:	0f 94 c1             	sete   cl
c00059ba:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059be:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059c3:	75 2d                	jne    c00059f2 <f_mkfs+0x75d>
c00059c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059c9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059d1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059d5:	0f b6 c9             	movzx  ecx,cl
c00059d8:	83 ec 0c             	sub    esp,0xc
c00059db:	56                   	push   esi
c00059dc:	8d 54 24 48          	lea    edx,[esp+0x48]
c00059e0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00059e4:	e8 4c d3 ff ff       	call   c0002d35 <create_partition>
c00059e9:	83 c4 10             	add    esp,0x10
c00059ec:	89 c7                	mov    edi,eax
c00059ee:	85 c0                	test   eax,eax
c00059f0:	75 2e                	jne    c0005a20 <f_mkfs+0x78b>
c00059f2:	31 ff                	xor    edi,edi
c00059f4:	50                   	push   eax
c00059f5:	6a 00                	push   0x0
c00059f7:	6a 00                	push   0x0
c00059f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059fd:	e8 fe c2 ff ff       	call   c0001d00 <disk_ioctl>
c0005a02:	83 c4 10             	add    esp,0x10
c0005a05:	85 c0                	test   eax,eax
c0005a07:	74 17                	je     c0005a20 <f_mkfs+0x78b>
c0005a09:	85 ed                	test   ebp,ebp
c0005a0b:	75 0c                	jne    c0005a19 <f_mkfs+0x784>
c0005a0d:	83 ec 0c             	sub    esp,0xc
c0005a10:	56                   	push   esi
c0005a11:	e8 6e 00 00 00       	call   c0005a84 <ff_memfree>
c0005a16:	83 c4 10             	add    esp,0x10
c0005a19:	bf 01 00 00 00       	mov    edi,0x1
c0005a1e:	eb 40                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a20:	85 ed                	test   ebp,ebp
c0005a22:	75 3c                	jne    c0005a60 <f_mkfs+0x7cb>
c0005a24:	83 ec 0c             	sub    esp,0xc
c0005a27:	56                   	push   esi
c0005a28:	e8 57 00 00 00       	call   c0005a84 <ff_memfree>
c0005a2d:	83 c4 10             	add    esp,0x10
c0005a30:	eb 2e                	jmp    c0005a60 <f_mkfs+0x7cb>
c0005a32:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a37:	0f 85 56 fb ff ff    	jne    c0005593 <f_mkfs+0x2fe>
c0005a3d:	e9 2f fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a42:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a47:	0f 85 4c fb ff ff    	jne    c0005599 <f_mkfs+0x304>
c0005a4d:	89 cf                	mov    edi,ecx
c0005a4f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a55:	0f 86 49 fa ff ff    	jbe    c00054a4 <f_mkfs+0x20f>
c0005a5b:	e9 11 fc ff ff       	jmp    c0005671 <f_mkfs+0x3dc>
c0005a60:	83 c4 4c             	add    esp,0x4c
c0005a63:	89 f8                	mov    eax,edi
c0005a65:	5b                   	pop    ebx
c0005a66:	5e                   	pop    esi
c0005a67:	5f                   	pop    edi
c0005a68:	5d                   	pop    ebp
c0005a69:	c3                   	ret    
c0005a6a:	66 90                	xchg   ax,ax

c0005a6c <ff_memalloc>:
c0005a6c:	83 ec 0c             	sub    esp,0xc
c0005a6f:	83 ec 0c             	sub    esp,0xc
c0005a72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a76:	e8 3e 1d 00 00       	call   c00077b9 <malloc>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	83 c4 0c             	add    esp,0xc
c0005a81:	c3                   	ret    
c0005a82:	66 90                	xchg   ax,ax

c0005a84 <ff_memfree>:
c0005a84:	83 ec 0c             	sub    esp,0xc
c0005a87:	83 ec 0c             	sub    esp,0xc
c0005a8a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a8e:	e8 36 1d 00 00       	call   c00077c9 <free>
c0005a93:	83 c4 10             	add    esp,0x10
c0005a96:	90                   	nop
c0005a97:	83 c4 0c             	add    esp,0xc
c0005a9a:	c3                   	ret    
c0005a9b:	90                   	nop

c0005a9c <ff_uni2oem>:
c0005a9c:	83 ec 14             	sub    esp,0x14
c0005a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005aa3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005aa7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005aae:	c7 44 24 0c e0 ce 01 c0 	mov    DWORD PTR [esp+0xc],0xc001cee0
c0005ab6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005abb:	77 0b                	ja     c0005ac8 <ff_uni2oem+0x2c>
c0005abd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ac1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ac6:	eb 68                	jmp    c0005b30 <ff_uni2oem+0x94>
c0005ac8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005ad0:	77 5e                	ja     c0005b30 <ff_uni2oem+0x94>
c0005ad2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005ad8:	75 56                	jne    c0005b30 <ff_uni2oem+0x94>
c0005ada:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ae1:	eb 0d                	jmp    c0005af0 <ff_uni2oem+0x54>
c0005ae3:	90                   	nop
c0005ae4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ae9:	40                   	inc    eax
c0005aea:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005aef:	90                   	nop
c0005af0:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005af6:	77 24                	ja     c0005b1c <ff_uni2oem+0x80>
c0005af8:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005afd:	25 ff ff 00 00       	and    eax,0xffff
c0005b02:	01 c0                	add    eax,eax
c0005b04:	89 c2                	mov    edx,eax
c0005b06:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b0a:	01 d0                	add    eax,edx
c0005b0c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b0f:	25 ff ff 00 00       	and    eax,0xffff
c0005b14:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b18:	75 ca                	jne    c0005ae4 <ff_uni2oem+0x48>
c0005b1a:	66 90                	xchg   ax,ax
c0005b1c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b21:	83 e8 80             	sub    eax,0xffffff80
c0005b24:	25 ff 00 00 00       	and    eax,0xff
c0005b29:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b2e:	66 90                	xchg   ax,ax
c0005b30:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b35:	83 c4 14             	add    esp,0x14
c0005b38:	c3                   	ret    
c0005b39:	8d 76 00             	lea    esi,[esi+0x0]

c0005b3c <ff_oem2uni>:
c0005b3c:	83 ec 18             	sub    esp,0x18
c0005b3f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b47:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b4c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b50:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b57:	c7 44 24 10 e0 ce 01 c0 	mov    DWORD PTR [esp+0x10],0xc001cee0
c0005b5f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b65:	77 0d                	ja     c0005b74 <ff_oem2uni+0x38>
c0005b67:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b6b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b70:	eb 36                	jmp    c0005ba8 <ff_oem2uni+0x6c>
c0005b72:	66 90                	xchg   ax,ax
c0005b74:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b7a:	75 2c                	jne    c0005ba8 <ff_oem2uni+0x6c>
c0005b7c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005b83:	77 23                	ja     c0005ba8 <ff_oem2uni+0x6c>
c0005b85:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b89:	25 ff ff 00 00       	and    eax,0xffff
c0005b8e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005b93:	01 c0                	add    eax,eax
c0005b95:	89 c2                	mov    edx,eax
c0005b97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005b9b:	01 d0                	add    eax,edx
c0005b9d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ba0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ba8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bad:	83 c4 18             	add    esp,0x18
c0005bb0:	c3                   	ret    
c0005bb1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bb4 <ff_wtoupper>:
c0005bb4:	83 ec 10             	sub    esp,0x10
c0005bb7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bbf:	0f 87 77 01 00 00    	ja     c0005d3c <ff_wtoupper+0x188>
c0005bc5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005bc9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bce:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bd5:	77 09                	ja     c0005be0 <ff_wtoupper+0x2c>
c0005bd7:	b8 e0 cc 01 c0       	mov    eax,0xc001cce0
c0005bdc:	eb 0a                	jmp    c0005be8 <ff_wtoupper+0x34>
c0005bde:	66 90                	xchg   ax,ax
c0005be0:	b8 20 cc 01 c0       	mov    eax,0xc001cc20
c0005be5:	8d 76 00             	lea    esi,[esi+0x0]
c0005be8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005bec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005bf0:	8d 50 02             	lea    edx,[eax+0x2]
c0005bf3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005bf7:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bfa:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005bff:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c05:	0f 84 21 01 00 00    	je     c0005d2c <ff_wtoupper+0x178>
c0005c0b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c10:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c15:	0f 82 11 01 00 00    	jb     c0005d2c <ff_wtoupper+0x178>
c0005c1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c1f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c22:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c26:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c29:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c2e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c33:	66 c1 e8 08          	shr    ax,0x8
c0005c37:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c3c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c43:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c48:	31 d2                	xor    edx,edx
c0005c4a:	66 89 c2             	mov    dx,ax
c0005c4d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c51:	31 c9                	xor    ecx,ecx
c0005c53:	66 89 c1             	mov    cx,ax
c0005c56:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c5b:	25 ff ff 00 00       	and    eax,0xffff
c0005c60:	01 c8                	add    eax,ecx
c0005c62:	39 c2                	cmp    edx,eax
c0005c64:	0f 8d 9a 00 00 00    	jge    c0005d04 <ff_wtoupper+0x150>
c0005c6a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c6e:	25 ff ff 00 00       	and    eax,0xffff
c0005c73:	83 f8 08             	cmp    eax,0x8
c0005c76:	0f 87 ac 00 00 00    	ja     c0005d28 <ff_wtoupper+0x174>
c0005c7c:	8b 04 85 e0 cb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3420]
c0005c83:	ff e0                	jmp    eax
c0005c85:	8d 76 00             	lea    esi,[esi+0x0]
c0005c88:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c8d:	31 d2                	xor    edx,edx
c0005c8f:	66 89 c2             	mov    dx,ax
c0005c92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c96:	25 ff ff 00 00       	and    eax,0xffff
c0005c9b:	29 c2                	sub    edx,eax
c0005c9d:	89 d0                	mov    eax,edx
c0005c9f:	01 c0                	add    eax,eax
c0005ca1:	89 c2                	mov    edx,eax
c0005ca3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005ca7:	01 d0                	add    eax,edx
c0005ca9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cac:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cb1:	eb 4d                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cb3:	90                   	nop
c0005cb4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cb9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cbd:	83 e0 01             	and    eax,0x1
c0005cc0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005cc5:	eb 39                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cc7:	90                   	nop
c0005cc8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cce:	eb 30                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cd6:	eb 28                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cd8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cde:	eb 20                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce0:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005ce6:	eb 18                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005ce8:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005cee:	eb 10                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005cf6:	eb 08                	jmp    c0005d00 <ff_wtoupper+0x14c>
c0005cf8:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005cff:	90                   	nop
c0005d00:	eb 26                	jmp    c0005d28 <ff_wtoupper+0x174>
c0005d02:	66 90                	xchg   ax,ax
c0005d04:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d0a:	0f 85 dc fe ff ff    	jne    c0005bec <ff_wtoupper+0x38>
c0005d10:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d15:	25 ff ff 00 00       	and    eax,0xffff
c0005d1a:	01 c0                	add    eax,eax
c0005d1c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d20:	e9 c7 fe ff ff       	jmp    c0005bec <ff_wtoupper+0x38>
c0005d25:	8d 76 00             	lea    esi,[esi+0x0]
c0005d28:	90                   	nop
c0005d29:	8d 76 00             	lea    esi,[esi+0x0]
c0005d2c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d31:	25 ff ff 00 00       	and    eax,0xffff
c0005d36:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d3a:	66 90                	xchg   ax,ax
c0005d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d40:	83 c4 10             	add    esp,0x10
c0005d43:	c3                   	ret    

c0005d44 <utf2ucs>:
c0005d44:	57                   	push   edi
c0005d45:	31 c9                	xor    ecx,ecx
c0005d47:	56                   	push   esi
c0005d48:	89 d7                	mov    edi,edx
c0005d4a:	53                   	push   ebx
c0005d4b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d4f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d53:	89 de                	mov    esi,ebx
c0005d55:	c1 fe 08             	sar    esi,0x8
c0005d58:	89 f2                	mov    edx,esi
c0005d5a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d5d:	41                   	inc    ecx
c0005d5e:	85 db                	test   ebx,ebx
c0005d60:	75 e9                	jne    c0005d4b <utf2ucs+0x7>
c0005d62:	5b                   	pop    ebx
c0005d63:	5e                   	pop    esi
c0005d64:	5f                   	pop    edi
c0005d65:	c3                   	ret    

c0005d66 <ucs2utfn>:
c0005d66:	83 e1 fe             	and    ecx,0xfffffffe
c0005d69:	01 d1                	add    ecx,edx
c0005d6b:	39 d1                	cmp    ecx,edx
c0005d6d:	75 04                	jne    c0005d73 <ucs2utfn+0xd>
c0005d6f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d72:	c3                   	ret    
c0005d73:	57                   	push   edi
c0005d74:	56                   	push   esi
c0005d75:	53                   	push   ebx
c0005d76:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d79:	83 c2 02             	add    edx,0x2
c0005d7c:	89 de                	mov    esi,ebx
c0005d7e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005d82:	c1 e6 08             	shl    esi,0x8
c0005d85:	09 f3                	or     ebx,esi
c0005d87:	83 fb 3b             	cmp    ebx,0x3b
c0005d8a:	74 51                	je     c0005ddd <ucs2utfn+0x77>
c0005d8c:	83 fb 7f             	cmp    ebx,0x7f
c0005d8f:	7f 05                	jg     c0005d96 <ucs2utfn+0x30>
c0005d91:	88 18                	mov    BYTE PTR [eax],bl
c0005d93:	40                   	inc    eax
c0005d94:	eb 43                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005d96:	89 de                	mov    esi,ebx
c0005d98:	89 df                	mov    edi,ebx
c0005d9a:	c1 fe 06             	sar    esi,0x6
c0005d9d:	83 e7 3f             	and    edi,0x3f
c0005da0:	83 cf 80             	or     edi,0xffffff80
c0005da3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005da9:	7f 12                	jg     c0005dbd <ucs2utfn+0x57>
c0005dab:	89 f3                	mov    ebx,esi
c0005dad:	83 c0 02             	add    eax,0x2
c0005db0:	83 cb c0             	or     ebx,0xffffffc0
c0005db3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005db6:	89 fb                	mov    ebx,edi
c0005db8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dbb:	eb 1c                	jmp    c0005dd9 <ucs2utfn+0x73>
c0005dbd:	c1 fb 0c             	sar    ebx,0xc
c0005dc0:	83 e6 3f             	and    esi,0x3f
c0005dc3:	83 cb e0             	or     ebx,0xffffffe0
c0005dc6:	83 c0 03             	add    eax,0x3
c0005dc9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dcc:	89 f3                	mov    ebx,esi
c0005dce:	83 cb 80             	or     ebx,0xffffff80
c0005dd1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd4:	89 fb                	mov    ebx,edi
c0005dd6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005dd9:	39 d1                	cmp    ecx,edx
c0005ddb:	75 99                	jne    c0005d76 <ucs2utfn+0x10>
c0005ddd:	5b                   	pop    ebx
c0005dde:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005de1:	5e                   	pop    esi
c0005de2:	5f                   	pop    edi
c0005de3:	c3                   	ret    

c0005de4 <isjoliet>:
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005de9:	75 22                	jne    c0005e0d <isjoliet+0x29>
c0005deb:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005def:	75 1c                	jne    c0005e0d <isjoliet+0x29>
c0005df1:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005df4:	ba 02 00 00 00       	mov    edx,0x2
c0005df9:	3c 43                	cmp    al,0x43
c0005dfb:	74 10                	je     c0005e0d <isjoliet+0x29>
c0005dfd:	ba 03 00 00 00       	mov    edx,0x3
c0005e02:	3c 45                	cmp    al,0x45
c0005e04:	74 07                	je     c0005e0d <isjoliet+0x29>
c0005e06:	31 d2                	xor    edx,edx
c0005e08:	3c 40                	cmp    al,0x40
c0005e0a:	0f 94 c2             	sete   dl
c0005e0d:	89 d0                	mov    eax,edx
c0005e0f:	c3                   	ret    

c0005e10 <htohl_32>:
c0005e10:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e12:	c3                   	ret    

c0005e13 <iso_733>:
c0005e13:	eb fb                	jmp    c0005e10 <htohl_32>

c0005e15 <bclear_cache>:
c0005e15:	31 c0                	xor    eax,eax
c0005e17:	8b 14 85 40 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe09c0]
c0005e1e:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e24:	8b 14 85 a0 f6 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0960]
c0005e2b:	40                   	inc    eax
c0005e2c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0005e32:	83 f8 10             	cmp    eax,0x10
c0005e35:	75 e0                	jne    c0005e17 <bclear_cache+0x2>
c0005e37:	c3                   	ret    

c0005e38 <bgrad_cache>:
c0005e38:	83 fa 0e             	cmp    edx,0xe
c0005e3b:	77 16                	ja     c0005e53 <bgrad_cache+0x1b>
c0005e3d:	53                   	push   ebx
c0005e3e:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e41:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e45:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e48:	42                   	inc    edx
c0005e49:	83 fa 0f             	cmp    edx,0xf
c0005e4c:	75 f3                	jne    c0005e41 <bgrad_cache+0x9>
c0005e4e:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e51:	5b                   	pop    ebx
c0005e52:	c3                   	ret    
c0005e53:	c3                   	ret    

c0005e54 <bclear>:
c0005e54:	eb bf                	jmp    c0005e15 <bclear_cache>

c0005e56 <iso_break_all>:
c0005e56:	31 c0                	xor    eax,eax
c0005e58:	c7 80 f0 fb 01 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffe0410],0x1
c0005e62:	05 94 00 00 00       	add    eax,0x94
c0005e67:	3d 40 09 00 00       	cmp    eax,0x940
c0005e6c:	75 ea                	jne    c0005e58 <iso_break_all+0x2>
c0005e6e:	c3                   	ret    

c0005e6f <ucscompare>:
c0005e6f:	55                   	push   ebp
c0005e70:	57                   	push   edi
c0005e71:	89 c7                	mov    edi,eax
c0005e73:	56                   	push   esi
c0005e74:	89 d6                	mov    esi,edx
c0005e76:	53                   	push   ebx
c0005e77:	31 d2                	xor    edx,edx
c0005e79:	83 ec 1c             	sub    esp,0x1c
c0005e7c:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e80:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005e85:	c1 e3 08             	shl    ebx,0x8
c0005e88:	09 c3                	or     ebx,eax
c0005e8a:	39 ca                	cmp    edx,ecx
c0005e8c:	7d 42                	jge    c0005ed0 <ucscompare+0x61>
c0005e8e:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005e92:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005e97:	c1 e0 08             	shl    eax,0x8
c0005e9a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e9e:	09 e8                	or     eax,ebp
c0005ea0:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ea4:	83 f8 3b             	cmp    eax,0x3b
c0005ea7:	74 27                	je     c0005ed0 <ucscompare+0x61>
c0005ea9:	83 ec 0c             	sub    esp,0xc
c0005eac:	50                   	push   eax
c0005ead:	e8 1e aa ff ff       	call   c00008d0 <tolower>
c0005eb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005eb5:	89 c5                	mov    ebp,eax
c0005eb7:	e8 14 aa ff ff       	call   c00008d0 <tolower>
c0005ebc:	83 c4 10             	add    esp,0x10
c0005ebf:	39 c5                	cmp    ebp,eax
c0005ec1:	75 20                	jne    c0005ee3 <ucscompare+0x74>
c0005ec3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ec7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ecb:	83 c2 02             	add    edx,0x2
c0005ece:	eb ac                	jmp    c0005e7c <ucscompare+0xd>
c0005ed0:	85 db                	test   ebx,ebx
c0005ed2:	0f 95 c2             	setne  dl
c0005ed5:	31 c0                	xor    eax,eax
c0005ed7:	83 fb 2f             	cmp    ebx,0x2f
c0005eda:	0f 95 c0             	setne  al
c0005edd:	21 d0                	and    eax,edx
c0005edf:	f7 d8                	neg    eax
c0005ee1:	eb 03                	jmp    c0005ee6 <ucscompare+0x77>
c0005ee3:	83 c8 ff             	or     eax,0xffffffff
c0005ee6:	83 c4 1c             	add    esp,0x1c
c0005ee9:	5b                   	pop    ebx
c0005eea:	5e                   	pop    esi
c0005eeb:	5f                   	pop    edi
c0005eec:	5d                   	pop    ebp
c0005eed:	c3                   	ret    

c0005eee <fncompare>:
c0005eee:	55                   	push   ebp
c0005eef:	57                   	push   edi
c0005ef0:	89 c7                	mov    edi,eax
c0005ef2:	56                   	push   esi
c0005ef3:	89 ce                	mov    esi,ecx
c0005ef5:	53                   	push   ebx
c0005ef6:	31 db                	xor    ebx,ebx
c0005ef8:	83 ec 1c             	sub    esp,0x1c
c0005efb:	39 d3                	cmp    ebx,edx
c0005efd:	7d 43                	jge    c0005f42 <fncompare+0x54>
c0005eff:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f03:	3c 3b                	cmp    al,0x3b
c0005f05:	74 3b                	je     c0005f42 <fncompare+0x54>
c0005f07:	3c 2e                	cmp    al,0x2e
c0005f09:	75 0e                	jne    c0005f19 <fncompare+0x2b>
c0005f0b:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f0e:	39 d9                	cmp    ecx,ebx
c0005f10:	74 30                	je     c0005f42 <fncompare+0x54>
c0005f12:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f17:	74 29                	je     c0005f42 <fncompare+0x54>
c0005f19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f1d:	83 ec 0c             	sub    esp,0xc
c0005f20:	50                   	push   eax
c0005f21:	e8 aa a9 ff ff       	call   c00008d0 <tolower>
c0005f26:	89 c5                	mov    ebp,eax
c0005f28:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f2c:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f2f:	e8 9c a9 ff ff       	call   c00008d0 <tolower>
c0005f34:	83 c4 10             	add    esp,0x10
c0005f37:	39 c5                	cmp    ebp,eax
c0005f39:	75 1d                	jne    c0005f58 <fncompare+0x6a>
c0005f3b:	43                   	inc    ebx
c0005f3c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f40:	eb b9                	jmp    c0005efb <fncompare+0xd>
c0005f42:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f45:	84 d2                	test   dl,dl
c0005f47:	0f 95 c1             	setne  cl
c0005f4a:	31 c0                	xor    eax,eax
c0005f4c:	80 fa 2f             	cmp    dl,0x2f
c0005f4f:	0f 95 c0             	setne  al
c0005f52:	21 c8                	and    eax,ecx
c0005f54:	f7 d8                	neg    eax
c0005f56:	eb 03                	jmp    c0005f5b <fncompare+0x6d>
c0005f58:	83 c8 ff             	or     eax,0xffffffff
c0005f5b:	83 c4 1c             	add    esp,0x1c
c0005f5e:	5b                   	pop    ebx
c0005f5f:	5e                   	pop    esi
c0005f60:	5f                   	pop    edi
c0005f61:	5d                   	pop    ebp
c0005f62:	c3                   	ret    

c0005f63 <isoReadDiscSector>:
c0005f63:	83 ec 0c             	sub    esp,0xc
c0005f66:	0f be 05 80 f6 01 c0 	movsx  eax,BYTE PTR ds:0xc001f680
c0005f6d:	50                   	push   eax
c0005f6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f7a:	e8 59 14 01 00       	call   c00173d8 <isoReadDiscSectorHelper>
c0005f7f:	83 c4 1c             	add    esp,0x1c
c0005f82:	c3                   	ret    

c0005f83 <bread_cache>:
c0005f83:	55                   	push   ebp
c0005f84:	57                   	push   edi
c0005f85:	89 d7                	mov    edi,edx
c0005f87:	56                   	push   esi
c0005f88:	ba 0f 00 00 00       	mov    edx,0xf
c0005f8d:	53                   	push   ebx
c0005f8e:	89 c6                	mov    esi,eax
c0005f90:	83 ec 0c             	sub    esp,0xc
c0005f93:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005f96:	39 38                	cmp    DWORD PTR [eax],edi
c0005f98:	74 3c                	je     c0005fd6 <bread_cache+0x53>
c0005f9a:	4a                   	dec    edx
c0005f9b:	83 fa ff             	cmp    edx,0xffffffff
c0005f9e:	75 f3                	jne    c0005f93 <bread_cache+0x10>
c0005fa0:	31 db                	xor    ebx,ebx
c0005fa2:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fa5:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fa8:	74 08                	je     c0005fb2 <bread_cache+0x2f>
c0005faa:	43                   	inc    ebx
c0005fab:	83 fb 10             	cmp    ebx,0x10
c0005fae:	75 f2                	jne    c0005fa2 <bread_cache+0x1f>
c0005fb0:	31 db                	xor    ebx,ebx
c0005fb2:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fb5:	50                   	push   eax
c0005fb6:	6a 01                	push   0x1
c0005fb8:	57                   	push   edi
c0005fb9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fbc:	83 c0 04             	add    eax,0x4
c0005fbf:	50                   	push   eax
c0005fc0:	e8 9e ff ff ff       	call   c0005f63 <isoReadDiscSector>
c0005fc5:	83 c4 10             	add    esp,0x10
c0005fc8:	83 c9 ff             	or     ecx,0xffffffff
c0005fcb:	85 c0                	test   eax,eax
c0005fcd:	78 13                	js     c0005fe2 <bread_cache+0x5f>
c0005fcf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fd2:	89 da                	mov    edx,ebx
c0005fd4:	89 38                	mov    DWORD PTR [eax],edi
c0005fd6:	89 f0                	mov    eax,esi
c0005fd8:	e8 5b fe ff ff       	call   c0005e38 <bgrad_cache>
c0005fdd:	b9 0f 00 00 00       	mov    ecx,0xf
c0005fe2:	83 c4 0c             	add    esp,0xc
c0005fe5:	89 c8                	mov    eax,ecx
c0005fe7:	5b                   	pop    ebx
c0005fe8:	5e                   	pop    esi
c0005fe9:	5f                   	pop    edi
c0005fea:	5d                   	pop    ebp
c0005feb:	c3                   	ret    

c0005fec <biread>:
c0005fec:	89 c2                	mov    edx,eax
c0005fee:	b8 a0 f6 01 c0       	mov    eax,0xc001f6a0
c0005ff3:	eb 8e                	jmp    c0005f83 <bread_cache>

c0005ff5 <bdread>:
c0005ff5:	89 c2                	mov    edx,eax
c0005ff7:	b8 40 f6 01 c0       	mov    eax,0xc001f640
c0005ffc:	eb 85                	jmp    c0005f83 <bread_cache>

c0005ffe <strnicmp>:
c0005ffe:	55                   	push   ebp
c0005fff:	57                   	push   edi
c0006000:	56                   	push   esi
c0006001:	31 f6                	xor    esi,esi
c0006003:	53                   	push   ebx
c0006004:	83 ec 0c             	sub    esp,0xc
c0006007:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000600b:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000600f:	74 42                	je     c0006053 <strnicmp+0x55>
c0006011:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006015:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006019:	84 c0                	test   al,al
c000601b:	74 36                	je     c0006053 <strnicmp+0x55>
c000601d:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c0006020:	84 d2                	test   dl,dl
c0006022:	74 2f                	je     c0006053 <strnicmp+0x55>
c0006024:	38 d0                	cmp    al,dl
c0006026:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006029:	75 04                	jne    c000602f <strnicmp+0x31>
c000602b:	89 ee                	mov    esi,ebp
c000602d:	eb dc                	jmp    c000600b <strnicmp+0xd>
c000602f:	83 ec 0c             	sub    esp,0xc
c0006032:	50                   	push   eax
c0006033:	e8 98 a8 ff ff       	call   c00008d0 <tolower>
c0006038:	89 c7                	mov    edi,eax
c000603a:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000603e:	89 ee                	mov    esi,ebp
c0006040:	89 04 24             	mov    DWORD PTR [esp],eax
c0006043:	e8 88 a8 ff ff       	call   c00008d0 <tolower>
c0006048:	83 c4 10             	add    esp,0x10
c000604b:	29 c7                	sub    edi,eax
c000604d:	89 f8                	mov    eax,edi
c000604f:	74 ba                	je     c000600b <strnicmp+0xd>
c0006051:	eb 02                	jmp    c0006055 <strnicmp+0x57>
c0006053:	31 c0                	xor    eax,eax
c0006055:	83 c4 0c             	add    esp,0xc
c0006058:	5b                   	pop    ebx
c0006059:	5e                   	pop    esi
c000605a:	5f                   	pop    edi
c000605b:	5d                   	pop    ebp
c000605c:	c3                   	ret    

c000605d <find_object>:
c000605d:	55                   	push   ebp
c000605e:	89 c5                	mov    ebp,eax
c0006060:	57                   	push   edi
c0006061:	56                   	push   esi
c0006062:	53                   	push   ebx
c0006063:	89 d3                	mov    ebx,edx
c0006065:	81 ec 2c 01 00 00    	sub    esp,0x12c
c000606b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006072:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006076:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000607a:	83 3d d4 04 02 c0 00 	cmp    DWORD PTR ds:0xc00204d4,0x0
c0006081:	74 0b                	je     c000608e <find_object+0x31>
c0006083:	89 ea                	mov    edx,ebp
c0006085:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006089:	e8 b6 fc ff ff       	call   c0005d44 <utf2ucs>
c000608e:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006091:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006095:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c000609a:	7e 11                	jle    c00060ad <find_object+0x50>
c000609c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060a0:	e8 47 ff ff ff       	call   c0005fec <biread>
c00060a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060a9:	85 c0                	test   eax,eax
c00060ab:	79 07                	jns    c00060b4 <find_object+0x57>
c00060ad:	31 db                	xor    ebx,ebx
c00060af:	e9 5b 01 00 00       	jmp    c000620f <find_object+0x1b2>
c00060b4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060c0:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060c4:	8b 04 85 a0 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0960]
c00060cb:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060cf:	8a 03                	mov    al,BYTE PTR [ebx]
c00060d1:	84 c0                	test   al,al
c00060d3:	75 0e                	jne    c00060e3 <find_object+0x86>
c00060d5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060d9:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060e1:	eb b2                	jmp    c0006095 <find_object+0x38>
c00060e3:	8b 35 d4 04 02 c0    	mov    esi,DWORD PTR ds:0xc00204d4
c00060e9:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00060ed:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00060f1:	89 ca                	mov    edx,ecx
c00060f3:	85 f6                	test   esi,esi
c00060f5:	74 2b                	je     c0006122 <find_object+0xc5>
c00060f7:	8d 43 21             	lea    eax,[ebx+0x21]
c00060fa:	8d 54 24 20          	lea    edx,[esp+0x20]
c00060fe:	e8 6c fd ff ff       	call   c0005e6f <ucscompare>
c0006103:	85 c0                	test   eax,eax
c0006105:	0f 84 c1 00 00 00    	je     c00061cc <find_object+0x16f>
c000610b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000610e:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006112:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c000611a:	0f 8e dc 00 00 00    	jle    c00061fc <find_object+0x19f>
c0006120:	eb b3                	jmp    c00060d5 <find_object+0x78>
c0006122:	0f b6 f0             	movzx  esi,al
c0006125:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006129:	29 ce                	sub    esi,ecx
c000612b:	80 e2 01             	and    dl,0x1
c000612e:	74 05                	je     c0006135 <find_object+0xd8>
c0006130:	83 ee 21             	sub    esi,0x21
c0006133:	eb 55                	jmp    c000618a <find_object+0x12d>
c0006135:	47                   	inc    edi
c0006136:	83 ee 22             	sub    esi,0x22
c0006139:	eb 4f                	jmp    c000618a <find_object+0x12d>
c000613b:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000613e:	48                   	dec    eax
c000613f:	3c 01                	cmp    al,0x1
c0006141:	77 4c                	ja     c000618f <find_object+0x132>
c0006143:	50                   	push   eax
c0006144:	6a 02                	push   0x2
c0006146:	68 e0 cf 01 c0       	push   0xc001cfe0
c000614b:	57                   	push   edi
c000614c:	e8 0f a6 ff ff       	call   c0000760 <strncmp>
c0006151:	83 c4 10             	add    esp,0x10
c0006154:	85 c0                	test   eax,eax
c0006156:	75 2a                	jne    c0006182 <find_object+0x125>
c0006158:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000615c:	8d 42 fb             	lea    eax,[edx-0x5]
c000615f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006163:	50                   	push   eax
c0006164:	8d 47 05             	lea    eax,[edi+0x5]
c0006167:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000616b:	50                   	push   eax
c000616c:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006170:	50                   	push   eax
c0006171:	e8 ba a4 ff ff       	call   c0000630 <strncpy>
c0006176:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000617a:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000617f:	83 c4 10             	add    esp,0x10
c0006182:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006186:	29 c6                	sub    esi,eax
c0006188:	01 c7                	add    edi,eax
c000618a:	83 fe 03             	cmp    esi,0x3
c000618d:	7f ac                	jg     c000613b <find_object+0xde>
c000618f:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0006194:	7e 40                	jle    c00061d6 <find_object+0x179>
c0006196:	51                   	push   ecx
c0006197:	51                   	push   ecx
c0006198:	6a 2f                	push   0x2f
c000619a:	55                   	push   ebp
c000619b:	e8 90 a5 ff ff       	call   c0000730 <strchr>
c00061a0:	83 c4 10             	add    esp,0x10
c00061a3:	85 c0                	test   eax,eax
c00061a5:	74 04                	je     c00061ab <find_object+0x14e>
c00061a7:	29 e8                	sub    eax,ebp
c00061a9:	eb 0c                	jmp    c00061b7 <find_object+0x15a>
c00061ab:	83 ec 0c             	sub    esp,0xc
c00061ae:	55                   	push   ebp
c00061af:	e8 8c a3 ff ff       	call   c0000540 <strlen>
c00061b4:	83 c4 10             	add    esp,0x10
c00061b7:	52                   	push   edx
c00061b8:	50                   	push   eax
c00061b9:	55                   	push   ebp
c00061ba:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061be:	50                   	push   eax
c00061bf:	e8 3a fe ff ff       	call   c0005ffe <strnicmp>
c00061c4:	83 c4 10             	add    esp,0x10
c00061c7:	e9 37 ff ff ff       	jmp    c0006103 <find_object+0xa6>
c00061cc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061d0:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061d4:	eb 1e                	jmp    c00061f4 <find_object+0x197>
c00061d6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061da:	8d 43 21             	lea    eax,[ebx+0x21]
c00061dd:	89 e9                	mov    ecx,ebp
c00061df:	e8 0a fd ff ff       	call   c0005eee <fncompare>
c00061e4:	85 c0                	test   eax,eax
c00061e6:	0f 85 1f ff ff ff    	jne    c000610b <find_object+0xae>
c00061ec:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061f0:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c00061f4:	0f 85 11 ff ff ff    	jne    c000610b <find_object+0xae>
c00061fa:	eb 13                	jmp    c000620f <find_object+0x1b2>
c00061fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006200:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006204:	0f 8f b2 fe ff ff    	jg     c00060bc <find_object+0x5f>
c000620a:	e9 c6 fe ff ff       	jmp    c00060d5 <find_object+0x78>
c000620f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006215:	89 d8                	mov    eax,ebx
c0006217:	5b                   	pop    ebx
c0006218:	5e                   	pop    esi
c0006219:	5f                   	pop    edi
c000621a:	5d                   	pop    ebp
c000621b:	c3                   	ret    

c000621c <find_object_path>:
c000621c:	55                   	push   ebp
c000621d:	57                   	push   edi
c000621e:	89 d7                	mov    edi,edx
c0006220:	56                   	push   esi
c0006221:	89 c6                	mov    esi,eax
c0006223:	53                   	push   ebx
c0006224:	89 cb                	mov    ebx,ecx
c0006226:	83 ec 0c             	sub    esp,0xc
c0006229:	50                   	push   eax
c000622a:	50                   	push   eax
c000622b:	6a 2f                	push   0x2f
c000622d:	56                   	push   esi
c000622e:	e8 fd a4 ff ff       	call   c0000730 <strchr>
c0006233:	83 c4 10             	add    esp,0x10
c0006236:	89 c5                	mov    ebp,eax
c0006238:	85 c0                	test   eax,eax
c000623a:	74 3a                	je     c0006276 <find_object_path+0x5a>
c000623c:	39 ee                	cmp    esi,ebp
c000623e:	74 31                	je     c0006271 <find_object_path+0x55>
c0006240:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006243:	e8 cb fb ff ff       	call   c0005e13 <iso_733>
c0006248:	89 c2                	mov    edx,eax
c000624a:	8d 43 02             	lea    eax,[ebx+0x2]
c000624d:	e8 c1 fb ff ff       	call   c0005e13 <iso_733>
c0006252:	83 ec 0c             	sub    esp,0xc
c0006255:	89 c1                	mov    ecx,eax
c0006257:	52                   	push   edx
c0006258:	89 f0                	mov    eax,esi
c000625a:	ba 01 00 00 00       	mov    edx,0x1
c000625f:	e8 f9 fd ff ff       	call   c000605d <find_object>
c0006264:	83 c4 10             	add    esp,0x10
c0006267:	89 c3                	mov    ebx,eax
c0006269:	85 c0                	test   eax,eax
c000626b:	75 04                	jne    c0006271 <find_object_path+0x55>
c000626d:	31 db                	xor    ebx,ebx
c000626f:	eb 36                	jmp    c00062a7 <find_object_path+0x8b>
c0006271:	8d 75 01             	lea    esi,[ebp+0x1]
c0006274:	eb b3                	jmp    c0006229 <find_object_path+0xd>
c0006276:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006279:	74 28                	je     c00062a3 <find_object_path+0x87>
c000627b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000627e:	e8 90 fb ff ff       	call   c0005e13 <iso_733>
c0006283:	89 c2                	mov    edx,eax
c0006285:	8d 43 02             	lea    eax,[ebx+0x2]
c0006288:	e8 86 fb ff ff       	call   c0005e13 <iso_733>
c000628d:	83 ec 0c             	sub    esp,0xc
c0006290:	89 c1                	mov    ecx,eax
c0006292:	52                   	push   edx
c0006293:	89 f0                	mov    eax,esi
c0006295:	89 fa                	mov    edx,edi
c0006297:	e8 c1 fd ff ff       	call   c000605d <find_object>
c000629c:	83 c4 10             	add    esp,0x10
c000629f:	89 c3                	mov    ebx,eax
c00062a1:	eb 04                	jmp    c00062a7 <find_object_path+0x8b>
c00062a3:	85 ff                	test   edi,edi
c00062a5:	74 c6                	je     c000626d <find_object_path+0x51>
c00062a7:	83 c4 0c             	add    esp,0xc
c00062aa:	89 d8                	mov    eax,ebx
c00062ac:	5b                   	pop    ebx
c00062ad:	5e                   	pop    esi
c00062ae:	5f                   	pop    edi
c00062af:	5d                   	pop    ebp
c00062b0:	c3                   	ret    

c00062b1 <stricmp>:
c00062b1:	57                   	push   edi
c00062b2:	56                   	push   esi
c00062b3:	31 f6                	xor    esi,esi
c00062b5:	53                   	push   ebx
c00062b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062ba:	83 ec 0c             	sub    esp,0xc
c00062bd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062c1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062c5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062c9:	50                   	push   eax
c00062ca:	e8 e1 a5 ff ff       	call   c00008b0 <toupper>
c00062cf:	89 04 24             	mov    DWORD PTR [esp],eax
c00062d2:	e8 f9 a5 ff ff       	call   c00008d0 <tolower>
c00062d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062da:	89 c3                	mov    ebx,eax
c00062dc:	e8 cf a5 ff ff       	call   c00008b0 <toupper>
c00062e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00062e4:	e8 e7 a5 ff ff       	call   c00008d0 <tolower>
c00062e9:	83 c4 10             	add    esp,0x10
c00062ec:	39 c3                	cmp    ebx,eax
c00062ee:	75 05                	jne    c00062f5 <stricmp+0x44>
c00062f0:	46                   	inc    esi
c00062f1:	85 db                	test   ebx,ebx
c00062f3:	75 c1                	jne    c00062b6 <stricmp+0x5>
c00062f5:	29 c3                	sub    ebx,eax
c00062f7:	89 d8                	mov    eax,ebx
c00062f9:	5b                   	pop    ebx
c00062fa:	5e                   	pop    esi
c00062fb:	5f                   	pop    edi
c00062fc:	c3                   	ret    

c00062fd <iso_open>:
c00062fd:	57                   	push   edi
c00062fe:	31 c0                	xor    eax,eax
c0006300:	56                   	push   esi
c0006301:	b9 a0 04 02 c0       	mov    ecx,0xc00204a0
c0006306:	53                   	push   ebx
c0006307:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000630c:	0f 95 c0             	setne  al
c000630f:	89 c2                	mov    edx,eax
c0006311:	89 c6                	mov    esi,eax
c0006313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006317:	e8 00 ff ff ff       	call   c000621c <find_object_path>
c000631c:	83 ca ff             	or     edx,0xffffffff
c000631f:	85 c0                	test   eax,eax
c0006321:	74 5e                	je     c0006381 <iso_open+0x84>
c0006323:	89 c1                	mov    ecx,eax
c0006325:	31 d2                	xor    edx,edx
c0006327:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000632d:	83 bf 60 fb 01 c0 00 	cmp    DWORD PTR [edi-0x3ffe04a0],0x0
c0006334:	75 42                	jne    c0006378 <iso_open+0x7b>
c0006336:	8d 41 02             	lea    eax,[ecx+0x2]
c0006339:	c7 87 60 fb 01 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffe04a0],0xffffffff
c0006343:	e8 cb fa ff ff       	call   c0005e13 <iso_733>
c0006348:	89 b7 64 fb 01 c0    	mov    DWORD PTR [edi-0x3ffe049c],esi
c000634e:	89 87 60 fb 01 c0    	mov    DWORD PTR [edi-0x3ffe04a0],eax
c0006354:	c7 87 68 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0498],0x0
c000635e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006361:	e8 ad fa ff ff       	call   c0005e13 <iso_733>
c0006366:	c7 87 f0 fb 01 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffe0410],0x0
c0006370:	89 87 6c fb 01 c0    	mov    DWORD PTR [edi-0x3ffe0494],eax
c0006376:	eb 09                	jmp    c0006381 <iso_open+0x84>
c0006378:	42                   	inc    edx
c0006379:	83 fa 10             	cmp    edx,0x10
c000637c:	75 a9                	jne    c0006327 <iso_open+0x2a>
c000637e:	83 ca ff             	or     edx,0xffffffff
c0006381:	5b                   	pop    ebx
c0006382:	89 d0                	mov    eax,edx
c0006384:	5e                   	pop    esi
c0006385:	5f                   	pop    edi
c0006386:	c3                   	ret    

c0006387 <iso_close>:
c0006387:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000638b:	83 f8 0f             	cmp    eax,0xf
c000638e:	7f 10                	jg     c00063a0 <iso_close+0x19>
c0006390:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c0006396:	c7 80 60 fb 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe04a0],0x0
c00063a0:	e9 70 fa ff ff       	jmp    c0005e15 <bclear_cache>

c00063a5 <iso_read>:
c00063a5:	55                   	push   ebp
c00063a6:	57                   	push   edi
c00063a7:	56                   	push   esi
c00063a8:	53                   	push   ebx
c00063a9:	83 ec 1c             	sub    esp,0x1c
c00063ac:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063b0:	83 fd 0f             	cmp    ebp,0xf
c00063b3:	7e 0a                	jle    c00063bf <iso_read+0x1a>
c00063b5:	83 c8 ff             	or     eax,0xffffffff
c00063b8:	89 c2                	mov    edx,eax
c00063ba:	e9 f4 00 00 00       	jmp    c00064b3 <iso_read+0x10e>
c00063bf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063c5:	83 bd 60 fb 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe04a0],0x0
c00063cc:	74 e7                	je     c00063b5 <iso_read+0x10>
c00063ce:	8b 95 f0 fb 01 c0    	mov    edx,DWORD PTR [ebp-0x3ffe0410]
c00063d4:	85 d2                	test   edx,edx
c00063d6:	75 dd                	jne    c00063b5 <iso_read+0x10>
c00063d8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063dd:	0f 84 cd 00 00 00    	je     c00064b0 <iso_read+0x10b>
c00063e3:	8b 85 68 fb 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0498]
c00063e9:	8b 8d 6c fb 01 c0    	mov    ecx,DWORD PTR [ebp-0x3ffe0494]
c00063ef:	29 c1                	sub    ecx,eax
c00063f1:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c00063f5:	76 04                	jbe    c00063fb <iso_read+0x56>
c00063f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00063fb:	85 c9                	test   ecx,ecx
c00063fd:	0f 84 ad 00 00 00    	je     c00064b0 <iso_read+0x10b>
c0006403:	89 c6                	mov    esi,eax
c0006405:	bb 00 08 00 00       	mov    ebx,0x800
c000640a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006410:	c1 e8 0b             	shr    eax,0xb
c0006413:	29 f3                	sub    ebx,esi
c0006415:	03 85 60 fb 01 c0    	add    eax,DWORD PTR [ebp-0x3ffe04a0]
c000641b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006421:	7e 3f                	jle    c0006462 <iso_read+0xbd>
c0006423:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006429:	75 37                	jne    c0006462 <iso_read+0xbd>
c000642b:	be 20 00 00 00       	mov    esi,0x20
c0006430:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006436:	7f 05                	jg     c000643d <iso_read+0x98>
c0006438:	89 ce                	mov    esi,ecx
c000643a:	c1 fe 0b             	sar    esi,0xb
c000643d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006441:	89 f3                	mov    ebx,esi
c0006443:	c1 e3 0b             	shl    ebx,0xb
c0006446:	52                   	push   edx
c0006447:	56                   	push   esi
c0006448:	50                   	push   eax
c0006449:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000644d:	e8 11 fb ff ff       	call   c0005f63 <isoReadDiscSector>
c0006452:	83 c4 10             	add    esp,0x10
c0006455:	85 c0                	test   eax,eax
c0006457:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000645b:	7f 3e                	jg     c000649b <iso_read+0xf6>
c000645d:	e9 53 ff ff ff       	jmp    c00063b5 <iso_read+0x10>
c0006462:	39 cb                	cmp    ebx,ecx
c0006464:	7e 02                	jle    c0006468 <iso_read+0xc3>
c0006466:	89 cb                	mov    ebx,ecx
c0006468:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000646c:	e8 84 fb ff ff       	call   c0005ff5 <bdread>
c0006471:	85 c0                	test   eax,eax
c0006473:	0f 88 3c ff ff ff    	js     c00063b5 <iso_read+0x10>
c0006479:	8b 0c 85 40 f6 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe09c0]
c0006480:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006484:	8b 85 68 fb 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0498]
c000648a:	25 ff 07 00 00       	and    eax,0x7ff
c000648f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c0006493:	89 d9                	mov    ecx,ebx
c0006495:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006497:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000649b:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c000649f:	01 9d 68 fb 01 c0    	add    DWORD PTR [ebp-0x3ffe0498],ebx
c00064a5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064a9:	01 da                	add    edx,ebx
c00064ab:	e9 28 ff ff ff       	jmp    c00063d8 <iso_read+0x33>
c00064b0:	89 d0                	mov    eax,edx
c00064b2:	99                   	cdq    
c00064b3:	83 c4 1c             	add    esp,0x1c
c00064b6:	5b                   	pop    ebx
c00064b7:	5e                   	pop    esi
c00064b8:	5f                   	pop    edi
c00064b9:	5d                   	pop    ebp
c00064ba:	c3                   	ret    

c00064bb <iso_seek>:
c00064bb:	55                   	push   ebp
c00064bc:	83 c8 ff             	or     eax,0xffffffff
c00064bf:	57                   	push   edi
c00064c0:	89 c2                	mov    edx,eax
c00064c2:	56                   	push   esi
c00064c3:	53                   	push   ebx
c00064c4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064c8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064cc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064d0:	83 fe 0f             	cmp    esi,0xf
c00064d3:	7f 65                	jg     c000653a <iso_seek+0x7f>
c00064d5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064db:	8d 8d 60 fb 01 c0    	lea    ecx,[ebp-0x3ffe04a0]
c00064e1:	83 bd 60 fb 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe04a0],0x0
c00064e8:	74 50                	je     c000653a <iso_seek+0x7f>
c00064ea:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c00064f1:	75 47                	jne    c000653a <iso_seek+0x7f>
c00064f3:	83 fb 01             	cmp    ebx,0x1
c00064f6:	74 0e                	je     c0006506 <iso_seek+0x4b>
c00064f8:	83 fb 02             	cmp    ebx,0x2
c00064fb:	74 0e                	je     c000650b <iso_seek+0x50>
c00064fd:	85 db                	test   ebx,ebx
c00064ff:	75 39                	jne    c000653a <iso_seek+0x7f>
c0006501:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006504:	eb 0d                	jmp    c0006513 <iso_seek+0x58>
c0006506:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006509:	eb 08                	jmp    c0006513 <iso_seek+0x58>
c000650b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000650e:	01 f8                	add    eax,edi
c0006510:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006513:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006519:	8b 88 6c fb 01 c0    	mov    ecx,DWORD PTR [eax-0x3ffe0494]
c000651f:	05 60 fb 01 c0       	add    eax,0xc001fb60
c0006524:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006527:	76 03                	jbe    c000652c <iso_seek+0x71>
c0006529:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000652c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006532:	8b 82 68 fb 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0498]
c0006538:	31 d2                	xor    edx,edx
c000653a:	5b                   	pop    ebx
c000653b:	5e                   	pop    esi
c000653c:	5f                   	pop    edi
c000653d:	5d                   	pop    ebp
c000653e:	c3                   	ret    

c000653f <iso_tell>:
c000653f:	83 c8 ff             	or     eax,0xffffffff
c0006542:	53                   	push   ebx
c0006543:	89 c2                	mov    edx,eax
c0006545:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006549:	83 f9 0f             	cmp    ecx,0xf
c000654c:	7f 20                	jg     c000656e <iso_tell+0x2f>
c000654e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006554:	83 bb 60 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe04a0],0x0
c000655b:	74 11                	je     c000656e <iso_tell+0x2f>
c000655d:	83 bb f0 fb 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0410],0x0
c0006564:	75 08                	jne    c000656e <iso_tell+0x2f>
c0006566:	8b 83 68 fb 01 c0    	mov    eax,DWORD PTR [ebx-0x3ffe0498]
c000656c:	31 d2                	xor    edx,edx
c000656e:	5b                   	pop    ebx
c000656f:	c3                   	ret    

c0006570 <iso_total>:
c0006570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006574:	83 c8 ff             	or     eax,0xffffffff
c0006577:	83 fa 0f             	cmp    edx,0xf
c000657a:	7f 1e                	jg     c000659a <iso_total+0x2a>
c000657c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006582:	83 ba 60 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe04a0],0x0
c0006589:	74 0f                	je     c000659a <iso_total+0x2a>
c000658b:	83 ba f0 fb 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0410],0x0
c0006592:	75 06                	jne    c000659a <iso_total+0x2a>
c0006594:	8b 82 6c fb 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0494]
c000659a:	c3                   	ret    

c000659b <fn_postprocess>:
c000659b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000659f:	89 d0                	mov    eax,edx
c00065a1:	8a 08                	mov    cl,BYTE PTR [eax]
c00065a3:	80 f9 3b             	cmp    cl,0x3b
c00065a6:	74 07                	je     c00065af <fn_postprocess+0x14>
c00065a8:	84 c9                	test   cl,cl
c00065aa:	74 03                	je     c00065af <fn_postprocess+0x14>
c00065ac:	40                   	inc    eax
c00065ad:	eb f2                	jmp    c00065a1 <fn_postprocess+0x6>
c00065af:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00065b2:	39 d0                	cmp    eax,edx
c00065b4:	76 0a                	jbe    c00065c0 <fn_postprocess+0x25>
c00065b6:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00065ba:	75 04                	jne    c00065c0 <fn_postprocess+0x25>
c00065bc:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00065c0:	c3                   	ret    

c00065c1 <iso_readdir>:
c00065c1:	55                   	push   ebp
c00065c2:	57                   	push   edi
c00065c3:	56                   	push   esi
c00065c4:	53                   	push   ebx
c00065c5:	83 ec 1c             	sub    esp,0x1c
c00065c8:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065cd:	7e 07                	jle    c00065d6 <iso_readdir+0x15>
c00065cf:	31 c0                	xor    eax,eax
c00065d1:	e9 d4 01 00 00       	jmp    c00067aa <iso_readdir+0x1e9>
c00065d6:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00065de:	8d b0 60 fb 01 c0    	lea    esi,[eax-0x3ffe04a0]
c00065e4:	83 b8 60 fb 01 c0 00 	cmp    DWORD PTR [eax-0x3ffe04a0],0x0
c00065eb:	74 e2                	je     c00065cf <iso_readdir+0xe>
c00065ed:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c00065f1:	74 dc                	je     c00065cf <iso_readdir+0xe>
c00065f3:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c00065fa:	75 d3                	jne    c00065cf <iso_readdir+0xe>
c00065fc:	31 db                	xor    ebx,ebx
c00065fe:	83 c8 ff             	or     eax,0xffffffff
c0006601:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006604:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006607:	73 3c                	jae    c0006645 <iso_readdir+0x84>
c0006609:	c1 ea 0b             	shr    edx,0xb
c000660c:	8b 06                	mov    eax,DWORD PTR [esi]
c000660e:	01 d0                	add    eax,edx
c0006610:	e8 d7 f9 ff ff       	call   c0005fec <biread>
c0006615:	85 c0                	test   eax,eax
c0006617:	78 b6                	js     c00065cf <iso_readdir+0xe>
c0006619:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000661c:	8b 1c 85 a0 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0960]
c0006623:	89 d1                	mov    ecx,edx
c0006625:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c000662b:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c000662f:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c0006632:	75 11                	jne    c0006645 <iso_readdir+0x84>
c0006634:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c000663a:	81 c2 00 08 00 00    	add    edx,0x800
c0006640:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c0006643:	eb bc                	jmp    c0006601 <iso_readdir+0x40>
c0006645:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c000664d:	8b b2 68 fb 01 c0    	mov    esi,DWORD PTR [edx-0x3ffe0498]
c0006653:	81 c2 60 fb 01 c0    	add    edx,0xc001fb60
c0006659:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c000665c:	0f 83 6d ff ff ff    	jae    c00065cf <iso_readdir+0xe>
c0006662:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c0006666:	75 38                	jne    c00066a0 <iso_readdir+0xdf>
c0006668:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c000666c:	75 32                	jne    c00066a0 <iso_readdir+0xdf>
c000666e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0006671:	8b 1c 85 a0 f6 01 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffe0960]
c0006678:	01 f1                	add    ecx,esi
c000667a:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c000667d:	89 c8                	mov    eax,ecx
c000667f:	25 ff 07 00 00       	and    eax,0x7ff
c0006684:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c0006689:	01 c8                	add    eax,ecx
c000668b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c000668e:	25 ff 07 00 00       	and    eax,0x7ff
c0006693:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c0006697:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000669a:	0f 84 2f ff ff ff    	je     c00065cf <iso_readdir+0xe>
c00066a0:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066a8:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066ac:	8d 53 21             	lea    edx,[ebx+0x21]
c00066af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066b3:	8d a8 78 fb 01 c0    	lea    ebp,[eax-0x3ffe0488]
c00066b9:	83 3d d4 04 02 c0 00 	cmp    DWORD PTR ds:0xc00204d4,0x0
c00066c0:	74 0c                	je     c00066ce <iso_readdir+0x10d>
c00066c2:	89 e8                	mov    eax,ebp
c00066c4:	e8 9d f6 ff ff       	call   c0005d66 <ucs2utfn>
c00066c9:	e9 9e 00 00 00       	jmp    c000676c <iso_readdir+0x1ab>
c00066ce:	56                   	push   esi
c00066cf:	51                   	push   ecx
c00066d0:	52                   	push   edx
c00066d1:	55                   	push   ebp
c00066d2:	e8 59 9f ff ff       	call   c0000630 <strncpy>
c00066d7:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066db:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066df:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00066e2:	c6 84 07 78 fb 01 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffe0488],0x0
c00066ea:	e8 ac fe ff ff       	call   c000659b <fn_postprocess>
c00066ef:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c00066f3:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00066f6:	83 c4 10             	add    esp,0x10
c00066f9:	29 c6                	sub    esi,eax
c00066fb:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c00066ff:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c0006703:	74 05                	je     c000670a <iso_readdir+0x149>
c0006705:	83 ee 21             	sub    esi,0x21
c0006708:	eb 04                	jmp    c000670e <iso_readdir+0x14d>
c000670a:	47                   	inc    edi
c000670b:	83 ee 22             	sub    esi,0x22
c000670e:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006716:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000671a:	83 fe 03             	cmp    esi,0x3
c000671d:	7e 4d                	jle    c000676c <iso_readdir+0x1ab>
c000671f:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006722:	48                   	dec    eax
c0006723:	3c 01                	cmp    al,0x1
c0006725:	77 45                	ja     c000676c <iso_readdir+0x1ab>
c0006727:	52                   	push   edx
c0006728:	6a 02                	push   0x2
c000672a:	68 e0 cf 01 c0       	push   0xc001cfe0
c000672f:	57                   	push   edi
c0006730:	e8 2b a0 ff ff       	call   c0000760 <strncmp>
c0006735:	83 c4 10             	add    esp,0x10
c0006738:	85 c0                	test   eax,eax
c000673a:	75 26                	jne    c0006762 <iso_readdir+0x1a1>
c000673c:	50                   	push   eax
c000673d:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006741:	83 e8 05             	sub    eax,0x5
c0006744:	50                   	push   eax
c0006745:	8d 47 05             	lea    eax,[edi+0x5]
c0006748:	50                   	push   eax
c0006749:	55                   	push   ebp
c000674a:	e8 e1 9e ff ff       	call   c0000630 <strncpy>
c000674f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006753:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006757:	83 c4 10             	add    esp,0x10
c000675a:	c6 84 08 73 fb 01 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffe048d],0x0
c0006762:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006766:	29 c6                	sub    esi,eax
c0006768:	01 c7                	add    edi,eax
c000676a:	eb ae                	jmp    c000671a <iso_readdir+0x159>
c000676c:	83 c8 ff             	or     eax,0xffffffff
c000676f:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c0006773:	89 c2                	mov    edx,eax
c0006775:	75 0a                	jne    c0006781 <iso_readdir+0x1c0>
c0006777:	8d 43 0a             	lea    eax,[ebx+0xa]
c000677a:	e8 94 f6 ff ff       	call   c0005e13 <iso_733>
c000677f:	31 d2                	xor    edx,edx
c0006781:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c0006789:	89 81 70 fb 01 c0    	mov    DWORD PTR [ecx-0x3ffe0490],eax
c000678f:	89 91 74 fb 01 c0    	mov    DWORD PTR [ecx-0x3ffe048c],edx
c0006795:	81 c1 60 fb 01 c0    	add    ecx,0xc001fb60
c000679b:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000679e:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a5:	05 70 fb 01 c0       	add    eax,0xc001fb70
c00067aa:	83 c4 1c             	add    esp,0x1c
c00067ad:	5b                   	pop    ebx
c00067ae:	5e                   	pop    esi
c00067af:	5f                   	pop    edi
c00067b0:	5d                   	pop    ebp
c00067b1:	c3                   	ret    

c00067b2 <iso_reset>:
c00067b2:	e8 9f f6 ff ff       	call   c0005e56 <iso_break_all>
c00067b7:	e8 98 f6 ff ff       	call   c0005e54 <bclear>
c00067bc:	31 c0                	xor    eax,eax
c00067be:	c3                   	ret    

c00067bf <init_percd>:
c00067bf:	57                   	push   edi
c00067c0:	56                   	push   esi
c00067c1:	53                   	push   ebx
c00067c2:	bb 01 00 00 00       	mov    ebx,0x1
c00067c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067cb:	a2 80 f6 01 c0       	mov    ds:0xc001f680,al
c00067d0:	e8 dd ff ff ff       	call   c00067b2 <iso_reset>
c00067d5:	c7 05 d4 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00204d4,0x0
c00067df:	a1 cc 04 02 c0       	mov    eax,ds:0xc00204cc
c00067e4:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c00067e8:	e8 ff f7 ff ff       	call   c0005fec <biread>
c00067ed:	89 c6                	mov    esi,eax
c00067ef:	85 c0                	test   eax,eax
c00067f1:	0f 88 ba 00 00 00    	js     c00068b1 <init_percd+0xf2>
c00067f7:	8b 04 85 a0 f6 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe0960]
c00067fe:	83 c0 04             	add    eax,0x4
c0006801:	52                   	push   edx
c0006802:	6a 06                	push   0x6
c0006804:	68 e3 cf 01 c0       	push   0xc001cfe3
c0006809:	50                   	push   eax
c000680a:	e8 81 9b ff ff       	call   c0000390 <memcmp>
c000680f:	83 c4 10             	add    esp,0x10
c0006812:	85 c0                	test   eax,eax
c0006814:	74 08                	je     c000681e <init_percd+0x5f>
c0006816:	43                   	inc    ebx
c0006817:	83 fb 04             	cmp    ebx,0x4
c000681a:	75 c3                	jne    c00067df <init_percd+0x20>
c000681c:	eb 1a                	jmp    c0006838 <init_percd+0x79>
c000681e:	8b 04 b5 a0 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0960]
c0006825:	83 c0 5c             	add    eax,0x5c
c0006828:	e8 b7 f5 ff ff       	call   c0005de4 <isjoliet>
c000682d:	a3 d4 04 02 c0       	mov    ds:0xc00204d4,eax
c0006832:	85 c0                	test   eax,eax
c0006834:	74 e0                	je     c0006816 <init_percd+0x57>
c0006836:	eb 3e                	jmp    c0006876 <init_percd+0xb7>
c0006838:	83 3d d4 04 02 c0 00 	cmp    DWORD PTR ds:0xc00204d4,0x0
c000683f:	75 35                	jne    c0006876 <init_percd+0xb7>
c0006841:	a1 cc 04 02 c0       	mov    eax,ds:0xc00204cc
c0006846:	83 c0 10             	add    eax,0x10
c0006849:	e8 9e f7 ff ff       	call   c0005fec <biread>
c000684e:	89 c6                	mov    esi,eax
c0006850:	85 c0                	test   eax,eax
c0006852:	78 5f                	js     c00068b3 <init_percd+0xf4>
c0006854:	83 cb ff             	or     ebx,0xffffffff
c0006857:	50                   	push   eax
c0006858:	8b 04 b5 a0 f6 01 c0 	mov    eax,DWORD PTR [esi*4-0x3ffe0960]
c000685f:	6a 06                	push   0x6
c0006861:	83 c0 04             	add    eax,0x4
c0006864:	68 ea cf 01 c0       	push   0xc001cfea
c0006869:	50                   	push   eax
c000686a:	e8 21 9b ff ff       	call   c0000390 <memcmp>
c000686f:	83 c4 10             	add    esp,0x10
c0006872:	85 c0                	test   eax,eax
c0006874:	75 3d                	jne    c00068b3 <init_percd+0xf4>
c0006876:	8b 34 b5 a0 f6 01 c0 	mov    esi,DWORD PTR [esi*4-0x3ffe0960]
c000687d:	bf a0 04 02 c0       	mov    edi,0xc00204a0
c0006882:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006888:	b9 22 00 00 00       	mov    ecx,0x22
c000688d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000688f:	b8 a2 04 02 c0       	mov    eax,0xc00204a2
c0006894:	31 db                	xor    ebx,ebx
c0006896:	e8 78 f5 ff ff       	call   c0005e13 <iso_733>
c000689b:	a3 c8 04 02 c0       	mov    ds:0xc00204c8,eax
c00068a0:	b8 aa 04 02 c0       	mov    eax,0xc00204aa
c00068a5:	e8 69 f5 ff ff       	call   c0005e13 <iso_733>
c00068aa:	a3 c4 04 02 c0       	mov    ds:0xc00204c4,eax
c00068af:	eb 02                	jmp    c00068b3 <init_percd+0xf4>
c00068b1:	89 c3                	mov    ebx,eax
c00068b3:	89 d8                	mov    eax,ebx
c00068b5:	5b                   	pop    ebx
c00068b6:	5e                   	pop    esi
c00068b7:	5f                   	pop    edi
c00068b8:	c3                   	ret    

c00068b9 <iso_ioctl>:
c00068b9:	e8 f4 fe ff ff       	call   c00067b2 <iso_reset>
c00068be:	31 c0                	xor    eax,eax
c00068c0:	c3                   	ret    

c00068c1 <fs_iso9660_init>:
c00068c1:	53                   	push   ebx
c00068c2:	31 db                	xor    ebx,ebx
c00068c4:	83 ec 0c             	sub    esp,0xc
c00068c7:	68 40 09 00 00       	push   0x940
c00068cc:	6a 00                	push   0x0
c00068ce:	68 60 fb 01 c0       	push   0xc001fb60
c00068d3:	e8 f8 9b ff ff       	call   c00004d0 <memset>
c00068d8:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068df:	c7 05 60 fb 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001fb60,0xffffffff
c00068e9:	e8 cb 0e 00 00       	call   c00077b9 <malloc>
c00068ee:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00068f5:	a3 d0 04 02 c0       	mov    ds:0xc00204d0,eax
c00068fa:	e8 ba 0e 00 00       	call   c00077b9 <malloc>
c00068ff:	83 c4 10             	add    esp,0x10
c0006902:	a3 40 fb 01 c0       	mov    ds:0xc001fb40,eax
c0006907:	83 ec 0c             	sub    esp,0xc
c000690a:	68 04 08 00 00       	push   0x804
c000690f:	e8 a5 0e 00 00       	call   c00077b9 <malloc>
c0006914:	89 04 9d a0 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe0960],eax
c000691b:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006921:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006928:	e8 8c 0e 00 00       	call   c00077b9 <malloc>
c000692d:	83 c4 10             	add    esp,0x10
c0006930:	89 04 9d 40 f6 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe09c0],eax
c0006937:	43                   	inc    ebx
c0006938:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c000693e:	83 fb 10             	cmp    ebx,0x10
c0006941:	75 c4                	jne    c0006907 <fs_iso9660_init+0x46>
c0006943:	31 c0                	xor    eax,eax
c0006945:	83 c4 08             	add    esp,0x8
c0006948:	5b                   	pop    ebx
c0006949:	c3                   	ret    

c000694a <fs_iso9660_shutdown>:
c000694a:	53                   	push   ebx
c000694b:	31 db                	xor    ebx,ebx
c000694d:	83 ec 08             	sub    esp,0x8
c0006950:	83 ec 0c             	sub    esp,0xc
c0006953:	ff 34 9d a0 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe0960]
c000695a:	e8 6a 0e 00 00       	call   c00077c9 <free>
c000695f:	58                   	pop    eax
c0006960:	ff 34 9d 40 f6 01 c0 	push   DWORD PTR [ebx*4-0x3ffe09c0]
c0006967:	43                   	inc    ebx
c0006968:	e8 5c 0e 00 00       	call   c00077c9 <free>
c000696d:	83 c4 10             	add    esp,0x10
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 db                	jne    c0006950 <fs_iso9660_shutdown+0x6>
c0006975:	a1 d0 04 02 c0       	mov    eax,ds:0xc00204d0
c000697a:	85 c0                	test   eax,eax
c000697c:	74 0c                	je     c000698a <fs_iso9660_shutdown+0x40>
c000697e:	83 ec 0c             	sub    esp,0xc
c0006981:	50                   	push   eax
c0006982:	e8 42 0e 00 00       	call   c00077c9 <free>
c0006987:	83 c4 10             	add    esp,0x10
c000698a:	a1 40 fb 01 c0       	mov    eax,ds:0xc001fb40
c000698f:	85 c0                	test   eax,eax
c0006991:	74 0c                	je     c000699f <fs_iso9660_shutdown+0x55>
c0006993:	83 ec 0c             	sub    esp,0xc
c0006996:	50                   	push   eax
c0006997:	e8 2d 0e 00 00       	call   c00077c9 <free>
c000699c:	83 c4 10             	add    esp,0x10
c000699f:	c7 05 40 fb 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001fb40,0x0
c00069a9:	c7 05 d0 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00204d0,0x0
c00069b3:	31 c0                	xor    eax,eax
c00069b5:	83 c4 08             	add    esp,0x8
c00069b8:	5b                   	pop    ebx
c00069b9:	c3                   	ret    

c00069ba <Computer::close(int, int, void*)>:
c00069ba:	57                   	push   edi
c00069bb:	56                   	push   esi
c00069bc:	53                   	push   ebx
c00069bd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00069c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00069c5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00069c9:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069cf:	83 ec 0c             	sub    esp,0xc
c00069d2:	50                   	push   eax
c00069d3:	e8 66 50 00 00       	call   c000ba3e <Device::closeAll()>
c00069d8:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c00069de:	83 c4 10             	add    esp,0x10
c00069e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00069e3:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c00069e7:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c00069ef:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c00069f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00069f7:	5b                   	pop    ebx
c00069f8:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00069fb:	5e                   	pop    esi
c00069fc:	5f                   	pop    edi
c00069fd:	ff e0                	jmp    eax

c00069ff <Krnl::firstTask()>:
c00069ff:	53                   	push   ebx
c0006a00:	83 ec 14             	sub    esp,0x14
c0006a03:	fb                   	sti    
c0006a04:	68 f1 cf 01 c0       	push   0xc001cff1
c0006a09:	e8 d5 90 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006a0e:	c7 04 24 20 07 00 00 	mov    DWORD PTR [esp],0x720
c0006a15:	e8 9f 0d 00 00       	call   c00077b9 <malloc>
c0006a1a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006a21:	89 c3                	mov    ebx,eax
c0006a23:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0006a28:	50                   	push   eax
c0006a29:	68 0a d0 01 c0       	push   0xc001d00a
c0006a2e:	6a 01                	push   0x1
c0006a30:	53                   	push   ebx
c0006a31:	e8 16 c5 00 00       	call   c0012f4c <Process::Process(bool, char const*, Process*, char**)>
c0006a36:	83 c4 20             	add    esp,0x20
c0006a39:	68 ff 00 00 00       	push   0xff
c0006a3e:	6a 00                	push   0x0
c0006a40:	68 0f 72 00 c0       	push   0xc000720f
c0006a45:	53                   	push   ebx
c0006a46:	e8 19 c7 00 00       	call   c0013164 <Process::createThread(void (*)(void*), void*, int)>
c0006a4b:	8b 15 b0 37 02 c0    	mov    edx,DWORD PTR ds:0xc00237b0
c0006a51:	6a 7a                	push   0x7a
c0006a53:	6a 00                	push   0x0
c0006a55:	68 b8 3b 01 c0       	push   0xc0013bb8
c0006a5a:	52                   	push   edx
c0006a5b:	e8 04 c7 00 00       	call   c0013164 <Process::createThread(void (*)(void*), void*, int)>
c0006a60:	83 c4 14             	add    esp,0x14
c0006a63:	a3 68 37 02 c0       	mov    ds:0xc0023768,eax
c0006a68:	68 08 d1 01 c0       	push   0xc001d108
c0006a6d:	c6 05 dd 04 02 c0 01 	mov    BYTE PTR ds:0xc00204dd,0x1
c0006a74:	e8 6a 90 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006a79:	e8 19 d5 00 00       	call   c0013f97 <Vm::initialise8086()>
c0006a7e:	e8 ff 3d 00 00       	call   c000a882 <Fs::initVFS()>
c0006a83:	c7 04 24 17 d0 01 c0 	mov    DWORD PTR [esp],0xc001d017
c0006a8a:	e8 54 90 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006a8f:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0006a94:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006a9a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006a9c:	6a 00                	push   0x0
c0006a9e:	6a 00                	push   0x0
c0006aa0:	6a 00                	push   0x0
c0006aa2:	50                   	push   eax
c0006aa3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006aa6:	83 c4 14             	add    esp,0x14
c0006aa9:	68 08 d1 01 c0       	push   0xc001d108
c0006aae:	e8 30 90 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006ab3:	e8 06 95 00 00       	call   c000ffbe <Krnl::loadSystemEnv()>
c0006ab8:	e8 63 97 00 00       	call   c0010220 <Krnl::setupPowerManager()>
c0006abd:	83 c4 0c             	add    esp,0xc
c0006ac0:	6a 3a                	push   0x3a
c0006ac2:	68 31 d0 01 c0       	push   0xc001d031
c0006ac7:	68 3a d0 01 c0       	push   0xc001d03a
c0006acc:	e8 5d aa 00 00       	call   c001152e <Reg::readIntWithDefault(char*, char*, int)>
c0006ad1:	89 04 24             	mov    DWORD PTR [esp],eax
c0006ad4:	e8 b7 48 00 00       	call   c000b390 <User::loadClockSettings(int)>
c0006ad9:	c7 04 24 2c d1 01 c0 	mov    DWORD PTR [esp],0xc001d12c
c0006ae0:	e8 fe 8f 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006ae5:	59                   	pop    ecx
c0006ae6:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0006aeb:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006af1:	53                   	push   ebx
c0006af2:	e8 45 4f 00 00       	call   c000ba3c <Device::loadDriversForAll()>
c0006af7:	c7 04 24 42 d0 01 c0 	mov    DWORD PTR [esp],0xc001d042
c0006afe:	e8 e0 8f 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006b03:	58                   	pop    eax
c0006b04:	8b 1d d8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204d8
c0006b0a:	5a                   	pop    edx
c0006b0b:	6a 01                	push   0x1
c0006b0d:	68 53 d0 01 c0       	push   0xc001d053
c0006b12:	e8 63 be 00 00       	call   c001297a <Thr::loadDLL(char const*, bool)>
c0006b17:	59                   	pop    ecx
c0006b18:	5a                   	pop    edx
c0006b19:	53                   	push   ebx
c0006b1a:	50                   	push   eax
c0006b1b:	e8 8b c0 00 00       	call   c0012bab <Thr::executeDLL(unsigned long, void*)>
c0006b20:	83 c4 10             	add    esp,0x10
c0006b23:	83 ec 0c             	sub    esp,0xc
c0006b26:	6a 02                	push   0x2
c0006b28:	e8 53 ca 00 00       	call   c0013580 <blockTask(TaskState)>
c0006b2d:	83 c4 10             	add    esp,0x10
c0006b30:	eb f1                	jmp    c0006b23 <Krnl::firstTask()+0x124>

c0006b32 <Computer::Computer()>:
c0006b32:	83 ec 0c             	sub    esp,0xc
c0006b35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b39:	83 ec 08             	sub    esp,0x8
c0006b3c:	68 6f d0 01 c0       	push   0xc001d06f
c0006b41:	50                   	push   eax
c0006b42:	e8 71 4f 00 00       	call   c000bab8 <Device::Device(char const*)>
c0006b47:	83 c4 10             	add    esp,0x10
c0006b4a:	ba 78 d1 01 c0       	mov    edx,0xc001d178
c0006b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b53:	89 10                	mov    DWORD PTR [eax],edx
c0006b55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b59:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b67:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006b71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b75:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006b7b:	83 ca 04             	or     edx,0x4
c0006b7e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b88:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006b8e:	31 d2                	xor    edx,edx
c0006b90:	88 c2                	mov    dl,al
c0006b92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b96:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006b9d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006ba7:	31 d2                	xor    edx,edx
c0006ba9:	88 c2                	mov    dl,al
c0006bab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006baf:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006bb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006bbe:	8d 50 01             	lea    edx,[eax+0x1]
c0006bc1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006bc5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006bcb:	31 d2                	xor    edx,edx
c0006bcd:	88 c2                	mov    dl,al
c0006bcf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bd3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006bd7:	83 e1 3f             	and    ecx,0x3f
c0006bda:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006bde:	90                   	nop
c0006bdf:	83 c4 0c             	add    esp,0xc
c0006be2:	c3                   	ret    
c0006be3:	90                   	nop

c0006be4 <Computer::setBootMessage(char const*)>:
c0006be4:	c3                   	ret    
c0006be5:	90                   	nop

c0006be6 <Computer::detectFeatures()>:
c0006be6:	55                   	push   ebp
c0006be7:	57                   	push   edi
c0006be8:	56                   	push   esi
c0006be9:	53                   	push   ebx
c0006bea:	83 ec 1c             	sub    esp,0x1c
c0006bed:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006bf1:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006bfb:	e8 f9 95 ff ff       	call   c00001f9 <detectCPUID>
c0006c00:	85 c0                	test   eax,eax
c0006c02:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c08:	0f 95 c2             	setne  dl
c0006c0b:	83 e0 fd             	and    eax,0xfffffffd
c0006c0e:	01 d2                	add    edx,edx
c0006c10:	09 d0                	or     eax,edx
c0006c12:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c18:	a8 02                	test   al,0x2
c0006c1a:	75 46                	jne    c0006c62 <Computer::detectFeatures()+0x7c>
c0006c1c:	f6 05 f1 04 02 c0 04 	test   BYTE PTR ds:0xc00204f1,0x4
c0006c23:	74 07                	je     c0006c2c <Computer::detectFeatures()+0x46>
c0006c25:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006c2c:	e8 15 4d 01 00       	call   c001b946 <x87Detect>
c0006c31:	83 e0 01             	and    eax,0x1
c0006c34:	c1 e0 04             	shl    eax,0x4
c0006c37:	88 c2                	mov    dl,al
c0006c39:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c3f:	83 e0 ef             	and    eax,0xffffffef
c0006c42:	09 d0                	or     eax,edx
c0006c44:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c4a:	a8 10                	test   al,0x10
c0006c4c:	0f 85 2a 01 00 00    	jne    c0006d7c <Computer::detectFeatures()+0x196>
c0006c52:	84 c0                	test   al,al
c0006c54:	0f 88 45 01 00 00    	js     c0006d9f <Computer::detectFeatures()+0x1b9>
c0006c5a:	83 c4 1c             	add    esp,0x1c
c0006c5d:	5b                   	pop    ebx
c0006c5e:	5e                   	pop    esi
c0006c5f:	5f                   	pop    edi
c0006c60:	5d                   	pop    ebp
c0006c61:	c3                   	ret    
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	6a 20                	push   0x20
c0006c67:	e8 a4 83 00 00       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c0006c6c:	83 e0 01             	and    eax,0x1
c0006c6f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006c76:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006c7c:	83 e0 f7             	and    eax,0xfffffff7
c0006c7f:	09 d0                	or     eax,edx
c0006c81:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006c87:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006c8e:	e8 7d 83 00 00       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c0006c93:	83 e0 01             	and    eax,0x1
c0006c96:	88 c2                	mov    dl,al
c0006c98:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006c9e:	83 e0 fe             	and    eax,0xfffffffe
c0006ca1:	09 d0                	or     eax,edx
c0006ca3:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ca9:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006cb0:	e8 5b 83 00 00       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c0006cb5:	c1 e0 07             	shl    eax,0x7
c0006cb8:	88 c2                	mov    dl,al
c0006cba:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006cc0:	83 e0 7f             	and    eax,0x7f
c0006cc3:	09 d0                	or     eax,edx
c0006cc5:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006ccb:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006cd2:	e8 39 83 00 00       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c0006cd7:	83 c4 10             	add    esp,0x10
c0006cda:	83 e0 01             	and    eax,0x1
c0006cdd:	c1 e0 05             	shl    eax,0x5
c0006ce0:	88 c2                	mov    dl,al
c0006ce2:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ce8:	83 e0 df             	and    eax,0xffffffdf
c0006ceb:	09 d0                	or     eax,edx
c0006ced:	f7 05 f0 04 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc00204f0,0x401
c0006cf7:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006cfd:	0f 84 c2 00 00 00    	je     c0006dc5 <Computer::detectFeatures()+0x1df>
c0006d03:	83 e0 fe             	and    eax,0xfffffffe
c0006d06:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d0c:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d12:	88 c2                	mov    dl,al
c0006d14:	83 e2 09             	and    edx,0x9
c0006d17:	fe ca                	dec    dl
c0006d19:	75 09                	jne    c0006d24 <Computer::detectFeatures()+0x13e>
c0006d1b:	83 e0 fe             	and    eax,0xfffffffe
c0006d1e:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d24:	83 ec 0c             	sub    esp,0xc
c0006d27:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006d2b:	50                   	push   eax
c0006d2c:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006d30:	55                   	push   ebp
c0006d31:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006d35:	57                   	push   edi
c0006d36:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006d3a:	56                   	push   esi
c0006d3b:	68 00 00 00 80       	push   0x80000000
c0006d40:	e8 47 82 00 00       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d45:	83 c4 20             	add    esp,0x20
c0006d48:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006d4f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006d53:	0f 86 c3 fe ff ff    	jbe    c0006c1c <Computer::detectFeatures()+0x36>
c0006d59:	83 ec 0c             	sub    esp,0xc
c0006d5c:	50                   	push   eax
c0006d5d:	55                   	push   ebp
c0006d5e:	57                   	push   edi
c0006d5f:	56                   	push   esi
c0006d60:	68 01 00 00 80       	push   0x80000001
c0006d65:	e8 22 82 00 00       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006d6a:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006d74:	83 c4 20             	add    esp,0x20
c0006d77:	e9 a0 fe ff ff       	jmp    c0006c1c <Computer::detectFeatures()+0x36>
c0006d7c:	e8 7f 4b 01 00       	call   c001b900 <absolutelyNoChanceInHell>
c0006d81:	88 c2                	mov    dl,al
c0006d83:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006d89:	c1 e2 07             	shl    edx,0x7
c0006d8c:	83 e0 7f             	and    eax,0x7f
c0006d8f:	09 d0                	or     eax,edx
c0006d91:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006d97:	84 c0                	test   al,al
c0006d99:	0f 89 bb fe ff ff    	jns    c0006c5a <Computer::detectFeatures()+0x74>
c0006d9f:	e8 dc 48 01 00       	call   c001b680 <avxDetect>
c0006da4:	83 e0 01             	and    eax,0x1
c0006da7:	c1 e0 05             	shl    eax,0x5
c0006daa:	88 c2                	mov    dl,al
c0006dac:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006db2:	83 e0 df             	and    eax,0xffffffdf
c0006db5:	09 d0                	or     eax,edx
c0006db7:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006dbd:	83 c4 1c             	add    esp,0x1c
c0006dc0:	5b                   	pop    ebx
c0006dc1:	5e                   	pop    esi
c0006dc2:	5f                   	pop    edi
c0006dc3:	5d                   	pop    ebp
c0006dc4:	c3                   	ret    
c0006dc5:	83 ec 0c             	sub    esp,0xc
c0006dc8:	68 00 02 00 00       	push   0x200
c0006dcd:	e8 3e 82 00 00       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c0006dd2:	83 c4 10             	add    esp,0x10
c0006dd5:	83 e0 01             	and    eax,0x1
c0006dd8:	88 c2                	mov    dl,al
c0006dda:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006de0:	83 e0 fe             	and    eax,0xfffffffe
c0006de3:	09 d0                	or     eax,edx
c0006de5:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006deb:	e9 1c ff ff ff       	jmp    c0006d0c <Computer::detectFeatures()+0x126>

c0006df0 <Computer::displayFeatures()>:
c0006df0:	c3                   	ret    
c0006df1:	90                   	nop

c0006df2 <Computer::rdmsr(unsigned int)>:
c0006df2:	83 ec 0c             	sub    esp,0xc
c0006df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006df9:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e00:	74 0a                	je     c0006e0c <Computer::rdmsr(unsigned int)+0x1a>
c0006e02:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e06:	0f 32                	rdmsr  
c0006e08:	83 c4 0c             	add    esp,0xc
c0006e0b:	c3                   	ret    
c0006e0c:	83 ec 0c             	sub    esp,0xc
c0006e0f:	68 78 d0 01 c0       	push   0xc001d078
c0006e14:	e8 42 93 00 00       	call   c001015b <KePanic(char const*)>
c0006e19:	83 c4 10             	add    esp,0x10
c0006e1c:	eb e4                	jmp    c0006e02 <Computer::rdmsr(unsigned int)+0x10>

c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>:
c0006e1e:	57                   	push   edi
c0006e1f:	56                   	push   esi
c0006e20:	52                   	push   edx
c0006e21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e25:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0006e29:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006e2d:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006e34:	74 0e                	je     c0006e44 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c0006e36:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006e3a:	89 f0                	mov    eax,esi
c0006e3c:	89 fa                	mov    edx,edi
c0006e3e:	0f 30                	wrmsr  
c0006e40:	58                   	pop    eax
c0006e41:	5e                   	pop    esi
c0006e42:	5f                   	pop    edi
c0006e43:	c3                   	ret    
c0006e44:	83 ec 0c             	sub    esp,0xc
c0006e47:	68 7e d0 01 c0       	push   0xc001d07e
c0006e4c:	e8 0a 93 00 00       	call   c001015b <KePanic(char const*)>
c0006e51:	83 c4 10             	add    esp,0x10
c0006e54:	eb e0                	jmp    c0006e36 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c0006e56 <Computer::shutdown()>:
c0006e56:	83 ec 0c             	sub    esp,0xc
c0006e59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e5d:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e5f:	6a 00                	push   0x0
c0006e61:	6a 00                	push   0x0
c0006e63:	6a 00                	push   0x0
c0006e65:	50                   	push   eax
c0006e66:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e69:	83 c4 1c             	add    esp,0x1c
c0006e6c:	c3                   	ret    
c0006e6d:	90                   	nop

c0006e6e <Computer::restart()>:
c0006e6e:	83 ec 0c             	sub    esp,0xc
c0006e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e75:	8b 10                	mov    edx,DWORD PTR [eax]
c0006e77:	6a 00                	push   0x0
c0006e79:	6a 00                	push   0x0
c0006e7b:	6a 01                	push   0x1
c0006e7d:	50                   	push   eax
c0006e7e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0006e81:	83 c4 1c             	add    esp,0x1c
c0006e84:	c3                   	ret    
c0006e85:	90                   	nop

c0006e86 <Computer::sleep()>:
c0006e86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e8a:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006e90:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006e94:	e9 ef 7b 00 00       	jmp    c000ea88 <ACPI::sleep()>
c0006e99:	90                   	nop

c0006e9a <Computer::nmiEnabled()>:
c0006e9a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006e9e:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0006ea4:	c3                   	ret    
c0006ea5:	90                   	nop

c0006ea6 <Computer::readCMOS(unsigned char)>:
c0006ea6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006eaa:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006eb1:	19 c0                	sbb    eax,eax
c0006eb3:	83 e0 80             	and    eax,0xffffff80
c0006eb6:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006eba:	e6 70                	out    0x70,al
c0006ebc:	e4 71                	in     al,0x71
c0006ebe:	c3                   	ret    
c0006ebf:	90                   	nop

c0006ec0 <Computer::enableNMI(bool)>:
c0006ec0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006ec4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006ec8:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c0006ece:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c0006ed6:	eb ce                	jmp    c0006ea6 <Computer::readCMOS(unsigned char)>

c0006ed8 <Computer::open(int, int, void*)>:
c0006ed8:	56                   	push   esi
c0006ed9:	53                   	push   ebx
c0006eda:	83 ec 10             	sub    esp,0x10
c0006edd:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0006ee1:	f6 05 f0 04 02 c0 04 	test   BYTE PTR ds:0xc00204f0,0x4
c0006ee8:	68 84 d0 01 c0       	push   0xc001d084
c0006eed:	0f 94 05 80 f1 01 c0 	sete   BYTE PTR ds:0xc001f180
c0006ef4:	e8 ea 8b 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006ef9:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c0006f00:	e8 b4 08 00 00       	call   c00077b9 <malloc>
c0006f05:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f08:	89 c6                	mov    esi,eax
c0006f0a:	e8 11 77 00 00       	call   c000e620 <ACPI::ACPI()>
c0006f0f:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c0006f15:	58                   	pop    eax
c0006f16:	5a                   	pop    edx
c0006f17:	56                   	push   esi
c0006f18:	53                   	push   ebx
c0006f19:	e8 02 4a 00 00       	call   c000b920 <Device::addChild(Device*)>
c0006f1e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006f21:	e8 c0 fc ff ff       	call   c0006be6 <Computer::detectFeatures()>
c0006f26:	59                   	pop    ecx
c0006f27:	5e                   	pop    esi
c0006f28:	6a 01                	push   0x1
c0006f2a:	53                   	push   ebx
c0006f2b:	e8 90 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006f30:	c7 04 24 9c d0 01 c0 	mov    DWORD PTR [esp],0xc001d09c
c0006f37:	e8 a7 8b 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006f3c:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0006f43:	e8 71 08 00 00       	call   c00077b9 <malloc>
c0006f48:	89 04 24             	mov    DWORD PTR [esp],eax
c0006f4b:	89 c6                	mov    esi,eax
c0006f4d:	e8 76 81 00 00       	call   c000f0c8 <CPU::CPU()>
c0006f52:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c0006f58:	58                   	pop    eax
c0006f59:	5a                   	pop    edx
c0006f5a:	56                   	push   esi
c0006f5b:	53                   	push   ebx
c0006f5c:	e8 bf 49 00 00       	call   c000b920 <Device::addChild(Device*)>
c0006f61:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0006f67:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0006f6b:	8b 10                	mov    edx,DWORD PTR [eax]
c0006f6d:	51                   	push   ecx
c0006f6e:	6a 00                	push   0x0
c0006f70:	6a 00                	push   0x0
c0006f72:	50                   	push   eax
c0006f73:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006f76:	83 c4 14             	add    esp,0x14
c0006f79:	68 4c d1 01 c0       	push   0xc001d14c
c0006f7e:	e8 60 8b 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006f83:	e8 46 e1 00 00       	call   c00150ce <HalInitialiseCoprocessor()>
c0006f88:	c7 04 24 b6 d0 01 c0 	mov    DWORD PTR [esp],0xc001d0b6
c0006f8f:	e8 4f 8b 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c0006f94:	c7 04 24 ff 69 00 c0 	mov    DWORD PTR [esp],0xc00069ff
c0006f9b:	e8 dc c2 00 00       	call   c001327c <setupMultitasking(void (*)())>
c0006fa0:	83 c4 14             	add    esp,0x14
c0006fa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0006fa8:	5b                   	pop    ebx
c0006fa9:	5e                   	pop    esi
c0006faa:	c3                   	ret    
c0006fab:	90                   	nop

c0006fac <Computer::disableNMI()>:
c0006fac:	6a 00                	push   0x0
c0006fae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006fb2:	50                   	push   eax
c0006fb3:	e8 08 ff ff ff       	call   c0006ec0 <Computer::enableNMI(bool)>
c0006fb8:	5a                   	pop    edx
c0006fb9:	59                   	pop    ecx
c0006fba:	c3                   	ret    
c0006fbb:	90                   	nop

c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>:
c0006fbc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0006fc0:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0006fc7:	19 c0                	sbb    eax,eax
c0006fc9:	83 e0 80             	and    eax,0xffffff80
c0006fcc:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0006fd0:	e6 70                	out    0x70,al
c0006fd2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006fd6:	e6 71                	out    0x71,al
c0006fd8:	c3                   	ret    
c0006fd9:	90                   	nop

c0006fda <Computer::handleNMI()>:
c0006fda:	56                   	push   esi
c0006fdb:	53                   	push   ebx
c0006fdc:	83 ec 10             	sub    esp,0x10
c0006fdf:	e4 92                	in     al,0x92
c0006fe1:	89 c6                	mov    esi,eax
c0006fe3:	e4 61                	in     al,0x61
c0006fe5:	68 d1 d0 01 c0       	push   0xc001d0d1
c0006fea:	88 c3                	mov    bl,al
c0006fec:	e8 ef 34 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0006ff1:	83 c4 10             	add    esp,0x10
c0006ff4:	83 e6 10             	and    esi,0x10
c0006ff7:	75 0d                	jne    c0007006 <Computer::handleNMI()+0x2c>
c0006ff9:	f6 c3 40             	test   bl,0x40
c0006ffc:	75 1d                	jne    c000701b <Computer::handleNMI()+0x41>
c0006ffe:	84 db                	test   bl,bl
c0007000:	78 2d                	js     c000702f <Computer::handleNMI()+0x55>
c0007002:	58                   	pop    eax
c0007003:	5b                   	pop    ebx
c0007004:	5e                   	pop    esi
c0007005:	c3                   	ret    
c0007006:	83 ec 0c             	sub    esp,0xc
c0007009:	68 e2 d0 01 c0       	push   0xc001d0e2
c000700e:	e8 48 91 00 00       	call   c001015b <KePanic(char const*)>
c0007013:	83 c4 10             	add    esp,0x10
c0007016:	f6 c3 40             	test   bl,0x40
c0007019:	74 e3                	je     c0006ffe <Computer::handleNMI()+0x24>
c000701b:	83 ec 0c             	sub    esp,0xc
c000701e:	68 ef d0 01 c0       	push   0xc001d0ef
c0007023:	e8 33 91 00 00       	call   c001015b <KePanic(char const*)>
c0007028:	83 c4 10             	add    esp,0x10
c000702b:	84 db                	test   bl,bl
c000702d:	79 d3                	jns    c0007002 <Computer::handleNMI()+0x28>
c000702f:	c7 44 24 10 f9 d0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d0f9
c0007037:	5a                   	pop    edx
c0007038:	5b                   	pop    ebx
c0007039:	5e                   	pop    esi
c000703a:	e9 1c 91 00 00       	jmp    c001015b <KePanic(char const*)>
c000703f:	90                   	nop

c0007040 <GDTEntry::setBase(unsigned int)>:
c0007040:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007044:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007048:	89 c1                	mov    ecx,eax
c000704a:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000704e:	c1 e9 10             	shr    ecx,0x10
c0007051:	c1 e8 18             	shr    eax,0x18
c0007054:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007057:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000705a:	c3                   	ret    
c000705b:	90                   	nop

c000705c <GDTEntry::setLimit(unsigned int)>:
c000705c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007060:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007064:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007067:	66 89 01             	mov    WORD PTR [ecx],ax
c000706a:	83 e2 f0             	and    edx,0xfffffff0
c000706d:	c1 e8 10             	shr    eax,0x10
c0007070:	83 e0 0f             	and    eax,0xf
c0007073:	09 d0                	or     eax,edx
c0007075:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c0007078:	c3                   	ret    
c0007079:	90                   	nop

c000707a <GDT::GDT()>:
c000707a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000707e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007084:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007088:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000708e:	90                   	nop
c000708f:	c3                   	ret    

c0007090 <GDT::addEntry(GDTEntry)>:
c0007090:	53                   	push   ebx
c0007091:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007095:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007099:	8b 02                	mov    eax,DWORD PTR [edx]
c000709b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000709f:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c00070a3:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c00070a7:	8d 48 01             	lea    ecx,[eax+0x1]
c00070aa:	c1 e0 03             	shl    eax,0x3
c00070ad:	89 0a                	mov    DWORD PTR [edx],ecx
c00070af:	5b                   	pop    ebx
c00070b0:	c3                   	ret    
c00070b1:	90                   	nop

c00070b2 <GDT::getNumberOfEntries()>:
c00070b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070b6:	8b 00                	mov    eax,DWORD PTR [eax]
c00070b8:	c3                   	ret    
c00070b9:	90                   	nop

c00070ba <GDT::flush()>:
c00070ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070be:	8b 10                	mov    edx,DWORD PTR [eax]
c00070c0:	83 c0 04             	add    eax,0x4
c00070c3:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00070ca:	a3 e2 04 02 c0       	mov    ds:0xc00204e2,eax
c00070cf:	66 89 15 e0 04 02 c0 	mov    WORD PTR ds:0xc00204e0,dx
c00070d6:	e9 82 92 ff ff       	jmp    c000035d <loadGDT>
c00070db:	90                   	nop

c00070dc <GDT::setup()>:
c00070dc:	57                   	push   edi
c00070dd:	56                   	push   esi
c00070de:	53                   	push   ebx
c00070df:	83 ec 30             	sub    esp,0x30
c00070e2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00070e6:	6a 00                	push   0x0
c00070e8:	8d 74 24 14          	lea    esi,[esp+0x14]
c00070ec:	56                   	push   esi
c00070ed:	e8 4e ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c00070f2:	6a 00                	push   0x0
c00070f4:	56                   	push   esi
c00070f5:	e8 62 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c00070fa:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c0007102:	6a 00                	push   0x0
c0007104:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0007108:	56                   	push   esi
c0007109:	e8 32 ff ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000710e:	68 ff ff ff 00       	push   0xffffff
c0007113:	56                   	push   esi
c0007114:	e8 43 ff ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0007119:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000711d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007121:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007125:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0007129:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000712e:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007133:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007137:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000713b:	89 f8                	mov    eax,edi
c000713d:	89 fa                	mov    edx,edi
c000713f:	80 e4 f7             	and    ah,0xf7
c0007142:	80 ce 60             	or     dh,0x60
c0007145:	89 c7                	mov    edi,eax
c0007147:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000714b:	80 cc 60             	or     ah,0x60
c000714e:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007152:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007156:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000715a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000715e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007162:	83 c4 20             	add    esp,0x20
c0007165:	6a 00                	push   0x0
c0007167:	8d 44 24 24          	lea    eax,[esp+0x24]
c000716b:	50                   	push   eax
c000716c:	e8 cf fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0007171:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007175:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c0007179:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c000717e:	6a 00                	push   0x0
c0007180:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007184:	50                   	push   eax
c0007185:	e8 b6 fe ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c000718a:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c000718f:	83 c4 0c             	add    esp,0xc
c0007192:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007196:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000719a:	53                   	push   ebx
c000719b:	e8 f0 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071a0:	83 c4 0c             	add    esp,0xc
c00071a3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071a7:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00071ab:	53                   	push   ebx
c00071ac:	e8 df fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071b1:	83 c4 0c             	add    esp,0xc
c00071b4:	57                   	push   edi
c00071b5:	56                   	push   esi
c00071b6:	53                   	push   ebx
c00071b7:	e8 d4 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071bc:	83 c4 0c             	add    esp,0xc
c00071bf:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00071c7:	53                   	push   ebx
c00071c8:	e8 c3 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071cd:	83 c4 0c             	add    esp,0xc
c00071d0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00071d8:	53                   	push   ebx
c00071d9:	e8 b2 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071de:	83 c4 0c             	add    esp,0xc
c00071e1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00071e9:	53                   	push   ebx
c00071ea:	e8 a1 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c00071ef:	83 c4 0c             	add    esp,0xc
c00071f2:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071f6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00071fa:	53                   	push   ebx
c00071fb:	e8 90 fe ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0007200:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007203:	e8 b2 fe ff ff       	call   c00070ba <GDT::flush()>
c0007208:	83 c4 40             	add    esp,0x40
c000720b:	5b                   	pop    ebx
c000720c:	5e                   	pop    esi
c000720d:	5f                   	pop    edi
c000720e:	c3                   	ret    

c000720f <idleFunction(void*)>:
c000720f:	83 ec 0c             	sub    esp,0xc
c0007212:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0007217:	48                   	dec    eax
c0007218:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000721d:	75 01                	jne    c0007220 <idleFunction(void*)+0x11>
c000721f:	fb                   	sti    
c0007220:	e8 83 db 00 00       	call   c0014da8 <HalSystemIdle()>
c0007225:	e8 d8 4c 01 00       	call   c001bf02 <idleCommon()>
c000722a:	eb f4                	jmp    c0007220 <idleFunction(void*)+0x11>

c000722c <IDTEntry::IDTEntry(bool)>:
c000722c:	83 ec 04             	sub    esp,0x4
c000722f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007233:	88 04 24             	mov    BYTE PTR [esp],al
c0007236:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000723a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007244:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007248:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000724c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000724f:	83 e2 f0             	and    edx,0xfffffff0
c0007252:	83 ca 0e             	or     edx,0xe
c0007255:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000725c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000725f:	83 e2 ef             	and    edx,0xffffffef
c0007262:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007265:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007269:	74 05                	je     c0007270 <IDTEntry::IDTEntry(bool)+0x44>
c000726b:	b2 03                	mov    dl,0x3
c000726d:	eb 05                	jmp    c0007274 <IDTEntry::IDTEntry(bool)+0x48>
c000726f:	90                   	nop
c0007270:	b2 00                	mov    dl,0x0
c0007272:	66 90                	xchg   ax,ax
c0007274:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007278:	83 e2 03             	and    edx,0x3
c000727b:	88 d1                	mov    cl,dl
c000727d:	c1 e1 05             	shl    ecx,0x5
c0007280:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007283:	83 e2 9f             	and    edx,0xffffff9f
c0007286:	09 ca                	or     edx,ecx
c0007288:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000728b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000728f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007292:	83 ca 80             	or     edx,0xffffff80
c0007295:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007298:	90                   	nop
c0007299:	83 c4 04             	add    esp,0x4
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <IDTEntry::setOffset(unsigned int)>:
c000729e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00072a2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072a6:	66 89 02             	mov    WORD PTR [edx],ax
c00072a9:	c1 e8 10             	shr    eax,0x10
c00072ac:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00072b0:	c3                   	ret    
c00072b1:	90                   	nop
c00072b2:	66 90                	xchg   ax,ax

c00072b4 <IDT::IDT()>:
c00072b4:	90                   	nop
c00072b5:	c3                   	ret    

c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00072b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072ba:	83 c0 30             	add    eax,0x30
c00072bd:	c3                   	ret    

c00072be <IDT::addEntry(IDTEntry, int)>:
c00072be:	53                   	push   ebx
c00072bf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00072c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00072c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00072cb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00072cf:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00072d2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00072d6:	5b                   	pop    ebx
c00072d7:	c3                   	ret    

c00072d8 <IDT::addEntry(int, void (*)(), bool)>:
c00072d8:	53                   	push   ebx
c00072d9:	83 ec 10             	sub    esp,0x10
c00072dc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00072e1:	50                   	push   eax
c00072e2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00072e6:	53                   	push   ebx
c00072e7:	e8 40 ff ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c00072ec:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00072f0:	53                   	push   ebx
c00072f1:	e8 a8 ff ff ff       	call   c000729e <IDTEntry::setOffset(unsigned int)>
c00072f6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00072fa:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00072fe:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007302:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007306:	e8 b3 ff ff ff       	call   c00072be <IDT::addEntry(IDTEntry, int)>
c000730b:	83 c4 30             	add    esp,0x30
c000730e:	5b                   	pop    ebx
c000730f:	c3                   	ret    

c0007310 <IDT::flush()>:
c0007310:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007314:	66 c7 05 e8 04 02 c0 ff 07 	mov    WORD PTR ds:0xc00204e8,0x7ff
c000731d:	a3 ea 04 02 c0       	mov    ds:0xc00204ea,eax
c0007322:	0f 01 1d e8 04 02 c0 	lidtd  ds:0xc00204e8
c0007329:	c3                   	ret    

c000732a <IDT::setup()>:
c000732a:	57                   	push   edi
c000732b:	56                   	push   esi
c000732c:	53                   	push   ebx
c000732d:	83 ec 10             	sub    esp,0x10
c0007330:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007334:	6a 00                	push   0x0
c0007336:	68 10 b7 01 c0       	push   0xc001b710
c000733b:	6a 00                	push   0x0
c000733d:	53                   	push   ebx
c000733e:	e8 95 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007343:	6a 00                	push   0x0
c0007345:	68 20 b7 01 c0       	push   0xc001b720
c000734a:	6a 01                	push   0x1
c000734c:	53                   	push   ebx
c000734d:	e8 86 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007352:	83 c4 20             	add    esp,0x20
c0007355:	6a 00                	push   0x0
c0007357:	68 2a b7 01 c0       	push   0xc001b72a
c000735c:	6a 02                	push   0x2
c000735e:	53                   	push   ebx
c000735f:	e8 74 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007364:	6a 00                	push   0x0
c0007366:	68 34 b7 01 c0       	push   0xc001b734
c000736b:	6a 03                	push   0x3
c000736d:	53                   	push   ebx
c000736e:	e8 65 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007373:	83 c4 20             	add    esp,0x20
c0007376:	6a 00                	push   0x0
c0007378:	68 3e b7 01 c0       	push   0xc001b73e
c000737d:	6a 04                	push   0x4
c000737f:	53                   	push   ebx
c0007380:	e8 53 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007385:	6a 00                	push   0x0
c0007387:	68 48 b7 01 c0       	push   0xc001b748
c000738c:	6a 05                	push   0x5
c000738e:	53                   	push   ebx
c000738f:	e8 44 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007394:	83 c4 20             	add    esp,0x20
c0007397:	6a 00                	push   0x0
c0007399:	68 52 b7 01 c0       	push   0xc001b752
c000739e:	6a 06                	push   0x6
c00073a0:	53                   	push   ebx
c00073a1:	e8 32 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073a6:	6a 00                	push   0x0
c00073a8:	68 5c b7 01 c0       	push   0xc001b75c
c00073ad:	6a 07                	push   0x7
c00073af:	53                   	push   ebx
c00073b0:	e8 23 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073b5:	83 c4 20             	add    esp,0x20
c00073b8:	6a 00                	push   0x0
c00073ba:	68 66 b7 01 c0       	push   0xc001b766
c00073bf:	6a 08                	push   0x8
c00073c1:	53                   	push   ebx
c00073c2:	e8 11 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073c7:	6a 00                	push   0x0
c00073c9:	68 6e b7 01 c0       	push   0xc001b76e
c00073ce:	6a 09                	push   0x9
c00073d0:	53                   	push   ebx
c00073d1:	e8 02 ff ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073d6:	83 c4 20             	add    esp,0x20
c00073d9:	6a 00                	push   0x0
c00073db:	68 78 b7 01 c0       	push   0xc001b778
c00073e0:	6a 0a                	push   0xa
c00073e2:	53                   	push   ebx
c00073e3:	e8 f0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073e8:	6a 00                	push   0x0
c00073ea:	68 80 b7 01 c0       	push   0xc001b780
c00073ef:	6a 0b                	push   0xb
c00073f1:	53                   	push   ebx
c00073f2:	e8 e1 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00073f7:	83 c4 20             	add    esp,0x20
c00073fa:	6a 00                	push   0x0
c00073fc:	68 88 b7 01 c0       	push   0xc001b788
c0007401:	6a 0c                	push   0xc
c0007403:	53                   	push   ebx
c0007404:	e8 cf fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007409:	6a 00                	push   0x0
c000740b:	68 90 b7 01 c0       	push   0xc001b790
c0007410:	6a 0d                	push   0xd
c0007412:	53                   	push   ebx
c0007413:	e8 c0 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007418:	83 c4 20             	add    esp,0x20
c000741b:	6a 00                	push   0x0
c000741d:	68 98 b7 01 c0       	push   0xc001b798
c0007422:	6a 0e                	push   0xe
c0007424:	53                   	push   ebx
c0007425:	e8 ae fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000742a:	6a 00                	push   0x0
c000742c:	68 a0 b7 01 c0       	push   0xc001b7a0
c0007431:	6a 0f                	push   0xf
c0007433:	53                   	push   ebx
c0007434:	e8 9f fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007439:	83 c4 20             	add    esp,0x20
c000743c:	6a 00                	push   0x0
c000743e:	68 aa b7 01 c0       	push   0xc001b7aa
c0007443:	6a 10                	push   0x10
c0007445:	53                   	push   ebx
c0007446:	e8 8d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000744b:	6a 00                	push   0x0
c000744d:	68 b4 b7 01 c0       	push   0xc001b7b4
c0007452:	6a 11                	push   0x11
c0007454:	53                   	push   ebx
c0007455:	e8 7e fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000745a:	83 c4 20             	add    esp,0x20
c000745d:	6a 00                	push   0x0
c000745f:	68 be b7 01 c0       	push   0xc001b7be
c0007464:	6a 12                	push   0x12
c0007466:	53                   	push   ebx
c0007467:	e8 6c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000746c:	6a 01                	push   0x1
c000746e:	68 58 b8 01 c0       	push   0xc001b858
c0007473:	6a 60                	push   0x60
c0007475:	53                   	push   ebx
c0007476:	e8 5d fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000747b:	83 c4 20             	add    esp,0x20
c000747e:	6a 00                	push   0x0
c0007480:	68 5f b8 01 c0       	push   0xc001b85f
c0007485:	6a 20                	push   0x20
c0007487:	53                   	push   ebx
c0007488:	e8 4b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000748d:	6a 00                	push   0x0
c000748f:	68 4a b8 01 c0       	push   0xc001b84a
c0007494:	6a 21                	push   0x21
c0007496:	53                   	push   ebx
c0007497:	e8 3c fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c000749c:	83 c4 20             	add    esp,0x20
c000749f:	6a 00                	push   0x0
c00074a1:	68 51 b8 01 c0       	push   0xc001b851
c00074a6:	6a 22                	push   0x22
c00074a8:	53                   	push   ebx
c00074a9:	e8 2a fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ae:	6a 00                	push   0x0
c00074b0:	68 c8 b7 01 c0       	push   0xc001b7c8
c00074b5:	6a 23                	push   0x23
c00074b7:	53                   	push   ebx
c00074b8:	e8 1b fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074bd:	83 c4 20             	add    esp,0x20
c00074c0:	6a 00                	push   0x0
c00074c2:	68 d2 b7 01 c0       	push   0xc001b7d2
c00074c7:	6a 24                	push   0x24
c00074c9:	53                   	push   ebx
c00074ca:	e8 09 fe ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074cf:	6a 00                	push   0x0
c00074d1:	68 dc b7 01 c0       	push   0xc001b7dc
c00074d6:	6a 25                	push   0x25
c00074d8:	53                   	push   ebx
c00074d9:	e8 fa fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074de:	83 c4 20             	add    esp,0x20
c00074e1:	6a 00                	push   0x0
c00074e3:	68 e6 b7 01 c0       	push   0xc001b7e6
c00074e8:	6a 26                	push   0x26
c00074ea:	53                   	push   ebx
c00074eb:	e8 e8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074f0:	6a 00                	push   0x0
c00074f2:	68 f0 b7 01 c0       	push   0xc001b7f0
c00074f7:	6a 27                	push   0x27
c00074f9:	53                   	push   ebx
c00074fa:	e8 d9 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00074ff:	83 c4 20             	add    esp,0x20
c0007502:	6a 00                	push   0x0
c0007504:	68 fa b7 01 c0       	push   0xc001b7fa
c0007509:	6a 28                	push   0x28
c000750b:	53                   	push   ebx
c000750c:	e8 c7 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007511:	6a 00                	push   0x0
c0007513:	68 04 b8 01 c0       	push   0xc001b804
c0007518:	6a 29                	push   0x29
c000751a:	53                   	push   ebx
c000751b:	e8 b8 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007520:	83 c4 20             	add    esp,0x20
c0007523:	6a 00                	push   0x0
c0007525:	68 0e b8 01 c0       	push   0xc001b80e
c000752a:	6a 2a                	push   0x2a
c000752c:	53                   	push   ebx
c000752d:	e8 a6 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	6a 00                	push   0x0
c0007534:	68 18 b8 01 c0       	push   0xc001b818
c0007539:	6a 2b                	push   0x2b
c000753b:	53                   	push   ebx
c000753c:	e8 97 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007541:	83 c4 20             	add    esp,0x20
c0007544:	6a 00                	push   0x0
c0007546:	68 22 b8 01 c0       	push   0xc001b822
c000754b:	6a 2c                	push   0x2c
c000754d:	53                   	push   ebx
c000754e:	e8 85 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	6a 00                	push   0x0
c0007555:	68 2c b8 01 c0       	push   0xc001b82c
c000755a:	6a 2d                	push   0x2d
c000755c:	53                   	push   ebx
c000755d:	e8 76 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007562:	83 c4 20             	add    esp,0x20
c0007565:	6a 00                	push   0x0
c0007567:	68 36 b8 01 c0       	push   0xc001b836
c000756c:	6a 2e                	push   0x2e
c000756e:	53                   	push   ebx
c000756f:	e8 64 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	6a 00                	push   0x0
c0007576:	68 40 b8 01 c0       	push   0xc001b840
c000757b:	6a 2f                	push   0x2f
c000757d:	53                   	push   ebx
c000757e:	e8 55 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007583:	83 c4 20             	add    esp,0x20
c0007586:	6a 00                	push   0x0
c0007588:	68 96 b8 01 c0       	push   0xc001b896
c000758d:	6a 30                	push   0x30
c000758f:	53                   	push   ebx
c0007590:	e8 43 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	6a 00                	push   0x0
c0007597:	68 a0 b8 01 c0       	push   0xc001b8a0
c000759c:	6a 31                	push   0x31
c000759e:	53                   	push   ebx
c000759f:	e8 34 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075a4:	83 c4 20             	add    esp,0x20
c00075a7:	6a 00                	push   0x0
c00075a9:	68 aa b8 01 c0       	push   0xc001b8aa
c00075ae:	6a 32                	push   0x32
c00075b0:	53                   	push   ebx
c00075b1:	e8 22 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	6a 00                	push   0x0
c00075b8:	68 b4 b8 01 c0       	push   0xc001b8b4
c00075bd:	6a 33                	push   0x33
c00075bf:	53                   	push   ebx
c00075c0:	e8 13 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075c5:	83 c4 20             	add    esp,0x20
c00075c8:	6a 00                	push   0x0
c00075ca:	68 be b8 01 c0       	push   0xc001b8be
c00075cf:	6a 34                	push   0x34
c00075d1:	53                   	push   ebx
c00075d2:	e8 01 fd ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	6a 00                	push   0x0
c00075d9:	68 c8 b8 01 c0       	push   0xc001b8c8
c00075de:	6a 35                	push   0x35
c00075e0:	53                   	push   ebx
c00075e1:	e8 f2 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075e6:	83 c4 20             	add    esp,0x20
c00075e9:	6a 00                	push   0x0
c00075eb:	68 d2 b8 01 c0       	push   0xc001b8d2
c00075f0:	6a 36                	push   0x36
c00075f2:	53                   	push   ebx
c00075f3:	e8 e0 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	6a 00                	push   0x0
c00075fa:	68 dc b8 01 c0       	push   0xc001b8dc
c00075ff:	6a 37                	push   0x37
c0007601:	53                   	push   ebx
c0007602:	e8 d1 fc ff ff       	call   c00072d8 <IDT::addEntry(int, void (*)(), bool)>
c0007607:	83 c4 1c             	add    esp,0x1c
c000760a:	6a 03                	push   0x3
c000760c:	6a 02                	push   0x2
c000760e:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c0007614:	e8 0d 24 00 00       	call   c0009a26 <VAS::allocatePages(int, int)>
c0007619:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007620:	89 c6                	mov    esi,eax
c0007622:	e8 92 01 00 00       	call   c00077b9 <malloc>
c0007627:	81 c6 00 20 00 00    	add    esi,0x2000
c000762d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007630:	89 c7                	mov    edi,eax
c0007632:	e8 99 15 00 00       	call   c0008bd0 <TSS::TSS()>
c0007637:	83 c4 0c             	add    esp,0xc
c000763a:	68 66 b7 01 c0       	push   0xc001b766
c000763f:	56                   	push   esi
c0007640:	57                   	push   edi
c0007641:	e8 ce 15 00 00       	call   c0008c14 <TSS::setup(unsigned long, unsigned long)>
c0007646:	89 c6                	mov    esi,eax
c0007648:	58                   	pop    eax
c0007649:	5a                   	pop    edx
c000764a:	6a 00                	push   0x0
c000764c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007650:	50                   	push   eax
c0007651:	e8 d6 fb ff ff       	call   c000722c <IDTEntry::IDTEntry(bool)>
c0007656:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000765a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000765f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007666:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000766c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007670:	80 ce 05             	or     dh,0x5
c0007673:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007676:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000767a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000767e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007684:	e8 87 fc ff ff       	call   c0007310 <IDT::flush()>
c0007689:	83 c4 20             	add    esp,0x20
c000768c:	5b                   	pop    ebx
c000768d:	5e                   	pop    esi
c000768e:	5f                   	pop    edi
c000768f:	c3                   	ret    

c0007690 <sbrk>:
c0007690:	55                   	push   ebp
c0007691:	57                   	push   edi
c0007692:	56                   	push   esi
c0007693:	53                   	push   ebx
c0007694:	83 ec 1c             	sub    esp,0x1c
c0007697:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000769b:	85 c0                	test   eax,eax
c000769d:	74 5f                	je     c00076fe <sbrk+0x6e>
c000769f:	78 64                	js     c0007705 <sbrk+0x75>
c00076a1:	8b 15 74 f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f174
c00076a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00076ab:	05 ff 0f 00 00       	add    eax,0xfff
c00076b0:	89 c5                	mov    ebp,eax
c00076b2:	78 69                	js     c000771d <sbrk+0x8d>
c00076b4:	c1 fd 0c             	sar    ebp,0xc
c00076b7:	bb 00 00 00 00       	mov    ebx,0x0
c00076bc:	8b 35 d0 05 02 c0    	mov    esi,DWORD PTR ds:0xc00205d0
c00076c2:	8b 3d 74 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f174
c00076c8:	e8 c8 03 00 00       	call   c0007a95 <Phys::allocatePage()>
c00076cd:	68 01 04 00 00       	push   0x401
c00076d2:	57                   	push   edi
c00076d3:	50                   	push   eax
c00076d4:	56                   	push   esi
c00076d5:	e8 48 22 00 00       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c00076da:	81 05 74 f1 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f174,0x1000
c00076e4:	43                   	inc    ebx
c00076e5:	83 c4 10             	add    esp,0x10
c00076e8:	39 dd                	cmp    ebp,ebx
c00076ea:	75 d0                	jne    c00076bc <sbrk+0x2c>
c00076ec:	0f 20 d8             	mov    eax,cr3
c00076ef:	0f 22 d8             	mov    cr3,eax
c00076f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00076f6:	83 c4 1c             	add    esp,0x1c
c00076f9:	5b                   	pop    ebx
c00076fa:	5e                   	pop    esi
c00076fb:	5f                   	pop    edi
c00076fc:	5d                   	pop    ebp
c00076fd:	c3                   	ret    
c00076fe:	a1 74 f1 01 c0       	mov    eax,ds:0xc001f174
c0007703:	eb f1                	jmp    c00076f6 <sbrk+0x66>
c0007705:	83 ec 08             	sub    esp,0x8
c0007708:	50                   	push   eax
c0007709:	68 9c d1 01 c0       	push   0xc001d19c
c000770e:	e8 cd 2d 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0007713:	83 c4 10             	add    esp,0x10
c0007716:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000771b:	eb d9                	jmp    c00076f6 <sbrk+0x66>
c000771d:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007723:	eb 8f                	jmp    c00076b4 <sbrk+0x24>

c0007725 <mmap>:
c0007725:	83 ec 18             	sub    esp,0x18
c0007728:	68 cc d1 01 c0       	push   0xc001d1cc
c000772d:	e8 29 8a 00 00       	call   c001015b <KePanic(char const*)>
c0007732:	b8 00 00 00 00       	mov    eax,0x0
c0007737:	83 c4 1c             	add    esp,0x1c
c000773a:	c3                   	ret    

c000773b <munmap>:
c000773b:	83 ec 18             	sub    esp,0x18
c000773e:	68 d1 d1 01 c0       	push   0xc001d1d1
c0007743:	e8 13 8a 00 00       	call   c001015b <KePanic(char const*)>
c0007748:	b8 00 00 00 00       	mov    eax,0x0
c000774d:	83 c4 1c             	add    esp,0x1c
c0007750:	c3                   	ret    

c0007751 <liballoc_lock()>:
c0007751:	fa                   	cli    
c0007752:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0007758:	b8 00 00 00 00       	mov    eax,0x0
c000775d:	c3                   	ret    

c000775e <liballoc_unlock()>:
c000775e:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0007763:	48                   	dec    eax
c0007764:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0007769:	75 01                	jne    c000776c <liballoc_unlock()+0xe>
c000776b:	fb                   	sti    
c000776c:	b8 00 00 00 00       	mov    eax,0x0
c0007771:	c3                   	ret    

c0007772 <liballoc_alloc(int)>:
c0007772:	83 ec 10             	sub    esp,0x10
c0007775:	6a 01                	push   0x1
c0007777:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000777b:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c0007781:	e8 a0 22 00 00       	call   c0009a26 <VAS::allocatePages(int, int)>
c0007786:	83 c4 1c             	add    esp,0x1c
c0007789:	c3                   	ret    

c000778a <liballoc_free(void*, int)>:
c000778a:	83 ec 14             	sub    esp,0x14
c000778d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007791:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c0007797:	e8 46 1f 00 00       	call   c00096e2 <VAS::freeAllocatedPages(unsigned long)>
c000779c:	b8 00 00 00 00       	mov    eax,0x0
c00077a1:	83 c4 1c             	add    esp,0x1c
c00077a4:	c3                   	ret    

c00077a5 <realloc>:
c00077a5:	83 ec 14             	sub    esp,0x14
c00077a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077b0:	e8 7c 9d ff ff       	call   c0001531 <dlrealloc>
c00077b5:	83 c4 1c             	add    esp,0x1c
c00077b8:	c3                   	ret    

c00077b9 <malloc>:
c00077b9:	83 ec 18             	sub    esp,0x18
c00077bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077c0:	e8 2f 98 ff ff       	call   c0000ff4 <dlmalloc>
c00077c5:	83 c4 1c             	add    esp,0x1c
c00077c8:	c3                   	ret    

c00077c9 <free>:
c00077c9:	83 ec 18             	sub    esp,0x18
c00077cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077d0:	e8 c4 94 ff ff       	call   c0000c99 <dlfree>
c00077d5:	83 c4 1c             	add    esp,0x1c
c00077d8:	c3                   	ret    

c00077d9 <rfree>:
c00077d9:	83 ec 18             	sub    esp,0x18
c00077dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00077e0:	e8 b4 94 ff ff       	call   c0000c99 <dlfree>
c00077e5:	83 c4 1c             	add    esp,0x1c
c00077e8:	c3                   	ret    

c00077e9 <calloc>:
c00077e9:	56                   	push   esi
c00077ea:	53                   	push   ebx
c00077eb:	83 ec 10             	sub    esp,0x10
c00077ee:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00077f2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00077f7:	53                   	push   ebx
c00077f8:	e8 bc ff ff ff       	call   c00077b9 <malloc>
c00077fd:	89 c6                	mov    esi,eax
c00077ff:	83 c4 0c             	add    esp,0xc
c0007802:	53                   	push   ebx
c0007803:	6a 00                	push   0x0
c0007805:	50                   	push   eax
c0007806:	e8 c5 8c ff ff       	call   c00004d0 <memset>
c000780b:	89 f0                	mov    eax,esi
c000780d:	83 c4 14             	add    esp,0x14
c0007810:	5b                   	pop    ebx
c0007811:	5e                   	pop    esi
c0007812:	c3                   	ret    

c0007813 <KeEntryPoint>:
c0007813:	57                   	push   edi
c0007814:	bf f9 03 00 00       	mov    edi,0x3f9
c0007819:	56                   	push   esi
c000781a:	89 fa                	mov    edx,edi
c000781c:	53                   	push   ebx
c000781d:	31 f6                	xor    esi,esi
c000781f:	83 ec 2c             	sub    esp,0x2c
c0007822:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007827:	a3 f0 04 02 c0       	mov    ds:0xc00204f0,eax
c000782c:	89 f0                	mov    eax,esi
c000782e:	ee                   	out    dx,al
c000782f:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007834:	b0 80                	mov    al,0x80
c0007836:	89 da                	mov    edx,ebx
c0007838:	ee                   	out    dx,al
c0007839:	b1 03                	mov    cl,0x3
c000783b:	ba f8 03 00 00       	mov    edx,0x3f8
c0007840:	88 c8                	mov    al,cl
c0007842:	ee                   	out    dx,al
c0007843:	89 f0                	mov    eax,esi
c0007845:	89 fa                	mov    edx,edi
c0007847:	ee                   	out    dx,al
c0007848:	88 c8                	mov    al,cl
c000784a:	89 da                	mov    edx,ebx
c000784c:	ee                   	out    dx,al
c000784d:	b0 c7                	mov    al,0xc7
c000784f:	ba fa 03 00 00       	mov    edx,0x3fa
c0007854:	ee                   	out    dx,al
c0007855:	b0 0b                	mov    al,0xb
c0007857:	ba fc 03 00 00       	mov    edx,0x3fc
c000785c:	ee                   	out    dx,al
c000785d:	68 d8 d1 01 c0       	push   0xc001d1d8
c0007862:	e8 79 2c 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0007867:	e8 09 82 00 00       	call   c000fa75 <KeDisplaySplashScreen()>
c000786c:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007871:	05 ff 0f 00 00       	add    eax,0xfff
c0007876:	25 00 f0 ff ff       	and    eax,0xfffff000
c000787b:	89 04 24             	mov    DWORD PTR [esp],eax
c000787e:	e8 64 03 00 00       	call   c0007be7 <Phys::physicalMemorySetup(unsigned int)>
c0007883:	e8 c4 1b 00 00       	call   c000944c <Virt::virtualMemorySetup()>
c0007888:	58                   	pop    eax
c0007889:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000788d:	53                   	push   ebx
c000788e:	e8 75 1c 00 00       	call   c0009508 <VAS::VAS()>
c0007893:	89 1d d0 05 02 c0    	mov    DWORD PTR ds:0xc00205d0,ebx
c0007899:	e8 fc 45 01 00       	call   c001be9a <_init>
c000789e:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c00078a5:	e8 0f ff ff ff       	call   c00077b9 <malloc>
c00078aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00078ad:	89 c6                	mov    esi,eax
c00078af:	e8 7e f2 ff ff       	call   c0006b32 <Computer::Computer()>
c00078b4:	6a 00                	push   0x0
c00078b6:	89 35 d8 04 02 c0    	mov    DWORD PTR ds:0xc00204d8,esi
c00078bc:	6a 00                	push   0x0
c00078be:	6a 00                	push   0x0
c00078c0:	56                   	push   esi
c00078c1:	e8 12 f6 ff ff       	call   c0006ed8 <Computer::open(int, int, void*)>
c00078c6:	83 c4 14             	add    esp,0x14
c00078c9:	53                   	push   ebx
c00078ca:	e8 ef 1e 00 00       	call   c00097be <VAS::~VAS()>
c00078cf:	83 c4 30             	add    esp,0x30
c00078d2:	5b                   	pop    ebx
c00078d3:	5e                   	pop    esi
c00078d4:	5f                   	pop    edi
c00078d5:	c3                   	ret    

c00078d6 <Phys::allocateDMA(unsigned long)>:
c00078d6:	55                   	push   ebp
c00078d7:	31 ed                	xor    ebp,ebp
c00078d9:	57                   	push   edi
c00078da:	56                   	push   esi
c00078db:	53                   	push   ebx
c00078dc:	31 db                	xor    ebx,ebx
c00078de:	83 ec 1c             	sub    esp,0x1c
c00078e1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00078e5:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00078ed:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c00078f3:	31 c0                	xor    eax,eax
c00078f5:	c1 ef 0c             	shr    edi,0xc
c00078f8:	eb 19                	jmp    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c00078fa:	85 c0                	test   eax,eax
c00078fc:	75 06                	jne    c0007904 <Phys::allocateDMA(unsigned long)+0x2e>
c00078fe:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007902:	89 dd                	mov    ebp,ebx
c0007904:	8d 70 01             	lea    esi,[eax+0x1]
c0007907:	39 f7                	cmp    edi,esi
c0007909:	74 33                	je     c000793e <Phys::allocateDMA(unsigned long)+0x68>
c000790b:	89 f0                	mov    eax,esi
c000790d:	43                   	inc    ebx
c000790e:	83 fb 0f             	cmp    ebx,0xf
c0007911:	7f 11                	jg     c0007924 <Phys::allocateDMA(unsigned long)+0x4e>
c0007913:	80 bb 0c 05 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdfaf4],0x0
c000791a:	74 de                	je     c00078fa <Phys::allocateDMA(unsigned long)+0x24>
c000791c:	31 c0                	xor    eax,eax
c000791e:	43                   	inc    ebx
c000791f:	83 fb 0f             	cmp    ebx,0xf
c0007922:	7e ef                	jle    c0007913 <Phys::allocateDMA(unsigned long)+0x3d>
c0007924:	83 ec 0c             	sub    esp,0xc
c0007927:	68 f0 d1 01 c0       	push   0xc001d1f0
c000792c:	e8 2a 88 00 00       	call   c001015b <KePanic(char const*)>
c0007931:	83 c4 10             	add    esp,0x10
c0007934:	31 c0                	xor    eax,eax
c0007936:	83 c4 1c             	add    esp,0x1c
c0007939:	5b                   	pop    ebx
c000793a:	5e                   	pop    esi
c000793b:	5f                   	pop    edi
c000793c:	5d                   	pop    ebp
c000793d:	c3                   	ret    
c000793e:	89 e9                	mov    ecx,ebp
c0007940:	c1 f9 04             	sar    ecx,0x4
c0007943:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007947:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c000794b:	89 ca                	mov    edx,ecx
c000794d:	4a                   	dec    edx
c000794e:	79 03                	jns    c0007953 <Phys::allocateDMA(unsigned long)+0x7d>
c0007950:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007953:	c1 fa 04             	sar    edx,0x4
c0007956:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c000795a:	74 08                	je     c0007964 <Phys::allocateDMA(unsigned long)+0x8e>
c000795c:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007960:	31 c0                	xor    eax,eax
c0007962:	eb ba                	jmp    c000791e <Phys::allocateDMA(unsigned long)+0x48>
c0007964:	85 f6                	test   esi,esi
c0007966:	74 15                	je     c000797d <Phys::allocateDMA(unsigned long)+0xa7>
c0007968:	8d 95 0c 05 02 c0    	lea    edx,[ebp-0x3ffdfaf4]
c000796e:	8d 84 05 0d 05 02 c0 	lea    eax,[ebp+eax*1-0x3ffdfaf3]
c0007975:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007978:	42                   	inc    edx
c0007979:	39 d0                	cmp    eax,edx
c000797b:	75 f8                	jne    c0007975 <Phys::allocateDMA(unsigned long)+0x9f>
c000797d:	01 3d 04 05 02 c0    	add    DWORD PTR ds:0xc0020504,edi
c0007983:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007987:	85 c0                	test   eax,eax
c0007989:	74 17                	je     c00079a2 <Phys::allocateDMA(unsigned long)+0xcc>
c000798b:	83 ec 0c             	sub    esp,0xc
c000798e:	68 f0 d1 01 c0       	push   0xc001d1f0
c0007993:	e8 c3 87 00 00       	call   c001015b <KePanic(char const*)>
c0007998:	83 c4 10             	add    esp,0x10
c000799b:	89 f0                	mov    eax,esi
c000799d:	e9 6b ff ff ff       	jmp    c000790d <Phys::allocateDMA(unsigned long)+0x37>
c00079a2:	c1 e5 0c             	shl    ebp,0xc
c00079a5:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c00079ab:	eb 89                	jmp    c0007936 <Phys::allocateDMA(unsigned long)+0x60>

c00079ad <Phys::freeDMA(unsigned long, unsigned long)>:
c00079ad:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00079b1:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c00079b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00079bb:	c1 ea 0c             	shr    edx,0xc
c00079be:	05 00 00 ff 3d       	add    eax,0x3dff0000
c00079c3:	29 15 04 05 02 c0    	sub    DWORD PTR ds:0xc0020504,edx
c00079c9:	c1 e8 0c             	shr    eax,0xc
c00079cc:	85 d2                	test   edx,edx
c00079ce:	74 0f                	je     c00079df <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c00079d0:	05 0c 05 02 c0       	add    eax,0xc002050c
c00079d5:	01 c2                	add    edx,eax
c00079d7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00079da:	40                   	inc    eax
c00079db:	39 d0                	cmp    eax,edx
c00079dd:	75 f8                	jne    c00079d7 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c00079df:	c3                   	ret    

c00079e0 <Phys::setPageState(unsigned long, bool)>:
c00079e0:	56                   	push   esi
c00079e1:	ba 01 00 00 00       	mov    edx,0x1
c00079e6:	53                   	push   ebx
c00079e7:	8b 35 78 f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f178
c00079ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00079f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00079f5:	89 c8                	mov    eax,ecx
c00079f7:	83 e1 07             	and    ecx,0x7
c00079fa:	c1 e8 03             	shr    eax,0x3
c00079fd:	d3 e3                	shl    ebx,cl
c00079ff:	01 c6                	add    esi,eax
c0007a01:	d3 e2                	shl    edx,cl
c0007a03:	f7 d2                	not    edx
c0007a05:	20 16                	and    BYTE PTR [esi],dl
c0007a07:	03 05 78 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f178
c0007a0d:	08 18                	or     BYTE PTR [eax],bl
c0007a0f:	5b                   	pop    ebx
c0007a10:	5e                   	pop    esi
c0007a11:	c3                   	ret    

c0007a12 <Phys::getPageState(unsigned long)>:
c0007a12:	53                   	push   ebx
c0007a13:	8b 15 78 f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f178
c0007a19:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007a1d:	31 db                	xor    ebx,ebx
c0007a1f:	89 c8                	mov    eax,ecx
c0007a21:	83 e1 07             	and    ecx,0x7
c0007a24:	c1 e8 03             	shr    eax,0x3
c0007a27:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007a2a:	89 d8                	mov    eax,ebx
c0007a2c:	5b                   	pop    ebx
c0007a2d:	d3 f8                	sar    eax,cl
c0007a2f:	83 e0 01             	and    eax,0x1
c0007a32:	c3                   	ret    

c0007a33 <Phys::freePage(unsigned long)>:
c0007a33:	53                   	push   ebx
c0007a34:	83 ec 08             	sub    esp,0x8
c0007a37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007a3b:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007a41:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007a47:	76 3a                	jbe    c0007a83 <Phys::freePage(unsigned long)+0x50>
c0007a49:	c1 e8 0c             	shr    eax,0xc
c0007a4c:	50                   	push   eax
c0007a4d:	89 c3                	mov    ebx,eax
c0007a4f:	e8 be ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007a54:	5a                   	pop    edx
c0007a55:	84 c0                	test   al,al
c0007a57:	74 19                	je     c0007a72 <Phys::freePage(unsigned long)+0x3f>
c0007a59:	83 ec 08             	sub    esp,0x8
c0007a5c:	ff 0d 04 05 02 c0    	dec    DWORD PTR ds:0xc0020504
c0007a62:	6a 00                	push   0x0
c0007a64:	53                   	push   ebx
c0007a65:	e8 76 ff ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007a6a:	83 c4 10             	add    esp,0x10
c0007a6d:	83 c4 08             	add    esp,0x8
c0007a70:	5b                   	pop    ebx
c0007a71:	c3                   	ret    
c0007a72:	c7 44 24 10 95 d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d295
c0007a7a:	83 c4 08             	add    esp,0x8
c0007a7d:	5b                   	pop    ebx
c0007a7e:	e9 d8 86 00 00       	jmp    c001015b <KePanic(char const*)>
c0007a83:	68 00 10 00 00       	push   0x1000
c0007a88:	50                   	push   eax
c0007a89:	e8 1f ff ff ff       	call   c00079ad <Phys::freeDMA(unsigned long, unsigned long)>
c0007a8e:	59                   	pop    ecx
c0007a8f:	5b                   	pop    ebx
c0007a90:	83 c4 08             	add    esp,0x8
c0007a93:	5b                   	pop    ebx
c0007a94:	c3                   	ret    

c0007a95 <Phys::allocatePage()>:
c0007a95:	56                   	push   esi
c0007a96:	53                   	push   ebx
c0007a97:	83 ec 14             	sub    esp,0x14
c0007a9a:	8b 35 f8 04 02 c0    	mov    esi,DWORD PTR ds:0xc00204f8
c0007aa0:	89 f3                	mov    ebx,esi
c0007aa2:	eb 0a                	jmp    c0007aae <Phys::allocatePage()+0x19>
c0007aa4:	89 1d f8 04 02 c0    	mov    DWORD PTR ds:0xc00204f8,ebx
c0007aaa:	39 de                	cmp    esi,ebx
c0007aac:	74 24                	je     c0007ad2 <Phys::allocatePage()+0x3d>
c0007aae:	53                   	push   ebx
c0007aaf:	e8 5e ff ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007ab4:	5a                   	pop    edx
c0007ab5:	84 c0                	test   al,al
c0007ab7:	74 5f                	je     c0007b18 <Phys::allocatePage()+0x83>
c0007ab9:	43                   	inc    ebx
c0007aba:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007ac0:	75 e2                	jne    c0007aa4 <Phys::allocatePage()+0xf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	c7 05 f8 04 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00204f8,0x0
c0007ace:	39 de                	cmp    esi,ebx
c0007ad0:	75 dc                	jne    c0007aae <Phys::allocatePage()+0x19>
c0007ad2:	83 ec 0c             	sub    esp,0xc
c0007ad5:	80 35 1c 05 02 c0 01 	xor    BYTE PTR ds:0xc002051c,0x1
c0007adc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007ae1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007ae4:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007aea:	50                   	push   eax
c0007aeb:	e8 10 27 00 00       	call   c000a200 <VAS::scanForEviction()>
c0007af0:	83 c4 10             	add    esp,0x10
c0007af3:	85 c0                	test   eax,eax
c0007af5:	75 3f                	jne    c0007b36 <Phys::allocatePage()+0xa1>
c0007af7:	83 ec 0c             	sub    esp,0xc
c0007afa:	68 18 d2 01 c0       	push   0xc001d218
c0007aff:	e8 57 86 00 00       	call   c001015b <KePanic(char const*)>
c0007b04:	83 c4 10             	add    esp,0x10
c0007b07:	8b 1d f8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204f8
c0007b0d:	53                   	push   ebx
c0007b0e:	e8 ff fe ff ff       	call   c0007a12 <Phys::getPageState(unsigned long)>
c0007b13:	5a                   	pop    edx
c0007b14:	84 c0                	test   al,al
c0007b16:	75 a1                	jne    c0007ab9 <Phys::allocatePage()+0x24>
c0007b18:	6a 01                	push   0x1
c0007b1a:	53                   	push   ebx
c0007b1b:	e8 c0 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b20:	a1 f8 04 02 c0       	mov    eax,ds:0xc00204f8
c0007b25:	5a                   	pop    edx
c0007b26:	ff 05 04 05 02 c0    	inc    DWORD PTR ds:0xc0020504
c0007b2c:	c1 e0 0c             	shl    eax,0xc
c0007b2f:	59                   	pop    ecx
c0007b30:	83 c4 14             	add    esp,0x14
c0007b33:	5b                   	pop    ebx
c0007b34:	5e                   	pop    esi
c0007b35:	c3                   	ret    
c0007b36:	83 ec 08             	sub    esp,0x8
c0007b39:	89 c2                	mov    edx,eax
c0007b3b:	6a 01                	push   0x1
c0007b3d:	c1 ea 0c             	shr    edx,0xc
c0007b40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007b44:	52                   	push   edx
c0007b45:	e8 96 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007b4a:	83 c4 10             	add    esp,0x10
c0007b4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007b51:	eb dd                	jmp    c0007b30 <Phys::allocatePage()+0x9b>

c0007b53 <Phys::allocateContiguousPages(int)>:
c0007b53:	57                   	push   edi
c0007b54:	56                   	push   esi
c0007b55:	53                   	push   ebx
c0007b56:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b5a:	fa                   	cli    
c0007b5b:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0007b61:	31 db                	xor    ebx,ebx
c0007b63:	85 db                	test   ebx,ebx
c0007b65:	75 11                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b67:	e8 29 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b6c:	83 fe 01             	cmp    esi,0x1
c0007b6f:	89 c7                	mov    edi,eax
c0007b71:	74 21                	je     c0007b94 <Phys::allocateContiguousPages(int)+0x41>
c0007b73:	bb 01 00 00 00       	mov    ebx,0x1
c0007b78:	e8 18 ff ff ff       	call   c0007a95 <Phys::allocatePage()>
c0007b7d:	89 da                	mov    edx,ebx
c0007b7f:	c1 e2 0c             	shl    edx,0xc
c0007b82:	01 fa                	add    edx,edi
c0007b84:	39 c2                	cmp    edx,eax
c0007b86:	74 20                	je     c0007ba8 <Phys::allocateContiguousPages(int)+0x55>
c0007b88:	bb 01 00 00 00       	mov    ebx,0x1
c0007b8d:	89 c7                	mov    edi,eax
c0007b8f:	83 fe 01             	cmp    esi,0x1
c0007b92:	75 e4                	jne    c0007b78 <Phys::allocateContiguousPages(int)+0x25>
c0007b94:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0007b99:	48                   	dec    eax
c0007b9a:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0007b9f:	75 01                	jne    c0007ba2 <Phys::allocateContiguousPages(int)+0x4f>
c0007ba1:	fb                   	sti    
c0007ba2:	89 f8                	mov    eax,edi
c0007ba4:	5b                   	pop    ebx
c0007ba5:	5e                   	pop    esi
c0007ba6:	5f                   	pop    edi
c0007ba7:	c3                   	ret    
c0007ba8:	43                   	inc    ebx
c0007ba9:	39 f3                	cmp    ebx,esi
c0007bab:	75 b6                	jne    c0007b63 <Phys::allocateContiguousPages(int)+0x10>
c0007bad:	eb e5                	jmp    c0007b94 <Phys::allocateContiguousPages(int)+0x41>

c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007baf:	56                   	push   esi
c0007bb0:	53                   	push   ebx
c0007bb1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007bb5:	39 1d fc 04 02 c0    	cmp    DWORD PTR ds:0xc00204fc,ebx
c0007bbb:	73 06                	jae    c0007bc3 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007bbd:	89 1d fc 04 02 c0    	mov    DWORD PTR ds:0xc00204fc,ebx
c0007bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007bc7:	c1 eb 0c             	shr    ebx,0xc
c0007bca:	c1 e8 0c             	shr    eax,0xc
c0007bcd:	39 d8                	cmp    eax,ebx
c0007bcf:	73 13                	jae    c0007be4 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007bd1:	6a 00                	push   0x0
c0007bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd6:	50                   	push   eax
c0007bd7:	e8 04 fe ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007bdc:	5a                   	pop    edx
c0007bdd:	89 f0                	mov    eax,esi
c0007bdf:	59                   	pop    ecx
c0007be0:	39 f3                	cmp    ebx,esi
c0007be2:	75 ed                	jne    c0007bd1 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007be4:	5b                   	pop    ebx
c0007be5:	5e                   	pop    esi
c0007be6:	c3                   	ret    

c0007be7 <Phys::physicalMemorySetup(unsigned int)>:
c0007be7:	55                   	push   ebp
c0007be8:	57                   	push   edi
c0007be9:	56                   	push   esi
c0007bea:	53                   	push   ebx
c0007beb:	31 db                	xor    ebx,ebx
c0007bed:	83 ec 40             	sub    esp,0x40
c0007bf0:	6a 10                	push   0x10
c0007bf2:	6a 00                	push   0x0
c0007bf4:	68 0c 05 02 c0       	push   0xc002050c
c0007bf9:	e8 d2 88 ff ff       	call   c00004d0 <memset>
c0007bfe:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007c02:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007c07:	05 00 10 00 00       	add    eax,0x1000
c0007c0c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007c10:	5a                   	pop    edx
c0007c11:	59                   	pop    ecx
c0007c12:	50                   	push   eax
c0007c13:	68 ab d2 01 c0       	push   0xc001d2ab
c0007c18:	e8 c3 28 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0007c1d:	83 c4 10             	add    esp,0x10
c0007c20:	83 ec 08             	sub    esp,0x8
c0007c23:	6a 01                	push   0x1
c0007c25:	53                   	push   ebx
c0007c26:	43                   	inc    ebx
c0007c27:	e8 b4 fd ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007c2c:	83 c4 10             	add    esp,0x10
c0007c2f:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007c35:	75 e9                	jne    c0007c20 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007c37:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007c3d:	66 85 c0             	test   ax,ax
c0007c40:	0f 84 97 01 00 00    	je     c0007ddd <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007c46:	89 c7                	mov    edi,eax
c0007c48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007c50:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007c56:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007c5b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007c5f:	eb 15                	jmp    c0007c76 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007c61:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007c65:	83 c3 18             	add    ebx,0x18
c0007c68:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007c6c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007c70:	0f 84 77 01 00 00    	je     c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007c76:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007c79:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007c7c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007c7f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007c83:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007c87:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007c89:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007c8c:	01 f0                	add    eax,esi
c0007c8e:	55                   	push   ebp
c0007c8f:	11 fa                	adc    edx,edi
c0007c91:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007c95:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007c99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c9d:	50                   	push   eax
c0007c9e:	56                   	push   esi
c0007c9f:	68 48 d2 01 c0       	push   0xc001d248
c0007ca4:	e8 37 28 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0007ca9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007cad:	83 c4 10             	add    esp,0x10
c0007cb0:	09 f8                	or     eax,edi
c0007cb2:	0f 85 35 01 00 00    	jne    c0007ded <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007cb8:	4d                   	dec    ebp
c0007cb9:	75 a6                	jne    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007cbb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007cbf:	ba 00 00 08 00       	mov    edx,0x80000
c0007cc4:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007cc8:	39 f2                	cmp    edx,esi
c0007cca:	89 c1                	mov    ecx,eax
c0007ccc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007cd4:	19 f9                	sbb    ecx,edi
c0007cd6:	0f 82 a7 00 00 00    	jb     c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cdc:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007ce0:	89 c1                	mov    ecx,eax
c0007ce2:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007ce6:	0f 83 97 00 00 00    	jae    c0007d83 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007cec:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007cf1:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007cf5:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007cf9:	39 fa                	cmp    edx,edi
c0007cfb:	19 e8                	sbb    eax,ebp
c0007cfd:	0f 82 9a 01 00 00    	jb     c0007e9d <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007d03:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007d07:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007d0b:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007d11:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007d16:	83 d5 ff             	adc    ebp,0xffffffff
c0007d19:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007d1d:	31 c0                	xor    eax,eax
c0007d1f:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007d23:	39 fa                	cmp    edx,edi
c0007d25:	89 c1                	mov    ecx,eax
c0007d27:	19 e9                	sbb    ecx,ebp
c0007d29:	0f 83 32 ff ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d2f:	be 00 00 08 00       	mov    esi,0x80000
c0007d34:	51                   	push   ecx
c0007d35:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0007d39:	57                   	push   edi
c0007d3a:	56                   	push   esi
c0007d3b:	68 6c d2 01 c0       	push   0xc001d26c
c0007d40:	e8 9b 27 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0007d45:	5d                   	pop    ebp
c0007d46:	58                   	pop    eax
c0007d47:	57                   	push   edi
c0007d48:	56                   	push   esi
c0007d49:	e8 61 fe ff ff       	call   c0007baf <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c0007d4e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007d52:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007d56:	83 c4 0c             	add    esp,0xc
c0007d59:	0f ac d0 0c          	shrd   eax,edx,0xc
c0007d5d:	03 05 08 05 02 c0    	add    eax,DWORD PTR ds:0xc0020508
c0007d63:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0007d6a:	a3 08 05 02 c0       	mov    ds:0xc0020508,eax
c0007d6f:	52                   	push   edx
c0007d70:	50                   	push   eax
c0007d71:	68 d1 d2 01 c0       	push   0xc001d2d1
c0007d76:	e8 65 27 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0007d7b:	83 c4 10             	add    esp,0x10
c0007d7e:	e9 de fe ff ff       	jmp    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d83:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0007d87:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007d8b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007d8f:	39 ea                	cmp    edx,ebp
c0007d91:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0007d95:	0f 82 c6 fe ff ff    	jb     c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007d9b:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007da0:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0007da4:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0007da8:	0f 83 b3 fe ff ff    	jae    c0007c61 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007dae:	39 ee                	cmp    esi,ebp
c0007db0:	89 f8                	mov    eax,edi
c0007db2:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0007db6:	0f 83 78 ff ff ff    	jae    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007dbc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007dc0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007dc4:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0007dc8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0007dcc:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0007dd0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007dd4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007dd8:	e9 57 ff ff ff       	jmp    c0007d34 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c0007ddd:	83 ec 0c             	sub    esp,0xc
c0007de0:	68 c3 d2 01 c0       	push   0xc001d2c3
c0007de5:	e8 71 83 00 00       	call   c001015b <KePanic(char const*)>
c0007dea:	83 c4 10             	add    esp,0x10
c0007ded:	83 ec 08             	sub    esp,0x8
c0007df0:	bb 60 00 00 00       	mov    ebx,0x60
c0007df5:	6a 00                	push   0x0
c0007df7:	6a 06                	push   0x6
c0007df9:	e8 e2 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007dfe:	58                   	pop    eax
c0007dff:	5a                   	pop    edx
c0007e00:	6a 00                	push   0x0
c0007e02:	6a 07                	push   0x7
c0007e04:	e8 d7 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e09:	83 05 08 05 02 c0 02 	add    DWORD PTR ds:0xc0020508,0x2
c0007e10:	83 c4 10             	add    esp,0x10
c0007e13:	83 ec 08             	sub    esp,0x8
c0007e16:	6a 00                	push   0x0
c0007e18:	53                   	push   ebx
c0007e19:	43                   	inc    ebx
c0007e1a:	e8 c1 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e1f:	83 c4 10             	add    esp,0x10
c0007e22:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0007e28:	75 e9                	jne    c0007e13 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c0007e2a:	a1 08 05 02 c0       	mov    eax,ds:0xc0020508
c0007e2f:	bb 40 01 00 00       	mov    ebx,0x140
c0007e34:	83 c0 20             	add    eax,0x20
c0007e37:	a3 08 05 02 c0       	mov    ds:0xc0020508,eax
c0007e3c:	eb 22                	jmp    c0007e60 <Phys::physicalMemorySetup(unsigned int)+0x279>
c0007e3e:	83 ec 08             	sub    esp,0x8
c0007e41:	6a 00                	push   0x0
c0007e43:	53                   	push   ebx
c0007e44:	43                   	inc    ebx
c0007e45:	e8 96 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e4a:	a1 08 05 02 c0       	mov    eax,ds:0xc0020508
c0007e4f:	83 c4 10             	add    esp,0x10
c0007e52:	40                   	inc    eax
c0007e53:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c0007e59:	a3 08 05 02 c0       	mov    ds:0xc0020508,eax
c0007e5e:	74 07                	je     c0007e67 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0007e60:	3d ff 03 00 00       	cmp    eax,0x3ff
c0007e65:	7e d7                	jle    c0007e3e <Phys::physicalMemorySetup(unsigned int)+0x257>
c0007e67:	bb d0 01 00 00       	mov    ebx,0x1d0
c0007e6c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0007e71:	7f 22                	jg     c0007e95 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0007e73:	83 ec 08             	sub    esp,0x8
c0007e76:	6a 00                	push   0x0
c0007e78:	53                   	push   ebx
c0007e79:	43                   	inc    ebx
c0007e7a:	e8 61 fb ff ff       	call   c00079e0 <Phys::setPageState(unsigned long, bool)>
c0007e7f:	a1 08 05 02 c0       	mov    eax,ds:0xc0020508
c0007e84:	83 c4 10             	add    esp,0x10
c0007e87:	40                   	inc    eax
c0007e88:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c0007e8e:	a3 08 05 02 c0       	mov    ds:0xc0020508,eax
c0007e93:	75 d7                	jne    c0007e6c <Phys::physicalMemorySetup(unsigned int)+0x285>
c0007e95:	83 c4 3c             	add    esp,0x3c
c0007e98:	5b                   	pop    ebx
c0007e99:	5e                   	pop    esi
c0007e9a:	5f                   	pop    edi
c0007e9b:	5d                   	pop    ebp
c0007e9c:	c3                   	ret    
c0007e9d:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0007ea5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0007ead:	e9 51 fe ff ff       	jmp    c0007d03 <Phys::physicalMemorySetup(unsigned int)+0x11c>

c0007eb2 <Pipe::isAtty()>:
c0007eb2:	31 c0                	xor    eax,eax
c0007eb4:	c3                   	ret    
c0007eb5:	90                   	nop

c0007eb6 <Pipe::~Pipe()>:
c0007eb6:	83 ec 0c             	sub    esp,0xc
c0007eb9:	ba 30 d3 01 c0       	mov    edx,0xc001d330
c0007ebe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec2:	89 10                	mov    DWORD PTR [eax],edx
c0007ec4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007ec8:	83 ec 0c             	sub    esp,0xc
c0007ecb:	50                   	push   eax
c0007ecc:	e8 5b 11 00 00       	call   c000902c <UnixFile::~UnixFile()>
c0007ed1:	83 c4 10             	add    esp,0x10
c0007ed4:	90                   	nop
c0007ed5:	83 c4 0c             	add    esp,0xc
c0007ed8:	c3                   	ret    
c0007ed9:	90                   	nop

c0007eda <Pipe::~Pipe()>:
c0007eda:	83 ec 0c             	sub    esp,0xc
c0007edd:	83 ec 0c             	sub    esp,0xc
c0007ee0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ee4:	e8 cd ff ff ff       	call   c0007eb6 <Pipe::~Pipe()>
c0007ee9:	83 c4 10             	add    esp,0x10
c0007eec:	83 ec 08             	sub    esp,0x8
c0007eef:	6a 20                	push   0x20
c0007ef1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007ef5:	e8 f0 24 00 00       	call   c000a3ea <operator delete(void*, unsigned long)>
c0007efa:	83 c4 10             	add    esp,0x10
c0007efd:	83 c4 0c             	add    esp,0xc
c0007f00:	c3                   	ret    
c0007f01:	90                   	nop

c0007f02 <Pipe::write(unsigned long long, void*, int*)>:
c0007f02:	55                   	push   ebp
c0007f03:	57                   	push   edi
c0007f04:	56                   	push   esi
c0007f05:	53                   	push   ebx
c0007f06:	83 ec 1c             	sub    esp,0x1c
c0007f09:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0007f0d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0007f11:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0007f14:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007f18:	89 04 24             	mov    DWORD PTR [esp],eax
c0007f1b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007f1f:	89 d8                	mov    eax,ebx
c0007f21:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0007f24:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f28:	89 d6                	mov    esi,edx
c0007f2a:	89 d7                	mov    edi,edx
c0007f2c:	c1 ff 1f             	sar    edi,0x1f
c0007f2f:	03 34 24             	add    esi,DWORD PTR [esp]
c0007f32:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0007f36:	c1 f8 1f             	sar    eax,0x1f
c0007f39:	39 f3                	cmp    ebx,esi
c0007f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f43:	19 f8                	sbb    eax,edi
c0007f45:	b8 01 00 00 00       	mov    eax,0x1
c0007f4a:	72 6e                	jb     c0007fba <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0007f4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0007f4f:	01 d0                	add    eax,edx
c0007f51:	99                   	cdq    
c0007f52:	f7 fb                	idiv   ebx
c0007f54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007f58:	29 d3                	sub    ebx,edx
c0007f5a:	89 d7                	mov    edi,edx
c0007f5c:	89 de                	mov    esi,ebx
c0007f5e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007f61:	c1 fb 1f             	sar    ebx,0x1f
c0007f64:	39 f2                	cmp    edx,esi
c0007f66:	19 d8                	sbb    eax,ebx
c0007f68:	b8 00 00 00 00       	mov    eax,0x0
c0007f6d:	72 04                	jb     c0007f73 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0007f6f:	89 d0                	mov    eax,edx
c0007f71:	29 f0                	sub    eax,esi
c0007f73:	89 d3                	mov    ebx,edx
c0007f75:	29 c3                	sub    ebx,eax
c0007f77:	74 0b                	je     c0007f84 <Pipe::write(unsigned long long, void*, int*)+0x82>
c0007f79:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0007f7c:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0007f80:	89 d9                	mov    ecx,ebx
c0007f82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f84:	85 c0                	test   eax,eax
c0007f86:	74 0d                	je     c0007f95 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0007f88:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0007f8c:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0007f8f:	89 de                	mov    esi,ebx
c0007f91:	89 c1                	mov    ecx,eax
c0007f93:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007f95:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0007f98:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0007f9d:	75 10                	jne    c0007faf <Pipe::write(unsigned long long, void*, int*)+0xad>
c0007f9f:	83 ec 0c             	sub    esp,0xc
c0007fa2:	68 ed d2 01 c0       	push   0xc001d2ed
c0007fa7:	e8 af 81 00 00       	call   c001015b <KePanic(char const*)>
c0007fac:	83 c4 10             	add    esp,0x10
c0007faf:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007fb3:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007fb6:	89 08                	mov    DWORD PTR [eax],ecx
c0007fb8:	31 c0                	xor    eax,eax
c0007fba:	83 c4 1c             	add    esp,0x1c
c0007fbd:	5b                   	pop    ebx
c0007fbe:	5e                   	pop    esi
c0007fbf:	5f                   	pop    edi
c0007fc0:	5d                   	pop    ebp
c0007fc1:	c3                   	ret    

c0007fc2 <Pipe::read(unsigned long long, void*, int*)>:
c0007fc2:	55                   	push   ebp
c0007fc3:	57                   	push   edi
c0007fc4:	56                   	push   esi
c0007fc5:	53                   	push   ebx
c0007fc6:	83 ec 1c             	sub    esp,0x1c
c0007fc9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0007fcd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0007fd1:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007fd5:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0007fd8:	89 c8                	mov    eax,ecx
c0007fda:	99                   	cdq    
c0007fdb:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0007fdf:	74 24                	je     c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe1:	39 f9                	cmp    ecx,edi
c0007fe3:	89 d1                	mov    ecx,edx
c0007fe5:	19 f1                	sbb    ecx,esi
c0007fe7:	73 1c                	jae    c0008005 <Pipe::read(unsigned long long, void*, int*)+0x43>
c0007fe9:	fa                   	cli    
c0007fea:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0007ff0:	e8 8f b3 00 00       	call   c0013384 <schedule()>
c0007ff5:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0007ffa:	48                   	dec    eax
c0007ffb:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0008000:	75 d3                	jne    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008002:	fb                   	sti    
c0008003:	eb d0                	jmp    c0007fd5 <Pipe::read(unsigned long long, void*, int*)+0x13>
c0008005:	39 f8                	cmp    eax,edi
c0008007:	89 d1                	mov    ecx,edx
c0008009:	89 3c 24             	mov    DWORD PTR [esp],edi
c000800c:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0008010:	19 f1                	sbb    ecx,esi
c0008012:	73 07                	jae    c000801b <Pipe::read(unsigned long long, void*, int*)+0x59>
c0008014:	89 04 24             	mov    DWORD PTR [esp],eax
c0008017:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000801b:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c000801e:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c0008021:	29 f7                	sub    edi,esi
c0008023:	89 f8                	mov    eax,edi
c0008025:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008029:	99                   	cdq    
c000802a:	39 3c 24             	cmp    DWORD PTR [esp],edi
c000802d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008031:	19 d0                	sbb    eax,edx
c0008033:	73 07                	jae    c000803c <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008035:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0008038:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000803c:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000803f:	89 ea                	mov    edx,ebp
c0008041:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008045:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000804a:	74 0d                	je     c0008059 <Pipe::read(unsigned long long, void*, int*)+0x97>
c000804c:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000804f:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008053:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008057:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008059:	85 d2                	test   edx,edx
c000805b:	74 11                	je     c000806e <Pipe::read(unsigned long long, void*, int*)+0xac>
c000805d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008061:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008064:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0008068:	89 d1                	mov    ecx,edx
c000806a:	89 c7                	mov    edi,eax
c000806c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000806e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008071:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008074:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008077:	99                   	cdq    
c0008078:	89 f7                	mov    edi,esi
c000807a:	03 04 24             	add    eax,DWORD PTR [esp]
c000807d:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008081:	c1 ff 1f             	sar    edi,0x1f
c0008084:	57                   	push   edi
c0008085:	56                   	push   esi
c0008086:	52                   	push   edx
c0008087:	50                   	push   eax
c0008088:	e8 f3 3c 01 00       	call   c001bd80 <__umoddi3>
c000808d:	83 c4 10             	add    esp,0x10
c0008090:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008093:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008098:	75 10                	jne    c00080aa <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000809a:	83 ec 0c             	sub    esp,0xc
c000809d:	68 0a d3 01 c0       	push   0xc001d30a
c00080a2:	e8 b4 80 00 00       	call   c001015b <KePanic(char const*)>
c00080a7:	83 c4 10             	add    esp,0x10
c00080aa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00080ae:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00080b1:	89 10                	mov    DWORD PTR [eax],edx
c00080b3:	83 c4 1c             	add    esp,0x1c
c00080b6:	31 c0                	xor    eax,eax
c00080b8:	5b                   	pop    ebx
c00080b9:	5e                   	pop    esi
c00080ba:	5f                   	pop    edi
c00080bb:	5d                   	pop    ebp
c00080bc:	c3                   	ret    
c00080bd:	90                   	nop

c00080be <Pipe::Pipe(int)>:
c00080be:	83 ec 0c             	sub    esp,0xc
c00080c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080c5:	83 ec 08             	sub    esp,0x8
c00080c8:	6a 00                	push   0x0
c00080ca:	50                   	push   eax
c00080cb:	e8 7a 0d 00 00       	call   c0008e4a <UnixFile::UnixFile(int)>
c00080d0:	83 c4 10             	add    esp,0x10
c00080d3:	ba 30 d3 01 c0       	mov    edx,0xc001d330
c00080d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080dc:	89 10                	mov    DWORD PTR [eax],edx
c00080de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00080e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00080e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00080f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00080f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00080ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008103:	83 ec 0c             	sub    esp,0xc
c0008106:	50                   	push   eax
c0008107:	e8 ad f6 ff ff       	call   c00077b9 <malloc>
c000810c:	83 c4 10             	add    esp,0x10
c000810f:	89 c2                	mov    edx,eax
c0008111:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008115:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000811c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0008120:	90                   	nop
c0008121:	83 c4 0c             	add    esp,0xc
c0008124:	c3                   	ret    
c0008125:	90                   	nop

c0008126 <VgaText::isAtty()>:
c0008126:	b0 01                	mov    al,0x1
c0008128:	c3                   	ret    
c0008129:	90                   	nop

c000812a <VgaText::~VgaText()>:
c000812a:	83 ec 0c             	sub    esp,0xc
c000812d:	ba c4 d3 01 c0       	mov    edx,0xc001d3c4
c0008132:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008136:	89 10                	mov    DWORD PTR [eax],edx
c0008138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000813c:	83 ec 0c             	sub    esp,0xc
c000813f:	50                   	push   eax
c0008140:	e8 e7 0e 00 00       	call   c000902c <UnixFile::~UnixFile()>
c0008145:	83 c4 10             	add    esp,0x10
c0008148:	90                   	nop
c0008149:	83 c4 0c             	add    esp,0xc
c000814c:	c3                   	ret    
c000814d:	90                   	nop

c000814e <VgaText::~VgaText()>:
c000814e:	83 ec 0c             	sub    esp,0xc
c0008151:	83 ec 0c             	sub    esp,0xc
c0008154:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008158:	e8 cd ff ff ff       	call   c000812a <VgaText::~VgaText()>
c000815d:	83 c4 10             	add    esp,0x10
c0008160:	83 ec 08             	sub    esp,0x8
c0008163:	68 34 01 00 00       	push   0x134
c0008168:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000816c:	e8 79 22 00 00       	call   c000a3ea <operator delete(void*, unsigned long)>
c0008171:	83 c4 10             	add    esp,0x10
c0008174:	83 c4 0c             	add    esp,0xc
c0008177:	c3                   	ret    

c0008178 <VgaText::read(unsigned long long, void*, int*)>:
c0008178:	83 ec 10             	sub    esp,0x10
c000817b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008187:	e8 b4 45 00 00       	call   c000c740 <readKeyboard(VgaText*, char*, unsigned long)>
c000818c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008190:	89 02                	mov    DWORD PTR [edx],eax
c0008192:	31 c0                	xor    eax,eax
c0008194:	83 c4 1c             	add    esp,0x1c
c0008197:	c3                   	ret    

c0008198 <setTerminalScrollLock(bool)>:
c0008198:	c3                   	ret    

c0008199 <doTerminalCycle()>:
c0008199:	c3                   	ret    

c000819a <addToTerminalCycle(VgaText*)>:
c000819a:	c3                   	ret    

c000819b <scrollTerminalScrollLock(int)>:
c000819b:	c3                   	ret    

c000819c <VgaText::updateTitle()>:
c000819c:	c3                   	ret    
c000819d:	90                   	nop

c000819e <VgaText::load()>:
c000819e:	c3                   	ret    
c000819f:	90                   	nop

c00081a0 <VgaText::updateCursor()>:
c00081a0:	83 ec 14             	sub    esp,0x14
c00081a3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00081a7:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00081aa:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00081ad:	e8 ae dd 00 00       	call   c0015f60 <HalConsoleCursorUpdate(int, int)>
c00081b2:	83 c4 1c             	add    esp,0x1c
c00081b5:	c3                   	ret    

c00081b6 <VgaText::doANSI_SGR(int)>:
c00081b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00081ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00081be:	85 d2                	test   edx,edx
c00081c0:	75 0b                	jne    c00081cd <VgaText::doANSI_SGR(int)+0x17>
c00081c2:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c00081c5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00081c8:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00081cb:	eb 59                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081cd:	83 fa 07             	cmp    edx,0x7
c00081d0:	75 0b                	jne    c00081dd <VgaText::doANSI_SGR(int)+0x27>
c00081d2:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00081d5:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00081d8:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00081db:	eb 49                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c00081dd:	83 fa 1b             	cmp    edx,0x1b
c00081e0:	74 e0                	je     c00081c2 <VgaText::doANSI_SGR(int)+0xc>
c00081e2:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00081e5:	83 f9 07             	cmp    ecx,0x7
c00081e8:	77 09                	ja     c00081f3 <VgaText::doANSI_SGR(int)+0x3d>
c00081ea:	8b 14 8d a0 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0e60]
c00081f1:	eb 20                	jmp    c0008213 <VgaText::doANSI_SGR(int)+0x5d>
c00081f3:	8d 4a d8             	lea    ecx,[edx-0x28]
c00081f6:	83 f9 07             	cmp    ecx,0x7
c00081f9:	77 09                	ja     c0008204 <VgaText::doANSI_SGR(int)+0x4e>
c00081fb:	8b 14 8d a0 f1 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0e60]
c0008202:	eb 22                	jmp    c0008226 <VgaText::doANSI_SGR(int)+0x70>
c0008204:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008207:	83 f9 07             	cmp    ecx,0x7
c000820a:	77 0b                	ja     c0008217 <VgaText::doANSI_SGR(int)+0x61>
c000820c:	8b 14 95 58 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0fa8]
c0008213:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008216:	c3                   	ret    
c0008217:	8d 4a 9c             	lea    ecx,[edx-0x64]
c000821a:	83 f9 07             	cmp    ecx,0x7
c000821d:	77 0a                	ja     c0008229 <VgaText::doANSI_SGR(int)+0x73>
c000821f:	8b 14 95 30 f0 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0fd0]
c0008226:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008229:	c3                   	ret    

c000822a <VgaText::setDefaultBgColour(VgaColour)>:
c000822a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008232:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008235:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008238:	c3                   	ret    
c0008239:	90                   	nop

c000823a <VgaText::setDefaultFgColour(VgaColour)>:
c000823a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000823e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008242:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008245:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008248:	c3                   	ret    
c0008249:	90                   	nop

c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000824a:	53                   	push   ebx
c000824b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000824f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008253:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008257:	51                   	push   ecx
c0008258:	e8 cd ff ff ff       	call   c000822a <VgaText::setDefaultBgColour(VgaColour)>
c000825d:	58                   	pop    eax
c000825e:	5a                   	pop    edx
c000825f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008263:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008267:	5b                   	pop    ebx
c0008268:	eb d0                	jmp    c000823a <VgaText::setDefaultFgColour(VgaColour)>

c000826a <VgaText::setTitleTextColour(VgaColour)>:
c000826a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000826e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008272:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008275:	c3                   	ret    

c0008276 <VgaText::setTitleColour(VgaColour)>:
c0008276:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000827a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000827e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008281:	c3                   	ret    

c0008282 <VgaText::setTitle(char*)>:
c0008282:	c3                   	ret    
c0008283:	90                   	nop

c0008284 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008284:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0008288:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000828d:	83 e0 0f             	and    eax,0xf
c0008290:	c1 e2 04             	shl    edx,0x4
c0008293:	09 d0                	or     eax,edx
c0008295:	c3                   	ret    

c0008296 <VgaText::scrollScreen()>:
c0008296:	55                   	push   ebp
c0008297:	b9 01 00 00 00       	mov    ecx,0x1
c000829c:	57                   	push   edi
c000829d:	56                   	push   esi
c000829e:	53                   	push   ebx
c000829f:	83 ec 0c             	sub    esp,0xc
c00082a2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00082a6:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c00082ac:	31 ff                	xor    edi,edi
c00082ae:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00082b1:	83 f9 18             	cmp    ecx,0x18
c00082b4:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c00082b7:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c00082be:	75 27                	jne    c00082e7 <VgaText::scrollScreen()+0x51>
c00082c0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c00082c3:	01 f5                	add    ebp,esi
c00082c5:	f7 c7 01 00 00 00    	test   edi,0x1
c00082cb:	74 16                	je     c00082e3 <VgaText::scrollScreen()+0x4d>
c00082cd:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00082d1:	50                   	push   eax
c00082d2:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00082d6:	50                   	push   eax
c00082d7:	e8 a8 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00082dc:	5a                   	pop    edx
c00082dd:	5a                   	pop    edx
c00082de:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00082e1:	eb 04                	jmp    c00082e7 <VgaText::scrollScreen()+0x51>
c00082e3:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00082e7:	47                   	inc    edi
c00082e8:	46                   	inc    esi
c00082e9:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00082ef:	75 bd                	jne    c00082ae <VgaText::scrollScreen()+0x18>
c00082f1:	41                   	inc    ecx
c00082f2:	83 f9 19             	cmp    ecx,0x19
c00082f5:	75 af                	jne    c00082a6 <VgaText::scrollScreen()+0x10>
c00082f7:	39 1d 24 05 02 c0    	cmp    DWORD PTR ds:0xc0020524,ebx
c00082fd:	75 1f                	jne    c000831e <VgaText::scrollScreen()+0x88>
c00082ff:	80 7b 59 00          	cmp    BYTE PTR [ebx+0x59],0x0
c0008303:	74 05                	je     c000830a <VgaText::scrollScreen()+0x74>
c0008305:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c0008308:	eb 14                	jmp    c000831e <VgaText::scrollScreen()+0x88>
c000830a:	50                   	push   eax
c000830b:	50                   	push   eax
c000830c:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008310:	50                   	push   eax
c0008311:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008315:	50                   	push   eax
c0008316:	e8 d1 da 00 00       	call   c0015dec <HalConsoleScroll(int, int)>
c000831b:	83 c4 10             	add    esp,0x10
c000831e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008322:	83 c4 0c             	add    esp,0xc
c0008325:	5b                   	pop    ebx
c0008326:	5e                   	pop    esi
c0008327:	5f                   	pop    edi
c0008328:	5d                   	pop    ebp
c0008329:	e9 72 fe ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c000832e <VgaText::combineCharAndColour(char, unsigned char)>:
c000832e:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008333:	c1 e0 08             	shl    eax,0x8
c0008336:	89 c2                	mov    edx,eax
c0008338:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000833d:	09 d0                	or     eax,edx
c000833f:	c3                   	ret    

c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008340:	55                   	push   ebp
c0008341:	57                   	push   edi
c0008342:	56                   	push   esi
c0008343:	53                   	push   ebx
c0008344:	83 ec 1c             	sub    esp,0x1c
c0008347:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000834b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000834f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008353:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008357:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000835b:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000835f:	0f b6 c3             	movzx  eax,bl
c0008362:	50                   	push   eax
c0008363:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0008368:	50                   	push   eax
c0008369:	e8 16 ff ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c000836e:	5a                   	pop    edx
c000836f:	0f b6 c0             	movzx  eax,al
c0008372:	59                   	pop    ecx
c0008373:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c0008378:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000837c:	50                   	push   eax
c000837d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008381:	e8 a8 ff ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c0008386:	5a                   	pop    edx
c0008387:	66 6b d7 50          	imul   dx,di,0x50
c000838b:	59                   	pop    ecx
c000838c:	01 f2                	add    edx,esi
c000838e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008391:	0f b7 d2             	movzx  edx,dx
c0008394:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c0008398:	39 2d 24 05 02 c0    	cmp    DWORD PTR ds:0xc0020524,ebp
c000839e:	75 28                	jne    c00083c8 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c00083a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083a4:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00083a8:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c00083ac:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c00083b0:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00083b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00083b8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00083bc:	83 c4 1c             	add    esp,0x1c
c00083bf:	5b                   	pop    ebx
c00083c0:	5e                   	pop    esi
c00083c1:	5f                   	pop    edi
c00083c2:	5d                   	pop    ebp
c00083c3:	e9 2c db 00 00       	jmp    c0015ef4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00083c8:	83 c4 1c             	add    esp,0x1c
c00083cb:	5b                   	pop    ebx
c00083cc:	5e                   	pop    esi
c00083cd:	5f                   	pop    edi
c00083ce:	5d                   	pop    ebp
c00083cf:	c3                   	ret    

c00083d0 <VgaText::getCursorX()>:
c00083d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083d4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00083d7:	c3                   	ret    

c00083d8 <VgaText::getCursorY()>:
c00083d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083dc:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00083df:	c3                   	ret    

c00083e0 <VgaText::setCursor(int, int)>:
c00083e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00083e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00083e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00083eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00083ef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083f2:	e9 a9 fd ff ff       	jmp    c00081a0 <VgaText::updateCursor()>

c00083f7 <setActiveTerminal(VgaText*)>:
c00083f7:	53                   	push   ebx
c00083f8:	83 ec 08             	sub    esp,0x8
c00083fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00083ff:	85 db                	test   ebx,ebx
c0008401:	75 11                	jne    c0008414 <setActiveTerminal(VgaText*)+0x1d>
c0008403:	c7 44 24 10 44 d3 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d344
c000840b:	83 c4 08             	add    esp,0x8
c000840e:	5b                   	pop    ebx
c000840f:	e9 47 7d 00 00       	jmp    c001015b <KePanic(char const*)>
c0008414:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c0008419:	85 c0                	test   eax,eax
c000841b:	74 0c                	je     c0008429 <setActiveTerminal(VgaText*)+0x32>
c000841d:	83 ec 0c             	sub    esp,0xc
c0008420:	50                   	push   eax
c0008421:	e8 7a fd ff ff       	call   c00081a0 <VgaText::updateCursor()>
c0008426:	83 c4 10             	add    esp,0x10
c0008429:	89 1d 24 05 02 c0    	mov    DWORD PTR ds:0xc0020524,ebx
c000842f:	50                   	push   eax
c0008430:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008433:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008436:	53                   	push   ebx
c0008437:	e8 a4 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c000843c:	83 c4 18             	add    esp,0x18
c000843f:	5b                   	pop    ebx
c0008440:	c3                   	ret    
c0008441:	90                   	nop

c0008442 <VgaText::clearScreen()>:
c0008442:	57                   	push   edi
c0008443:	56                   	push   esi
c0008444:	31 f6                	xor    esi,esi
c0008446:	53                   	push   ebx
c0008447:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000844b:	52                   	push   edx
c000844c:	6a 00                	push   0x0
c000844e:	6a 00                	push   0x0
c0008450:	53                   	push   ebx
c0008451:	e8 8a ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c0008456:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000845d:	83 c4 10             	add    esp,0x10
c0008460:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008463:	7e 20                	jle    c0008485 <VgaText::clearScreen()+0x43>
c0008465:	31 ff                	xor    edi,edi
c0008467:	50                   	push   eax
c0008468:	50                   	push   eax
c0008469:	56                   	push   esi
c000846a:	57                   	push   edi
c000846b:	47                   	inc    edi
c000846c:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000846f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008472:	6a 20                	push   0x20
c0008474:	53                   	push   ebx
c0008475:	e8 c6 fe ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000847a:	83 c4 20             	add    esp,0x20
c000847d:	83 ff 50             	cmp    edi,0x50
c0008480:	75 e5                	jne    c0008467 <VgaText::clearScreen()+0x25>
c0008482:	46                   	inc    esi
c0008483:	eb db                	jmp    c0008460 <VgaText::clearScreen()+0x1e>
c0008485:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000848c:	5b                   	pop    ebx
c000848d:	5e                   	pop    esi
c000848e:	5f                   	pop    edi
c000848f:	c3                   	ret    

c0008490 <VgaText::setCursorX(int)>:
c0008490:	83 ec 10             	sub    esp,0x10
c0008493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008497:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	50                   	push   eax
c000849f:	e8 3c ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084a4:	83 c4 1c             	add    esp,0x1c
c00084a7:	c3                   	ret    

c00084a8 <VgaText::setCursorY(int)>:
c00084a8:	83 ec 10             	sub    esp,0x10
c00084ab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00084af:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084b3:	ff 70 14             	push   DWORD PTR [eax+0x14]
c00084b6:	50                   	push   eax
c00084b7:	e8 24 ff ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00084bc:	83 c4 1c             	add    esp,0x1c
c00084bf:	c3                   	ret    

c00084c0 <VgaText::incrementCursor(bool)>:
c00084c0:	56                   	push   esi
c00084c1:	53                   	push   ebx
c00084c2:	51                   	push   ecx
c00084c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00084c7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00084cb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00084ce:	40                   	inc    eax
c00084cf:	83 f8 50             	cmp    eax,0x50
c00084d2:	74 05                	je     c00084d9 <VgaText::incrementCursor(bool)+0x19>
c00084d4:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00084d7:	eb 24                	jmp    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00084dc:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00084e3:	8d 50 01             	lea    edx,[eax+0x1]
c00084e6:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00084e9:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00084ec:	75 0f                	jne    c00084fd <VgaText::incrementCursor(bool)+0x3d>
c00084ee:	83 ec 0c             	sub    esp,0xc
c00084f1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00084f4:	53                   	push   ebx
c00084f5:	e8 9c fd ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00084fa:	83 c4 10             	add    esp,0x10
c00084fd:	89 f0                	mov    eax,esi
c00084ff:	84 c0                	test   al,al
c0008501:	74 0c                	je     c000850f <VgaText::incrementCursor(bool)+0x4f>
c0008503:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008507:	5a                   	pop    edx
c0008508:	5b                   	pop    ebx
c0008509:	5e                   	pop    esi
c000850a:	e9 91 fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c000850f:	58                   	pop    eax
c0008510:	5b                   	pop    ebx
c0008511:	5e                   	pop    esi
c0008512:	c3                   	ret    
c0008513:	90                   	nop

c0008514 <VgaText::decrementCursor(bool)>:
c0008514:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008518:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000851c:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c000851f:	85 c0                	test   eax,eax
c0008521:	74 04                	je     c0008527 <VgaText::decrementCursor(bool)+0x13>
c0008523:	48                   	dec    eax
c0008524:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008527:	84 c9                	test   cl,cl
c0008529:	74 09                	je     c0008534 <VgaText::decrementCursor(bool)+0x20>
c000852b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000852f:	e9 6c fc ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c0008534:	c3                   	ret    
c0008535:	90                   	nop

c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008536:	53                   	push   ebx
c0008537:	83 ec 08             	sub    esp,0x8
c000853a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000853e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008542:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008546:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000854a:	3c 07                	cmp    al,0x7
c000854c:	75 21                	jne    c000856f <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c000854e:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008556:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c000855e:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008566:	83 c4 08             	add    esp,0x8
c0008569:	5b                   	pop    ebx
c000856a:	e9 c8 2d 00 00       	jmp    c000b337 <Krnl::beep(int, int, bool)>
c000856f:	3c 0d                	cmp    al,0xd
c0008571:	75 09                	jne    c000857c <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008573:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000857a:	eb 2c                	jmp    c00085a8 <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000857c:	3c 0a                	cmp    al,0xa
c000857e:	75 31                	jne    c00085b1 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008580:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008583:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000858a:	8d 50 01             	lea    edx,[eax+0x1]
c000858d:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008590:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008593:	75 0f                	jne    c00085a4 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008595:	83 ec 0c             	sub    esp,0xc
c0008598:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000859b:	53                   	push   ebx
c000859c:	e8 f5 fc ff ff       	call   c0008296 <VgaText::scrollScreen()>
c00085a1:	83 c4 10             	add    esp,0x10
c00085a4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00085a8:	83 c4 08             	add    esp,0x8
c00085ab:	5b                   	pop    ebx
c00085ac:	e9 ef fb ff ff       	jmp    c00081a0 <VgaText::updateCursor()>
c00085b1:	3c 08                	cmp    al,0x8
c00085b3:	75 25                	jne    c00085da <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c00085b5:	50                   	push   eax
c00085b6:	50                   	push   eax
c00085b7:	6a 01                	push   0x1
c00085b9:	53                   	push   ebx
c00085ba:	e8 55 ff ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c00085bf:	5a                   	pop    edx
c00085c0:	59                   	pop    ecx
c00085c1:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085c4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085c7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00085ca:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00085cd:	6a 20                	push   0x20
c00085cf:	53                   	push   ebx
c00085d0:	e8 6b fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085d5:	83 c4 28             	add    esp,0x28
c00085d8:	5b                   	pop    ebx
c00085d9:	c3                   	ret    
c00085da:	83 ec 08             	sub    esp,0x8
c00085dd:	0f be c0             	movsx  eax,al
c00085e0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00085e3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00085e6:	51                   	push   ecx
c00085e7:	52                   	push   edx
c00085e8:	50                   	push   eax
c00085e9:	53                   	push   ebx
c00085ea:	e8 51 fd ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00085ef:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00085f3:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00085fb:	83 c4 28             	add    esp,0x28
c00085fe:	5b                   	pop    ebx
c00085ff:	e9 bc fe ff ff       	jmp    c00084c0 <VgaText::incrementCursor(bool)>

c0008604 <VgaText::putchar(char)>:
c0008604:	56                   	push   esi
c0008605:	53                   	push   ebx
c0008606:	83 ec 14             	sub    esp,0x14
c0008609:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000860d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008611:	3c 5b                	cmp    al,0x5b
c0008613:	75 18                	jne    c000862d <VgaText::putchar(char)+0x29>
c0008615:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008619:	74 1f                	je     c000863a <VgaText::putchar(char)+0x36>
c000861b:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0008621:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008628:	e9 bd 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000862d:	3c 1b                	cmp    al,0x1b
c000862f:	75 09                	jne    c000863a <VgaText::putchar(char)+0x36>
c0008631:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008635:	e9 b0 00 00 00       	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c000863a:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000863d:	84 c9                	test   cl,cl
c000863f:	0f 84 92 00 00 00    	je     c00086d7 <VgaText::putchar(char)+0xd3>
c0008645:	8d 50 c0             	lea    edx,[eax-0x40]
c0008648:	80 fa 3e             	cmp    dl,0x3e
c000864b:	77 76                	ja     c00086c3 <VgaText::putchar(char)+0xbf>
c000864d:	3c 6d                	cmp    al,0x6d
c000864f:	75 47                	jne    c0008698 <VgaText::putchar(char)+0x94>
c0008651:	31 f6                	xor    esi,esi
c0008653:	31 d2                	xor    edx,edx
c0008655:	31 c0                	xor    eax,eax
c0008657:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000865a:	7e 2d                	jle    c0008689 <VgaText::putchar(char)+0x85>
c000865c:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008661:	80 fa 3b             	cmp    dl,0x3b
c0008664:	75 17                	jne    c000867d <VgaText::putchar(char)+0x79>
c0008666:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000866a:	50                   	push   eax
c000866b:	53                   	push   ebx
c000866c:	e8 45 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008671:	59                   	pop    ecx
c0008672:	31 d2                	xor    edx,edx
c0008674:	58                   	pop    eax
c0008675:	31 c0                	xor    eax,eax
c0008677:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000867b:	eb 09                	jmp    c0008686 <VgaText::putchar(char)+0x82>
c000867d:	6b c0 0a             	imul   eax,eax,0xa
c0008680:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008684:	88 ca                	mov    dl,cl
c0008686:	46                   	inc    esi
c0008687:	eb ce                	jmp    c0008657 <VgaText::putchar(char)+0x53>
c0008689:	84 d2                	test   dl,dl
c000868b:	74 2e                	je     c00086bb <VgaText::putchar(char)+0xb7>
c000868d:	50                   	push   eax
c000868e:	53                   	push   ebx
c000868f:	e8 22 fb ff ff       	call   c00081b6 <VgaText::doANSI_SGR(int)>
c0008694:	58                   	pop    eax
c0008695:	5a                   	pop    edx
c0008696:	eb 23                	jmp    c00086bb <VgaText::putchar(char)+0xb7>
c0008698:	3c 4a                	cmp    al,0x4a
c000869a:	75 1f                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c000869c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c00086a0:	75 19                	jne    c00086bb <VgaText::putchar(char)+0xb7>
c00086a2:	83 ec 0c             	sub    esp,0xc
c00086a5:	53                   	push   ebx
c00086a6:	e8 97 fd ff ff       	call   c0008442 <VgaText::clearScreen()>
c00086ab:	83 c4 0c             	add    esp,0xc
c00086ae:	6a 00                	push   0x0
c00086b0:	6a 00                	push   0x0
c00086b2:	53                   	push   ebx
c00086b3:	e8 28 fd ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00086b8:	83 c4 10             	add    esp,0x10
c00086bb:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c00086c1:	eb 27                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086c3:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c00086c6:	83 fa 0e             	cmp    edx,0xe
c00086c9:	7f 1f                	jg     c00086ea <VgaText::putchar(char)+0xe6>
c00086cb:	8d 4a 01             	lea    ecx,[edx+0x1]
c00086ce:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00086d1:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00086d5:	eb 13                	jmp    c00086ea <VgaText::putchar(char)+0xe6>
c00086d7:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00086da:	0f be c0             	movsx  eax,al
c00086dd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00086e0:	50                   	push   eax
c00086e1:	53                   	push   ebx
c00086e2:	e8 4f fe ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c00086e7:	83 c4 10             	add    esp,0x10
c00086ea:	83 c4 14             	add    esp,0x14
c00086ed:	5b                   	pop    ebx
c00086ee:	5e                   	pop    esi
c00086ef:	c3                   	ret    

c00086f0 <VgaText::putx(unsigned int)>:
c00086f0:	57                   	push   edi
c00086f1:	b9 11 00 00 00       	mov    ecx,0x11
c00086f6:	56                   	push   esi
c00086f7:	be 52 d3 01 c0       	mov    esi,0xc001d352
c00086fc:	53                   	push   ebx
c00086fd:	83 ec 20             	sub    esp,0x20
c0008700:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008704:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008708:	fc                   	cld    
c0008709:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000870b:	be 08 00 00 00       	mov    esi,0x8
c0008710:	50                   	push   eax
c0008711:	50                   	push   eax
c0008712:	89 d8                	mov    eax,ebx
c0008714:	c1 e3 04             	shl    ebx,0x4
c0008717:	c1 e8 1c             	shr    eax,0x1c
c000871a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c000871f:	50                   	push   eax
c0008720:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008724:	e8 db fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008729:	83 c4 10             	add    esp,0x10
c000872c:	4e                   	dec    esi
c000872d:	75 e1                	jne    c0008710 <VgaText::putx(unsigned int)+0x20>
c000872f:	83 c4 20             	add    esp,0x20
c0008732:	5b                   	pop    ebx
c0008733:	5e                   	pop    esi
c0008734:	5f                   	pop    edi
c0008735:	c3                   	ret    

c0008736 <VgaText::puts(char const*)>:
c0008736:	53                   	push   ebx
c0008737:	83 ec 08             	sub    esp,0x8
c000873a:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000873e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008741:	84 c0                	test   al,al
c0008743:	74 12                	je     c0008757 <VgaText::puts(char const*)+0x21>
c0008745:	43                   	inc    ebx
c0008746:	51                   	push   ecx
c0008747:	51                   	push   ecx
c0008748:	50                   	push   eax
c0008749:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000874d:	e8 b2 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008752:	83 c4 10             	add    esp,0x10
c0008755:	eb e7                	jmp    c000873e <VgaText::puts(char const*)+0x8>
c0008757:	83 c4 08             	add    esp,0x8
c000875a:	5b                   	pop    ebx
c000875b:	c3                   	ret    

c000875c <VgaText::write(unsigned long long, void*, int*)>:
c000875c:	55                   	push   ebp
c000875d:	57                   	push   edi
c000875e:	56                   	push   esi
c000875f:	53                   	push   ebx
c0008760:	83 ec 0c             	sub    esp,0xc
c0008763:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008767:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000876b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000876f:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008776:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008779:	39 eb                	cmp    ebx,ebp
c000877b:	74 13                	je     c0008790 <VgaText::write(unsigned long long, void*, int*)+0x34>
c000877d:	43                   	inc    ebx
c000877e:	50                   	push   eax
c000877f:	50                   	push   eax
c0008780:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008784:	50                   	push   eax
c0008785:	56                   	push   esi
c0008786:	e8 79 fe ff ff       	call   c0008604 <VgaText::putchar(char)>
c000878b:	83 c4 10             	add    esp,0x10
c000878e:	eb e9                	jmp    c0008779 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008790:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008797:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000879b:	89 38                	mov    DWORD PTR [eax],edi
c000879d:	83 c4 0c             	add    esp,0xc
c00087a0:	31 c0                	xor    eax,eax
c00087a2:	5b                   	pop    ebx
c00087a3:	5e                   	pop    esi
c00087a4:	5f                   	pop    edi
c00087a5:	5d                   	pop    ebp
c00087a6:	c3                   	ret    
c00087a7:	90                   	nop

c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c00087a8:	55                   	push   ebp
c00087a9:	57                   	push   edi
c00087aa:	56                   	push   esi
c00087ab:	53                   	push   ebx
c00087ac:	83 ec 0c             	sub    esp,0xc
c00087af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00087b3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	50                   	push   eax
c00087c0:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00087c5:	50                   	push   eax
c00087c6:	e8 b9 fa ff ff       	call   c0008284 <VgaText::combineColours(unsigned char, unsigned char)>
c00087cb:	5a                   	pop    edx
c00087cc:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00087d1:	59                   	pop    ecx
c00087d2:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c00087d5:	89 c5                	mov    ebp,eax
c00087d7:	0f b7 f6             	movzx  esi,si
c00087da:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c00087de:	01 f6                	add    esi,esi
c00087e0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00087e3:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00087e6:	84 c0                	test   al,al
c00087e8:	0f 84 f4 00 00 00    	je     c00088e2 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c00087ee:	3c 0d                	cmp    al,0xd
c00087f0:	75 0c                	jne    c00087fe <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c00087f2:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087f9:	e9 de 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00087fe:	3c 0a                	cmp    al,0xa
c0008800:	75 45                	jne    c0008847 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008802:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008805:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000880c:	8d 48 01             	lea    ecx,[eax+0x1]
c000880f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008812:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008815:	75 0f                	jne    c0008826 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008817:	83 ec 0c             	sub    esp,0xc
c000881a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000881d:	53                   	push   ebx
c000881e:	e8 73 fa ff ff       	call   c0008296 <VgaText::scrollScreen()>
c0008823:	83 c4 10             	add    esp,0x10
c0008826:	83 ec 0c             	sub    esp,0xc
c0008829:	53                   	push   ebx
c000882a:	e8 71 f9 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c000882f:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008834:	83 c4 10             	add    esp,0x10
c0008837:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000883a:	0f b7 f6             	movzx  esi,si
c000883d:	01 f6                	add    esi,esi
c000883f:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008842:	e9 95 00 00 00       	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008847:	3c 08                	cmp    al,0x8
c0008849:	75 35                	jne    c0008880 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c000884b:	51                   	push   ecx
c000884c:	51                   	push   ecx
c000884d:	6a 01                	push   0x1
c000884f:	53                   	push   ebx
c0008850:	e8 bf fc ff ff       	call   c0008514 <VgaText::decrementCursor(bool)>
c0008855:	5e                   	pop    esi
c0008856:	58                   	pop    eax
c0008857:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000885a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000885d:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008860:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008863:	6a 20                	push   0x20
c0008865:	53                   	push   ebx
c0008866:	e8 d5 fa ff ff       	call   c0008340 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000886b:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008870:	83 c4 20             	add    esp,0x20
c0008873:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008876:	0f b7 f6             	movzx  esi,si
c0008879:	01 f6                	add    esi,esi
c000887b:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c000887e:	eb 5c                	jmp    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008880:	52                   	push   edx
c0008881:	52                   	push   edx
c0008882:	89 ea                	mov    edx,ebp
c0008884:	0f b6 ca             	movzx  ecx,dl
c0008887:	51                   	push   ecx
c0008888:	50                   	push   eax
c0008889:	e8 a0 fa ff ff       	call   c000832e <VgaText::combineCharAndColour(char, unsigned char)>
c000888e:	83 c4 10             	add    esp,0x10
c0008891:	66 89 06             	mov    WORD PTR [esi],ax
c0008894:	39 1d 24 05 02 c0    	cmp    DWORD PTR ds:0xc0020524,ebx
c000889a:	75 1d                	jne    c00088b9 <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c000889c:	83 ec 0c             	sub    esp,0xc
c000889f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088a2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088a5:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088a9:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00088ad:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00088b0:	50                   	push   eax
c00088b1:	e8 3e d6 00 00       	call   c0015ef4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c00088b6:	83 c4 20             	add    esp,0x20
c00088b9:	83 c6 02             	add    esi,0x2
c00088bc:	50                   	push   eax
c00088bd:	50                   	push   eax
c00088be:	6a 00                	push   0x0
c00088c0:	53                   	push   ebx
c00088c1:	e8 fa fb ff ff       	call   c00084c0 <VgaText::incrementCursor(bool)>
c00088c6:	83 c4 10             	add    esp,0x10
c00088c9:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c00088cd:	75 0d                	jne    c00088dc <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c00088cf:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c00088d4:	0f b7 f6             	movzx  esi,si
c00088d7:	01 f6                	add    esi,esi
c00088d9:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00088dc:	47                   	inc    edi
c00088dd:	e9 01 ff ff ff       	jmp    c00087e3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c00088e2:	83 ec 0c             	sub    esp,0xc
c00088e5:	53                   	push   ebx
c00088e6:	e8 b5 f8 ff ff       	call   c00081a0 <VgaText::updateCursor()>
c00088eb:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	c3                   	ret    

c00088fa <VgaText::VgaText(char const*)>:
c00088fa:	56                   	push   esi
c00088fb:	53                   	push   ebx
c00088fc:	83 ec 04             	sub    esp,0x4
c00088ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008903:	83 ec 08             	sub    esp,0x8
c0008906:	6a 00                	push   0x0
c0008908:	50                   	push   eax
c0008909:	e8 3c 05 00 00       	call   c0008e4a <UnixFile::UnixFile(int)>
c000890e:	83 c4 10             	add    esp,0x10
c0008911:	ba c4 d3 01 c0       	mov    edx,0xc001d3c4
c0008916:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000891a:	89 10                	mov    DWORD PTR [eax],edx
c000891c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008920:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008927:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000892b:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008932:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008936:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c000893a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000893e:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008946:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c000894d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008951:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008955:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008959:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008960:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008964:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c000896b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000896f:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008976:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000897a:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008981:	83 ec 0c             	sub    esp,0xc
c0008984:	6a 01                	push   0x1
c0008986:	e8 02 09 00 00       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000898b:	83 c4 10             	add    esp,0x10
c000898e:	89 c2                	mov    edx,eax
c0008990:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008994:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008997:	8b 1d d0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d0
c000899d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089a1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089a4:	89 c6                	mov    esi,eax
c00089a6:	e8 ea f0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00089ab:	68 05 0c 00 00       	push   0xc05
c00089b0:	56                   	push   esi
c00089b1:	50                   	push   eax
c00089b2:	53                   	push   ebx
c00089b3:	e8 6a 0f 00 00       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00089bf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00089c2:	83 ec 04             	sub    esp,0x4
c00089c5:	68 a0 0f 00 00       	push   0xfa0
c00089ca:	6a 00                	push   0x0
c00089cc:	50                   	push   eax
c00089cd:	e8 fe 7a ff ff       	call   c00004d0 <memset>
c00089d2:	83 c4 10             	add    esp,0x10
c00089d5:	83 ec 04             	sub    esp,0x4
c00089d8:	6a 00                	push   0x0
c00089da:	6a 07                	push   0x7
c00089dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089e0:	e8 65 f8 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00089e5:	83 c4 10             	add    esp,0x10
c00089e8:	83 ec 04             	sub    esp,0x4
c00089eb:	6a 00                	push   0x0
c00089ed:	6a 00                	push   0x0
c00089ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00089f3:	e8 e8 f9 ff ff       	call   c00083e0 <VgaText::setCursor(int, int)>
c00089f8:	83 c4 10             	add    esp,0x10
c00089fb:	83 ec 0c             	sub    esp,0xc
c00089fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a02:	e8 3b fa ff ff       	call   c0008442 <VgaText::clearScreen()>
c0008a07:	83 c4 10             	add    esp,0x10
c0008a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a0e:	c6 40 59 00          	mov    BYTE PTR [eax+0x59],0x0
c0008a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a16:	05 82 00 00 00       	add    eax,0x82
c0008a1b:	83 ec 04             	sub    esp,0x4
c0008a1e:	6a 30                	push   0x30
c0008a20:	6a 00                	push   0x0
c0008a22:	50                   	push   eax
c0008a23:	e8 a8 7a ff ff       	call   c00004d0 <memset>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008a2f:	05 b2 00 00 00       	add    eax,0xb2
c0008a34:	83 ec 04             	sub    esp,0x4
c0008a37:	68 80 00 00 00       	push   0x80
c0008a3c:	6a 00                	push   0x0
c0008a3e:	50                   	push   eax
c0008a3f:	e8 8c 7a ff ff       	call   c00004d0 <memset>
c0008a44:	83 c4 10             	add    esp,0x10
c0008a47:	90                   	nop
c0008a48:	83 c4 04             	add    esp,0x4
c0008a4b:	5b                   	pop    ebx
c0008a4c:	5e                   	pop    esi
c0008a4d:	c3                   	ret    

c0008a4e <VgaText::receiveKey(unsigned char)>:
c0008a4e:	57                   	push   edi
c0008a4f:	56                   	push   esi
c0008a50:	53                   	push   ebx
c0008a51:	83 ec 10             	sub    esp,0x10
c0008a54:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008a58:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a5c:	89 f0                	mov    eax,esi
c0008a5e:	84 c0                	test   al,al
c0008a60:	0f 84 3b 01 00 00    	je     c0008ba1 <VgaText::receiveKey(unsigned char)+0x153>
c0008a66:	8d bb 82 00 00 00    	lea    edi,[ebx+0x82]
c0008a6c:	3c 08                	cmp    al,0x8
c0008a6e:	75 68                	jne    c0008ad8 <VgaText::receiveKey(unsigned char)+0x8a>
c0008a70:	83 ec 0c             	sub    esp,0xc
c0008a73:	57                   	push   edi
c0008a74:	e8 c7 7a ff ff       	call   c0000540 <strlen>
c0008a79:	83 c4 10             	add    esp,0x10
c0008a7c:	85 c0                	test   eax,eax
c0008a7e:	0f 84 be 00 00 00    	je     c0008b42 <VgaText::receiveKey(unsigned char)+0xf4>
c0008a84:	50                   	push   eax
c0008a85:	50                   	push   eax
c0008a86:	6a 08                	push   0x8
c0008a88:	53                   	push   ebx
c0008a89:	e8 76 fb ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008a8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008a91:	e8 aa 7a ff ff       	call   c0000540 <strlen>
c0008a96:	83 c4 10             	add    esp,0x10
c0008a99:	8a 84 03 81 00 00 00 	mov    al,BYTE PTR [ebx+eax*1+0x81]
c0008aa0:	3c 0d                	cmp    al,0xd
c0008aa2:	0f 95 c1             	setne  cl
c0008aa5:	3c 18                	cmp    al,0x18
c0008aa7:	0f 9e c2             	setle  dl
c0008aaa:	84 d1                	test   cl,dl
c0008aac:	74 17                	je     c0008ac5 <VgaText::receiveKey(unsigned char)+0x77>
c0008aae:	83 e8 08             	sub    eax,0x8
c0008ab1:	3c 02                	cmp    al,0x2
c0008ab3:	76 10                	jbe    c0008ac5 <VgaText::receiveKey(unsigned char)+0x77>
c0008ab5:	50                   	push   eax
c0008ab6:	50                   	push   eax
c0008ab7:	68 63 d3 01 c0       	push   0xc001d363
c0008abc:	53                   	push   ebx
c0008abd:	e8 74 fc ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	83 ec 0c             	sub    esp,0xc
c0008ac8:	57                   	push   edi
c0008ac9:	e8 72 7a ff ff       	call   c0000540 <strlen>
c0008ace:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008ad6:	eb 67                	jmp    c0008b3f <VgaText::receiveKey(unsigned char)+0xf1>
c0008ad8:	3c 18                	cmp    al,0x18
c0008ada:	0f 96 c2             	setbe  dl
c0008add:	3c 0d                	cmp    al,0xd
c0008adf:	0f 95 c0             	setne  al
c0008ae2:	84 c2                	test   dl,al
c0008ae4:	74 30                	je     c0008b16 <VgaText::receiveKey(unsigned char)+0xc8>
c0008ae6:	8d 46 f7             	lea    eax,[esi-0x9]
c0008ae9:	3c 01                	cmp    al,0x1
c0008aeb:	76 29                	jbe    c0008b16 <VgaText::receiveKey(unsigned char)+0xc8>
c0008aed:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008af0:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008af3:	68 69 d3 01 c0       	push   0xc001d369
c0008af8:	53                   	push   ebx
c0008af9:	e8 aa fc ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008afe:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b01:	8d 46 40             	lea    eax,[esi+0x40]
c0008b04:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b07:	0f b6 c0             	movzx  eax,al
c0008b0a:	50                   	push   eax
c0008b0b:	53                   	push   ebx
c0008b0c:	e8 25 fa ff ff       	call   c0008536 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008b11:	83 c4 20             	add    esp,0x20
c0008b14:	eb 11                	jmp    c0008b27 <VgaText::receiveKey(unsigned char)+0xd9>
c0008b16:	89 f0                	mov    eax,esi
c0008b18:	51                   	push   ecx
c0008b19:	0f be c0             	movsx  eax,al
c0008b1c:	51                   	push   ecx
c0008b1d:	50                   	push   eax
c0008b1e:	53                   	push   ebx
c0008b1f:	e8 e0 fa ff ff       	call   c0008604 <VgaText::putchar(char)>
c0008b24:	83 c4 10             	add    esp,0x10
c0008b27:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0008b2c:	89 f0                	mov    eax,esi
c0008b2e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0008b32:	52                   	push   edx
c0008b33:	52                   	push   edx
c0008b34:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008b38:	50                   	push   eax
c0008b39:	57                   	push   edi
c0008b3a:	e8 81 7c ff ff       	call   c00007c0 <strcat>
c0008b3f:	83 c4 10             	add    esp,0x10
c0008b42:	80 bb 80 00 00 00 00 	cmp    BYTE PTR [ebx+0x80],0x0
c0008b49:	75 06                	jne    c0008b51 <VgaText::receiveKey(unsigned char)+0x103>
c0008b4b:	89 f0                	mov    eax,esi
c0008b4d:	3c 0a                	cmp    al,0xa
c0008b4f:	75 50                	jne    c0008ba1 <VgaText::receiveKey(unsigned char)+0x153>
c0008b51:	83 ec 0c             	sub    esp,0xc
c0008b54:	81 c3 b2 00 00 00    	add    ebx,0xb2
c0008b5a:	53                   	push   ebx
c0008b5b:	e8 e0 79 ff ff       	call   c0000540 <strlen>
c0008b60:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008b63:	89 c6                	mov    esi,eax
c0008b65:	e8 d6 79 ff ff       	call   c0000540 <strlen>
c0008b6a:	83 c4 10             	add    esp,0x10
c0008b6d:	8d 44 06 04          	lea    eax,[esi+eax*1+0x4]
c0008b71:	3d 80 00 00 00       	cmp    eax,0x80
c0008b76:	76 10                	jbe    c0008b88 <VgaText::receiveKey(unsigned char)+0x13a>
c0008b78:	83 ec 0c             	sub    esp,0xc
c0008b7b:	68 6f d3 01 c0       	push   0xc001d36f
c0008b80:	e8 d6 75 00 00       	call   c001015b <KePanic(char const*)>
c0008b85:	83 c4 10             	add    esp,0x10
c0008b88:	50                   	push   eax
c0008b89:	50                   	push   eax
c0008b8a:	57                   	push   edi
c0008b8b:	53                   	push   ebx
c0008b8c:	e8 2f 7c ff ff       	call   c00007c0 <strcat>
c0008b91:	83 c4 0c             	add    esp,0xc
c0008b94:	6a 30                	push   0x30
c0008b96:	6a 00                	push   0x0
c0008b98:	57                   	push   edi
c0008b99:	e8 32 79 ff ff       	call   c00004d0 <memset>
c0008b9e:	83 c4 10             	add    esp,0x10
c0008ba1:	83 c4 10             	add    esp,0x10
c0008ba4:	5b                   	pop    ebx
c0008ba5:	5e                   	pop    esi
c0008ba6:	5f                   	pop    edi
c0008ba7:	c3                   	ret    

c0008ba8 <VgaText::doUpdate()>:
c0008ba8:	c3                   	ret    

c0008ba9 <newTerminal(char*)>:
c0008ba9:	83 ec 28             	sub    esp,0x28
c0008bac:	68 34 01 00 00       	push   0x134
c0008bb1:	e8 03 ec ff ff       	call   c00077b9 <malloc>
c0008bb6:	5a                   	pop    edx
c0008bb7:	59                   	pop    ecx
c0008bb8:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008bbc:	50                   	push   eax
c0008bbd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008bc1:	e8 34 fd ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0008bc6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008bca:	83 c4 2c             	add    esp,0x2c
c0008bcd:	c3                   	ret    
c0008bce:	66 90                	xchg   ax,ax

c0008bd0 <TSS::TSS()>:
c0008bd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008bd4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008bdb:	90                   	nop
c0008bdc:	c3                   	ret    
c0008bdd:	90                   	nop
c0008bde:	66 90                	xchg   ax,ax

c0008be0 <TSS::setESP(unsigned long)>:
c0008be0:	55                   	push   ebp
c0008be1:	89 e5                	mov    ebp,esp
c0008be3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008be6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008be9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008bec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008bef:	90                   	nop
c0008bf0:	5d                   	pop    ebp
c0008bf1:	c3                   	ret    
c0008bf2:	66 90                	xchg   ax,ax

c0008bf4 <TSS::flush()>:
c0008bf4:	55                   	push   ebp
c0008bf5:	89 e5                	mov    ebp,esp
c0008bf7:	83 ec 10             	sub    esp,0x10
c0008bfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008bfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0008bff:	83 c8 03             	or     eax,0x3
c0008c02:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008c06:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008c0a:	66 89 d0             	mov    ax,dx
c0008c0d:	0f 00 d8             	ltr    ax
c0008c10:	90                   	nop
c0008c11:	c9                   	leave  
c0008c12:	c3                   	ret    
c0008c13:	90                   	nop

c0008c14 <TSS::setup(unsigned long, unsigned long)>:
c0008c14:	55                   	push   ebp
c0008c15:	89 e5                	mov    ebp,esp
c0008c17:	83 ec 18             	sub    esp,0x18
c0008c1a:	83 ec 0c             	sub    esp,0xc
c0008c1d:	6a 68                	push   0x68
c0008c1f:	e8 95 eb ff ff       	call   c00077b9 <malloc>
c0008c24:	83 c4 10             	add    esp,0x10
c0008c27:	89 c2                	mov    edx,eax
c0008c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c2c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c32:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c35:	83 ec 04             	sub    esp,0x4
c0008c38:	6a 68                	push   0x68
c0008c3a:	6a 00                	push   0x0
c0008c3c:	50                   	push   eax
c0008c3d:	e8 8e 78 ff ff       	call   c00004d0 <memset>
c0008c42:	83 c4 10             	add    esp,0x10
c0008c45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c4b:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008c51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c54:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c57:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c60:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c63:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008c66:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c6c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c6f:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008c75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c78:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c7b:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008c81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c87:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008c8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c93:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008c99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008c9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008c9f:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008ca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ca8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cab:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008cb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cb7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008cba:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008cbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cc0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cc3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008cc6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ccc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ccf:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008cd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008cd9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cdc:	0f 20 da             	mov    edx,cr3
c0008cdf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008ce2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008ce5:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008ce8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ceb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008cee:	83 ec 08             	sub    esp,0x8
c0008cf1:	50                   	push   eax
c0008cf2:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008cf5:	50                   	push   eax
c0008cf6:	e8 45 e3 ff ff       	call   c0007040 <GDTEntry::setBase(unsigned int)>
c0008cfb:	83 c4 10             	add    esp,0x10
c0008cfe:	83 ec 08             	sub    esp,0x8
c0008d01:	6a 68                	push   0x68
c0008d03:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008d06:	50                   	push   eax
c0008d07:	e8 50 e3 ff ff       	call   c000705c <GDTEntry::setLimit(unsigned int)>
c0008d0c:	83 c4 10             	add    esp,0x10
c0008d0f:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008d13:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d16:	83 e0 0f             	and    eax,0xf
c0008d19:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d1c:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008d1f:	83 c8 40             	or     eax,0x40
c0008d22:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008d25:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0008d2a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d30:	05 78 01 00 00       	add    eax,0x178
c0008d35:	83 ec 04             	sub    esp,0x4
c0008d38:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008d3b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008d3e:	50                   	push   eax
c0008d3f:	e8 4c e3 ff ff       	call   c0007090 <GDT::addEntry(GDTEntry)>
c0008d44:	83 c4 10             	add    esp,0x10
c0008d47:	89 c2                	mov    edx,eax
c0008d49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d4c:	89 10                	mov    DWORD PTR [eax],edx
c0008d4e:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0008d53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008d59:	05 78 01 00 00       	add    eax,0x178
c0008d5e:	83 ec 0c             	sub    esp,0xc
c0008d61:	50                   	push   eax
c0008d62:	e8 53 e3 ff ff       	call   c00070ba <GDT::flush()>
c0008d67:	83 c4 10             	add    esp,0x10
c0008d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008d6d:	8b 00                	mov    eax,DWORD PTR [eax]
c0008d6f:	c9                   	leave  
c0008d70:	c3                   	ret    
c0008d71:	90                   	nop

c0008d72 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008d72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008d76:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008d7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008d7d:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008d82:	75 08                	jne    c0008d8c <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008d84:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008d8a:	eb 38                	jmp    c0008dc4 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008d8c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008d91:	75 17                	jne    c0008daa <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008d93:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008d98:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008d9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008da1:	8b 10                	mov    edx,DWORD PTR [eax]
c0008da3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008da7:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008daa:	89 c1                	mov    ecx,eax
c0008dac:	83 e1 fd             	and    ecx,0xfffffffd
c0008daf:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008db5:	74 cd                	je     c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008db7:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008dbc:	83 e0 ef             	and    eax,0xffffffef
c0008dbf:	83 f8 08             	cmp    eax,0x8
c0008dc2:	76 c0                	jbe    c0008d84 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008dc4:	31 c0                	xor    eax,eax
c0008dc6:	c3                   	ret    
c0008dc7:	90                   	nop

c0008dc8 <ReservedFilename::isAtty()>:
c0008dc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008dcc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0008dcf:	31 c0                	xor    eax,eax
c0008dd1:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c0008dd7:	74 09                	je     c0008de2 <ReservedFilename::isAtty()+0x1a>
c0008dd9:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0008ddf:	0f 94 c0             	sete   al
c0008de2:	c3                   	ret    
c0008de3:	90                   	nop

c0008de4 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0008de4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008de8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008dec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008def:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008df3:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008df8:	75 08                	jne    c0008e02 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0008dfa:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008e00:	eb 3d                	jmp    c0008e3f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e02:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008e07:	75 17                	jne    c0008e20 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0008e09:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008e0e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008e11:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008e17:	8b 10                	mov    edx,DWORD PTR [eax]
c0008e19:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008e1d:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0008e20:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0008e25:	75 04                	jne    c0008e2b <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0008e27:	89 0a                	mov    DWORD PTR [edx],ecx
c0008e29:	eb 14                	jmp    c0008e3f <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0008e2b:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0008e30:	74 c8                	je     c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e32:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0008e37:	83 e0 ef             	and    eax,0xffffffef
c0008e3a:	83 f8 08             	cmp    eax,0x8
c0008e3d:	76 bb                	jbe    c0008dfa <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0008e3f:	31 c0                	xor    eax,eax
c0008e41:	c3                   	ret    

c0008e42 <UnixFile::getFileDescriptor()>:
c0008e42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e46:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e49:	c3                   	ret    

c0008e4a <UnixFile::UnixFile(int)>:
c0008e4a:	53                   	push   ebx
c0008e4b:	83 ec 28             	sub    esp,0x28
c0008e4e:	ba 8c d4 01 c0       	mov    edx,0xc001d48c
c0008e53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008e57:	89 10                	mov    DWORD PTR [eax],edx
c0008e59:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0008e61:	0f 8f 8c 01 00 00    	jg     c0008ff3 <UnixFile::UnixFile(int)+0x1a9>
c0008e67:	a1 e0 f1 01 c0       	mov    eax,ds:0xc001f1e0
c0008e6c:	8d 50 01             	lea    edx,[eax+0x1]
c0008e6f:	89 15 e0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e0,edx
c0008e75:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008e79:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0008e7c:	83 ec 08             	sub    esp,0x8
c0008e7f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0008e83:	68 b8 05 02 c0       	push   0xc00205b8
c0008e88:	e8 db 30 01 00       	call   c001bf68 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0008e8d:	83 c4 10             	add    esp,0x10
c0008e90:	a0 b4 05 02 c0       	mov    al,ds:0xc00205b4
c0008e95:	83 f0 01             	xor    eax,0x1
c0008e98:	84 c0                	test   al,al
c0008e9a:	0f 84 54 01 00 00    	je     c0008ff4 <UnixFile::UnixFile(int)+0x1aa>
c0008ea0:	c6 05 b4 05 02 c0 01 	mov    BYTE PTR ds:0xc00205b4,0x1
c0008ea7:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0008eaf:	83 ec 0c             	sub    esp,0xc
c0008eb2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008eb6:	e8 fe e8 ff ff       	call   c00077b9 <malloc>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	89 c3                	mov    ebx,eax
c0008ec0:	83 ec 08             	sub    esp,0x8
c0008ec3:	68 03 ff ff 0f       	push   0xfffff03
c0008ec8:	53                   	push   ebx
c0008ec9:	e8 2c 01 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008ece:	83 c4 10             	add    esp,0x10
c0008ed1:	89 1d ac 05 02 c0    	mov    DWORD PTR ds:0xc00205ac,ebx
c0008ed7:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0008edf:	83 ec 0c             	sub    esp,0xc
c0008ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ee6:	e8 ce e8 ff ff       	call   c00077b9 <malloc>
c0008eeb:	83 c4 10             	add    esp,0x10
c0008eee:	89 c3                	mov    ebx,eax
c0008ef0:	83 ec 08             	sub    esp,0x8
c0008ef3:	68 01 ff ff 0f       	push   0xfffff01
c0008ef8:	53                   	push   ebx
c0008ef9:	e8 fc 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008efe:	83 c4 10             	add    esp,0x10
c0008f01:	89 1d b0 05 02 c0    	mov    DWORD PTR ds:0xc00205b0,ebx
c0008f07:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0008f0f:	83 ec 0c             	sub    esp,0xc
c0008f12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008f16:	e8 9e e8 ff ff       	call   c00077b9 <malloc>
c0008f1b:	83 c4 10             	add    esp,0x10
c0008f1e:	89 c3                	mov    ebx,eax
c0008f20:	83 ec 08             	sub    esp,0x8
c0008f23:	68 00 ff ff 0f       	push   0xfffff00
c0008f28:	53                   	push   ebx
c0008f29:	e8 cc 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008f2e:	83 c4 10             	add    esp,0x10
c0008f31:	89 1d a4 05 02 c0    	mov    DWORD PTR ds:0xc00205a4,ebx
c0008f37:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0008f3f:	83 ec 0c             	sub    esp,0xc
c0008f42:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008f46:	e8 6e e8 ff ff       	call   c00077b9 <malloc>
c0008f4b:	83 c4 10             	add    esp,0x10
c0008f4e:	89 c3                	mov    ebx,eax
c0008f50:	83 ec 08             	sub    esp,0x8
c0008f53:	68 02 ff ff 0f       	push   0xfffff02
c0008f58:	53                   	push   ebx
c0008f59:	e8 9c 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008f5e:	83 c4 10             	add    esp,0x10
c0008f61:	89 1d a8 05 02 c0    	mov    DWORD PTR ds:0xc00205a8,ebx
c0008f67:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0008f6f:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0008f74:	7f 7e                	jg     c0008ff4 <UnixFile::UnixFile(int)+0x1aa>
c0008f76:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0008f7e:	83 ec 0c             	sub    esp,0xc
c0008f81:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008f85:	e8 2f e8 ff ff       	call   c00077b9 <malloc>
c0008f8a:	83 c4 10             	add    esp,0x10
c0008f8d:	89 c3                	mov    ebx,eax
c0008f8f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008f93:	05 10 ff ff 0f       	add    eax,0xfffff10
c0008f98:	83 ec 08             	sub    esp,0x8
c0008f9b:	50                   	push   eax
c0008f9c:	53                   	push   ebx
c0008f9d:	e8 58 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008fa2:	83 c4 10             	add    esp,0x10
c0008fa5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fa9:	89 1c 85 80 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa80],ebx
c0008fb0:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0008fb8:	83 ec 0c             	sub    esp,0xc
c0008fbb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fbf:	e8 f5 e7 ff ff       	call   c00077b9 <malloc>
c0008fc4:	83 c4 10             	add    esp,0x10
c0008fc7:	89 c3                	mov    ebx,eax
c0008fc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fcd:	05 20 ff ff 0f       	add    eax,0xfffff20
c0008fd2:	83 ec 08             	sub    esp,0x8
c0008fd5:	50                   	push   eax
c0008fd6:	53                   	push   ebx
c0008fd7:	e8 1e 00 00 00       	call   c0008ffa <ReservedFilename::ReservedFilename(int)>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008fe3:	89 1c 85 40 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfac0],ebx
c0008fea:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0008fee:	e9 7c ff ff ff       	jmp    c0008f6f <UnixFile::UnixFile(int)+0x125>
c0008ff3:	90                   	nop
c0008ff4:	83 c4 28             	add    esp,0x28
c0008ff7:	5b                   	pop    ebx
c0008ff8:	c3                   	ret    
c0008ff9:	90                   	nop

c0008ffa <ReservedFilename::ReservedFilename(int)>:
c0008ffa:	83 ec 0c             	sub    esp,0xc
c0008ffd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009001:	83 ec 08             	sub    esp,0x8
c0009004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009008:	50                   	push   eax
c0009009:	e8 3c fe ff ff       	call   c0008e4a <UnixFile::UnixFile(int)>
c000900e:	83 c4 10             	add    esp,0x10
c0009011:	ba a8 d4 01 c0       	mov    edx,0xc001d4a8
c0009016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000901a:	89 10                	mov    DWORD PTR [eax],edx
c000901c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009020:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009024:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0009027:	90                   	nop
c0009028:	83 c4 0c             	add    esp,0xc
c000902b:	c3                   	ret    

c000902c <UnixFile::~UnixFile()>:
c000902c:	83 ec 1c             	sub    esp,0x1c
c000902f:	ba 8c d4 01 c0       	mov    edx,0xc001d48c
c0009034:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009038:	89 10                	mov    DWORD PTR [eax],edx
c000903a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000903e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009041:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0009046:	7f 73                	jg     c00090bb <UnixFile::~UnixFile()+0x8f>
c0009048:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009050:	83 ec 0c             	sub    esp,0xc
c0009053:	68 b8 05 02 c0       	push   0xc00205b8
c0009058:	e8 df 2f 01 00       	call   c001c03c <LinkedList<UnixFile>::getFirstElement()>
c000905d:	83 c4 10             	add    esp,0x10
c0009060:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009064:	83 ec 0c             	sub    esp,0xc
c0009067:	68 b8 05 02 c0       	push   0xc00205b8
c000906c:	e8 d3 2f 01 00       	call   c001c044 <LinkedList<UnixFile>::removeFirst()>
c0009071:	83 c4 10             	add    esp,0x10
c0009074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009078:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c000907c:	74 40                	je     c00090be <UnixFile::~UnixFile()+0x92>
c000907e:	83 ec 08             	sub    esp,0x8
c0009081:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0009085:	68 b8 05 02 c0       	push   0xc00205b8
c000908a:	e8 d9 2e 01 00       	call   c001bf68 <LinkedList<UnixFile>::addElement(UnixFile*)>
c000908f:	83 c4 10             	add    esp,0x10
c0009092:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009096:	8d 50 01             	lea    edx,[eax+0x1]
c0009099:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000909d:	3d 20 a1 07 00       	cmp    eax,0x7a120
c00090a2:	0f 94 c0             	sete   al
c00090a5:	84 c0                	test   al,al
c00090a7:	74 a7                	je     c0009050 <UnixFile::~UnixFile()+0x24>
c00090a9:	83 ec 0c             	sub    esp,0xc
c00090ac:	68 64 d4 01 c0       	push   0xc001d464
c00090b1:	e8 a5 70 00 00       	call   c001015b <KePanic(char const*)>
c00090b6:	83 c4 10             	add    esp,0x10
c00090b9:	eb 95                	jmp    c0009050 <UnixFile::~UnixFile()+0x24>
c00090bb:	90                   	nop
c00090bc:	eb 01                	jmp    c00090bf <UnixFile::~UnixFile()+0x93>
c00090be:	90                   	nop
c00090bf:	90                   	nop
c00090c0:	83 c4 1c             	add    esp,0x1c
c00090c3:	c3                   	ret    

c00090c4 <UnixFile::~UnixFile()>:
c00090c4:	83 ec 0c             	sub    esp,0xc
c00090c7:	83 ec 0c             	sub    esp,0xc
c00090ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ce:	e8 59 ff ff ff       	call   c000902c <UnixFile::~UnixFile()>
c00090d3:	83 c4 10             	add    esp,0x10
c00090d6:	83 ec 08             	sub    esp,0x8
c00090d9:	6a 0c                	push   0xc
c00090db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090df:	e8 06 13 00 00       	call   c000a3ea <operator delete(void*, unsigned long)>
c00090e4:	83 c4 10             	add    esp,0x10
c00090e7:	83 c4 0c             	add    esp,0xc
c00090ea:	c3                   	ret    
c00090eb:	90                   	nop

c00090ec <ReservedFilename::~ReservedFilename()>:
c00090ec:	83 ec 0c             	sub    esp,0xc
c00090ef:	ba a8 d4 01 c0       	mov    edx,0xc001d4a8
c00090f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090f8:	89 10                	mov    DWORD PTR [eax],edx
c00090fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00090fe:	83 ec 0c             	sub    esp,0xc
c0009101:	50                   	push   eax
c0009102:	e8 25 ff ff ff       	call   c000902c <UnixFile::~UnixFile()>
c0009107:	83 c4 10             	add    esp,0x10
c000910a:	90                   	nop
c000910b:	83 c4 0c             	add    esp,0xc
c000910e:	c3                   	ret    
c000910f:	90                   	nop

c0009110 <ReservedFilename::~ReservedFilename()>:
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	83 ec 0c             	sub    esp,0xc
c0009116:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000911a:	e8 cd ff ff ff       	call   c00090ec <ReservedFilename::~ReservedFilename()>
c000911f:	83 c4 10             	add    esp,0x10
c0009122:	83 ec 08             	sub    esp,0x8
c0009125:	6a 0c                	push   0xc
c0009127:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912b:	e8 ba 12 00 00       	call   c000a3ea <operator delete(void*, unsigned long)>
c0009130:	83 c4 10             	add    esp,0x10
c0009133:	83 c4 0c             	add    esp,0xc
c0009136:	c3                   	ret    

c0009137 <getFromFileDescriptor(int)>:
c0009137:	53                   	push   ebx
c0009138:	83 ec 08             	sub    esp,0x8
c000913b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000913f:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0009145:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c000914b:	7f 2c                	jg     c0009179 <getFromFileDescriptor(int)+0x42>
c000914d:	83 ec 0c             	sub    esp,0xc
c0009150:	68 b8 05 02 c0       	push   0xc00205b8
c0009155:	e8 e2 2e 01 00       	call   c001c03c <LinkedList<UnixFile>::getFirstElement()>
c000915a:	83 c4 10             	add    esp,0x10
c000915d:	85 c0                	test   eax,eax
c000915f:	75 04                	jne    c0009165 <getFromFileDescriptor(int)+0x2e>
c0009161:	31 c0                	xor    eax,eax
c0009163:	eb 6e                	jmp    c00091d3 <getFromFileDescriptor(int)+0x9c>
c0009165:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0009168:	74 69                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c000916a:	52                   	push   edx
c000916b:	52                   	push   edx
c000916c:	50                   	push   eax
c000916d:	68 b8 05 02 c0       	push   0xc00205b8
c0009172:	e8 6f 2f 01 00       	call   c001c0e6 <LinkedList<UnixFile>::getNext(UnixFile*)>
c0009177:	eb e1                	jmp    c000915a <getFromFileDescriptor(int)+0x23>
c0009179:	a1 ac 05 02 c0       	mov    eax,ds:0xc00205ac
c000917e:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009184:	74 4d                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c0009186:	a1 b0 05 02 c0       	mov    eax,ds:0xc00205b0
c000918b:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0009191:	74 40                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c0009193:	a1 a8 05 02 c0       	mov    eax,ds:0xc00205a8
c0009198:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000919e:	74 33                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c00091a0:	a1 a4 05 02 c0       	mov    eax,ds:0xc00205a4
c00091a5:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00091ab:	74 26                	je     c00091d3 <getFromFileDescriptor(int)+0x9c>
c00091ad:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00091b3:	83 f8 08             	cmp    eax,0x8
c00091b6:	77 09                	ja     c00091c1 <getFromFileDescriptor(int)+0x8a>
c00091b8:	8b 04 85 80 05 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfa80]
c00091bf:	eb 12                	jmp    c00091d3 <getFromFileDescriptor(int)+0x9c>
c00091c1:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c00091c7:	83 fb 08             	cmp    ebx,0x8
c00091ca:	77 95                	ja     c0009161 <getFromFileDescriptor(int)+0x2a>
c00091cc:	8b 04 9d 40 05 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdfac0]
c00091d3:	83 c4 08             	add    esp,0x8
c00091d6:	5b                   	pop    ebx
c00091d7:	c3                   	ret    

c00091d8 <__static_initialization_and_destruction_0(int, int)>:
c00091d8:	83 ec 0c             	sub    esp,0xc
c00091db:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c00091e0:	75 34                	jne    c0009216 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091e2:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00091ea:	75 2a                	jne    c0009216 <__static_initialization_and_destruction_0(int, int)+0x3e>
c00091ec:	83 ec 0c             	sub    esp,0xc
c00091ef:	68 b8 05 02 c0       	push   0xc00205b8
c00091f4:	e8 2d 2d 01 00       	call   c001bf26 <LinkedList<UnixFile>::LinkedList()>
c00091f9:	83 c4 10             	add    esp,0x10
c00091fc:	83 ec 04             	sub    esp,0x4
c00091ff:	68 70 f1 01 c0       	push   0xc001f170
c0009204:	68 b8 05 02 c0       	push   0xc00205b8
c0009209:	68 24 bf 01 c0       	push   0xc001bf24
c000920e:	e8 87 11 00 00       	call   c000a39a <__cxa_atexit>
c0009213:	83 c4 10             	add    esp,0x10
c0009216:	90                   	nop
c0009217:	83 c4 0c             	add    esp,0xc
c000921a:	c3                   	ret    

c000921b <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c000921b:	83 ec 0c             	sub    esp,0xc
c000921e:	83 ec 08             	sub    esp,0x8
c0009221:	68 ff ff 00 00       	push   0xffff
c0009226:	6a 01                	push   0x1
c0009228:	e8 ab ff ff ff       	call   c00091d8 <__static_initialization_and_destruction_0(int, int)>
c000922d:	83 c4 10             	add    esp,0x10
c0009230:	83 c4 0c             	add    esp,0xc
c0009233:	c3                   	ret    

c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0009234:	53                   	push   ebx
c0009235:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009239:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000923d:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0009243:	89 c8                	mov    eax,ecx
c0009245:	d1 e8                	shr    eax,1
c0009247:	03 05 e8 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f1e8
c000924d:	83 e1 01             	and    ecx,0x1
c0009250:	8a 10                	mov    dl,BYTE PTR [eax]
c0009252:	75 09                	jne    c000925d <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0009254:	83 e2 f0             	and    edx,0xfffffff0
c0009257:	09 da                	or     edx,ebx
c0009259:	88 10                	mov    BYTE PTR [eax],dl
c000925b:	5b                   	pop    ebx
c000925c:	c3                   	ret    
c000925d:	c1 e3 04             	shl    ebx,0x4
c0009260:	83 e2 0f             	and    edx,0xf
c0009263:	09 da                	or     edx,ebx
c0009265:	88 10                	mov    BYTE PTR [eax],dl
c0009267:	5b                   	pop    ebx
c0009268:	c3                   	ret    

c0009269 <Virt::getPageState(unsigned long)>:
c0009269:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000926d:	8b 0d e8 f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1e8
c0009273:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0009279:	89 d0                	mov    eax,edx
c000927b:	d1 e8                	shr    eax,1
c000927d:	83 e2 01             	and    edx,0x1
c0009280:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009283:	75 04                	jne    c0009289 <Virt::getPageState(unsigned long)+0x20>
c0009285:	83 e0 0f             	and    eax,0xf
c0009288:	c3                   	ret    
c0009289:	c0 e8 04             	shr    al,0x4
c000928c:	c3                   	ret    

c000928d <Virt::allocateKernelVirtualPages(int)>:
c000928d:	55                   	push   ebp
c000928e:	31 ed                	xor    ebp,ebp
c0009290:	57                   	push   edi
c0009291:	56                   	push   esi
c0009292:	53                   	push   ebx
c0009293:	31 db                	xor    ebx,ebx
c0009295:	83 ec 1c             	sub    esp,0x1c
c0009298:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000929c:	8b 3d e4 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f1e4
c00092a2:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00092a7:	57                   	push   edi
c00092a8:	e8 bc ff ff ff       	call   c0009269 <Virt::getPageState(unsigned long)>
c00092ad:	5a                   	pop    edx
c00092ae:	84 c0                	test   al,al
c00092b0:	75 3a                	jne    c00092ec <Virt::allocateKernelVirtualPages(int)+0x5f>
c00092b2:	85 db                	test   ebx,ebx
c00092b4:	75 02                	jne    c00092b8 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00092b6:	89 fd                	mov    ebp,edi
c00092b8:	43                   	inc    ebx
c00092b9:	39 f3                	cmp    ebx,esi
c00092bb:	74 5a                	je     c0009317 <Virt::allocateKernelVirtualPages(int)+0x8a>
c00092bd:	47                   	inc    edi
c00092be:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092c4:	76 31                	jbe    c00092f7 <Virt::allocateKernelVirtualPages(int)+0x6a>
c00092c6:	c7 05 e4 f1 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f1e4,0xc8000
c00092d0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00092d5:	75 28                	jne    c00092ff <Virt::allocateKernelVirtualPages(int)+0x72>
c00092d7:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c00092dc:	bf 00 80 0c 00       	mov    edi,0xc8000
c00092e1:	57                   	push   edi
c00092e2:	e8 82 ff ff ff       	call   c0009269 <Virt::getPageState(unsigned long)>
c00092e7:	5a                   	pop    edx
c00092e8:	84 c0                	test   al,al
c00092ea:	74 c6                	je     c00092b2 <Virt::allocateKernelVirtualPages(int)+0x25>
c00092ec:	31 db                	xor    ebx,ebx
c00092ee:	47                   	inc    edi
c00092ef:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c00092f5:	77 cf                	ja     c00092c6 <Virt::allocateKernelVirtualPages(int)+0x39>
c00092f7:	89 3d e4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e4,edi
c00092fd:	eb a8                	jmp    c00092a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c00092ff:	83 ec 0c             	sub    esp,0xc
c0009302:	68 bc d4 01 c0       	push   0xc001d4bc
c0009307:	e8 4f 6e 00 00       	call   c001015b <KePanic(char const*)>
c000930c:	8b 3d e4 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f1e4
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	eb 90                	jmp    c00092a7 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009317:	89 2d e4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e4,ebp
c000931d:	4b                   	dec    ebx
c000931e:	74 5f                	je     c000937f <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009320:	85 f6                	test   esi,esi
c0009322:	74 3d                	je     c0009361 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009324:	89 e8                	mov    eax,ebp
c0009326:	31 db                	xor    ebx,ebx
c0009328:	8d 7e ff             	lea    edi,[esi-0x1]
c000932b:	eb 14                	jmp    c0009341 <Virt::allocateKernelVirtualPages(int)+0xb4>
c000932d:	6a 01                	push   0x1
c000932f:	43                   	inc    ebx
c0009330:	50                   	push   eax
c0009331:	e8 fe fe ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009336:	58                   	pop    eax
c0009337:	39 f3                	cmp    ebx,esi
c0009339:	5a                   	pop    edx
c000933a:	74 25                	je     c0009361 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000933c:	a1 e4 f1 01 c0       	mov    eax,ds:0xc001f1e4
c0009341:	8d 50 01             	lea    edx,[eax+0x1]
c0009344:	85 db                	test   ebx,ebx
c0009346:	89 15 e4 f1 01 c0    	mov    DWORD PTR ds:0xc001f1e4,edx
c000934c:	74 20                	je     c000936e <Virt::allocateKernelVirtualPages(int)+0xe1>
c000934e:	39 df                	cmp    edi,ebx
c0009350:	75 db                	jne    c000932d <Virt::allocateKernelVirtualPages(int)+0xa0>
c0009352:	6a 03                	push   0x3
c0009354:	43                   	inc    ebx
c0009355:	50                   	push   eax
c0009356:	e8 d9 fe ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000935b:	59                   	pop    ecx
c000935c:	39 f3                	cmp    ebx,esi
c000935e:	58                   	pop    eax
c000935f:	75 db                	jne    c000933c <Virt::allocateKernelVirtualPages(int)+0xaf>
c0009361:	83 c4 1c             	add    esp,0x1c
c0009364:	89 e8                	mov    eax,ebp
c0009366:	5b                   	pop    ebx
c0009367:	c1 e0 0c             	shl    eax,0xc
c000936a:	5e                   	pop    esi
c000936b:	5f                   	pop    edi
c000936c:	5d                   	pop    ebp
c000936d:	c3                   	ret    
c000936e:	6a 02                	push   0x2
c0009370:	bb 01 00 00 00       	mov    ebx,0x1
c0009375:	50                   	push   eax
c0009376:	e8 b9 fe ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000937b:	58                   	pop    eax
c000937c:	5a                   	pop    edx
c000937d:	eb bd                	jmp    c000933c <Virt::allocateKernelVirtualPages(int)+0xaf>
c000937f:	6a 04                	push   0x4
c0009381:	8d 45 01             	lea    eax,[ebp+0x1]
c0009384:	55                   	push   ebp
c0009385:	a3 e4 f1 01 c0       	mov    ds:0xc001f1e4,eax
c000938a:	e8 a5 fe ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000938f:	59                   	pop    ecx
c0009390:	89 e8                	mov    eax,ebp
c0009392:	5b                   	pop    ebx
c0009393:	c1 e0 0c             	shl    eax,0xc
c0009396:	83 c4 1c             	add    esp,0x1c
c0009399:	5b                   	pop    ebx
c000939a:	5e                   	pop    esi
c000939b:	5f                   	pop    edi
c000939c:	5d                   	pop    ebp
c000939d:	c3                   	ret    

c000939e <Virt::freeSwapfilePage(unsigned long)>:
c000939e:	53                   	push   ebx
c000939f:	8b 15 cc 05 02 c0    	mov    edx,DWORD PTR ds:0xc00205cc
c00093a5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00093a9:	b8 01 00 00 00       	mov    eax,0x1
c00093ae:	89 cb                	mov    ebx,ecx
c00093b0:	d3 e0                	shl    eax,cl
c00093b2:	c1 eb 05             	shr    ebx,0x5
c00093b5:	f7 d0                	not    eax
c00093b7:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c00093ba:	5b                   	pop    ebx
c00093bb:	c3                   	ret    

c00093bc <Virt::swapIDToSector(unsigned long)>:
c00093bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00093c0:	0f af 05 ec f1 01 c0 	imul   eax,DWORD PTR ds:0xc001f1ec
c00093c7:	03 05 f4 f1 01 c0    	add    eax,DWORD PTR ds:0xc001f1f4
c00093cd:	c3                   	ret    

c00093ce <Virt::allocateSwapfilePage()>:
c00093ce:	55                   	push   ebp
c00093cf:	31 d2                	xor    edx,edx
c00093d1:	57                   	push   edi
c00093d2:	56                   	push   esi
c00093d3:	53                   	push   ebx
c00093d4:	83 ec 0c             	sub    esp,0xc
c00093d7:	8b 0d ec f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1ec
c00093dd:	a1 f0 f1 01 c0       	mov    eax,ds:0xc001f1f0
c00093e2:	f7 f1                	div    ecx
c00093e4:	39 0d f0 f1 01 c0    	cmp    DWORD PTR ds:0xc001f1f0,ecx
c00093ea:	72 2d                	jb     c0009419 <Virt::allocateSwapfilePage()+0x4b>
c00093ec:	8b 35 cc 05 02 c0    	mov    esi,DWORD PTR ds:0xc00205cc
c00093f2:	8b 16                	mov    edx,DWORD PTR [esi]
c00093f4:	f6 c2 01             	test   dl,0x1
c00093f7:	74 3c                	je     c0009435 <Virt::allocateSwapfilePage()+0x67>
c00093f9:	31 c9                	xor    ecx,ecx
c00093fb:	bf 01 00 00 00       	mov    edi,0x1
c0009400:	eb 12                	jmp    c0009414 <Virt::allocateSwapfilePage()+0x46>
c0009402:	89 fd                	mov    ebp,edi
c0009404:	89 ca                	mov    edx,ecx
c0009406:	d3 e5                	shl    ebp,cl
c0009408:	c1 ea 05             	shr    edx,0x5
c000940b:	8d 1c 96             	lea    ebx,[esi+edx*4]
c000940e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009410:	85 ea                	test   edx,ebp
c0009412:	74 2a                	je     c000943e <Virt::allocateSwapfilePage()+0x70>
c0009414:	41                   	inc    ecx
c0009415:	39 c8                	cmp    eax,ecx
c0009417:	77 e9                	ja     c0009402 <Virt::allocateSwapfilePage()+0x34>
c0009419:	83 ec 0c             	sub    esp,0xc
c000941c:	68 23 d6 01 c0       	push   0xc001d623
c0009421:	e8 35 6d 00 00       	call   c001015b <KePanic(char const*)>
c0009426:	83 c4 10             	add    esp,0x10
c0009429:	31 c9                	xor    ecx,ecx
c000942b:	83 c4 0c             	add    esp,0xc
c000942e:	89 c8                	mov    eax,ecx
c0009430:	5b                   	pop    ebx
c0009431:	5e                   	pop    esi
c0009432:	5f                   	pop    edi
c0009433:	5d                   	pop    ebp
c0009434:	c3                   	ret    
c0009435:	89 f3                	mov    ebx,esi
c0009437:	bd 01 00 00 00       	mov    ebp,0x1
c000943c:	31 c9                	xor    ecx,ecx
c000943e:	09 ea                	or     edx,ebp
c0009440:	89 c8                	mov    eax,ecx
c0009442:	89 13                	mov    DWORD PTR [ebx],edx
c0009444:	83 c4 0c             	add    esp,0xc
c0009447:	5b                   	pop    ebx
c0009448:	5e                   	pop    esi
c0009449:	5f                   	pop    edi
c000944a:	5d                   	pop    ebp
c000944b:	c3                   	ret    

c000944c <Virt::virtualMemorySetup()>:
c000944c:	53                   	push   ebx
c000944d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0009452:	6a 0f                	push   0xf
c0009454:	53                   	push   ebx
c0009455:	43                   	inc    ebx
c0009456:	e8 d9 fd ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000945b:	58                   	pop    eax
c000945c:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009462:	5a                   	pop    edx
c0009463:	75 ed                	jne    c0009452 <Virt::virtualMemorySetup()+0x6>
c0009465:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000946a:	6a 00                	push   0x0
c000946c:	53                   	push   ebx
c000946d:	43                   	inc    ebx
c000946e:	e8 c1 fd ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009473:	59                   	pop    ecx
c0009474:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000947a:	58                   	pop    eax
c000947b:	75 ed                	jne    c000946a <Virt::virtualMemorySetup()+0x1e>
c000947d:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009482:	6a 0f                	push   0xf
c0009484:	53                   	push   ebx
c0009485:	43                   	inc    ebx
c0009486:	e8 a9 fd ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000948b:	58                   	pop    eax
c000948c:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009492:	5a                   	pop    edx
c0009493:	75 ed                	jne    c0009482 <Virt::virtualMemorySetup()+0x36>
c0009495:	5b                   	pop    ebx
c0009496:	c3                   	ret    

c0009497 <Virt::setupPageSwapping(int)>:
c0009497:	53                   	push   ebx
c0009498:	83 ec 0c             	sub    esp,0xc
c000949b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000949f:	a1 48 2a 02 c0       	mov    eax,ds:0xc0022a48
c00094a4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00094aa:	8b 10                	mov    edx,DWORD PTR [eax]
c00094ac:	53                   	push   ebx
c00094ad:	c1 e3 0b             	shl    ebx,0xb
c00094b0:	68 3a d6 01 c0       	push   0xc001d63a
c00094b5:	50                   	push   eax
c00094b6:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c00094b9:	89 1d f0 f1 01 c0    	mov    DWORD PTR ds:0xc001f1f0,ebx
c00094bf:	c6 05 f8 f1 01 c0 43 	mov    BYTE PTR ds:0xc001f1f8,0x43
c00094c6:	c1 eb 08             	shr    ebx,0x8
c00094c9:	a3 f4 f1 01 c0       	mov    ds:0xc001f1f4,eax
c00094ce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00094d1:	c7 05 ec f1 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f1ec,0x8
c00094db:	e8 d9 e2 ff ff       	call   c00077b9 <malloc>
c00094e0:	83 c4 0c             	add    esp,0xc
c00094e3:	89 c1                	mov    ecx,eax
c00094e5:	a3 cc 05 02 c0       	mov    ds:0xc00205cc,eax
c00094ea:	31 d2                	xor    edx,edx
c00094ec:	a1 f0 f1 01 c0       	mov    eax,ds:0xc001f1f0
c00094f1:	f7 35 ec f1 01 c0    	div    DWORD PTR ds:0xc001f1ec
c00094f7:	c1 e8 05             	shr    eax,0x5
c00094fa:	50                   	push   eax
c00094fb:	6a 00                	push   0x0
c00094fd:	51                   	push   ecx
c00094fe:	e8 cd 6f ff ff       	call   c00004d0 <memset>
c0009503:	83 c4 18             	add    esp,0x18
c0009506:	5b                   	pop    ebx
c0009507:	c3                   	ret    

c0009508 <VAS::VAS()>:
c0009508:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000950c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009513:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009517:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000951e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009522:	a3 d0 05 02 c0       	mov    ds:0xc00205d0,eax
c0009527:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000952b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c000952f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009533:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009536:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000953a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009541:	90                   	nop
c0009542:	c3                   	ret    
c0009543:	90                   	nop

c0009544 <VAS::VAS(VAS*)>:
c0009544:	83 ec 0c             	sub    esp,0xc
c0009547:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000954b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009556:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000955d:	83 ec 0c             	sub    esp,0xc
c0009560:	68 dc d4 01 c0       	push   0xc001d4dc
c0009565:	e8 f1 6b 00 00       	call   c001015b <KePanic(char const*)>
c000956a:	83 c4 10             	add    esp,0x10
c000956d:	90                   	nop
c000956e:	83 c4 0c             	add    esp,0xc
c0009571:	c3                   	ret    

c0009572 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0009572:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009576:	89 c2                	mov    edx,eax
c0009578:	c1 e8 0a             	shr    eax,0xa
c000957b:	c1 ea 16             	shr    edx,0x16
c000957e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009583:	19 c9                	sbb    ecx,ecx
c0009585:	c1 e2 0c             	shl    edx,0xc
c0009588:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c000958e:	25 fc 0f 00 00       	and    eax,0xffc
c0009593:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c000959a:	01 d0                	add    eax,edx
c000959c:	c3                   	ret    
c000959d:	90                   	nop

c000959e <VAS::getPageTableEntry(unsigned long)>:
c000959e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00095a2:	89 ca                	mov    edx,ecx
c00095a4:	c1 e9 0a             	shr    ecx,0xa
c00095a7:	c1 ea 16             	shr    edx,0x16
c00095aa:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00095b0:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00095b6:	c1 e0 0c             	shl    eax,0xc
c00095b9:	8d 04 08             	lea    eax,[eax+ecx*1]
c00095bc:	c3                   	ret    

c00095bd <Virt::freeKernelVirtualPages(unsigned long)>:
c00095bd:	57                   	push   edi
c00095be:	56                   	push   esi
c00095bf:	be 01 00 00 00       	mov    esi,0x1
c00095c4:	53                   	push   ebx
c00095c5:	83 ec 10             	sub    esp,0x10
c00095c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00095cc:	c1 eb 0c             	shr    ebx,0xc
c00095cf:	eb 3f                	jmp    c0009610 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c00095d1:	83 ec 08             	sub    esp,0x8
c00095d4:	a1 d0 05 02 c0       	mov    eax,ds:0xc00205d0
c00095d9:	57                   	push   edi
c00095da:	50                   	push   eax
c00095db:	e8 be ff ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c00095e0:	83 c4 10             	add    esp,0x10
c00095e3:	8b 00                	mov    eax,DWORD PTR [eax]
c00095e5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00095e9:	f6 c4 04             	test   ah,0x4
c00095ec:	75 60                	jne    c000964e <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c00095ee:	80 fa 04             	cmp    dl,0x4
c00095f1:	74 79                	je     c000966c <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c00095f3:	80 fa 02             	cmp    dl,0x2
c00095f6:	0f 84 89 00 00 00    	je     c0009685 <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c00095fc:	80 fa 03             	cmp    dl,0x3
c00095ff:	0f 84 ae 00 00 00    	je     c00096b3 <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c0009605:	fe ca                	dec    dl
c0009607:	0f 84 93 00 00 00    	je     c00096a0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000960d:	43                   	inc    ebx
c000960e:	31 f6                	xor    esi,esi
c0009610:	53                   	push   ebx
c0009611:	89 df                	mov    edi,ebx
c0009613:	e8 51 fc ff ff       	call   c0009269 <Virt::getPageState(unsigned long)>
c0009618:	c1 e7 0c             	shl    edi,0xc
c000961b:	5a                   	pop    edx
c000961c:	84 c0                	test   al,al
c000961e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0009622:	75 ad                	jne    c00095d1 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0009624:	83 ec 0c             	sub    esp,0xc
c0009627:	68 51 d6 01 c0       	push   0xc001d651
c000962c:	e8 2a 6b 00 00       	call   c001015b <KePanic(char const*)>
c0009631:	5a                   	pop    edx
c0009632:	59                   	pop    ecx
c0009633:	57                   	push   edi
c0009634:	8b 3d d0 05 02 c0    	mov    edi,DWORD PTR ds:0xc00205d0
c000963a:	57                   	push   edi
c000963b:	e8 5e ff ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c0009640:	83 c4 10             	add    esp,0x10
c0009643:	8b 00                	mov    eax,DWORD PTR [eax]
c0009645:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009649:	f6 c4 04             	test   ah,0x4
c000964c:	74 bf                	je     c000960d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c000964e:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0009652:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009657:	83 ec 0c             	sub    esp,0xc
c000965a:	50                   	push   eax
c000965b:	e8 d3 e3 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009660:	83 c4 10             	add    esp,0x10
c0009663:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009667:	80 fa 04             	cmp    dl,0x4
c000966a:	75 87                	jne    c00095f3 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c000966c:	89 f0                	mov    eax,esi
c000966e:	84 c0                	test   al,al
c0009670:	75 47                	jne    c00096b9 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c0009672:	c7 44 24 20 00 d5 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d500
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	5b                   	pop    ebx
c000967e:	5e                   	pop    esi
c000967f:	5f                   	pop    edi
c0009680:	e9 d6 6a 00 00       	jmp    c001015b <KePanic(char const*)>
c0009685:	89 f0                	mov    eax,esi
c0009687:	84 c0                	test   al,al
c0009689:	75 15                	jne    c00096a0 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c000968b:	83 ec 0c             	sub    esp,0xc
c000968e:	68 6d d6 01 c0       	push   0xc001d66d
c0009693:	e8 c3 6a 00 00       	call   c001015b <KePanic(char const*)>
c0009698:	83 c4 10             	add    esp,0x10
c000969b:	e9 6d ff ff ff       	jmp    c000960d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096a0:	83 ec 08             	sub    esp,0x8
c00096a3:	6a 00                	push   0x0
c00096a5:	53                   	push   ebx
c00096a6:	e8 89 fb ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ab:	83 c4 10             	add    esp,0x10
c00096ae:	e9 5a ff ff ff       	jmp    c000960d <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00096b3:	89 f0                	mov    eax,esi
c00096b5:	84 c0                	test   al,al
c00096b7:	75 15                	jne    c00096ce <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c00096b9:	83 ec 08             	sub    esp,0x8
c00096bc:	6a 00                	push   0x0
c00096be:	53                   	push   ebx
c00096bf:	e8 70 fb ff ff       	call   c0009234 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	83 c4 10             	add    esp,0x10
c00096c7:	83 c4 10             	add    esp,0x10
c00096ca:	5b                   	pop    ebx
c00096cb:	5e                   	pop    esi
c00096cc:	5f                   	pop    edi
c00096cd:	c3                   	ret    
c00096ce:	c7 44 24 20 89 d6 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d689
c00096d6:	83 c4 10             	add    esp,0x10
c00096d9:	5b                   	pop    ebx
c00096da:	5e                   	pop    esi
c00096db:	5f                   	pop    edi
c00096dc:	e9 7a 6a 00 00       	jmp    c001015b <KePanic(char const*)>
c00096e1:	90                   	nop

c00096e2 <VAS::freeAllocatedPages(unsigned long)>:
c00096e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00096e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00096ea:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c00096ee:	74 09                	je     c00096f9 <VAS::freeAllocatedPages(unsigned long)+0x17>
c00096f0:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00096f4:	e9 c4 fe ff ff       	jmp    c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c00096f9:	c7 44 24 04 24 d5 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d524
c0009701:	e9 da 0d 00 00       	jmp    c000a4e0 <Dbg::kprintf(char const*, ...)>

c0009706 <VAS::virtualToPhysical(unsigned long)>:
c0009706:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000970a:	50                   	push   eax
c000970b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000970f:	52                   	push   edx
c0009710:	e8 89 fe ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c0009715:	59                   	pop    ecx
c0009716:	8b 00                	mov    eax,DWORD PTR [eax]
c0009718:	5a                   	pop    edx
c0009719:	25 00 f0 ff ff       	and    eax,0xfffff000
c000971e:	c3                   	ret    
c000971f:	90                   	nop

c0009720 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009720:	55                   	push   ebp
c0009721:	57                   	push   edi
c0009722:	56                   	push   esi
c0009723:	53                   	push   ebx
c0009724:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009728:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000972c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009730:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009734:	85 db                	test   ebx,ebx
c0009736:	7e 22                	jle    c000975a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009738:	c1 e3 0c             	shl    ebx,0xc
c000973b:	01 f3                	add    ebx,esi
c000973d:	56                   	push   esi
c000973e:	81 c6 00 10 00 00    	add    esi,0x1000
c0009744:	55                   	push   ebp
c0009745:	e8 54 fe ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c000974a:	5a                   	pop    edx
c000974b:	59                   	pop    ecx
c000974c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000974e:	21 f9                	and    ecx,edi
c0009750:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0009754:	39 f3                	cmp    ebx,esi
c0009756:	89 08                	mov    DWORD PTR [eax],ecx
c0009758:	75 e3                	jne    c000973d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c000975a:	5b                   	pop    ebx
c000975b:	5e                   	pop    esi
c000975c:	5f                   	pop    edi
c000975d:	5d                   	pop    ebp
c000975e:	c3                   	ret    
c000975f:	90                   	nop

c0009760 <VAS::setToWriteCombining(unsigned long, int)>:
c0009760:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009765:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000976b:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009772:	75 01                	jne    c0009775 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009774:	c3                   	ret    
c0009775:	68 80 00 00 00       	push   0x80
c000977a:	6a ff                	push   0xffffffff
c000977c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009780:	50                   	push   eax
c0009781:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009785:	52                   	push   edx
c0009786:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000978a:	51                   	push   ecx
c000978b:	e8 90 ff ff ff       	call   c0009720 <VAS::reflagRange(unsigned long, int, int, int)>
c0009790:	83 c4 14             	add    esp,0x14
c0009793:	c3                   	ret    

c0009794 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009794:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0009799:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000979d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00097a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00097a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00097a7:	19 c0                	sbb    eax,eax
c00097a9:	83 ca 03             	or     edx,0x3
c00097ac:	83 e0 fc             	and    eax,0xfffffffc
c00097af:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00097b6:	0f 20 d8             	mov    eax,cr3
c00097b9:	0f 22 d8             	mov    cr3,eax
c00097bc:	c3                   	ret    
c00097bd:	90                   	nop

c00097be <VAS::~VAS()>:
c00097be:	83 ec 2c             	sub    esp,0x2c
c00097c1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00097c9:	fa                   	cli    
c00097ca:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00097cf:	40                   	inc    eax
c00097d0:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00097d5:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00097da:	8b 00                	mov    eax,DWORD PTR [eax]
c00097dc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00097df:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00097e5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00097e9:	6a 01                	push   0x1
c00097eb:	50                   	push   eax
c00097ec:	e8 a3 ff ff ff       	call   c0009794 <VAS::mapOtherVASIn(bool, VAS*)>
c00097f1:	83 c4 0c             	add    esp,0xc
c00097f4:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00097fc:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009804:	0f 8f d4 00 00 00    	jg     c00098de <VAS::~VAS()+0x120>
c000980a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000980e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009811:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009815:	c1 e2 02             	shl    edx,0x2
c0009818:	01 d0                	add    eax,edx
c000981a:	8b 00                	mov    eax,DWORD PTR [eax]
c000981c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009824:	83 e0 01             	and    eax,0x1
c0009827:	0f 84 a8 00 00 00    	je     c00098d5 <VAS::~VAS()+0x117>
c000982d:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009835:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c000983d:	7f 72                	jg     c00098b1 <VAS::~VAS()+0xf3>
c000983f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009843:	c1 e0 0a             	shl    eax,0xa
c0009846:	89 c2                	mov    edx,eax
c0009848:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000984c:	01 d0                	add    eax,edx
c000984e:	c1 e0 0c             	shl    eax,0xc
c0009851:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009855:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000985a:	8b 00                	mov    eax,DWORD PTR [eax]
c000985c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000985f:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009865:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009869:	6a 01                	push   0x1
c000986b:	50                   	push   eax
c000986c:	e8 01 fd ff ff       	call   c0009572 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009871:	83 c4 0c             	add    esp,0xc
c0009874:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009878:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000987c:	8b 00                	mov    eax,DWORD PTR [eax]
c000987e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009882:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009886:	25 01 04 00 00       	and    eax,0x401
c000988b:	3d 01 04 00 00       	cmp    eax,0x401
c0009890:	75 19                	jne    c00098ab <VAS::~VAS()+0xed>
c0009892:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009896:	25 00 f0 ff ff       	and    eax,0xfffff000
c000989b:	83 ec 0c             	sub    esp,0xc
c000989e:	50                   	push   eax
c000989f:	e8 8f e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098a4:	83 c4 10             	add    esp,0x10
c00098a7:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098ab:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00098af:	eb 84                	jmp    c0009835 <VAS::~VAS()+0x77>
c00098b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b5:	25 00 04 00 00       	and    eax,0x400
c00098ba:	74 19                	je     c00098d5 <VAS::~VAS()+0x117>
c00098bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00098c5:	83 ec 0c             	sub    esp,0xc
c00098c8:	50                   	push   eax
c00098c9:	e8 65 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c00098ce:	83 c4 10             	add    esp,0x10
c00098d1:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00098d5:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00098d9:	e9 1e ff ff ff       	jmp    c00097fc <VAS::~VAS()+0x3e>
c00098de:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098e2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00098e5:	83 ec 0c             	sub    esp,0xc
c00098e8:	50                   	push   eax
c00098e9:	e8 cf fc ff ff       	call   c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c00098ee:	83 c4 10             	add    esp,0x10
c00098f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00098f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00098f8:	83 ec 0c             	sub    esp,0xc
c00098fb:	50                   	push   eax
c00098fc:	e8 32 e1 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0009901:	83 c4 10             	add    esp,0x10
c0009904:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009908:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000990d:	48                   	dec    eax
c000990e:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0009913:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0009918:	85 c0                	test   eax,eax
c000991a:	75 01                	jne    c000991d <VAS::~VAS()+0x15f>
c000991c:	fb                   	sti    
c000991d:	90                   	nop
c000991e:	83 c4 2c             	add    esp,0x2c
c0009921:	c3                   	ret    

c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009922:	55                   	push   ebp
c0009923:	57                   	push   edi
c0009924:	56                   	push   esi
c0009925:	53                   	push   ebx
c0009926:	83 ec 1c             	sub    esp,0x1c
c0009929:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000992d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009931:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009937:	77 0b                	ja     c0009944 <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009939:	0f 20 d8             	mov    eax,cr3
c000993c:	0f 20 d8             	mov    eax,cr3
c000993f:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009942:	75 47                	jne    c000998b <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009944:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009948:	09 d8                	or     eax,ebx
c000994a:	a9 ff 0f 00 00       	test   eax,0xfff
c000994f:	75 57                	jne    c00099a8 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009951:	89 de                	mov    esi,ebx
c0009953:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009956:	c1 ee 16             	shr    esi,0x16
c0009959:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009960:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009964:	74 54                	je     c00099ba <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009966:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000996a:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009970:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009974:	c1 e6 0c             	shl    esi,0xc
c0009977:	c1 eb 0a             	shr    ebx,0xa
c000997a:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009980:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009983:	83 c4 1c             	add    esp,0x1c
c0009986:	5b                   	pop    ebx
c0009987:	5e                   	pop    esi
c0009988:	5f                   	pop    edi
c0009989:	5d                   	pop    ebp
c000998a:	c3                   	ret    
c000998b:	83 ec 0c             	sub    esp,0xc
c000998e:	68 48 d5 01 c0       	push   0xc001d548
c0009993:	e8 48 0b 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0009998:	83 c4 10             	add    esp,0x10
c000999b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000999f:	09 d8                	or     eax,ebx
c00099a1:	a9 ff 0f 00 00       	test   eax,0xfff
c00099a6:	74 a9                	je     c0009951 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099a8:	83 ec 0c             	sub    esp,0xc
c00099ab:	68 b0 d5 01 c0       	push   0xc001d5b0
c00099b0:	e8 a6 67 00 00       	call   c001015b <KePanic(char const*)>
c00099b5:	83 c4 10             	add    esp,0x10
c00099b8:	eb 97                	jmp    c0009951 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c00099ba:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00099be:	e8 d2 e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c00099c3:	83 ec 0c             	sub    esp,0xc
c00099c6:	89 c5                	mov    ebp,eax
c00099c8:	8b 0d d0 05 02 c0    	mov    ecx,DWORD PTR ds:0xc00205d0
c00099ce:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00099d2:	6a 01                	push   0x1
c00099d4:	e8 b4 f8 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c00099d9:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00099e0:	6a 01                	push   0x1
c00099e2:	50                   	push   eax
c00099e3:	55                   	push   ebp
c00099e4:	81 cd 07 04 00 00    	or     ebp,0x407
c00099ea:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00099ee:	51                   	push   ecx
c00099ef:	e8 28 02 00 00       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00099f4:	83 c4 1c             	add    esp,0x1c
c00099f7:	68 00 10 00 00       	push   0x1000
c00099fc:	6a 00                	push   0x0
c00099fe:	50                   	push   eax
c00099ff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a03:	e8 c8 6a ff ff       	call   c00004d0 <memset>
c0009a08:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009a0c:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009a0f:	e8 a9 fb ff ff       	call   c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c0009a14:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009a18:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009a1b:	83 c4 10             	add    esp,0x10
c0009a1e:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009a21:	e9 40 ff ff ff       	jmp    c0009966 <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009a26 <VAS::allocatePages(int, int)>:
c0009a26:	55                   	push   ebp
c0009a27:	57                   	push   edi
c0009a28:	56                   	push   esi
c0009a29:	53                   	push   ebx
c0009a2a:	83 ec 1c             	sub    esp,0x1c
c0009a2d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009a31:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009a36:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009a3c:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009a42:	83 e0 01             	and    eax,0x1
c0009a45:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009a49:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009a4d:	0f 85 cc 00 00 00    	jne    c0009b1f <VAS::allocatePages(int, int)+0xf9>
c0009a53:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009a56:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a5a:	85 c0                	test   eax,eax
c0009a5c:	0f 84 a1 00 00 00    	je     c0009b03 <VAS::allocatePages(int, int)+0xdd>
c0009a62:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009a66:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009a6a:	c1 e6 0c             	shl    esi,0xc
c0009a6d:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009a71:	85 c0                	test   eax,eax
c0009a73:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009a76:	7e 33                	jle    c0009aab <VAS::allocatePages(int, int)+0x85>
c0009a78:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009a7c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009a80:	81 cd 00 04 00 00    	or     ebp,0x400
c0009a86:	e8 0a e0 ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009a8b:	55                   	push   ebp
c0009a8c:	53                   	push   ebx
c0009a8d:	50                   	push   eax
c0009a8e:	57                   	push   edi
c0009a8f:	e8 8e fe ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009a94:	83 c4 10             	add    esp,0x10
c0009a97:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009a9c:	74 03                	je     c0009aa1 <VAS::allocatePages(int, int)+0x7b>
c0009a9e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aa1:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009aa7:	39 de                	cmp    esi,ebx
c0009aa9:	75 db                	jne    c0009a86 <VAS::allocatePages(int, int)+0x60>
c0009aab:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ab0:	75 12                	jne    c0009ac4 <VAS::allocatePages(int, int)+0x9e>
c0009ab2:	0f 20 d8             	mov    eax,cr3
c0009ab5:	0f 22 d8             	mov    cr3,eax
c0009ab8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009abc:	83 c4 1c             	add    esp,0x1c
c0009abf:	5b                   	pop    ebx
c0009ac0:	5e                   	pop    esi
c0009ac1:	5f                   	pop    edi
c0009ac2:	5d                   	pop    ebp
c0009ac3:	c3                   	ret    
c0009ac4:	c1 ee 0a             	shr    esi,0xa
c0009ac7:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009acb:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009ad1:	c1 eb 0a             	shr    ebx,0xa
c0009ad4:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009ada:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ae0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009ae6:	39 c3                	cmp    ebx,eax
c0009ae8:	77 ce                	ja     c0009ab8 <VAS::allocatePages(int, int)+0x92>
c0009aea:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009aed:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009af3:	39 d8                	cmp    eax,ebx
c0009af5:	73 f3                	jae    c0009aea <VAS::allocatePages(int, int)+0xc4>
c0009af7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009afb:	83 c4 1c             	add    esp,0x1c
c0009afe:	5b                   	pop    ebx
c0009aff:	5e                   	pop    esi
c0009b00:	5f                   	pop    edi
c0009b01:	5d                   	pop    ebp
c0009b02:	c3                   	ret    
c0009b03:	83 ec 0c             	sub    esp,0xc
c0009b06:	68 d4 d5 01 c0       	push   0xc001d5d4
c0009b0b:	e8 4b 66 00 00       	call   c001015b <KePanic(char const*)>
c0009b10:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009b13:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b17:	83 c4 10             	add    esp,0x10
c0009b1a:	e9 43 ff ff ff       	jmp    c0009a62 <VAS::allocatePages(int, int)+0x3c>
c0009b1f:	83 ec 0c             	sub    esp,0xc
c0009b22:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009b26:	51                   	push   ecx
c0009b27:	e8 61 f7 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0009b2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009b30:	83 c4 10             	add    esp,0x10
c0009b33:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009b38:	0f 87 9b 00 00 00    	ja     c0009bd9 <VAS::allocatePages(int, int)+0x1b3>
c0009b3e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009b42:	85 d2                	test   edx,edx
c0009b44:	7e 3c                	jle    c0009b82 <VAS::allocatePages(int, int)+0x15c>
c0009b46:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009b4a:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009b4e:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009b52:	c1 e5 0c             	shl    ebp,0xc
c0009b55:	81 ce 00 04 00 00    	or     esi,0x400
c0009b5b:	01 dd                	add    ebp,ebx
c0009b5d:	e8 33 df ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009b62:	56                   	push   esi
c0009b63:	53                   	push   ebx
c0009b64:	50                   	push   eax
c0009b65:	57                   	push   edi
c0009b66:	e8 b7 fd ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009b6b:	83 c4 10             	add    esp,0x10
c0009b6e:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b73:	74 03                	je     c0009b78 <VAS::allocatePages(int, int)+0x152>
c0009b75:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009b78:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009b7e:	39 dd                	cmp    ebp,ebx
c0009b80:	75 db                	jne    c0009b5d <VAS::allocatePages(int, int)+0x137>
c0009b82:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009b87:	0f 84 25 ff ff ff    	je     c0009ab2 <VAS::allocatePages(int, int)+0x8c>
c0009b8d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009b91:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b95:	89 d3                	mov    ebx,edx
c0009b97:	c1 e0 0c             	shl    eax,0xc
c0009b9a:	c1 eb 0a             	shr    ebx,0xa
c0009b9d:	01 d0                	add    eax,edx
c0009b9f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ba5:	c1 e8 0a             	shr    eax,0xa
c0009ba8:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009bae:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009bb3:	2d 00 00 40 00       	sub    eax,0x400000
c0009bb8:	39 c3                	cmp    ebx,eax
c0009bba:	0f 87 f8 fe ff ff    	ja     c0009ab8 <VAS::allocatePages(int, int)+0x92>
c0009bc0:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009bc3:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009bc9:	39 d8                	cmp    eax,ebx
c0009bcb:	73 f3                	jae    c0009bc0 <VAS::allocatePages(int, int)+0x19a>
c0009bcd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009bd1:	83 c4 1c             	add    esp,0x1c
c0009bd4:	5b                   	pop    ebx
c0009bd5:	5e                   	pop    esi
c0009bd6:	5f                   	pop    edi
c0009bd7:	5d                   	pop    ebp
c0009bd8:	c3                   	ret    
c0009bd9:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009bde:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009be4:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009beb:	0f 84 4d ff ff ff    	je     c0009b3e <VAS::allocatePages(int, int)+0x118>
c0009bf1:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009bf9:	e9 40 ff ff ff       	jmp    c0009b3e <VAS::allocatePages(int, int)+0x118>

c0009bfe <VAS::setCPUSpecific(unsigned long)>:
c0009bfe:	83 ec 0c             	sub    esp,0xc
c0009c01:	6a 05                	push   0x5
c0009c03:	68 00 00 40 c2       	push   0xc2400000
c0009c08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009c0c:	50                   	push   eax
c0009c0d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c11:	52                   	push   edx
c0009c12:	e8 0b fd ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c17:	83 c4 1c             	add    esp,0x1c
c0009c1a:	c3                   	ret    
c0009c1b:	90                   	nop

c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009c1c:	55                   	push   ebp
c0009c1d:	57                   	push   edi
c0009c1e:	56                   	push   esi
c0009c1f:	53                   	push   ebx
c0009c20:	83 ec 1c             	sub    esp,0x1c
c0009c23:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009c28:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c2c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c32:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009c36:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c3c:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009c40:	83 e0 01             	and    eax,0x1
c0009c43:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c47:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c4b:	85 c0                	test   eax,eax
c0009c4d:	7e 39                	jle    c0009c88 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009c4f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c53:	89 f3                	mov    ebx,esi
c0009c55:	c1 e0 0c             	shl    eax,0xc
c0009c58:	01 f0                	add    eax,esi
c0009c5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c5e:	55                   	push   ebp
c0009c5f:	53                   	push   ebx
c0009c60:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009c64:	29 f0                	sub    eax,esi
c0009c66:	01 d8                	add    eax,ebx
c0009c68:	50                   	push   eax
c0009c69:	57                   	push   edi
c0009c6a:	e8 b3 fc ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009c6f:	83 c4 10             	add    esp,0x10
c0009c72:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c77:	74 03                	je     c0009c7c <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009c79:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009c7c:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009c82:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009c86:	75 d6                	jne    c0009c5e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009c88:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009c8d:	75 10                	jne    c0009c9f <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009c8f:	0f 20 d8             	mov    eax,cr3
c0009c92:	0f 22 d8             	mov    cr3,eax
c0009c95:	83 c4 1c             	add    esp,0x1c
c0009c98:	89 f0                	mov    eax,esi
c0009c9a:	5b                   	pop    ebx
c0009c9b:	5e                   	pop    esi
c0009c9c:	5f                   	pop    edi
c0009c9d:	5d                   	pop    ebp
c0009c9e:	c3                   	ret    
c0009c9f:	89 f3                	mov    ebx,esi
c0009ca1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009ca5:	c1 eb 0a             	shr    ebx,0xa
c0009ca8:	c1 e0 0c             	shl    eax,0xc
c0009cab:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009cb1:	01 f0                	add    eax,esi
c0009cb3:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009cb9:	c1 e8 0a             	shr    eax,0xa
c0009cbc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cc1:	2d 00 00 40 00       	sub    eax,0x400000
c0009cc6:	39 c3                	cmp    ebx,eax
c0009cc8:	77 cb                	ja     c0009c95 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009cca:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ccd:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cd3:	39 d8                	cmp    eax,ebx
c0009cd5:	73 f3                	jae    c0009cca <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009cd7:	83 c4 1c             	add    esp,0x1c
c0009cda:	89 f0                	mov    eax,esi
c0009cdc:	5b                   	pop    ebx
c0009cdd:	5e                   	pop    esi
c0009cde:	5f                   	pop    edi
c0009cdf:	5d                   	pop    ebp
c0009ce0:	c3                   	ret    
c0009ce1:	90                   	nop

c0009ce2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009ce2:	55                   	push   ebp
c0009ce3:	57                   	push   edi
c0009ce4:	56                   	push   esi
c0009ce5:	53                   	push   ebx
c0009ce6:	83 ec 1c             	sub    esp,0x1c
c0009ce9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009ced:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009cf1:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009cf5:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009cf9:	a9 ff 0f 00 00       	test   eax,0xfff
c0009cfe:	75 4a                	jne    c0009d4a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009d00:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009d04:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d07:	c1 eb 16             	shr    ebx,0x16
c0009d0a:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009d11:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009d15:	74 4d                	je     c0009d64 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009d17:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009d1b:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009d1f:	c1 e8 0a             	shr    eax,0xa
c0009d22:	80 fa 01             	cmp    dl,0x1
c0009d25:	19 d2                	sbb    edx,edx
c0009d27:	c1 e3 0c             	shl    ebx,0xc
c0009d2a:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009d2e:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009d34:	25 fc 0f 00 00       	and    eax,0xffc
c0009d39:	01 d8                	add    eax,ebx
c0009d3b:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009d42:	83 c4 1c             	add    esp,0x1c
c0009d45:	5b                   	pop    ebx
c0009d46:	5e                   	pop    esi
c0009d47:	5f                   	pop    edi
c0009d48:	5d                   	pop    ebp
c0009d49:	c3                   	ret    
c0009d4a:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009d4e:	83 ec 0c             	sub    esp,0xc
c0009d51:	68 00 d6 01 c0       	push   0xc001d600
c0009d56:	e8 00 64 00 00       	call   c001015b <KePanic(char const*)>
c0009d5b:	83 c4 10             	add    esp,0x10
c0009d5e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009d62:	eb 9c                	jmp    c0009d00 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009d64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009d68:	e8 28 dd ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009d6d:	83 ec 0c             	sub    esp,0xc
c0009d70:	89 c5                	mov    ebp,eax
c0009d72:	8b 0d d0 05 02 c0    	mov    ecx,DWORD PTR ds:0xc00205d0
c0009d78:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009d7c:	6a 01                	push   0x1
c0009d7e:	e8 0a f5 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0009d83:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009d8a:	6a 01                	push   0x1
c0009d8c:	50                   	push   eax
c0009d8d:	55                   	push   ebp
c0009d8e:	81 cd 07 04 00 00    	or     ebp,0x407
c0009d94:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009d98:	51                   	push   ecx
c0009d99:	e8 7e fe ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009d9e:	83 c4 1c             	add    esp,0x1c
c0009da1:	68 00 10 00 00       	push   0x1000
c0009da6:	6a 00                	push   0x0
c0009da8:	50                   	push   eax
c0009da9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009dad:	e8 1e 67 ff ff       	call   c00004d0 <memset>
c0009db2:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009db6:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009db9:	e8 ff f7 ff ff       	call   c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c0009dbe:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009dc1:	83 c4 10             	add    esp,0x10
c0009dc4:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0009dc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009dcb:	e9 47 ff ff ff       	jmp    c0009d17 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0009dd0 <VAS::VAS(bool)>:
c0009dd0:	53                   	push   ebx
c0009dd1:	83 ec 28             	sub    esp,0x28
c0009dd4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009dd8:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0009ddc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009de0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009de7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009deb:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009df2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009df6:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0009dfa:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0009dfd:	e8 93 dc ff ff       	call   c0007a95 <Phys::allocatePage()>
c0009e02:	89 c2                	mov    edx,eax
c0009e04:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e08:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0009e0b:	8b 1d d0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d0
c0009e11:	83 ec 0c             	sub    esp,0xc
c0009e14:	6a 01                	push   0x1
c0009e16:	e8 72 f4 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0009e1b:	83 c4 10             	add    esp,0x10
c0009e1e:	89 c2                	mov    edx,eax
c0009e20:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e24:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009e27:	83 ec 0c             	sub    esp,0xc
c0009e2a:	6a 03                	push   0x3
c0009e2c:	6a 01                	push   0x1
c0009e2e:	52                   	push   edx
c0009e2f:	50                   	push   eax
c0009e30:	53                   	push   ebx
c0009e31:	e8 e6 fd ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009e36:	83 c4 20             	add    esp,0x20
c0009e39:	89 c2                	mov    edx,eax
c0009e3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e3f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0009e42:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009e4a:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0009e52:	7f 1c                	jg     c0009e70 <VAS::VAS(bool)+0xa0>
c0009e54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009e58:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009e5b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e5f:	c1 e2 02             	shl    edx,0x2
c0009e62:	01 d0                	add    eax,edx
c0009e64:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009e6a:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009e6e:	eb da                	jmp    c0009e4a <VAS::VAS(bool)+0x7a>
c0009e70:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0009e78:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c0009e80:	7f 7a                	jg     c0009efc <VAS::VAS(bool)+0x12c>
c0009e82:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009e86:	2d 00 02 00 00       	sub    eax,0x200
c0009e8b:	c1 e0 0c             	shl    eax,0xc
c0009e8e:	83 c8 03             	or     eax,0x3
c0009e91:	89 c2                	mov    edx,eax
c0009e93:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009e98:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e9e:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009ea4:	83 e0 10             	and    eax,0x10
c0009ea7:	84 c0                	test   al,al
c0009ea9:	74 07                	je     c0009eb2 <VAS::VAS(bool)+0xe2>
c0009eab:	b8 00 01 00 00       	mov    eax,0x100
c0009eb0:	eb 05                	jmp    c0009eb7 <VAS::VAS(bool)+0xe7>
c0009eb2:	b8 00 00 00 00       	mov    eax,0x0
c0009eb7:	09 d0                	or     eax,edx
c0009eb9:	89 c1                	mov    ecx,eax
c0009ebb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ebf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ec2:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ec6:	c1 e2 02             	shl    edx,0x2
c0009ec9:	01 d0                	add    eax,edx
c0009ecb:	89 ca                	mov    edx,ecx
c0009ecd:	89 10                	mov    DWORD PTR [eax],edx
c0009ecf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009ed3:	2d 40 03 00 00       	sub    eax,0x340
c0009ed8:	83 f8 7f             	cmp    eax,0x7f
c0009edb:	77 16                	ja     c0009ef3 <VAS::VAS(bool)+0x123>
c0009edd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009ee1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009ee4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009ee8:	c1 e2 02             	shl    edx,0x2
c0009eeb:	01 d0                	add    eax,edx
c0009eed:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0009ef3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009ef7:	e9 7c ff ff ff       	jmp    c0009e78 <VAS::VAS(bool)+0xa8>
c0009efc:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009f01:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f07:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f0d:	83 e0 10             	and    eax,0x10
c0009f10:	84 c0                	test   al,al
c0009f12:	74 07                	je     c0009f1b <VAS::VAS(bool)+0x14b>
c0009f14:	b8 03 41 00 00       	mov    eax,0x4103
c0009f19:	eb 05                	jmp    c0009f20 <VAS::VAS(bool)+0x150>
c0009f1b:	b8 03 40 00 00       	mov    eax,0x4003
c0009f20:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0009f24:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0009f27:	81 c2 20 0c 00 00    	add    edx,0xc20
c0009f2d:	89 02                	mov    DWORD PTR [edx],eax
c0009f2f:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009f34:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f3a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0009f40:	83 ec 08             	sub    esp,0x8
c0009f43:	50                   	push   eax
c0009f44:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009f48:	e8 b1 fc ff ff       	call   c0009bfe <VAS::setCPUSpecific(unsigned long)>
c0009f4d:	83 c4 10             	add    esp,0x10
c0009f50:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f54:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009f57:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009f5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f62:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c0009f68:	83 e0 10             	and    eax,0x10
c0009f6b:	84 c0                	test   al,al
c0009f6d:	74 07                	je     c0009f76 <VAS::VAS(bool)+0x1a6>
c0009f6f:	b8 00 01 00 00       	mov    eax,0x100
c0009f74:	eb 05                	jmp    c0009f7b <VAS::VAS(bool)+0x1ab>
c0009f76:	b8 00 00 00 00       	mov    eax,0x0
c0009f7b:	09 c2                	or     edx,eax
c0009f7d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009f81:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009f84:	05 fc 0f 00 00       	add    eax,0xffc
c0009f89:	83 ca 03             	or     edx,0x3
c0009f8c:	89 10                	mov    DWORD PTR [eax],edx
c0009f8e:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009f93:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f99:	83 ec 0c             	sub    esp,0xc
c0009f9c:	50                   	push   eax
c0009f9d:	e8 12 1c 00 00       	call   c000bbb4 <Device::getName()>
c0009fa2:	83 c4 10             	add    esp,0x10
c0009fa5:	83 ec 08             	sub    esp,0x8
c0009fa8:	68 a3 d6 01 c0       	push   0xc001d6a3
c0009fad:	50                   	push   eax
c0009fae:	e8 2d 67 ff ff       	call   c00006e0 <strcmp>
c0009fb3:	83 c4 10             	add    esp,0x10
c0009fb6:	85 c0                	test   eax,eax
c0009fb8:	0f 94 c0             	sete   al
c0009fbb:	84 c0                	test   al,al
c0009fbd:	0f 84 87 00 00 00    	je     c000a04a <VAS::VAS(bool)+0x27a>
c0009fc3:	fa                   	cli    
c0009fc4:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0009fc9:	40                   	inc    eax
c0009fca:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0009fcf:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009fd4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009fda:	05 7c 09 00 00       	add    eax,0x97c
c0009fdf:	83 ec 0c             	sub    esp,0xc
c0009fe2:	50                   	push   eax
c0009fe3:	e8 ce d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0009fe8:	83 c4 10             	add    esp,0x10
c0009feb:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ff0:	89 c3                	mov    ebx,eax
c0009ff2:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0009ff7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009ffd:	05 7c 09 00 00       	add    eax,0x97c
c000a002:	83 ec 0c             	sub    esp,0xc
c000a005:	50                   	push   eax
c000a006:	e8 ab d2 ff ff       	call   c00072b6 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a00b:	83 c4 10             	add    esp,0x10
c000a00e:	83 ec 08             	sub    esp,0x8
c000a011:	50                   	push   eax
c000a012:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a016:	e8 83 f5 ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c000a01b:	83 c4 10             	add    esp,0x10
c000a01e:	8b 00                	mov    eax,DWORD PTR [eax]
c000a020:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a025:	6a 11                	push   0x11
c000a027:	53                   	push   ebx
c000a028:	50                   	push   eax
c000a029:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a02d:	e8 f0 f8 ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a032:	83 c4 10             	add    esp,0x10
c000a035:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000a03a:	48                   	dec    eax
c000a03b:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000a040:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000a045:	85 c0                	test   eax,eax
c000a047:	75 01                	jne    c000a04a <VAS::VAS(bool)+0x27a>
c000a049:	fb                   	sti    
c000a04a:	90                   	nop
c000a04b:	83 c4 28             	add    esp,0x28
c000a04e:	5b                   	pop    ebx
c000a04f:	c3                   	ret    

c000a050 <VAS::evict(unsigned long)>:
c000a050:	55                   	push   ebp
c000a051:	57                   	push   edi
c000a052:	56                   	push   esi
c000a053:	53                   	push   ebx
c000a054:	83 ec 1c             	sub    esp,0x1c
c000a057:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a05b:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a05f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a063:	e8 66 f3 ff ff       	call   c00093ce <Virt::allocateSwapfilePage()>
c000a068:	8b 0d ec f1 01 c0    	mov    ecx,DWORD PTR ds:0xc001f1ec
c000a06e:	89 c7                	mov    edi,eax
c000a070:	85 c9                	test   ecx,ecx
c000a072:	7e 3e                	jle    c000a0b2 <VAS::evict(unsigned long)+0x62>
c000a074:	89 ee                	mov    esi,ebp
c000a076:	31 db                	xor    ebx,ebx
c000a078:	83 ec 0c             	sub    esp,0xc
c000a07b:	57                   	push   edi
c000a07c:	e8 3b f3 ff ff       	call   c00093bc <Virt::swapIDToSector(unsigned long)>
c000a081:	89 34 24             	mov    DWORD PTR [esp],esi
c000a084:	01 d8                	add    eax,ebx
c000a086:	6a 01                	push   0x1
c000a088:	31 d2                	xor    edx,edx
c000a08a:	43                   	inc    ebx
c000a08b:	52                   	push   edx
c000a08c:	81 c6 00 02 00 00    	add    esi,0x200
c000a092:	50                   	push   eax
c000a093:	0f be 05 f8 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f1f8
c000a09a:	8b 14 85 3c 29 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd6c4]
c000a0a1:	52                   	push   edx
c000a0a2:	e8 a5 2b 00 00       	call   c000cc4c <LogicalDisk::write(unsigned long long, int, void*)>
c000a0a7:	83 c4 20             	add    esp,0x20
c000a0aa:	39 1d ec f1 01 c0    	cmp    DWORD PTR ds:0xc001f1ec,ebx
c000a0b0:	7f c6                	jg     c000a078 <VAS::evict(unsigned long)+0x28>
c000a0b2:	83 ec 08             	sub    esp,0x8
c000a0b5:	c1 e7 0b             	shl    edi,0xb
c000a0b8:	55                   	push   ebp
c000a0b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0bd:	50                   	push   eax
c000a0be:	e8 db f4 ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c000a0c3:	8b 10                	mov    edx,DWORD PTR [eax]
c000a0c5:	89 d1                	mov    ecx,edx
c000a0c7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a0cd:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a0d3:	09 cf                	or     edi,ecx
c000a0d5:	89 38                	mov    DWORD PTR [eax],edi
c000a0d7:	89 14 24             	mov    DWORD PTR [esp],edx
c000a0da:	ff 05 c8 05 02 c0    	inc    DWORD PTR ds:0xc00205c8
c000a0e0:	e8 4e d9 ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c000a0e5:	0f 20 d8             	mov    eax,cr3
c000a0e8:	0f 22 d8             	mov    cr3,eax
c000a0eb:	a1 c4 05 02 c0       	mov    eax,ds:0xc00205c4
c000a0f0:	c7 44 24 40 b1 d6 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d6b1
c000a0f8:	8d 50 01             	lea    edx,[eax+0x1]
c000a0fb:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0ff:	89 15 c4 05 02 c0    	mov    DWORD PTR ds:0xc00205c4,edx
c000a105:	83 c4 2c             	add    esp,0x2c
c000a108:	5b                   	pop    ebx
c000a109:	5e                   	pop    esi
c000a10a:	5f                   	pop    edi
c000a10b:	5d                   	pop    ebp
c000a10c:	e9 cf 03 00 00       	jmp    c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a111:	90                   	nop

c000a112 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a112:	55                   	push   ebp
c000a113:	57                   	push   edi
c000a114:	56                   	push   esi
c000a115:	53                   	push   ebx
c000a116:	83 ec 14             	sub    esp,0x14
c000a119:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a11d:	53                   	push   ebx
c000a11e:	68 c2 d6 01 c0       	push   0xc001d6c2
c000a123:	e8 b8 03 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a128:	83 c4 10             	add    esp,0x10
c000a12b:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a131:	74 21                	je     c000a154 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a133:	83 ec 08             	sub    esp,0x8
c000a136:	53                   	push   ebx
c000a137:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a13b:	57                   	push   edi
c000a13c:	e8 5d f4 ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c000a141:	83 c4 10             	add    esp,0x10
c000a144:	89 c6                	mov    esi,eax
c000a146:	85 c0                	test   eax,eax
c000a148:	74 0a                	je     c000a154 <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a14a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a14c:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a152:	74 0a                	je     c000a15e <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a154:	31 c0                	xor    eax,eax
c000a156:	83 c4 0c             	add    esp,0xc
c000a159:	5b                   	pop    ebx
c000a15a:	5e                   	pop    esi
c000a15b:	5f                   	pop    edi
c000a15c:	5d                   	pop    ebp
c000a15d:	c3                   	ret    
c000a15e:	e8 32 d9 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a163:	c1 ed 0b             	shr    ebp,0xb
c000a166:	8b 16                	mov    edx,DWORD PTR [esi]
c000a168:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a16e:	09 c2                	or     edx,eax
c000a170:	81 ca 01 08 00 00    	or     edx,0x801
c000a176:	89 16                	mov    DWORD PTR [esi],edx
c000a178:	8b 35 ec f1 01 c0    	mov    esi,DWORD PTR ds:0xc001f1ec
c000a17e:	85 f6                	test   esi,esi
c000a180:	7e 3e                	jle    c000a1c0 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a182:	89 df                	mov    edi,ebx
c000a184:	31 f6                	xor    esi,esi
c000a186:	83 ec 0c             	sub    esp,0xc
c000a189:	55                   	push   ebp
c000a18a:	e8 2d f2 ff ff       	call   c00093bc <Virt::swapIDToSector(unsigned long)>
c000a18f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a192:	01 f0                	add    eax,esi
c000a194:	6a 01                	push   0x1
c000a196:	31 d2                	xor    edx,edx
c000a198:	46                   	inc    esi
c000a199:	52                   	push   edx
c000a19a:	81 c7 00 02 00 00    	add    edi,0x200
c000a1a0:	50                   	push   eax
c000a1a1:	0f be 05 f8 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f1f8
c000a1a8:	8b 0c 85 3c 29 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd6c4]
c000a1af:	51                   	push   ecx
c000a1b0:	e8 2b 2a 00 00       	call   c000cbe0 <LogicalDisk::read(unsigned long long, int, void*)>
c000a1b5:	83 c4 20             	add    esp,0x20
c000a1b8:	39 35 ec f1 01 c0    	cmp    DWORD PTR ds:0xc001f1ec,esi
c000a1be:	7f c6                	jg     c000a186 <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a1c0:	a1 c8 05 02 c0       	mov    eax,ds:0xc00205c8
c000a1c5:	48                   	dec    eax
c000a1c6:	52                   	push   edx
c000a1c7:	a3 c8 05 02 c0       	mov    ds:0xc00205c8,eax
c000a1cc:	50                   	push   eax
c000a1cd:	53                   	push   ebx
c000a1ce:	68 d5 d6 01 c0       	push   0xc001d6d5
c000a1d3:	e8 08 03 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a1d8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a1db:	e8 be f1 ff ff       	call   c000939e <Virt::freeSwapfilePage(unsigned long)>
c000a1e0:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000a1e5:	83 c4 10             	add    esp,0x10
c000a1e8:	48                   	dec    eax
c000a1e9:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000a1ee:	85 c0                	test   eax,eax
c000a1f0:	75 01                	jne    c000a1f3 <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a1f2:	fb                   	sti    
c000a1f3:	0f 20 d8             	mov    eax,cr3
c000a1f6:	0f 22 d8             	mov    cr3,eax
c000a1f9:	b0 01                	mov    al,0x1
c000a1fb:	e9 56 ff ff ff       	jmp    c000a156 <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a200 <VAS::scanForEviction()>:
c000a200:	57                   	push   edi
c000a201:	31 ff                	xor    edi,edi
c000a203:	56                   	push   esi
c000a204:	53                   	push   ebx
c000a205:	83 ec 10             	sub    esp,0x10
c000a208:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a20c:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a20f:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a215:	75 0e                	jne    c000a225 <VAS::scanForEviction()+0x25>
c000a217:	89 da                	mov    edx,ebx
c000a219:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a21c:	c1 ea 16             	shr    edx,0x16
c000a21f:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a223:	74 4e                	je     c000a273 <VAS::scanForEviction()+0x73>
c000a225:	53                   	push   ebx
c000a226:	56                   	push   esi
c000a227:	e8 72 f3 ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c000a22c:	5a                   	pop    edx
c000a22d:	8b 10                	mov    edx,DWORD PTR [eax]
c000a22f:	59                   	pop    ecx
c000a230:	89 d1                	mov    ecx,edx
c000a232:	81 e1 01 08 00 00    	and    ecx,0x801
c000a238:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a23e:	74 3e                	je     c000a27e <VAS::scanForEviction()+0x7e>
c000a240:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a246:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a24c:	76 2b                	jbe    c000a279 <VAS::scanForEviction()+0x79>
c000a24e:	47                   	inc    edi
c000a24f:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a256:	83 ff 03             	cmp    edi,0x3
c000a259:	74 32                	je     c000a28d <VAS::scanForEviction()+0x8d>
c000a25b:	31 db                	xor    ebx,ebx
c000a25d:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a263:	75 c0                	jne    c000a225 <VAS::scanForEviction()+0x25>
c000a265:	89 da                	mov    edx,ebx
c000a267:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a26a:	c1 ea 16             	shr    edx,0x16
c000a26d:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a271:	75 b2                	jne    c000a225 <VAS::scanForEviction()+0x25>
c000a273:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a279:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a27c:	eb 91                	jmp    c000a20f <VAS::scanForEviction()+0xf>
c000a27e:	f6 c2 20             	test   dl,0x20
c000a281:	74 13                	je     c000a296 <VAS::scanForEviction()+0x96>
c000a283:	83 e2 df             	and    edx,0xffffffdf
c000a286:	89 10                	mov    DWORD PTR [eax],edx
c000a288:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a28b:	eb b3                	jmp    c000a240 <VAS::scanForEviction()+0x40>
c000a28d:	83 c4 10             	add    esp,0x10
c000a290:	31 c0                	xor    eax,eax
c000a292:	5b                   	pop    ebx
c000a293:	5e                   	pop    esi
c000a294:	5f                   	pop    edi
c000a295:	c3                   	ret    
c000a296:	83 ec 08             	sub    esp,0x8
c000a299:	89 d0                	mov    eax,edx
c000a29b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a2a0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a2a4:	53                   	push   ebx
c000a2a5:	68 ea d6 01 c0       	push   0xc001d6ea
c000a2aa:	e8 31 02 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a2af:	58                   	pop    eax
c000a2b0:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a2b3:	5a                   	pop    edx
c000a2b4:	51                   	push   ecx
c000a2b5:	56                   	push   esi
c000a2b6:	e8 95 fd ff ff       	call   c000a050 <VAS::evict(unsigned long)>
c000a2bb:	5b                   	pop    ebx
c000a2bc:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a2bf:	5f                   	pop    edi
c000a2c0:	50                   	push   eax
c000a2c1:	68 fe d6 01 c0       	push   0xc001d6fe
c000a2c6:	e8 15 02 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a2cb:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a2d2:	83 c4 10             	add    esp,0x10
c000a2d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a2d9:	83 c4 10             	add    esp,0x10
c000a2dc:	5b                   	pop    ebx
c000a2dd:	5e                   	pop    esi
c000a2de:	5f                   	pop    edi
c000a2df:	c3                   	ret    

c000a2e0 <mapVASFirstTime>:
c000a2e0:	55                   	push   ebp
c000a2e1:	57                   	push   edi
c000a2e2:	56                   	push   esi
c000a2e3:	53                   	push   ebx
c000a2e4:	83 ec 0c             	sub    esp,0xc
c000a2e7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a2ec:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a2ef:	4a                   	dec    edx
c000a2f0:	0f 84 8c 00 00 00    	je     c000a382 <mapVASFirstTime+0xa2>
c000a2f6:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a2f9:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a2fc:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a301:	c1 e5 15             	shl    ebp,0x15
c000a304:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a309:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a30f:	29 eb                	sub    ebx,ebp
c000a311:	29 ef                	sub    edi,ebp
c000a313:	e8 7d d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a318:	83 ec 0c             	sub    esp,0xc
c000a31b:	68 03 04 00 00       	push   0x403
c000a320:	6a 01                	push   0x1
c000a322:	53                   	push   ebx
c000a323:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a329:	50                   	push   eax
c000a32a:	56                   	push   esi
c000a32b:	e8 ec f8 ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a330:	83 c4 20             	add    esp,0x20
c000a333:	39 fb                	cmp    ebx,edi
c000a335:	75 dc                	jne    c000a313 <mapVASFirstTime+0x33>
c000a337:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a33c:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a341:	29 eb                	sub    ebx,ebp
c000a343:	29 ef                	sub    edi,ebp
c000a345:	e8 4b d7 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000a34a:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a34e:	19 d2                	sbb    edx,edx
c000a350:	83 ec 0c             	sub    esp,0xc
c000a353:	83 e2 04             	and    edx,0x4
c000a356:	81 c2 03 04 00 00    	add    edx,0x403
c000a35c:	52                   	push   edx
c000a35d:	6a 01                	push   0x1
c000a35f:	53                   	push   ebx
c000a360:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a366:	50                   	push   eax
c000a367:	56                   	push   esi
c000a368:	e8 af f8 ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a36d:	83 c4 20             	add    esp,0x20
c000a370:	39 df                	cmp    edi,ebx
c000a372:	75 d1                	jne    c000a345 <mapVASFirstTime+0x65>
c000a374:	0f 20 d8             	mov    eax,cr3
c000a377:	0f 22 d8             	mov    cr3,eax
c000a37a:	83 c4 0c             	add    esp,0xc
c000a37d:	5b                   	pop    ebx
c000a37e:	5e                   	pop    esi
c000a37f:	5f                   	pop    edi
c000a380:	5d                   	pop    ebp
c000a381:	c3                   	ret    
c000a382:	83 ec 0c             	sub    esp,0xc
c000a385:	68 11 d7 01 c0       	push   0xc001d711
c000a38a:	e8 51 01 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a38f:	83 c4 10             	add    esp,0x10
c000a392:	83 c4 0c             	add    esp,0xc
c000a395:	5b                   	pop    ebx
c000a396:	5e                   	pop    esi
c000a397:	5f                   	pop    edi
c000a398:	5d                   	pop    ebp
c000a399:	c3                   	ret    

c000a39a <__cxa_atexit>:
c000a39a:	31 c0                	xor    eax,eax
c000a39c:	c3                   	ret    

c000a39d <__cxa_finalize>:
c000a39d:	c3                   	ret    

c000a39e <__stack_chk_fail>:
c000a39e:	55                   	push   ebp
c000a39f:	89 e5                	mov    ebp,esp
c000a3a1:	83 ec 10             	sub    esp,0x10
c000a3a4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a3a7:	68 2a d7 01 c0       	push   0xc001d72a
c000a3ac:	e8 2f 01 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a3b1:	58                   	pop    eax
c000a3b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a3b5:	5a                   	pop    edx
c000a3b6:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a3b9:	68 2a d7 01 c0       	push   0xc001d72a
c000a3be:	e8 1d 01 00 00       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000a3c3:	c7 04 24 32 d7 01 c0 	mov    DWORD PTR [esp],0xc001d732
c000a3ca:	e8 8c 5d 00 00       	call   c001015b <KePanic(char const*)>
c000a3cf:	83 c4 10             	add    esp,0x10
c000a3d2:	c9                   	leave  
c000a3d3:	c3                   	ret    

c000a3d4 <__cxa_pure_virtual>:
c000a3d4:	83 ec 18             	sub    esp,0x18
c000a3d7:	68 4a d7 01 c0       	push   0xc001d74a
c000a3dc:	e8 7a 5d 00 00       	call   c001015b <KePanic(char const*)>
c000a3e1:	83 c4 1c             	add    esp,0x1c
c000a3e4:	c3                   	ret    

c000a3e5 <operator new[](unsigned long)>:
c000a3e5:	e9 cf d3 ff ff       	jmp    c00077b9 <malloc>

c000a3ea <operator delete(void*, unsigned long)>:
c000a3ea:	e9 ea d3 ff ff       	jmp    c00077d9 <rfree>

c000a3ef <operator delete[](void*)>:
c000a3ef:	e9 e5 d3 ff ff       	jmp    c00077d9 <rfree>

c000a3f4 <operator delete[](void*, unsigned long)>:
c000a3f4:	e9 e0 d3 ff ff       	jmp    c00077d9 <rfree>

c000a3f9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a3f9:	55                   	push   ebp
c000a3fa:	b9 04 00 00 00       	mov    ecx,0x4
c000a3ff:	57                   	push   edi
c000a400:	56                   	push   esi
c000a401:	be 53 d3 01 c0       	mov    esi,0xc001d353
c000a406:	53                   	push   ebx
c000a407:	83 ec 20             	sub    esp,0x20
c000a40a:	a1 52 d3 01 c0       	mov    eax,ds:0xc001d352
c000a40f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a413:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a417:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a41b:	a1 5f d3 01 c0       	mov    eax,ds:0xc001d35f
c000a420:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a424:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a428:	fc                   	cld    
c000a429:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a42b:	89 ee                	mov    esi,ebp
c000a42d:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a431:	eb 02                	jmp    c000a435 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a433:	89 c6                	mov    esi,eax
c000a435:	31 d2                	xor    edx,edx
c000a437:	41                   	inc    ecx
c000a438:	89 f0                	mov    eax,esi
c000a43a:	f7 f3                	div    ebx
c000a43c:	39 de                	cmp    esi,ebx
c000a43e:	73 f3                	jae    c000a433 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a440:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a443:	eb 02                	jmp    c000a447 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a445:	89 c5                	mov    ebp,eax
c000a447:	31 d2                	xor    edx,edx
c000a449:	49                   	dec    ecx
c000a44a:	89 e8                	mov    eax,ebp
c000a44c:	f7 f3                	div    ebx
c000a44e:	39 dd                	cmp    ebp,ebx
c000a450:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a454:	88 11                	mov    BYTE PTR [ecx],dl
c000a456:	73 ed                	jae    c000a445 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a458:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a45c:	83 c4 20             	add    esp,0x20
c000a45f:	5b                   	pop    ebx
c000a460:	5e                   	pop    esi
c000a461:	5f                   	pop    edi
c000a462:	5d                   	pop    ebp
c000a463:	c3                   	ret    

c000a464 <Dbg::logc(char)>:
c000a464:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a468:	f6 05 f0 04 02 c0 10 	test   BYTE PTR ds:0xc00204f0,0x10
c000a46f:	75 12                	jne    c000a483 <Dbg::logc(char)+0x1f>
c000a471:	ba fd 03 00 00       	mov    edx,0x3fd
c000a476:	ec                   	in     al,dx
c000a477:	a8 20                	test   al,0x20
c000a479:	74 fb                	je     c000a476 <Dbg::logc(char)+0x12>
c000a47b:	ba f8 03 00 00       	mov    edx,0x3f8
c000a480:	88 c8                	mov    al,cl
c000a482:	ee                   	out    dx,al
c000a483:	c3                   	ret    

c000a484 <Dbg::logs(char*)>:
c000a484:	53                   	push   ebx
c000a485:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a489:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a48c:	84 c0                	test   al,al
c000a48e:	74 0f                	je     c000a49f <Dbg::logs(char*)+0x1b>
c000a490:	50                   	push   eax
c000a491:	43                   	inc    ebx
c000a492:	e8 cd ff ff ff       	call   c000a464 <Dbg::logc(char)>
c000a497:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a49a:	5a                   	pop    edx
c000a49b:	84 c0                	test   al,al
c000a49d:	75 f1                	jne    c000a490 <Dbg::logs(char*)+0xc>
c000a49f:	5b                   	pop    ebx
c000a4a0:	c3                   	ret    

c000a4a1 <Dbg::logWriteInt(unsigned int)>:
c000a4a1:	83 ec 10             	sub    esp,0x10
c000a4a4:	6a 0a                	push   0xa
c000a4a6:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4aa:	50                   	push   eax
c000a4ab:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a4af:	50                   	push   eax
c000a4b0:	e8 44 ff ff ff       	call   c000a3f9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4b5:	50                   	push   eax
c000a4b6:	e8 c9 ff ff ff       	call   c000a484 <Dbg::logs(char*)>
c000a4bb:	83 c4 20             	add    esp,0x20
c000a4be:	c3                   	ret    

c000a4bf <Dbg::logWriteIntBase(unsigned int, int)>:
c000a4bf:	83 ec 10             	sub    esp,0x10
c000a4c2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a4c6:	50                   	push   eax
c000a4c7:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a4cb:	50                   	push   eax
c000a4cc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a4d0:	52                   	push   edx
c000a4d1:	e8 23 ff ff ff       	call   c000a3f9 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a4d6:	50                   	push   eax
c000a4d7:	e8 a8 ff ff ff       	call   c000a484 <Dbg::logs(char*)>
c000a4dc:	83 c4 20             	add    esp,0x20
c000a4df:	c3                   	ret    

c000a4e0 <Dbg::kprintf(char const*, ...)>:
c000a4e0:	55                   	push   ebp
c000a4e1:	57                   	push   edi
c000a4e2:	56                   	push   esi
c000a4e3:	53                   	push   ebx
c000a4e4:	83 ec 0c             	sub    esp,0xc
c000a4e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a4eb:	f6 05 f0 04 02 c0 10 	test   BYTE PTR ds:0xc00204f0,0x10
c000a4f2:	74 08                	je     c000a4fc <Dbg::kprintf(char const*, ...)+0x1c>
c000a4f4:	83 c4 0c             	add    esp,0xc
c000a4f7:	5b                   	pop    ebx
c000a4f8:	5e                   	pop    esi
c000a4f9:	5f                   	pop    edi
c000a4fa:	5d                   	pop    ebp
c000a4fb:	c3                   	ret    
c000a4fc:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a500:	31 ff                	xor    edi,edi
c000a502:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a506:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a509:	84 c0                	test   al,al
c000a50b:	74 e7                	je     c000a4f4 <Dbg::kprintf(char const*, ...)+0x14>
c000a50d:	8d 77 01             	lea    esi,[edi+0x1]
c000a510:	3c 25                	cmp    al,0x25
c000a512:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a515:	75 47                	jne    c000a55e <Dbg::kprintf(char const*, ...)+0x7e>
c000a517:	83 c7 02             	add    edi,0x2
c000a51a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a51d:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a520:	83 e8 25             	sub    eax,0x25
c000a523:	3c 53                	cmp    al,0x53
c000a525:	0f 87 d2 00 00 00    	ja     c000a5fd <Dbg::kprintf(char const*, ...)+0x11d>
c000a52b:	25 ff 00 00 00       	and    eax,0xff
c000a530:	ff 24 85 60 d7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe28a0]
c000a537:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a53b:	89 c8                	mov    eax,ecx
c000a53d:	83 c1 04             	add    ecx,0x4
c000a540:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a544:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a546:	55                   	push   ebp
c000a547:	e8 55 ff ff ff       	call   c000a4a1 <Dbg::logWriteInt(unsigned int)>
c000a54c:	58                   	pop    eax
c000a54d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a550:	84 c0                	test   al,al
c000a552:	74 a0                	je     c000a4f4 <Dbg::kprintf(char const*, ...)+0x14>
c000a554:	8d 77 01             	lea    esi,[edi+0x1]
c000a557:	3c 25                	cmp    al,0x25
c000a559:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a55c:	74 b9                	je     c000a517 <Dbg::kprintf(char const*, ...)+0x37>
c000a55e:	50                   	push   eax
c000a55f:	89 f7                	mov    edi,esi
c000a561:	e8 fe fe ff ff       	call   c000a464 <Dbg::logc(char)>
c000a566:	89 ee                	mov    esi,ebp
c000a568:	58                   	pop    eax
c000a569:	eb e2                	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a56b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a56f:	89 c8                	mov    eax,ecx
c000a571:	83 c1 04             	add    ecx,0x4
c000a574:	8b 00                	mov    eax,DWORD PTR [eax]
c000a576:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a57a:	50                   	push   eax
c000a57b:	e8 04 ff ff ff       	call   c000a484 <Dbg::logs(char*)>
c000a580:	58                   	pop    eax
c000a581:	eb ca                	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a583:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a587:	89 d0                	mov    eax,edx
c000a589:	83 c2 04             	add    edx,0x4
c000a58c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a590:	8b 00                	mov    eax,DWORD PTR [eax]
c000a592:	50                   	push   eax
c000a593:	e8 09 ff ff ff       	call   c000a4a1 <Dbg::logWriteInt(unsigned int)>
c000a598:	58                   	pop    eax
c000a599:	eb b2                	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a59b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a59f:	89 d0                	mov    eax,edx
c000a5a1:	83 c2 04             	add    edx,0x4
c000a5a4:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a5a7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5ab:	50                   	push   eax
c000a5ac:	e8 b3 fe ff ff       	call   c000a464 <Dbg::logc(char)>
c000a5b1:	58                   	pop    eax
c000a5b2:	eb 99                	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5b4:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a5b8:	89 c8                	mov    eax,ecx
c000a5ba:	83 c1 04             	add    ecx,0x4
c000a5bd:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a5c1:	6a 10                	push   0x10
c000a5c3:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a5c5:	51                   	push   ecx
c000a5c6:	e8 f4 fe ff ff       	call   c000a4bf <Dbg::logWriteIntBase(unsigned int, int)>
c000a5cb:	5d                   	pop    ebp
c000a5cc:	58                   	pop    eax
c000a5cd:	e9 7b ff ff ff       	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5d2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a5d6:	89 d0                	mov    eax,edx
c000a5d8:	83 c2 08             	add    edx,0x8
c000a5db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a5df:	6a 10                	push   0x10
c000a5e1:	8b 00                	mov    eax,DWORD PTR [eax]
c000a5e3:	50                   	push   eax
c000a5e4:	e8 d6 fe ff ff       	call   c000a4bf <Dbg::logWriteIntBase(unsigned int, int)>
c000a5e9:	58                   	pop    eax
c000a5ea:	5a                   	pop    edx
c000a5eb:	e9 5d ff ff ff       	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5f0:	6a 25                	push   0x25
c000a5f2:	e8 6d fe ff ff       	call   c000a464 <Dbg::logc(char)>
c000a5f7:	5a                   	pop    edx
c000a5f8:	e9 50 ff ff ff       	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a5fd:	6a 25                	push   0x25
c000a5ff:	e8 60 fe ff ff       	call   c000a464 <Dbg::logc(char)>
c000a604:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a608:	50                   	push   eax
c000a609:	e8 56 fe ff ff       	call   c000a464 <Dbg::logc(char)>
c000a60e:	5a                   	pop    edx
c000a60f:	59                   	pop    ecx
c000a610:	e9 38 ff ff ff       	jmp    c000a54d <Dbg::kprintf(char const*, ...)+0x6d>
c000a615:	90                   	nop

c000a616 <File::read(unsigned long long, void*, int*)>:
c000a616:	53                   	push   ebx
c000a617:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a61b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a61f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a626:	3c 19                	cmp    al,0x19
c000a628:	77 35                	ja     c000a65f <File::read(unsigned long long, void*, int*)+0x49>
c000a62a:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000a631:	85 c0                	test   eax,eax
c000a633:	74 2a                	je     c000a65f <File::read(unsigned long long, void*, int*)+0x49>
c000a635:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a63b:	85 c0                	test   eax,eax
c000a63d:	74 20                	je     c000a65f <File::read(unsigned long long, void*, int*)+0x49>
c000a63f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a643:	74 21                	je     c000a666 <File::read(unsigned long long, void*, int*)+0x50>
c000a645:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a647:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a64b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a651:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a655:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a659:	5b                   	pop    ebx
c000a65a:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a65d:	ff e0                	jmp    eax
c000a65f:	b8 0b 00 00 00       	mov    eax,0xb
c000a664:	eb 05                	jmp    c000a66b <File::read(unsigned long long, void*, int*)+0x55>
c000a666:	b8 05 00 00 00       	mov    eax,0x5
c000a66b:	5b                   	pop    ebx
c000a66c:	c3                   	ret    
c000a66d:	90                   	nop

c000a66e <File::write(unsigned long long, void*, int*)>:
c000a66e:	53                   	push   ebx
c000a66f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a673:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a677:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a67e:	3c 19                	cmp    al,0x19
c000a680:	77 35                	ja     c000a6b7 <File::write(unsigned long long, void*, int*)+0x49>
c000a682:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000a689:	85 c0                	test   eax,eax
c000a68b:	74 2a                	je     c000a6b7 <File::write(unsigned long long, void*, int*)+0x49>
c000a68d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a693:	85 c0                	test   eax,eax
c000a695:	74 20                	je     c000a6b7 <File::write(unsigned long long, void*, int*)+0x49>
c000a697:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a69b:	74 21                	je     c000a6be <File::write(unsigned long long, void*, int*)+0x50>
c000a69d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a69f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6a3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a6a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a6ad:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a6b1:	5b                   	pop    ebx
c000a6b2:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a6b5:	ff e0                	jmp    eax
c000a6b7:	b8 0b 00 00 00       	mov    eax,0xb
c000a6bc:	eb 05                	jmp    c000a6c3 <File::write(unsigned long long, void*, int*)+0x55>
c000a6be:	b8 05 00 00 00       	mov    eax,0x5
c000a6c3:	5b                   	pop    ebx
c000a6c4:	c3                   	ret    
c000a6c5:	90                   	nop

c000a6c6 <Directory::read(unsigned long long, void*, int*)>:
c000a6c6:	53                   	push   ebx
c000a6c7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a6cb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a6cf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a6d6:	3c 19                	cmp    al,0x19
c000a6d8:	77 35                	ja     c000a70f <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6da:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000a6e1:	85 c0                	test   eax,eax
c000a6e3:	74 2a                	je     c000a70f <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6e5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a6eb:	85 c0                	test   eax,eax
c000a6ed:	74 20                	je     c000a70f <Directory::read(unsigned long long, void*, int*)+0x49>
c000a6ef:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a6f3:	74 21                	je     c000a716 <Directory::read(unsigned long long, void*, int*)+0x50>
c000a6f5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a6f7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a6fb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a701:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a705:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a709:	5b                   	pop    ebx
c000a70a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a70d:	ff e0                	jmp    eax
c000a70f:	b8 0b 00 00 00       	mov    eax,0xb
c000a714:	eb 05                	jmp    c000a71b <Directory::read(unsigned long long, void*, int*)+0x55>
c000a716:	b8 05 00 00 00       	mov    eax,0x5
c000a71b:	5b                   	pop    ebx
c000a71c:	c3                   	ret    
c000a71d:	90                   	nop

c000a71e <Directory::write(unsigned long long, void*, int*)>:
c000a71e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a722:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a729:	b8 0b 00 00 00       	mov    eax,0xb
c000a72e:	80 fa 19             	cmp    dl,0x19
c000a731:	77 18                	ja     c000a74b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a733:	8b 14 95 40 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c0]
c000a73a:	85 d2                	test   edx,edx
c000a73c:	74 0d                	je     c000a74b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a73e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a745:	19 c0                	sbb    eax,eax
c000a747:	83 e0 0a             	and    eax,0xa
c000a74a:	40                   	inc    eax
c000a74b:	c3                   	ret    

c000a74c <File::isAtty()>:
c000a74c:	31 c0                	xor    eax,eax
c000a74e:	c3                   	ret    
c000a74f:	90                   	nop

c000a750 <Directory::isAtty()>:
c000a750:	31 c0                	xor    eax,eax
c000a752:	c3                   	ret    
c000a753:	90                   	nop

c000a754 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a754:	b8 0a 00 00 00       	mov    eax,0xa
c000a759:	c3                   	ret    

c000a75a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a75a:	b8 0a 00 00 00       	mov    eax,0xa
c000a75f:	c3                   	ret    

c000a760 <Filesystem::allocateSwapfile(char const*, int)>:
c000a760:	31 c0                	xor    eax,eax
c000a762:	31 d2                	xor    edx,edx
c000a764:	c3                   	ret    
c000a765:	90                   	nop

c000a766 <File::~File()>:
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	ba 20 d9 01 c0       	mov    edx,0xc001d920
c000a76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a772:	89 10                	mov    DWORD PTR [eax],edx
c000a774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a778:	83 ec 0c             	sub    esp,0xc
c000a77b:	50                   	push   eax
c000a77c:	e8 ab e8 ff ff       	call   c000902c <UnixFile::~UnixFile()>
c000a781:	83 c4 10             	add    esp,0x10
c000a784:	90                   	nop
c000a785:	83 c4 0c             	add    esp,0xc
c000a788:	c3                   	ret    
c000a789:	90                   	nop

c000a78a <File::~File()>:
c000a78a:	83 ec 0c             	sub    esp,0xc
c000a78d:	83 ec 0c             	sub    esp,0xc
c000a790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a794:	e8 cd ff ff ff       	call   c000a766 <File::~File()>
c000a799:	83 c4 10             	add    esp,0x10
c000a79c:	83 ec 08             	sub    esp,0x8
c000a79f:	68 14 01 00 00       	push   0x114
c000a7a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7a8:	e8 3d fc ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000a7ad:	83 c4 10             	add    esp,0x10
c000a7b0:	83 c4 0c             	add    esp,0xc
c000a7b3:	c3                   	ret    

c000a7b4 <Directory::~Directory()>:
c000a7b4:	83 ec 0c             	sub    esp,0xc
c000a7b7:	ba 3c d9 01 c0       	mov    edx,0xc001d93c
c000a7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c0:	89 10                	mov    DWORD PTR [eax],edx
c000a7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a7c6:	83 ec 0c             	sub    esp,0xc
c000a7c9:	50                   	push   eax
c000a7ca:	e8 5d e8 ff ff       	call   c000902c <UnixFile::~UnixFile()>
c000a7cf:	83 c4 10             	add    esp,0x10
c000a7d2:	90                   	nop
c000a7d3:	83 c4 0c             	add    esp,0xc
c000a7d6:	c3                   	ret    
c000a7d7:	90                   	nop

c000a7d8 <Directory::~Directory()>:
c000a7d8:	83 ec 0c             	sub    esp,0xc
c000a7db:	83 ec 0c             	sub    esp,0xc
c000a7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7e2:	e8 cd ff ff ff       	call   c000a7b4 <Directory::~Directory()>
c000a7e7:	83 c4 10             	add    esp,0x10
c000a7ea:	83 ec 08             	sub    esp,0x8
c000a7ed:	68 14 01 00 00       	push   0x114
c000a7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a7f6:	e8 ef fb ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000a7fb:	83 c4 10             	add    esp,0x10
c000a7fe:	83 c4 0c             	add    esp,0xc
c000a801:	c3                   	ret    

c000a802 <Filesystem::Filesystem()>:
c000a802:	ba b8 d8 01 c0       	mov    edx,0xc001d8b8
c000a807:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a80b:	89 10                	mov    DWORD PTR [eax],edx
c000a80d:	8b 15 d4 05 02 c0    	mov    edx,DWORD PTR ds:0xc00205d4
c000a813:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a817:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000a81a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a81e:	a3 d4 05 02 c0       	mov    ds:0xc00205d4,eax
c000a823:	90                   	nop
c000a824:	c3                   	ret    
c000a825:	90                   	nop

c000a826 <Filesystem::~Filesystem()>:
c000a826:	ba b8 d8 01 c0       	mov    edx,0xc001d8b8
c000a82b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a82f:	89 10                	mov    DWORD PTR [eax],edx
c000a831:	90                   	nop
c000a832:	c3                   	ret    
c000a833:	90                   	nop

c000a834 <Filesystem::~Filesystem()>:
c000a834:	83 ec 0c             	sub    esp,0xc
c000a837:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000a83b:	e8 e6 ff ff ff       	call   c000a826 <Filesystem::~Filesystem()>
c000a840:	83 c4 04             	add    esp,0x4
c000a843:	83 ec 08             	sub    esp,0x8
c000a846:	6a 08                	push   0x8
c000a848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a84c:	e8 99 fb ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000a851:	83 c4 10             	add    esp,0x10
c000a854:	83 c4 0c             	add    esp,0xc
c000a857:	c3                   	ret    

c000a858 <Fs::getcwd(Process*, char*, int)>:
c000a858:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a85c:	31 c0                	xor    eax,eax
c000a85e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000a861:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000a865:	7d 15                	jge    c000a87c <Fs::getcwd(Process*, char*, int)+0x24>
c000a867:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a86b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000a872:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000a875:	84 c9                	test   cl,cl
c000a877:	74 06                	je     c000a87f <Fs::getcwd(Process*, char*, int)+0x27>
c000a879:	40                   	inc    eax
c000a87a:	eb e2                	jmp    c000a85e <Fs::getcwd(Process*, char*, int)+0x6>
c000a87c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a87f:	31 c0                	xor    eax,eax
c000a881:	c3                   	ret    

c000a882 <Fs::initVFS()>:
c000a882:	83 ec 18             	sub    esp,0x18
c000a885:	6a 08                	push   0x8
c000a887:	e8 2d cf ff ff       	call   c00077b9 <malloc>
c000a88c:	89 04 24             	mov    DWORD PTR [esp],eax
c000a88f:	e8 0c c4 00 00       	call   c0016ca0 <FAT::FAT()>
c000a894:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000a89b:	e8 19 cf ff ff       	call   c00077b9 <malloc>
c000a8a0:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8a3:	e8 54 d1 00 00       	call   c00179fc <ISO9660::ISO9660()>
c000a8a8:	83 c4 1c             	add    esp,0x1c
c000a8ab:	c3                   	ret    

c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)>:
c000a8ac:	55                   	push   ebp
c000a8ad:	57                   	push   edi
c000a8ae:	56                   	push   esi
c000a8af:	53                   	push   ebx
c000a8b0:	81 ec 10 04 00 00    	sub    esp,0x410
c000a8b6:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000a8bd:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000a8c4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000a8cb:	68 00 04 00 00       	push   0x400
c000a8d0:	6a 00                	push   0x0
c000a8d2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000a8d6:	56                   	push   esi
c000a8d7:	e8 f4 5b ff ff       	call   c00004d0 <memset>
c000a8dc:	83 c4 10             	add    esp,0x10
c000a8df:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000a8e3:	75 0b                	jne    c000a8f0 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000a8e5:	50                   	push   eax
c000a8e6:	50                   	push   eax
c000a8e7:	57                   	push   edi
c000a8e8:	56                   	push   esi
c000a8e9:	e8 12 5d ff ff       	call   c0000600 <strcpy>
c000a8ee:	eb 41                	jmp    c000a931 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000a8f0:	8a 07                	mov    al,BYTE PTR [edi]
c000a8f2:	3c 5c                	cmp    al,0x5c
c000a8f4:	74 04                	je     c000a8fa <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000a8f6:	3c 2f                	cmp    al,0x2f
c000a8f8:	75 18                	jne    c000a912 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000a8fa:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a8fd:	3c 60                	cmp    al,0x60
c000a8ff:	7e 03                	jle    c000a904 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000a901:	83 e8 20             	sub    eax,0x20
c000a904:	88 04 24             	mov    BYTE PTR [esp],al
c000a907:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a90e:	50                   	push   eax
c000a90f:	50                   	push   eax
c000a910:	eb 18                	jmp    c000a92a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000a912:	50                   	push   eax
c000a913:	50                   	push   eax
c000a914:	55                   	push   ebp
c000a915:	56                   	push   esi
c000a916:	e8 e5 5c ff ff       	call   c0000600 <strcpy>
c000a91b:	5a                   	pop    edx
c000a91c:	59                   	pop    ecx
c000a91d:	68 86 e5 01 c0       	push   0xc001e586
c000a922:	56                   	push   esi
c000a923:	e8 98 5e ff ff       	call   c00007c0 <strcat>
c000a928:	5d                   	pop    ebp
c000a929:	58                   	pop    eax
c000a92a:	57                   	push   edi
c000a92b:	56                   	push   esi
c000a92c:	e8 8f 5e ff ff       	call   c00007c0 <strcat>
c000a931:	83 c4 10             	add    esp,0x10
c000a934:	8a 04 24             	mov    al,BYTE PTR [esp]
c000a937:	3c 60                	cmp    al,0x60
c000a939:	7e 03                	jle    c000a93e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000a93b:	83 e8 20             	sub    eax,0x20
c000a93e:	88 04 24             	mov    BYTE PTR [esp],al
c000a941:	88 03                	mov    BYTE PTR [ebx],al
c000a943:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000a94a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000a950:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000a954:	bf 03 00 00 00       	mov    edi,0x3
c000a959:	b8 03 00 00 00       	mov    eax,0x3
c000a95e:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000a961:	84 d2                	test   dl,dl
c000a963:	0f 84 91 00 00 00    	je     c000a9fa <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000a969:	8d 4f 01             	lea    ecx,[edi+0x1]
c000a96c:	80 fa 5c             	cmp    dl,0x5c
c000a96f:	74 05                	je     c000a976 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000a971:	80 fa 2f             	cmp    dl,0x2f
c000a974:	75 12                	jne    c000a988 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a976:	89 c5                	mov    ebp,eax
c000a978:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000a97d:	74 09                	je     c000a988 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000a97f:	40                   	inc    eax
c000a980:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000a984:	89 cf                	mov    edi,ecx
c000a986:	eb d6                	jmp    c000a95e <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000a988:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000a98d:	75 5b                	jne    c000a9ea <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a98f:	80 fa 2e             	cmp    dl,0x2e
c000a992:	75 56                	jne    c000a9ea <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000a994:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000a998:	74 19                	je     c000a9b3 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000a99a:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a99f:	74 53                	je     c000a9f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9a1:	89 f9                	mov    ecx,edi
c000a9a3:	41                   	inc    ecx
c000a9a4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9a7:	80 fa 2f             	cmp    dl,0x2f
c000a9aa:	74 f7                	je     c000a9a3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9ac:	80 fa 5c             	cmp    dl,0x5c
c000a9af:	74 f2                	je     c000a9a3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000a9b1:	eb d1                	jmp    c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9b3:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000a9b8:	74 3a                	je     c000a9f4 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000a9ba:	83 f8 03             	cmp    eax,0x3
c000a9bd:	74 c5                	je     c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9bf:	41                   	inc    ecx
c000a9c0:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000a9c3:	80 fa 2f             	cmp    dl,0x2f
c000a9c6:	74 f7                	je     c000a9bf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9c8:	80 fa 5c             	cmp    dl,0x5c
c000a9cb:	74 f2                	je     c000a9bf <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000a9cd:	48                   	dec    eax
c000a9ce:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9d2:	75 06                	jne    c000a9da <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9d4:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9d8:	eb f3                	jmp    c000a9cd <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000a9da:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000a9de:	74 07                	je     c000a9e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000a9e0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9e4:	48                   	dec    eax
c000a9e5:	eb f3                	jmp    c000a9da <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000a9e7:	40                   	inc    eax
c000a9e8:	eb 9a                	jmp    c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ea:	80 fa 2f             	cmp    dl,0x2f
c000a9ed:	74 95                	je     c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9ef:	80 fa 5c             	cmp    dl,0x5c
c000a9f2:	74 90                	je     c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9f4:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000a9f7:	40                   	inc    eax
c000a9f8:	eb 8a                	jmp    c000a984 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000a9fa:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000a9fe:	83 ec 0c             	sub    esp,0xc
c000aa01:	53                   	push   ebx
c000aa02:	e8 39 5b ff ff       	call   c0000540 <strlen>
c000aa07:	83 c4 10             	add    esp,0x10
c000aa0a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000aa0f:	75 26                	jne    c000aa37 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000aa11:	83 ec 0c             	sub    esp,0xc
c000aa14:	53                   	push   ebx
c000aa15:	e8 26 5b ff ff       	call   c0000540 <strlen>
c000aa1a:	83 c4 10             	add    esp,0x10
c000aa1d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000aa22:	74 26                	je     c000aa4a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000aa24:	83 ec 0c             	sub    esp,0xc
c000aa27:	53                   	push   ebx
c000aa28:	e8 13 5b ff ff       	call   c0000540 <strlen>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000aa35:	eb c7                	jmp    c000a9fe <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000aa37:	83 ec 0c             	sub    esp,0xc
c000aa3a:	53                   	push   ebx
c000aa3b:	e8 00 5b ff ff       	call   c0000540 <strlen>
c000aa40:	83 c4 10             	add    esp,0x10
c000aa43:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000aa48:	74 c7                	je     c000aa11 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000aa4a:	81 c4 0c 04 00 00    	add    esp,0x40c
c000aa50:	5b                   	pop    ebx
c000aa51:	5e                   	pop    esi
c000aa52:	5f                   	pop    edi
c000aa53:	5d                   	pop    ebp
c000aa54:	c3                   	ret    
c000aa55:	90                   	nop

c000aa56 <File::File(char const*, Process*)>:
c000aa56:	83 ec 0c             	sub    esp,0xc
c000aa59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa5d:	83 ec 08             	sub    esp,0x8
c000aa60:	6a 00                	push   0x0
c000aa62:	50                   	push   eax
c000aa63:	e8 e2 e3 ff ff       	call   c0008e4a <UnixFile::UnixFile(int)>
c000aa68:	83 c4 10             	add    esp,0x10
c000aa6b:	ba 20 d9 01 c0       	mov    edx,0xc001d920
c000aa70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa74:	89 10                	mov    DWORD PTR [eax],edx
c000aa76:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000aa7a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000aa80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa84:	83 c0 0d             	add    eax,0xd
c000aa87:	83 ec 04             	sub    esp,0x4
c000aa8a:	52                   	push   edx
c000aa8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa8f:	50                   	push   eax
c000aa90:	e8 17 fe ff ff       	call   c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)>
c000aa95:	83 c4 10             	add    esp,0x10
c000aa98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa9c:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000aa9f:	8d 50 bf             	lea    edx,[eax-0x41]
c000aaa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaa6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000aaac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000aab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aab8:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aabe:	25 ff 00 00 00       	and    eax,0xff
c000aac3:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000aaca:	85 c0                	test   eax,eax
c000aacc:	74 42                	je     c000ab10 <File::File(char const*, Process*)+0xba>
c000aace:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aad2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aad8:	25 ff 00 00 00       	and    eax,0xff
c000aadd:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000aae4:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000aaea:	85 c0                	test   eax,eax
c000aaec:	75 22                	jne    c000ab10 <File::File(char const*, Process*)+0xba>
c000aaee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aaf2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000aaf8:	25 ff 00 00 00       	and    eax,0xff
c000aafd:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000ab04:	83 ec 0c             	sub    esp,0xc
c000ab07:	50                   	push   eax
c000ab08:	e8 11 20 00 00       	call   c000cb1e <LogicalDisk::mount()>
c000ab0d:	83 c4 10             	add    esp,0x10
c000ab10:	90                   	nop
c000ab11:	83 c4 0c             	add    esp,0xc
c000ab14:	c3                   	ret    
c000ab15:	90                   	nop

c000ab16 <File::open(FileOpenMode)>:
c000ab16:	53                   	push   ebx
c000ab17:	b8 0b 00 00 00       	mov    eax,0xb
c000ab1c:	83 ec 08             	sub    esp,0x8
c000ab1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ab23:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ab2a:	80 fa 19             	cmp    dl,0x19
c000ab2d:	77 40                	ja     c000ab6f <File::open(FileOpenMode)+0x59>
c000ab2f:	8b 14 95 40 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c0]
c000ab36:	85 d2                	test   edx,edx
c000ab38:	74 35                	je     c000ab6f <File::open(FileOpenMode)+0x59>
c000ab3a:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ab40:	85 d2                	test   edx,edx
c000ab42:	74 2b                	je     c000ab6f <File::open(FileOpenMode)+0x59>
c000ab44:	b8 06 00 00 00       	mov    eax,0x6
c000ab49:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ab4d:	75 20                	jne    c000ab6f <File::open(FileOpenMode)+0x59>
c000ab4f:	8b 02                	mov    eax,DWORD PTR [edx]
c000ab51:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ab57:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ab5b:	51                   	push   ecx
c000ab5c:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ab5f:	51                   	push   ecx
c000ab60:	52                   	push   edx
c000ab61:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000ab64:	83 c4 10             	add    esp,0x10
c000ab67:	85 c0                	test   eax,eax
c000ab69:	75 04                	jne    c000ab6f <File::open(FileOpenMode)+0x59>
c000ab6b:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000ab6f:	83 c4 08             	add    esp,0x8
c000ab72:	5b                   	pop    ebx
c000ab73:	c3                   	ret    

c000ab74 <File::close()>:
c000ab74:	53                   	push   ebx
c000ab75:	b8 0b 00 00 00       	mov    eax,0xb
c000ab7a:	83 ec 08             	sub    esp,0x8
c000ab7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ab81:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ab88:	80 fa 19             	cmp    dl,0x19
c000ab8b:	77 41                	ja     c000abce <File::close()+0x5a>
c000ab8d:	8b 1c 95 40 2a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd5c0]
c000ab94:	85 db                	test   ebx,ebx
c000ab96:	74 36                	je     c000abce <File::close()+0x5a>
c000ab98:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ab9f:	74 2d                	je     c000abce <File::close()+0x5a>
c000aba1:	b8 05 00 00 00       	mov    eax,0x5
c000aba6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000abaa:	74 22                	je     c000abce <File::close()+0x5a>
c000abac:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000abb0:	8b 04 95 40 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd5c0]
c000abb7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000abbd:	53                   	push   ebx
c000abbe:	53                   	push   ebx
c000abbf:	8b 10                	mov    edx,DWORD PTR [eax]
c000abc1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000abc7:	50                   	push   eax
c000abc8:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000abcb:	83 c4 10             	add    esp,0x10
c000abce:	83 c4 08             	add    esp,0x8
c000abd1:	5b                   	pop    ebx
c000abd2:	c3                   	ret    
c000abd3:	90                   	nop

c000abd4 <File::seek(unsigned long long)>:
c000abd4:	56                   	push   esi
c000abd5:	53                   	push   ebx
c000abd6:	b8 0b 00 00 00       	mov    eax,0xb
c000abdb:	51                   	push   ecx
c000abdc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000abe0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000abe4:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000abeb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000abef:	80 fa 19             	cmp    dl,0x19
c000abf2:	77 31                	ja     c000ac25 <File::seek(unsigned long long)+0x51>
c000abf4:	8b 14 95 40 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c0]
c000abfb:	85 d2                	test   edx,edx
c000abfd:	74 26                	je     c000ac25 <File::seek(unsigned long long)+0x51>
c000abff:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac05:	85 d2                	test   edx,edx
c000ac07:	74 1c                	je     c000ac25 <File::seek(unsigned long long)+0x51>
c000ac09:	b8 05 00 00 00       	mov    eax,0x5
c000ac0e:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ac12:	74 11                	je     c000ac25 <File::seek(unsigned long long)+0x51>
c000ac14:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac16:	53                   	push   ebx
c000ac17:	51                   	push   ecx
c000ac18:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ac1e:	52                   	push   edx
c000ac1f:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ac22:	83 c4 10             	add    esp,0x10
c000ac25:	5a                   	pop    edx
c000ac26:	5b                   	pop    ebx
c000ac27:	5e                   	pop    esi
c000ac28:	c3                   	ret    
c000ac29:	90                   	nop

c000ac2a <File::tell(unsigned long long*)>:
c000ac2a:	83 ec 0c             	sub    esp,0xc
c000ac2d:	b8 0b 00 00 00       	mov    eax,0xb
c000ac32:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ac36:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ac3d:	80 fa 19             	cmp    dl,0x19
c000ac40:	77 34                	ja     c000ac76 <File::tell(unsigned long long*)+0x4c>
c000ac42:	8b 14 95 40 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c0]
c000ac49:	85 d2                	test   edx,edx
c000ac4b:	74 29                	je     c000ac76 <File::tell(unsigned long long*)+0x4c>
c000ac4d:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ac53:	85 d2                	test   edx,edx
c000ac55:	74 1f                	je     c000ac76 <File::tell(unsigned long long*)+0x4c>
c000ac57:	b8 05 00 00 00       	mov    eax,0x5
c000ac5c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000ac60:	74 14                	je     c000ac76 <File::tell(unsigned long long*)+0x4c>
c000ac62:	50                   	push   eax
c000ac63:	8b 02                	mov    eax,DWORD PTR [edx]
c000ac65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac69:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ac6f:	52                   	push   edx
c000ac70:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ac73:	83 c4 10             	add    esp,0x10
c000ac76:	83 c4 0c             	add    esp,0xc
c000ac79:	c3                   	ret    

c000ac7a <File::rewind()>:
c000ac7a:	83 ec 10             	sub    esp,0x10
c000ac7d:	6a 00                	push   0x0
c000ac7f:	6a 00                	push   0x0
c000ac81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ac85:	e8 4a ff ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c000ac8a:	83 c4 1c             	add    esp,0x1c
c000ac8d:	c3                   	ret    

c000ac8e <File::unlink()>:
c000ac8e:	83 ec 0c             	sub    esp,0xc
c000ac91:	b8 0b 00 00 00       	mov    eax,0xb
c000ac96:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ac9a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aca1:	80 f9 19             	cmp    cl,0x19
c000aca4:	77 2f                	ja     c000acd5 <File::unlink()+0x47>
c000aca6:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000acad:	85 c9                	test   ecx,ecx
c000acaf:	74 24                	je     c000acd5 <File::unlink()+0x47>
c000acb1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000acb7:	85 c9                	test   ecx,ecx
c000acb9:	74 1a                	je     c000acd5 <File::unlink()+0x47>
c000acbb:	b8 06 00 00 00       	mov    eax,0x6
c000acc0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000acc4:	75 0f                	jne    c000acd5 <File::unlink()+0x47>
c000acc6:	83 c2 0d             	add    edx,0xd
c000acc9:	50                   	push   eax
c000acca:	50                   	push   eax
c000accb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000accd:	52                   	push   edx
c000acce:	51                   	push   ecx
c000accf:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000acd2:	83 c4 10             	add    esp,0x10
c000acd5:	83 c4 0c             	add    esp,0xc
c000acd8:	c3                   	ret    
c000acd9:	90                   	nop

c000acda <File::rename(char const*)>:
c000acda:	83 ec 0c             	sub    esp,0xc
c000acdd:	b8 0b 00 00 00       	mov    eax,0xb
c000ace2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ace6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aced:	80 f9 19             	cmp    cl,0x19
c000acf0:	77 32                	ja     c000ad24 <File::rename(char const*)+0x4a>
c000acf2:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000acf9:	85 c9                	test   ecx,ecx
c000acfb:	74 27                	je     c000ad24 <File::rename(char const*)+0x4a>
c000acfd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad03:	85 c9                	test   ecx,ecx
c000ad05:	74 1d                	je     c000ad24 <File::rename(char const*)+0x4a>
c000ad07:	b8 06 00 00 00       	mov    eax,0x6
c000ad0c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad10:	75 12                	jne    c000ad24 <File::rename(char const*)+0x4a>
c000ad12:	83 c2 0d             	add    edx,0xd
c000ad15:	50                   	push   eax
c000ad16:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ad18:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad1c:	52                   	push   edx
c000ad1d:	51                   	push   ecx
c000ad1e:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000ad21:	83 c4 10             	add    esp,0x10
c000ad24:	83 c4 0c             	add    esp,0xc
c000ad27:	c3                   	ret    

c000ad28 <File::chfatattr(unsigned char, unsigned char)>:
c000ad28:	57                   	push   edi
c000ad29:	b8 0b 00 00 00       	mov    eax,0xb
c000ad2e:	56                   	push   esi
c000ad2f:	53                   	push   ebx
c000ad30:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ad38:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad3f:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ad43:	80 f9 19             	cmp    cl,0x19
c000ad46:	77 37                	ja     c000ad7f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad48:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000ad4f:	85 c9                	test   ecx,ecx
c000ad51:	74 2c                	je     c000ad7f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad53:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000ad59:	85 c9                	test   ecx,ecx
c000ad5b:	74 22                	je     c000ad7f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad5d:	b8 06 00 00 00       	mov    eax,0x6
c000ad62:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ad66:	75 17                	jne    c000ad7f <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ad68:	8b 39                	mov    edi,DWORD PTR [ecx]
c000ad6a:	89 f0                	mov    eax,esi
c000ad6c:	83 c2 0d             	add    edx,0xd
c000ad6f:	0f b6 f0             	movzx  esi,al
c000ad72:	0f b6 db             	movzx  ebx,bl
c000ad75:	56                   	push   esi
c000ad76:	53                   	push   ebx
c000ad77:	52                   	push   edx
c000ad78:	51                   	push   ecx
c000ad79:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000ad7c:	83 c4 10             	add    esp,0x10
c000ad7f:	5b                   	pop    ebx
c000ad80:	5e                   	pop    esi
c000ad81:	5f                   	pop    edi
c000ad82:	c3                   	ret    
c000ad83:	90                   	nop

c000ad84 <File::exists()>:
c000ad84:	83 ec 0c             	sub    esp,0xc
c000ad87:	31 c0                	xor    eax,eax
c000ad89:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ad8d:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ad94:	80 f9 19             	cmp    cl,0x19
c000ad97:	77 24                	ja     c000adbd <File::exists()+0x39>
c000ad99:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000ada0:	85 c9                	test   ecx,ecx
c000ada2:	74 19                	je     c000adbd <File::exists()+0x39>
c000ada4:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adaa:	85 c9                	test   ecx,ecx
c000adac:	74 0f                	je     c000adbd <File::exists()+0x39>
c000adae:	83 c2 0d             	add    edx,0xd
c000adb1:	50                   	push   eax
c000adb2:	50                   	push   eax
c000adb3:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adb5:	52                   	push   edx
c000adb6:	51                   	push   ecx
c000adb7:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000adba:	83 c4 10             	add    esp,0x10
c000adbd:	83 c4 0c             	add    esp,0xc
c000adc0:	c3                   	ret    
c000adc1:	90                   	nop

c000adc2 <File::stat(unsigned long long*, bool*)>:
c000adc2:	56                   	push   esi
c000adc3:	53                   	push   ebx
c000adc4:	50                   	push   eax
c000adc5:	b8 0b 00 00 00       	mov    eax,0xb
c000adca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000adce:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000add2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000add9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000addd:	80 f9 19             	cmp    cl,0x19
c000ade0:	77 3d                	ja     c000ae1f <File::stat(unsigned long long*, bool*)+0x5d>
c000ade2:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000ade9:	85 c9                	test   ecx,ecx
c000adeb:	74 32                	je     c000ae1f <File::stat(unsigned long long*, bool*)+0x5d>
c000aded:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000adf3:	85 c9                	test   ecx,ecx
c000adf5:	74 28                	je     c000ae1f <File::stat(unsigned long long*, bool*)+0x5d>
c000adf7:	8b 01                	mov    eax,DWORD PTR [ecx]
c000adf9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000adfd:	74 13                	je     c000ae12 <File::stat(unsigned long long*, bool*)+0x50>
c000adff:	83 ec 04             	sub    esp,0x4
c000ae02:	56                   	push   esi
c000ae03:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000ae09:	51                   	push   ecx
c000ae0a:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000ae0d:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000ae10:	eb 0a                	jmp    c000ae1c <File::stat(unsigned long long*, bool*)+0x5a>
c000ae12:	53                   	push   ebx
c000ae13:	83 c2 0d             	add    edx,0xd
c000ae16:	56                   	push   esi
c000ae17:	52                   	push   edx
c000ae18:	51                   	push   ecx
c000ae19:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000ae1c:	83 c4 10             	add    esp,0x10
c000ae1f:	5a                   	pop    edx
c000ae20:	5b                   	pop    ebx
c000ae21:	5e                   	pop    esi
c000ae22:	c3                   	ret    

c000ae23 <Fs::setcwd(Process*, char*)>:
c000ae23:	55                   	push   ebp
c000ae24:	57                   	push   edi
c000ae25:	56                   	push   esi
c000ae26:	53                   	push   ebx
c000ae27:	81 ec 20 02 00 00    	sub    esp,0x220
c000ae2d:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000ae34:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000ae3a:	57                   	push   edi
c000ae3b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000ae42:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000ae46:	56                   	push   esi
c000ae47:	e8 60 fa ff ff       	call   c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)>
c000ae4c:	89 34 24             	mov    DWORD PTR [esp],esi
c000ae4f:	e8 ec 56 ff ff       	call   c0000540 <strlen>
c000ae54:	83 c4 10             	add    esp,0x10
c000ae57:	83 f8 02             	cmp    eax,0x2
c000ae5a:	77 15                	ja     c000ae71 <Fs::setcwd(Process*, char*)+0x4e>
c000ae5c:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000ae61:	83 eb 41             	sub    ebx,0x41
c000ae64:	8b 04 9d 40 2a 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd5c0]
c000ae6b:	85 c0                	test   eax,eax
c000ae6d:	75 1c                	jne    c000ae8b <Fs::setcwd(Process*, char*)+0x68>
c000ae6f:	eb 2f                	jmp    c000aea0 <Fs::setcwd(Process*, char*)+0x7d>
c000ae71:	83 ec 0c             	sub    esp,0xc
c000ae74:	56                   	push   esi
c000ae75:	e8 c6 56 ff ff       	call   c0000540 <strlen>
c000ae7a:	83 c4 10             	add    esp,0x10
c000ae7d:	83 f8 03             	cmp    eax,0x3
c000ae80:	75 57                	jne    c000aed9 <Fs::setcwd(Process*, char*)+0xb6>
c000ae82:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000ae87:	75 50                	jne    c000aed9 <Fs::setcwd(Process*, char*)+0xb6>
c000ae89:	eb d1                	jmp    c000ae5c <Fs::setcwd(Process*, char*)+0x39>
c000ae8b:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000ae92:	75 0c                	jne    c000aea0 <Fs::setcwd(Process*, char*)+0x7d>
c000ae94:	83 ec 0c             	sub    esp,0xc
c000ae97:	50                   	push   eax
c000ae98:	e8 81 1c 00 00       	call   c000cb1e <LogicalDisk::mount()>
c000ae9d:	83 c4 10             	add    esp,0x10
c000aea0:	b8 03 00 00 00       	mov    eax,0x3
c000aea5:	83 fb 19             	cmp    ebx,0x19
c000aea8:	0f 87 c6 00 00 00    	ja     c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000aeae:	8b 14 9d 40 2a 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd5c0]
c000aeb5:	b8 05 00 00 00       	mov    eax,0x5
c000aeba:	85 d2                	test   edx,edx
c000aebc:	0f 84 b2 00 00 00    	je     c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000aec2:	b8 06 00 00 00       	mov    eax,0x6
c000aec7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000aece:	0f 85 92 00 00 00    	jne    c000af66 <Fs::setcwd(Process*, char*)+0x143>
c000aed4:	e9 9b 00 00 00       	jmp    c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000aed9:	83 ec 0c             	sub    esp,0xc
c000aedc:	68 14 01 00 00       	push   0x114
c000aee1:	e8 d3 c8 ff ff       	call   c00077b9 <malloc>
c000aee6:	83 c4 0c             	add    esp,0xc
c000aee9:	89 c3                	mov    ebx,eax
c000aeeb:	55                   	push   ebp
c000aeec:	56                   	push   esi
c000aeed:	50                   	push   eax
c000aeee:	e8 63 fb ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c000aef3:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000aef8:	83 c4 0c             	add    esp,0xc
c000aefb:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000aeff:	50                   	push   eax
c000af00:	8d 44 24 10          	lea    eax,[esp+0x10]
c000af04:	50                   	push   eax
c000af05:	53                   	push   ebx
c000af06:	e8 b7 fe ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c000af0b:	83 c4 10             	add    esp,0x10
c000af0e:	83 f8 02             	cmp    eax,0x2
c000af11:	74 04                	je     c000af17 <Fs::setcwd(Process*, char*)+0xf4>
c000af13:	85 c0                	test   eax,eax
c000af15:	74 1c                	je     c000af33 <Fs::setcwd(Process*, char*)+0x110>
c000af17:	b8 01 00 00 00       	mov    eax,0x1
c000af1c:	85 db                	test   ebx,ebx
c000af1e:	74 54                	je     c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000af20:	83 ec 0c             	sub    esp,0xc
c000af23:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af25:	53                   	push   ebx
c000af26:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af29:	83 c4 10             	add    esp,0x10
c000af2c:	b8 01 00 00 00       	mov    eax,0x1
c000af31:	eb 41                	jmp    c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000af33:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000af38:	75 1c                	jne    c000af56 <Fs::setcwd(Process*, char*)+0x133>
c000af3a:	b8 02 00 00 00       	mov    eax,0x2
c000af3f:	85 db                	test   ebx,ebx
c000af41:	74 31                	je     c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000af43:	83 ec 0c             	sub    esp,0xc
c000af46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af48:	53                   	push   ebx
c000af49:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af4c:	83 c4 10             	add    esp,0x10
c000af4f:	b8 02 00 00 00       	mov    eax,0x2
c000af54:	eb 1e                	jmp    c000af74 <Fs::setcwd(Process*, char*)+0x151>
c000af56:	85 db                	test   ebx,ebx
c000af58:	74 0c                	je     c000af66 <Fs::setcwd(Process*, char*)+0x143>
c000af5a:	83 ec 0c             	sub    esp,0xc
c000af5d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000af5f:	53                   	push   ebx
c000af60:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000af63:	83 c4 10             	add    esp,0x10
c000af66:	50                   	push   eax
c000af67:	50                   	push   eax
c000af68:	56                   	push   esi
c000af69:	57                   	push   edi
c000af6a:	e8 91 56 ff ff       	call   c0000600 <strcpy>
c000af6f:	83 c4 10             	add    esp,0x10
c000af72:	31 c0                	xor    eax,eax
c000af74:	81 c4 1c 02 00 00    	add    esp,0x21c
c000af7a:	5b                   	pop    ebx
c000af7b:	5e                   	pop    esi
c000af7c:	5f                   	pop    edi
c000af7d:	5d                   	pop    ebp
c000af7e:	c3                   	ret    
c000af7f:	90                   	nop

c000af80 <Directory::Directory(char const*, Process*)>:
c000af80:	83 ec 0c             	sub    esp,0xc
c000af83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af87:	83 ec 08             	sub    esp,0x8
c000af8a:	6a 00                	push   0x0
c000af8c:	50                   	push   eax
c000af8d:	e8 b8 de ff ff       	call   c0008e4a <UnixFile::UnixFile(int)>
c000af92:	83 c4 10             	add    esp,0x10
c000af95:	ba 3c d9 01 c0       	mov    edx,0xc001d93c
c000af9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000af9e:	89 10                	mov    DWORD PTR [eax],edx
c000afa0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000afa4:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000afaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afae:	83 c0 0d             	add    eax,0xd
c000afb1:	83 ec 04             	sub    esp,0x4
c000afb4:	52                   	push   edx
c000afb5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000afb9:	50                   	push   eax
c000afba:	e8 ed f8 ff ff       	call   c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)>
c000afbf:	83 c4 10             	add    esp,0x10
c000afc2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afc6:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000afc9:	8d 50 bf             	lea    edx,[eax-0x41]
c000afcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afd0:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000afd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afda:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000afde:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000afe2:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000afe8:	25 ff 00 00 00       	and    eax,0xff
c000afed:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000aff4:	85 c0                	test   eax,eax
c000aff6:	74 42                	je     c000b03a <Directory::Directory(char const*, Process*)+0xba>
c000aff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000affc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b002:	25 ff 00 00 00       	and    eax,0xff
c000b007:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000b00e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b014:	85 c0                	test   eax,eax
c000b016:	75 22                	jne    c000b03a <Directory::Directory(char const*, Process*)+0xba>
c000b018:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b01c:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b022:	25 ff 00 00 00       	and    eax,0xff
c000b027:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c000b02e:	83 ec 0c             	sub    esp,0xc
c000b031:	50                   	push   eax
c000b032:	e8 e7 1a 00 00       	call   c000cb1e <LogicalDisk::mount()>
c000b037:	83 c4 10             	add    esp,0x10
c000b03a:	90                   	nop
c000b03b:	83 c4 0c             	add    esp,0xc
c000b03e:	c3                   	ret    
c000b03f:	90                   	nop

c000b040 <Directory::open()>:
c000b040:	53                   	push   ebx
c000b041:	b8 0b 00 00 00       	mov    eax,0xb
c000b046:	83 ec 08             	sub    esp,0x8
c000b049:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b04d:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b054:	80 fa 19             	cmp    dl,0x19
c000b057:	77 3d                	ja     c000b096 <Directory::open()+0x56>
c000b059:	8b 14 95 40 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c0]
c000b060:	85 d2                	test   edx,edx
c000b062:	74 32                	je     c000b096 <Directory::open()+0x56>
c000b064:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b06a:	85 d2                	test   edx,edx
c000b06c:	74 28                	je     c000b096 <Directory::open()+0x56>
c000b06e:	b8 06 00 00 00       	mov    eax,0x6
c000b073:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b077:	75 1d                	jne    c000b096 <Directory::open()+0x56>
c000b079:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b07f:	50                   	push   eax
c000b080:	8b 02                	mov    eax,DWORD PTR [edx]
c000b082:	51                   	push   ecx
c000b083:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b086:	51                   	push   ecx
c000b087:	52                   	push   edx
c000b088:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b08b:	83 c4 10             	add    esp,0x10
c000b08e:	85 c0                	test   eax,eax
c000b090:	75 04                	jne    c000b096 <Directory::open()+0x56>
c000b092:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b096:	83 c4 08             	add    esp,0x8
c000b099:	5b                   	pop    ebx
c000b09a:	c3                   	ret    
c000b09b:	90                   	nop

c000b09c <Directory::close()>:
c000b09c:	53                   	push   ebx
c000b09d:	b8 0b 00 00 00       	mov    eax,0xb
c000b0a2:	83 ec 08             	sub    esp,0x8
c000b0a5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b0a9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b0b0:	80 fa 19             	cmp    dl,0x19
c000b0b3:	77 41                	ja     c000b0f6 <Directory::close()+0x5a>
c000b0b5:	8b 1c 95 40 2a 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd5c0]
c000b0bc:	85 db                	test   ebx,ebx
c000b0be:	74 36                	je     c000b0f6 <Directory::close()+0x5a>
c000b0c0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b0c7:	74 2d                	je     c000b0f6 <Directory::close()+0x5a>
c000b0c9:	b8 05 00 00 00       	mov    eax,0x5
c000b0ce:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b0d2:	74 22                	je     c000b0f6 <Directory::close()+0x5a>
c000b0d4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b0d8:	8b 04 95 40 2a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd5c0]
c000b0df:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b0e5:	53                   	push   ebx
c000b0e6:	53                   	push   ebx
c000b0e7:	8b 10                	mov    edx,DWORD PTR [eax]
c000b0e9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b0ef:	50                   	push   eax
c000b0f0:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b0f3:	83 c4 10             	add    esp,0x10
c000b0f6:	83 c4 08             	add    esp,0x8
c000b0f9:	5b                   	pop    ebx
c000b0fa:	c3                   	ret    
c000b0fb:	90                   	nop

c000b0fc <Directory::unlink()>:
c000b0fc:	83 ec 0c             	sub    esp,0xc
c000b0ff:	b8 0b 00 00 00       	mov    eax,0xb
c000b104:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b108:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b10f:	80 f9 19             	cmp    cl,0x19
c000b112:	77 2f                	ja     c000b143 <Directory::unlink()+0x47>
c000b114:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000b11b:	85 c9                	test   ecx,ecx
c000b11d:	74 24                	je     c000b143 <Directory::unlink()+0x47>
c000b11f:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b125:	85 c9                	test   ecx,ecx
c000b127:	74 1a                	je     c000b143 <Directory::unlink()+0x47>
c000b129:	b8 06 00 00 00       	mov    eax,0x6
c000b12e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b132:	75 0f                	jne    c000b143 <Directory::unlink()+0x47>
c000b134:	83 c2 0d             	add    edx,0xd
c000b137:	50                   	push   eax
c000b138:	50                   	push   eax
c000b139:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b13b:	52                   	push   edx
c000b13c:	51                   	push   ecx
c000b13d:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b140:	83 c4 10             	add    esp,0x10
c000b143:	83 c4 0c             	add    esp,0xc
c000b146:	c3                   	ret    
c000b147:	90                   	nop

c000b148 <Directory::rename(char const*)>:
c000b148:	83 ec 0c             	sub    esp,0xc
c000b14b:	b8 0b 00 00 00       	mov    eax,0xb
c000b150:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b154:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b15b:	80 f9 19             	cmp    cl,0x19
c000b15e:	77 32                	ja     c000b192 <Directory::rename(char const*)+0x4a>
c000b160:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000b167:	85 c9                	test   ecx,ecx
c000b169:	74 27                	je     c000b192 <Directory::rename(char const*)+0x4a>
c000b16b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b171:	85 c9                	test   ecx,ecx
c000b173:	74 1d                	je     c000b192 <Directory::rename(char const*)+0x4a>
c000b175:	b8 06 00 00 00       	mov    eax,0x6
c000b17a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b17e:	75 12                	jne    c000b192 <Directory::rename(char const*)+0x4a>
c000b180:	83 c2 0d             	add    edx,0xd
c000b183:	50                   	push   eax
c000b184:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b186:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b18a:	52                   	push   edx
c000b18b:	51                   	push   ecx
c000b18c:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b18f:	83 c4 10             	add    esp,0x10
c000b192:	83 c4 0c             	add    esp,0xc
c000b195:	c3                   	ret    

c000b196 <Directory::exists()>:
c000b196:	83 ec 0c             	sub    esp,0xc
c000b199:	31 c0                	xor    eax,eax
c000b19b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b19f:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b1a6:	80 f9 19             	cmp    cl,0x19
c000b1a9:	77 24                	ja     c000b1cf <Directory::exists()+0x39>
c000b1ab:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000b1b2:	85 c9                	test   ecx,ecx
c000b1b4:	74 19                	je     c000b1cf <Directory::exists()+0x39>
c000b1b6:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b1bc:	85 c9                	test   ecx,ecx
c000b1be:	74 0f                	je     c000b1cf <Directory::exists()+0x39>
c000b1c0:	83 c2 0d             	add    edx,0xd
c000b1c3:	50                   	push   eax
c000b1c4:	50                   	push   eax
c000b1c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b1c7:	52                   	push   edx
c000b1c8:	51                   	push   ecx
c000b1c9:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b1cc:	83 c4 10             	add    esp,0x10
c000b1cf:	83 c4 0c             	add    esp,0xc
c000b1d2:	c3                   	ret    
c000b1d3:	90                   	nop

c000b1d4 <Directory::read(dirent*)>:
c000b1d4:	83 ec 1c             	sub    esp,0x1c
c000b1d7:	b8 0b 00 00 00       	mov    eax,0xb
c000b1dc:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1e0:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b1e7:	80 fa 19             	cmp    dl,0x19
c000b1ea:	77 30                	ja     c000b21c <Directory::read(dirent*)+0x48>
c000b1ec:	8b 14 95 40 2a 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd5c0]
c000b1f3:	85 d2                	test   edx,edx
c000b1f5:	74 25                	je     c000b21c <Directory::read(dirent*)+0x48>
c000b1f7:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b1fe:	74 1c                	je     c000b21c <Directory::read(dirent*)+0x48>
c000b200:	83 ec 0c             	sub    esp,0xc
c000b203:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b205:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b209:	52                   	push   edx
c000b20a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b20e:	6a 00                	push   0x0
c000b210:	68 10 01 00 00       	push   0x110
c000b215:	51                   	push   ecx
c000b216:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b219:	83 c4 20             	add    esp,0x20
c000b21c:	83 c4 1c             	add    esp,0x1c
c000b21f:	c3                   	ret    

c000b220 <Directory::create()>:
c000b220:	83 ec 0c             	sub    esp,0xc
c000b223:	b8 0b 00 00 00       	mov    eax,0xb
c000b228:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b22c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b233:	80 f9 19             	cmp    cl,0x19
c000b236:	77 2f                	ja     c000b267 <Directory::create()+0x47>
c000b238:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c000b23f:	85 c9                	test   ecx,ecx
c000b241:	74 24                	je     c000b267 <Directory::create()+0x47>
c000b243:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b249:	85 c9                	test   ecx,ecx
c000b24b:	74 1a                	je     c000b267 <Directory::create()+0x47>
c000b24d:	b8 06 00 00 00       	mov    eax,0x6
c000b252:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b256:	75 0f                	jne    c000b267 <Directory::create()+0x47>
c000b258:	83 c2 0d             	add    edx,0xd
c000b25b:	50                   	push   eax
c000b25c:	50                   	push   eax
c000b25d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b25f:	52                   	push   edx
c000b260:	51                   	push   ecx
c000b261:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b264:	83 c4 10             	add    esp,0x10
c000b267:	83 c4 0c             	add    esp,0xc
c000b26a:	c3                   	ret    
c000b26b:	90                   	nop

c000b26c <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b26c:	b8 0a 00 00 00       	mov    eax,0xa
c000b271:	c3                   	ret    
c000b272:	66 90                	xchg   ax,ax

c000b274 <Bus::Bus(char const*)>:
c000b274:	83 ec 0c             	sub    esp,0xc
c000b277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b27b:	83 ec 08             	sub    esp,0x8
c000b27e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b282:	50                   	push   eax
c000b283:	e8 30 08 00 00       	call   c000bab8 <Device::Device(char const*)>
c000b288:	83 c4 10             	add    esp,0x10
c000b28b:	ba 58 d9 01 c0       	mov    edx,0xc001d958
c000b290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b294:	89 10                	mov    DWORD PTR [eax],edx
c000b296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b29a:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b2a4:	90                   	nop
c000b2a5:	83 c4 0c             	add    esp,0xc
c000b2a8:	c3                   	ret    
c000b2a9:	90                   	nop
c000b2aa:	66 90                	xchg   ax,ax

c000b2ac <Bus::~Bus()>:
c000b2ac:	83 ec 0c             	sub    esp,0xc
c000b2af:	ba 58 d9 01 c0       	mov    edx,0xc001d958
c000b2b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2b8:	89 10                	mov    DWORD PTR [eax],edx
c000b2ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b2be:	83 ec 0c             	sub    esp,0xc
c000b2c1:	50                   	push   eax
c000b2c2:	e8 5b 05 00 00       	call   c000b822 <Device::~Device()>
c000b2c7:	83 c4 10             	add    esp,0x10
c000b2ca:	90                   	nop
c000b2cb:	83 c4 0c             	add    esp,0xc
c000b2ce:	c3                   	ret    
c000b2cf:	90                   	nop

c000b2d0 <Bus::~Bus()>:
c000b2d0:	83 ec 0c             	sub    esp,0xc
c000b2d3:	83 ec 0c             	sub    esp,0xc
c000b2d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2da:	e8 cd ff ff ff       	call   c000b2ac <Bus::~Bus()>
c000b2df:	83 c4 10             	add    esp,0x10
c000b2e2:	83 ec 08             	sub    esp,0x8
c000b2e5:	68 58 01 00 00       	push   0x158
c000b2ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b2ee:	e8 f7 f0 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000b2f3:	83 c4 10             	add    esp,0x10
c000b2f6:	83 c4 0c             	add    esp,0xc
c000b2f9:	c3                   	ret    

c000b2fa <beepThread(void*)>:
c000b2fa:	83 ec 0c             	sub    esp,0xc
c000b2fd:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000b302:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b306:	48                   	dec    eax
c000b307:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000b30c:	75 01                	jne    c000b30f <beepThread(void*)+0x15>
c000b30e:	fb                   	sti    
c000b30f:	83 ec 0c             	sub    esp,0xc
c000b312:	6b c2 0a             	imul   eax,edx,0xa
c000b315:	50                   	push   eax
c000b316:	e8 69 83 00 00       	call   c0013684 <milliTenthSleep(unsigned int)>
c000b31b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b322:	e8 0f a1 00 00       	call   c0015436 <HalMakeBeep(int)>
c000b327:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b32f:	83 c4 1c             	add    esp,0x1c
c000b332:	e9 49 82 00 00       	jmp    c0013580 <blockTask(TaskState)>

c000b337 <Krnl::beep(int, int, bool)>:
c000b337:	56                   	push   esi
c000b338:	53                   	push   ebx
c000b339:	83 ec 10             	sub    esp,0x10
c000b33c:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b340:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b344:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b348:	e8 e9 a0 00 00       	call   c0015436 <HalMakeBeep(int)>
c000b34d:	83 c4 10             	add    esp,0x10
c000b350:	89 f0                	mov    eax,esi
c000b352:	84 c0                	test   al,al
c000b354:	74 1e                	je     c000b374 <Krnl::beep(int, int, bool)+0x3d>
c000b356:	83 ec 0c             	sub    esp,0xc
c000b359:	6b db 0a             	imul   ebx,ebx,0xa
c000b35c:	53                   	push   ebx
c000b35d:	e8 22 83 00 00       	call   c0013684 <milliTenthSleep(unsigned int)>
c000b362:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b36a:	83 c4 14             	add    esp,0x14
c000b36d:	5b                   	pop    ebx
c000b36e:	5e                   	pop    esi
c000b36f:	e9 c2 a0 00 00       	jmp    c0015436 <HalMakeBeep(int)>
c000b374:	68 e6 00 00 00       	push   0xe6
c000b379:	53                   	push   ebx
c000b37a:	68 fa b2 00 c0       	push   0xc000b2fa
c000b37f:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c000b385:	e8 da 7d 00 00       	call   c0013164 <Process::createThread(void (*)(void*), void*, int)>
c000b38a:	83 c4 14             	add    esp,0x14
c000b38d:	5b                   	pop    ebx
c000b38e:	5e                   	pop    esi
c000b38f:	c3                   	ret    

c000b390 <User::loadClockSettings(int)>:
c000b390:	53                   	push   ebx
c000b391:	83 ec 14             	sub    esp,0x14
c000b394:	68 14 01 00 00       	push   0x114
c000b399:	e8 1b c4 ff ff       	call   c00077b9 <malloc>
c000b39e:	83 c4 0c             	add    esp,0xc
c000b3a1:	89 c3                	mov    ebx,eax
c000b3a3:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c000b3a9:	68 7c d9 01 c0       	push   0xc001d97c
c000b3ae:	50                   	push   eax
c000b3af:	e8 a2 f6 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c000b3b4:	58                   	pop    eax
c000b3b5:	5a                   	pop    edx
c000b3b6:	6a 01                	push   0x1
c000b3b8:	53                   	push   ebx
c000b3b9:	e8 58 f7 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c000b3be:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b3c1:	e8 ae f7 ff ff       	call   c000ab74 <File::close()>
c000b3c6:	83 c4 10             	add    esp,0x10
c000b3c9:	85 db                	test   ebx,ebx
c000b3cb:	74 0f                	je     c000b3dc <User::loadClockSettings(int)+0x4c>
c000b3cd:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b3cf:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3d3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b3d6:	83 c4 08             	add    esp,0x8
c000b3d9:	5b                   	pop    ebx
c000b3da:	ff e0                	jmp    eax
c000b3dc:	83 c4 08             	add    esp,0x8
c000b3df:	5b                   	pop    ebx
c000b3e0:	c3                   	ret    
c000b3e1:	90                   	nop

c000b3e2 <Clock::Clock(char const*)>:
c000b3e2:	83 ec 0c             	sub    esp,0xc
c000b3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b3e9:	83 ec 08             	sub    esp,0x8
c000b3ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b3f0:	50                   	push   eax
c000b3f1:	e8 c2 06 00 00       	call   c000bab8 <Device::Device(char const*)>
c000b3f6:	83 c4 10             	add    esp,0x10
c000b3f9:	ba a4 d9 01 c0       	mov    edx,0xc001d9a4
c000b3fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b402:	89 10                	mov    DWORD PTR [eax],edx
c000b404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b408:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b412:	90                   	nop
c000b413:	83 c4 0c             	add    esp,0xc
c000b416:	c3                   	ret    
c000b417:	90                   	nop

c000b418 <Clock::~Clock()>:
c000b418:	83 ec 0c             	sub    esp,0xc
c000b41b:	ba a4 d9 01 c0       	mov    edx,0xc001d9a4
c000b420:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b424:	89 10                	mov    DWORD PTR [eax],edx
c000b426:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b42a:	83 ec 0c             	sub    esp,0xc
c000b42d:	50                   	push   eax
c000b42e:	e8 ef 03 00 00       	call   c000b822 <Device::~Device()>
c000b433:	83 c4 10             	add    esp,0x10
c000b436:	90                   	nop
c000b437:	83 c4 0c             	add    esp,0xc
c000b43a:	c3                   	ret    
c000b43b:	90                   	nop

c000b43c <Clock::~Clock()>:
c000b43c:	83 ec 0c             	sub    esp,0xc
c000b43f:	83 ec 0c             	sub    esp,0xc
c000b442:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b446:	e8 cd ff ff ff       	call   c000b418 <Clock::~Clock()>
c000b44b:	83 c4 10             	add    esp,0x10
c000b44e:	83 ec 08             	sub    esp,0x8
c000b451:	68 58 01 00 00       	push   0x158
c000b456:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b45a:	e8 8b ef ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000b45f:	83 c4 10             	add    esp,0x10
c000b462:	83 c4 0c             	add    esp,0xc
c000b465:	c3                   	ret    

c000b466 <Clock::timeInSecondsLocal()>:
c000b466:	53                   	push   ebx
c000b467:	83 ec 14             	sub    esp,0x14
c000b46a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b46e:	8b 10                	mov    edx,DWORD PTR [eax]
c000b470:	50                   	push   eax
c000b471:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b474:	0f b6 0d d8 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc00205d8
c000b47b:	03 0d dc 05 02 c0    	add    ecx,DWORD PTR ds:0xc00205dc
c000b481:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b487:	89 cb                	mov    ebx,ecx
c000b489:	c1 fb 1f             	sar    ebx,0x1f
c000b48c:	01 c8                	add    eax,ecx
c000b48e:	11 da                	adc    edx,ebx
c000b490:	83 c4 10             	add    esp,0x10
c000b493:	31 c9                	xor    ecx,ecx
c000b495:	80 3d d9 05 02 c0 00 	cmp    BYTE PTR ds:0xc00205d9,0x0
c000b49c:	74 05                	je     c000b4a3 <Clock::timeInSecondsLocal()+0x3d>
c000b49e:	b9 08 07 00 00       	mov    ecx,0x708
c000b4a3:	31 db                	xor    ebx,ebx
c000b4a5:	01 c8                	add    eax,ecx
c000b4a7:	11 da                	adc    edx,ebx
c000b4a9:	83 c4 08             	add    esp,0x8
c000b4ac:	5b                   	pop    ebx
c000b4ad:	c3                   	ret    

c000b4ae <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b4ae:	57                   	push   edi
c000b4af:	56                   	push   esi
c000b4b0:	53                   	push   ebx
c000b4b1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b4b5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b4b9:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4bb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b4bf:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b4c2:	0f b6 05 d8 05 02 c0 	movzx  eax,BYTE PTR ds:0xc00205d8
c000b4c9:	03 05 dc 05 02 c0    	add    eax,DWORD PTR ds:0xc00205dc
c000b4cf:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b4d5:	99                   	cdq    
c000b4d6:	29 c6                	sub    esi,eax
c000b4d8:	19 d7                	sbb    edi,edx
c000b4da:	89 f0                	mov    eax,esi
c000b4dc:	89 fa                	mov    edx,edi
c000b4de:	31 f6                	xor    esi,esi
c000b4e0:	80 3d d9 05 02 c0 00 	cmp    BYTE PTR ds:0xc00205d9,0x0
c000b4e7:	74 05                	je     c000b4ee <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b4e9:	be 08 07 00 00       	mov    esi,0x708
c000b4ee:	31 ff                	xor    edi,edi
c000b4f0:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b4f4:	29 f0                	sub    eax,esi
c000b4f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b4fa:	19 fa                	sbb    edx,edi
c000b4fc:	89 d8                	mov    eax,ebx
c000b4fe:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b502:	5b                   	pop    ebx
c000b503:	5e                   	pop    esi
c000b504:	5f                   	pop    edi
c000b505:	ff e0                	jmp    eax

c000b507 <datetimeToSeconds(datetime_t)>:
c000b507:	55                   	push   ebp
c000b508:	57                   	push   edi
c000b509:	56                   	push   esi
c000b50a:	53                   	push   ebx
c000b50b:	83 ec 14             	sub    esp,0x14
c000b50e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b512:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b516:	89 d3                	mov    ebx,edx
c000b518:	0f b6 c6             	movzx  eax,dh
c000b51b:	c1 eb 10             	shr    ebx,0x10
c000b51e:	48                   	dec    eax
c000b51f:	66 81 eb 6c 07       	sub    bx,0x76c
c000b524:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b528:	0f b6 f5             	movzx  esi,ch
c000b52b:	89 cf                	mov    edi,ecx
c000b52d:	6b f6 3c             	imul   esi,esi,0x3c
c000b530:	c1 ef 10             	shr    edi,0x10
c000b533:	0f b6 c9             	movzx  ecx,cl
c000b536:	89 f8                	mov    eax,edi
c000b538:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b53e:	0f b6 f8             	movzx  edi,al
c000b541:	0f b6 d2             	movzx  edx,dl
c000b544:	01 fe                	add    esi,edi
c000b546:	01 f1                	add    ecx,esi
c000b548:	0f b7 f3             	movzx  esi,bx
c000b54b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b54f:	c1 f9 1f             	sar    ecx,0x1f
c000b552:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b557:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b55b:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b560:	8b 0c 8d e0 d9 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe2620]
c000b567:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b56b:	76 29                	jbe    c000b596 <datetimeToSeconds(datetime_t)+0x8f>
c000b56d:	f6 c3 03             	test   bl,0x3
c000b570:	75 24                	jne    c000b596 <datetimeToSeconds(datetime_t)+0x8f>
c000b572:	31 d2                	xor    edx,edx
c000b574:	bf 64 00 00 00       	mov    edi,0x64
c000b579:	89 d8                	mov    eax,ebx
c000b57b:	66 f7 f7             	div    di
c000b57e:	66 85 d2             	test   dx,dx
c000b581:	75 12                	jne    c000b595 <datetimeToSeconds(datetime_t)+0x8e>
c000b583:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b589:	bf 90 01 00 00       	mov    edi,0x190
c000b58e:	99                   	cdq    
c000b58f:	f7 ff                	idiv   edi
c000b591:	85 d2                	test   edx,edx
c000b593:	75 01                	jne    c000b596 <datetimeToSeconds(datetime_t)+0x8f>
c000b595:	41                   	inc    ecx
c000b596:	66 83 fb 46          	cmp    bx,0x46
c000b59a:	76 45                	jbe    c000b5e1 <datetimeToSeconds(datetime_t)+0xda>
c000b59c:	bb 46 00 00 00       	mov    ebx,0x46
c000b5a1:	bf 64 00 00 00       	mov    edi,0x64
c000b5a6:	bd 90 01 00 00       	mov    ebp,0x190
c000b5ab:	b8 6d 01 00 00       	mov    eax,0x16d
c000b5b0:	f6 c3 03             	test   bl,0x3
c000b5b3:	75 23                	jne    c000b5d8 <datetimeToSeconds(datetime_t)+0xd1>
c000b5b5:	89 d8                	mov    eax,ebx
c000b5b7:	99                   	cdq    
c000b5b8:	f7 ff                	idiv   edi
c000b5ba:	b8 6e 01 00 00       	mov    eax,0x16e
c000b5bf:	85 d2                	test   edx,edx
c000b5c1:	75 15                	jne    c000b5d8 <datetimeToSeconds(datetime_t)+0xd1>
c000b5c3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b5c9:	99                   	cdq    
c000b5ca:	f7 fd                	idiv   ebp
c000b5cc:	31 c0                	xor    eax,eax
c000b5ce:	85 d2                	test   edx,edx
c000b5d0:	0f 94 c0             	sete   al
c000b5d3:	05 6d 01 00 00       	add    eax,0x16d
c000b5d8:	01 c1                	add    ecx,eax
c000b5da:	43                   	inc    ebx
c000b5db:	39 f3                	cmp    ebx,esi
c000b5dd:	7c cc                	jl     c000b5ab <datetimeToSeconds(datetime_t)+0xa4>
c000b5df:	eb 3b                	jmp    c000b61c <datetimeToSeconds(datetime_t)+0x115>
c000b5e1:	74 39                	je     c000b61c <datetimeToSeconds(datetime_t)+0x115>
c000b5e3:	b8 45 00 00 00       	mov    eax,0x45
c000b5e8:	89 c2                	mov    edx,eax
c000b5ea:	83 e2 03             	and    edx,0x3
c000b5ed:	39 f0                	cmp    eax,esi
c000b5ef:	7e 13                	jle    c000b604 <datetimeToSeconds(datetime_t)+0xfd>
c000b5f1:	85 d2                	test   edx,edx
c000b5f3:	0f 94 c2             	sete   dl
c000b5f6:	48                   	dec    eax
c000b5f7:	0f b6 d2             	movzx  edx,dl
c000b5fa:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b600:	29 d1                	sub    ecx,edx
c000b602:	eb e4                	jmp    c000b5e8 <datetimeToSeconds(datetime_t)+0xe1>
c000b604:	b8 6d 01 00 00       	mov    eax,0x16d
c000b609:	85 d2                	test   edx,edx
c000b60b:	75 0d                	jne    c000b61a <datetimeToSeconds(datetime_t)+0x113>
c000b60d:	31 c0                	xor    eax,eax
c000b60f:	66 85 db             	test   bx,bx
c000b612:	0f 95 c0             	setne  al
c000b615:	05 6d 01 00 00       	add    eax,0x16d
c000b61a:	29 c1                	sub    ecx,eax
c000b61c:	b8 80 51 01 00       	mov    eax,0x15180
c000b621:	f7 e9                	imul   ecx
c000b623:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b627:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b62b:	83 c4 14             	add    esp,0x14
c000b62e:	5b                   	pop    ebx
c000b62f:	5e                   	pop    esi
c000b630:	5f                   	pop    edi
c000b631:	5d                   	pop    ebp
c000b632:	c3                   	ret    
c000b633:	90                   	nop

c000b634 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b634:	57                   	push   edi
c000b635:	56                   	push   esi
c000b636:	53                   	push   ebx
c000b637:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b63b:	8b 06                	mov    eax,DWORD PTR [esi]
c000b63d:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b640:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b644:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b648:	e8 ba fe ff ff       	call   c000b507 <datetimeToSeconds(datetime_t)>
c000b64d:	59                   	pop    ecx
c000b64e:	0f b6 0d d8 05 02 c0 	movzx  ecx,BYTE PTR ds:0xc00205d8
c000b655:	5b                   	pop    ebx
c000b656:	03 0d dc 05 02 c0    	add    ecx,DWORD PTR ds:0xc00205dc
c000b65c:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b662:	89 cb                	mov    ebx,ecx
c000b664:	c1 fb 1f             	sar    ebx,0x1f
c000b667:	29 c8                	sub    eax,ecx
c000b669:	19 da                	sbb    edx,ebx
c000b66b:	31 c9                	xor    ecx,ecx
c000b66d:	80 3d d9 05 02 c0 00 	cmp    BYTE PTR ds:0xc00205d9,0x0
c000b674:	74 05                	je     c000b67b <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b676:	b9 08 07 00 00       	mov    ecx,0x708
c000b67b:	31 db                	xor    ebx,ebx
c000b67d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b681:	29 c8                	sub    eax,ecx
c000b683:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b687:	19 da                	sbb    edx,ebx
c000b689:	89 f8                	mov    eax,edi
c000b68b:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b68f:	5b                   	pop    ebx
c000b690:	5e                   	pop    esi
c000b691:	5f                   	pop    edi
c000b692:	ff e0                	jmp    eax

c000b694 <secondsToDatetime(unsigned long long)>:
c000b694:	55                   	push   ebp
c000b695:	57                   	push   edi
c000b696:	56                   	push   esi
c000b697:	53                   	push   ebx
c000b698:	83 ec 1c             	sub    esp,0x1c
c000b69b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b69f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b6a3:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b6a7:	6a 00                	push   0x0
c000b6a9:	68 80 51 01 00       	push   0x15180
c000b6ae:	55                   	push   ebp
c000b6af:	57                   	push   edi
c000b6b0:	e8 cb 05 01 00       	call   c001bc80 <__udivdi3>
c000b6b5:	83 c4 10             	add    esp,0x10
c000b6b8:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b6be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6c2:	6a 00                	push   0x0
c000b6c4:	68 80 51 01 00       	push   0x15180
c000b6c9:	55                   	push   ebp
c000b6ca:	57                   	push   edi
c000b6cb:	bf 10 0e 00 00       	mov    edi,0xe10
c000b6d0:	e8 ab 06 01 00       	call   c001bd80 <__umoddi3>
c000b6d5:	83 c4 10             	add    esp,0x10
c000b6d8:	99                   	cdq    
c000b6d9:	f7 ff                	idiv   edi
c000b6db:	bf 3c 00 00 00       	mov    edi,0x3c
c000b6e0:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b6e3:	89 d0                	mov    eax,edx
c000b6e5:	99                   	cdq    
c000b6e6:	f7 ff                	idiv   edi
c000b6e8:	85 db                	test   ebx,ebx
c000b6ea:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b6ed:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b6f0:	79 11                	jns    c000b703 <secondsToDatetime(unsigned long long)+0x6f>
c000b6f2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b6f6:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b6fc:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b701:	eb 07                	jmp    c000b70a <secondsToDatetime(unsigned long long)+0x76>
c000b703:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b708:	89 d8                	mov    eax,ebx
c000b70a:	bf b4 05 00 00       	mov    edi,0x5b4
c000b70f:	99                   	cdq    
c000b710:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b715:	f7 f9                	idiv   ecx
c000b717:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b71c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b720:	31 d2                	xor    edx,edx
c000b722:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b72a:	01 c3                	add    ebx,eax
c000b72c:	89 d8                	mov    eax,ebx
c000b72e:	f7 f1                	div    ecx
c000b730:	31 d2                	xor    edx,edx
c000b732:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b735:	89 d8                	mov    eax,ebx
c000b737:	f7 f7                	div    edi
c000b739:	31 d2                	xor    edx,edx
c000b73b:	29 c1                	sub    ecx,eax
c000b73d:	89 d8                	mov    eax,ebx
c000b73f:	f7 f5                	div    ebp
c000b741:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b746:	29 c1                	sub    ecx,eax
c000b748:	31 d2                	xor    edx,edx
c000b74a:	89 c8                	mov    eax,ecx
c000b74c:	f7 f5                	div    ebp
c000b74e:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b753:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b757:	31 d2                	xor    edx,edx
c000b759:	89 c8                	mov    eax,ecx
c000b75b:	f7 f5                	div    ebp
c000b75d:	31 d2                	xor    edx,edx
c000b75f:	01 c3                	add    ebx,eax
c000b761:	89 c8                	mov    eax,ecx
c000b763:	f7 f7                	div    edi
c000b765:	bf 99 00 00 00       	mov    edi,0x99
c000b76a:	29 c3                	sub    ebx,eax
c000b76c:	31 d2                	xor    edx,edx
c000b76e:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b776:	29 c3                	sub    ebx,eax
c000b778:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b77b:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b77e:	bb 05 00 00 00       	mov    ebx,0x5
c000b783:	83 c1 02             	add    ecx,0x2
c000b786:	89 c8                	mov    eax,ecx
c000b788:	f7 f7                	div    edi
c000b78a:	31 d2                	xor    edx,edx
c000b78c:	89 c7                	mov    edi,eax
c000b78e:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b794:	83 c0 02             	add    eax,0x2
c000b797:	f7 f3                	div    ebx
c000b799:	89 eb                	mov    ebx,ebp
c000b79b:	29 c3                	sub    ebx,eax
c000b79d:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b7a3:	88 1e                	mov    BYTE PTR [esi],bl
c000b7a5:	19 c0                	sbb    eax,eax
c000b7a7:	31 d2                	xor    edx,edx
c000b7a9:	83 e0 0c             	and    eax,0xc
c000b7ac:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b7b0:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000b7b8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000b7bc:	83 f9 01             	cmp    ecx,0x1
c000b7bf:	0f 96 c2             	setbe  dl
c000b7c2:	41                   	inc    ecx
c000b7c3:	01 d0                	add    eax,edx
c000b7c5:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000b7c8:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000b7cc:	83 c4 1c             	add    esp,0x1c
c000b7cf:	89 f0                	mov    eax,esi
c000b7d1:	5b                   	pop    ebx
c000b7d2:	5e                   	pop    esi
c000b7d3:	5f                   	pop    edi
c000b7d4:	5d                   	pop    ebp
c000b7d5:	c2 04 00             	ret    0x4

c000b7d8 <Clock::timeInDatetimeLocal()>:
c000b7d8:	53                   	push   ebx
c000b7d9:	83 ec 14             	sub    esp,0x14
c000b7dc:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b7e0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000b7e4:	e8 7d fc ff ff       	call   c000b466 <Clock::timeInSecondsLocal()>
c000b7e9:	83 c4 0c             	add    esp,0xc
c000b7ec:	52                   	push   edx
c000b7ed:	50                   	push   eax
c000b7ee:	53                   	push   ebx
c000b7ef:	e8 a0 fe ff ff       	call   c000b694 <secondsToDatetime(unsigned long long)>
c000b7f4:	89 d8                	mov    eax,ebx
c000b7f6:	83 c4 14             	add    esp,0x14
c000b7f9:	5b                   	pop    ebx
c000b7fa:	c2 04 00             	ret    0x4
c000b7fd:	90                   	nop

c000b7fe <Device::hibernate()>:
c000b7fe:	c3                   	ret    
c000b7ff:	90                   	nop

c000b800 <Device::wake()>:
c000b800:	c3                   	ret    
c000b801:	90                   	nop

c000b802 <Device::detect()>:
c000b802:	c3                   	ret    
c000b803:	90                   	nop

c000b804 <Device::disableLegacy()>:
c000b804:	c3                   	ret    
c000b805:	90                   	nop

c000b806 <Device::powerSaving(PowerSavingLevel)>:
c000b806:	c3                   	ret    
c000b807:	90                   	nop

c000b808 <DriverlessDevice::close(int, int, void*)>:
c000b808:	31 c0                	xor    eax,eax
c000b80a:	c3                   	ret    
c000b80b:	90                   	nop

c000b80c <DriverlessDevice::detect()>:
c000b80c:	c3                   	ret    
c000b80d:	90                   	nop

c000b80e <DriverlessDevice::open(int, int, void*)>:
c000b80e:	83 ec 18             	sub    esp,0x18
c000b811:	68 10 da 01 c0       	push   0xc001da10
c000b816:	e8 40 49 00 00       	call   c001015b <KePanic(char const*)>
c000b81b:	83 c8 ff             	or     eax,0xffffffff
c000b81e:	83 c4 1c             	add    esp,0x1c
c000b821:	c3                   	ret    

c000b822 <Device::~Device()>:
c000b822:	ba 70 da 01 c0       	mov    edx,0xc001da70
c000b827:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b82b:	89 10                	mov    DWORD PTR [eax],edx
c000b82d:	90                   	nop
c000b82e:	c3                   	ret    
c000b82f:	90                   	nop

c000b830 <Device::~Device()>:
c000b830:	83 ec 0c             	sub    esp,0xc
c000b833:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b837:	e8 e6 ff ff ff       	call   c000b822 <Device::~Device()>
c000b83c:	83 c4 04             	add    esp,0x4
c000b83f:	83 ec 08             	sub    esp,0x8
c000b842:	68 58 01 00 00       	push   0x158
c000b847:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b84b:	e8 9a eb ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000b850:	83 c4 10             	add    esp,0x10
c000b853:	83 c4 0c             	add    esp,0xc
c000b856:	c3                   	ret    
c000b857:	90                   	nop

c000b858 <Device::findAndLoadDriver()>:
c000b858:	c7 44 24 04 2e da 01 c0 	mov    DWORD PTR [esp+0x4],0xc001da2e
c000b860:	e9 7b ec ff ff       	jmp    c000a4e0 <Dbg::kprintf(char const*, ...)>
c000b865:	90                   	nop

c000b866 <Device::preOpenPCI(PCIDeviceInfo)>:
c000b866:	57                   	push   edi
c000b867:	b9 09 00 00 00       	mov    ecx,0x9
c000b86c:	56                   	push   esi
c000b86d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000b871:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b875:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000b87f:	81 c7 18 01 00 00    	add    edi,0x118
c000b885:	fc                   	cld    
c000b886:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000b888:	5e                   	pop    esi
c000b889:	5f                   	pop    edi
c000b88a:	c3                   	ret    
c000b88b:	90                   	nop

c000b88c <Device::preOpenACPI(void*, char*, char*)>:
c000b88c:	57                   	push   edi
c000b88d:	b9 1e 00 00 00       	mov    ecx,0x1e
c000b892:	56                   	push   esi
c000b893:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b897:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b89b:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000b8a5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000b8ab:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000b8b1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b8b5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8b7:	b9 0e 00 00 00       	mov    ecx,0xe
c000b8bc:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000b8c2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000b8c6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b8c8:	5e                   	pop    esi
c000b8c9:	5f                   	pop    edi
c000b8ca:	c3                   	ret    
c000b8cb:	90                   	nop

c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000b8cc:	53                   	push   ebx
c000b8cd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b8d1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b8d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b8d9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8dd:	0f b6 c0             	movzx  eax,al
c000b8e0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000b8e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8e8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b8ec:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b8f0:	5b                   	pop    ebx
c000b8f1:	e9 a6 05 00 00       	jmp    c000be9c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000b8f6 <Device::getParent()>:
c000b8f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b8fa:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000b900:	c3                   	ret    
c000b901:	90                   	nop

c000b902 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000b902:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b906:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b90a:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000b90f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000b913:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b917:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000b91b:	e9 e8 06 00 00       	jmp    c000c008 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000b920 <Device::addChild(Device*)>:
c000b920:	53                   	push   ebx
c000b921:	83 ec 08             	sub    esp,0x8
c000b924:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b928:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b92c:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000b932:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000b938:	8b 13                	mov    edx,DWORD PTR [ebx]
c000b93a:	85 d2                	test   edx,edx
c000b93c:	74 04                	je     c000b942 <Device::addChild(Device*)+0x22>
c000b93e:	89 d3                	mov    ebx,edx
c000b940:	eb f6                	jmp    c000b938 <Device::addChild(Device*)+0x18>
c000b942:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000b945:	83 ec 0c             	sub    esp,0xc
c000b948:	6a 08                	push   0x8
c000b94a:	e8 6a be ff ff       	call   c00077b9 <malloc>
c000b94f:	89 03                	mov    DWORD PTR [ebx],eax
c000b951:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b957:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b95e:	83 c4 18             	add    esp,0x18
c000b961:	5b                   	pop    ebx
c000b962:	c3                   	ret    
c000b963:	90                   	nop

c000b964 <Device::removeAllChildren()>:
c000b964:	56                   	push   esi
c000b965:	53                   	push   ebx
c000b966:	52                   	push   edx
c000b967:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b96b:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000b971:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b974:	74 17                	je     c000b98d <Device::removeAllChildren()+0x29>
c000b976:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000b979:	85 c0                	test   eax,eax
c000b97b:	74 0c                	je     c000b989 <Device::removeAllChildren()+0x25>
c000b97d:	83 ec 0c             	sub    esp,0xc
c000b980:	8b 10                	mov    edx,DWORD PTR [eax]
c000b982:	50                   	push   eax
c000b983:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000b986:	83 c4 10             	add    esp,0x10
c000b989:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b98b:	eb e4                	jmp    c000b971 <Device::removeAllChildren()+0xd>
c000b98d:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b993:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000b999:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000b99f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000b9a6:	58                   	pop    eax
c000b9a7:	5b                   	pop    ebx
c000b9a8:	5e                   	pop    esi
c000b9a9:	c3                   	ret    

c000b9aa <Device::hibernateAll()>:
c000b9aa:	53                   	push   ebx
c000b9ab:	83 ec 14             	sub    esp,0x14
c000b9ae:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9b4:	53                   	push   ebx
c000b9b5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b9b8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9be:	83 c4 10             	add    esp,0x10
c000b9c1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9c4:	74 0f                	je     c000b9d5 <Device::hibernateAll()+0x2b>
c000b9c6:	83 ec 0c             	sub    esp,0xc
c000b9c9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9cc:	e8 d9 ff ff ff       	call   c000b9aa <Device::hibernateAll()>
c000b9d1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000b9d3:	eb e9                	jmp    c000b9be <Device::hibernateAll()+0x14>
c000b9d5:	83 c4 08             	add    esp,0x8
c000b9d8:	5b                   	pop    ebx
c000b9d9:	c3                   	ret    

c000b9da <Device::wakeAll()>:
c000b9da:	53                   	push   ebx
c000b9db:	83 ec 14             	sub    esp,0x14
c000b9de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000b9e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b9e4:	53                   	push   ebx
c000b9e5:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000b9e8:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000b9ee:	83 c4 10             	add    esp,0x10
c000b9f1:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000b9f4:	74 0f                	je     c000ba05 <Device::wakeAll()+0x2b>
c000b9f6:	83 ec 0c             	sub    esp,0xc
c000b9f9:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000b9fc:	e8 d9 ff ff ff       	call   c000b9da <Device::wakeAll()>
c000ba01:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba03:	eb e9                	jmp    c000b9ee <Device::wakeAll()+0x14>
c000ba05:	83 c4 08             	add    esp,0x8
c000ba08:	5b                   	pop    ebx
c000ba09:	c3                   	ret    

c000ba0a <Device::detectAll()>:
c000ba0a:	53                   	push   ebx
c000ba0b:	83 ec 14             	sub    esp,0x14
c000ba0e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba12:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba14:	53                   	push   ebx
c000ba15:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000ba18:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba1e:	83 c4 10             	add    esp,0x10
c000ba21:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba24:	74 0f                	je     c000ba35 <Device::detectAll()+0x2b>
c000ba26:	83 ec 0c             	sub    esp,0xc
c000ba29:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba2c:	e8 d9 ff ff ff       	call   c000ba0a <Device::detectAll()>
c000ba31:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba33:	eb e9                	jmp    c000ba1e <Device::detectAll()+0x14>
c000ba35:	83 c4 08             	add    esp,0x8
c000ba38:	5b                   	pop    ebx
c000ba39:	c3                   	ret    

c000ba3a <Device::disableLegacyAll()>:
c000ba3a:	c3                   	ret    
c000ba3b:	90                   	nop

c000ba3c <Device::loadDriversForAll()>:
c000ba3c:	c3                   	ret    
c000ba3d:	90                   	nop

c000ba3e <Device::closeAll()>:
c000ba3e:	53                   	push   ebx
c000ba3f:	83 ec 08             	sub    esp,0x8
c000ba42:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ba46:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba48:	6a 00                	push   0x0
c000ba4a:	6a 00                	push   0x0
c000ba4c:	6a 00                	push   0x0
c000ba4e:	53                   	push   ebx
c000ba4f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000ba52:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba58:	83 c4 10             	add    esp,0x10
c000ba5b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba5e:	74 0f                	je     c000ba6f <Device::closeAll()+0x31>
c000ba60:	83 ec 0c             	sub    esp,0xc
c000ba63:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba66:	e8 d3 ff ff ff       	call   c000ba3e <Device::closeAll()>
c000ba6b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000ba6d:	eb e9                	jmp    c000ba58 <Device::closeAll()+0x1a>
c000ba6f:	83 c4 08             	add    esp,0x8
c000ba72:	5b                   	pop    ebx
c000ba73:	c3                   	ret    

c000ba74 <Device::powerSavingAll(PowerSavingLevel)>:
c000ba74:	56                   	push   esi
c000ba75:	53                   	push   ebx
c000ba76:	83 ec 0c             	sub    esp,0xc
c000ba79:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ba7d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000ba81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ba83:	56                   	push   esi
c000ba84:	53                   	push   ebx
c000ba85:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000ba88:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000ba8e:	83 c4 10             	add    esp,0x10
c000ba91:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000ba94:	74 0f                	je     c000baa5 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000ba96:	52                   	push   edx
c000ba97:	52                   	push   edx
c000ba98:	56                   	push   esi
c000ba99:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000ba9c:	e8 d3 ff ff ff       	call   c000ba74 <Device::powerSavingAll(PowerSavingLevel)>
c000baa1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000baa3:	eb e9                	jmp    c000ba8e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000baa5:	58                   	pop    eax
c000baa6:	5b                   	pop    ebx
c000baa7:	5e                   	pop    esi
c000baa8:	c3                   	ret    
c000baa9:	90                   	nop

c000baaa <Device::setName(char const*)>:
c000baaa:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bab2:	e9 49 4b ff ff       	jmp    c0000600 <strcpy>
c000bab7:	90                   	nop

c000bab8 <Device::Device(char const*)>:
c000bab8:	83 ec 1c             	sub    esp,0x1c
c000babb:	ba 70 da 01 c0       	mov    edx,0xc001da70
c000bac0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bac4:	89 10                	mov    DWORD PTR [eax],edx
c000bac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baca:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bad4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bad8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bae2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bae6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000baf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000baf4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bafe:	83 ec 08             	sub    esp,0x8
c000bb01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bb09:	e8 9c ff ff ff       	call   c000baaa <Device::setName(char const*)>
c000bb0e:	83 c4 10             	add    esp,0x10
c000bb11:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bb19:	83 ec 0c             	sub    esp,0xc
c000bb1c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bb20:	e8 94 bc ff ff       	call   c00077b9 <malloc>
c000bb25:	83 c4 10             	add    esp,0x10
c000bb28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb2e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb35:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bb39:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bb3f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb43:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb49:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb4f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb53:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bb59:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bb60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb64:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bb6b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb6f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bb76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb7a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bb84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb88:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bb92:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bb96:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bba0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bba4:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bbae:	90                   	nop
c000bbaf:	83 c4 1c             	add    esp,0x1c
c000bbb2:	c3                   	ret    
c000bbb3:	90                   	nop

c000bbb4 <Device::getName()>:
c000bbb4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bbb8:	05 d0 00 00 00       	add    eax,0xd0
c000bbbd:	c3                   	ret    

c000bbbe <DriverlessDevice::DriverlessDevice(char const*)>:
c000bbbe:	83 ec 0c             	sub    esp,0xc
c000bbc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbc5:	83 ec 08             	sub    esp,0x8
c000bbc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bbcc:	50                   	push   eax
c000bbcd:	e8 e6 fe ff ff       	call   c000bab8 <Device::Device(char const*)>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	ba 9c da 01 c0       	mov    edx,0xc001da9c
c000bbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbde:	89 10                	mov    DWORD PTR [eax],edx
c000bbe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbe4:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000bbee:	90                   	nop
c000bbef:	83 c4 0c             	add    esp,0xc
c000bbf2:	c3                   	ret    
c000bbf3:	90                   	nop

c000bbf4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000bbf4:	57                   	push   edi
c000bbf5:	56                   	push   esi
c000bbf6:	53                   	push   ebx
c000bbf7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bbfb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000bbff:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bc03:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000bc09:	75 0c                	jne    c000bc17 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000bc0b:	52                   	push   edx
c000bc0c:	52                   	push   edx
c000bc0d:	53                   	push   ebx
c000bc0e:	56                   	push   esi
c000bc0f:	e8 1e 05 01 00       	call   c001c132 <LinkedList<Device>::addElement(Device*)>
c000bc14:	83 c4 10             	add    esp,0x10
c000bc17:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc1d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc20:	74 12                	je     c000bc34 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000bc22:	50                   	push   eax
c000bc23:	57                   	push   edi
c000bc24:	56                   	push   esi
c000bc25:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc28:	e8 c7 ff ff ff       	call   c000bbf4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc2d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc2f:	83 c4 10             	add    esp,0x10
c000bc32:	eb e9                	jmp    c000bc1d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000bc34:	5b                   	pop    ebx
c000bc35:	5e                   	pop    esi
c000bc36:	5f                   	pop    edi
c000bc37:	c3                   	ret    

c000bc38 <getDevicesOfType(DeviceType)>:
c000bc38:	53                   	push   ebx
c000bc39:	83 ec 14             	sub    esp,0x14
c000bc3c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc40:	53                   	push   ebx
c000bc41:	e8 c8 05 01 00       	call   c001c20e <LinkedList<Device>::LinkedList()>
c000bc46:	83 c4 0c             	add    esp,0xc
c000bc49:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bc4d:	53                   	push   ebx
c000bc4e:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c000bc54:	e8 9b ff ff ff       	call   c000bbf4 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bc59:	89 d8                	mov    eax,ebx
c000bc5b:	83 c4 18             	add    esp,0x18
c000bc5e:	5b                   	pop    ebx
c000bc5f:	c2 04 00             	ret    0x4
c000bc62:	66 90                	xchg   ax,ax

c000bc64 <HardDiskController::HardDiskController(char const*)>:
c000bc64:	83 ec 0c             	sub    esp,0xc
c000bc67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc6b:	83 ec 08             	sub    esp,0x8
c000bc6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc72:	50                   	push   eax
c000bc73:	e8 40 fe ff ff       	call   c000bab8 <Device::Device(char const*)>
c000bc78:	83 c4 10             	add    esp,0x10
c000bc7b:	ba c8 da 01 c0       	mov    edx,0xc001dac8
c000bc80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc84:	89 10                	mov    DWORD PTR [eax],edx
c000bc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bc8a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bc94:	90                   	nop
c000bc95:	83 c4 0c             	add    esp,0xc
c000bc98:	c3                   	ret    
c000bc99:	90                   	nop
c000bc9a:	66 90                	xchg   ax,ax

c000bc9c <HardDiskController::~HardDiskController()>:
c000bc9c:	83 ec 0c             	sub    esp,0xc
c000bc9f:	ba c8 da 01 c0       	mov    edx,0xc001dac8
c000bca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bca8:	89 10                	mov    DWORD PTR [eax],edx
c000bcaa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcae:	83 ec 0c             	sub    esp,0xc
c000bcb1:	50                   	push   eax
c000bcb2:	e8 6b fb ff ff       	call   c000b822 <Device::~Device()>
c000bcb7:	83 c4 10             	add    esp,0x10
c000bcba:	90                   	nop
c000bcbb:	83 c4 0c             	add    esp,0xc
c000bcbe:	c3                   	ret    
c000bcbf:	90                   	nop

c000bcc0 <HardDiskController::~HardDiskController()>:
c000bcc0:	83 ec 0c             	sub    esp,0xc
c000bcc3:	83 ec 0c             	sub    esp,0xc
c000bcc6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcca:	e8 cd ff ff ff       	call   c000bc9c <HardDiskController::~HardDiskController()>
c000bccf:	83 c4 10             	add    esp,0x10
c000bcd2:	83 ec 08             	sub    esp,0x8
c000bcd5:	68 58 01 00 00       	push   0x158
c000bcda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcde:	e8 07 e7 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000bce3:	83 c4 10             	add    esp,0x10
c000bce6:	83 c4 0c             	add    esp,0xc
c000bce9:	c3                   	ret    

c000bcea <PhysicalDisk::eject()>:
c000bcea:	83 c8 ff             	or     eax,0xffffffff
c000bced:	c3                   	ret    

c000bcee <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bcee:	83 ec 0c             	sub    esp,0xc
c000bcf1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcf5:	83 ec 08             	sub    esp,0x8
c000bcf8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcfc:	50                   	push   eax
c000bcfd:	e8 b6 fd ff ff       	call   c000bab8 <Device::Device(char const*)>
c000bd02:	83 c4 10             	add    esp,0x10
c000bd05:	ba f4 da 01 c0       	mov    edx,0xc001daf4
c000bd0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd0e:	89 10                	mov    DWORD PTR [eax],edx
c000bd10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd14:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bd1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd1f:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bd26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd2a:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bd34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd38:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bd3c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bd42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd46:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bd50:	90                   	nop
c000bd51:	83 c4 0c             	add    esp,0xc
c000bd54:	c3                   	ret    
c000bd55:	90                   	nop

c000bd56 <PhysicalDisk::startCache()>:
c000bd56:	56                   	push   esi
c000bd57:	53                   	push   ebx
c000bd58:	83 ec 10             	sub    esp,0x10
c000bd5b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bd5f:	6a 44                	push   0x44
c000bd61:	e8 53 ba ff ff       	call   c00077b9 <malloc>
c000bd66:	89 c6                	mov    esi,eax
c000bd68:	58                   	pop    eax
c000bd69:	5a                   	pop    edx
c000bd6a:	53                   	push   ebx
c000bd6b:	56                   	push   esi
c000bd6c:	e8 c3 15 00 00       	call   c000d334 <VCache::VCache(PhysicalDisk*)>
c000bd71:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bd77:	83 c4 14             	add    esp,0x14
c000bd7a:	5b                   	pop    ebx
c000bd7b:	5e                   	pop    esi
c000bd7c:	c3                   	ret    
c000bd7d:	90                   	nop

c000bd7e <PhysicalDisk::~PhysicalDisk()>:
c000bd7e:	83 ec 0c             	sub    esp,0xc
c000bd81:	ba f4 da 01 c0       	mov    edx,0xc001daf4
c000bd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd8a:	89 10                	mov    DWORD PTR [eax],edx
c000bd8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd90:	83 ec 0c             	sub    esp,0xc
c000bd93:	50                   	push   eax
c000bd94:	e8 89 fa ff ff       	call   c000b822 <Device::~Device()>
c000bd99:	83 c4 10             	add    esp,0x10
c000bd9c:	90                   	nop
c000bd9d:	83 c4 0c             	add    esp,0xc
c000bda0:	c3                   	ret    
c000bda1:	90                   	nop

c000bda2 <PhysicalDisk::~PhysicalDisk()>:
c000bda2:	83 ec 0c             	sub    esp,0xc
c000bda5:	83 ec 0c             	sub    esp,0xc
c000bda8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdac:	e8 cd ff ff ff       	call   c000bd7e <PhysicalDisk::~PhysicalDisk()>
c000bdb1:	83 c4 10             	add    esp,0x10
c000bdb4:	83 ec 08             	sub    esp,0x8
c000bdb7:	68 6c 01 00 00       	push   0x16c
c000bdbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bdc0:	e8 25 e6 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000bdc5:	83 c4 10             	add    esp,0x10
c000bdc8:	83 c4 0c             	add    esp,0xc
c000bdcb:	c3                   	ret    

c000bdcc <int_handler>:
c000bdcc:	55                   	push   ebp
c000bdcd:	57                   	push   edi
c000bdce:	56                   	push   esi
c000bdcf:	53                   	push   ebx
c000bdd0:	83 ec 0c             	sub    esp,0xc
c000bdd3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000bdd7:	80 3d 58 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f58,0x0
c000bdde:	74 0b                	je     c000bdeb <int_handler+0x1f>
c000bde0:	fa                   	cli    
c000bde1:	f4                   	hlt    
c000bde2:	80 3d 58 2f 02 c0 00 	cmp    BYTE PTR ds:0xc0022f58,0x0
c000bde9:	75 f5                	jne    c000bde0 <int_handler+0x14>
c000bdeb:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000bdee:	8d 46 e0             	lea    eax,[esi-0x20]
c000bdf1:	83 f8 17             	cmp    eax,0x17
c000bdf4:	76 3e                	jbe    c000be34 <int_handler+0x68>
c000bdf6:	c1 e6 04             	shl    esi,0x4
c000bdf9:	31 db                	xor    ebx,ebx
c000bdfb:	8d ae e0 15 02 c0    	lea    ebp,[esi-0x3ffdea20]
c000be01:	81 c6 e0 05 02 c0    	add    esi,0xc00205e0
c000be07:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000be0b:	85 c0                	test   eax,eax
c000be0d:	74 13                	je     c000be22 <int_handler+0x56>
c000be0f:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000be12:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000be16:	74 2a                	je     c000be42 <int_handler+0x76>
c000be18:	83 ec 08             	sub    esp,0x8
c000be1b:	52                   	push   edx
c000be1c:	57                   	push   edi
c000be1d:	ff d0                	call   eax
c000be1f:	83 c4 10             	add    esp,0x10
c000be22:	43                   	inc    ebx
c000be23:	83 fb 04             	cmp    ebx,0x4
c000be26:	75 df                	jne    c000be07 <int_handler+0x3b>
c000be28:	83 c4 0c             	add    esp,0xc
c000be2b:	31 c0                	xor    eax,eax
c000be2d:	5b                   	pop    ebx
c000be2e:	31 d2                	xor    edx,edx
c000be30:	5e                   	pop    esi
c000be31:	5f                   	pop    edi
c000be32:	5d                   	pop    ebp
c000be33:	c3                   	ret    
c000be34:	83 ec 0c             	sub    esp,0xc
c000be37:	50                   	push   eax
c000be38:	e8 36 96 00 00       	call   c0015473 <HalEndOfInterrupt(int)>
c000be3d:	83 c4 10             	add    esp,0x10
c000be40:	eb b4                	jmp    c000bdf6 <int_handler+0x2a>
c000be42:	83 ec 08             	sub    esp,0x8
c000be45:	52                   	push   edx
c000be46:	57                   	push   edi
c000be47:	ff d0                	call   eax
c000be49:	83 c4 10             	add    esp,0x10
c000be4c:	83 c4 0c             	add    esp,0xc
c000be4f:	5b                   	pop    ebx
c000be50:	5e                   	pop    esi
c000be51:	5f                   	pop    edi
c000be52:	5d                   	pop    ebp
c000be53:	c3                   	ret    

c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000be54:	56                   	push   esi
c000be55:	31 c0                	xor    eax,eax
c000be57:	53                   	push   ebx
c000be58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000be5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be60:	89 ca                	mov    edx,ecx
c000be62:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be66:	c1 e2 04             	shl    edx,0x4
c000be69:	83 bc 82 e0 15 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdea20],0x0
c000be71:	74 15                	je     c000be88 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000be73:	40                   	inc    eax
c000be74:	83 f8 04             	cmp    eax,0x4
c000be77:	75 f0                	jne    c000be69 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000be79:	c7 44 24 0c 24 db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001db24
c000be81:	5b                   	pop    ebx
c000be82:	5e                   	pop    esi
c000be83:	e9 d3 42 00 00       	jmp    c001015b <KePanic(char const*)>
c000be88:	8d 04 88             	lea    eax,[eax+ecx*4]
c000be8b:	89 1c 85 e0 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdea20],ebx
c000be92:	89 34 85 e0 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa20],esi
c000be99:	5b                   	pop    ebx
c000be9a:	5e                   	pop    esi
c000be9b:	c3                   	ret    

c000be9c <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000be9c:	57                   	push   edi
c000be9d:	8b 15 d8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204d8
c000bea3:	56                   	push   esi
c000bea4:	53                   	push   ebx
c000bea5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bea9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bead:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000beb4:	74 5b                	je     c000bf11 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000beb6:	89 c7                	mov    edi,eax
c000beb8:	84 c0                	test   al,al
c000beba:	74 24                	je     c000bee0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bebc:	83 fe 0f             	cmp    esi,0xf
c000bebf:	0f 8f d9 00 00 00    	jg     c000bf9e <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000bec5:	8a 86 00 f2 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0e00]
c000becb:	25 ff 00 00 00       	and    eax,0xff
c000bed0:	66 8b bc 00 80 2d 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdd280]
c000bed8:	89 c6                	mov    esi,eax
c000beda:	66 d1 ef             	shr    di,1
c000bedd:	83 e7 01             	and    edi,0x1
c000bee0:	83 ec 08             	sub    esp,0x8
c000bee3:	a1 80 41 02 c0       	mov    eax,ds:0xc0024180
c000bee8:	31 db                	xor    ebx,ebx
c000beea:	50                   	push   eax
c000beeb:	68 31 db 01 c0       	push   0xc001db31
c000bef0:	e8 eb e5 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000bef5:	83 c4 10             	add    esp,0x10
c000bef8:	a1 80 41 02 c0       	mov    eax,ds:0xc0024180
c000befd:	85 c0                	test   eax,eax
c000beff:	7f 51                	jg     c000bf52 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000bf01:	83 ec 0c             	sub    esp,0xc
c000bf04:	68 48 db 01 c0       	push   0xc001db48
c000bf09:	e8 4d 42 00 00       	call   c001015b <KePanic(char const*)>
c000bf0e:	83 c4 10             	add    esp,0x10
c000bf11:	8d 4e 20             	lea    ecx,[esi+0x20]
c000bf14:	31 d2                	xor    edx,edx
c000bf16:	89 c8                	mov    eax,ecx
c000bf18:	c1 e0 04             	shl    eax,0x4
c000bf1b:	8b 9c 90 e0 15 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdea20]
c000bf22:	85 db                	test   ebx,ebx
c000bf24:	0f 84 8b 00 00 00    	je     c000bfb5 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000bf2a:	42                   	inc    edx
c000bf2b:	83 fa 04             	cmp    edx,0x4
c000bf2e:	75 eb                	jne    c000bf1b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000bf30:	83 ec 0c             	sub    esp,0xc
c000bf33:	68 9c db 01 c0       	push   0xc001db9c
c000bf38:	e8 1e 42 00 00       	call   c001015b <KePanic(char const*)>
c000bf3d:	83 c4 10             	add    esp,0x10
c000bf40:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000bf45:	5b                   	pop    ebx
c000bf46:	5e                   	pop    esi
c000bf47:	5f                   	pop    edi
c000bf48:	c3                   	ret    
c000bf49:	43                   	inc    ebx
c000bf4a:	39 1d 80 41 02 c0    	cmp    DWORD PTR ds:0xc0024180,ebx
c000bf50:	7e af                	jle    c000bf01 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000bf52:	83 ec 08             	sub    esp,0x8
c000bf55:	8b 04 9d a0 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbe60]
c000bf5c:	56                   	push   esi
c000bf5d:	50                   	push   eax
c000bf5e:	e8 fd f1 00 00       	call   c001b160 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000bf63:	83 c4 10             	add    esp,0x10
c000bf66:	84 c0                	test   al,al
c000bf68:	74 df                	je     c000bf49 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000bf6a:	81 e7 ff 00 00 00    	and    edi,0xff
c000bf70:	50                   	push   eax
c000bf71:	8d 46 20             	lea    eax,[esi+0x20]
c000bf74:	57                   	push   edi
c000bf75:	25 ff 00 00 00       	and    eax,0xff
c000bf7a:	6a 00                	push   0x0
c000bf7c:	50                   	push   eax
c000bf7d:	89 f0                	mov    eax,esi
c000bf7f:	6a 00                	push   0x0
c000bf81:	25 ff 00 00 00       	and    eax,0xff
c000bf86:	6a 00                	push   0x0
c000bf88:	50                   	push   eax
c000bf89:	8b 04 9d a0 41 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbe60]
c000bf90:	50                   	push   eax
c000bf91:	e8 44 f3 00 00       	call   c001b2da <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000bf96:	83 c4 20             	add    esp,0x20
c000bf99:	e9 73 ff ff ff       	jmp    c000bf11 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000bf9e:	83 ec 0c             	sub    esp,0xc
c000bfa1:	31 ff                	xor    edi,edi
c000bfa3:	68 64 db 01 c0       	push   0xc001db64
c000bfa8:	e8 ae 41 00 00       	call   c001015b <KePanic(char const*)>
c000bfad:	83 c4 10             	add    esp,0x10
c000bfb0:	e9 2b ff ff ff       	jmp    c000bee0 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000bfb5:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000bfb8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bfbc:	89 14 85 e0 15 02 c0 	mov    DWORD PTR [eax*4-0x3ffdea20],edx
c000bfc3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bfc7:	5b                   	pop    ebx
c000bfc8:	89 14 85 e0 05 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfa20],edx
c000bfcf:	89 f0                	mov    eax,esi
c000bfd1:	5e                   	pop    esi
c000bfd2:	5f                   	pop    edi
c000bfd3:	c3                   	ret    

c000bfd4 <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000bfd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bfd8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000bfdc:	c1 e0 04             	shl    eax,0x4
c000bfdf:	8d 50 10             	lea    edx,[eax+0x10]
c000bfe2:	39 88 e0 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdea20],ecx
c000bfe8:	74 08                	je     c000bff2 <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000bfea:	83 c0 04             	add    eax,0x4
c000bfed:	39 d0                	cmp    eax,edx
c000bfef:	75 f1                	jne    c000bfe2 <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000bff1:	c3                   	ret    
c000bff2:	c7 80 e0 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea20],0x0
c000bffc:	c7 80 e0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa20],0x0
c000c006:	eb e2                	jmp    c000bfea <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c008 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c008:	53                   	push   ebx
c000c009:	83 ec 08             	sub    esp,0x8
c000c00c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c010:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c015:	74 0e                	je     c000c025 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c017:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000c01c:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c023:	75 37                	jne    c000c05c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c029:	83 c0 20             	add    eax,0x20
c000c02c:	c1 e0 04             	shl    eax,0x4
c000c02f:	8d 50 10             	lea    edx,[eax+0x10]
c000c032:	39 98 e0 15 02 c0    	cmp    DWORD PTR [eax-0x3ffdea20],ebx
c000c038:	74 0c                	je     c000c046 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c03a:	83 c0 04             	add    eax,0x4
c000c03d:	39 d0                	cmp    eax,edx
c000c03f:	75 f1                	jne    c000c032 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c041:	83 c4 08             	add    esp,0x8
c000c044:	5b                   	pop    ebx
c000c045:	c3                   	ret    
c000c046:	c7 80 e0 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea20],0x0
c000c050:	c7 80 e0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa20],0x0
c000c05a:	eb de                	jmp    c000c03a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c05c:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c061:	7f 12                	jg     c000c075 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c063:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c067:	31 c0                	xor    eax,eax
c000c069:	8a 81 00 f2 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0e00]
c000c06f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c073:	eb b0                	jmp    c000c025 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c075:	83 ec 0c             	sub    esp,0xc
c000c078:	68 55 db 01 c0       	push   0xc001db55
c000c07d:	e8 d9 40 00 00       	call   c001015b <KePanic(char const*)>
c000c082:	83 c4 10             	add    esp,0x10
c000c085:	eb 9e                	jmp    c000c025 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c087 <setupINTS()>:
c000c087:	31 c0                	xor    eax,eax
c000c089:	c7 80 e0 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea20],0x0
c000c093:	c7 80 e0 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa20],0x0
c000c09d:	c7 80 e4 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea1c],0x0
c000c0a7:	c7 80 e4 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa1c],0x0
c000c0b1:	c7 80 e8 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea18],0x0
c000c0bb:	c7 80 e8 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa18],0x0
c000c0c5:	c7 80 ec 15 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdea14],0x0
c000c0cf:	c7 80 ec 05 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfa14],0x0
c000c0d9:	83 c0 10             	add    eax,0x10
c000c0dc:	3d 00 10 00 00       	cmp    eax,0x1000
c000c0e1:	75 a6                	jne    c000c089 <setupINTS()+0x2>
c000c0e3:	c3                   	ret    

c000c0e4 <convertLegacyIRQNumber(int)>:
c000c0e4:	83 ec 0c             	sub    esp,0xc
c000c0e7:	8b 15 d8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204d8
c000c0ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c0f1:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c0f8:	74 0f                	je     c000c109 <convertLegacyIRQNumber(int)+0x25>
c000c0fa:	83 f8 0f             	cmp    eax,0xf
c000c0fd:	7f 0e                	jg     c000c10d <convertLegacyIRQNumber(int)+0x29>
c000c0ff:	31 c9                	xor    ecx,ecx
c000c101:	8a 88 00 f2 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0e00]
c000c107:	89 c8                	mov    eax,ecx
c000c109:	83 c4 0c             	add    esp,0xc
c000c10c:	c3                   	ret    
c000c10d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c111:	83 ec 0c             	sub    esp,0xc
c000c114:	68 64 db 01 c0       	push   0xc001db64
c000c119:	e8 3d 40 00 00       	call   c001015b <KePanic(char const*)>
c000c11e:	83 c4 10             	add    esp,0x10
c000c121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c125:	83 c4 0c             	add    esp,0xc
c000c128:	c3                   	ret    
c000c129:	90                   	nop

c000c12a <startGUI(void*)>:
c000c12a:	55                   	push   ebp
c000c12b:	89 e5                	mov    ebp,esp
c000c12d:	53                   	push   ebx
c000c12e:	83 ec 04             	sub    esp,0x4
c000c131:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c136:	48                   	dec    eax
c000c137:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c13c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c141:	85 c0                	test   eax,eax
c000c143:	75 01                	jne    c000c146 <startGUI(void*)+0x1c>
c000c145:	fb                   	sti    
c000c146:	8b 1d d8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204d8
c000c14c:	83 ec 08             	sub    esp,0x8
c000c14f:	6a 01                	push   0x1
c000c151:	68 c1 db 01 c0       	push   0xc001dbc1
c000c156:	e8 1f 68 00 00       	call   c001297a <Thr::loadDLL(char const*, bool)>
c000c15b:	83 c4 10             	add    esp,0x10
c000c15e:	83 ec 08             	sub    esp,0x8
c000c161:	53                   	push   ebx
c000c162:	50                   	push   eax
c000c163:	e8 43 6a 00 00       	call   c0012bab <Thr::executeDLL(unsigned long, void*)>
c000c168:	83 c4 10             	add    esp,0x10
c000c16b:	8b 1d d8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204d8
c000c171:	83 ec 08             	sub    esp,0x8
c000c174:	6a 01                	push   0x1
c000c176:	68 db db 01 c0       	push   0xc001dbdb
c000c17b:	e8 fa 67 00 00       	call   c001297a <Thr::loadDLL(char const*, bool)>
c000c180:	83 c4 10             	add    esp,0x10
c000c183:	83 ec 08             	sub    esp,0x8
c000c186:	53                   	push   ebx
c000c187:	50                   	push   eax
c000c188:	e8 1e 6a 00 00       	call   c0012bab <Thr::executeDLL(unsigned long, void*)>
c000c18d:	83 c4 10             	add    esp,0x10
c000c190:	90                   	nop
c000c191:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c194:	c9                   	leave  
c000c195:	c3                   	ret    

c000c196 <startGUIVESA(void*)>:
c000c196:	55                   	push   ebp
c000c197:	89 e5                	mov    ebp,esp
c000c199:	53                   	push   ebx
c000c19a:	83 ec 04             	sub    esp,0x4
c000c19d:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c1a2:	48                   	dec    eax
c000c1a3:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c1a8:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c1ad:	85 c0                	test   eax,eax
c000c1af:	75 01                	jne    c000c1b2 <startGUIVESA(void*)+0x1c>
c000c1b1:	fb                   	sti    
c000c1b2:	8b 1d d8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204d8
c000c1b8:	83 ec 08             	sub    esp,0x8
c000c1bb:	6a 01                	push   0x1
c000c1bd:	68 f9 db 01 c0       	push   0xc001dbf9
c000c1c2:	e8 b3 67 00 00       	call   c001297a <Thr::loadDLL(char const*, bool)>
c000c1c7:	83 c4 10             	add    esp,0x10
c000c1ca:	83 ec 08             	sub    esp,0x8
c000c1cd:	53                   	push   ebx
c000c1ce:	50                   	push   eax
c000c1cf:	e8 d7 69 00 00       	call   c0012bab <Thr::executeDLL(unsigned long, void*)>
c000c1d4:	83 c4 10             	add    esp,0x10
c000c1d7:	8b 1d d8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204d8
c000c1dd:	83 ec 08             	sub    esp,0x8
c000c1e0:	6a 01                	push   0x1
c000c1e2:	68 db db 01 c0       	push   0xc001dbdb
c000c1e7:	e8 8e 67 00 00       	call   c001297a <Thr::loadDLL(char const*, bool)>
c000c1ec:	83 c4 10             	add    esp,0x10
c000c1ef:	83 ec 08             	sub    esp,0x8
c000c1f2:	53                   	push   ebx
c000c1f3:	50                   	push   eax
c000c1f4:	e8 b2 69 00 00       	call   c0012bab <Thr::executeDLL(unsigned long, void*)>
c000c1f9:	83 c4 10             	add    esp,0x10
c000c1fc:	90                   	nop
c000c1fd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c200:	c9                   	leave  
c000c201:	c3                   	ret    

c000c202 <sendKeyToTerminal(unsigned char)>:
c000c202:	55                   	push   ebp
c000c203:	89 e5                	mov    ebp,esp
c000c205:	83 ec 28             	sub    esp,0x28
c000c208:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c20b:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c20e:	8b 15 24 05 02 c0    	mov    edx,DWORD PTR ds:0xc0020524
c000c214:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c217:	25 ff 00 00 00       	and    eax,0xff
c000c21c:	83 ec 08             	sub    esp,0x8
c000c21f:	50                   	push   eax
c000c220:	52                   	push   edx
c000c221:	e8 28 c8 ff ff       	call   c0008a4e <VgaText::receiveKey(unsigned char)>
c000c226:	83 c4 10             	add    esp,0x10
c000c229:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c22d:	74 0a                	je     c000c239 <sendKeyToTerminal(unsigned char)+0x37>
c000c22f:	80 7d e4 03          	cmp    BYTE PTR [ebp-0x1c],0x3
c000c233:	0f 85 8f 00 00 00    	jne    c000c2c8 <sendKeyToTerminal(unsigned char)+0xc6>
c000c239:	fa                   	cli    
c000c23a:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c23f:	40                   	inc    eax
c000c240:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c245:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c000c24a:	40                   	inc    eax
c000c24b:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c000c250:	a1 e0 25 02 c0       	mov    eax,ds:0xc00225e0
c000c255:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c258:	c7 05 e0 25 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00225e0,0x0
c000c262:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c266:	74 1f                	je     c000c287 <sendKeyToTerminal(unsigned char)+0x85>
c000c268:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c26b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c26e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c271:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c274:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c277:	83 ec 0c             	sub    esp,0xc
c000c27a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c27d:	e8 c6 75 00 00       	call   c0013848 <unblockTask(ThreadControlBlock*)>
c000c282:	83 c4 10             	add    esp,0x10
c000c285:	eb db                	jmp    c000c262 <sendKeyToTerminal(unsigned char)+0x60>
c000c287:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c000c28c:	48                   	dec    eax
c000c28d:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c000c292:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c000c297:	85 c0                	test   eax,eax
c000c299:	75 18                	jne    c000c2b3 <sendKeyToTerminal(unsigned char)+0xb1>
c000c29b:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c000c2a0:	85 c0                	test   eax,eax
c000c2a2:	74 0f                	je     c000c2b3 <sendKeyToTerminal(unsigned char)+0xb1>
c000c2a4:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c000c2ae:	e8 d1 70 00 00       	call   c0013384 <schedule()>
c000c2b3:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c2b8:	48                   	dec    eax
c000c2b9:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c2be:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c2c3:	85 c0                	test   eax,eax
c000c2c5:	75 01                	jne    c000c2c8 <sendKeyToTerminal(unsigned char)+0xc6>
c000c2c7:	fb                   	sti    
c000c2c8:	90                   	nop
c000c2c9:	c9                   	leave  
c000c2ca:	c3                   	ret    

c000c2cb <sendKeyboardToken(KeyboardToken)>:
c000c2cb:	55                   	push   ebp
c000c2cc:	89 e5                	mov    ebp,esp
c000c2ce:	83 ec 18             	sub    esp,0x18
c000c2d1:	e8 d5 3e 00 00       	call   c00101ab <Krnl::userIOReceived()>
c000c2d6:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c2d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2dc:	25 ff ff 00 00       	and    eax,0xffff
c000c2e1:	83 f2 01             	xor    edx,0x1
c000c2e4:	88 90 00 26 02 c0    	mov    BYTE PTR [eax-0x3ffdda00],dl
c000c2ea:	a1 e8 25 02 c0       	mov    eax,ds:0xc00225e8
c000c2ef:	85 c0                	test   eax,eax
c000c2f1:	74 24                	je     c000c317 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c2f3:	8b 0d e8 25 02 c0    	mov    ecx,DWORD PTR ds:0xc00225e8
c000c2f9:	83 ec 04             	sub    esp,0x4
c000c2fc:	68 00 26 02 c0       	push   0xc0022600
c000c301:	83 ec 08             	sub    esp,0x8
c000c304:	89 e2                	mov    edx,esp
c000c306:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c309:	89 02                	mov    DWORD PTR [edx],eax
c000c30b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c30e:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c312:	ff d1                	call   ecx
c000c314:	83 c4 10             	add    esp,0x10
c000c317:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c31b:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c31e:	a0 08 2a 02 c0       	mov    al,ds:0xc0022a08
c000c323:	38 c2                	cmp    dl,al
c000c325:	74 1e                	je     c000c345 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c327:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c32a:	a2 08 2a 02 c0       	mov    ds:0xc0022a08,al
c000c32f:	a0 08 2a 02 c0       	mov    al,ds:0xc0022a08
c000c334:	25 ff 00 00 00       	and    eax,0xff
c000c339:	83 ec 0c             	sub    esp,0xc
c000c33c:	50                   	push   eax
c000c33d:	e8 56 be ff ff       	call   c0008198 <setTerminalScrollLock(bool)>
c000c342:	83 c4 10             	add    esp,0x10
c000c345:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c348:	84 c0                	test   al,al
c000c34a:	0f 84 ae 00 00 00    	je     c000c3fe <sendKeyboardToken(KeyboardToken)+0x133>
c000c350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c353:	66 3d 10 03          	cmp    ax,0x310
c000c357:	75 06                	jne    c000c35f <sendKeyboardToken(KeyboardToken)+0x94>
c000c359:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c35f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c362:	66 3d 11 03          	cmp    ax,0x311
c000c366:	75 06                	jne    c000c36e <sendKeyboardToken(KeyboardToken)+0xa3>
c000c368:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c36e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c371:	66 3d 12 03          	cmp    ax,0x312
c000c375:	75 06                	jne    c000c37d <sendKeyboardToken(KeyboardToken)+0xb2>
c000c377:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c37d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c380:	66 3d 13 03          	cmp    ax,0x313
c000c384:	75 06                	jne    c000c38c <sendKeyboardToken(KeyboardToken)+0xc1>
c000c386:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c38c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c38f:	66 3d 14 03          	cmp    ax,0x314
c000c393:	75 06                	jne    c000c39b <sendKeyboardToken(KeyboardToken)+0xd0>
c000c395:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c39b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c39e:	66 3d 15 03          	cmp    ax,0x315
c000c3a2:	75 06                	jne    c000c3aa <sendKeyboardToken(KeyboardToken)+0xdf>
c000c3a4:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c3aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3ad:	66 3d 16 03          	cmp    ax,0x316
c000c3b1:	75 06                	jne    c000c3b9 <sendKeyboardToken(KeyboardToken)+0xee>
c000c3b3:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c3b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3bc:	66 3d 17 03          	cmp    ax,0x317
c000c3c0:	75 06                	jne    c000c3c8 <sendKeyboardToken(KeyboardToken)+0xfd>
c000c3c2:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c3c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3cb:	66 3d 18 03          	cmp    ax,0x318
c000c3cf:	75 06                	jne    c000c3d7 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c3d1:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c3d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3da:	66 3d 19 03          	cmp    ax,0x319
c000c3de:	75 06                	jne    c000c3e6 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c3e0:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c3e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c3e9:	66 3d 1a 03          	cmp    ax,0x31a
c000c3ed:	0f 85 c9 00 00 00    	jne    c000c4bc <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3f3:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c3f9:	e9 be 00 00 00       	jmp    c000c4bc <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c3fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c401:	66 3d 10 03          	cmp    ax,0x310
c000c405:	75 0a                	jne    c000c411 <sendKeyboardToken(KeyboardToken)+0x146>
c000c407:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c40d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c414:	66 3d 11 03          	cmp    ax,0x311
c000c418:	75 0a                	jne    c000c424 <sendKeyboardToken(KeyboardToken)+0x159>
c000c41a:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c420:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c427:	66 3d 12 03          	cmp    ax,0x312
c000c42b:	75 0a                	jne    c000c437 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c42d:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c433:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c43a:	66 3d 13 03          	cmp    ax,0x313
c000c43e:	75 0a                	jne    c000c44a <sendKeyboardToken(KeyboardToken)+0x17f>
c000c440:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c446:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c44a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c44d:	66 3d 14 03          	cmp    ax,0x314
c000c451:	75 0a                	jne    c000c45d <sendKeyboardToken(KeyboardToken)+0x192>
c000c453:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c459:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c45d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c460:	66 3d 15 03          	cmp    ax,0x315
c000c464:	75 0a                	jne    c000c470 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c466:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c46c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c473:	66 3d 16 03          	cmp    ax,0x316
c000c477:	75 0a                	jne    c000c483 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c479:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c47f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c486:	66 3d 17 03          	cmp    ax,0x317
c000c48a:	75 0a                	jne    c000c496 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c48c:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c492:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c496:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c499:	66 3d 18 03          	cmp    ax,0x318
c000c49d:	75 0a                	jne    c000c4a9 <sendKeyboardToken(KeyboardToken)+0x1de>
c000c49f:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c4a5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4ac:	66 3d 19 03          	cmp    ax,0x319
c000c4b0:	75 0a                	jne    c000c4bc <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c4b2:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c4b8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c4bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4bf:	66 3d 00 02          	cmp    ax,0x200
c000c4c3:	75 2c                	jne    c000c4f1 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4c5:	a0 00 2a 02 c0       	mov    al,ds:0xc0022a00
c000c4ca:	83 f0 01             	xor    eax,0x1
c000c4cd:	84 c0                	test   al,al
c000c4cf:	74 20                	je     c000c4f1 <sendKeyboardToken(KeyboardToken)+0x226>
c000c4d1:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c000c4d6:	6a 01                	push   0x1
c000c4d8:	6a 00                	push   0x0
c000c4da:	68 2a c1 00 c0       	push   0xc000c12a
c000c4df:	50                   	push   eax
c000c4e0:	e8 7f 6c 00 00       	call   c0013164 <Process::createThread(void (*)(void*), void*, int)>
c000c4e5:	83 c4 10             	add    esp,0x10
c000c4e8:	c6 05 00 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a00,0x1
c000c4ef:	eb 33                	jmp    c000c524 <sendKeyboardToken(KeyboardToken)+0x259>
c000c4f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c4f4:	66 3d 01 02          	cmp    ax,0x201
c000c4f8:	75 2a                	jne    c000c524 <sendKeyboardToken(KeyboardToken)+0x259>
c000c4fa:	a0 00 2a 02 c0       	mov    al,ds:0xc0022a00
c000c4ff:	83 f0 01             	xor    eax,0x1
c000c502:	84 c0                	test   al,al
c000c504:	74 1e                	je     c000c524 <sendKeyboardToken(KeyboardToken)+0x259>
c000c506:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c000c50b:	6a 01                	push   0x1
c000c50d:	6a 00                	push   0x0
c000c50f:	68 96 c1 00 c0       	push   0xc000c196
c000c514:	50                   	push   eax
c000c515:	e8 4a 6c 00 00       	call   c0013164 <Process::createThread(void (*)(void*), void*, int)>
c000c51a:	83 c4 10             	add    esp,0x10
c000c51d:	c6 05 00 2a 02 c0 01 	mov    BYTE PTR ds:0xc0022a00,0x1
c000c524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c527:	66 3d 1d 03          	cmp    ax,0x31d
c000c52b:	75 06                	jne    c000c533 <sendKeyboardToken(KeyboardToken)+0x268>
c000c52d:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c536:	66 3d 1c 03          	cmp    ax,0x31c
c000c53a:	75 06                	jne    c000c542 <sendKeyboardToken(KeyboardToken)+0x277>
c000c53c:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c542:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c545:	66 3d 1b 03          	cmp    ax,0x31b
c000c549:	75 06                	jne    c000c551 <sendKeyboardToken(KeyboardToken)+0x286>
c000c54b:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c554:	66 3d 1e 03          	cmp    ax,0x31e
c000c558:	75 06                	jne    c000c560 <sendKeyboardToken(KeyboardToken)+0x295>
c000c55a:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c560:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c563:	66 3d 1f 03          	cmp    ax,0x31f
c000c567:	75 06                	jne    c000c56f <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c569:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c56f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c572:	66 3d 1a 03          	cmp    ax,0x31a
c000c576:	75 06                	jne    c000c57e <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c578:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c57e:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c582:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c585:	83 f0 01             	xor    eax,0x1
c000c588:	84 c0                	test   al,al
c000c58a:	74 7b                	je     c000c607 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c58c:	a0 01 27 02 c0       	mov    al,ds:0xc0022701
c000c591:	84 c0                	test   al,al
c000c593:	74 43                	je     c000c5d8 <sendKeyboardToken(KeyboardToken)+0x30d>
c000c595:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c599:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c59d:	74 2d                	je     c000c5cc <sendKeyboardToken(KeyboardToken)+0x301>
c000c59f:	8b 15 04 2a 02 c0    	mov    edx,DWORD PTR ds:0xc0022a04
c000c5a5:	89 d0                	mov    eax,edx
c000c5a7:	c1 e0 02             	shl    eax,0x2
c000c5aa:	01 d0                	add    eax,edx
c000c5ac:	01 c0                	add    eax,eax
c000c5ae:	a3 04 2a 02 c0       	mov    ds:0xc0022a04,eax
c000c5b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b6:	25 ff ff 00 00       	and    eax,0xffff
c000c5bb:	8d 50 d0             	lea    edx,[eax-0x30]
c000c5be:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c000c5c3:	01 d0                	add    eax,edx
c000c5c5:	a3 04 2a 02 c0       	mov    ds:0xc0022a04,eax
c000c5ca:	eb 71                	jmp    c000c63d <sendKeyboardToken(KeyboardToken)+0x372>
c000c5cc:	c7 05 04 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a04,0x0
c000c5d6:	eb 65                	jmp    c000c63d <sendKeyboardToken(KeyboardToken)+0x372>
c000c5d8:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c000c5dd:	85 c0                	test   eax,eax
c000c5df:	74 1a                	je     c000c5fb <sendKeyboardToken(KeyboardToken)+0x330>
c000c5e1:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c000c5e6:	25 ff 00 00 00       	and    eax,0xff
c000c5eb:	83 ec 0c             	sub    esp,0xc
c000c5ee:	50                   	push   eax
c000c5ef:	e8 0e fc ff ff       	call   c000c202 <sendKeyToTerminal(unsigned char)>
c000c5f4:	83 c4 10             	add    esp,0x10
c000c5f7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c5fb:	c7 05 04 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a04,0x0
c000c605:	eb 36                	jmp    c000c63d <sendKeyboardToken(KeyboardToken)+0x372>
c000c607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c60a:	66 3d 01 01          	cmp    ax,0x101
c000c60e:	75 2d                	jne    c000c63d <sendKeyboardToken(KeyboardToken)+0x372>
c000c610:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c000c615:	85 c0                	test   eax,eax
c000c617:	74 1a                	je     c000c633 <sendKeyboardToken(KeyboardToken)+0x368>
c000c619:	a1 04 2a 02 c0       	mov    eax,ds:0xc0022a04
c000c61e:	25 ff 00 00 00       	and    eax,0xff
c000c623:	83 ec 0c             	sub    esp,0xc
c000c626:	50                   	push   eax
c000c627:	e8 d6 fb ff ff       	call   c000c202 <sendKeyToTerminal(unsigned char)>
c000c62c:	83 c4 10             	add    esp,0x10
c000c62f:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c633:	c7 05 04 2a 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022a04,0x0
c000c63d:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c640:	83 f0 01             	xor    eax,0x1
c000c643:	84 c0                	test   al,al
c000c645:	74 4e                	je     c000c695 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c647:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c64a:	83 f0 01             	xor    eax,0x1
c000c64d:	84 c0                	test   al,al
c000c64f:	74 44                	je     c000c695 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c651:	a0 00 27 02 c0       	mov    al,ds:0xc0022700
c000c656:	83 f0 01             	xor    eax,0x1
c000c659:	84 c0                	test   al,al
c000c65b:	74 38                	je     c000c695 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c660:	66 83 f8 1f          	cmp    ax,0x1f
c000c664:	76 09                	jbe    c000c66f <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c669:	66 83 f8 7e          	cmp    ax,0x7e
c000c66d:	76 12                	jbe    c000c681 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c66f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c672:	66 83 f8 0a          	cmp    ax,0xa
c000c676:	74 09                	je     c000c681 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c678:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67b:	66 83 f8 08          	cmp    ax,0x8
c000c67f:	75 14                	jne    c000c695 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c681:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c684:	25 ff 00 00 00       	and    eax,0xff
c000c689:	83 ec 0c             	sub    esp,0xc
c000c68c:	50                   	push   eax
c000c68d:	e8 70 fb ff ff       	call   c000c202 <sendKeyToTerminal(unsigned char)>
c000c692:	83 c4 10             	add    esp,0x10
c000c695:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c698:	83 f0 01             	xor    eax,0x1
c000c69b:	84 c0                	test   al,al
c000c69d:	74 51                	je     c000c6f0 <sendKeyboardToken(KeyboardToken)+0x425>
c000c69f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6a2:	83 f0 01             	xor    eax,0x1
c000c6a5:	84 c0                	test   al,al
c000c6a7:	74 47                	je     c000c6f0 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6a9:	a0 00 27 02 c0       	mov    al,ds:0xc0022700
c000c6ae:	84 c0                	test   al,al
c000c6b0:	74 3e                	je     c000c6f0 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b5:	66 83 f8 3f          	cmp    ax,0x3f
c000c6b9:	76 35                	jbe    c000c6f0 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6be:	66 83 f8 7f          	cmp    ax,0x7f
c000c6c2:	77 2c                	ja     c000c6f0 <sendKeyboardToken(KeyboardToken)+0x425>
c000c6c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c7:	88 c2                	mov    dl,al
c000c6c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6cc:	66 83 f8 5f          	cmp    ax,0x5f
c000c6d0:	76 04                	jbe    c000c6d6 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c6d2:	b0 20                	mov    al,0x20
c000c6d4:	eb 02                	jmp    c000c6d8 <sendKeyboardToken(KeyboardToken)+0x40d>
c000c6d6:	b0 00                	mov    al,0x0
c000c6d8:	29 c2                	sub    edx,eax
c000c6da:	88 d0                	mov    al,dl
c000c6dc:	83 e8 40             	sub    eax,0x40
c000c6df:	25 ff 00 00 00       	and    eax,0xff
c000c6e4:	83 ec 0c             	sub    esp,0xc
c000c6e7:	50                   	push   eax
c000c6e8:	e8 15 fb ff ff       	call   c000c202 <sendKeyToTerminal(unsigned char)>
c000c6ed:	83 c4 10             	add    esp,0x10
c000c6f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6f3:	66 3d 00 03          	cmp    ax,0x300
c000c6f7:	75 0f                	jne    c000c708 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c6f9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c6fc:	83 f0 01             	xor    eax,0x1
c000c6ff:	84 c0                	test   al,al
c000c701:	74 05                	je     c000c708 <sendKeyboardToken(KeyboardToken)+0x43d>
c000c703:	e8 91 ba ff ff       	call   c0008199 <doTerminalCycle()>
c000c708:	90                   	nop
c000c709:	c9                   	leave  
c000c70a:	c3                   	ret    

c000c70b <clearInternalKeybuffer(VgaText*)>:
c000c70b:	55                   	push   ebp
c000c70c:	89 e5                	mov    ebp,esp
c000c70e:	83 ec 08             	sub    esp,0x8
c000c711:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c714:	05 b2 00 00 00       	add    eax,0xb2
c000c719:	83 ec 0c             	sub    esp,0xc
c000c71c:	50                   	push   eax
c000c71d:	e8 1e 3e ff ff       	call   c0000540 <strlen>
c000c722:	83 c4 10             	add    esp,0x10
c000c725:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c728:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c72e:	83 ec 04             	sub    esp,0x4
c000c731:	50                   	push   eax
c000c732:	6a 00                	push   0x0
c000c734:	52                   	push   edx
c000c735:	e8 96 3d ff ff       	call   c00004d0 <memset>
c000c73a:	83 c4 10             	add    esp,0x10
c000c73d:	90                   	nop
c000c73e:	c9                   	leave  
c000c73f:	c3                   	ret    

c000c740 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c740:	55                   	push   ebp
c000c741:	89 e5                	mov    ebp,esp
c000c743:	83 ec 18             	sub    esp,0x18
c000c746:	a1 e8 25 02 c0       	mov    eax,ds:0xc00225e8
c000c74b:	85 c0                	test   eax,eax
c000c74d:	74 2a                	je     c000c779 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c74f:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c755:	8b 0d e8 25 02 c0    	mov    ecx,DWORD PTR ds:0xc00225e8
c000c75b:	83 ec 04             	sub    esp,0x4
c000c75e:	68 00 26 02 c0       	push   0xc0022600
c000c763:	83 ec 08             	sub    esp,0x8
c000c766:	89 e2                	mov    edx,esp
c000c768:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c76b:	89 02                	mov    DWORD PTR [edx],eax
c000c76d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c770:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c774:	ff d1                	call   ecx
c000c776:	83 c4 10             	add    esp,0x10
c000c779:	fb                   	sti    
c000c77a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c781:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c785:	0f 84 b4 00 00 00    	je     c000c83f <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c000c78b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c78e:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c794:	84 c0                	test   al,al
c000c796:	75 28                	jne    c000c7c0 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c798:	fa                   	cli    
c000c799:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c79e:	40                   	inc    eax
c000c79f:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c7a4:	e8 db 6b 00 00       	call   c0013384 <schedule()>
c000c7a9:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c7ae:	48                   	dec    eax
c000c7af:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000c7b4:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000c7b9:	85 c0                	test   eax,eax
c000c7bb:	75 ce                	jne    c000c78b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7bd:	fb                   	sti    
c000c7be:	eb cb                	jmp    c000c78b <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c7c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c7c3:	8d 50 01             	lea    edx,[eax+0x1]
c000c7c6:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c7c9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c7cc:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000c7d2:	88 10                	mov    BYTE PTR [eax],dl
c000c7d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7d7:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c7dd:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000c7e0:	80 7d f3 03          	cmp    BYTE PTR [ebp-0xd],0x3
c000c7e4:	75 0d                	jne    c000c7f3 <readKeyboard(VgaText*, char*, unsigned long)+0xb3>
c000c7e6:	83 ec 0c             	sub    esp,0xc
c000c7e9:	6a ff                	push   0xffffffff
c000c7eb:	e8 b8 74 00 00       	call   c0013ca8 <terminateTask(int)>
c000c7f0:	83 c4 10             	add    esp,0x10
c000c7f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f6:	05 b2 00 00 00       	add    eax,0xb2
c000c7fb:	83 ec 0c             	sub    esp,0xc
c000c7fe:	50                   	push   eax
c000c7ff:	e8 3c 3d ff ff       	call   c0000540 <strlen>
c000c804:	83 c4 10             	add    esp,0x10
c000c807:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c80a:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c810:	8d 4a 01             	lea    ecx,[edx+0x1]
c000c813:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c816:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c81c:	83 ec 04             	sub    esp,0x4
c000c81f:	50                   	push   eax
c000c820:	51                   	push   ecx
c000c821:	52                   	push   edx
c000c822:	e8 b9 3b ff ff       	call   c00003e0 <memmove>
c000c827:	83 c4 10             	add    esp,0x10
c000c82a:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000c82d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000c830:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000c834:	0f 85 47 ff ff ff    	jne    c000c781 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000c83a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c83d:	eb 03                	jmp    c000c842 <readKeyboard(VgaText*, char*, unsigned long)+0x102>
c000c83f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c842:	c9                   	leave  
c000c843:	c3                   	ret    

c000c844 <Keyboard::Keyboard(char const*)>:
c000c844:	83 ec 0c             	sub    esp,0xc
c000c847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c84b:	83 ec 08             	sub    esp,0x8
c000c84e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c852:	50                   	push   eax
c000c853:	e8 60 f2 ff ff       	call   c000bab8 <Device::Device(char const*)>
c000c858:	83 c4 10             	add    esp,0x10
c000c85b:	ba 1c dc 01 c0       	mov    edx,0xc001dc1c
c000c860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c864:	89 10                	mov    DWORD PTR [eax],edx
c000c866:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c86a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000c874:	c6 05 e4 25 02 c0 01 	mov    BYTE PTR ds:0xc00225e4,0x1
c000c87b:	90                   	nop
c000c87c:	83 c4 0c             	add    esp,0xc
c000c87f:	c3                   	ret    

c000c880 <Keyboard::~Keyboard()>:
c000c880:	83 ec 0c             	sub    esp,0xc
c000c883:	ba 1c dc 01 c0       	mov    edx,0xc001dc1c
c000c888:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c88c:	89 10                	mov    DWORD PTR [eax],edx
c000c88e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c892:	83 ec 0c             	sub    esp,0xc
c000c895:	50                   	push   eax
c000c896:	e8 87 ef ff ff       	call   c000b822 <Device::~Device()>
c000c89b:	83 c4 10             	add    esp,0x10
c000c89e:	90                   	nop
c000c89f:	83 c4 0c             	add    esp,0xc
c000c8a2:	c3                   	ret    
c000c8a3:	90                   	nop

c000c8a4 <Keyboard::~Keyboard()>:
c000c8a4:	83 ec 0c             	sub    esp,0xc
c000c8a7:	83 ec 0c             	sub    esp,0xc
c000c8aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8ae:	e8 cd ff ff ff       	call   c000c880 <Keyboard::~Keyboard()>
c000c8b3:	83 c4 10             	add    esp,0x10
c000c8b6:	83 ec 08             	sub    esp,0x8
c000c8b9:	68 5c 01 00 00       	push   0x15c
c000c8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8c2:	e8 23 db ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	83 c4 0c             	add    esp,0xc
c000c8cd:	c3                   	ret    

c000c8ce <LogicalDisk::close(int, int, void*)>:
c000c8ce:	83 c8 ff             	or     eax,0xffffffff
c000c8d1:	c3                   	ret    

c000c8d2 <LogicalDisk::~LogicalDisk()>:
c000c8d2:	83 ec 0c             	sub    esp,0xc
c000c8d5:	ba 94 dc 01 c0       	mov    edx,0xc001dc94
c000c8da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8de:	89 10                	mov    DWORD PTR [eax],edx
c000c8e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8e4:	83 ec 0c             	sub    esp,0xc
c000c8e7:	50                   	push   eax
c000c8e8:	e8 35 ef ff ff       	call   c000b822 <Device::~Device()>
c000c8ed:	83 c4 10             	add    esp,0x10
c000c8f0:	90                   	nop
c000c8f1:	83 c4 0c             	add    esp,0xc
c000c8f4:	c3                   	ret    
c000c8f5:	90                   	nop

c000c8f6 <LogicalDisk::~LogicalDisk()>:
c000c8f6:	83 ec 0c             	sub    esp,0xc
c000c8f9:	83 ec 0c             	sub    esp,0xc
c000c8fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c900:	e8 cd ff ff ff       	call   c000c8d2 <LogicalDisk::~LogicalDisk()>
c000c905:	83 c4 10             	add    esp,0x10
c000c908:	83 ec 08             	sub    esp,0x8
c000c90b:	68 74 01 00 00       	push   0x174
c000c910:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c914:	e8 d1 da ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000c919:	83 c4 10             	add    esp,0x10
c000c91c:	83 c4 0c             	add    esp,0xc
c000c91f:	c3                   	ret    

c000c920 <LogicalDisk::open(int, int, void*)>:
c000c920:	83 ec 18             	sub    esp,0x18
c000c923:	68 48 dc 01 c0       	push   0xc001dc48
c000c928:	e8 2e 38 00 00       	call   c001015b <KePanic(char const*)>
c000c92d:	83 c8 ff             	or     eax,0xffffffff
c000c930:	83 c4 1c             	add    esp,0x1c
c000c933:	c3                   	ret    

c000c934 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000c934:	53                   	push   ebx
c000c935:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c939:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c93d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c941:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000c947:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000c94d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000c953:	77 10                	ja     c000c965 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000c955:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000c95b:	89 d3                	mov    ebx,edx
c000c95d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000c963:	72 05                	jb     c000c96a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000c965:	83 c8 ff             	or     eax,0xffffffff
c000c968:	89 c2                	mov    edx,eax
c000c96a:	5b                   	pop    ebx
c000c96b:	c3                   	ret    

c000c96c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000c96c:	56                   	push   esi
c000c96d:	83 c8 ff             	or     eax,0xffffffff
c000c970:	53                   	push   ebx
c000c971:	89 c2                	mov    edx,eax
c000c973:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c977:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000c97b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c97f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000c985:	77 27                	ja     c000c9ae <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c987:	89 d8                	mov    eax,ebx
c000c989:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000c98f:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000c995:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c99a:	89 c2                	mov    edx,eax
c000c99c:	73 10                	jae    c000c9ae <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000c99e:	89 c8                	mov    eax,ecx
c000c9a0:	89 da                	mov    edx,ebx
c000c9a2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000c9a8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000c9ae:	5b                   	pop    ebx
c000c9af:	5e                   	pop    esi
c000c9b0:	c3                   	ret    
c000c9b1:	90                   	nop

c000c9b2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000c9b2:	83 ec 1c             	sub    esp,0x1c
c000c9b5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000c9b9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9bd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c9c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c9c5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000c9c9:	89 04 24             	mov    DWORD PTR [esp],eax
c000c9cc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c9d0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c9d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9d8:	83 ec 08             	sub    esp,0x8
c000c9db:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c9df:	50                   	push   eax
c000c9e0:	e8 d3 f0 ff ff       	call   c000bab8 <Device::Device(char const*)>
c000c9e5:	83 c4 10             	add    esp,0x10
c000c9e8:	ba 94 dc 01 c0       	mov    edx,0xc001dc94
c000c9ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f1:	89 10                	mov    DWORD PTR [eax],edx
c000c9f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c9f7:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000c9fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca02:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca0d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000ca17:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ca1f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ca23:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000ca29:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000ca2f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000ca33:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ca36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000ca3a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000ca40:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000ca46:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca4a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000ca4e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000ca54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ca58:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000ca62:	90                   	nop
c000ca63:	83 c4 1c             	add    esp,0x1c
c000ca66:	c3                   	ret    
c000ca67:	90                   	nop

c000ca68 <LogicalDisk::assignDriveLetter()>:
c000ca68:	55                   	push   ebp
c000ca69:	57                   	push   edi
c000ca6a:	56                   	push   esi
c000ca6b:	53                   	push   ebx
c000ca6c:	83 ec 14             	sub    esp,0x14
c000ca6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ca73:	8b 3d 20 2a 02 c0    	mov    edi,DWORD PTR ds:0xc0022a20
c000ca79:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ca7f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ca83:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ca89:	8b 3d 24 2a 02 c0    	mov    edi,DWORD PTR ds:0xc0022a24
c000ca8f:	3c 01                	cmp    al,0x1
c000ca91:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ca95:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ca99:	19 c0                	sbb    eax,eax
c000ca9b:	83 e0 02             	and    eax,0x2
c000ca9e:	83 c0 41             	add    eax,0x41
c000caa1:	0f be e8             	movsx  ebp,al
c000caa4:	3c 43                	cmp    al,0x43
c000caa6:	75 10                	jne    c000cab8 <LogicalDisk::assignDriveLetter()+0x50>
c000caa8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000caaf:	75 5d                	jne    c000cb0e <LogicalDisk::assignDriveLetter()+0xa6>
c000cab1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cab6:	75 56                	jne    c000cb0e <LogicalDisk::assignDriveLetter()+0xa6>
c000cab8:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cabb:	ba 01 00 00 00       	mov    edx,0x1
c000cac0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000cac4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000cac8:	d3 e2                	shl    edx,cl
c000caca:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cace:	89 d7                	mov    edi,edx
c000cad0:	89 d6                	mov    esi,edx
c000cad2:	c1 ff 1f             	sar    edi,0x1f
c000cad5:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cad9:	21 f9                	and    ecx,edi
c000cadb:	09 d1                	or     ecx,edx
c000cadd:	75 2f                	jne    c000cb0e <LogicalDisk::assignDriveLetter()+0xa6>
c000cadf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cae3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cae7:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000caed:	09 f2                	or     edx,esi
c000caef:	89 15 20 2a 02 c0    	mov    DWORD PTR ds:0xc0022a20,edx
c000caf5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caf9:	09 fa                	or     edx,edi
c000cafb:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000caff:	89 15 24 2a 02 c0    	mov    DWORD PTR ds:0xc0022a24,edx
c000cb05:	89 1c bd 40 2a 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd5c0],ebx
c000cb0c:	eb 08                	jmp    c000cb16 <LogicalDisk::assignDriveLetter()+0xae>
c000cb0e:	45                   	inc    ebp
c000cb0f:	40                   	inc    eax
c000cb10:	3c 5b                	cmp    al,0x5b
c000cb12:	75 90                	jne    c000caa4 <LogicalDisk::assignDriveLetter()+0x3c>
c000cb14:	31 c0                	xor    eax,eax
c000cb16:	83 c4 14             	add    esp,0x14
c000cb19:	5b                   	pop    ebx
c000cb1a:	5e                   	pop    esi
c000cb1b:	5f                   	pop    edi
c000cb1c:	5d                   	pop    ebp
c000cb1d:	c3                   	ret    

c000cb1e <LogicalDisk::mount()>:
c000cb1e:	56                   	push   esi
c000cb1f:	53                   	push   ebx
c000cb20:	53                   	push   ebx
c000cb21:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cb25:	8b 1d d4 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d4
c000cb2b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cb35:	85 db                	test   ebx,ebx
c000cb37:	74 27                	je     c000cb60 <LogicalDisk::mount()+0x42>
c000cb39:	51                   	push   ecx
c000cb3a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cb41:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cb43:	83 e8 41             	sub    eax,0x41
c000cb46:	50                   	push   eax
c000cb47:	56                   	push   esi
c000cb48:	53                   	push   ebx
c000cb49:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cb4c:	83 c4 10             	add    esp,0x10
c000cb4f:	84 c0                	test   al,al
c000cb51:	74 08                	je     c000cb5b <LogicalDisk::mount()+0x3d>
c000cb53:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cb59:	eb 07                	jmp    c000cb62 <LogicalDisk::mount()+0x44>
c000cb5b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cb5e:	eb d5                	jmp    c000cb35 <LogicalDisk::mount()+0x17>
c000cb60:	31 c0                	xor    eax,eax
c000cb62:	5a                   	pop    edx
c000cb63:	5b                   	pop    ebx
c000cb64:	5e                   	pop    esi
c000cb65:	c3                   	ret    

c000cb66 <LogicalDisk::unmount()>:
c000cb66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb6a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cb74:	c3                   	ret    
c000cb75:	90                   	nop

c000cb76 <LogicalDisk::eject()>:
c000cb76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cb7a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cb80:	8b 10                	mov    edx,DWORD PTR [eax]
c000cb82:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cb86:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cb89:	90                   	nop

c000cb8a <LogicalDisk::unassignDriveLetter()>:
c000cb8a:	57                   	push   edi
c000cb8b:	56                   	push   esi
c000cb8c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb90:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cb97:	84 c9                	test   cl,cl
c000cb99:	75 0f                	jne    c000cbaa <LogicalDisk::unassignDriveLetter()+0x20>
c000cb9b:	c7 44 24 0c 6c dc 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dc6c
c000cba3:	5e                   	pop    esi
c000cba4:	5f                   	pop    edi
c000cba5:	e9 b1 35 00 00       	jmp    c001015b <KePanic(char const*)>
c000cbaa:	83 e9 41             	sub    ecx,0x41
c000cbad:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cbb4:	b8 01 00 00 00       	mov    eax,0x1
c000cbb9:	c7 04 8d 40 2a 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd5c0],0x0
c000cbc4:	d3 e0                	shl    eax,cl
c000cbc6:	89 c7                	mov    edi,eax
c000cbc8:	f7 d0                	not    eax
c000cbca:	c1 ff 1f             	sar    edi,0x1f
c000cbcd:	21 05 20 2a 02 c0    	and    DWORD PTR ds:0xc0022a20,eax
c000cbd3:	89 fe                	mov    esi,edi
c000cbd5:	f7 d6                	not    esi
c000cbd7:	21 35 24 2a 02 c0    	and    DWORD PTR ds:0xc0022a24,esi
c000cbdd:	5e                   	pop    esi
c000cbde:	5f                   	pop    edi
c000cbdf:	c3                   	ret    

c000cbe0 <LogicalDisk::read(unsigned long long, int, void*)>:
c000cbe0:	57                   	push   edi
c000cbe1:	56                   	push   esi
c000cbe2:	53                   	push   ebx
c000cbe3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cbe7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbeb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cbef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cbf3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cbf9:	77 41                	ja     c000cc3c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000cbfb:	99                   	cdq    
c000cbfc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc02:	01 c8                	add    eax,ecx
c000cc04:	11 da                	adc    edx,ebx
c000cc06:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc0c:	19 d7                	sbb    edi,edx
c000cc0e:	72 33                	jb     c000cc43 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000cc10:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc16:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc1c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc20:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc24:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc2a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc30:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc34:	5b                   	pop    ebx
c000cc35:	5e                   	pop    esi
c000cc36:	5f                   	pop    edi
c000cc37:	e9 4e 0a 00 00       	jmp    c000d68a <VCache::read(unsigned long long, int, void*)>
c000cc3c:	b8 05 00 00 00       	mov    eax,0x5
c000cc41:	eb 05                	jmp    c000cc48 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000cc43:	b8 07 00 00 00       	mov    eax,0x7
c000cc48:	5b                   	pop    ebx
c000cc49:	5e                   	pop    esi
c000cc4a:	5f                   	pop    edi
c000cc4b:	c3                   	ret    

c000cc4c <LogicalDisk::write(unsigned long long, int, void*)>:
c000cc4c:	57                   	push   edi
c000cc4d:	56                   	push   esi
c000cc4e:	53                   	push   ebx
c000cc4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000cc53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cc57:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000cc5b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000cc5f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cc65:	77 41                	ja     c000cca8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000cc67:	99                   	cdq    
c000cc68:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000cc6e:	01 c8                	add    eax,ecx
c000cc70:	11 da                	adc    edx,ebx
c000cc72:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cc78:	19 d7                	sbb    edi,edx
c000cc7a:	72 33                	jb     c000ccaf <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000cc7c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000cc82:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000cc88:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cc8c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cc90:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cc96:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cc9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cca0:	5b                   	pop    ebx
c000cca1:	5e                   	pop    esi
c000cca2:	5f                   	pop    edi
c000cca3:	e9 cc 08 00 00       	jmp    c000d574 <VCache::write(unsigned long long, int, void*)>
c000cca8:	b8 05 00 00 00       	mov    eax,0x5
c000ccad:	eb 05                	jmp    c000ccb4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000ccaf:	b8 07 00 00 00       	mov    eax,0x7
c000ccb4:	5b                   	pop    ebx
c000ccb5:	5e                   	pop    esi
c000ccb6:	5f                   	pop    edi
c000ccb7:	c3                   	ret    

c000ccb8 <Mouse::Mouse(char const*)>:
c000ccb8:	83 ec 0c             	sub    esp,0xc
c000ccbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccbf:	83 ec 08             	sub    esp,0x8
c000ccc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc6:	50                   	push   eax
c000ccc7:	e8 ec ed ff ff       	call   c000bab8 <Device::Device(char const*)>
c000cccc:	83 c4 10             	add    esp,0x10
c000cccf:	ba c0 dc 01 c0       	mov    edx,0xc001dcc0
c000ccd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccd8:	89 10                	mov    DWORD PTR [eax],edx
c000ccda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccde:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cce8:	90                   	nop
c000cce9:	83 c4 0c             	add    esp,0xc
c000ccec:	c3                   	ret    
c000cced:	90                   	nop
c000ccee:	66 90                	xchg   ax,ax

c000ccf0 <Mouse::~Mouse()>:
c000ccf0:	83 ec 0c             	sub    esp,0xc
c000ccf3:	ba c0 dc 01 c0       	mov    edx,0xc001dcc0
c000ccf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ccfc:	89 10                	mov    DWORD PTR [eax],edx
c000ccfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd02:	83 ec 0c             	sub    esp,0xc
c000cd05:	50                   	push   eax
c000cd06:	e8 17 eb ff ff       	call   c000b822 <Device::~Device()>
c000cd0b:	83 c4 10             	add    esp,0x10
c000cd0e:	90                   	nop
c000cd0f:	83 c4 0c             	add    esp,0xc
c000cd12:	c3                   	ret    
c000cd13:	90                   	nop

c000cd14 <Mouse::~Mouse()>:
c000cd14:	83 ec 0c             	sub    esp,0xc
c000cd17:	83 ec 0c             	sub    esp,0xc
c000cd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd1e:	e8 cd ff ff ff       	call   c000ccf0 <Mouse::~Mouse()>
c000cd23:	83 c4 10             	add    esp,0x10
c000cd26:	83 ec 08             	sub    esp,0x8
c000cd29:	68 58 01 00 00       	push   0x158
c000cd2e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cd32:	e8 b3 d6 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000cd37:	83 c4 10             	add    esp,0x10
c000cd3a:	83 c4 0c             	add    esp,0xc
c000cd3d:	c3                   	ret    

c000cd3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cd3e:	55                   	push   ebp
c000cd3f:	57                   	push   edi
c000cd40:	56                   	push   esi
c000cd41:	53                   	push   ebx
c000cd42:	81 ec 28 01 00 00    	sub    esp,0x128
c000cd48:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cd4f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cd56:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cd5d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cd64:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cd68:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cd6c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cd73:	e8 3c ee ff ff       	call   c000bbb4 <Device::getName()>
c000cd78:	5a                   	pop    edx
c000cd79:	59                   	pop    ecx
c000cd7a:	50                   	push   eax
c000cd7b:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cd7f:	55                   	push   ebp
c000cd80:	e8 7b 38 ff ff       	call   c0000600 <strcpy>
c000cd85:	5b                   	pop    ebx
c000cd86:	58                   	pop    eax
c000cd87:	68 e4 dc 01 c0       	push   0xc001dce4
c000cd8c:	55                   	push   ebp
c000cd8d:	e8 2e 3a ff ff       	call   c00007c0 <strcat>
c000cd92:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cd99:	e8 1b aa ff ff       	call   c00077b9 <malloc>
c000cd9e:	83 c4 0c             	add    esp,0xc
c000cda1:	89 c3                	mov    ebx,eax
c000cda3:	57                   	push   edi
c000cda4:	56                   	push   esi
c000cda5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cda9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cdad:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cdb4:	55                   	push   ebp
c000cdb5:	50                   	push   eax
c000cdb6:	e8 f7 fb ff ff       	call   c000c9b2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cdbb:	83 c4 14             	add    esp,0x14
c000cdbe:	53                   	push   ebx
c000cdbf:	e8 a4 fc ff ff       	call   c000ca68 <LogicalDisk::assignDriveLetter()>
c000cdc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cdc7:	e8 52 fd ff ff       	call   c000cb1e <LogicalDisk::mount()>
c000cdcc:	58                   	pop    eax
c000cdcd:	5a                   	pop    edx
c000cdce:	53                   	push   ebx
c000cdcf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cdd6:	e8 45 eb ff ff       	call   c000b920 <Device::addChild(Device*)>
c000cddb:	81 c4 2c 01 00 00    	add    esp,0x12c
c000cde1:	5b                   	pop    ebx
c000cde2:	5e                   	pop    esi
c000cde3:	5f                   	pop    edi
c000cde4:	5d                   	pop    ebp
c000cde5:	c3                   	ret    

c000cde6 <createPartitionsForDisk(PhysicalDisk*)>:
c000cde6:	55                   	push   ebp
c000cde7:	57                   	push   edi
c000cde8:	56                   	push   esi
c000cde9:	53                   	push   ebx
c000cdea:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000cdf0:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000cdf7:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000cdfd:	3d 00 02 00 00       	cmp    eax,0x200
c000ce02:	74 27                	je     c000ce2b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000ce04:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000ce0a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000ce10:	83 ec 10             	sub    esp,0x10
c000ce13:	0f a4 f7 0a          	shld   edi,esi,0xa
c000ce17:	99                   	cdq    
c000ce18:	c1 e6 0a             	shl    esi,0xa
c000ce1b:	52                   	push   edx
c000ce1c:	89 fd                	mov    ebp,edi
c000ce1e:	50                   	push   eax
c000ce1f:	55                   	push   ebp
c000ce20:	56                   	push   esi
c000ce21:	e8 5a ee 00 00       	call   c001bc80 <__udivdi3>
c000ce26:	e9 b1 00 00 00       	jmp    c000cedc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce2b:	83 ec 0c             	sub    esp,0xc
c000ce2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ce30:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000ce34:	56                   	push   esi
c000ce35:	6a 01                	push   0x1
c000ce37:	6a 00                	push   0x0
c000ce39:	6a 00                	push   0x0
c000ce3b:	53                   	push   ebx
c000ce3c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000ce3f:	83 c4 20             	add    esp,0x20
c000ce42:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000ce4a:	75 0a                	jne    c000ce56 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000ce4c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000ce54:	74 2c                	je     c000ce82 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000ce56:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ce5c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000ce62:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000ce68:	83 ec 10             	sub    esp,0x10
c000ce6b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ce6f:	89 f7                	mov    edi,esi
c000ce71:	c1 e0 0a             	shl    eax,0xa
c000ce74:	c1 ff 1f             	sar    edi,0x1f
c000ce77:	57                   	push   edi
c000ce78:	56                   	push   esi
c000ce79:	52                   	push   edx
c000ce7a:	50                   	push   eax
c000ce7b:	e8 00 ee 00 00       	call   c001bc80 <__udivdi3>
c000ce80:	eb 5a                	jmp    c000cedc <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000ce82:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000ce89:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000ce90:	83 e1 7f             	and    ecx,0x7f
c000ce93:	83 e0 7f             	and    eax,0x7f
c000ce96:	01 c1                	add    ecx,eax
c000ce98:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000ce9f:	83 e0 7f             	and    eax,0x7f
c000cea2:	01 c1                	add    ecx,eax
c000cea4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000ceab:	83 e0 7f             	and    eax,0x7f
c000ceae:	00 c1                	add    cl,al
c000ceb0:	74 41                	je     c000cef3 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000ceb2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ceb8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cebe:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cec4:	83 ec 10             	sub    esp,0x10
c000cec7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cecb:	89 f7                	mov    edi,esi
c000cecd:	c1 e0 0a             	shl    eax,0xa
c000ced0:	c1 ff 1f             	sar    edi,0x1f
c000ced3:	57                   	push   edi
c000ced4:	56                   	push   esi
c000ced5:	52                   	push   edx
c000ced6:	50                   	push   eax
c000ced7:	e8 a4 ed 00 00       	call   c001bc80 <__udivdi3>
c000cedc:	83 c4 14             	add    esp,0x14
c000cedf:	52                   	push   edx
c000cee0:	50                   	push   eax
c000cee1:	6a 00                	push   0x0
c000cee3:	6a 00                	push   0x0
c000cee5:	53                   	push   ebx
c000cee6:	e8 53 fe ff ff       	call   c000cd3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ceeb:	83 c4 20             	add    esp,0x20
c000ceee:	e9 79 01 00 00       	jmp    c000d06c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000cef3:	89 f0                	mov    eax,esi
c000cef5:	31 f6                	xor    esi,esi
c000cef7:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000cefe:	75 02                	jne    c000cf02 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000cf00:	89 f1                	mov    ecx,esi
c000cf02:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000cf09:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000cf10:	c1 e2 08             	shl    edx,0x8
c000cf13:	c1 e7 10             	shl    edi,0x10
c000cf16:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000cf1e:	09 fa                	or     edx,edi
c000cf20:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000cf28:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000cf2f:	83 c0 10             	add    eax,0x10
c000cf32:	09 fa                	or     edx,edi
c000cf34:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000cf3b:	c1 e7 18             	shl    edi,0x18
c000cf3e:	09 fa                	or     edx,edi
c000cf40:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000cf47:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000cf4b:	c1 e7 10             	shl    edi,0x10
c000cf4e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000cf55:	c1 e2 08             	shl    edx,0x8
c000cf58:	09 fa                	or     edx,edi
c000cf5a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000cf61:	09 fa                	or     edx,edi
c000cf63:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000cf6a:	c1 e7 18             	shl    edi,0x18
c000cf6d:	09 fa                	or     edx,edi
c000cf6f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000cf73:	46                   	inc    esi
c000cf74:	83 fe 04             	cmp    esi,0x4
c000cf77:	0f 85 7a ff ff ff    	jne    c000cef7 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000cf7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf81:	83 f0 01             	xor    eax,0x1
c000cf84:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000cf88:	75 57                	jne    c000cfe1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf8a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cf8e:	83 f0 01             	xor    eax,0x1
c000cf91:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000cf95:	75 4a                	jne    c000cfe1 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000cf97:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000cf9b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000cfa3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000cfab:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000cfb1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000cfb7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000cfbd:	0f a4 c2 0a          	shld   edx,eax,0xa
c000cfc1:	89 f7                	mov    edi,esi
c000cfc3:	c1 e0 0a             	shl    eax,0xa
c000cfc6:	c1 ff 1f             	sar    edi,0x1f
c000cfc9:	57                   	push   edi
c000cfca:	56                   	push   esi
c000cfcb:	52                   	push   edx
c000cfcc:	50                   	push   eax
c000cfcd:	e8 ae ec 00 00       	call   c001bc80 <__udivdi3>
c000cfd2:	83 c4 10             	add    esp,0x10
c000cfd5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cfd9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cfdd:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000cfe1:	84 c9                	test   cl,cl
c000cfe3:	74 53                	je     c000d038 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000cfe5:	0f b6 c9             	movzx  ecx,cl
c000cfe8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfec:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cff0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000cff4:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000cff8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cffc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d000:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d004:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d008:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d00c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d010:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d014:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d018:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d01c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d020:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d024:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d028:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d02c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d030:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d034:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d038:	31 ed                	xor    ebp,ebp
c000d03a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d03e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d042:	89 f8                	mov    eax,edi
c000d044:	09 f0                	or     eax,esi
c000d046:	74 1e                	je     c000d066 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d048:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d04c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d050:	89 d1                	mov    ecx,edx
c000d052:	09 c1                	or     ecx,eax
c000d054:	74 10                	je     c000d066 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d056:	83 ec 0c             	sub    esp,0xc
c000d059:	57                   	push   edi
c000d05a:	56                   	push   esi
c000d05b:	52                   	push   edx
c000d05c:	50                   	push   eax
c000d05d:	53                   	push   ebx
c000d05e:	e8 db fc ff ff       	call   c000cd3e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d063:	83 c4 20             	add    esp,0x20
c000d066:	45                   	inc    ebp
c000d067:	83 fd 04             	cmp    ebp,0x4
c000d06a:	75 ce                	jne    c000d03a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d06c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d072:	5b                   	pop    ebx
c000d073:	5e                   	pop    esi
c000d074:	5f                   	pop    edi
c000d075:	5d                   	pop    ebp
c000d076:	c3                   	ret    
c000d077:	90                   	nop

c000d078 <Serial::Serial(char const*)>:
c000d078:	83 ec 0c             	sub    esp,0xc
c000d07b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d07f:	83 ec 08             	sub    esp,0x8
c000d082:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d086:	50                   	push   eax
c000d087:	e8 2c ea ff ff       	call   c000bab8 <Device::Device(char const*)>
c000d08c:	83 c4 10             	add    esp,0x10
c000d08f:	ba f8 dc 01 c0       	mov    edx,0xc001dcf8
c000d094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d098:	89 10                	mov    DWORD PTR [eax],edx
c000d09a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d09e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d0a8:	90                   	nop
c000d0a9:	83 c4 0c             	add    esp,0xc
c000d0ac:	c3                   	ret    
c000d0ad:	90                   	nop
c000d0ae:	66 90                	xchg   ax,ax

c000d0b0 <Serial::~Serial()>:
c000d0b0:	83 ec 0c             	sub    esp,0xc
c000d0b3:	ba f8 dc 01 c0       	mov    edx,0xc001dcf8
c000d0b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0bc:	89 10                	mov    DWORD PTR [eax],edx
c000d0be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d0c2:	83 ec 0c             	sub    esp,0xc
c000d0c5:	50                   	push   eax
c000d0c6:	e8 57 e7 ff ff       	call   c000b822 <Device::~Device()>
c000d0cb:	83 c4 10             	add    esp,0x10
c000d0ce:	90                   	nop
c000d0cf:	83 c4 0c             	add    esp,0xc
c000d0d2:	c3                   	ret    
c000d0d3:	90                   	nop

c000d0d4 <Serial::~Serial()>:
c000d0d4:	83 ec 0c             	sub    esp,0xc
c000d0d7:	83 ec 0c             	sub    esp,0xc
c000d0da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0de:	e8 cd ff ff ff       	call   c000d0b0 <Serial::~Serial()>
c000d0e3:	83 c4 10             	add    esp,0x10
c000d0e6:	83 ec 08             	sub    esp,0x8
c000d0e9:	68 58 01 00 00       	push   0x158
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	e8 f3 d2 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000d0f7:	83 c4 10             	add    esp,0x10
c000d0fa:	83 c4 0c             	add    esp,0xc
c000d0fd:	c3                   	ret    
c000d0fe:	66 90                	xchg   ax,ax

c000d100 <Timer::Timer(char const*)>:
c000d100:	83 ec 0c             	sub    esp,0xc
c000d103:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d107:	83 ec 08             	sub    esp,0x8
c000d10a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d10e:	50                   	push   eax
c000d10f:	e8 a4 e9 ff ff       	call   c000bab8 <Device::Device(char const*)>
c000d114:	83 c4 10             	add    esp,0x10
c000d117:	ba 3c dd 01 c0       	mov    edx,0xc001dd3c
c000d11c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d120:	89 10                	mov    DWORD PTR [eax],edx
c000d122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d126:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d130:	90                   	nop
c000d131:	83 c4 0c             	add    esp,0xc
c000d134:	c3                   	ret    
c000d135:	90                   	nop
c000d136:	66 90                	xchg   ax,ax

c000d138 <Timer::~Timer()>:
c000d138:	83 ec 0c             	sub    esp,0xc
c000d13b:	ba 3c dd 01 c0       	mov    edx,0xc001dd3c
c000d140:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d144:	89 10                	mov    DWORD PTR [eax],edx
c000d146:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d14a:	83 ec 0c             	sub    esp,0xc
c000d14d:	50                   	push   eax
c000d14e:	e8 cf e6 ff ff       	call   c000b822 <Device::~Device()>
c000d153:	83 c4 10             	add    esp,0x10
c000d156:	90                   	nop
c000d157:	83 c4 0c             	add    esp,0xc
c000d15a:	c3                   	ret    
c000d15b:	90                   	nop

c000d15c <Timer::~Timer()>:
c000d15c:	83 ec 0c             	sub    esp,0xc
c000d15f:	83 ec 0c             	sub    esp,0xc
c000d162:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d166:	e8 cd ff ff ff       	call   c000d138 <Timer::~Timer()>
c000d16b:	83 c4 10             	add    esp,0x10
c000d16e:	83 ec 08             	sub    esp,0x8
c000d171:	68 5c 01 00 00       	push   0x15c
c000d176:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d17a:	e8 6b d2 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000d17f:	83 c4 10             	add    esp,0x10
c000d182:	83 c4 0c             	add    esp,0xc
c000d185:	c3                   	ret    

c000d186 <Timer::read()>:
c000d186:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d18a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d190:	c3                   	ret    

c000d191 <setupTimer(int)>:
c000d191:	53                   	push   ebx
c000d192:	83 ec 14             	sub    esp,0x14
c000d195:	68 5c 01 00 00       	push   0x15c
c000d19a:	e8 1a a6 ff ff       	call   c00077b9 <malloc>
c000d19f:	89 04 24             	mov    DWORD PTR [esp],eax
c000d1a2:	89 c3                	mov    ebx,eax
c000d1a4:	e8 4f e4 00 00       	call   c001b5f8 <PIT::PIT()>
c000d1a9:	58                   	pop    eax
c000d1aa:	5a                   	pop    edx
c000d1ab:	53                   	push   ebx
c000d1ac:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c000d1b2:	e8 69 e7 ff ff       	call   c000b920 <Device::addChild(Device*)>
c000d1b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d1b9:	6a 00                	push   0x0
c000d1bb:	6a 00                	push   0x0
c000d1bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d1c1:	53                   	push   ebx
c000d1c2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d1c5:	89 d8                	mov    eax,ebx
c000d1c7:	83 c4 28             	add    esp,0x28
c000d1ca:	5b                   	pop    ebx
c000d1cb:	c3                   	ret    

c000d1cc <timerHandler(unsigned int)>:
c000d1cc:	56                   	push   esi
c000d1cd:	53                   	push   ebx
c000d1ce:	51                   	push   ecx
c000d1cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1d3:	01 05 ac 2a 02 c0    	add    DWORD PTR ds:0xc0022aac,eax
c000d1d9:	80 3d dd 04 02 c0 00 	cmp    BYTE PTR ds:0xc00204dd,0x0
c000d1e0:	0f 84 4a 01 00 00    	je     c000d330 <timerHandler(unsigned int)+0x164>
c000d1e6:	fa                   	cli    
c000d1e7:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c000d1ed:	83 ec 0c             	sub    esp,0xc
c000d1f0:	ff 05 84 37 02 c0    	inc    DWORD PTR ds:0xc0023784
c000d1f6:	68 98 37 02 c0       	push   0xc0023798
c000d1fb:	e8 50 f0 00 00       	call   c001c250 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d200:	83 c4 10             	add    esp,0x10
c000d203:	84 c0                	test   al,al
c000d205:	0f 85 a1 00 00 00    	jne    c000d2ac <timerHandler(unsigned int)+0xe0>
c000d20b:	83 ec 0c             	sub    esp,0xc
c000d20e:	68 98 37 02 c0       	push   0xc0023798
c000d213:	e8 54 f0 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d218:	83 c4 10             	add    esp,0x10
c000d21b:	89 c6                	mov    esi,eax
c000d21d:	8d 76 00             	lea    esi,[esi+0x0]
c000d220:	83 ec 0c             	sub    esp,0xc
c000d223:	68 98 37 02 c0       	push   0xc0023798
c000d228:	e8 3f f0 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d22d:	c7 04 24 98 37 02 c0 	mov    DWORD PTR [esp],0xc0023798
c000d234:	89 c3                	mov    ebx,eax
c000d236:	e8 39 f0 00 00       	call   c001c274 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d23b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d23e:	83 c4 10             	add    esp,0x10
c000d241:	3b 05 ac 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022aac
c000d247:	77 23                	ja     c000d26c <timerHandler(unsigned int)+0xa0>
c000d249:	83 ec 0c             	sub    esp,0xc
c000d24c:	53                   	push   ebx
c000d24d:	e8 f6 65 00 00       	call   c0013848 <unblockTask(ThreadControlBlock*)>
c000d252:	83 c4 10             	add    esp,0x10
c000d255:	39 de                	cmp    esi,ebx
c000d257:	75 27                	jne    c000d280 <timerHandler(unsigned int)+0xb4>
c000d259:	83 ec 0c             	sub    esp,0xc
c000d25c:	68 98 37 02 c0       	push   0xc0023798
c000d261:	e8 06 f0 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d266:	89 c6                	mov    esi,eax
c000d268:	eb 12                	jmp    c000d27c <timerHandler(unsigned int)+0xb0>
c000d26a:	66 90                	xchg   ax,ax
c000d26c:	52                   	push   edx
c000d26d:	52                   	push   edx
c000d26e:	53                   	push   ebx
c000d26f:	68 98 37 02 c0       	push   0xc0023798
c000d274:	e8 b3 f0 00 00       	call   c001c32c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d279:	8d 76 00             	lea    esi,[esi+0x0]
c000d27c:	83 c4 10             	add    esp,0x10
c000d27f:	90                   	nop
c000d280:	83 ec 0c             	sub    esp,0xc
c000d283:	68 98 37 02 c0       	push   0xc0023798
c000d288:	e8 c3 ef 00 00       	call   c001c250 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d28d:	83 c4 10             	add    esp,0x10
c000d290:	84 c0                	test   al,al
c000d292:	75 18                	jne    c000d2ac <timerHandler(unsigned int)+0xe0>
c000d294:	83 ec 0c             	sub    esp,0xc
c000d297:	68 98 37 02 c0       	push   0xc0023798
c000d29c:	e8 cb ef 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d2a1:	83 c4 10             	add    esp,0x10
c000d2a4:	39 f0                	cmp    eax,esi
c000d2a6:	0f 85 74 ff ff ff    	jne    c000d220 <timerHandler(unsigned int)+0x54>
c000d2ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d2b1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d2b5:	74 41                	je     c000d2f8 <timerHandler(unsigned int)+0x12c>
c000d2b7:	80 3d dc 04 02 c0 00 	cmp    BYTE PTR ds:0xc00204dc,0x0
c000d2be:	74 38                	je     c000d2f8 <timerHandler(unsigned int)+0x12c>
c000d2c0:	fa                   	cli    
c000d2c1:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c000d2c7:	a1 ac 2a 02 c0       	mov    eax,ds:0xc0022aac
c000d2cc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2d2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d2d5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d2db:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d2de:	72 08                	jb     c000d2e8 <timerHandler(unsigned int)+0x11c>
c000d2e0:	e8 9f 60 00 00       	call   c0013384 <schedule()>
c000d2e5:	8d 76 00             	lea    esi,[esi+0x0]
c000d2e8:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000d2ed:	48                   	dec    eax
c000d2ee:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000d2f3:	75 03                	jne    c000d2f8 <timerHandler(unsigned int)+0x12c>
c000d2f5:	fb                   	sti    
c000d2f6:	66 90                	xchg   ax,ax
c000d2f8:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c000d2fd:	48                   	dec    eax
c000d2fe:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c000d303:	75 1b                	jne    c000d320 <timerHandler(unsigned int)+0x154>
c000d305:	83 3d 80 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023780,0x0
c000d30c:	74 12                	je     c000d320 <timerHandler(unsigned int)+0x154>
c000d30e:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c000d318:	e8 67 60 00 00       	call   c0013384 <schedule()>
c000d31d:	8d 76 00             	lea    esi,[esi+0x0]
c000d320:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c000d325:	48                   	dec    eax
c000d326:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c000d32b:	75 03                	jne    c000d330 <timerHandler(unsigned int)+0x164>
c000d32d:	fb                   	sti    
c000d32e:	66 90                	xchg   ax,ax
c000d330:	58                   	pop    eax
c000d331:	5b                   	pop    ebx
c000d332:	5e                   	pop    esi
c000d333:	c3                   	ret    

c000d334 <VCache::VCache(PhysicalDisk*)>:
c000d334:	53                   	push   ebx
c000d335:	83 ec 18             	sub    esp,0x18
c000d338:	ba 6c dd 01 c0       	mov    edx,0xc001dd6c
c000d33d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d341:	89 10                	mov    DWORD PTR [eax],edx
c000d343:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d347:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d34e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d352:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d35d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d364:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d36b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d36f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d376:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d37d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d381:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d388:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d38c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d390:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d394:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d39b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d3a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3a6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d3aa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ae:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d3b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3b6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d3ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3be:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d3c5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d3cd:	83 ec 0c             	sub    esp,0xc
c000d3d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d3d4:	e8 e0 a3 ff ff       	call   c00077b9 <malloc>
c000d3d9:	83 c4 10             	add    esp,0x10
c000d3dc:	89 c3                	mov    ebx,eax
c000d3de:	83 ec 0c             	sub    esp,0xc
c000d3e1:	53                   	push   ebx
c000d3e2:	e8 69 5d 00 00       	call   c0013150 <Mutex::Mutex()>
c000d3e7:	83 c4 10             	add    esp,0x10
c000d3ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3ee:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d3f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d3f5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d3f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d3fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d400:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d407:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d40b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d415:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d418:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d41c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d422:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d428:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d42c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d42f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d432:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d436:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d43a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d43e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d444:	05 00 01 00 00       	add    eax,0x100
c000d449:	c1 e0 04             	shl    eax,0x4
c000d44c:	83 ec 0c             	sub    esp,0xc
c000d44f:	50                   	push   eax
c000d450:	e8 64 a3 ff ff       	call   c00077b9 <malloc>
c000d455:	83 c4 10             	add    esp,0x10
c000d458:	89 c2                	mov    edx,eax
c000d45a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d45e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d461:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d465:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d46c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d470:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d474:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d478:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d47e:	c1 e0 06             	shl    eax,0x6
c000d481:	83 ec 0c             	sub    esp,0xc
c000d484:	50                   	push   eax
c000d485:	e8 2f a3 ff ff       	call   c00077b9 <malloc>
c000d48a:	83 c4 10             	add    esp,0x10
c000d48d:	89 c2                	mov    edx,eax
c000d48f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d493:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d496:	90                   	nop
c000d497:	83 c4 18             	add    esp,0x18
c000d49a:	5b                   	pop    ebx
c000d49b:	c3                   	ret    

c000d49c <VCache::invalidateReadBuffer()>:
c000d49c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d4a0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d4a6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d4aa:	c3                   	ret    
c000d4ab:	90                   	nop

c000d4ac <VCache::writeWriteBuffer()>:
c000d4ac:	53                   	push   ebx
c000d4ad:	83 ec 08             	sub    esp,0x8
c000d4b0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d4b4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d4b8:	74 1e                	je     c000d4d8 <VCache::writeWriteBuffer()+0x2c>
c000d4ba:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d4bd:	83 ec 0c             	sub    esp,0xc
c000d4c0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d4c2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d4c5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d4c8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d4cb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d4ce:	50                   	push   eax
c000d4cf:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d4d2:	83 c4 20             	add    esp,0x20
c000d4d5:	8d 76 00             	lea    esi,[esi+0x0]
c000d4d8:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d4df:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d4e6:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d4ea:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d4f1:	83 c4 08             	add    esp,0x8
c000d4f4:	5b                   	pop    ebx
c000d4f5:	c3                   	ret    
c000d4f6:	66 90                	xchg   ax,ax

c000d4f8 <VCache::~VCache()>:
c000d4f8:	83 ec 0c             	sub    esp,0xc
c000d4fb:	ba 6c dd 01 c0       	mov    edx,0xc001dd6c
c000d500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d504:	89 10                	mov    DWORD PTR [eax],edx
c000d506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d50a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d50d:	84 c0                	test   al,al
c000d50f:	74 0f                	je     c000d520 <VCache::~VCache()+0x28>
c000d511:	83 ec 0c             	sub    esp,0xc
c000d514:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d518:	e8 8f ff ff ff       	call   c000d4ac <VCache::writeWriteBuffer()>
c000d51d:	83 c4 10             	add    esp,0x10
c000d520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d524:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d527:	83 ec 0c             	sub    esp,0xc
c000d52a:	50                   	push   eax
c000d52b:	e8 99 a2 ff ff       	call   c00077c9 <free>
c000d530:	83 c4 10             	add    esp,0x10
c000d533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d537:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d53a:	83 ec 0c             	sub    esp,0xc
c000d53d:	50                   	push   eax
c000d53e:	e8 86 a2 ff ff       	call   c00077c9 <free>
c000d543:	83 c4 10             	add    esp,0x10
c000d546:	90                   	nop
c000d547:	83 c4 0c             	add    esp,0xc
c000d54a:	c3                   	ret    
c000d54b:	90                   	nop

c000d54c <VCache::~VCache()>:
c000d54c:	83 ec 0c             	sub    esp,0xc
c000d54f:	83 ec 0c             	sub    esp,0xc
c000d552:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d556:	e8 9d ff ff ff       	call   c000d4f8 <VCache::~VCache()>
c000d55b:	83 c4 10             	add    esp,0x10
c000d55e:	83 ec 08             	sub    esp,0x8
c000d561:	6a 44                	push   0x44
c000d563:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d567:	e8 7e ce ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000d56c:	83 c4 10             	add    esp,0x10
c000d56f:	83 c4 0c             	add    esp,0xc
c000d572:	c3                   	ret    
c000d573:	90                   	nop

c000d574 <VCache::write(unsigned long long, int, void*)>:
c000d574:	55                   	push   ebp
c000d575:	57                   	push   edi
c000d576:	56                   	push   esi
c000d577:	53                   	push   ebx
c000d578:	83 ec 1c             	sub    esp,0x1c
c000d57b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d57f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d583:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d587:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d58b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d58f:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d593:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d597:	31 c0                	xor    eax,eax
c000d599:	8d 76 00             	lea    esi,[esi+0x0]
c000d59c:	39 e8                	cmp    eax,ebp
c000d59e:	7d 18                	jge    c000d5b8 <VCache::write(unsigned long long, int, void*)+0x44>
c000d5a0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d5a3:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d5a9:	0f af c8             	imul   ecx,eax
c000d5ac:	89 ca                	mov    edx,ecx
c000d5ae:	01 f2                	add    edx,esi
c000d5b0:	8b 3a                	mov    edi,DWORD PTR [edx]
c000d5b2:	40                   	inc    eax
c000d5b3:	eb e7                	jmp    c000d59c <VCache::write(unsigned long long, int, void*)+0x28>
c000d5b5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5b8:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d5bc:	74 0a                	je     c000d5c8 <VCache::write(unsigned long long, int, void*)+0x54>
c000d5be:	53                   	push   ebx
c000d5bf:	e8 d8 fe ff ff       	call   c000d49c <VCache::invalidateReadBuffer()>
c000d5c4:	58                   	pop    eax
c000d5c5:	8d 76 00             	lea    esi,[esi+0x0]
c000d5c8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d5cc:	74 5a                	je     c000d628 <VCache::write(unsigned long long, int, void*)+0xb4>
c000d5ce:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c000d5d1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d5d5:	89 f8                	mov    eax,edi
c000d5d7:	99                   	cdq    
c000d5d8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d5db:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d5de:	31 c1                	xor    ecx,eax
c000d5e0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d5e4:	31 d0                	xor    eax,edx
c000d5e6:	09 c1                	or     ecx,eax
c000d5e8:	75 32                	jne    c000d61c <VCache::write(unsigned long long, int, void*)+0xa8>
c000d5ea:	83 fd 01             	cmp    ebp,0x1
c000d5ed:	75 2d                	jne    c000d61c <VCache::write(unsigned long long, int, void*)+0xa8>
c000d5ef:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d5f2:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d5f8:	0f af f9             	imul   edi,ecx
c000d5fb:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d5fe:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d600:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d603:	40                   	inc    eax
c000d604:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d607:	83 f8 40             	cmp    eax,0x40
c000d60a:	75 74                	jne    c000d680 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d60c:	83 ec 0c             	sub    esp,0xc
c000d60f:	53                   	push   ebx
c000d610:	e8 97 fe ff ff       	call   c000d4ac <VCache::writeWriteBuffer()>
c000d615:	83 c4 10             	add    esp,0x10
c000d618:	eb 66                	jmp    c000d680 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d61a:	66 90                	xchg   ax,ax
c000d61c:	83 ec 0c             	sub    esp,0xc
c000d61f:	53                   	push   ebx
c000d620:	e8 87 fe ff ff       	call   c000d4ac <VCache::writeWriteBuffer()>
c000d625:	83 c4 10             	add    esp,0x10
c000d628:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d62b:	83 fd 3f             	cmp    ebp,0x3f
c000d62e:	7f 24                	jg     c000d654 <VCache::write(unsigned long long, int, void*)+0xe0>
c000d630:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d634:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c000d637:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000d63a:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d63e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d642:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d645:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000d648:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d64e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d650:	eb 2e                	jmp    c000d680 <VCache::write(unsigned long long, int, void*)+0x10c>
c000d652:	66 90                	xchg   ax,ax
c000d654:	8b 10                	mov    edx,DWORD PTR [eax]
c000d656:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000d65a:	89 6c 24 3c          	mov    DWORD PTR [esp+0x3c],ebp
c000d65e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000d662:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d666:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000d66a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d66e:	89 74 24 38          	mov    DWORD PTR [esp+0x38],esi
c000d672:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000d675:	83 c4 1c             	add    esp,0x1c
c000d678:	5b                   	pop    ebx
c000d679:	5e                   	pop    esi
c000d67a:	5f                   	pop    edi
c000d67b:	5d                   	pop    ebp
c000d67c:	ff e0                	jmp    eax
c000d67e:	66 90                	xchg   ax,ax
c000d680:	83 c4 1c             	add    esp,0x1c
c000d683:	31 c0                	xor    eax,eax
c000d685:	5b                   	pop    ebx
c000d686:	5e                   	pop    esi
c000d687:	5f                   	pop    edi
c000d688:	5d                   	pop    ebp
c000d689:	c3                   	ret    

c000d68a <VCache::read(unsigned long long, int, void*)>:
c000d68a:	55                   	push   ebp
c000d68b:	57                   	push   edi
c000d68c:	56                   	push   esi
c000d68d:	53                   	push   ebx
c000d68e:	83 ec 1c             	sub    esp,0x1c
c000d691:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d695:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d699:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d69d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d6a1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000d6a5:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d6a9:	31 c0                	xor    eax,eax
c000d6ab:	90                   	nop
c000d6ac:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d6b0:	7d 16                	jge    c000d6c8 <VCache::read(unsigned long long, int, void*)+0x3e>
c000d6b2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d6b5:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d6bb:	0f af c8             	imul   ecx,eax
c000d6be:	89 ca                	mov    edx,ecx
c000d6c0:	01 f2                	add    edx,esi
c000d6c2:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d6c4:	40                   	inc    eax
c000d6c5:	eb e5                	jmp    c000d6ac <VCache::read(unsigned long long, int, void*)+0x22>
c000d6c7:	90                   	nop
c000d6c8:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6cc:	74 0e                	je     c000d6dc <VCache::read(unsigned long long, int, void*)+0x52>
c000d6ce:	83 ec 0c             	sub    esp,0xc
c000d6d1:	53                   	push   ebx
c000d6d2:	e8 d5 fd ff ff       	call   c000d4ac <VCache::writeWriteBuffer()>
c000d6d7:	83 c4 10             	add    esp,0x10
c000d6da:	66 90                	xchg   ax,ax
c000d6dc:	83 ec 0c             	sub    esp,0xc
c000d6df:	53                   	push   ebx
c000d6e0:	e8 b7 fd ff ff       	call   c000d49c <VCache::invalidateReadBuffer()>
c000d6e5:	83 c4 0c             	add    esp,0xc
c000d6e8:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6eb:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c000d6f1:	6a 00                	push   0x0
c000d6f3:	56                   	push   esi
c000d6f4:	e8 d7 2d ff ff       	call   c00004d0 <memset>
c000d6f9:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6fc:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6fe:	89 74 24 50          	mov    DWORD PTR [esp+0x50],esi
c000d702:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c000d706:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000d70a:	89 6c 24 48          	mov    DWORD PTR [esp+0x48],ebp
c000d70e:	89 74 24 4c          	mov    DWORD PTR [esp+0x4c],esi
c000d712:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d716:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000d719:	83 c4 2c             	add    esp,0x2c
c000d71c:	5b                   	pop    ebx
c000d71d:	5e                   	pop    esi
c000d71e:	5f                   	pop    edi
c000d71f:	5d                   	pop    ebp
c000d720:	ff e0                	jmp    eax

c000d722 <Video::putrect(int, int, int, int, unsigned int)>:
c000d722:	55                   	push   ebp
c000d723:	57                   	push   edi
c000d724:	56                   	push   esi
c000d725:	53                   	push   ebx
c000d726:	83 ec 1c             	sub    esp,0x1c
c000d729:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d72d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d731:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d735:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d739:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d73d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d741:	01 df                	add    edi,ebx
c000d743:	39 fb                	cmp    ebx,edi
c000d745:	7d 1f                	jge    c000d766 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d747:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d74b:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d74f:	7d 12                	jge    c000d763 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d751:	8b 16                	mov    edx,DWORD PTR [esi]
c000d753:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d757:	53                   	push   ebx
c000d758:	55                   	push   ebp
c000d759:	45                   	inc    ebp
c000d75a:	56                   	push   esi
c000d75b:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d75e:	83 c4 10             	add    esp,0x10
c000d761:	eb e8                	jmp    c000d74b <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d763:	43                   	inc    ebx
c000d764:	eb dd                	jmp    c000d743 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d766:	83 c4 1c             	add    esp,0x1c
c000d769:	5b                   	pop    ebx
c000d76a:	5e                   	pop    esi
c000d76b:	5f                   	pop    edi
c000d76c:	5d                   	pop    ebp
c000d76d:	c3                   	ret    

c000d76e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d76e:	55                   	push   ebp
c000d76f:	57                   	push   edi
c000d770:	31 ff                	xor    edi,edi
c000d772:	56                   	push   esi
c000d773:	53                   	push   ebx
c000d774:	83 ec 1c             	sub    esp,0x1c
c000d777:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d77b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d77f:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000d786:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000d78b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d78f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000d793:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d797:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000d79a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d79e:	01 f9                	add    ecx,edi
c000d7a0:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000d7a4:	7d 2f                	jge    c000d7d5 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000d7a6:	31 f6                	xor    esi,esi
c000d7a8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000d7ac:	01 f2                	add    edx,esi
c000d7ae:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000d7b2:	7d 1a                	jge    c000d7ce <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000d7b4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d7b7:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000d7ba:	46                   	inc    esi
c000d7bb:	51                   	push   ecx
c000d7bc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000d7c0:	52                   	push   edx
c000d7c1:	55                   	push   ebp
c000d7c2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d7c5:	83 c4 10             	add    esp,0x10
c000d7c8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d7cc:	eb da                	jmp    c000d7a8 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000d7ce:	47                   	inc    edi
c000d7cf:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000d7d3:	eb c5                	jmp    c000d79a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000d7d5:	83 c4 1c             	add    esp,0x1c
c000d7d8:	5b                   	pop    ebx
c000d7d9:	5e                   	pop    esi
c000d7da:	5f                   	pop    edi
c000d7db:	5d                   	pop    ebp
c000d7dc:	c3                   	ret    
c000d7dd:	90                   	nop

c000d7de <Video::blit(unsigned int*, int, int, int, int)>:
c000d7de:	55                   	push   ebp
c000d7df:	57                   	push   edi
c000d7e0:	56                   	push   esi
c000d7e1:	53                   	push   ebx
c000d7e2:	83 ec 1c             	sub    esp,0x1c
c000d7e5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000d7e9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d7ed:	85 c0                	test   eax,eax
c000d7ef:	79 02                	jns    c000d7f3 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000d7f1:	31 c0                	xor    eax,eax
c000d7f3:	c1 e0 02             	shl    eax,0x2
c000d7f6:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000d7fa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d7fe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000d802:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000d806:	39 d8                	cmp    eax,ebx
c000d808:	7e 49                	jle    c000d853 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d80a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d810:	7c 41                	jl     c000d853 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000d812:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d816:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d81a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000d81e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000d822:	39 f9                	cmp    ecx,edi
c000d824:	7e 22                	jle    c000d848 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000d826:	83 c5 04             	add    ebp,0x4
c000d829:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d82f:	7c 14                	jl     c000d845 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000d831:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000d833:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000d836:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d83a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000d83e:	56                   	push   esi
c000d83f:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000d842:	83 c4 10             	add    esp,0x10
c000d845:	47                   	inc    edi
c000d846:	eb d2                	jmp    c000d81a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000d848:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d84c:	43                   	inc    ebx
c000d84d:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000d851:	eb ab                	jmp    c000d7fe <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000d853:	83 c4 1c             	add    esp,0x1c
c000d856:	5b                   	pop    ebx
c000d857:	5e                   	pop    esi
c000d858:	5f                   	pop    edi
c000d859:	5d                   	pop    ebp
c000d85a:	c3                   	ret    
c000d85b:	90                   	nop

c000d85c <Video::clearScreen(unsigned int)>:
c000d85c:	57                   	push   edi
c000d85d:	56                   	push   esi
c000d85e:	53                   	push   ebx
c000d85f:	31 db                	xor    ebx,ebx
c000d861:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d865:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000d86b:	7e 1f                	jle    c000d88c <Video::clearScreen(unsigned int)+0x30>
c000d86d:	31 ff                	xor    edi,edi
c000d86f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000d875:	7e 12                	jle    c000d889 <Video::clearScreen(unsigned int)+0x2d>
c000d877:	8b 06                	mov    eax,DWORD PTR [esi]
c000d879:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d87d:	53                   	push   ebx
c000d87e:	57                   	push   edi
c000d87f:	47                   	inc    edi
c000d880:	56                   	push   esi
c000d881:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d884:	83 c4 10             	add    esp,0x10
c000d887:	eb e6                	jmp    c000d86f <Video::clearScreen(unsigned int)+0x13>
c000d889:	43                   	inc    ebx
c000d88a:	eb d9                	jmp    c000d865 <Video::clearScreen(unsigned int)+0x9>
c000d88c:	5b                   	pop    ebx
c000d88d:	5e                   	pop    esi
c000d88e:	5f                   	pop    edi
c000d88f:	c3                   	ret    

c000d890 <Video::putpixel(int, int, unsigned int)>:
c000d890:	c7 44 24 04 74 dd 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dd74
c000d898:	e9 be 28 00 00       	jmp    c001015b <KePanic(char const*)>
c000d89d:	90                   	nop

c000d89e <Video::Video(char const*)>:
c000d89e:	83 ec 0c             	sub    esp,0xc
c000d8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a5:	83 ec 08             	sub    esp,0x8
c000d8a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d8ac:	50                   	push   eax
c000d8ad:	e8 06 e2 ff ff       	call   c000bab8 <Device::Device(char const*)>
c000d8b2:	83 c4 10             	add    esp,0x10
c000d8b5:	ba e4 dd 01 c0       	mov    edx,0xc001dde4
c000d8ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8be:	89 10                	mov    DWORD PTR [eax],edx
c000d8c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8c4:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000d8ce:	90                   	nop
c000d8cf:	83 c4 0c             	add    esp,0xc
c000d8d2:	c3                   	ret    
c000d8d3:	90                   	nop

c000d8d4 <Video::~Video()>:
c000d8d4:	83 ec 0c             	sub    esp,0xc
c000d8d7:	ba e4 dd 01 c0       	mov    edx,0xc001dde4
c000d8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8e0:	89 10                	mov    DWORD PTR [eax],edx
c000d8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8e6:	83 ec 0c             	sub    esp,0xc
c000d8e9:	50                   	push   eax
c000d8ea:	e8 33 df ff ff       	call   c000b822 <Device::~Device()>
c000d8ef:	83 c4 10             	add    esp,0x10
c000d8f2:	90                   	nop
c000d8f3:	83 c4 0c             	add    esp,0xc
c000d8f6:	c3                   	ret    
c000d8f7:	90                   	nop

c000d8f8 <Video::~Video()>:
c000d8f8:	83 ec 0c             	sub    esp,0xc
c000d8fb:	83 ec 0c             	sub    esp,0xc
c000d8fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d902:	e8 cd ff ff ff       	call   c000d8d4 <Video::~Video()>
c000d907:	83 c4 10             	add    esp,0x10
c000d90a:	83 ec 08             	sub    esp,0x8
c000d90d:	68 64 01 00 00       	push   0x164
c000d912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d916:	e8 cf ca ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c000d91b:	83 c4 10             	add    esp,0x10
c000d91e:	83 c4 0c             	add    esp,0xc
c000d921:	c3                   	ret    

c000d922 <Video::isMonochrome()>:
c000d922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d926:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000d92c:	c3                   	ret    
c000d92d:	90                   	nop

c000d92e <Video::getWidth()>:
c000d92e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d932:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d938:	c3                   	ret    
c000d939:	90                   	nop

c000d93a <Video::getHeight()>:
c000d93a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d93e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d944:	c3                   	ret    
c000d945:	90                   	nop

c000d946 <Video::drawCursor(int, int, unsigned char*, int)>:
c000d946:	55                   	push   ebp
c000d947:	57                   	push   edi
c000d948:	56                   	push   esi
c000d949:	53                   	push   ebx
c000d94a:	83 ec 2c             	sub    esp,0x2c
c000d94d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000d951:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000d955:	83 f8 01             	cmp    eax,0x1
c000d958:	19 c9                	sbb    ecx,ecx
c000d95a:	31 db                	xor    ebx,ebx
c000d95c:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000d960:	89 cd                	mov    ebp,ecx
c000d962:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000d96a:	f7 d5                	not    ebp
c000d96c:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000d972:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000d976:	01 d8                	add    eax,ebx
c000d978:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d97c:	56                   	push   esi
c000d97d:	e8 b8 ff ff ff       	call   c000d93a <Video::getHeight()>
c000d982:	59                   	pop    ecx
c000d983:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000d987:	7e 70                	jle    c000d9f9 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000d989:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d98d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000d991:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000d994:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d998:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000d99c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000d9a3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9a7:	89 f8                	mov    eax,edi
c000d9a9:	83 c0 20             	add    eax,0x20
c000d9ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000d9b0:	56                   	push   esi
c000d9b1:	e8 78 ff ff ff       	call   c000d92e <Video::getWidth()>
c000d9b6:	5a                   	pop    edx
c000d9b7:	39 c7                	cmp    edi,eax
c000d9b9:	7d 34                	jge    c000d9ef <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000d9bb:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000d9c0:	74 05                	je     c000d9c7 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000d9c2:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9c4:	55                   	push   ebp
c000d9c5:	eb 0d                	jmp    c000d9d4 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000d9c7:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000d9cc:	74 12                	je     c000d9e0 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000d9ce:	8b 06                	mov    eax,DWORD PTR [esi]
c000d9d0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d9d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000d9d8:	57                   	push   edi
c000d9d9:	56                   	push   esi
c000d9da:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000d9dd:	83 c4 10             	add    esp,0x10
c000d9e0:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000d9e4:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000d9e8:	47                   	inc    edi
c000d9e9:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000d9ed:	75 c1                	jne    c000d9b0 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000d9ef:	43                   	inc    ebx
c000d9f0:	83 fb 20             	cmp    ebx,0x20
c000d9f3:	0f 85 79 ff ff ff    	jne    c000d972 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000d9f9:	83 c4 2c             	add    esp,0x2c
c000d9fc:	5b                   	pop    ebx
c000d9fd:	5e                   	pop    esi
c000d9fe:	5f                   	pop    edi
c000d9ff:	5d                   	pop    ebp
c000da00:	c3                   	ret    
c000da01:	90                   	nop

c000da02 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000da02:	55                   	push   ebp
c000da03:	57                   	push   edi
c000da04:	56                   	push   esi
c000da05:	53                   	push   ebx
c000da06:	83 ec 28             	sub    esp,0x28
c000da09:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000da0d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000da11:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000da15:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000da19:	c1 e6 08             	shl    esi,0x8
c000da1c:	01 c6                	add    esi,eax
c000da1e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000da22:	c1 e0 08             	shl    eax,0x8
c000da25:	01 d0                	add    eax,edx
c000da27:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000da2f:	0f af c6             	imul   eax,esi
c000da32:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000da39:	50                   	push   eax
c000da3a:	e8 7a 9d ff ff       	call   c00077b9 <malloc>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 c7                	mov    edi,eax
c000da44:	85 c0                	test   eax,eax
c000da46:	75 10                	jne    c000da58 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000da48:	83 ec 0c             	sub    esp,0xc
c000da4b:	68 95 dd 01 c0       	push   0xc001dd95
c000da50:	e8 06 27 00 00       	call   c001015b <KePanic(char const*)>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000da5b:	ba 12 00 00 00       	mov    edx,0x12
c000da60:	84 c0                	test   al,al
c000da62:	74 11                	je     c000da75 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000da64:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000da68:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000da6c:	c1 fa 03             	sar    edx,0x3
c000da6f:	0f af d1             	imul   edx,ecx
c000da72:	83 c2 12             	add    edx,0x12
c000da75:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000da79:	74 04                	je     c000da7f <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000da7b:	85 f6                	test   esi,esi
c000da7d:	75 12                	jne    c000da91 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000da7f:	83 ec 0c             	sub    esp,0xc
c000da82:	68 a5 dd 01 c0       	push   0xc001dda5
c000da87:	e8 54 ca ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000da8c:	e9 b8 00 00 00       	jmp    c000db49 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000da91:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000da95:	80 f9 02             	cmp    cl,0x2
c000da98:	0f 85 96 00 00 00    	jne    c000db34 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000da9e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000daa3:	75 0e                	jne    c000dab3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000daa5:	84 c0                	test   al,al
c000daa7:	75 0a                	jne    c000dab3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000daa9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000daac:	83 e8 18             	sub    eax,0x18
c000daaf:	a8 f7                	test   al,0xf7
c000dab1:	74 0a                	je     c000dabd <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dab3:	83 ec 0c             	sub    esp,0xc
c000dab6:	68 ba dd 01 c0       	push   0xc001ddba
c000dabb:	eb 7f                	jmp    c000db3c <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dabd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dac5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dacd:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dad1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dad9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dadd:	75 0c                	jne    c000daeb <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dadf:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dae4:	c1 e0 18             	shl    eax,0x18
c000dae7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000daeb:	45                   	inc    ebp
c000daec:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000daf1:	c1 e1 10             	shl    ecx,0x10
c000daf4:	89 c8                	mov    eax,ecx
c000daf6:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dafb:	c1 e1 08             	shl    ecx,0x8
c000dafe:	09 c1                	or     ecx,eax
c000db00:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000db04:	09 c1                	or     ecx,eax
c000db06:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000db0a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000db0e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000db12:	c1 f8 03             	sar    eax,0x3
c000db15:	01 c2                	add    edx,eax
c000db17:	89 e8                	mov    eax,ebp
c000db19:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000db1d:	39 c6                	cmp    esi,eax
c000db1f:	7f b0                	jg     c000dad1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000db21:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000db25:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000db29:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000db2c:	7e 22                	jle    c000db50 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000db2e:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000db32:	eb 99                	jmp    c000dacd <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000db34:	50                   	push   eax
c000db35:	50                   	push   eax
c000db36:	51                   	push   ecx
c000db37:	68 c8 dd 01 c0       	push   0xc001ddc8
c000db3c:	e8 9f c9 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000db41:	89 3c 24             	mov    DWORD PTR [esp],edi
c000db44:	e8 80 9c ff ff       	call   c00077c9 <free>
c000db49:	83 c4 10             	add    esp,0x10
c000db4c:	31 ff                	xor    edi,edi
c000db4e:	eb 0f                	jmp    c000db5f <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000db50:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000db54:	89 30                	mov    DWORD PTR [eax],esi
c000db56:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000db5a:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000db5d:	89 30                	mov    DWORD PTR [eax],esi
c000db5f:	83 c4 1c             	add    esp,0x1c
c000db62:	89 f8                	mov    eax,edi
c000db64:	5b                   	pop    ebx
c000db65:	5e                   	pop    esi
c000db66:	5f                   	pop    edi
c000db67:	5d                   	pop    ebp
c000db68:	c3                   	ret    
c000db69:	90                   	nop

c000db6a <Video::putTGA(int, int, unsigned char*, int)>:
c000db6a:	55                   	push   ebp
c000db6b:	57                   	push   edi
c000db6c:	56                   	push   esi
c000db6d:	53                   	push   ebx
c000db6e:	83 ec 28             	sub    esp,0x28
c000db71:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000db75:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db79:	50                   	push   eax
c000db7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c000db7e:	50                   	push   eax
c000db7f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db83:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000db87:	56                   	push   esi
c000db88:	e8 75 fe ff ff       	call   c000da02 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000db8d:	83 c4 20             	add    esp,0x20
c000db90:	85 c0                	test   eax,eax
c000db92:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000db96:	74 35                	je     c000dbcd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000db98:	89 c7                	mov    edi,eax
c000db9a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000db9e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000dba2:	39 d8                	cmp    eax,ebx
c000dba4:	7e 27                	jle    c000dbcd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000dba6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000dbaa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000dbae:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000dbb2:	39 e8                	cmp    eax,ebp
c000dbb4:	7e 14                	jle    c000dbca <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000dbb6:	8b 06                	mov    eax,DWORD PTR [esi]
c000dbb8:	83 c7 04             	add    edi,0x4
c000dbbb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000dbbe:	53                   	push   ebx
c000dbbf:	55                   	push   ebp
c000dbc0:	45                   	inc    ebp
c000dbc1:	56                   	push   esi
c000dbc2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dbc5:	83 c4 10             	add    esp,0x10
c000dbc8:	eb e0                	jmp    c000dbaa <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000dbca:	43                   	inc    ebx
c000dbcb:	eb cd                	jmp    c000db9a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000dbcd:	83 c4 1c             	add    esp,0x1c
c000dbd0:	5b                   	pop    ebx
c000dbd1:	5e                   	pop    esi
c000dbd2:	5f                   	pop    edi
c000dbd3:	5d                   	pop    ebp
c000dbd4:	c3                   	ret    
c000dbd5:	66 90                	xchg   ax,ax
c000dbd7:	90                   	nop

c000dbd8 <ACPI::close(int, int, void*)>:
c000dbd8:	83 ec 1c             	sub    esp,0x1c
c000dbdb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000dbe3:	74 0b                	je     c000dbf0 <ACPI::close(int, int, void*)+0x18>
c000dbe5:	b8 00 00 00 00       	mov    eax,0x0
c000dbea:	e9 9d 00 00 00       	jmp    c000dc8c <ACPI::close(int, int, void*)+0xb4>
c000dbef:	90                   	nop
c000dbf0:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000dbf5:	75 29                	jne    c000dc20 <ACPI::close(int, int, void*)+0x48>
c000dbf7:	a1 c8 2a 02 c0       	mov    eax,ds:0xc0022ac8
c000dbfc:	85 c0                	test   eax,eax
c000dbfe:	74 08                	je     c000dc08 <ACPI::close(int, int, void*)+0x30>
c000dc00:	a1 c8 2a 02 c0       	mov    eax,ds:0xc0022ac8
c000dc05:	ff d0                	call   eax
c000dc07:	90                   	nop
c000dc08:	83 ec 0c             	sub    esp,0xc
c000dc0b:	68 24 de 01 c0       	push   0xc001de24
c000dc10:	e8 46 25 00 00       	call   c001015b <KePanic(char const*)>
c000dc15:	83 c4 10             	add    esp,0x10
c000dc18:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc1d:	eb 6d                	jmp    c000dc8c <ACPI::close(int, int, void*)+0xb4>
c000dc1f:	90                   	nop
c000dc20:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dc25:	75 5d                	jne    c000dc84 <ACPI::close(int, int, void*)+0xac>
c000dc27:	a1 c4 2a 02 c0       	mov    eax,ds:0xc0022ac4
c000dc2c:	85 c0                	test   eax,eax
c000dc2e:	74 08                	je     c000dc38 <ACPI::close(int, int, void*)+0x60>
c000dc30:	a1 c4 2a 02 c0       	mov    eax,ds:0xc0022ac4
c000dc35:	ff d0                	call   eax
c000dc37:	90                   	nop
c000dc38:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000dc3d:	8d 76 00             	lea    esi,[esi+0x0]
c000dc40:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dc44:	25 ff 00 00 00       	and    eax,0xff
c000dc49:	83 e0 02             	and    eax,0x2
c000dc4c:	74 1e                	je     c000dc6c <ACPI::close(int, int, void*)+0x94>
c000dc4e:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000dc55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dc59:	89 c2                	mov    edx,eax
c000dc5b:	ec                   	in     al,dx
c000dc5c:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dc60:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dc64:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dc68:	eb d6                	jmp    c000dc40 <ACPI::close(int, int, void*)+0x68>
c000dc6a:	66 90                	xchg   ax,ax
c000dc6c:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000dc73:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000dc78:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000dc7c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000dc80:	ee                   	out    dx,al
c000dc81:	8d 76 00             	lea    esi,[esi+0x0]
c000dc84:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000dc89:	8d 76 00             	lea    esi,[esi+0x0]
c000dc8c:	83 c4 1c             	add    esp,0x1c
c000dc8f:	c3                   	ret    

c000dc90 <findRSDP()>:
c000dc90:	83 ec 1c             	sub    esp,0x1c
c000dc93:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000dc98:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dc9e:	83 e0 04             	and    eax,0x4
c000dca1:	84 c0                	test   al,al
c000dca3:	75 07                	jne    c000dcac <findRSDP()+0x1c>
c000dca5:	b8 00 00 00 00       	mov    eax,0x0
c000dcaa:	eb 70                	jmp    c000dd1c <findRSDP()+0x8c>
c000dcac:	a1 08 05 02 c0       	mov    eax,ds:0xc0020508
c000dcb1:	3d ff 07 00 00       	cmp    eax,0x7ff
c000dcb6:	7f 1c                	jg     c000dcd4 <findRSDP()+0x44>
c000dcb8:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000dcbd:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000dcc3:	83 e2 fb             	and    edx,0xfffffffb
c000dcc6:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000dccc:	b8 00 00 00 00       	mov    eax,0x0
c000dcd1:	eb 49                	jmp    c000dd1c <findRSDP()+0x8c>
c000dcd3:	90                   	nop
c000dcd4:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000dcdc:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000dce4:	77 2e                	ja     c000dd14 <findRSDP()+0x84>
c000dce6:	83 ec 04             	sub    esp,0x4
c000dce9:	6a 08                	push   0x8
c000dceb:	68 bf de 01 c0       	push   0xc001debf
c000dcf0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dcf4:	e8 97 26 ff ff       	call   c0000390 <memcmp>
c000dcf9:	83 c4 10             	add    esp,0x10
c000dcfc:	85 c0                	test   eax,eax
c000dcfe:	0f 94 c0             	sete   al
c000dd01:	84 c0                	test   al,al
c000dd03:	74 07                	je     c000dd0c <findRSDP()+0x7c>
c000dd05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dd09:	eb 11                	jmp    c000dd1c <findRSDP()+0x8c>
c000dd0b:	90                   	nop
c000dd0c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000dd11:	eb c9                	jmp    c000dcdc <findRSDP()+0x4c>
c000dd13:	90                   	nop
c000dd14:	b8 00 00 00 00       	mov    eax,0x0
c000dd19:	8d 76 00             	lea    esi,[esi+0x0]
c000dd1c:	83 c4 1c             	add    esp,0x1c
c000dd1f:	c3                   	ret    

c000dd20 <loadACPITables(unsigned char*)>:
c000dd20:	57                   	push   edi
c000dd21:	56                   	push   esi
c000dd22:	53                   	push   ebx
c000dd23:	83 ec 60             	sub    esp,0x60
c000dd26:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000dd2b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dd31:	83 e0 04             	and    eax,0x4
c000dd34:	84 c0                	test   al,al
c000dd36:	0f 84 3c 02 00 00    	je     c000df78 <loadACPITables(unsigned char*)+0x258>
c000dd3c:	a0 e0 2c 02 c0       	mov    al,ds:0xc0022ce0
c000dd41:	84 c0                	test   al,al
c000dd43:	74 77                	je     c000ddbc <loadACPITables(unsigned char*)+0x9c>
c000dd45:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd49:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dd4d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dd51:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dd54:	83 e8 24             	sub    eax,0x24
c000dd57:	c1 e8 03             	shr    eax,0x3
c000dd5a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dd5e:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dd66:	66 90                	xchg   ax,ax
c000dd68:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd6c:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dd70:	0f 8d b6 00 00 00    	jge    c000de2c <loadACPITables(unsigned char*)+0x10c>
c000dd76:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dd7a:	83 c0 24             	add    eax,0x24
c000dd7d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dd81:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dd85:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000dd89:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dd8d:	c1 e0 03             	shl    eax,0x3
c000dd90:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000dd94:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000dd98:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000dd9b:	8b 00                	mov    eax,DWORD PTR [eax]
c000dd9d:	89 c1                	mov    ecx,eax
c000dd9f:	a1 cc 2a 02 c0       	mov    eax,ds:0xc0022acc
c000dda4:	8d 50 01             	lea    edx,[eax+0x1]
c000dda7:	89 15 cc 2a 02 c0    	mov    DWORD PTR ds:0xc0022acc,edx
c000ddad:	89 ca                	mov    edx,ecx
c000ddaf:	89 14 c5 e4 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd51c],edx
c000ddb6:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000ddba:	eb ac                	jmp    c000dd68 <loadACPITables(unsigned char*)+0x48>
c000ddbc:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddc0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ddc4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ddcb:	83 e8 24             	sub    eax,0x24
c000ddce:	c1 e8 02             	shr    eax,0x2
c000ddd1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ddd5:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000dddd:	8d 76 00             	lea    esi,[esi+0x0]
c000dde0:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000dde4:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000dde8:	7d 42                	jge    c000de2c <loadACPITables(unsigned char*)+0x10c>
c000ddea:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ddee:	83 c0 24             	add    eax,0x24
c000ddf1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ddf5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ddf9:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ddfd:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000de01:	c1 e0 02             	shl    eax,0x2
c000de04:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000de08:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de0c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000de0e:	a1 cc 2a 02 c0       	mov    eax,ds:0xc0022acc
c000de13:	8d 50 01             	lea    edx,[eax+0x1]
c000de16:	89 15 cc 2a 02 c0    	mov    DWORD PTR ds:0xc0022acc,edx
c000de1c:	89 ca                	mov    edx,ecx
c000de1e:	89 14 c5 e4 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd51c],edx
c000de25:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000de29:	eb b5                	jmp    c000dde0 <loadACPITables(unsigned char*)+0xc0>
c000de2b:	90                   	nop
c000de2c:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000de34:	a1 cc 2a 02 c0       	mov    eax,ds:0xc0022acc
c000de39:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000de3d:	0f 8d 39 01 00 00    	jge    c000df7c <loadACPITables(unsigned char*)+0x25c>
c000de43:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de47:	8b 04 c5 e4 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd51c]
c000de4e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de56:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000de5a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de5e:	25 ff 0f 00 00       	and    eax,0xfff
c000de63:	89 c6                	mov    esi,eax
c000de65:	8b 1d d0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d0
c000de6b:	83 ec 0c             	sub    esp,0xc
c000de6e:	6a 01                	push   0x1
c000de70:	e8 18 b4 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000de75:	83 c4 10             	add    esp,0x10
c000de78:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000de7c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000de82:	83 ec 0c             	sub    esp,0xc
c000de85:	6a 01                	push   0x1
c000de87:	6a 01                	push   0x1
c000de89:	50                   	push   eax
c000de8a:	52                   	push   edx
c000de8b:	53                   	push   ebx
c000de8c:	e8 8b bd ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000de91:	83 c4 20             	add    esp,0x20
c000de94:	09 f0                	or     eax,esi
c000de96:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000de9a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000de9e:	c1 e0 03             	shl    eax,0x3
c000dea1:	05 e0 2a 02 c0       	add    eax,0xc0022ae0
c000dea6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000deaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000deb2:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000deba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000debe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dec2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dec6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000deca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000dece:	89 c6                	mov    esi,eax
c000ded0:	89 d7                	mov    edi,edx
c000ded2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ded4:	89 c8                	mov    eax,ecx
c000ded6:	89 fa                	mov    edx,edi
c000ded8:	89 f3                	mov    ebx,esi
c000deda:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000dede:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000dee2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000dee6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000deed:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000def1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000def5:	05 00 10 00 00       	add    eax,0x1000
c000defa:	c1 e8 0c             	shr    eax,0xc
c000defd:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000df01:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df05:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000df09:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000df0d:	25 ff 0f 00 00       	and    eax,0xfff
c000df12:	89 c6                	mov    esi,eax
c000df14:	8b 1d d0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d0
c000df1a:	83 ec 0c             	sub    esp,0xc
c000df1d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000df21:	e8 67 b3 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000df26:	83 c4 10             	add    esp,0x10
c000df29:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000df2d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000df33:	83 ec 0c             	sub    esp,0xc
c000df36:	6a 01                	push   0x1
c000df38:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000df3c:	50                   	push   eax
c000df3d:	52                   	push   edx
c000df3e:	53                   	push   ebx
c000df3f:	e8 d8 bc ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000df44:	83 c4 20             	add    esp,0x20
c000df47:	09 f0                	or     eax,esi
c000df49:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000df4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000df51:	83 ec 0c             	sub    esp,0xc
c000df54:	50                   	push   eax
c000df55:	e8 63 b6 ff ff       	call   c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c000df5a:	83 c4 10             	add    esp,0x10
c000df5d:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000df61:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000df65:	89 14 c5 e4 2a 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd51c],edx
c000df6c:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000df70:	e9 bf fe ff ff       	jmp    c000de34 <loadACPITables(unsigned char*)+0x114>
c000df75:	8d 76 00             	lea    esi,[esi+0x0]
c000df78:	90                   	nop
c000df79:	8d 76 00             	lea    esi,[esi+0x0]
c000df7c:	83 c4 60             	add    esp,0x60
c000df7f:	5b                   	pop    ebx
c000df80:	5e                   	pop    esi
c000df81:	5f                   	pop    edi
c000df82:	c3                   	ret    
c000df83:	90                   	nop

c000df84 <findRSDT(unsigned char*)>:
c000df84:	57                   	push   edi
c000df85:	56                   	push   esi
c000df86:	53                   	push   ebx
c000df87:	83 ec 50             	sub    esp,0x50
c000df8a:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000df8f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df95:	83 e0 04             	and    eax,0x4
c000df98:	84 c0                	test   al,al
c000df9a:	75 0c                	jne    c000dfa8 <findRSDT(unsigned char*)+0x24>
c000df9c:	b8 00 00 00 00       	mov    eax,0x0
c000dfa1:	e9 26 01 00 00       	jmp    c000e0cc <findRSDT(unsigned char*)+0x148>
c000dfa6:	66 90                	xchg   ax,ax
c000dfa8:	89 e0                	mov    eax,esp
c000dfaa:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000dfae:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000dfb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dfb6:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000dfbe:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000dfc2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dfc6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000dfca:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000dfce:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000dfd2:	89 c6                	mov    esi,eax
c000dfd4:	89 d7                	mov    edi,edx
c000dfd6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000dfd8:	89 c8                	mov    eax,ecx
c000dfda:	89 fa                	mov    edx,edi
c000dfdc:	89 f3                	mov    ebx,esi
c000dfde:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000dfe2:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000dfe6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000dfea:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dfee:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000dff2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000dffa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000dffe:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e002:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e006:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e00a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e00e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e012:	25 ff 0f 00 00       	and    eax,0xfff
c000e017:	89 c6                	mov    esi,eax
c000e019:	8b 1d d0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d0
c000e01f:	83 ec 0c             	sub    esp,0xc
c000e022:	6a 02                	push   0x2
c000e024:	e8 64 b2 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000e029:	83 c4 10             	add    esp,0x10
c000e02c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e030:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e036:	83 ec 0c             	sub    esp,0xc
c000e039:	6a 01                	push   0x1
c000e03b:	6a 02                	push   0x2
c000e03d:	50                   	push   eax
c000e03e:	52                   	push   edx
c000e03f:	53                   	push   ebx
c000e040:	e8 d7 bb ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e045:	83 c4 20             	add    esp,0x20
c000e048:	09 f0                	or     eax,esi
c000e04a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e04e:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e052:	25 ff 0f 00 00       	and    eax,0xfff
c000e057:	89 c6                	mov    esi,eax
c000e059:	8b 1d d0 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d0
c000e05f:	83 ec 0c             	sub    esp,0xc
c000e062:	6a 02                	push   0x2
c000e064:	e8 24 b2 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c000e069:	83 c4 10             	add    esp,0x10
c000e06c:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e070:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e076:	83 ec 0c             	sub    esp,0xc
c000e079:	6a 01                	push   0x1
c000e07b:	6a 02                	push   0x2
c000e07d:	50                   	push   eax
c000e07e:	52                   	push   edx
c000e07f:	53                   	push   ebx
c000e080:	e8 97 bb ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e085:	83 c4 20             	add    esp,0x20
c000e088:	09 f0                	or     eax,esi
c000e08a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e08e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e093:	75 13                	jne    c000e0a8 <findRSDT(unsigned char*)+0x124>
c000e095:	c6 05 e0 2c 02 c0 00 	mov    BYTE PTR ds:0xc0022ce0,0x0
c000e09c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e0a0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0a4:	eb 22                	jmp    c000e0c8 <findRSDT(unsigned char*)+0x144>
c000e0a6:	66 90                	xchg   ax,ax
c000e0a8:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e0ad:	75 11                	jne    c000e0c0 <findRSDT(unsigned char*)+0x13c>
c000e0af:	c6 05 e0 2c 02 c0 01 	mov    BYTE PTR ds:0xc0022ce0,0x1
c000e0b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e0ba:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e0be:	eb 08                	jmp    c000e0c8 <findRSDT(unsigned char*)+0x144>
c000e0c0:	b8 00 00 00 00       	mov    eax,0x0
c000e0c5:	eb 05                	jmp    c000e0cc <findRSDT(unsigned char*)+0x148>
c000e0c7:	90                   	nop
c000e0c8:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e0cc:	83 c4 50             	add    esp,0x50
c000e0cf:	5b                   	pop    ebx
c000e0d0:	5e                   	pop    esi
c000e0d1:	5f                   	pop    edi
c000e0d2:	c3                   	ret    
c000e0d3:	90                   	nop

c000e0d4 <findDataTable(unsigned char*, char*)>:
c000e0d4:	83 ec 1c             	sub    esp,0x1c
c000e0d7:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e0dc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e0e2:	83 e0 04             	and    eax,0x4
c000e0e5:	84 c0                	test   al,al
c000e0e7:	75 07                	jne    c000e0f0 <findDataTable(unsigned char*, char*)+0x1c>
c000e0e9:	b8 00 00 00 00       	mov    eax,0x0
c000e0ee:	eb 58                	jmp    c000e148 <findDataTable(unsigned char*, char*)+0x74>
c000e0f0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e0f8:	a1 cc 2a 02 c0       	mov    eax,ds:0xc0022acc
c000e0fd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e101:	7d 3d                	jge    c000e140 <findDataTable(unsigned char*, char*)+0x6c>
c000e103:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e107:	c1 e0 03             	shl    eax,0x3
c000e10a:	05 e0 2a 02 c0       	add    eax,0xc0022ae0
c000e10f:	83 ec 04             	sub    esp,0x4
c000e112:	6a 04                	push   0x4
c000e114:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e118:	50                   	push   eax
c000e119:	e8 72 22 ff ff       	call   c0000390 <memcmp>
c000e11e:	83 c4 10             	add    esp,0x10
c000e121:	85 c0                	test   eax,eax
c000e123:	0f 94 c0             	sete   al
c000e126:	84 c0                	test   al,al
c000e128:	74 0e                	je     c000e138 <findDataTable(unsigned char*, char*)+0x64>
c000e12a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e12e:	8b 04 c5 e4 2a 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd51c]
c000e135:	eb 11                	jmp    c000e148 <findDataTable(unsigned char*, char*)+0x74>
c000e137:	90                   	nop
c000e138:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e13c:	eb ba                	jmp    c000e0f8 <findDataTable(unsigned char*, char*)+0x24>
c000e13e:	66 90                	xchg   ax,ax
c000e140:	b8 00 00 00 00       	mov    eax,0x0
c000e145:	8d 76 00             	lea    esi,[esi+0x0]
c000e148:	83 c4 1c             	add    esp,0x1c
c000e14b:	c3                   	ret    

c000e14c <scanMADT()>:
c000e14c:	53                   	push   ebx
c000e14d:	83 ec 38             	sub    esp,0x38
c000e150:	a1 f0 04 02 c0       	mov    eax,ds:0xc00204f0
c000e155:	25 00 04 00 00       	and    eax,0x400
c000e15a:	74 14                	je     c000e170 <scanMADT()+0x24>
c000e15c:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e161:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e167:	83 e2 fb             	and    edx,0xfffffffb
c000e16a:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e170:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e175:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e17b:	83 e0 04             	and    eax,0x4
c000e17e:	84 c0                	test   al,al
c000e180:	0f 84 8a 04 00 00    	je     c000e610 <scanMADT()+0x4c4>
c000e186:	e8 05 fb ff ff       	call   c000dc90 <findRSDP()>
c000e18b:	a3 ec 2c 02 c0       	mov    ds:0xc0022cec,eax
c000e190:	a1 ec 2c 02 c0       	mov    eax,ds:0xc0022cec
c000e195:	85 c0                	test   eax,eax
c000e197:	75 1b                	jne    c000e1b4 <scanMADT()+0x68>
c000e199:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e19e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1a4:	83 e2 fb             	and    edx,0xfffffffb
c000e1a7:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1ad:	e9 66 04 00 00       	jmp    c000e618 <scanMADT()+0x4cc>
c000e1b2:	66 90                	xchg   ax,ax
c000e1b4:	a1 ec 2c 02 c0       	mov    eax,ds:0xc0022cec
c000e1b9:	83 ec 0c             	sub    esp,0xc
c000e1bc:	50                   	push   eax
c000e1bd:	e8 c2 fd ff ff       	call   c000df84 <findRSDT(unsigned char*)>
c000e1c2:	83 c4 10             	add    esp,0x10
c000e1c5:	a3 e8 2c 02 c0       	mov    ds:0xc0022ce8,eax
c000e1ca:	a1 e8 2c 02 c0       	mov    eax,ds:0xc0022ce8
c000e1cf:	85 c0                	test   eax,eax
c000e1d1:	75 19                	jne    c000e1ec <scanMADT()+0xa0>
c000e1d3:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e1d8:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e1de:	83 e2 fb             	and    edx,0xfffffffb
c000e1e1:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e1e7:	e9 2c 04 00 00       	jmp    c000e618 <scanMADT()+0x4cc>
c000e1ec:	a1 e8 2c 02 c0       	mov    eax,ds:0xc0022ce8
c000e1f1:	83 ec 0c             	sub    esp,0xc
c000e1f4:	50                   	push   eax
c000e1f5:	e8 26 fb ff ff       	call   c000dd20 <loadACPITables(unsigned char*)>
c000e1fa:	83 c4 10             	add    esp,0x10
c000e1fd:	a1 e8 2c 02 c0       	mov    eax,ds:0xc0022ce8
c000e202:	83 ec 08             	sub    esp,0x8
c000e205:	68 c8 de 01 c0       	push   0xc001dec8
c000e20a:	50                   	push   eax
c000e20b:	e8 c4 fe ff ff       	call   c000e0d4 <findDataTable(unsigned char*, char*)>
c000e210:	83 c4 10             	add    esp,0x10
c000e213:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e217:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e21c:	75 1a                	jne    c000e238 <scanMADT()+0xec>
c000e21e:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e223:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e229:	83 e2 fe             	and    edx,0xfffffffe
c000e22c:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e232:	e9 e1 03 00 00       	jmp    c000e618 <scanMADT()+0x4cc>
c000e237:	90                   	nop
c000e238:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e240:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e244:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e247:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e24b:	0f 87 c7 03 00 00    	ja     c000e618 <scanMADT()+0x4cc>
c000e251:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e259:	0f 87 b9 03 00 00    	ja     c000e618 <scanMADT()+0x4cc>
c000e25f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e263:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e267:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e26b:	8d 50 01             	lea    edx,[eax+0x1]
c000e26e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e272:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e276:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e27a:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e27e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e282:	8d 50 01             	lea    edx,[eax+0x1]
c000e285:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e289:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e28d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e291:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e295:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e29a:	0f 86 74 03 00 00    	jbe    c000e614 <scanMADT()+0x4c8>
c000e2a0:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e2a5:	75 5d                	jne    c000e304 <scanMADT()+0x1b8>
c000e2a7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e2ab:	8d 50 01             	lea    edx,[eax+0x1]
c000e2ae:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e2b2:	8a 15 e0 2e 02 c0    	mov    dl,BYTE PTR ds:0xc0022ee0
c000e2b8:	81 e2 ff 00 00 00    	and    edx,0xff
c000e2be:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2c2:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e2c6:	88 82 20 2f 02 c0    	mov    BYTE PTR [edx-0x3ffdd0e0],al
c000e2cc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e2d0:	8d 42 01             	lea    eax,[edx+0x1]
c000e2d3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e2d7:	a0 e0 2e 02 c0       	mov    al,ds:0xc0022ee0
c000e2dc:	8d 48 01             	lea    ecx,[eax+0x1]
c000e2df:	88 0d e0 2e 02 c0    	mov    BYTE PTR ds:0xc0022ee0,cl
c000e2e5:	25 ff 00 00 00       	and    eax,0xff
c000e2ea:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e2ee:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e2f2:	88 90 00 2f 02 c0    	mov    BYTE PTR [eax-0x3ffdd100],dl
c000e2f8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e2fd:	e9 f6 02 00 00       	jmp    c000e5f8 <scanMADT()+0x4ac>
c000e302:	66 90                	xchg   ax,ax
c000e304:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e309:	0f 85 29 01 00 00    	jne    c000e438 <scanMADT()+0x2ec>
c000e30f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e313:	8d 50 01             	lea    edx,[eax+0x1]
c000e316:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e31a:	8a 15 a0 2d 02 c0    	mov    dl,BYTE PTR ds:0xc0022da0
c000e320:	81 e2 ff 00 00 00    	and    edx,0xff
c000e326:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e32a:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e32e:	88 82 c0 2d 02 c0    	mov    BYTE PTR [edx-0x3ffdd240],al
c000e334:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e338:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e33c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e340:	01 d0                	add    eax,edx
c000e342:	83 c0 2c             	add    eax,0x2c
c000e345:	8a 00                	mov    al,BYTE PTR [eax]
c000e347:	31 d2                	xor    edx,edx
c000e349:	88 c2                	mov    dl,al
c000e34b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e34f:	8d 48 01             	lea    ecx,[eax+0x1]
c000e352:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e356:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e35a:	25 ff 00 00 00       	and    eax,0xff
c000e35f:	c1 e0 08             	shl    eax,0x8
c000e362:	89 d1                	mov    ecx,edx
c000e364:	09 c1                	or     ecx,eax
c000e366:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e36a:	8d 50 02             	lea    edx,[eax+0x2]
c000e36d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e371:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e375:	25 ff 00 00 00       	and    eax,0xff
c000e37a:	c1 e0 10             	shl    eax,0x10
c000e37d:	09 c1                	or     ecx,eax
c000e37f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e383:	8d 50 03             	lea    edx,[eax+0x3]
c000e386:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e38a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e38e:	25 ff 00 00 00       	and    eax,0xff
c000e393:	c1 e0 18             	shl    eax,0x18
c000e396:	09 c1                	or     ecx,eax
c000e398:	89 ca                	mov    edx,ecx
c000e39a:	a0 a0 2d 02 c0       	mov    al,ds:0xc0022da0
c000e39f:	25 ff 00 00 00       	and    eax,0xff
c000e3a4:	89 14 85 e0 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd220],edx
c000e3ab:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e3b0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e3b4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3b8:	01 d0                	add    eax,edx
c000e3ba:	83 c0 2c             	add    eax,0x2c
c000e3bd:	8a 00                	mov    al,BYTE PTR [eax]
c000e3bf:	31 d2                	xor    edx,edx
c000e3c1:	88 c2                	mov    dl,al
c000e3c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3c7:	8d 48 01             	lea    ecx,[eax+0x1]
c000e3ca:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3ce:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e3d2:	25 ff 00 00 00       	and    eax,0xff
c000e3d7:	c1 e0 08             	shl    eax,0x8
c000e3da:	89 d1                	mov    ecx,edx
c000e3dc:	09 c1                	or     ecx,eax
c000e3de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3e2:	8d 50 02             	lea    edx,[eax+0x2]
c000e3e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e3e9:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e3ed:	25 ff 00 00 00       	and    eax,0xff
c000e3f2:	c1 e0 10             	shl    eax,0x10
c000e3f5:	09 c1                	or     ecx,eax
c000e3f7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e3fb:	8d 50 03             	lea    edx,[eax+0x3]
c000e3fe:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e402:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e406:	25 ff 00 00 00       	and    eax,0xff
c000e40b:	c1 e0 18             	shl    eax,0x18
c000e40e:	09 c1                	or     ecx,eax
c000e410:	89 ca                	mov    edx,ecx
c000e412:	a0 a0 2d 02 c0       	mov    al,ds:0xc0022da0
c000e417:	25 ff 00 00 00       	and    eax,0xff
c000e41c:	89 14 85 60 2e 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd1a0],edx
c000e423:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e428:	a0 a0 2d 02 c0       	mov    al,ds:0xc0022da0
c000e42d:	40                   	inc    eax
c000e42e:	a2 a0 2d 02 c0       	mov    ds:0xc0022da0,al
c000e433:	e9 c0 01 00 00       	jmp    c000e5f8 <scanMADT()+0x4ac>
c000e438:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e43d:	0f 85 fd 00 00 00    	jne    c000e540 <scanMADT()+0x3f4>
c000e443:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e447:	8d 50 01             	lea    edx,[eax+0x1]
c000e44a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e44e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e452:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e456:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e45a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e45e:	8d 50 01             	lea    edx,[eax+0x1]
c000e461:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e465:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e469:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e46d:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e471:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e475:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e479:	01 d0                	add    eax,edx
c000e47b:	83 c0 2c             	add    eax,0x2c
c000e47e:	8a 00                	mov    al,BYTE PTR [eax]
c000e480:	31 d2                	xor    edx,edx
c000e482:	88 c2                	mov    dl,al
c000e484:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e488:	8d 48 01             	lea    ecx,[eax+0x1]
c000e48b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e48f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e493:	25 ff 00 00 00       	and    eax,0xff
c000e498:	c1 e0 08             	shl    eax,0x8
c000e49b:	89 d1                	mov    ecx,edx
c000e49d:	09 c1                	or     ecx,eax
c000e49f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4a3:	8d 50 02             	lea    edx,[eax+0x2]
c000e4a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4aa:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4ae:	25 ff 00 00 00       	and    eax,0xff
c000e4b3:	c1 e0 10             	shl    eax,0x10
c000e4b6:	09 c1                	or     ecx,eax
c000e4b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4bc:	8d 50 03             	lea    edx,[eax+0x3]
c000e4bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4c3:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e4c7:	25 ff 00 00 00       	and    eax,0xff
c000e4cc:	c1 e0 18             	shl    eax,0x18
c000e4cf:	09 c8                	or     eax,ecx
c000e4d1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e4d5:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e4da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4de:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4e2:	01 d0                	add    eax,edx
c000e4e4:	83 c0 2c             	add    eax,0x2c
c000e4e7:	8a 00                	mov    al,BYTE PTR [eax]
c000e4e9:	25 ff 00 00 00       	and    eax,0xff
c000e4ee:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e4f2:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e4f5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4f9:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e4fd:	81 e2 ff 00 00 00    	and    edx,0xff
c000e503:	c1 e2 08             	shl    edx,0x8
c000e506:	09 d0                	or     eax,edx
c000e508:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e50d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e512:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e516:	25 ff 00 00 00       	and    eax,0xff
c000e51b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e51f:	88 90 00 f2 01 c0    	mov    BYTE PTR [eax-0x3ffe0e00],dl
c000e525:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e529:	31 d2                	xor    edx,edx
c000e52b:	88 c2                	mov    dl,al
c000e52d:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e532:	66 89 84 12 80 2d 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd280],ax
c000e53a:	e9 b9 00 00 00       	jmp    c000e5f8 <scanMADT()+0x4ac>
c000e53f:	90                   	nop
c000e540:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e545:	0f 85 a1 00 00 00    	jne    c000e5ec <scanMADT()+0x4a0>
c000e54b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e54f:	8d 50 01             	lea    edx,[eax+0x1]
c000e552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e556:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e55a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e55e:	25 ff 00 00 00       	and    eax,0xff
c000e563:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e567:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e56b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e56f:	01 d0                	add    eax,edx
c000e571:	83 c0 2c             	add    eax,0x2c
c000e574:	8a 00                	mov    al,BYTE PTR [eax]
c000e576:	31 d2                	xor    edx,edx
c000e578:	88 c2                	mov    dl,al
c000e57a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e57e:	8d 48 01             	lea    ecx,[eax+0x1]
c000e581:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e585:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e589:	25 ff 00 00 00       	and    eax,0xff
c000e58e:	c1 e0 08             	shl    eax,0x8
c000e591:	09 d0                	or     eax,edx
c000e593:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e597:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e59c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5a0:	8d 50 01             	lea    edx,[eax+0x1]
c000e5a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e5a7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5ab:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e5af:	25 ff 00 00 00       	and    eax,0xff
c000e5b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e5bc:	c1 e0 08             	shl    eax,0x8
c000e5bf:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e5c3:	89 c1                	mov    ecx,eax
c000e5c5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e5c9:	c1 e0 18             	shl    eax,0x18
c000e5cc:	89 c3                	mov    ebx,eax
c000e5ce:	a1 f0 2c 02 c0       	mov    eax,ds:0xc0022cf0
c000e5d3:	8d 50 01             	lea    edx,[eax+0x1]
c000e5d6:	89 15 f0 2c 02 c0    	mov    DWORD PTR ds:0xc0022cf0,edx
c000e5dc:	09 d9                	or     ecx,ebx
c000e5de:	89 ca                	mov    edx,ecx
c000e5e0:	89 14 85 00 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd300],edx
c000e5e7:	eb 0f                	jmp    c000e5f8 <scanMADT()+0x4ac>
c000e5e9:	8d 76 00             	lea    esi,[esi+0x0]
c000e5ec:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e5f1:	75 05                	jne    c000e5f8 <scanMADT()+0x4ac>
c000e5f3:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e5f8:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e5fc:	31 d2                	xor    edx,edx
c000e5fe:	88 c2                	mov    dl,al
c000e600:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e604:	01 d0                	add    eax,edx
c000e606:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e60a:	e9 31 fc ff ff       	jmp    c000e240 <scanMADT()+0xf4>
c000e60f:	90                   	nop
c000e610:	90                   	nop
c000e611:	eb 05                	jmp    c000e618 <scanMADT()+0x4cc>
c000e613:	90                   	nop
c000e614:	90                   	nop
c000e615:	8d 76 00             	lea    esi,[esi+0x0]
c000e618:	83 c4 38             	add    esp,0x38
c000e61b:	5b                   	pop    ebx
c000e61c:	c3                   	ret    
c000e61d:	90                   	nop
c000e61e:	66 90                	xchg   ax,ax

c000e620 <ACPI::ACPI()>:
c000e620:	83 ec 0c             	sub    esp,0xc
c000e623:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e627:	83 ec 08             	sub    esp,0x8
c000e62a:	68 cd de 01 c0       	push   0xc001decd
c000e62f:	50                   	push   eax
c000e630:	e8 83 d4 ff ff       	call   c000bab8 <Device::Device(char const*)>
c000e635:	83 c4 10             	add    esp,0x10
c000e638:	ba 04 e0 01 c0       	mov    edx,0xc001e004
c000e63d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e641:	89 10                	mov    DWORD PTR [eax],edx
c000e643:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e647:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e64e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e652:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e65c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e660:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e66a:	e8 dd fa ff ff       	call   c000e14c <scanMADT()>
c000e66f:	90                   	nop
c000e670:	83 c4 0c             	add    esp,0xc
c000e673:	c3                   	ret    

c000e674 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e674:	83 ec 2c             	sub    esp,0x2c
c000e677:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e67b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e67f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e683:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e687:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e68c:	88 d0                	mov    al,dl
c000e68e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e692:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e697:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e69f:	90                   	nop
c000e6a0:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6a4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e6aa:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e6ae:	0f 8d 9c 00 00 00    	jge    c000e750 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e6b4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6b8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6bc:	83 c2 2a             	add    edx,0x2a
c000e6bf:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e6c3:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e6c8:	75 7a                	jne    c000e744 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6ca:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6ce:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6d2:	83 c2 2a             	add    edx,0x2a
c000e6d5:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e6d9:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e6dd:	75 65                	jne    c000e744 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e6df:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e6e4:	74 3a                	je     c000e720 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e6e6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e6ea:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e6ee:	83 c2 2a             	add    edx,0x2a
c000e6f1:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e6f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e6f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e6fc:	39 c2                	cmp    edx,eax
c000e6fe:	74 10                	je     c000e710 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e700:	83 ec 0c             	sub    esp,0xc
c000e703:	68 48 de 01 c0       	push   0xc001de48
c000e708:	e8 4e 1a 00 00       	call   c001015b <KePanic(char const*)>
c000e70d:	83 c4 10             	add    esp,0x10
c000e710:	83 ec 0c             	sub    esp,0xc
c000e713:	68 d2 de 01 c0       	push   0xc001ded2
c000e718:	e8 3e 1a 00 00       	call   c001015b <KePanic(char const*)>
c000e71d:	83 c4 10             	add    esp,0x10
c000e720:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e724:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e728:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e72c:	83 c2 2a             	add    edx,0x2a
c000e72f:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e733:	8b 02                	mov    eax,DWORD PTR [edx]
c000e735:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e738:	89 01                	mov    DWORD PTR [ecx],eax
c000e73a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e73d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e742:	66 90                	xchg   ax,ax
c000e744:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e748:	e9 53 ff ff ff       	jmp    c000e6a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e74d:	8d 76 00             	lea    esi,[esi+0x0]
c000e750:	90                   	nop
c000e751:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e755:	83 c4 2c             	add    esp,0x2c
c000e758:	c2 04 00             	ret    0x4
c000e75b:	90                   	nop

c000e75c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e75c:	83 ec 1c             	sub    esp,0x1c
c000e75f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e763:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e767:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e76b:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e770:	88 c8                	mov    al,cl
c000e772:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e776:	88 d0                	mov    al,dl
c000e778:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e77c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e780:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e786:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e78a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e78d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000e791:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000e795:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e799:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e79f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000e7a3:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000e7a6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e7aa:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000e7af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7b3:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7b9:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000e7bd:	8d 48 01             	lea    ecx,[eax+0x1]
c000e7c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7c4:	83 c2 2a             	add    edx,0x2a
c000e7c7:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000e7cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7cf:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000e7d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7d9:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000e7dc:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e7e0:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000e7e4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7e8:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e7ee:	8d 50 01             	lea    edx,[eax+0x1]
c000e7f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7f5:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000e7fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e7ff:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e805:	3d 00 02 00 00       	cmp    eax,0x200
c000e80a:	75 10                	jne    c000e81c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000e80c:	83 ec 0c             	sub    esp,0xc
c000e80f:	68 e1 de 01 c0       	push   0xc001dee1
c000e814:	e8 42 19 00 00       	call   c001015b <KePanic(char const*)>
c000e819:	83 c4 10             	add    esp,0x10
c000e81c:	90                   	nop
c000e81d:	83 c4 1c             	add    esp,0x1c
c000e820:	c3                   	ret    
c000e821:	90                   	nop
c000e822:	66 90                	xchg   ax,ax

c000e824 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000e824:	b8 00 00 00 00       	mov    eax,0x0
c000e829:	c3                   	ret    
c000e82a:	66 90                	xchg   ax,ax

c000e82c <ACPI::detectPCI()>:
c000e82c:	53                   	push   ebx
c000e82d:	83 ec 28             	sub    esp,0x28
c000e830:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e835:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000e83a:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000e83f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e845:	83 e0 04             	and    eax,0x4
c000e848:	84 c0                	test   al,al
c000e84a:	74 2c                	je     c000e878 <ACPI::detectPCI()+0x4c>
c000e84c:	a1 e8 2c 02 c0       	mov    eax,ds:0xc0022ce8
c000e851:	83 ec 08             	sub    esp,0x8
c000e854:	68 fe de 01 c0       	push   0xc001defe
c000e859:	50                   	push   eax
c000e85a:	e8 75 f8 ff ff       	call   c000e0d4 <findDataTable(unsigned char*, char*)>
c000e85f:	83 c4 10             	add    esp,0x10
c000e862:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e866:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000e86b:	74 0b                	je     c000e878 <ACPI::detectPCI()+0x4c>
c000e86d:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e872:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e877:	90                   	nop
c000e878:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000e880:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e884:	8a 00                	mov    al,BYTE PTR [eax]
c000e886:	3c 01                	cmp    al,0x1
c000e888:	75 0e                	jne    c000e898 <ACPI::detectPCI()+0x6c>
c000e88a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e88f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e894:	eb 2a                	jmp    c000e8c0 <ACPI::detectPCI()+0x94>
c000e896:	66 90                	xchg   ax,ax
c000e898:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000e89c:	8a 00                	mov    al,BYTE PTR [eax]
c000e89e:	3c 02                	cmp    al,0x2
c000e8a0:	75 1e                	jne    c000e8c0 <ACPI::detectPCI()+0x94>
c000e8a2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8a7:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8ac:	74 12                	je     c000e8c0 <ACPI::detectPCI()+0x94>
c000e8ae:	83 ec 0c             	sub    esp,0xc
c000e8b1:	68 78 de 01 c0       	push   0xc001de78
c000e8b6:	e8 a0 18 00 00       	call   c001015b <KePanic(char const*)>
c000e8bb:	83 c4 10             	add    esp,0x10
c000e8be:	66 90                	xchg   ax,ax
c000e8c0:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000e8c4:	83 f0 01             	xor    eax,0x1
c000e8c7:	84 c0                	test   al,al
c000e8c9:	74 41                	je     c000e90c <ACPI::detectPCI()+0xe0>
c000e8cb:	e8 60 18 ff ff       	call   c0000130 <manualPCIProbe>
c000e8d0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8d4:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000e8d9:	75 0d                	jne    c000e8e8 <ACPI::detectPCI()+0xbc>
c000e8db:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8e0:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000e8e5:	eb 25                	jmp    c000e90c <ACPI::detectPCI()+0xe0>
c000e8e7:	90                   	nop
c000e8e8:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000e8ed:	75 1d                	jne    c000e90c <ACPI::detectPCI()+0xe0>
c000e8ef:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e8f4:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e8f9:	74 11                	je     c000e90c <ACPI::detectPCI()+0xe0>
c000e8fb:	83 ec 0c             	sub    esp,0xc
c000e8fe:	68 78 de 01 c0       	push   0xc001de78
c000e903:	e8 53 18 00 00       	call   c001015b <KePanic(char const*)>
c000e908:	83 c4 10             	add    esp,0x10
c000e90b:	90                   	nop
c000e90c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e911:	0f 84 85 00 00 00    	je     c000e99c <ACPI::detectPCI()+0x170>
c000e917:	83 ec 0c             	sub    esp,0xc
c000e91a:	68 03 df 01 c0       	push   0xc001df03
c000e91f:	e8 bf 11 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000e924:	83 c4 10             	add    esp,0x10
c000e927:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000e92f:	83 ec 0c             	sub    esp,0xc
c000e932:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e936:	e8 7e 8e ff ff       	call   c00077b9 <malloc>
c000e93b:	83 c4 10             	add    esp,0x10
c000e93e:	89 c3                	mov    ebx,eax
c000e940:	83 ec 0c             	sub    esp,0xc
c000e943:	53                   	push   ebx
c000e944:	e8 e1 96 00 00       	call   c001802a <PCI::PCI()>
c000e949:	83 c4 10             	add    esp,0x10
c000e94c:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e950:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e954:	83 ec 08             	sub    esp,0x8
c000e957:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e95b:	50                   	push   eax
c000e95c:	e8 bf cf ff ff       	call   c000b920 <Device::addChild(Device*)>
c000e961:	83 c4 10             	add    esp,0x10
c000e964:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e968:	8b 00                	mov    eax,DWORD PTR [eax]
c000e96a:	83 c0 08             	add    eax,0x8
c000e96d:	8b 00                	mov    eax,DWORD PTR [eax]
c000e96f:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000e974:	74 0a                	je     c000e980 <ACPI::detectPCI()+0x154>
c000e976:	ba 01 00 00 00       	mov    edx,0x1
c000e97b:	eb 0b                	jmp    c000e988 <ACPI::detectPCI()+0x15c>
c000e97d:	8d 76 00             	lea    esi,[esi+0x0]
c000e980:	ba 02 00 00 00       	mov    edx,0x2
c000e985:	8d 76 00             	lea    esi,[esi+0x0]
c000e988:	6a 00                	push   0x0
c000e98a:	6a 00                	push   0x0
c000e98c:	52                   	push   edx
c000e98d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e991:	ff d0                	call   eax
c000e993:	83 c4 10             	add    esp,0x10
c000e996:	e9 91 00 00 00       	jmp    c000ea2c <ACPI::detectPCI()+0x200>
c000e99b:	90                   	nop
c000e99c:	83 ec 0c             	sub    esp,0xc
c000e99f:	68 1b df 01 c0       	push   0xc001df1b
c000e9a4:	e8 3a 11 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000e9a9:	83 c4 10             	add    esp,0x10
c000e9ac:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000e9b3:	83 ec 0c             	sub    esp,0xc
c000e9b6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e9ba:	e8 fa 8d ff ff       	call   c00077b9 <malloc>
c000e9bf:	83 c4 10             	add    esp,0x10
c000e9c2:	89 c3                	mov    ebx,eax
c000e9c4:	83 ec 0c             	sub    esp,0xc
c000e9c7:	53                   	push   ebx
c000e9c8:	e8 89 a1 00 00       	call   c0018b56 <IDE::IDE()>
c000e9cd:	83 c4 10             	add    esp,0x10
c000e9d0:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000e9d4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9d8:	83 ec 08             	sub    esp,0x8
c000e9db:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e9df:	50                   	push   eax
c000e9e0:	e8 3b cf ff ff       	call   c000b920 <Device::addChild(Device*)>
c000e9e5:	83 c4 10             	add    esp,0x10
c000e9e8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9ec:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000e9f6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e9fa:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ea03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea07:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ea10:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ea14:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea16:	83 c0 08             	add    eax,0x8
c000ea19:	8b 00                	mov    eax,DWORD PTR [eax]
c000ea1b:	6a 00                	push   0x0
c000ea1d:	6a 00                	push   0x0
c000ea1f:	6a 00                	push   0x0
c000ea21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ea25:	ff d0                	call   eax
c000ea27:	83 c4 10             	add    esp,0x10
c000ea2a:	66 90                	xchg   ax,ax
c000ea2c:	90                   	nop
c000ea2d:	83 c4 28             	add    esp,0x28
c000ea30:	5b                   	pop    ebx
c000ea31:	c3                   	ret    
c000ea32:	66 90                	xchg   ax,ax

c000ea34 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ea34:	83 ec 1c             	sub    esp,0x1c
c000ea37:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ea3b:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ea3e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ea42:	8b 15 d8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204d8
c000ea48:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea4c:	25 ff 00 00 00       	and    eax,0xff
c000ea51:	83 ec 08             	sub    esp,0x8
c000ea54:	50                   	push   eax
c000ea55:	52                   	push   edx
c000ea56:	e8 4b 84 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c000ea5b:	83 c4 10             	add    esp,0x10
c000ea5e:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ea62:	8b 15 d8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204d8
c000ea68:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ea6c:	25 ff 00 00 00       	and    eax,0xff
c000ea71:	83 ec 04             	sub    esp,0x4
c000ea74:	6a 01                	push   0x1
c000ea76:	50                   	push   eax
c000ea77:	52                   	push   edx
c000ea78:	e8 3f 85 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c000ea7d:	83 c4 10             	add    esp,0x10
c000ea80:	90                   	nop
c000ea81:	83 c4 1c             	add    esp,0x1c
c000ea84:	c3                   	ret    
c000ea85:	90                   	nop
c000ea86:	66 90                	xchg   ax,ax

c000ea88 <ACPI::sleep()>:
c000ea88:	83 ec 0c             	sub    esp,0xc
c000ea8b:	a1 c0 2a 02 c0       	mov    eax,ds:0xc0022ac0
c000ea90:	85 c0                	test   eax,eax
c000ea92:	74 08                	je     c000ea9c <ACPI::sleep()+0x14>
c000ea94:	a1 c0 2a 02 c0       	mov    eax,ds:0xc0022ac0
c000ea99:	ff d0                	call   eax
c000ea9b:	90                   	nop
c000ea9c:	90                   	nop
c000ea9d:	83 c4 0c             	add    esp,0xc
c000eaa0:	c3                   	ret    
c000eaa1:	90                   	nop
c000eaa2:	66 90                	xchg   ax,ax

c000eaa4 <ACPI::open(int, int, void*)>:
c000eaa4:	57                   	push   edi
c000eaa5:	56                   	push   esi
c000eaa6:	53                   	push   ebx
c000eaa7:	81 ec 70 01 00 00    	sub    esp,0x170
c000eaad:	83 ec 0c             	sub    esp,0xc
c000eab0:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eab7:	e8 70 fd ff ff       	call   c000e82c <ACPI::detectPCI()>
c000eabc:	83 c4 10             	add    esp,0x10
c000eabf:	83 ec 0c             	sub    esp,0xc
c000eac2:	68 a0 de 01 c0       	push   0xc001dea0
c000eac7:	e8 17 10 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000eacc:	83 c4 10             	add    esp,0x10
c000eacf:	83 ec 0c             	sub    esp,0xc
c000ead2:	68 30 df 01 c0       	push   0xc001df30
c000ead7:	e8 27 34 00 00       	call   c0011f03 <Thr::loadKernelSymbolTable(char const*)>
c000eadc:	83 c4 10             	add    esp,0x10
c000eadf:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000eae7:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000eaf2:	83 ec 0c             	sub    esp,0xc
c000eaf5:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eafc:	e8 b8 8c ff ff       	call   c00077b9 <malloc>
c000eb01:	83 c4 10             	add    esp,0x10
c000eb04:	89 c3                	mov    ebx,eax
c000eb06:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c000eb0b:	83 ec 04             	sub    esp,0x4
c000eb0e:	50                   	push   eax
c000eb0f:	68 4e df 01 c0       	push   0xc001df4e
c000eb14:	53                   	push   ebx
c000eb15:	e8 3c bf ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c000eb1a:	83 c4 10             	add    esp,0x10
c000eb1d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eb24:	83 ec 08             	sub    esp,0x8
c000eb27:	6a 01                	push   0x1
c000eb29:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb30:	e8 e1 bf ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c000eb35:	83 c4 10             	add    esp,0x10
c000eb38:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000eb3f:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000eb47:	75 17                	jne    c000eb60 <ACPI::open(int, int, void*)+0xbc>
c000eb49:	83 ec 0c             	sub    esp,0xc
c000eb4c:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb53:	e8 1c c0 ff ff       	call   c000ab74 <File::close()>
c000eb58:	83 c4 10             	add    esp,0x10
c000eb5b:	eb 0b                	jmp    c000eb68 <ACPI::open(int, int, void*)+0xc4>
c000eb5d:	8d 76 00             	lea    esi,[esi+0x0]
c000eb60:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000eb68:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000eb70:	74 1e                	je     c000eb90 <ACPI::open(int, int, void*)+0xec>
c000eb72:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000eb79:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb7b:	83 c0 08             	add    eax,0x8
c000eb7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000eb80:	83 ec 0c             	sub    esp,0xc
c000eb83:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000eb8a:	ff d0                	call   eax
c000eb8c:	83 c4 10             	add    esp,0x10
c000eb8f:	90                   	nop
c000eb90:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000eb97:	83 f0 01             	xor    eax,0x1
c000eb9a:	84 c0                	test   al,al
c000eb9c:	74 42                	je     c000ebe0 <ACPI::open(int, int, void*)+0x13c>
c000eb9e:	83 ec 0c             	sub    esp,0xc
c000eba1:	68 6c df 01 c0       	push   0xc001df6c
c000eba6:	e8 38 0f 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000ebab:	83 c4 10             	add    esp,0x10
c000ebae:	83 ec 04             	sub    esp,0x4
c000ebb1:	6a 0c                	push   0xc
c000ebb3:	68 87 df 01 c0       	push   0xc001df87
c000ebb8:	68 98 df 01 c0       	push   0xc001df98
c000ebbd:	e8 6c 29 00 00       	call   c001152e <Reg::readIntWithDefault(char*, char*, int)>
c000ebc2:	83 c4 10             	add    esp,0x10
c000ebc5:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ebcc:	83 ec 0c             	sub    esp,0xc
c000ebcf:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ebd6:	e8 bc a8 ff ff       	call   c0009497 <Virt::setupPageSwapping(int)>
c000ebdb:	83 c4 10             	add    esp,0x10
c000ebde:	66 90                	xchg   ax,ax
c000ebe0:	83 ec 0c             	sub    esp,0xc
c000ebe3:	68 17 d0 01 c0       	push   0xc001d017
c000ebe8:	e8 f6 0e 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000ebed:	83 c4 10             	add    esp,0x10
c000ebf0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ebf7:	83 ec 08             	sub    esp,0x8
c000ebfa:	6a 12                	push   0x12
c000ebfc:	50                   	push   eax
c000ebfd:	e8 36 d0 ff ff       	call   c000bc38 <getDevicesOfType(DeviceType)>
c000ec02:	83 c4 0c             	add    esp,0xc
c000ec05:	8d 76 00             	lea    esi,[esi+0x0]
c000ec08:	83 ec 0c             	sub    esp,0xc
c000ec0b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec12:	50                   	push   eax
c000ec13:	e8 44 d8 00 00       	call   c001c45c <LinkedList<Device>::isEmpty()>
c000ec18:	83 c4 10             	add    esp,0x10
c000ec1b:	83 f0 01             	xor    eax,0x1
c000ec1e:	84 c0                	test   al,al
c000ec20:	0f 84 46 01 00 00    	je     c000ed6c <ACPI::open(int, int, void*)+0x2c8>
c000ec26:	83 ec 0c             	sub    esp,0xc
c000ec29:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec30:	50                   	push   eax
c000ec31:	e8 42 d8 00 00       	call   c001c478 <LinkedList<Device>::getFirstElement()>
c000ec36:	83 c4 10             	add    esp,0x10
c000ec39:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000ec40:	83 ec 0c             	sub    esp,0xc
c000ec43:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ec4a:	50                   	push   eax
c000ec4b:	e8 30 d8 00 00       	call   c001c480 <LinkedList<Device>::removeFirst()>
c000ec50:	83 c4 10             	add    esp,0x10
c000ec53:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000ec5a:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000ec61:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000ec68:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ec6c:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000ec72:	ba 09 00 00 00       	mov    edx,0x9
c000ec77:	fc                   	cld    
c000ec78:	89 c7                	mov    edi,eax
c000ec7a:	89 de                	mov    esi,ebx
c000ec7c:	89 d1                	mov    ecx,edx
c000ec7e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ec80:	83 ec 08             	sub    esp,0x8
c000ec83:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ec87:	50                   	push   eax
c000ec88:	83 ec 24             	sub    esp,0x24
c000ec8b:	89 e0                	mov    eax,esp
c000ec8d:	89 c3                	mov    ebx,eax
c000ec8f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ec93:	ba 09 00 00 00       	mov    edx,0x9
c000ec98:	89 df                	mov    edi,ebx
c000ec9a:	89 c6                	mov    esi,eax
c000ec9c:	89 d1                	mov    ecx,edx
c000ec9e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000eca0:	e8 67 98 00 00       	call   c001850c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000eca5:	83 c4 30             	add    esp,0x30
c000eca8:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ecaf:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ecb7:	0f 84 4b ff ff ff    	je     c000ec08 <ACPI::open(int, int, void*)+0x164>
c000ecbd:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ecc8:	83 ec 0c             	sub    esp,0xc
c000eccb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ecd2:	e8 e2 8a ff ff       	call   c00077b9 <malloc>
c000ecd7:	83 c4 10             	add    esp,0x10
c000ecda:	89 c3                	mov    ebx,eax
c000ecdc:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c000ece1:	83 ec 04             	sub    esp,0x4
c000ece4:	50                   	push   eax
c000ece5:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ecec:	53                   	push   ebx
c000eced:	e8 64 bd ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c000ecf2:	83 c4 10             	add    esp,0x10
c000ecf5:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ecfc:	83 ec 0c             	sub    esp,0xc
c000ecff:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed06:	e8 79 c0 ff ff       	call   c000ad84 <File::exists()>
c000ed0b:	83 c4 10             	add    esp,0x10
c000ed0e:	84 c0                	test   al,al
c000ed10:	74 2a                	je     c000ed3c <ACPI::open(int, int, void*)+0x298>
c000ed12:	83 ec 08             	sub    esp,0x8
c000ed15:	6a 01                	push   0x1
c000ed17:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed1e:	e8 57 3c 00 00       	call   c001297a <Thr::loadDLL(char const*, bool)>
c000ed23:	83 c4 10             	add    esp,0x10
c000ed26:	83 ec 08             	sub    esp,0x8
c000ed29:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ed30:	50                   	push   eax
c000ed31:	e8 75 3e 00 00       	call   c0012bab <Thr::executeDLL(unsigned long, void*)>
c000ed36:	83 c4 10             	add    esp,0x10
c000ed39:	8d 76 00             	lea    esi,[esi+0x0]
c000ed3c:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000ed44:	0f 84 be fe ff ff    	je     c000ec08 <ACPI::open(int, int, void*)+0x164>
c000ed4a:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000ed51:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed53:	83 c0 08             	add    eax,0x8
c000ed56:	8b 00                	mov    eax,DWORD PTR [eax]
c000ed58:	83 ec 0c             	sub    esp,0xc
c000ed5b:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ed62:	ff d0                	call   eax
c000ed64:	83 c4 10             	add    esp,0x10
c000ed67:	e9 9c fe ff ff       	jmp    c000ec08 <ACPI::open(int, int, void*)+0x164>
c000ed6c:	83 ec 0c             	sub    esp,0xc
c000ed6f:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ed76:	50                   	push   eax
c000ed77:	e8 dc d6 00 00       	call   c001c458 <LinkedList<Device>::~LinkedList()>
c000ed7c:	83 c4 10             	add    esp,0x10
c000ed7f:	8b 1d d8 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204d8
c000ed85:	83 ec 08             	sub    esp,0x8
c000ed88:	6a 01                	push   0x1
c000ed8a:	68 9f df 01 c0       	push   0xc001df9f
c000ed8f:	e8 e6 3b 00 00       	call   c001297a <Thr::loadDLL(char const*, bool)>
c000ed94:	83 c4 10             	add    esp,0x10
c000ed97:	83 ec 08             	sub    esp,0x8
c000ed9a:	53                   	push   ebx
c000ed9b:	50                   	push   eax
c000ed9c:	e8 0a 3e 00 00       	call   c0012bab <Thr::executeDLL(unsigned long, void*)>
c000eda1:	83 c4 10             	add    esp,0x10
c000eda4:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000eda9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000edaf:	83 e0 04             	and    eax,0x4
c000edb2:	84 c0                	test   al,al
c000edb4:	0f 84 16 01 00 00    	je     c000eed0 <ACPI::open(int, int, void*)+0x42c>
c000edba:	83 ec 0c             	sub    esp,0xc
c000edbd:	68 bc df 01 c0       	push   0xc001dfbc
c000edc2:	e8 1c 0d 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000edc7:	83 c4 10             	add    esp,0x10
c000edca:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000edd5:	83 ec 0c             	sub    esp,0xc
c000edd8:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000eddf:	e8 d5 89 ff ff       	call   c00077b9 <malloc>
c000ede4:	83 c4 10             	add    esp,0x10
c000ede7:	89 c3                	mov    ebx,eax
c000ede9:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c000edee:	83 ec 04             	sub    esp,0x4
c000edf1:	50                   	push   eax
c000edf2:	68 d9 df 01 c0       	push   0xc001dfd9
c000edf7:	53                   	push   ebx
c000edf8:	e8 59 bc ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c000edfd:	83 c4 10             	add    esp,0x10
c000ee00:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000ee07:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee0f:	74 1b                	je     c000ee2c <ACPI::open(int, int, void*)+0x388>
c000ee11:	83 ec 0c             	sub    esp,0xc
c000ee14:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee1b:	e8 64 bf ff ff       	call   c000ad84 <File::exists()>
c000ee20:	83 c4 10             	add    esp,0x10
c000ee23:	84 c0                	test   al,al
c000ee25:	74 05                	je     c000ee2c <ACPI::open(int, int, void*)+0x388>
c000ee27:	b0 01                	mov    al,0x1
c000ee29:	eb 05                	jmp    c000ee30 <ACPI::open(int, int, void*)+0x38c>
c000ee2b:	90                   	nop
c000ee2c:	b0 00                	mov    al,0x0
c000ee2e:	66 90                	xchg   ax,ax
c000ee30:	84 c0                	test   al,al
c000ee32:	74 28                	je     c000ee5c <ACPI::open(int, int, void*)+0x3b8>
c000ee34:	83 ec 08             	sub    esp,0x8
c000ee37:	6a 01                	push   0x1
c000ee39:	68 d9 df 01 c0       	push   0xc001dfd9
c000ee3e:	e8 37 3b 00 00       	call   c001297a <Thr::loadDLL(char const*, bool)>
c000ee43:	83 c4 10             	add    esp,0x10
c000ee46:	83 ec 08             	sub    esp,0x8
c000ee49:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000ee50:	50                   	push   eax
c000ee51:	e8 55 3d 00 00       	call   c0012bab <Thr::executeDLL(unsigned long, void*)>
c000ee56:	83 c4 10             	add    esp,0x10
c000ee59:	8d 76 00             	lea    esi,[esi+0x0]
c000ee5c:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee64:	74 2a                	je     c000ee90 <ACPI::open(int, int, void*)+0x3ec>
c000ee66:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000ee6e:	74 20                	je     c000ee90 <ACPI::open(int, int, void*)+0x3ec>
c000ee70:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000ee77:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee79:	83 c0 08             	add    eax,0x8
c000ee7c:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee7e:	83 ec 0c             	sub    esp,0xc
c000ee81:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000ee88:	ff d0                	call   eax
c000ee8a:	83 c4 10             	add    esp,0x10
c000ee8d:	8d 76 00             	lea    esi,[esi+0x0]
c000ee90:	a1 e8 2c 02 c0       	mov    eax,ds:0xc0022ce8
c000ee95:	83 ec 08             	sub    esp,0x8
c000ee98:	68 f6 df 01 c0       	push   0xc001dff6
c000ee9d:	50                   	push   eax
c000ee9e:	e8 31 f2 ff ff       	call   c000e0d4 <findDataTable(unsigned char*, char*)>
c000eea3:	83 c4 10             	add    esp,0x10
c000eea6:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000eead:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000eeb5:	74 19                	je     c000eed0 <ACPI::open(int, int, void*)+0x42c>
c000eeb7:	83 ec 08             	sub    esp,0x8
c000eeba:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000eec1:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000eec8:	e8 67 fb ff ff       	call   c000ea34 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000eecd:	83 c4 10             	add    esp,0x10
c000eed0:	b8 00 00 00 00       	mov    eax,0x0
c000eed5:	81 c4 70 01 00 00    	add    esp,0x170
c000eedb:	5b                   	pop    ebx
c000eedc:	5e                   	pop    esi
c000eedd:	5f                   	pop    edi
c000eede:	c3                   	ret    
c000eedf:	90                   	nop

c000eee0 <CPU::close(int, int, void*)>:
c000eee0:	31 c0                	xor    eax,eax
c000eee2:	c3                   	ret    
c000eee3:	90                   	nop

c000eee4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000eee4:	60                   	pusha  
c000eee5:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000eee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000eeed:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000eef1:	9c                   	pushf  
c000eef2:	fa                   	cli    
c000eef3:	0f 09                	wbinvd 
c000eef5:	0f 30                	wrmsr  
c000eef7:	9d                   	popf   
c000eef8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000eefc:	89 02                	mov    DWORD PTR [edx],eax
c000eefe:	61                   	popa   
c000eeff:	c3                   	ret    

c000ef00 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000ef00:	60                   	pusha  
c000ef01:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000ef05:	9c                   	pushf  
c000ef06:	fa                   	cli    
c000ef07:	0f 09                	wbinvd 
c000ef09:	31 c0                	xor    eax,eax
c000ef0b:	31 d2                	xor    edx,edx
c000ef0d:	0f 32                	rdmsr  
c000ef0f:	9d                   	popf   
c000ef10:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ef14:	89 02                	mov    DWORD PTR [edx],eax
c000ef16:	61                   	popa   
c000ef17:	c3                   	ret    

c000ef18 <CPU::AMD_K6_writeback(int, int, int)>:
c000ef18:	56                   	push   esi
c000ef19:	53                   	push   ebx
c000ef1a:	83 ec 10             	sub    esp,0x10
c000ef1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ef21:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000ef26:	75 5d                	jne    c000ef85 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef28:	83 f8 08             	cmp    eax,0x8
c000ef2b:	75 09                	jne    c000ef36 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000ef2d:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000ef32:	7e 13                	jle    c000ef47 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef34:	eb 30                	jmp    c000ef66 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef36:	83 f8 06             	cmp    eax,0x6
c000ef39:	7c 4a                	jl     c000ef85 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef3b:	83 f8 07             	cmp    eax,0x7
c000ef3e:	7e 07                	jle    c000ef47 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ef40:	83 f8 09             	cmp    eax,0x9
c000ef43:	74 21                	je     c000ef66 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ef45:	eb 3e                	jmp    c000ef85 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ef47:	89 e6                	mov    esi,esp
c000ef49:	8b 1d fc 04 02 c0    	mov    ebx,DWORD PTR ds:0xc00204fc
c000ef4f:	56                   	push   esi
c000ef50:	c1 eb 15             	shr    ebx,0x15
c000ef53:	68 82 00 00 c0       	push   0xc0000082
c000ef58:	83 e3 7e             	and    ebx,0x7e
c000ef5b:	e8 a0 ff ff ff       	call   c000ef00 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef60:	56                   	push   esi
c000ef61:	6a 00                	push   0x0
c000ef63:	53                   	push   ebx
c000ef64:	eb 12                	jmp    c000ef78 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ef66:	89 e3                	mov    ebx,esp
c000ef68:	53                   	push   ebx
c000ef69:	68 82 00 00 c0       	push   0xc0000082
c000ef6e:	e8 8d ff ff ff       	call   c000ef00 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ef73:	53                   	push   ebx
c000ef74:	6a 00                	push   0x0
c000ef76:	6a 00                	push   0x0
c000ef78:	68 82 00 00 c0       	push   0xc0000082
c000ef7d:	e8 62 ff ff ff       	call   c000eee4 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ef82:	83 c4 18             	add    esp,0x18
c000ef85:	83 c4 10             	add    esp,0x10
c000ef88:	5b                   	pop    ebx
c000ef89:	5e                   	pop    esi
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ef8c:	55                   	push   ebp
c000ef8d:	57                   	push   edi
c000ef8e:	56                   	push   esi
c000ef8f:	53                   	push   ebx
c000ef90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ef94:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ef98:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ef9c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000efa0:	39 05 10 f2 01 c0    	cmp    DWORD PTR ds:0xc001f210,eax
c000efa6:	75 23                	jne    c000efcb <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000efa8:	a1 4c 2f 02 c0       	mov    eax,ds:0xc0022f4c
c000efad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000efb1:	89 06                	mov    DWORD PTR [esi],eax
c000efb3:	a1 48 2f 02 c0       	mov    eax,ds:0xc0022f48
c000efb8:	89 07                	mov    DWORD PTR [edi],eax
c000efba:	a1 44 2f 02 c0       	mov    eax,ds:0xc0022f44
c000efbf:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000efc2:	a1 40 2f 02 c0       	mov    eax,ds:0xc0022f40
c000efc7:	89 02                	mov    DWORD PTR [edx],eax
c000efc9:	eb 3f                	jmp    c000f00a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000efcb:	31 c9                	xor    ecx,ecx
c000efcd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efd1:	0f a2                	cpuid  
c000efd3:	89 06                	mov    DWORD PTR [esi],eax
c000efd5:	89 1f                	mov    DWORD PTR [edi],ebx
c000efd7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000efdb:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000efde:	89 10                	mov    DWORD PTR [eax],edx
c000efe0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000efe4:	a3 10 f2 01 c0       	mov    ds:0xc001f210,eax
c000efe9:	8b 06                	mov    eax,DWORD PTR [esi]
c000efeb:	a3 4c 2f 02 c0       	mov    ds:0xc0022f4c,eax
c000eff0:	8b 07                	mov    eax,DWORD PTR [edi]
c000eff2:	a3 48 2f 02 c0       	mov    ds:0xc0022f48,eax
c000eff7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000effa:	a3 44 2f 02 c0       	mov    ds:0xc0022f44,eax
c000efff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f003:	8b 00                	mov    eax,DWORD PTR [eax]
c000f005:	a3 40 2f 02 c0       	mov    ds:0xc0022f40,eax
c000f00a:	5b                   	pop    ebx
c000f00b:	5e                   	pop    esi
c000f00c:	5f                   	pop    edi
c000f00d:	5d                   	pop    ebp
c000f00e:	c3                   	ret    
c000f00f:	90                   	nop

c000f010 <CPU::cpuidCheckEDX(unsigned int)>:
c000f010:	83 ec 10             	sub    esp,0x10
c000f013:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f017:	50                   	push   eax
c000f018:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f01c:	50                   	push   eax
c000f01d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f021:	50                   	push   eax
c000f022:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f026:	50                   	push   eax
c000f027:	6a 01                	push   0x1
c000f029:	e8 5e ff ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f02e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f032:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f036:	0f 95 c0             	setne  al
c000f039:	83 c4 24             	add    esp,0x24
c000f03c:	c3                   	ret    
c000f03d:	90                   	nop

c000f03e <CPU::cpuidCheckECX(unsigned int)>:
c000f03e:	83 ec 10             	sub    esp,0x10
c000f041:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f045:	50                   	push   eax
c000f046:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04a:	50                   	push   eax
c000f04b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f04f:	50                   	push   eax
c000f050:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f054:	50                   	push   eax
c000f055:	6a 01                	push   0x1
c000f057:	e8 30 ff ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f05c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f060:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f064:	0f 95 c0             	setne  al
c000f067:	83 c4 24             	add    esp,0x24
c000f06a:	c3                   	ret    
c000f06b:	90                   	nop

c000f06c <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f06c:	83 ec 10             	sub    esp,0x10
c000f06f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f073:	50                   	push   eax
c000f074:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f078:	50                   	push   eax
c000f079:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f07d:	50                   	push   eax
c000f07e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f082:	50                   	push   eax
c000f083:	6a 07                	push   0x7
c000f085:	e8 02 ff ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f08a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f08e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f092:	0f 95 c0             	setne  al
c000f095:	83 c4 24             	add    esp,0x24
c000f098:	c3                   	ret    
c000f099:	90                   	nop

c000f09a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f09a:	83 ec 10             	sub    esp,0x10
c000f09d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a1:	50                   	push   eax
c000f0a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0a6:	50                   	push   eax
c000f0a7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0ab:	50                   	push   eax
c000f0ac:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f0b0:	50                   	push   eax
c000f0b1:	6a 07                	push   0x7
c000f0b3:	e8 d4 fe ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f0b8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f0bc:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f0c0:	0f 95 c0             	setne  al
c000f0c3:	83 c4 24             	add    esp,0x24
c000f0c6:	c3                   	ret    
c000f0c7:	90                   	nop

c000f0c8 <CPU::CPU()>:
c000f0c8:	83 ec 0c             	sub    esp,0xc
c000f0cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0cf:	83 ec 08             	sub    esp,0x8
c000f0d2:	68 19 e1 01 c0       	push   0xc001e119
c000f0d7:	50                   	push   eax
c000f0d8:	e8 db c9 ff ff       	call   c000bab8 <Device::Device(char const*)>
c000f0dd:	83 c4 10             	add    esp,0x10
c000f0e0:	ba a0 e1 01 c0       	mov    edx,0xc001e1a0
c000f0e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0e9:	89 10                	mov    DWORD PTR [eax],edx
c000f0eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0ef:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f0f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f0fd:	05 78 01 00 00       	add    eax,0x178
c000f102:	83 ec 0c             	sub    esp,0xc
c000f105:	50                   	push   eax
c000f106:	e8 6f 7f ff ff       	call   c000707a <GDT::GDT()>
c000f10b:	83 c4 10             	add    esp,0x10
c000f10e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f112:	05 7c 09 00 00       	add    eax,0x97c
c000f117:	83 ec 0c             	sub    esp,0xc
c000f11a:	50                   	push   eax
c000f11b:	e8 94 81 ff ff       	call   c00072b4 <IDT::IDT()>
c000f120:	83 c4 10             	add    esp,0x10
c000f123:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f127:	05 7c 11 00 00       	add    eax,0x117c
c000f12c:	83 ec 0c             	sub    esp,0xc
c000f12f:	50                   	push   eax
c000f130:	e8 9b 9a ff ff       	call   c0008bd0 <TSS::TSS()>
c000f135:	83 c4 10             	add    esp,0x10
c000f138:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f13c:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f147:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f151:	90                   	nop
c000f152:	83 c4 0c             	add    esp,0xc
c000f155:	c3                   	ret    

c000f156 <CPU::displayFeatures()>:
c000f156:	c3                   	ret    
c000f157:	90                   	nop

c000f158 <CPU::detectFeatures()>:
c000f158:	55                   	push   ebp
c000f159:	57                   	push   edi
c000f15a:	56                   	push   esi
c000f15b:	53                   	push   ebx
c000f15c:	83 ec 30             	sub    esp,0x30
c000f15f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f163:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f16d:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f174:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f17a:	6a 0d                	push   0xd
c000f17c:	6a 00                	push   0x0
c000f17e:	55                   	push   ebp
c000f17f:	e8 4c 13 ff ff       	call   c00004d0 <memset>
c000f184:	83 c4 10             	add    esp,0x10
c000f187:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000f18c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f193:	0f 84 d5 05 00 00    	je     c000f76e <CPU::detectFeatures()+0x616>
c000f199:	83 ec 0c             	sub    esp,0xc
c000f19c:	89 ef                	mov    edi,ebp
c000f19e:	6a 10                	push   0x10
c000f1a0:	e8 6b fe ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f1a5:	83 e0 01             	and    eax,0x1
c000f1a8:	8d 14 00             	lea    edx,[eax+eax*1]
c000f1ab:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1b1:	83 e0 fd             	and    eax,0xfffffffd
c000f1b4:	09 d0                	or     eax,edx
c000f1b6:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1bc:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f1c3:	e8 48 fe ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f1c8:	83 e0 01             	and    eax,0x1
c000f1cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f1d2:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1d8:	83 e0 fb             	and    eax,0xfffffffb
c000f1db:	09 d0                	or     eax,edx
c000f1dd:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f1e3:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f1ea:	e8 21 fe ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f1ef:	83 e0 01             	and    eax,0x1
c000f1f2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f1f9:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f1ff:	83 e0 f7             	and    eax,0xfffffff7
c000f202:	09 d0                	or     eax,edx
c000f204:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f20a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f211:	e8 fa fd ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f216:	83 e0 01             	and    eax,0x1
c000f219:	c1 e0 04             	shl    eax,0x4
c000f21c:	88 c2                	mov    dl,al
c000f21e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f224:	83 e0 ef             	and    eax,0xffffffef
c000f227:	09 d0                	or     eax,edx
c000f229:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f22f:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f236:	e8 d5 fd ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f23b:	83 e0 01             	and    eax,0x1
c000f23e:	c1 e0 05             	shl    eax,0x5
c000f241:	88 c2                	mov    dl,al
c000f243:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f249:	83 e0 df             	and    eax,0xffffffdf
c000f24c:	09 d0                	or     eax,edx
c000f24e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f254:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f25b:	e8 b0 fd ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f260:	83 e0 01             	and    eax,0x1
c000f263:	8d 14 00             	lea    edx,[eax+eax*1]
c000f266:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f26c:	83 e0 fd             	and    eax,0xfffffffd
c000f26f:	09 d0                	or     eax,edx
c000f271:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f277:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f27e:	e8 8d fd ff ff       	call   c000f010 <CPU::cpuidCheckEDX(unsigned int)>
c000f283:	83 e0 01             	and    eax,0x1
c000f286:	c1 e0 06             	shl    eax,0x6
c000f289:	88 c2                	mov    dl,al
c000f28b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f291:	83 e0 bf             	and    eax,0xffffffbf
c000f294:	09 d0                	or     eax,edx
c000f296:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f29c:	58                   	pop    eax
c000f29d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2a1:	50                   	push   eax
c000f2a2:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2a6:	50                   	push   eax
c000f2a7:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f2ab:	56                   	push   esi
c000f2ac:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f2b0:	50                   	push   eax
c000f2b1:	6a 00                	push   0x0
c000f2b3:	e8 d4 fc ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2b8:	b8 04 00 00 00       	mov    eax,0x4
c000f2bd:	89 c1                	mov    ecx,eax
c000f2bf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2c1:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f2c7:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f2cb:	89 c1                	mov    ecx,eax
c000f2cd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2cf:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f2d5:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f2d9:	89 c1                	mov    ecx,eax
c000f2db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f2dd:	83 c4 18             	add    esp,0x18
c000f2e0:	68 28 e0 01 c0       	push   0xc001e028
c000f2e5:	55                   	push   ebp
c000f2e6:	e8 f5 13 ff ff       	call   c00006e0 <strcmp>
c000f2eb:	83 c4 10             	add    esp,0x10
c000f2ee:	85 c0                	test   eax,eax
c000f2f0:	75 0f                	jne    c000f301 <CPU::detectFeatures()+0x1a9>
c000f2f2:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f2fc:	e9 22 02 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f301:	50                   	push   eax
c000f302:	50                   	push   eax
c000f303:	68 35 e0 01 c0       	push   0xc001e035
c000f308:	55                   	push   ebp
c000f309:	e8 d2 13 ff ff       	call   c00006e0 <strcmp>
c000f30e:	83 c4 10             	add    esp,0x10
c000f311:	85 c0                	test   eax,eax
c000f313:	74 dd                	je     c000f2f2 <CPU::detectFeatures()+0x19a>
c000f315:	50                   	push   eax
c000f316:	50                   	push   eax
c000f317:	68 42 e0 01 c0       	push   0xc001e042
c000f31c:	55                   	push   ebp
c000f31d:	e8 be 13 ff ff       	call   c00006e0 <strcmp>
c000f322:	83 c4 10             	add    esp,0x10
c000f325:	85 c0                	test   eax,eax
c000f327:	74 2a                	je     c000f353 <CPU::detectFeatures()+0x1fb>
c000f329:	50                   	push   eax
c000f32a:	50                   	push   eax
c000f32b:	68 4f e0 01 c0       	push   0xc001e04f
c000f330:	55                   	push   ebp
c000f331:	e8 aa 13 ff ff       	call   c00006e0 <strcmp>
c000f336:	83 c4 10             	add    esp,0x10
c000f339:	85 c0                	test   eax,eax
c000f33b:	74 16                	je     c000f353 <CPU::detectFeatures()+0x1fb>
c000f33d:	50                   	push   eax
c000f33e:	50                   	push   eax
c000f33f:	68 5c e0 01 c0       	push   0xc001e05c
c000f344:	55                   	push   ebp
c000f345:	e8 96 13 ff ff       	call   c00006e0 <strcmp>
c000f34a:	83 c4 10             	add    esp,0x10
c000f34d:	85 c0                	test   eax,eax
c000f34f:	74 48                	je     c000f399 <CPU::detectFeatures()+0x241>
c000f351:	eb 0f                	jmp    c000f362 <CPU::detectFeatures()+0x20a>
c000f353:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f35d:	e9 c1 01 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f362:	50                   	push   eax
c000f363:	50                   	push   eax
c000f364:	68 69 e0 01 c0       	push   0xc001e069
c000f369:	55                   	push   ebp
c000f36a:	e8 71 13 ff ff       	call   c00006e0 <strcmp>
c000f36f:	83 c4 10             	add    esp,0x10
c000f372:	85 c0                	test   eax,eax
c000f374:	74 23                	je     c000f399 <CPU::detectFeatures()+0x241>
c000f376:	57                   	push   edi
c000f377:	57                   	push   edi
c000f378:	68 76 e0 01 c0       	push   0xc001e076
c000f37d:	55                   	push   ebp
c000f37e:	e8 5d 13 ff ff       	call   c00006e0 <strcmp>
c000f383:	83 c4 10             	add    esp,0x10
c000f386:	85 c0                	test   eax,eax
c000f388:	75 1e                	jne    c000f3a8 <CPU::detectFeatures()+0x250>
c000f38a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f394:	e9 8a 01 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f399:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f3a3:	e9 7b 01 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f3a8:	56                   	push   esi
c000f3a9:	56                   	push   esi
c000f3aa:	68 83 e0 01 c0       	push   0xc001e083
c000f3af:	55                   	push   ebp
c000f3b0:	e8 2b 13 ff ff       	call   c00006e0 <strcmp>
c000f3b5:	83 c4 10             	add    esp,0x10
c000f3b8:	85 c0                	test   eax,eax
c000f3ba:	75 0f                	jne    c000f3cb <CPU::detectFeatures()+0x273>
c000f3bc:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f3c6:	e9 58 01 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f3cb:	51                   	push   ecx
c000f3cc:	51                   	push   ecx
c000f3cd:	68 42 e0 01 c0       	push   0xc001e042
c000f3d2:	55                   	push   ebp
c000f3d3:	e8 08 13 ff ff       	call   c00006e0 <strcmp>
c000f3d8:	83 c4 10             	add    esp,0x10
c000f3db:	85 c0                	test   eax,eax
c000f3dd:	75 0f                	jne    c000f3ee <CPU::detectFeatures()+0x296>
c000f3df:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f3e9:	e9 35 01 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f3ee:	52                   	push   edx
c000f3ef:	52                   	push   edx
c000f3f0:	68 90 e0 01 c0       	push   0xc001e090
c000f3f5:	55                   	push   ebp
c000f3f6:	e8 e5 12 ff ff       	call   c00006e0 <strcmp>
c000f3fb:	83 c4 10             	add    esp,0x10
c000f3fe:	85 c0                	test   eax,eax
c000f400:	75 0f                	jne    c000f411 <CPU::detectFeatures()+0x2b9>
c000f402:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f40c:	e9 12 01 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f411:	50                   	push   eax
c000f412:	50                   	push   eax
c000f413:	68 9d e0 01 c0       	push   0xc001e09d
c000f418:	55                   	push   ebp
c000f419:	e8 c2 12 ff ff       	call   c00006e0 <strcmp>
c000f41e:	83 c4 10             	add    esp,0x10
c000f421:	85 c0                	test   eax,eax
c000f423:	75 0f                	jne    c000f434 <CPU::detectFeatures()+0x2dc>
c000f425:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f42f:	e9 ef 00 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f434:	50                   	push   eax
c000f435:	50                   	push   eax
c000f436:	68 aa e0 01 c0       	push   0xc001e0aa
c000f43b:	55                   	push   ebp
c000f43c:	e8 9f 12 ff ff       	call   c00006e0 <strcmp>
c000f441:	83 c4 10             	add    esp,0x10
c000f444:	85 c0                	test   eax,eax
c000f446:	75 0f                	jne    c000f457 <CPU::detectFeatures()+0x2ff>
c000f448:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f452:	e9 cc 00 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f457:	50                   	push   eax
c000f458:	50                   	push   eax
c000f459:	68 b7 e0 01 c0       	push   0xc001e0b7
c000f45e:	55                   	push   ebp
c000f45f:	e8 7c 12 ff ff       	call   c00006e0 <strcmp>
c000f464:	83 c4 10             	add    esp,0x10
c000f467:	85 c0                	test   eax,eax
c000f469:	75 0f                	jne    c000f47a <CPU::detectFeatures()+0x322>
c000f46b:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f475:	e9 a9 00 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f47a:	50                   	push   eax
c000f47b:	50                   	push   eax
c000f47c:	68 c4 e0 01 c0       	push   0xc001e0c4
c000f481:	55                   	push   ebp
c000f482:	e8 59 12 ff ff       	call   c00006e0 <strcmp>
c000f487:	83 c4 10             	add    esp,0x10
c000f48a:	85 c0                	test   eax,eax
c000f48c:	75 0f                	jne    c000f49d <CPU::detectFeatures()+0x345>
c000f48e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f498:	e9 86 00 00 00       	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f49d:	50                   	push   eax
c000f49e:	50                   	push   eax
c000f49f:	68 d1 e0 01 c0       	push   0xc001e0d1
c000f4a4:	55                   	push   ebp
c000f4a5:	e8 36 12 ff ff       	call   c00006e0 <strcmp>
c000f4aa:	83 c4 10             	add    esp,0x10
c000f4ad:	85 c0                	test   eax,eax
c000f4af:	75 0c                	jne    c000f4bd <CPU::detectFeatures()+0x365>
c000f4b1:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f4bb:	eb 66                	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f4bd:	50                   	push   eax
c000f4be:	50                   	push   eax
c000f4bf:	68 de e0 01 c0       	push   0xc001e0de
c000f4c4:	55                   	push   ebp
c000f4c5:	e8 16 12 ff ff       	call   c00006e0 <strcmp>
c000f4ca:	83 c4 10             	add    esp,0x10
c000f4cd:	85 c0                	test   eax,eax
c000f4cf:	75 0c                	jne    c000f4dd <CPU::detectFeatures()+0x385>
c000f4d1:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f4db:	eb 46                	jmp    c000f523 <CPU::detectFeatures()+0x3cb>
c000f4dd:	57                   	push   edi
c000f4de:	57                   	push   edi
c000f4df:	68 eb e0 01 c0       	push   0xc001e0eb
c000f4e4:	55                   	push   ebp
c000f4e5:	e8 f6 11 ff ff       	call   c00006e0 <strcmp>
c000f4ea:	83 c4 10             	add    esp,0x10
c000f4ed:	85 c0                	test   eax,eax
c000f4ef:	74 e0                	je     c000f4d1 <CPU::detectFeatures()+0x379>
c000f4f1:	56                   	push   esi
c000f4f2:	56                   	push   esi
c000f4f3:	68 f8 e0 01 c0       	push   0xc001e0f8
c000f4f8:	55                   	push   ebp
c000f4f9:	e8 e2 11 ff ff       	call   c00006e0 <strcmp>
c000f4fe:	83 c4 10             	add    esp,0x10
c000f501:	85 c0                	test   eax,eax
c000f503:	74 cc                	je     c000f4d1 <CPU::detectFeatures()+0x379>
c000f505:	51                   	push   ecx
c000f506:	51                   	push   ecx
c000f507:	68 05 e1 01 c0       	push   0xc001e105
c000f50c:	55                   	push   ebp
c000f50d:	e8 ce 11 ff ff       	call   c00006e0 <strcmp>
c000f512:	83 c4 10             	add    esp,0x10
c000f515:	85 c0                	test   eax,eax
c000f517:	74 b8                	je     c000f4d1 <CPU::detectFeatures()+0x379>
c000f519:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f523:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f528:	0f 86 be 00 00 00    	jbe    c000f5ec <CPU::detectFeatures()+0x494>
c000f52e:	83 ec 0c             	sub    esp,0xc
c000f531:	68 80 00 00 00       	push   0x80
c000f536:	e8 31 fb ff ff       	call   c000f06c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f53b:	83 e0 01             	and    eax,0x1
c000f53e:	c1 e0 06             	shl    eax,0x6
c000f541:	88 c2                	mov    dl,al
c000f543:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f549:	83 e0 bf             	and    eax,0xffffffbf
c000f54c:	09 d0                	or     eax,edx
c000f54e:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f554:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f55b:	e8 0c fb ff ff       	call   c000f06c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f560:	83 e0 01             	and    eax,0x1
c000f563:	c1 e0 04             	shl    eax,0x4
c000f566:	88 c2                	mov    dl,al
c000f568:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f56e:	83 e0 ef             	and    eax,0xffffffef
c000f571:	09 d0                	or     eax,edx
c000f573:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f579:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f580:	e8 e7 fa ff ff       	call   c000f06c <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f585:	c1 e0 07             	shl    eax,0x7
c000f588:	88 c2                	mov    dl,al
c000f58a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f590:	83 e0 7f             	and    eax,0x7f
c000f593:	09 d0                	or     eax,edx
c000f595:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f59b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f5a2:	e8 f3 fa ff ff       	call   c000f09a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5a7:	83 e0 01             	and    eax,0x1
c000f5aa:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f5b1:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f5b7:	83 e0 f7             	and    eax,0xfffffff7
c000f5ba:	09 d0                	or     eax,edx
c000f5bc:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f5c2:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f5c9:	e8 cc fa ff ff       	call   c000f09a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f5ce:	83 c4 10             	add    esp,0x10
c000f5d1:	83 e0 01             	and    eax,0x1
c000f5d4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f5db:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f5e1:	83 e0 fb             	and    eax,0xfffffffb
c000f5e4:	09 d0                	or     eax,edx
c000f5e6:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f5ec:	83 ec 0c             	sub    esp,0xc
c000f5ef:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5f3:	50                   	push   eax
c000f5f4:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f5f8:	50                   	push   eax
c000f5f9:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f5fd:	56                   	push   esi
c000f5fe:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f602:	50                   	push   eax
c000f603:	6a 01                	push   0x1
c000f605:	e8 82 f9 ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f60a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f60e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f614:	88 ca                	mov    dl,cl
c000f616:	83 e0 f0             	and    eax,0xfffffff0
c000f619:	83 e2 0f             	and    edx,0xf
c000f61c:	09 d0                	or     eax,edx
c000f61e:	88 ca                	mov    dl,cl
c000f620:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f626:	c0 ea 04             	shr    dl,0x4
c000f629:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f62d:	0f b6 c2             	movzx  eax,dl
c000f630:	83 c4 20             	add    esp,0x20
c000f633:	c1 e0 06             	shl    eax,0x6
c000f636:	89 c7                	mov    edi,eax
c000f638:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f63e:	66 25 3f c0          	and    ax,0xc03f
c000f642:	09 f8                	or     eax,edi
c000f644:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f64b:	89 c8                	mov    eax,ecx
c000f64d:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f654:	c1 e8 08             	shr    eax,0x8
c000f657:	83 e5 3f             	and    ebp,0x3f
c000f65a:	83 e0 0f             	and    eax,0xf
c000f65d:	89 c7                	mov    edi,eax
c000f65f:	c1 e7 06             	shl    edi,0x6
c000f662:	09 ef                	or     edi,ebp
c000f664:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f66b:	89 fa                	mov    edx,edi
c000f66d:	83 e5 c0             	and    ebp,0xffffffc0
c000f670:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f676:	88 c2                	mov    dl,al
c000f678:	c0 ea 02             	shr    dl,0x2
c000f67b:	89 d7                	mov    edi,edx
c000f67d:	09 ef                	or     edi,ebp
c000f67f:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f685:	89 fa                	mov    edx,edi
c000f687:	83 e5 cf             	and    ebp,0xffffffcf
c000f68a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f690:	89 cf                	mov    edi,ecx
c000f692:	c1 ef 0c             	shr    edi,0xc
c000f695:	83 e7 03             	and    edi,0x3
c000f698:	c1 e7 04             	shl    edi,0x4
c000f69b:	09 ef                	or     edi,ebp
c000f69d:	3c 06                	cmp    al,0x6
c000f69f:	89 fa                	mov    edx,edi
c000f6a1:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f6a7:	74 04                	je     c000f6ad <CPU::detectFeatures()+0x555>
c000f6a9:	3c 0f                	cmp    al,0xf
c000f6ab:	75 5c                	jne    c000f709 <CPU::detectFeatures()+0x5b1>
c000f6ad:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f6b1:	89 cf                	mov    edi,ecx
c000f6b3:	c1 ef 10             	shr    edi,0x10
c000f6b6:	c1 e7 04             	shl    edi,0x4
c000f6b9:	09 fa                	or     edx,edi
c000f6bb:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f6c1:	0f b6 d2             	movzx  edx,dl
c000f6c4:	66 81 e7 3f c0       	and    di,0xc03f
c000f6c9:	c1 e2 06             	shl    edx,0x6
c000f6cc:	09 fa                	or     edx,edi
c000f6ce:	3c 0f                	cmp    al,0xf
c000f6d0:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f6d7:	75 30                	jne    c000f709 <CPU::detectFeatures()+0x5b1>
c000f6d9:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f6df:	c1 e9 14             	shr    ecx,0x14
c000f6e2:	83 e0 3f             	and    eax,0x3f
c000f6e5:	83 c1 0f             	add    ecx,0xf
c000f6e8:	88 ca                	mov    dl,cl
c000f6ea:	c0 e9 02             	shr    cl,0x2
c000f6ed:	c1 e2 06             	shl    edx,0x6
c000f6f0:	09 d0                	or     eax,edx
c000f6f2:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f6f8:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f6fe:	83 e0 c0             	and    eax,0xffffffc0
c000f701:	09 c1                	or     ecx,eax
c000f703:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f709:	83 ec 0c             	sub    esp,0xc
c000f70c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f713:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f717:	50                   	push   eax
c000f718:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f71c:	55                   	push   ebp
c000f71d:	56                   	push   esi
c000f71e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f722:	57                   	push   edi
c000f723:	68 00 00 00 80       	push   0x80000000
c000f728:	e8 5f f8 ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f72d:	83 c4 20             	add    esp,0x20
c000f730:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f738:	76 22                	jbe    c000f75c <CPU::detectFeatures()+0x604>
c000f73a:	83 ec 0c             	sub    esp,0xc
c000f73d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f741:	50                   	push   eax
c000f742:	55                   	push   ebp
c000f743:	56                   	push   esi
c000f744:	57                   	push   edi
c000f745:	68 01 00 00 80       	push   0x80000001
c000f74a:	e8 3d f8 ff ff       	call   c000ef8c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f74f:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f759:	83 c4 20             	add    esp,0x20
c000f75c:	52                   	push   edx
c000f75d:	52                   	push   edx
c000f75e:	68 11 e1 01 c0       	push   0xc001e111
c000f763:	53                   	push   ebx
c000f764:	e8 41 c3 ff ff       	call   c000baaa <Device::setName(char const*)>
c000f769:	83 c4 10             	add    esp,0x10
c000f76c:	eb 67                	jmp    c000f7d5 <CPU::detectFeatures()+0x67d>
c000f76e:	50                   	push   eax
c000f76f:	50                   	push   eax
c000f770:	68 76 e0 01 c0       	push   0xc001e076
c000f775:	55                   	push   ebp
c000f776:	e8 85 0e ff ff       	call   c0000600 <strcpy>
c000f77b:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f785:	e8 39 0a ff ff       	call   c00001c3 <is486>
c000f78a:	83 c4 10             	add    esp,0x10
c000f78d:	85 c0                	test   eax,eax
c000f78f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f795:	74 1d                	je     c000f7b4 <CPU::detectFeatures()+0x65c>
c000f797:	83 c8 07             	or     eax,0x7
c000f79a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7a0:	0f 20 c0             	mov    eax,cr0
c000f7a3:	83 e0 14             	and    eax,0x14
c000f7a6:	83 f8 04             	cmp    eax,0x4
c000f7a9:	75 0e                	jne    c000f7b9 <CPU::detectFeatures()+0x661>
c000f7ab:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000f7b2:	eb 21                	jmp    c000f7d5 <CPU::detectFeatures()+0x67d>
c000f7b4:	83 e0 f8             	and    eax,0xfffffff8
c000f7b7:	eb e1                	jmp    c000f79a <CPU::detectFeatures()+0x642>
c000f7b9:	e8 e0 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7be:	83 e0 01             	and    eax,0x1
c000f7c1:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7c4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7ca:	83 e0 fd             	and    eax,0xfffffffd
c000f7cd:	09 d0                	or     eax,edx
c000f7cf:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f7d5:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000f7dc:	74 0e                	je     c000f7ec <CPU::detectFeatures()+0x694>
c000f7de:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000f7e3:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000f7ea:	eb 20                	jmp    c000f80c <CPU::detectFeatures()+0x6b4>
c000f7ec:	e8 ad 09 ff ff       	call   c000019e <hasLegacyFPU>
c000f7f1:	83 e0 01             	and    eax,0x1
c000f7f4:	8d 14 00             	lea    edx,[eax+eax*1]
c000f7f7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f7fd:	83 e0 fd             	and    eax,0xfffffffd
c000f800:	09 d0                	or     eax,edx
c000f802:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f808:	a8 02                	test   al,0x2
c000f80a:	75 d2                	jne    c000f7de <CPU::detectFeatures()+0x686>
c000f80c:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000f813:	83 c4 2c             	add    esp,0x2c
c000f816:	5b                   	pop    ebx
c000f817:	5e                   	pop    esi
c000f818:	5f                   	pop    edi
c000f819:	5d                   	pop    ebp
c000f81a:	c3                   	ret    
c000f81b:	90                   	nop

c000f81c <CPU::setupSMEP()>:
c000f81c:	0f 20 e0             	mov    eax,cr4
c000f81f:	0d 00 00 10 00       	or     eax,0x100000
c000f824:	0f 22 e0             	mov    cr4,eax
c000f827:	c3                   	ret    

c000f828 <CPU::setupUMIP()>:
c000f828:	0f 20 e0             	mov    eax,cr4
c000f82b:	80 cc 08             	or     ah,0x8
c000f82e:	0f 22 e0             	mov    cr4,eax
c000f831:	c3                   	ret    

c000f832 <CPU::setupTSC()>:
c000f832:	0f 20 e0             	mov    eax,cr4
c000f835:	83 c8 04             	or     eax,0x4
c000f838:	0f 22 e0             	mov    cr4,eax
c000f83b:	c3                   	ret    

c000f83c <CPU::setupLargePages()>:
c000f83c:	0f 20 e0             	mov    eax,cr4
c000f83f:	83 c8 10             	or     eax,0x10
c000f842:	0f 22 e0             	mov    cr4,eax
c000f845:	c3                   	ret    

c000f846 <CPU::setupPAT()>:
c000f846:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c000f84b:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000f852:	74 2c                	je     c000f880 <CPU::setupPAT()+0x3a>
c000f854:	53                   	push   ebx
c000f855:	83 ec 10             	sub    esp,0x10
c000f858:	68 77 02 00 00       	push   0x277
c000f85d:	50                   	push   eax
c000f85e:	e8 8f 75 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c000f863:	83 e2 f8             	and    edx,0xfffffff8
c000f866:	83 ca 01             	or     edx,0x1
c000f869:	52                   	push   edx
c000f86a:	50                   	push   eax
c000f86b:	68 77 02 00 00       	push   0x277
c000f870:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c000f876:	e8 a3 75 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c000f87b:	83 c4 28             	add    esp,0x28
c000f87e:	5b                   	pop    ebx
c000f87f:	c3                   	ret    
c000f880:	c3                   	ret    
c000f881:	90                   	nop

c000f882 <CPU::setupMTRR()>:
c000f882:	c3                   	ret    
c000f883:	90                   	nop

c000f884 <CPU::setupGlobalPages()>:
c000f884:	0f 20 e0             	mov    eax,cr4
c000f887:	0c 80                	or     al,0x80
c000f889:	0f 22 e0             	mov    cr4,eax
c000f88c:	c3                   	ret    
c000f88d:	90                   	nop

c000f88e <CPU::allowUsermodeDataAccess()>:
c000f88e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f892:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f899:	74 03                	je     c000f89e <CPU::allowUsermodeDataAccess()+0x10>
c000f89b:	0f 01 cb             	stac   
c000f89e:	c3                   	ret    
c000f89f:	90                   	nop

c000f8a0 <CPU::prohibitUsermodeDataAccess()>:
c000f8a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f8a4:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000f8ab:	74 03                	je     c000f8b0 <CPU::prohibitUsermodeDataAccess()+0x10>
c000f8ad:	0f 01 ca             	clac   
c000f8b0:	c3                   	ret    
c000f8b1:	90                   	nop

c000f8b2 <CPU::setupSMAP()>:
c000f8b2:	0f 20 e0             	mov    eax,cr4
c000f8b5:	0d 00 00 20 00       	or     eax,0x200000
c000f8ba:	0f 22 e0             	mov    cr4,eax
c000f8bd:	eb e1                	jmp    c000f8a0 <CPU::prohibitUsermodeDataAccess()>
c000f8bf:	90                   	nop

c000f8c0 <CPU::setupFeatures()>:
c000f8c0:	53                   	push   ebx
c000f8c1:	83 ec 08             	sub    esp,0x8
c000f8c4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f8c8:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000f8cf:	74 18                	je     c000f8e9 <CPU::setupFeatures()+0x29>
c000f8d1:	83 ec 0c             	sub    esp,0xc
c000f8d4:	68 1d e1 01 c0       	push   0xc001e11d
c000f8d9:	e8 02 ac ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000f8de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f8e1:	e8 42 ff ff ff       	call   c000f828 <CPU::setupUMIP()>
c000f8e6:	83 c4 10             	add    esp,0x10
c000f8e9:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000f8f0:	74 18                	je     c000f90a <CPU::setupFeatures()+0x4a>
c000f8f2:	83 ec 0c             	sub    esp,0xc
c000f8f5:	68 27 e1 01 c0       	push   0xc001e127
c000f8fa:	e8 e1 ab ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000f8ff:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f902:	e8 2b ff ff ff       	call   c000f832 <CPU::setupTSC()>
c000f907:	83 c4 10             	add    esp,0x10
c000f90a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000f911:	74 18                	je     c000f92b <CPU::setupFeatures()+0x6b>
c000f913:	83 ec 0c             	sub    esp,0xc
c000f916:	68 30 e1 01 c0       	push   0xc001e130
c000f91b:	e8 c0 ab ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000f920:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f923:	e8 14 ff ff ff       	call   c000f83c <CPU::setupLargePages()>
c000f928:	83 c4 10             	add    esp,0x10
c000f92b:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000f932:	74 18                	je     c000f94c <CPU::setupFeatures()+0x8c>
c000f934:	83 ec 0c             	sub    esp,0xc
c000f937:	68 39 e1 01 c0       	push   0xc001e139
c000f93c:	e8 9f ab ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000f941:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f944:	e8 3b ff ff ff       	call   c000f884 <CPU::setupGlobalPages()>
c000f949:	83 c4 10             	add    esp,0x10
c000f94c:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000f953:	74 18                	je     c000f96d <CPU::setupFeatures()+0xad>
c000f955:	83 ec 0c             	sub    esp,0xc
c000f958:	68 4b e1 01 c0       	push   0xc001e14b
c000f95d:	e8 7e ab ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c000f962:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f965:	e8 dc fe ff ff       	call   c000f846 <CPU::setupPAT()>
c000f96a:	83 c4 10             	add    esp,0x10
c000f96d:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000f974:	74 11                	je     c000f987 <CPU::setupFeatures()+0xc7>
c000f976:	c7 44 24 10 54 e1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e154
c000f97e:	83 c4 08             	add    esp,0x8
c000f981:	5b                   	pop    ebx
c000f982:	e9 59 ab ff ff       	jmp    c000a4e0 <Dbg::kprintf(char const*, ...)>
c000f987:	83 c4 08             	add    esp,0x8
c000f98a:	5b                   	pop    ebx
c000f98b:	c3                   	ret    

c000f98c <CPU::open(int, int, void*)>:
c000f98c:	57                   	push   edi
c000f98d:	56                   	push   esi
c000f98e:	53                   	push   ebx
c000f98f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f993:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f997:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000f99d:	83 ec 0c             	sub    esp,0xc
c000f9a0:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000f9a6:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000f9ac:	50                   	push   eax
c000f9ad:	e8 2a 77 ff ff       	call   c00070dc <GDT::setup()>
c000f9b2:	83 c4 0c             	add    esp,0xc
c000f9b5:	6a 00                	push   0x0
c000f9b7:	68 ef be ad de       	push   0xdeadbeef
c000f9bc:	57                   	push   edi
c000f9bd:	e8 52 92 ff ff       	call   c0008c14 <TSS::setup(unsigned long, unsigned long)>
c000f9c2:	89 3c 24             	mov    DWORD PTR [esp],edi
c000f9c5:	e8 2a 92 ff ff       	call   c0008bf4 <TSS::flush()>
c000f9ca:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000f9d0:	89 04 24             	mov    DWORD PTR [esp],eax
c000f9d3:	e8 52 79 ff ff       	call   c000732a <IDT::setup()>
c000f9d8:	b8 00 04 00 00       	mov    eax,0x400
c000f9dd:	0f 23 f8             	mov    db7,eax
c000f9e0:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000f9ea:	e8 a6 80 ff ff       	call   c0007a95 <Phys::allocatePage()>
c000f9ef:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000f9f5:	89 30                	mov    DWORD PTR [eax],esi
c000f9f7:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000f9fd:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fa00:	58                   	pop    eax
c000fa01:	5a                   	pop    edx
c000fa02:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fa08:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fa0c:	e8 ed a1 ff ff       	call   c0009bfe <VAS::setCPUSpecific(unsigned long)>
c000fa11:	c7 04 24 5e e1 01 c0 	mov    DWORD PTR [esp],0xc001e15e
c000fa18:	e8 c6 00 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000fa1d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fa20:	e8 33 f7 ff ff       	call   c000f158 <CPU::detectFeatures()>
c000fa25:	c7 04 24 81 e1 01 c0 	mov    DWORD PTR [esp],0xc001e181
c000fa2c:	e8 b2 00 00 00       	call   c000fae3 <KeSetBootMessage(char const*)>
c000fa31:	e8 5a 58 00 00       	call   c0015290 <HalInitialise()>
c000fa36:	a1 f0 04 02 c0       	mov    eax,ds:0xc00204f0
c000fa3b:	83 e0 10             	and    eax,0x10
c000fa3e:	83 f8 01             	cmp    eax,0x1
c000fa41:	19 c0                	sbb    eax,eax
c000fa43:	83 e0 46             	and    eax,0x46
c000fa46:	83 c0 1e             	add    eax,0x1e
c000fa49:	89 04 24             	mov    DWORD PTR [esp],eax
c000fa4c:	e8 40 d7 ff ff       	call   c000d191 <setupTimer(int)>
c000fa51:	83 c4 10             	add    esp,0x10
c000fa54:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fa5a:	f6 05 f0 04 02 c0 20 	test   BYTE PTR ds:0xc00204f0,0x20
c000fa61:	74 0c                	je     c000fa6f <CPU::open(int, int, void*)+0xe3>
c000fa63:	83 ec 0c             	sub    esp,0xc
c000fa66:	53                   	push   ebx
c000fa67:	e8 54 fe ff ff       	call   c000f8c0 <CPU::setupFeatures()>
c000fa6c:	83 c4 10             	add    esp,0x10
c000fa6f:	5b                   	pop    ebx
c000fa70:	31 c0                	xor    eax,eax
c000fa72:	5e                   	pop    esi
c000fa73:	5f                   	pop    edi
c000fa74:	c3                   	ret    

c000fa75 <KeDisplaySplashScreen()>:
c000fa75:	55                   	push   ebp
c000fa76:	bd 05 00 00 00       	mov    ebp,0x5
c000fa7b:	57                   	push   edi
c000fa7c:	bf 20 f2 01 c0       	mov    edi,0xc001f220
c000fa81:	56                   	push   esi
c000fa82:	be 0a 00 00 00       	mov    esi,0xa
c000fa87:	53                   	push   ebx
c000fa88:	31 db                	xor    ebx,ebx
c000fa8a:	83 ec 0c             	sub    esp,0xc
c000fa8d:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000fa90:	84 c0                	test   al,al
c000fa92:	74 47                	je     c000fadb <KeDisplaySplashScreen()+0x66>
c000fa94:	80 bb 56 f2 01 c0 db 	cmp    BYTE PTR [ebx-0x3ffe0daa],0xdb
c000fa9b:	75 13                	jne    c000fab0 <KeDisplaySplashScreen()+0x3b>
c000fa9d:	0f b6 93 55 f2 01 c0 	movzx  edx,BYTE PTR [ebx-0x3ffe0dab]
c000faa4:	83 e2 fe             	and    edx,0xfffffffe
c000faa7:	81 fa ba 00 00 00    	cmp    edx,0xba
c000faad:	75 01                	jne    c000fab0 <KeDisplaySplashScreen()+0x3b>
c000faaf:	46                   	inc    esi
c000fab0:	3c 0d                	cmp    al,0xd
c000fab2:	74 24                	je     c000fad8 <KeDisplaySplashScreen()+0x63>
c000fab4:	3c 0a                	cmp    al,0xa
c000fab6:	75 0a                	jne    c000fac2 <KeDisplaySplashScreen()+0x4d>
c000fab8:	45                   	inc    ebp
c000fab9:	be 0a 00 00 00       	mov    esi,0xa
c000fabe:	31 db                	xor    ebx,ebx
c000fac0:	eb 16                	jmp    c000fad8 <KeDisplaySplashScreen()+0x63>
c000fac2:	83 ec 0c             	sub    esp,0xc
c000fac5:	8d 14 33             	lea    edx,[ebx+esi*1]
c000fac8:	55                   	push   ebp
c000fac9:	43                   	inc    ebx
c000faca:	52                   	push   edx
c000facb:	6a 00                	push   0x0
c000facd:	6a 0e                	push   0xe
c000facf:	50                   	push   eax
c000fad0:	e8 1f 64 00 00       	call   c0015ef4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000fad5:	83 c4 20             	add    esp,0x20
c000fad8:	47                   	inc    edi
c000fad9:	eb b2                	jmp    c000fa8d <KeDisplaySplashScreen()+0x18>
c000fadb:	83 c4 0c             	add    esp,0xc
c000fade:	5b                   	pop    ebx
c000fadf:	5e                   	pop    esi
c000fae0:	5f                   	pop    edi
c000fae1:	5d                   	pop    ebp
c000fae2:	c3                   	ret    

c000fae3 <KeSetBootMessage(char const*)>:
c000fae3:	57                   	push   edi
c000fae4:	56                   	push   esi
c000fae5:	53                   	push   ebx
c000fae6:	81 ec a4 00 00 00    	sub    esp,0xa4
c000faec:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c000faf3:	68 9e 00 00 00       	push   0x9e
c000faf8:	6a 00                	push   0x0
c000fafa:	8d 74 24 0e          	lea    esi,[esp+0xe]
c000fafe:	56                   	push   esi
c000faff:	e8 cc 09 ff ff       	call   c00004d0 <memset>
c000fb04:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb07:	e8 34 0a ff ff       	call   c0000540 <strlen>
c000fb0c:	ba 50 00 00 00       	mov    edx,0x50
c000fb11:	83 c4 10             	add    esp,0x10
c000fb14:	29 c2                	sub    edx,eax
c000fb16:	31 c9                	xor    ecx,ecx
c000fb18:	83 e2 fe             	and    edx,0xfffffffe
c000fb1b:	01 f2                	add    edx,esi
c000fb1d:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c000fb22:	84 c0                	test   al,al
c000fb24:	74 0a                	je     c000fb30 <KeSetBootMessage(char const*)+0x4d>
c000fb26:	80 cc 0f             	or     ah,0xf
c000fb29:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c000fb2d:	41                   	inc    ecx
c000fb2e:	eb ed                	jmp    c000fb1d <KeSetBootMessage(char const*)+0x3a>
c000fb30:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c000fb35:	b9 9e 00 00 00       	mov    ecx,0x9e
c000fb3a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fb3c:	81 c4 a0 00 00 00    	add    esp,0xa0
c000fb42:	5b                   	pop    ebx
c000fb43:	5e                   	pop    esi
c000fb44:	5f                   	pop    edi
c000fb45:	c3                   	ret    

c000fb46 <EnvVarContainer::getEnv(char const*)>:
c000fb46:	57                   	push   edi
c000fb47:	56                   	push   esi
c000fb48:	53                   	push   ebx
c000fb49:	31 db                	xor    ebx,ebx
c000fb4b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fb4f:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fb51:	7e 2b                	jle    c000fb7e <EnvVarContainer::getEnv(char const*)+0x38>
c000fb53:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fb5a:	50                   	push   eax
c000fb5b:	50                   	push   eax
c000fb5c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb5f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fb62:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fb66:	e8 75 0b ff ff       	call   c00006e0 <strcmp>
c000fb6b:	83 c4 10             	add    esp,0x10
c000fb6e:	85 c0                	test   eax,eax
c000fb70:	75 09                	jne    c000fb7b <EnvVarContainer::getEnv(char const*)+0x35>
c000fb72:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fb75:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fb79:	eb 05                	jmp    c000fb80 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fb7b:	43                   	inc    ebx
c000fb7c:	eb d1                	jmp    c000fb4f <EnvVarContainer::getEnv(char const*)+0x9>
c000fb7e:	31 c0                	xor    eax,eax
c000fb80:	5b                   	pop    ebx
c000fb81:	5e                   	pop    esi
c000fb82:	5f                   	pop    edi
c000fb83:	c3                   	ret    

c000fb84 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fb84:	55                   	push   ebp
c000fb85:	57                   	push   edi
c000fb86:	56                   	push   esi
c000fb87:	53                   	push   ebx
c000fb88:	83 ec 28             	sub    esp,0x28
c000fb8b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fb8f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fb93:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fb97:	56                   	push   esi
c000fb98:	e8 a3 09 ff ff       	call   c0000540 <strlen>
c000fb9d:	40                   	inc    eax
c000fb9e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fba1:	e8 13 7c ff ff       	call   c00077b9 <malloc>
c000fba6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fba9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fbad:	e8 8e 09 ff ff       	call   c0000540 <strlen>
c000fbb2:	40                   	inc    eax
c000fbb3:	89 04 24             	mov    DWORD PTR [esp],eax
c000fbb6:	e8 fe 7b ff ff       	call   c00077b9 <malloc>
c000fbbb:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbbe:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fbc2:	e8 79 09 ff ff       	call   c0000540 <strlen>
c000fbc7:	83 c4 0c             	add    esp,0xc
c000fbca:	40                   	inc    eax
c000fbcb:	50                   	push   eax
c000fbcc:	6a 00                	push   0x0
c000fbce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fbd2:	e8 f9 08 ff ff       	call   c00004d0 <memset>
c000fbd7:	89 34 24             	mov    DWORD PTR [esp],esi
c000fbda:	e8 61 09 ff ff       	call   c0000540 <strlen>
c000fbdf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fbe3:	8d 48 01             	lea    ecx,[eax+0x1]
c000fbe6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fbe8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbeb:	89 de                	mov    esi,ebx
c000fbed:	e8 4e 09 ff ff       	call   c0000540 <strlen>
c000fbf2:	83 c4 0c             	add    esp,0xc
c000fbf5:	40                   	inc    eax
c000fbf6:	50                   	push   eax
c000fbf7:	6a 00                	push   0x0
c000fbf9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fbfd:	e8 ce 08 ff ff       	call   c00004d0 <memset>
c000fc02:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc05:	e8 36 09 ff ff       	call   c0000540 <strlen>
c000fc0a:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fc0e:	8d 48 01             	lea    ecx,[eax+0x1]
c000fc11:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc13:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fc16:	40                   	inc    eax
c000fc17:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fc1a:	c1 e0 03             	shl    eax,0x3
c000fc1d:	5a                   	pop    edx
c000fc1e:	59                   	pop    ecx
c000fc1f:	50                   	push   eax
c000fc20:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fc23:	e8 7d 7b ff ff       	call   c00077a5 <realloc>
c000fc28:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fc2c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fc2f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fc32:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fc36:	b9 08 00 00 00       	mov    ecx,0x8
c000fc3b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fc3d:	83 c4 2c             	add    esp,0x2c
c000fc40:	5b                   	pop    ebx
c000fc41:	5e                   	pop    esi
c000fc42:	5f                   	pop    edi
c000fc43:	5d                   	pop    ebp
c000fc44:	c3                   	ret    
c000fc45:	90                   	nop

c000fc46 <EnvVarContainer::deleteEnv(char const*)>:
c000fc46:	c3                   	ret    
c000fc47:	90                   	nop

c000fc48 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fc48:	55                   	push   ebp
c000fc49:	57                   	push   edi
c000fc4a:	56                   	push   esi
c000fc4b:	53                   	push   ebx
c000fc4c:	81 ec 38 01 00 00    	sub    esp,0x138
c000fc52:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fc59:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fc60:	68 14 01 00 00       	push   0x114
c000fc65:	e8 4f 7b ff ff       	call   c00077b9 <malloc>
c000fc6a:	83 c4 0c             	add    esp,0xc
c000fc6d:	89 c3                	mov    ebx,eax
c000fc6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fc72:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc79:	50                   	push   eax
c000fc7a:	e8 d7 ad ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c000fc7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc82:	e8 fd b0 ff ff       	call   c000ad84 <File::exists()>
c000fc87:	83 c4 10             	add    esp,0x10
c000fc8a:	84 c0                	test   al,al
c000fc8c:	75 31                	jne    c000fcbf <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fc8e:	50                   	push   eax
c000fc8f:	50                   	push   eax
c000fc90:	6a 12                	push   0x12
c000fc92:	53                   	push   ebx
c000fc93:	e8 7e ae ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c000fc98:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fc9a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fc9d:	89 34 24             	mov    DWORD PTR [esp],esi
c000fca0:	e8 9b 08 ff ff       	call   c0000540 <strlen>
c000fca5:	5a                   	pop    edx
c000fca6:	31 d2                	xor    edx,edx
c000fca8:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcac:	51                   	push   ecx
c000fcad:	56                   	push   esi
c000fcae:	52                   	push   edx
c000fcaf:	50                   	push   eax
c000fcb0:	53                   	push   ebx
c000fcb1:	ff d7                	call   edi
c000fcb3:	83 c4 14             	add    esp,0x14
c000fcb6:	53                   	push   ebx
c000fcb7:	e8 b8 ae ff ff       	call   c000ab74 <File::close()>
c000fcbc:	83 c4 10             	add    esp,0x10
c000fcbf:	56                   	push   esi
c000fcc0:	31 f6                	xor    esi,esi
c000fcc2:	68 00 01 00 00       	push   0x100
c000fcc7:	6a 00                	push   0x0
c000fcc9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fccd:	50                   	push   eax
c000fcce:	e8 fd 07 ff ff       	call   c00004d0 <memset>
c000fcd3:	5f                   	pop    edi
c000fcd4:	58                   	pop    eax
c000fcd5:	6a 01                	push   0x1
c000fcd7:	53                   	push   ebx
c000fcd8:	e8 39 ae ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c000fcdd:	83 c4 10             	add    esp,0x10
c000fce0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fce8:	83 ec 0c             	sub    esp,0xc
c000fceb:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fced:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fcf1:	51                   	push   ecx
c000fcf2:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fcf6:	52                   	push   edx
c000fcf7:	6a 00                	push   0x0
c000fcf9:	6a 01                	push   0x1
c000fcfb:	53                   	push   ebx
c000fcfc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000fcff:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000fd03:	83 c4 20             	add    esp,0x20
c000fd06:	3c 0d                	cmp    al,0xd
c000fd08:	0f 84 09 01 00 00    	je     c000fe17 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fd0e:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fd13:	0f 84 ef 00 00 00    	je     c000fe08 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd19:	3c 0a                	cmp    al,0xa
c000fd1b:	74 13                	je     c000fd30 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd1d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fd22:	74 0c                	je     c000fd30 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fd24:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000fd2a:	0f 8e d8 00 00 00    	jle    c000fe08 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fd30:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fd34:	83 ec 0c             	sub    esp,0xc
c000fd37:	8d 78 01             	lea    edi,[eax+0x1]
c000fd3a:	57                   	push   edi
c000fd3b:	e8 79 7a ff ff       	call   c00077b9 <malloc>
c000fd40:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fd44:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fd48:	8d 56 04             	lea    edx,[esi+0x4]
c000fd4b:	89 14 24             	mov    DWORD PTR [esp],edx
c000fd4e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000fd52:	e8 62 7a ff ff       	call   c00077b9 <malloc>
c000fd57:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000fd5b:	83 c4 0c             	add    esp,0xc
c000fd5e:	57                   	push   edi
c000fd5f:	6a 00                	push   0x0
c000fd61:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000fd65:	e8 66 07 ff ff       	call   c00004d0 <memset>
c000fd6a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd6e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000fd72:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000fd76:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd78:	83 c4 0c             	add    esp,0xc
c000fd7b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fd7f:	52                   	push   edx
c000fd80:	6a 00                	push   0x0
c000fd82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fd86:	e8 45 07 ff ff       	call   c00004d0 <memset>
c000fd8b:	8d 74 24 30          	lea    esi,[esp+0x30]
c000fd8f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000fd93:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd96:	e8 a5 07 ff ff       	call   c0000540 <strlen>
c000fd9b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000fd9f:	89 c1                	mov    ecx,eax
c000fda1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fda3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fda6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000fda9:	40                   	inc    eax
c000fdaa:	83 c4 10             	add    esp,0x10
c000fdad:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fdb0:	85 d2                	test   edx,edx
c000fdb2:	75 0c                	jne    c000fdc0 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000fdb4:	83 ec 0c             	sub    esp,0xc
c000fdb7:	6a 08                	push   0x8
c000fdb9:	e8 fb 79 ff ff       	call   c00077b9 <malloc>
c000fdbe:	eb 0c                	jmp    c000fdcc <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000fdc0:	c1 e0 03             	shl    eax,0x3
c000fdc3:	51                   	push   ecx
c000fdc4:	51                   	push   ecx
c000fdc5:	50                   	push   eax
c000fdc6:	52                   	push   edx
c000fdc7:	e8 d9 79 ff ff       	call   c00077a5 <realloc>
c000fdcc:	83 c4 10             	add    esp,0x10
c000fdcf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fdd2:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fdd5:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000fdd8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fddc:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fde0:	b9 08 00 00 00       	mov    ecx,0x8
c000fde5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fde7:	31 f6                	xor    esi,esi
c000fde9:	50                   	push   eax
c000fdea:	68 00 01 00 00       	push   0x100
c000fdef:	6a 00                	push   0x0
c000fdf1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fdf5:	50                   	push   eax
c000fdf6:	e8 d5 06 ff ff       	call   c00004d0 <memset>
c000fdfb:	83 c4 10             	add    esp,0x10
c000fdfe:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe06:	eb 0f                	jmp    c000fe17 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe08:	3c 3d                	cmp    al,0x3d
c000fe0a:	74 07                	je     c000fe13 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000fe0c:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000fe10:	46                   	inc    esi
c000fe11:	eb 04                	jmp    c000fe17 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000fe13:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000fe17:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fe1c:	0f 85 c6 fe ff ff    	jne    c000fce8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000fe22:	81 c4 2c 01 00 00    	add    esp,0x12c
c000fe28:	5b                   	pop    ebx
c000fe29:	5e                   	pop    esi
c000fe2a:	5f                   	pop    edi
c000fe2b:	5d                   	pop    ebp
c000fe2c:	c3                   	ret    
c000fe2d:	90                   	nop

c000fe2e <EnvVarContainer::__loadSystem()>:
c000fe2e:	83 ec 10             	sub    esp,0x10
c000fe31:	68 80 f3 01 c0       	push   0xc001f380
c000fe36:	68 c4 e1 01 c0       	push   0xc001e1c4
c000fe3b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000fe3f:	e8 04 fe ff ff       	call   c000fc48 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fe44:	83 c4 1c             	add    esp,0x1c
c000fe47:	c3                   	ret    

c000fe48 <EnvVarContainer::__loadUser()>:
c000fe48:	c3                   	ret    
c000fe49:	90                   	nop

c000fe4a <EnvVarContainer::EnvVarContainer(Process*)>:
c000fe4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000fe54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe58:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fe5c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000fe5f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fe63:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000fe6a:	90                   	nop
c000fe6b:	c3                   	ret    

c000fe6c <EnvVarContainer::~EnvVarContainer()>:
c000fe6c:	83 ec 0c             	sub    esp,0xc
c000fe6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe73:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe76:	85 c0                	test   eax,eax
c000fe78:	74 1d                	je     c000fe97 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe7e:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe80:	85 c0                	test   eax,eax
c000fe82:	74 13                	je     c000fe97 <EnvVarContainer::~EnvVarContainer()+0x2b>
c000fe84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fe88:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000fe8b:	83 ec 0c             	sub    esp,0xc
c000fe8e:	50                   	push   eax
c000fe8f:	e8 35 79 ff ff       	call   c00077c9 <free>
c000fe94:	83 c4 10             	add    esp,0x10
c000fe97:	90                   	nop
c000fe98:	83 c4 0c             	add    esp,0xc
c000fe9b:	c3                   	ret    

c000fe9c <Krnl::getEnv(Process*, char const*)>:
c000fe9c:	53                   	push   ebx
c000fe9d:	83 ec 08             	sub    esp,0x8
c000fea0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000fea4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fea8:	39 05 b0 37 02 c0    	cmp    DWORD PTR ds:0xc00237b0,eax
c000feae:	74 04                	je     c000feb4 <Krnl::getEnv(Process*, char const*)+0x18>
c000feb0:	85 c0                	test   eax,eax
c000feb2:	75 0b                	jne    c000febf <Krnl::getEnv(Process*, char const*)+0x23>
c000feb4:	a1 50 2f 02 c0       	mov    eax,ds:0xc0022f50
c000feb9:	85 c0                	test   eax,eax
c000febb:	75 19                	jne    c000fed6 <Krnl::getEnv(Process*, char const*)+0x3a>
c000febd:	eb 27                	jmp    c000fee6 <Krnl::getEnv(Process*, char const*)+0x4a>
c000febf:	52                   	push   edx
c000fec0:	52                   	push   edx
c000fec1:	53                   	push   ebx
c000fec2:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c000fec8:	e8 79 fc ff ff       	call   c000fb46 <EnvVarContainer::getEnv(char const*)>
c000fecd:	83 c4 10             	add    esp,0x10
c000fed0:	85 c0                	test   eax,eax
c000fed2:	75 28                	jne    c000fefc <Krnl::getEnv(Process*, char const*)+0x60>
c000fed4:	eb de                	jmp    c000feb4 <Krnl::getEnv(Process*, char const*)+0x18>
c000fed6:	52                   	push   edx
c000fed7:	52                   	push   edx
c000fed8:	53                   	push   ebx
c000fed9:	50                   	push   eax
c000feda:	e8 67 fc ff ff       	call   c000fb46 <EnvVarContainer::getEnv(char const*)>
c000fedf:	83 c4 10             	add    esp,0x10
c000fee2:	85 c0                	test   eax,eax
c000fee4:	75 16                	jne    c000fefc <Krnl::getEnv(Process*, char const*)+0x60>
c000fee6:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000feea:	a1 54 2f 02 c0       	mov    eax,ds:0xc0022f54
c000feef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000fef3:	83 c4 08             	add    esp,0x8
c000fef6:	5b                   	pop    ebx
c000fef7:	e9 4a fc ff ff       	jmp    c000fb46 <EnvVarContainer::getEnv(char const*)>
c000fefc:	83 c4 08             	add    esp,0x8
c000feff:	5b                   	pop    ebx
c000ff00:	c3                   	ret    

c000ff01 <Krnl::setEnvSystem(char const*, char const*)>:
c000ff01:	83 ec 10             	sub    esp,0x10
c000ff04:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff08:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff0c:	ff 35 54 2f 02 c0    	push   DWORD PTR ds:0xc0022f54
c000ff12:	e8 6d fc ff ff       	call   c000fb84 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff17:	83 c4 1c             	add    esp,0x1c
c000ff1a:	c3                   	ret    

c000ff1b <Krnl::setEnvUser(char const*, char const*)>:
c000ff1b:	a1 50 2f 02 c0       	mov    eax,ds:0xc0022f50
c000ff20:	85 c0                	test   eax,eax
c000ff22:	74 15                	je     c000ff39 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c000ff24:	83 ec 10             	sub    esp,0x10
c000ff27:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ff2f:	50                   	push   eax
c000ff30:	e8 4f fc ff ff       	call   c000fb84 <EnvVarContainer::setEnv(char const*, char const*)>
c000ff35:	83 c4 1c             	add    esp,0x1c
c000ff38:	c3                   	ret    
c000ff39:	c3                   	ret    

c000ff3a <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c000ff3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ff3e:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c000ff44:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ff48:	e9 37 fc ff ff       	jmp    c000fb84 <EnvVarContainer::setEnv(char const*, char const*)>

c000ff4d <Krnl::deleteEnvSystem(char const*)>:
c000ff4d:	c3                   	ret    

c000ff4e <Krnl::deleteEnvUser(char const*)>:
c000ff4e:	c3                   	ret    

c000ff4f <Krnl::deleteEnvProcess(Process*, char const*)>:
c000ff4f:	c3                   	ret    

c000ff50 <Krnl::newProcessEnv(Process*)>:
c000ff50:	83 ec 28             	sub    esp,0x28
c000ff53:	6a 0c                	push   0xc
c000ff55:	e8 5f 78 ff ff       	call   c00077b9 <malloc>
c000ff5a:	5a                   	pop    edx
c000ff5b:	59                   	pop    ecx
c000ff5c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff60:	50                   	push   eax
c000ff61:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000ff65:	e8 e0 fe ff ff       	call   c000fe4a <EnvVarContainer::EnvVarContainer(Process*)>
c000ff6a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ff6e:	83 c4 2c             	add    esp,0x2c
c000ff71:	c3                   	ret    

c000ff72 <Krnl::copyProcessEnv(Process*, Process*)>:
c000ff72:	57                   	push   edi
c000ff73:	56                   	push   esi
c000ff74:	53                   	push   ebx
c000ff75:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ff79:	83 ec 0c             	sub    esp,0xc
c000ff7c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c000ff82:	6a 0c                	push   0xc
c000ff84:	e8 30 78 ff ff       	call   c00077b9 <malloc>
c000ff89:	89 c3                	mov    ebx,eax
c000ff8b:	58                   	pop    eax
c000ff8c:	5a                   	pop    edx
c000ff8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ff91:	53                   	push   ebx
c000ff92:	e8 b3 fe ff ff       	call   c000fe4a <EnvVarContainer::EnvVarContainer(Process*)>
c000ff97:	8b 07                	mov    eax,DWORD PTR [edi]
c000ff99:	89 03                	mov    DWORD PTR [ebx],eax
c000ff9b:	c1 e0 03             	shl    eax,0x3
c000ff9e:	89 04 24             	mov    DWORD PTR [esp],eax
c000ffa1:	e8 13 78 ff ff       	call   c00077b9 <malloc>
c000ffa6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000ffa9:	8b 0f                	mov    ecx,DWORD PTR [edi]
c000ffab:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c000ffae:	c1 e1 03             	shl    ecx,0x3
c000ffb1:	89 c7                	mov    edi,eax
c000ffb3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ffb5:	83 c4 10             	add    esp,0x10
c000ffb8:	89 d8                	mov    eax,ebx
c000ffba:	5b                   	pop    ebx
c000ffbb:	5e                   	pop    esi
c000ffbc:	5f                   	pop    edi
c000ffbd:	c3                   	ret    

c000ffbe <Krnl::loadSystemEnv()>:
c000ffbe:	53                   	push   ebx
c000ffbf:	83 ec 14             	sub    esp,0x14
c000ffc2:	6a 0c                	push   0xc
c000ffc4:	e8 f0 77 ff ff       	call   c00077b9 <malloc>
c000ffc9:	89 c3                	mov    ebx,eax
c000ffcb:	58                   	pop    eax
c000ffcc:	5a                   	pop    edx
c000ffcd:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c000ffd3:	53                   	push   ebx
c000ffd4:	e8 71 fe ff ff       	call   c000fe4a <EnvVarContainer::EnvVarContainer(Process*)>
c000ffd9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ffdc:	89 1d 54 2f 02 c0    	mov    DWORD PTR ds:0xc0022f54,ebx
c000ffe2:	e8 47 fe ff ff       	call   c000fe2e <EnvVarContainer::__loadSystem()>
c000ffe7:	83 c4 18             	add    esp,0x18
c000ffea:	5b                   	pop    ebx
c000ffeb:	c3                   	ret    

c000ffec <Krnl::loadUserEnv()>:
c000ffec:	53                   	push   ebx
c000ffed:	83 ec 14             	sub    esp,0x14
c000fff0:	6a 0c                	push   0xc
c000fff2:	e8 c2 77 ff ff       	call   c00077b9 <malloc>
c000fff7:	89 c3                	mov    ebx,eax
c000fff9:	58                   	pop    eax
c000fffa:	5a                   	pop    edx
c000fffb:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c0010001:	53                   	push   ebx
c0010002:	e8 43 fe ff ff       	call   c000fe4a <EnvVarContainer::EnvVarContainer(Process*)>
c0010007:	89 1d 50 2f 02 c0    	mov    DWORD PTR ds:0xc0022f50,ebx
c001000d:	83 c4 18             	add    esp,0x18
c0010010:	5b                   	pop    ebx
c0010011:	c3                   	ret    

c0010012 <Krnl::flushEnv()>:
c0010012:	c3                   	ret    

c0010013 <Krnl::getProcessTotalEnvCount(Process*)>:
c0010013:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010017:	8b 15 50 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f50
c001001d:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0010023:	a1 54 2f 02 c0       	mov    eax,ds:0xc0022f54
c0010028:	8b 00                	mov    eax,DWORD PTR [eax]
c001002a:	03 01                	add    eax,DWORD PTR [ecx]
c001002c:	85 d2                	test   edx,edx
c001002e:	74 02                	je     c0010032 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c0010030:	03 02                	add    eax,DWORD PTR [edx]
c0010032:	c3                   	ret    

c0010033 <Krnl::getProcessEnvPair(Process*, int)>:
c0010033:	57                   	push   edi
c0010034:	56                   	push   esi
c0010035:	8b 35 50 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f50
c001003b:	53                   	push   ebx
c001003c:	85 f6                	test   esi,esi
c001003e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010042:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010046:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001004c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010050:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010052:	75 16                	jne    c001006a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010054:	39 c2                	cmp    edx,eax
c0010056:	7c 16                	jl     c001006e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010058:	8b 0d 54 2f 02 c0    	mov    ecx,DWORD PTR ds:0xc0022f54
c001005e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010060:	01 c6                	add    esi,eax
c0010062:	39 d6                	cmp    esi,edx
c0010064:	7e 3c                	jle    c00100a2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010066:	29 c2                	sub    edx,eax
c0010068:	eb 04                	jmp    c001006e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001006a:	39 c2                	cmp    edx,eax
c001006c:	7d 05                	jge    c0010073 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001006e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010071:	eb 20                	jmp    c0010093 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010073:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010075:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010078:	39 d1                	cmp    ecx,edx
c001007a:	7e 04                	jle    c0010080 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001007c:	29 c2                	sub    edx,eax
c001007e:	eb 10                	jmp    c0010090 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010080:	8b 35 54 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f54
c0010086:	03 0e                	add    ecx,DWORD PTR [esi]
c0010088:	39 d1                	cmp    ecx,edx
c001008a:	7e 16                	jle    c00100a2 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001008c:	29 c2                	sub    edx,eax
c001008e:	29 fa                	sub    edx,edi
c0010090:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010093:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010096:	8b 02                	mov    eax,DWORD PTR [edx]
c0010098:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001009b:	89 03                	mov    DWORD PTR [ebx],eax
c001009d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00100a0:	eb 1d                	jmp    c00100bf <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c00100a2:	83 ec 0c             	sub    esp,0xc
c00100a5:	68 e6 e1 01 c0       	push   0xc001e1e6
c00100aa:	e8 ac 00 00 00       	call   c001015b <KePanic(char const*)>
c00100af:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00100b5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00100bc:	83 c4 10             	add    esp,0x10
c00100bf:	89 d8                	mov    eax,ebx
c00100c1:	5b                   	pop    ebx
c00100c2:	5e                   	pop    esi
c00100c3:	5f                   	pop    edi
c00100c4:	c2 04 00             	ret    0x4

c00100c7 <CPU::current()>:
c00100c7:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00100cc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00100d2:	c3                   	ret    

c00100d3 <operator new(unsigned long)>:
c00100d3:	e9 e1 76 ff ff       	jmp    c00077b9 <malloc>

c00100d8 <operator delete(void*)>:
c00100d8:	e9 fc 76 ff ff       	jmp    c00077d9 <rfree>

c00100dd <disableIRQs()>:
c00100dd:	fa                   	cli    
c00100de:	c3                   	ret    

c00100df <enableIRQs()>:
c00100df:	fb                   	sti    
c00100e0:	c3                   	ret    

c00100e1 <lockScheduler()>:
c00100e1:	fa                   	cli    
c00100e2:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c00100e8:	c3                   	ret    

c00100e9 <unlockScheduler()>:
c00100e9:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00100ee:	48                   	dec    eax
c00100ef:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00100f4:	75 01                	jne    c00100f7 <unlockScheduler()+0xe>
c00100f6:	fb                   	sti    
c00100f7:	c3                   	ret    

c00100f8 <lockStuff()>:
c00100f8:	fa                   	cli    
c00100f9:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c00100ff:	ff 05 84 37 02 c0    	inc    DWORD PTR ds:0xc0023784
c0010105:	c3                   	ret    

c0010106 <unlockStuff()>:
c0010106:	83 ec 0c             	sub    esp,0xc
c0010109:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c001010e:	48                   	dec    eax
c001010f:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c0010114:	75 18                	jne    c001012e <unlockStuff()+0x28>
c0010116:	83 3d 80 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023780,0x0
c001011d:	74 0f                	je     c001012e <unlockStuff()+0x28>
c001011f:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c0010129:	e8 56 32 00 00       	call   c0013384 <schedule()>
c001012e:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0010133:	48                   	dec    eax
c0010134:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0010139:	75 01                	jne    c001013c <unlockStuff()+0x36>
c001013b:	fb                   	sti    
c001013c:	83 c4 0c             	add    esp,0xc
c001013f:	c3                   	ret    

c0010140 <Virt::getAKernelVAS()>:
c0010140:	a1 d0 05 02 c0       	mov    eax,ds:0xc00205d0
c0010145:	c3                   	ret    

c0010146 <__not_memcpy>:
c0010146:	57                   	push   edi
c0010147:	56                   	push   esi
c0010148:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001014c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010150:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0010154:	89 c7                	mov    edi,eax
c0010156:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010158:	5e                   	pop    esi
c0010159:	5f                   	pop    edi
c001015a:	c3                   	ret    

c001015b <KePanic(char const*)>:
c001015b:	c6 05 58 2f 02 c0 01 	mov    BYTE PTR ds:0xc0022f58,0x1
c0010162:	e9 15 50 00 00       	jmp    c001517c <HalPanic(char const*)>

c0010167 <Krnl::powerThread(void*)>:
c0010167:	83 ec 0c             	sub    esp,0xc
c001016a:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001016f:	48                   	dec    eax
c0010170:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0010175:	75 01                	jne    c0010178 <Krnl::powerThread(void*)+0x11>
c0010177:	fb                   	sti    
c0010178:	83 ec 0c             	sub    esp,0xc
c001017b:	c6 05 60 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022f60,0x0
c0010182:	6a 0a                	push   0xa
c0010184:	e8 0b 35 00 00       	call   c0013694 <sleep(unsigned int)>
c0010189:	83 05 a4 2f 02 c0 0a 	add    DWORD PTR ds:0xc0022fa4,0xa
c0010190:	83 c4 10             	add    esp,0x10
c0010193:	eb e3                	jmp    c0010178 <Krnl::powerThread(void*)+0x11>

c0010195 <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c0010195:	57                   	push   edi
c0010196:	b9 09 00 00 00       	mov    ecx,0x9
c001019b:	56                   	push   esi
c001019c:	bf 80 2f 02 c0       	mov    edi,0xc0022f80
c00101a1:	fc                   	cld    
c00101a2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00101a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00101a8:	5e                   	pop    esi
c00101a9:	5f                   	pop    edi
c00101aa:	c3                   	ret    

c00101ab <Krnl::userIOReceived()>:
c00101ab:	c7 05 a4 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022fa4,0x0
c00101b5:	c3                   	ret    

c00101b6 <Krnl::handlePowerButton()>:
c00101b6:	83 ec 0c             	sub    esp,0xc
c00101b9:	a1 80 2f 02 c0       	mov    eax,ds:0xc0022f80
c00101be:	83 f8 02             	cmp    eax,0x2
c00101c1:	75 10                	jne    c00101d3 <Krnl::handlePowerButton()+0x1d>
c00101c3:	83 ec 0c             	sub    esp,0xc
c00101c6:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00101cc:	e8 85 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c00101d1:	eb 11                	jmp    c00101e4 <Krnl::handlePowerButton()+0x2e>
c00101d3:	48                   	dec    eax
c00101d4:	75 11                	jne    c00101e7 <Krnl::handlePowerButton()+0x31>
c00101d6:	83 ec 0c             	sub    esp,0xc
c00101d9:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00101df:	e8 a2 6c ff ff       	call   c0006e86 <Computer::sleep()>
c00101e4:	83 c4 10             	add    esp,0x10
c00101e7:	83 c4 0c             	add    esp,0xc
c00101ea:	c3                   	ret    

c00101eb <Krnl::handleSleepButton()>:
c00101eb:	83 ec 0c             	sub    esp,0xc
c00101ee:	a1 84 2f 02 c0       	mov    eax,ds:0xc0022f84
c00101f3:	83 f8 02             	cmp    eax,0x2
c00101f6:	75 10                	jne    c0010208 <Krnl::handleSleepButton()+0x1d>
c00101f8:	83 ec 0c             	sub    esp,0xc
c00101fb:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0010201:	e8 50 6c ff ff       	call   c0006e56 <Computer::shutdown()>
c0010206:	eb 11                	jmp    c0010219 <Krnl::handleSleepButton()+0x2e>
c0010208:	48                   	dec    eax
c0010209:	75 11                	jne    c001021c <Krnl::handleSleepButton()+0x31>
c001020b:	83 ec 0c             	sub    esp,0xc
c001020e:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0010214:	e8 6d 6c ff ff       	call   c0006e86 <Computer::sleep()>
c0010219:	83 c4 10             	add    esp,0x10
c001021c:	83 c4 0c             	add    esp,0xc
c001021f:	c3                   	ret    

c0010220 <Krnl::setupPowerManager()>:
c0010220:	83 ec 0c             	sub    esp,0xc
c0010223:	c7 05 a4 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022fa4,0x0
c001022d:	68 f0 00 00 00       	push   0xf0
c0010232:	c6 05 60 2f 02 c0 00 	mov    BYTE PTR ds:0xc0022f60,0x0
c0010239:	6a 00                	push   0x0
c001023b:	68 67 01 01 c0       	push   0xc0010167
c0010240:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c0010246:	e8 19 2f 00 00       	call   c0013164 <Process::createThread(void (*)(void*), void*, int)>
c001024b:	c7 05 80 2f 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0022f80,0x2
c0010255:	c7 05 84 2f 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022f84,0x1
c001025f:	c7 05 88 2f 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0022f88,0x3
c0010269:	c7 05 8c 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f8c,0x0
c0010273:	c7 05 98 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f98,0x0
c001027d:	c7 05 90 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f90,0x0
c0010287:	c7 05 9c 2f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022f9c,0x0
c0010291:	c7 05 94 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022f94,0x3c
c001029b:	c7 05 a0 2f 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022fa0,0x3c
c00102a5:	83 c4 1c             	add    esp,0x1c
c00102a8:	c3                   	ret    
c00102a9:	66 90                	xchg   ax,ax
c00102ab:	90                   	nop

c00102ac <KeResolveCompatibilitySymbol(char*)>:
c00102ac:	83 ec 0c             	sub    esp,0xc
c00102af:	83 ec 08             	sub    esp,0x8
c00102b2:	68 00 e2 01 c0       	push   0xc001e200
c00102b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102bb:	e8 20 04 ff ff       	call   c00006e0 <strcmp>
c00102c0:	83 c4 10             	add    esp,0x10
c00102c3:	85 c0                	test   eax,eax
c00102c5:	0f 94 c0             	sete   al
c00102c8:	84 c0                	test   al,al
c00102ca:	74 0c                	je     c00102d8 <KeResolveCompatibilitySymbol(char*)+0x2c>
c00102cc:	b8 d8 04 02 c0       	mov    eax,0xc00204d8
c00102d1:	e9 62 01 00 00       	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102d6:	66 90                	xchg   ax,ax
c00102d8:	83 ec 08             	sub    esp,0x8
c00102db:	68 09 e2 01 c0       	push   0xc001e209
c00102e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102e4:	e8 f7 03 ff ff       	call   c00006e0 <strcmp>
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	85 c0                	test   eax,eax
c00102ee:	0f 94 c0             	sete   al
c00102f1:	84 c0                	test   al,al
c00102f3:	74 0b                	je     c0010300 <KeResolveCompatibilitySymbol(char*)+0x54>
c00102f5:	b8 80 bc 01 c0       	mov    eax,0xc001bc80
c00102fa:	e9 39 01 00 00       	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00102ff:	90                   	nop
c0010300:	83 ec 08             	sub    esp,0x8
c0010303:	68 13 e2 01 c0       	push   0xc001e213
c0010308:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001030c:	e8 cf 03 ff ff       	call   c00006e0 <strcmp>
c0010311:	83 c4 10             	add    esp,0x10
c0010314:	85 c0                	test   eax,eax
c0010316:	0f 94 c0             	sete   al
c0010319:	84 c0                	test   al,al
c001031b:	74 0b                	je     c0010328 <KeResolveCompatibilitySymbol(char*)+0x7c>
c001031d:	b8 b4 b9 01 c0       	mov    eax,0xc001b9b4
c0010322:	e9 11 01 00 00       	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010327:	90                   	nop
c0010328:	83 ec 08             	sub    esp,0x8
c001032b:	68 1c e2 01 c0       	push   0xc001e21c
c0010330:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010334:	e8 a7 03 ff ff       	call   c00006e0 <strcmp>
c0010339:	83 c4 10             	add    esp,0x10
c001033c:	85 c0                	test   eax,eax
c001033e:	0f 94 c0             	sete   al
c0010341:	84 c0                	test   al,al
c0010343:	74 0b                	je     c0010350 <KeResolveCompatibilitySymbol(char*)+0xa4>
c0010345:	b8 5b 01 01 c0       	mov    eax,0xc001015b
c001034a:	e9 e9 00 00 00       	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001034f:	90                   	nop
c0010350:	83 ec 08             	sub    esp,0x8
c0010353:	68 2f e2 01 c0       	push   0xc001e22f
c0010358:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001035c:	e8 7f 03 ff ff       	call   c00006e0 <strcmp>
c0010361:	83 c4 10             	add    esp,0x10
c0010364:	85 c0                	test   eax,eax
c0010366:	0f 94 c0             	sete   al
c0010369:	84 c0                	test   al,al
c001036b:	74 0b                	je     c0010378 <KeResolveCompatibilitySymbol(char*)+0xcc>
c001036d:	b8 e3 fa 00 c0       	mov    eax,0xc000fae3
c0010372:	e9 c1 00 00 00       	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010377:	90                   	nop
c0010378:	83 ec 08             	sub    esp,0x8
c001037b:	68 4c e2 01 c0       	push   0xc001e24c
c0010380:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010384:	e8 57 03 ff ff       	call   c00006e0 <strcmp>
c0010389:	83 c4 10             	add    esp,0x10
c001038c:	85 c0                	test   eax,eax
c001038e:	0f 94 c0             	sete   al
c0010391:	84 c0                	test   al,al
c0010393:	74 0b                	je     c00103a0 <KeResolveCompatibilitySymbol(char*)+0xf4>
c0010395:	b8 80 bd 01 c0       	mov    eax,0xc001bd80
c001039a:	e9 99 00 00 00       	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001039f:	90                   	nop
c00103a0:	83 ec 08             	sub    esp,0x8
c00103a3:	68 56 e2 01 c0       	push   0xc001e256
c00103a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103ac:	e8 2f 03 ff ff       	call   c00006e0 <strcmp>
c00103b1:	83 c4 10             	add    esp,0x10
c00103b4:	85 c0                	test   eax,eax
c00103b6:	0f 94 c0             	sete   al
c00103b9:	84 c0                	test   al,al
c00103bb:	74 07                	je     c00103c4 <KeResolveCompatibilitySymbol(char*)+0x118>
c00103bd:	b8 00 bb 01 c0       	mov    eax,0xc001bb00
c00103c2:	eb 74                	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103c4:	83 ec 08             	sub    esp,0x8
c00103c7:	68 5f e2 01 c0       	push   0xc001e25f
c00103cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103d0:	e8 0b 03 ff ff       	call   c00006e0 <strcmp>
c00103d5:	83 c4 10             	add    esp,0x10
c00103d8:	85 c0                	test   eax,eax
c00103da:	0f 94 c0             	sete   al
c00103dd:	84 c0                	test   al,al
c00103df:	74 07                	je     c00103e8 <KeResolveCompatibilitySymbol(char*)+0x13c>
c00103e1:	b8 dc 04 02 c0       	mov    eax,0xc00204dc
c00103e6:	eb 50                	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c00103e8:	83 ec 08             	sub    esp,0x8
c00103eb:	68 77 e2 01 c0       	push   0xc001e277
c00103f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00103f4:	e8 e7 02 ff ff       	call   c00006e0 <strcmp>
c00103f9:	83 c4 10             	add    esp,0x10
c00103fc:	85 c0                	test   eax,eax
c00103fe:	0f 94 c0             	sete   al
c0010401:	84 c0                	test   al,al
c0010403:	74 07                	je     c001040c <KeResolveCompatibilitySymbol(char*)+0x160>
c0010405:	b8 dc 04 02 c0       	mov    eax,0xc00204dc
c001040a:	eb 2c                	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c001040c:	83 ec 08             	sub    esp,0x8
c001040f:	68 84 e2 01 c0       	push   0xc001e284
c0010414:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010418:	e8 c3 02 ff ff       	call   c00006e0 <strcmp>
c001041d:	83 c4 10             	add    esp,0x10
c0010420:	85 c0                	test   eax,eax
c0010422:	0f 94 c0             	sete   al
c0010425:	84 c0                	test   al,al
c0010427:	74 07                	je     c0010430 <KeResolveCompatibilitySymbol(char*)+0x184>
c0010429:	b8 dd 04 02 c0       	mov    eax,0xc00204dd
c001042e:	eb 08                	jmp    c0010438 <KeResolveCompatibilitySymbol(char*)+0x18c>
c0010430:	b8 00 00 00 00       	mov    eax,0x0
c0010435:	8d 76 00             	lea    esi,[esi+0x0]
c0010438:	83 c4 0c             	add    esp,0xc
c001043b:	c3                   	ret    

c001043c <SysSeekDir(regs*)>:
c001043c:	31 c0                	xor    eax,eax
c001043e:	31 d2                	xor    edx,edx
c0010440:	c3                   	ret    

c0010441 <SysTellDir(regs*)>:
c0010441:	31 c0                	xor    eax,eax
c0010443:	31 d2                	xor    edx,edx
c0010445:	c3                   	ret    

c0010446 <SysVerify(regs*)>:
c0010446:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001044a:	31 d2                	xor    edx,edx
c001044c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001044f:	c3                   	ret    

c0010450 <SysGetArgc(regs*)>:
c0010450:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010455:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010458:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c001045e:	99                   	cdq    
c001045f:	c3                   	ret    

c0010460 <SysTTYName(regs*)>:
c0010460:	b8 01 00 00 00       	mov    eax,0x1
c0010465:	31 d2                	xor    edx,edx
c0010467:	c3                   	ret    

c0010468 <SysFormatDisk(regs*)>:
c0010468:	56                   	push   esi
c0010469:	53                   	push   ebx
c001046a:	50                   	push   eax
c001046b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001046f:	8b 1d d4 05 02 c0    	mov    ebx,DWORD PTR ds:0xc00205d4
c0010475:	eb 28                	jmp    c001049f <SysFormatDisk(regs*)+0x37>
c0010477:	83 ec 0c             	sub    esp,0xc
c001047a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001047d:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010480:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010482:	51                   	push   ecx
c0010483:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010486:	51                   	push   ecx
c0010487:	50                   	push   eax
c0010488:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c001048f:	50                   	push   eax
c0010490:	53                   	push   ebx
c0010491:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010494:	83 c4 20             	add    esp,0x20
c0010497:	83 f8 08             	cmp    eax,0x8
c001049a:	75 12                	jne    c00104ae <SysFormatDisk(regs*)+0x46>
c001049c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001049f:	85 db                	test   ebx,ebx
c00104a1:	75 d4                	jne    c0010477 <SysFormatDisk(regs*)+0xf>
c00104a3:	59                   	pop    ecx
c00104a4:	b8 03 00 00 00       	mov    eax,0x3
c00104a9:	31 d2                	xor    edx,edx
c00104ab:	5b                   	pop    ebx
c00104ac:	5e                   	pop    esi
c00104ad:	c3                   	ret    
c00104ae:	85 c0                	test   eax,eax
c00104b0:	74 1b                	je     c00104cd <SysFormatDisk(regs*)+0x65>
c00104b2:	83 f8 09             	cmp    eax,0x9
c00104b5:	74 0b                	je     c00104c2 <SysFormatDisk(regs*)+0x5a>
c00104b7:	59                   	pop    ecx
c00104b8:	b8 02 00 00 00       	mov    eax,0x2
c00104bd:	31 d2                	xor    edx,edx
c00104bf:	5b                   	pop    ebx
c00104c0:	5e                   	pop    esi
c00104c1:	c3                   	ret    
c00104c2:	59                   	pop    ecx
c00104c3:	b8 01 00 00 00       	mov    eax,0x1
c00104c8:	31 d2                	xor    edx,edx
c00104ca:	5b                   	pop    ebx
c00104cb:	5e                   	pop    esi
c00104cc:	c3                   	ret    
c00104cd:	59                   	pop    ecx
c00104ce:	31 c0                	xor    eax,eax
c00104d0:	31 d2                	xor    edx,edx
c00104d2:	5b                   	pop    ebx
c00104d3:	5e                   	pop    esi
c00104d4:	c3                   	ret    

c00104d5 <SysSetDiskVolumeLabel(regs*)>:
c00104d5:	56                   	push   esi
c00104d6:	53                   	push   ebx
c00104d7:	53                   	push   ebx
c00104d8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00104dc:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00104df:	83 f8 19             	cmp    eax,0x19
c00104e2:	77 2d                	ja     c0010511 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104e4:	8b 0c 85 40 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd5c0]
c00104eb:	85 c9                	test   ecx,ecx
c00104ed:	74 22                	je     c0010511 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104ef:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c00104f2:	85 db                	test   ebx,ebx
c00104f4:	74 1b                	je     c0010511 <SysSetDiskVolumeLabel(regs*)+0x3c>
c00104f6:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c00104fc:	85 d2                	test   edx,edx
c00104fe:	74 11                	je     c0010511 <SysSetDiskVolumeLabel(regs*)+0x3c>
c0010500:	8b 32                	mov    esi,DWORD PTR [edx]
c0010502:	53                   	push   ebx
c0010503:	50                   	push   eax
c0010504:	51                   	push   ecx
c0010505:	52                   	push   edx
c0010506:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010509:	83 c4 10             	add    esp,0x10
c001050c:	99                   	cdq    
c001050d:	59                   	pop    ecx
c001050e:	5b                   	pop    ebx
c001050f:	5e                   	pop    esi
c0010510:	c3                   	ret    
c0010511:	59                   	pop    ecx
c0010512:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010517:	ba ff ff ff ff       	mov    edx,0xffffffff
c001051c:	5b                   	pop    ebx
c001051d:	5e                   	pop    esi
c001051e:	c3                   	ret    

c001051f <SysGetDiskVolumeLabel(regs*)>:
c001051f:	57                   	push   edi
c0010520:	56                   	push   esi
c0010521:	53                   	push   ebx
c0010522:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010526:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010529:	83 fa 19             	cmp    edx,0x19
c001052c:	77 38                	ja     c0010566 <SysGetDiskVolumeLabel(regs*)+0x47>
c001052e:	8b 0c 95 40 2a 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd5c0]
c0010535:	85 c9                	test   ecx,ecx
c0010537:	74 2d                	je     c0010566 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010539:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001053c:	85 db                	test   ebx,ebx
c001053e:	74 26                	je     c0010566 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010540:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010543:	85 f6                	test   esi,esi
c0010545:	74 1f                	je     c0010566 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010547:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c001054d:	85 c0                	test   eax,eax
c001054f:	74 15                	je     c0010566 <SysGetDiskVolumeLabel(regs*)+0x47>
c0010551:	83 ec 0c             	sub    esp,0xc
c0010554:	8b 38                	mov    edi,DWORD PTR [eax]
c0010556:	56                   	push   esi
c0010557:	53                   	push   ebx
c0010558:	52                   	push   edx
c0010559:	51                   	push   ecx
c001055a:	50                   	push   eax
c001055b:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001055e:	83 c4 20             	add    esp,0x20
c0010561:	99                   	cdq    
c0010562:	5b                   	pop    ebx
c0010563:	5e                   	pop    esi
c0010564:	5f                   	pop    edi
c0010565:	c3                   	ret    
c0010566:	5b                   	pop    ebx
c0010567:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001056c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010571:	5e                   	pop    esi
c0010572:	5f                   	pop    edi
c0010573:	c3                   	ret    

c0010574 <SysShutdown(regs*)>:
c0010574:	83 ec 0c             	sub    esp,0xc
c0010577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001057b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001057e:	85 c0                	test   eax,eax
c0010580:	74 18                	je     c001059a <SysShutdown(regs*)+0x26>
c0010582:	83 f8 01             	cmp    eax,0x1
c0010585:	74 38                	je     c00105bf <SysShutdown(regs*)+0x4b>
c0010587:	83 f8 02             	cmp    eax,0x2
c001058a:	74 24                	je     c00105b0 <SysShutdown(regs*)+0x3c>
c001058c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010591:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010596:	83 c4 0c             	add    esp,0xc
c0010599:	c3                   	ret    
c001059a:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c001059f:	8b 10                	mov    edx,DWORD PTR [eax]
c00105a1:	6a 00                	push   0x0
c00105a3:	6a 00                	push   0x0
c00105a5:	6a 00                	push   0x0
c00105a7:	50                   	push   eax
c00105a8:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00105ab:	83 c4 10             	add    esp,0x10
c00105ae:	eb dc                	jmp    c001058c <SysShutdown(regs*)+0x18>
c00105b0:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00105b5:	8b 10                	mov    edx,DWORD PTR [eax]
c00105b7:	6a 00                	push   0x0
c00105b9:	6a 00                	push   0x0
c00105bb:	6a 01                	push   0x1
c00105bd:	eb e8                	jmp    c00105a7 <SysShutdown(regs*)+0x33>
c00105bf:	a1 c0 2a 02 c0       	mov    eax,ds:0xc0022ac0
c00105c4:	85 c0                	test   eax,eax
c00105c6:	74 02                	je     c00105ca <SysShutdown(regs*)+0x56>
c00105c8:	ff d0                	call   eax
c00105ca:	31 c0                	xor    eax,eax
c00105cc:	31 d2                	xor    edx,edx
c00105ce:	83 c4 0c             	add    esp,0xc
c00105d1:	c3                   	ret    

c00105d2 <SysRealpath(regs*)>:
c00105d2:	83 ec 0c             	sub    esp,0xc
c00105d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00105d9:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c00105dc:	85 d2                	test   edx,edx
c00105de:	74 07                	je     c00105e7 <SysRealpath(regs*)+0x15>
c00105e0:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00105e3:	85 c0                	test   eax,eax
c00105e5:	75 0b                	jne    c00105f2 <SysRealpath(regs*)+0x20>
c00105e7:	b8 01 00 00 00       	mov    eax,0x1
c00105ec:	31 d2                	xor    edx,edx
c00105ee:	83 c4 0c             	add    esp,0xc
c00105f1:	c3                   	ret    
c00105f2:	51                   	push   ecx
c00105f3:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00105f9:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00105fc:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010602:	51                   	push   ecx
c0010603:	52                   	push   edx
c0010604:	50                   	push   eax
c0010605:	e8 a2 a2 ff ff       	call   c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)>
c001060a:	83 c4 10             	add    esp,0x10
c001060d:	31 c0                	xor    eax,eax
c001060f:	31 d2                	xor    edx,edx
c0010611:	83 c4 0c             	add    esp,0xc
c0010614:	c3                   	ret    

c0010615 <SysReadDir(regs*)>:
c0010615:	53                   	push   ebx
c0010616:	83 ec 18             	sub    esp,0x18
c0010619:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001061d:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010620:	83 f8 02             	cmp    eax,0x2
c0010623:	76 61                	jbe    c0010686 <SysReadDir(regs*)+0x71>
c0010625:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c001062c:	77 49                	ja     c0010677 <SysReadDir(regs*)+0x62>
c001062e:	83 ec 0c             	sub    esp,0xc
c0010631:	50                   	push   eax
c0010632:	e8 00 8b ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0010637:	83 c4 10             	add    esp,0x10
c001063a:	85 c0                	test   eax,eax
c001063c:	74 39                	je     c0010677 <SysReadDir(regs*)+0x62>
c001063e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010646:	83 ec 0c             	sub    esp,0xc
c0010649:	8b 10                	mov    edx,DWORD PTR [eax]
c001064b:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001064f:	51                   	push   ecx
c0010650:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010653:	51                   	push   ecx
c0010654:	6a 00                	push   0x0
c0010656:	68 10 01 00 00       	push   0x110
c001065b:	50                   	push   eax
c001065c:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001065f:	83 c4 20             	add    esp,0x20
c0010662:	85 c0                	test   eax,eax
c0010664:	74 29                	je     c001068f <SysReadDir(regs*)+0x7a>
c0010666:	83 f8 07             	cmp    eax,0x7
c0010669:	74 1b                	je     c0010686 <SysReadDir(regs*)+0x71>
c001066b:	b8 02 00 00 00       	mov    eax,0x2
c0010670:	31 d2                	xor    edx,edx
c0010672:	83 c4 18             	add    esp,0x18
c0010675:	5b                   	pop    ebx
c0010676:	c3                   	ret    
c0010677:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001067c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010681:	83 c4 18             	add    esp,0x18
c0010684:	5b                   	pop    ebx
c0010685:	c3                   	ret    
c0010686:	b8 01 00 00 00       	mov    eax,0x1
c001068b:	31 d2                	xor    edx,edx
c001068d:	eb e3                	jmp    c0010672 <SysReadDir(regs*)+0x5d>
c001068f:	31 c0                	xor    eax,eax
c0010691:	31 d2                	xor    edx,edx
c0010693:	eb dd                	jmp    c0010672 <SysReadDir(regs*)+0x5d>

c0010695 <SysIsATTY(regs*)>:
c0010695:	83 ec 0c             	sub    esp,0xc
c0010698:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001069c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001069f:	83 f8 02             	cmp    eax,0x2
c00106a2:	76 07                	jbe    c00106ab <SysIsATTY(regs*)+0x16>
c00106a4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00106a9:	75 28                	jne    c00106d3 <SysIsATTY(regs*)+0x3e>
c00106ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00106b0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00106b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00106b9:	85 c0                	test   eax,eax
c00106bb:	74 26                	je     c00106e3 <SysIsATTY(regs*)+0x4e>
c00106bd:	83 ec 0c             	sub    esp,0xc
c00106c0:	8b 10                	mov    edx,DWORD PTR [eax]
c00106c2:	50                   	push   eax
c00106c3:	ff 12                	call   DWORD PTR [edx]
c00106c5:	31 d2                	xor    edx,edx
c00106c7:	25 ff 00 00 00       	and    eax,0xff
c00106cc:	83 c4 10             	add    esp,0x10
c00106cf:	83 c4 0c             	add    esp,0xc
c00106d2:	c3                   	ret    
c00106d3:	83 ec 0c             	sub    esp,0xc
c00106d6:	50                   	push   eax
c00106d7:	e8 5b 8a ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c00106dc:	83 c4 10             	add    esp,0x10
c00106df:	85 c0                	test   eax,eax
c00106e1:	75 da                	jne    c00106bd <SysIsATTY(regs*)+0x28>
c00106e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00106e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c00106ed:	83 c4 0c             	add    esp,0xc
c00106f0:	c3                   	ret    

c00106f1 <SysSeek(regs*)>:
c00106f1:	53                   	push   ebx
c00106f2:	83 ec 08             	sub    esp,0x8
c00106f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00106f9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00106fc:	8d 50 fd             	lea    edx,[eax-0x3]
c00106ff:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0010705:	77 34                	ja     c001073b <SysSeek(regs*)+0x4a>
c0010707:	83 ec 0c             	sub    esp,0xc
c001070a:	50                   	push   eax
c001070b:	e8 27 8a ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0010710:	83 c4 0c             	add    esp,0xc
c0010713:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0010716:	31 db                	xor    ebx,ebx
c0010718:	53                   	push   ebx
c0010719:	51                   	push   ecx
c001071a:	50                   	push   eax
c001071b:	e8 b4 a4 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0010720:	83 c4 10             	add    esp,0x10
c0010723:	85 c0                	test   eax,eax
c0010725:	0f 95 c0             	setne  al
c0010728:	31 d2                	xor    edx,edx
c001072a:	25 ff 00 00 00       	and    eax,0xff
c001072f:	f7 d8                	neg    eax
c0010731:	83 d2 00             	adc    edx,0x0
c0010734:	83 c4 08             	add    esp,0x8
c0010737:	f7 da                	neg    edx
c0010739:	5b                   	pop    ebx
c001073a:	c3                   	ret    
c001073b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010740:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010745:	83 c4 08             	add    esp,0x8
c0010748:	5b                   	pop    ebx
c0010749:	c3                   	ret    

c001074a <SysTell(regs*)>:
c001074a:	53                   	push   ebx
c001074b:	83 ec 08             	sub    esp,0x8
c001074e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010752:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010755:	83 f8 02             	cmp    eax,0x2
c0010758:	76 50                	jbe    c00107aa <SysTell(regs*)+0x60>
c001075a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001075f:	76 19                	jbe    c001077a <SysTell(regs*)+0x30>
c0010761:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0010764:	31 d2                	xor    edx,edx
c0010766:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001076c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010773:	31 c0                	xor    eax,eax
c0010775:	83 c4 08             	add    esp,0x8
c0010778:	5b                   	pop    ebx
c0010779:	c3                   	ret    
c001077a:	83 ec 0c             	sub    esp,0xc
c001077d:	50                   	push   eax
c001077e:	e8 b4 89 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0010783:	5a                   	pop    edx
c0010784:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010787:	59                   	pop    ecx
c0010788:	53                   	push   ebx
c0010789:	50                   	push   eax
c001078a:	e8 9b a4 ff ff       	call   c000ac2a <File::tell(unsigned long long*)>
c001078f:	83 c4 10             	add    esp,0x10
c0010792:	85 c0                	test   eax,eax
c0010794:	0f 95 c0             	setne  al
c0010797:	31 d2                	xor    edx,edx
c0010799:	25 ff 00 00 00       	and    eax,0xff
c001079e:	f7 d8                	neg    eax
c00107a0:	83 d2 00             	adc    edx,0x0
c00107a3:	83 c4 08             	add    esp,0x8
c00107a6:	f7 da                	neg    edx
c00107a8:	5b                   	pop    ebx
c00107a9:	c3                   	ret    
c00107aa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00107af:	ba ff ff ff ff       	mov    edx,0xffffffff
c00107b4:	83 c4 08             	add    esp,0x8
c00107b7:	5b                   	pop    ebx
c00107b8:	c3                   	ret    

c00107b9 <SysSize(regs*)>:
c00107b9:	53                   	push   ebx
c00107ba:	83 ec 18             	sub    esp,0x18
c00107bd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00107c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00107c4:	83 f8 02             	cmp    eax,0x2
c00107c7:	76 56                	jbe    c001081f <SysSize(regs*)+0x66>
c00107c9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00107ce:	76 19                	jbe    c00107e9 <SysSize(regs*)+0x30>
c00107d0:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00107d3:	31 d2                	xor    edx,edx
c00107d5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00107db:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00107e2:	31 c0                	xor    eax,eax
c00107e4:	83 c4 18             	add    esp,0x18
c00107e7:	5b                   	pop    ebx
c00107e8:	c3                   	ret    
c00107e9:	83 ec 0c             	sub    esp,0xc
c00107ec:	50                   	push   eax
c00107ed:	e8 45 89 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c00107f2:	83 c4 0c             	add    esp,0xc
c00107f5:	8d 54 24 13          	lea    edx,[esp+0x13]
c00107f9:	52                   	push   edx
c00107fa:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00107fd:	52                   	push   edx
c00107fe:	50                   	push   eax
c00107ff:	e8 be a5 ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c0010804:	83 c4 10             	add    esp,0x10
c0010807:	85 c0                	test   eax,eax
c0010809:	0f 95 c0             	setne  al
c001080c:	31 d2                	xor    edx,edx
c001080e:	25 ff 00 00 00       	and    eax,0xff
c0010813:	f7 d8                	neg    eax
c0010815:	83 d2 00             	adc    edx,0x0
c0010818:	83 c4 18             	add    esp,0x18
c001081b:	f7 da                	neg    edx
c001081d:	5b                   	pop    ebx
c001081e:	c3                   	ret    
c001081f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010824:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010829:	83 c4 18             	add    esp,0x18
c001082c:	5b                   	pop    ebx
c001082d:	c3                   	ret    

c001082e <SysSizeFromFilename(regs*)>:
c001082e:	57                   	push   edi
c001082f:	56                   	push   esi
c0010830:	53                   	push   ebx
c0010831:	83 ec 20             	sub    esp,0x20
c0010834:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0010838:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c001083b:	83 fb 02             	cmp    ebx,0x2
c001083e:	0f 86 8c 00 00 00    	jbe    c00108d0 <SysSizeFromFilename(regs*)+0xa2>
c0010844:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001084a:	76 1b                	jbe    c0010867 <SysSizeFromFilename(regs*)+0x39>
c001084c:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001084f:	31 d2                	xor    edx,edx
c0010851:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010857:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001085e:	83 c4 20             	add    esp,0x20
c0010861:	31 c0                	xor    eax,eax
c0010863:	5b                   	pop    ebx
c0010864:	5e                   	pop    esi
c0010865:	5f                   	pop    edi
c0010866:	c3                   	ret    
c0010867:	83 ec 0c             	sub    esp,0xc
c001086a:	68 14 01 00 00       	push   0x114
c001086f:	e8 45 6f ff ff       	call   c00077b9 <malloc>
c0010874:	83 c4 0c             	add    esp,0xc
c0010877:	89 c7                	mov    edi,eax
c0010879:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001087e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010881:	50                   	push   eax
c0010882:	53                   	push   ebx
c0010883:	57                   	push   edi
c0010884:	e8 cd a1 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0010889:	83 c4 0c             	add    esp,0xc
c001088c:	8d 44 24 23          	lea    eax,[esp+0x23]
c0010890:	50                   	push   eax
c0010891:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0010894:	52                   	push   edx
c0010895:	57                   	push   edi
c0010896:	e8 27 a5 ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c001089b:	83 c4 10             	add    esp,0x10
c001089e:	85 ff                	test   edi,edi
c00108a0:	74 14                	je     c00108b6 <SysSizeFromFilename(regs*)+0x88>
c00108a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00108a6:	8b 17                	mov    edx,DWORD PTR [edi]
c00108a8:	83 ec 0c             	sub    esp,0xc
c00108ab:	57                   	push   edi
c00108ac:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00108af:	83 c4 10             	add    esp,0x10
c00108b2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00108b6:	85 c0                	test   eax,eax
c00108b8:	0f 95 c0             	setne  al
c00108bb:	31 d2                	xor    edx,edx
c00108bd:	25 ff 00 00 00       	and    eax,0xff
c00108c2:	f7 d8                	neg    eax
c00108c4:	83 d2 00             	adc    edx,0x0
c00108c7:	83 c4 20             	add    esp,0x20
c00108ca:	f7 da                	neg    edx
c00108cc:	5b                   	pop    ebx
c00108cd:	5e                   	pop    esi
c00108ce:	5f                   	pop    edi
c00108cf:	c3                   	ret    
c00108d0:	83 c4 20             	add    esp,0x20
c00108d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00108d8:	5b                   	pop    ebx
c00108d9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00108de:	5e                   	pop    esi
c00108df:	5f                   	pop    edi
c00108e0:	c3                   	ret    

c00108e1 <SysClose(regs*)>:
c00108e1:	53                   	push   ebx
c00108e2:	83 ec 08             	sub    esp,0x8
c00108e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00108e9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00108ec:	83 f8 02             	cmp    eax,0x2
c00108ef:	76 41                	jbe    c0010932 <SysClose(regs*)+0x51>
c00108f1:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00108f7:	83 fa 01             	cmp    edx,0x1
c00108fa:	76 2d                	jbe    c0010929 <SysClose(regs*)+0x48>
c00108fc:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0010901:	77 2f                	ja     c0010932 <SysClose(regs*)+0x51>
c0010903:	83 ec 0c             	sub    esp,0xc
c0010906:	50                   	push   eax
c0010907:	e8 2b 88 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c001090c:	89 c3                	mov    ebx,eax
c001090e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010911:	e8 5e a2 ff ff       	call   c000ab74 <File::close()>
c0010916:	83 c4 10             	add    esp,0x10
c0010919:	85 db                	test   ebx,ebx
c001091b:	74 0c                	je     c0010929 <SysClose(regs*)+0x48>
c001091d:	83 ec 0c             	sub    esp,0xc
c0010920:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010922:	53                   	push   ebx
c0010923:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010926:	83 c4 10             	add    esp,0x10
c0010929:	31 c0                	xor    eax,eax
c001092b:	31 d2                	xor    edx,edx
c001092d:	83 c4 08             	add    esp,0x8
c0010930:	5b                   	pop    ebx
c0010931:	c3                   	ret    
c0010932:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010937:	ba ff ff ff ff       	mov    edx,0xffffffff
c001093c:	83 c4 08             	add    esp,0x8
c001093f:	5b                   	pop    ebx
c0010940:	c3                   	ret    

c0010941 <SysOpenDir(regs*)>:
c0010941:	56                   	push   esi
c0010942:	53                   	push   ebx
c0010943:	50                   	push   eax
c0010944:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010948:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001094b:	85 c0                	test   eax,eax
c001094d:	74 5b                	je     c00109aa <SysOpenDir(regs*)+0x69>
c001094f:	83 ec 0c             	sub    esp,0xc
c0010952:	68 14 01 00 00       	push   0x114
c0010957:	e8 5d 6e ff ff       	call   c00077b9 <malloc>
c001095c:	83 c4 0c             	add    esp,0xc
c001095f:	89 c6                	mov    esi,eax
c0010961:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010966:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010969:	50                   	push   eax
c001096a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001096d:	50                   	push   eax
c001096e:	56                   	push   esi
c001096f:	e8 0c a6 ff ff       	call   c000af80 <Directory::Directory(char const*, Process*)>
c0010974:	83 c4 10             	add    esp,0x10
c0010977:	85 f6                	test   esi,esi
c0010979:	74 2f                	je     c00109aa <SysOpenDir(regs*)+0x69>
c001097b:	83 ec 0c             	sub    esp,0xc
c001097e:	56                   	push   esi
c001097f:	e8 bc a6 ff ff       	call   c000b040 <Directory::open()>
c0010984:	83 c4 10             	add    esp,0x10
c0010987:	85 c0                	test   eax,eax
c0010989:	75 1f                	jne    c00109aa <SysOpenDir(regs*)+0x69>
c001098b:	83 ec 0c             	sub    esp,0xc
c001098e:	56                   	push   esi
c001098f:	e8 ae 84 ff ff       	call   c0008e42 <UnixFile::getFileDescriptor()>
c0010994:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0010997:	83 c4 10             	add    esp,0x10
c001099a:	89 02                	mov    DWORD PTR [edx],eax
c001099c:	c1 f8 1f             	sar    eax,0x1f
c001099f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00109a2:	31 c0                	xor    eax,eax
c00109a4:	59                   	pop    ecx
c00109a5:	31 d2                	xor    edx,edx
c00109a7:	5b                   	pop    ebx
c00109a8:	5e                   	pop    esi
c00109a9:	c3                   	ret    
c00109aa:	59                   	pop    ecx
c00109ab:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00109b0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00109b5:	5b                   	pop    ebx
c00109b6:	5e                   	pop    esi
c00109b7:	c3                   	ret    

c00109b8 <SysCloseDir(regs*)>:
c00109b8:	53                   	push   ebx
c00109b9:	83 ec 08             	sub    esp,0x8
c00109bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109c0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00109c3:	8d 50 fd             	lea    edx,[eax-0x3]
c00109c6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00109cc:	77 2f                	ja     c00109fd <SysCloseDir(regs*)+0x45>
c00109ce:	83 ec 0c             	sub    esp,0xc
c00109d1:	50                   	push   eax
c00109d2:	e8 60 87 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c00109d7:	89 c3                	mov    ebx,eax
c00109d9:	89 04 24             	mov    DWORD PTR [esp],eax
c00109dc:	e8 bb a6 ff ff       	call   c000b09c <Directory::close()>
c00109e1:	83 c4 10             	add    esp,0x10
c00109e4:	85 db                	test   ebx,ebx
c00109e6:	74 0c                	je     c00109f4 <SysCloseDir(regs*)+0x3c>
c00109e8:	83 ec 0c             	sub    esp,0xc
c00109eb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00109ed:	53                   	push   ebx
c00109ee:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00109f1:	83 c4 10             	add    esp,0x10
c00109f4:	31 c0                	xor    eax,eax
c00109f6:	31 d2                	xor    edx,edx
c00109f8:	83 c4 08             	add    esp,0x8
c00109fb:	5b                   	pop    ebx
c00109fc:	c3                   	ret    
c00109fd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a02:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a07:	83 c4 08             	add    esp,0x8
c0010a0a:	5b                   	pop    ebx
c0010a0b:	c3                   	ret    

c0010a0c <SysMakeDir(regs*)>:
c0010a0c:	56                   	push   esi
c0010a0d:	53                   	push   ebx
c0010a0e:	83 ec 10             	sub    esp,0x10
c0010a11:	68 14 01 00 00       	push   0x114
c0010a16:	e8 9e 6d ff ff       	call   c00077b9 <malloc>
c0010a1b:	83 c4 0c             	add    esp,0xc
c0010a1e:	89 c3                	mov    ebx,eax
c0010a20:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a25:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c0010a28:	56                   	push   esi
c0010a29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010a2d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010a30:	50                   	push   eax
c0010a31:	53                   	push   ebx
c0010a32:	e8 49 a5 ff ff       	call   c000af80 <Directory::Directory(char const*, Process*)>
c0010a37:	83 c4 10             	add    esp,0x10
c0010a3a:	85 db                	test   ebx,ebx
c0010a3c:	74 32                	je     c0010a70 <SysMakeDir(regs*)+0x64>
c0010a3e:	83 ec 0c             	sub    esp,0xc
c0010a41:	53                   	push   ebx
c0010a42:	e8 d9 a7 ff ff       	call   c000b220 <Directory::create()>
c0010a47:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a4a:	89 c6                	mov    esi,eax
c0010a4c:	e8 4b a6 ff ff       	call   c000b09c <Directory::close()>
c0010a51:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010a53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a56:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010a59:	83 c4 10             	add    esp,0x10
c0010a5c:	31 c0                	xor    eax,eax
c0010a5e:	59                   	pop    ecx
c0010a5f:	85 f6                	test   esi,esi
c0010a61:	5b                   	pop    ebx
c0010a62:	0f 95 c0             	setne  al
c0010a65:	5e                   	pop    esi
c0010a66:	31 d2                	xor    edx,edx
c0010a68:	f7 d8                	neg    eax
c0010a6a:	83 d2 00             	adc    edx,0x0
c0010a6d:	f7 da                	neg    edx
c0010a6f:	c3                   	ret    
c0010a70:	59                   	pop    ecx
c0010a71:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010a76:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010a7b:	5b                   	pop    ebx
c0010a7c:	5e                   	pop    esi
c0010a7d:	c3                   	ret    

c0010a7e <SysWait(regs*)>:
c0010a7e:	83 ec 10             	sub    esp,0x10
c0010a81:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a85:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010a88:	52                   	push   edx
c0010a89:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0010a8c:	51                   	push   ecx
c0010a8d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010a90:	50                   	push   eax
c0010a91:	e8 1a 2b 00 00       	call   c00135b0 <waitTask(int, int*, int)>
c0010a96:	83 c4 1c             	add    esp,0x1c
c0010a99:	99                   	cdq    
c0010a9a:	c3                   	ret    

c0010a9b <SysNotImpl(regs*)>:
c0010a9b:	83 ec 18             	sub    esp,0x18
c0010a9e:	68 91 e2 01 c0       	push   0xc001e291
c0010aa3:	e8 b3 f6 ff ff       	call   c001015b <KePanic(char const*)>
c0010aa8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010aad:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010ab2:	83 c4 1c             	add    esp,0x1c
c0010ab5:	c3                   	ret    

c0010ab6 <SysPanic(regs*)>:
c0010ab6:	83 ec 18             	sub    esp,0x18
c0010ab9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010abd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010ac0:	50                   	push   eax
c0010ac1:	e8 95 f6 ff ff       	call   c001015b <KePanic(char const*)>
c0010ac6:	b8 01 00 00 00       	mov    eax,0x1
c0010acb:	31 d2                	xor    edx,edx
c0010acd:	83 c4 1c             	add    esp,0x1c
c0010ad0:	c3                   	ret    

c0010ad1 <SysRmdir(regs*)>:
c0010ad1:	56                   	push   esi
c0010ad2:	53                   	push   ebx
c0010ad3:	83 ec 20             	sub    esp,0x20
c0010ad6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010ada:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010add:	68 14 01 00 00       	push   0x114
c0010ae2:	e8 d2 6c ff ff       	call   c00077b9 <malloc>
c0010ae7:	83 c4 0c             	add    esp,0xc
c0010aea:	89 c3                	mov    ebx,eax
c0010aec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010af1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010af4:	50                   	push   eax
c0010af5:	56                   	push   esi
c0010af6:	53                   	push   ebx
c0010af7:	e8 5a 9f ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0010afc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010aff:	e8 8a a1 ff ff       	call   c000ac8e <File::unlink()>
c0010b04:	83 c4 10             	add    esp,0x10
c0010b07:	85 db                	test   ebx,ebx
c0010b09:	74 14                	je     c0010b1f <SysRmdir(regs*)+0x4e>
c0010b0b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b0f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b11:	83 ec 0c             	sub    esp,0xc
c0010b14:	53                   	push   ebx
c0010b15:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b18:	83 c4 10             	add    esp,0x10
c0010b1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b1f:	85 c0                	test   eax,eax
c0010b21:	0f 95 c0             	setne  al
c0010b24:	31 d2                	xor    edx,edx
c0010b26:	25 ff 00 00 00       	and    eax,0xff
c0010b2b:	f7 d8                	neg    eax
c0010b2d:	83 d2 00             	adc    edx,0x0
c0010b30:	83 c4 14             	add    esp,0x14
c0010b33:	f7 da                	neg    edx
c0010b35:	5b                   	pop    ebx
c0010b36:	5e                   	pop    esi
c0010b37:	c3                   	ret    

c0010b38 <SysUnlink(regs*)>:
c0010b38:	56                   	push   esi
c0010b39:	53                   	push   ebx
c0010b3a:	83 ec 20             	sub    esp,0x20
c0010b3d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010b41:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0010b44:	68 14 01 00 00       	push   0x114
c0010b49:	e8 6b 6c ff ff       	call   c00077b9 <malloc>
c0010b4e:	83 c4 0c             	add    esp,0xc
c0010b51:	89 c3                	mov    ebx,eax
c0010b53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b58:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010b5b:	50                   	push   eax
c0010b5c:	56                   	push   esi
c0010b5d:	53                   	push   ebx
c0010b5e:	e8 f3 9e ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0010b63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010b66:	e8 23 a1 ff ff       	call   c000ac8e <File::unlink()>
c0010b6b:	83 c4 10             	add    esp,0x10
c0010b6e:	85 db                	test   ebx,ebx
c0010b70:	74 14                	je     c0010b86 <SysUnlink(regs*)+0x4e>
c0010b72:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010b76:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010b78:	83 ec 0c             	sub    esp,0xc
c0010b7b:	53                   	push   ebx
c0010b7c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010b7f:	83 c4 10             	add    esp,0x10
c0010b82:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010b86:	85 c0                	test   eax,eax
c0010b88:	0f 95 c0             	setne  al
c0010b8b:	31 d2                	xor    edx,edx
c0010b8d:	25 ff 00 00 00       	and    eax,0xff
c0010b92:	f7 d8                	neg    eax
c0010b94:	83 d2 00             	adc    edx,0x0
c0010b97:	83 c4 14             	add    esp,0x14
c0010b9a:	f7 da                	neg    edx
c0010b9c:	5b                   	pop    ebx
c0010b9d:	5e                   	pop    esi
c0010b9e:	c3                   	ret    

c0010b9f <SysGetArgv(regs*)>:
c0010b9f:	83 ec 0c             	sub    esp,0xc
c0010ba2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010ba6:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010ba9:	85 c0                	test   eax,eax
c0010bab:	78 2c                	js     c0010bd9 <SysGetArgv(regs*)+0x3a>
c0010bad:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010bb3:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010bb6:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c0010bbc:	7d 1b                	jge    c0010bd9 <SysGetArgv(regs*)+0x3a>
c0010bbe:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c0010bc5:	85 c0                	test   eax,eax
c0010bc7:	74 18                	je     c0010be1 <SysGetArgv(regs*)+0x42>
c0010bc9:	83 ec 08             	sub    esp,0x8
c0010bcc:	50                   	push   eax
c0010bcd:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c0010bd0:	50                   	push   eax
c0010bd1:	e8 2a fa fe ff       	call   c0000600 <strcpy>
c0010bd6:	83 c4 10             	add    esp,0x10
c0010bd9:	31 c0                	xor    eax,eax
c0010bdb:	31 d2                	xor    edx,edx
c0010bdd:	83 c4 0c             	add    esp,0xc
c0010be0:	c3                   	ret    
c0010be1:	b8 01 00 00 00       	mov    eax,0x1
c0010be6:	31 d2                	xor    edx,edx
c0010be8:	83 c4 0c             	add    esp,0xc
c0010beb:	c3                   	ret    

c0010bec <SysUSleep(regs*)>:
c0010bec:	83 ec 1c             	sub    esp,0x1c
c0010bef:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0010bf3:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0010bf6:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0010bf9:	6a 00                	push   0x0
c0010bfb:	6a 64                	push   0x64
c0010bfd:	52                   	push   edx
c0010bfe:	50                   	push   eax
c0010bff:	e8 7c b0 00 00       	call   c001bc80 <__udivdi3>
c0010c04:	83 c4 14             	add    esp,0x14
c0010c07:	50                   	push   eax
c0010c08:	e8 77 2a 00 00       	call   c0013684 <milliTenthSleep(unsigned int)>
c0010c0d:	31 c0                	xor    eax,eax
c0010c0f:	31 d2                	xor    edx,edx
c0010c11:	83 c4 1c             	add    esp,0x1c
c0010c14:	c3                   	ret    

c0010c15 <SysSpawn(regs*)>:
c0010c15:	56                   	push   esi
c0010c16:	53                   	push   ebx
c0010c17:	50                   	push   eax
c0010c18:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c1c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010c1f:	85 c0                	test   eax,eax
c0010c21:	75 08                	jne    c0010c2b <SysSpawn(regs*)+0x16>
c0010c23:	59                   	pop    ecx
c0010c24:	31 c0                	xor    eax,eax
c0010c26:	31 d2                	xor    edx,edx
c0010c28:	5b                   	pop    ebx
c0010c29:	5e                   	pop    esi
c0010c2a:	c3                   	ret    
c0010c2b:	83 ec 0c             	sub    esp,0xc
c0010c2e:	68 20 07 00 00       	push   0x720
c0010c33:	e8 81 6b ff ff       	call   c00077b9 <malloc>
c0010c38:	83 c4 10             	add    esp,0x10
c0010c3b:	89 c6                	mov    esi,eax
c0010c3d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010c40:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010c43:	85 c0                	test   eax,eax
c0010c45:	75 33                	jne    c0010c7a <SysSpawn(regs*)+0x65>
c0010c47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c4c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c4f:	52                   	push   edx
c0010c50:	50                   	push   eax
c0010c51:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c0010c54:	53                   	push   ebx
c0010c55:	56                   	push   esi
c0010c56:	e8 f5 20 00 00       	call   c0012d50 <Process::Process(char const*, Process*, char**)>
c0010c5b:	83 c4 10             	add    esp,0x10
c0010c5e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0010c65:	75 bc                	jne    c0010c23 <SysSpawn(regs*)+0xe>
c0010c67:	83 ec 0c             	sub    esp,0xc
c0010c6a:	56                   	push   esi
c0010c6b:	e8 ec 25 00 00       	call   c001325c <Process::createUserThread()>
c0010c70:	8b 06                	mov    eax,DWORD PTR [esi]
c0010c72:	83 c4 10             	add    esp,0x10
c0010c75:	99                   	cdq    
c0010c76:	59                   	pop    ecx
c0010c77:	5b                   	pop    ebx
c0010c78:	5e                   	pop    esi
c0010c79:	c3                   	ret    
c0010c7a:	31 c0                	xor    eax,eax
c0010c7c:	eb d1                	jmp    c0010c4f <SysSpawn(regs*)+0x3a>

c0010c7e <SysGetEnv(regs*)>:
c0010c7e:	57                   	push   edi
c0010c7f:	56                   	push   esi
c0010c80:	53                   	push   ebx
c0010c81:	83 ec 1c             	sub    esp,0x1c
c0010c84:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010c88:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c8d:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010c90:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c0010c93:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c96:	50                   	push   eax
c0010c97:	e8 77 f3 ff ff       	call   c0010013 <Krnl::getProcessTotalEnvCount(Process*)>
c0010c9c:	83 c4 10             	add    esp,0x10
c0010c9f:	39 c7                	cmp    edi,eax
c0010ca1:	7c 14                	jl     c0010cb7 <SysGetEnv(regs*)+0x39>
c0010ca3:	85 f6                	test   esi,esi
c0010ca5:	75 0b                	jne    c0010cb2 <SysGetEnv(regs*)+0x34>
c0010ca7:	83 c4 10             	add    esp,0x10
c0010caa:	31 c0                	xor    eax,eax
c0010cac:	5b                   	pop    ebx
c0010cad:	31 d2                	xor    edx,edx
c0010caf:	5e                   	pop    esi
c0010cb0:	5f                   	pop    edi
c0010cb1:	c3                   	ret    
c0010cb2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010cb5:	eb f0                	jmp    c0010ca7 <SysGetEnv(regs*)+0x29>
c0010cb7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0010cbb:	52                   	push   edx
c0010cbc:	57                   	push   edi
c0010cbd:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0010cc3:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c0010cc6:	51                   	push   ecx
c0010cc7:	50                   	push   eax
c0010cc8:	e8 66 f3 ff ff       	call   c0010033 <Krnl::getProcessEnvPair(Process*, int)>
c0010ccd:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0010cd0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010cd4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010cd8:	83 c4 0c             	add    esp,0xc
c0010cdb:	85 db                	test   ebx,ebx
c0010cdd:	75 23                	jne    c0010d02 <SysGetEnv(regs*)+0x84>
c0010cdf:	83 ec 0c             	sub    esp,0xc
c0010ce2:	50                   	push   eax
c0010ce3:	e8 58 f8 fe ff       	call   c0000540 <strlen>
c0010ce8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010ceb:	89 c3                	mov    ebx,eax
c0010ced:	e8 4e f8 fe ff       	call   c0000540 <strlen>
c0010cf2:	31 d2                	xor    edx,edx
c0010cf4:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0010cf8:	83 c4 10             	add    esp,0x10
c0010cfb:	83 c4 10             	add    esp,0x10
c0010cfe:	5b                   	pop    ebx
c0010cff:	5e                   	pop    esi
c0010d00:	5f                   	pop    edi
c0010d01:	c3                   	ret    
c0010d02:	83 ec 08             	sub    esp,0x8
c0010d05:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0010d08:	50                   	push   eax
c0010d09:	56                   	push   esi
c0010d0a:	e8 f1 f8 fe ff       	call   c0000600 <strcpy>
c0010d0f:	58                   	pop    eax
c0010d10:	5a                   	pop    edx
c0010d11:	68 ab e2 01 c0       	push   0xc001e2ab
c0010d16:	56                   	push   esi
c0010d17:	e8 a4 fa fe ff       	call   c00007c0 <strcat>
c0010d1c:	59                   	pop    ecx
c0010d1d:	5b                   	pop    ebx
c0010d1e:	57                   	push   edi
c0010d1f:	56                   	push   esi
c0010d20:	e8 9b fa fe ff       	call   c00007c0 <strcat>
c0010d25:	83 c4 10             	add    esp,0x10
c0010d28:	e9 7a ff ff ff       	jmp    c0010ca7 <SysGetEnv(regs*)+0x29>

c0010d2d <SysSetFatAttrib(regs*)>:
c0010d2d:	57                   	push   edi
c0010d2e:	56                   	push   esi
c0010d2f:	53                   	push   ebx
c0010d30:	83 ec 1c             	sub    esp,0x1c
c0010d33:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0010d37:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0010d3a:	68 14 01 00 00       	push   0x114
c0010d3f:	e8 75 6a ff ff       	call   c00077b9 <malloc>
c0010d44:	83 c4 0c             	add    esp,0xc
c0010d47:	89 c3                	mov    ebx,eax
c0010d49:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d4e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d51:	50                   	push   eax
c0010d52:	57                   	push   edi
c0010d53:	53                   	push   ebx
c0010d54:	e8 fd 9c ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0010d59:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0010d5c:	83 c4 0c             	add    esp,0xc
c0010d5f:	0f b6 d4             	movzx  edx,ah
c0010d62:	25 ff 00 00 00       	and    eax,0xff
c0010d67:	52                   	push   edx
c0010d68:	50                   	push   eax
c0010d69:	53                   	push   ebx
c0010d6a:	e8 b9 9f ff ff       	call   c000ad28 <File::chfatattr(unsigned char, unsigned char)>
c0010d6f:	83 c4 10             	add    esp,0x10
c0010d72:	85 db                	test   ebx,ebx
c0010d74:	74 14                	je     c0010d8a <SysSetFatAttrib(regs*)+0x5d>
c0010d76:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d7a:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010d7c:	83 ec 0c             	sub    esp,0xc
c0010d7f:	53                   	push   ebx
c0010d80:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0010d83:	83 c4 10             	add    esp,0x10
c0010d86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010d8a:	85 c0                	test   eax,eax
c0010d8c:	0f 95 c0             	setne  al
c0010d8f:	31 d2                	xor    edx,edx
c0010d91:	25 ff 00 00 00       	and    eax,0xff
c0010d96:	f7 d8                	neg    eax
c0010d98:	83 d2 00             	adc    edx,0x0
c0010d9b:	83 c4 10             	add    esp,0x10
c0010d9e:	f7 da                	neg    edx
c0010da0:	5b                   	pop    ebx
c0010da1:	5e                   	pop    esi
c0010da2:	5f                   	pop    edi
c0010da3:	c3                   	ret    

c0010da4 <SysPipe(regs*)>:
c0010da4:	57                   	push   edi
c0010da5:	56                   	push   esi
c0010da6:	53                   	push   ebx
c0010da7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010dab:	83 ec 0c             	sub    esp,0xc
c0010dae:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c0010db1:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010db4:	6a 20                	push   0x20
c0010db6:	e8 fe 69 ff ff       	call   c00077b9 <malloc>
c0010dbb:	89 c3                	mov    ebx,eax
c0010dbd:	58                   	pop    eax
c0010dbe:	5a                   	pop    edx
c0010dbf:	68 00 50 00 00       	push   0x5000
c0010dc4:	53                   	push   ebx
c0010dc5:	e8 f4 72 ff ff       	call   c00080be <Pipe::Pipe(int)>
c0010dca:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dcd:	e8 70 80 ff ff       	call   c0008e42 <UnixFile::getFileDescriptor()>
c0010dd2:	89 07                	mov    DWORD PTR [edi],eax
c0010dd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010dd7:	e8 66 80 ff ff       	call   c0008e42 <UnixFile::getFileDescriptor()>
c0010ddc:	83 c4 10             	add    esp,0x10
c0010ddf:	89 06                	mov    DWORD PTR [esi],eax
c0010de1:	31 d2                	xor    edx,edx
c0010de3:	5b                   	pop    ebx
c0010de4:	31 c0                	xor    eax,eax
c0010de6:	5e                   	pop    esi
c0010de7:	5f                   	pop    edi
c0010de8:	c3                   	ret    

c0010de9 <SysGetUnixTime(regs*)>:
c0010de9:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0010dee:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0010df4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0010df8:	e9 69 a6 ff ff       	jmp    c000b466 <Clock::timeInSecondsLocal()>

c0010dfd <string_ends_with(char const*, char const*)>:
c0010dfd:	57                   	push   edi
c0010dfe:	56                   	push   esi
c0010dff:	53                   	push   ebx
c0010e00:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010e04:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0010e08:	83 ec 0c             	sub    esp,0xc
c0010e0b:	53                   	push   ebx
c0010e0c:	e8 2f f7 fe ff       	call   c0000540 <strlen>
c0010e11:	89 3c 24             	mov    DWORD PTR [esp],edi
c0010e14:	89 c6                	mov    esi,eax
c0010e16:	e8 25 f7 fe ff       	call   c0000540 <strlen>
c0010e1b:	83 c4 10             	add    esp,0x10
c0010e1e:	39 c6                	cmp    esi,eax
c0010e20:	7d 06                	jge    c0010e28 <string_ends_with(char const*, char const*)+0x2b>
c0010e22:	5b                   	pop    ebx
c0010e23:	31 c0                	xor    eax,eax
c0010e25:	5e                   	pop    esi
c0010e26:	5f                   	pop    edi
c0010e27:	c3                   	ret    
c0010e28:	83 ec 08             	sub    esp,0x8
c0010e2b:	29 c6                	sub    esi,eax
c0010e2d:	57                   	push   edi
c0010e2e:	01 f3                	add    ebx,esi
c0010e30:	53                   	push   ebx
c0010e31:	e8 aa f8 fe ff       	call   c00006e0 <strcmp>
c0010e36:	83 c4 10             	add    esp,0x10
c0010e39:	85 c0                	test   eax,eax
c0010e3b:	5b                   	pop    ebx
c0010e3c:	0f 94 c0             	sete   al
c0010e3f:	5e                   	pop    esi
c0010e40:	25 ff 00 00 00       	and    eax,0xff
c0010e45:	5f                   	pop    edi
c0010e46:	c3                   	ret    

c0010e47 <SysOpen(regs*)>:
c0010e47:	56                   	push   esi
c0010e48:	53                   	push   ebx
c0010e49:	81 ec 04 01 00 00    	sub    esp,0x104
c0010e4f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0010e56:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0010e59:	85 c9                	test   ecx,ecx
c0010e5b:	0f 84 b9 01 00 00    	je     c001101a <SysOpen(regs*)+0x1d3>
c0010e61:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010e64:	85 c0                	test   eax,eax
c0010e66:	0f 84 ae 01 00 00    	je     c001101a <SysOpen(regs*)+0x1d3>
c0010e6c:	52                   	push   edx
c0010e6d:	68 ad e2 01 c0       	push   0xc001e2ad
c0010e72:	50                   	push   eax
c0010e73:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0010e77:	56                   	push   esi
c0010e78:	e8 2f 9a ff ff       	call   c000a8ac <Fs::standardiseFiles(char*, char const*, char const*)>
c0010e7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e80:	e8 bb f6 fe ff       	call   c0000540 <strlen>
c0010e85:	83 c4 10             	add    esp,0x10
c0010e88:	48                   	dec    eax
c0010e89:	74 1d                	je     c0010ea8 <SysOpen(regs*)+0x61>
c0010e8b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0010e8e:	eb 0f                	jmp    c0010e9f <SysOpen(regs*)+0x58>
c0010e90:	80 fa 3a             	cmp    dl,0x3a
c0010e93:	74 0f                	je     c0010ea4 <SysOpen(regs*)+0x5d>
c0010e95:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0010e99:	48                   	dec    eax
c0010e9a:	74 0c                	je     c0010ea8 <SysOpen(regs*)+0x61>
c0010e9c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0010e9f:	80 fa 2e             	cmp    dl,0x2e
c0010ea2:	75 ec                	jne    c0010e90 <SysOpen(regs*)+0x49>
c0010ea4:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c0010ea8:	83 ec 08             	sub    esp,0x8
c0010eab:	68 b1 e2 01 c0       	push   0xc001e2b1
c0010eb0:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010eb3:	50                   	push   eax
c0010eb4:	e8 44 ff ff ff       	call   c0010dfd <string_ends_with(char const*, char const*)>
c0010eb9:	83 c4 10             	add    esp,0x10
c0010ebc:	85 c0                	test   eax,eax
c0010ebe:	74 1d                	je     c0010edd <SysOpen(regs*)+0x96>
c0010ec0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ec3:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c0010ec9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010ed0:	81 c4 04 01 00 00    	add    esp,0x104
c0010ed6:	31 c0                	xor    eax,eax
c0010ed8:	31 d2                	xor    edx,edx
c0010eda:	5b                   	pop    ebx
c0010edb:	5e                   	pop    esi
c0010edc:	c3                   	ret    
c0010edd:	83 ec 08             	sub    esp,0x8
c0010ee0:	68 b6 e2 01 c0       	push   0xc001e2b6
c0010ee5:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010ee8:	50                   	push   eax
c0010ee9:	e8 0f ff ff ff       	call   c0010dfd <string_ends_with(char const*, char const*)>
c0010eee:	83 c4 10             	add    esp,0x10
c0010ef1:	85 c0                	test   eax,eax
c0010ef3:	75 cb                	jne    c0010ec0 <SysOpen(regs*)+0x79>
c0010ef5:	83 ec 08             	sub    esp,0x8
c0010ef8:	68 b2 e2 01 c0       	push   0xc001e2b2
c0010efd:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f00:	50                   	push   eax
c0010f01:	e8 da f7 fe ff       	call   c00006e0 <strcmp>
c0010f06:	83 c4 10             	add    esp,0x10
c0010f09:	85 c0                	test   eax,eax
c0010f0b:	74 b3                	je     c0010ec0 <SysOpen(regs*)+0x79>
c0010f0d:	83 ec 08             	sub    esp,0x8
c0010f10:	68 b1 e2 01 c0       	push   0xc001e2b1
c0010f15:	56                   	push   esi
c0010f16:	e8 e2 fe ff ff       	call   c0010dfd <string_ends_with(char const*, char const*)>
c0010f1b:	83 c4 10             	add    esp,0x10
c0010f1e:	85 c0                	test   eax,eax
c0010f20:	75 9e                	jne    c0010ec0 <SysOpen(regs*)+0x79>
c0010f22:	83 ec 08             	sub    esp,0x8
c0010f25:	68 bb e2 01 c0       	push   0xc001e2bb
c0010f2a:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f2d:	50                   	push   eax
c0010f2e:	e8 ca fe ff ff       	call   c0010dfd <string_ends_with(char const*, char const*)>
c0010f33:	83 c4 10             	add    esp,0x10
c0010f36:	85 c0                	test   eax,eax
c0010f38:	0f 85 ef 00 00 00    	jne    c001102d <SysOpen(regs*)+0x1e6>
c0010f3e:	83 ec 08             	sub    esp,0x8
c0010f41:	68 c0 e2 01 c0       	push   0xc001e2c0
c0010f46:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0010f49:	50                   	push   eax
c0010f4a:	e8 ae fe ff ff       	call   c0010dfd <string_ends_with(char const*, char const*)>
c0010f4f:	83 c4 10             	add    esp,0x10
c0010f52:	85 c0                	test   eax,eax
c0010f54:	0f 85 d3 00 00 00    	jne    c001102d <SysOpen(regs*)+0x1e6>
c0010f5a:	83 ec 08             	sub    esp,0x8
c0010f5d:	68 bc e2 01 c0       	push   0xc001e2bc
c0010f62:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0010f65:	51                   	push   ecx
c0010f66:	e8 75 f7 fe ff       	call   c00006e0 <strcmp>
c0010f6b:	83 c4 10             	add    esp,0x10
c0010f6e:	85 c0                	test   eax,eax
c0010f70:	0f 84 b7 00 00 00    	je     c001102d <SysOpen(regs*)+0x1e6>
c0010f76:	83 ec 08             	sub    esp,0x8
c0010f79:	68 bb e2 01 c0       	push   0xc001e2bb
c0010f7e:	56                   	push   esi
c0010f7f:	e8 79 fe ff ff       	call   c0010dfd <string_ends_with(char const*, char const*)>
c0010f84:	83 c4 10             	add    esp,0x10
c0010f87:	85 c0                	test   eax,eax
c0010f89:	0f 85 9e 00 00 00    	jne    c001102d <SysOpen(regs*)+0x1e6>
c0010f8f:	83 ec 0c             	sub    esp,0xc
c0010f92:	68 14 01 00 00       	push   0x114
c0010f97:	e8 1d 68 ff ff       	call   c00077b9 <malloc>
c0010f9c:	83 c4 0c             	add    esp,0xc
c0010f9f:	89 c6                	mov    esi,eax
c0010fa1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010fa6:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010fa9:	50                   	push   eax
c0010faa:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0010fad:	52                   	push   edx
c0010fae:	56                   	push   esi
c0010faf:	e8 a2 9a ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0010fb4:	83 c4 10             	add    esp,0x10
c0010fb7:	85 f6                	test   esi,esi
c0010fb9:	74 5f                	je     c001101a <SysOpen(regs*)+0x1d3>
c0010fbb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0010fbe:	89 d0                	mov    eax,edx
c0010fc0:	25 ff 00 00 00       	and    eax,0xff
c0010fc5:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c0010fc8:	89 d0                	mov    eax,edx
c0010fca:	83 e0 01             	and    eax,0x1
c0010fcd:	f6 c2 02             	test   dl,0x2
c0010fd0:	74 03                	je     c0010fd5 <SysOpen(regs*)+0x18e>
c0010fd2:	83 c8 02             	or     eax,0x2
c0010fd5:	f6 c2 04             	test   dl,0x4
c0010fd8:	74 03                	je     c0010fdd <SysOpen(regs*)+0x196>
c0010fda:	83 c8 04             	or     eax,0x4
c0010fdd:	f6 c2 08             	test   dl,0x8
c0010fe0:	74 03                	je     c0010fe5 <SysOpen(regs*)+0x19e>
c0010fe2:	83 c8 0a             	or     eax,0xa
c0010fe5:	83 e2 10             	and    edx,0x10
c0010fe8:	74 03                	je     c0010fed <SysOpen(regs*)+0x1a6>
c0010fea:	83 c8 12             	or     eax,0x12
c0010fed:	83 ec 08             	sub    esp,0x8
c0010ff0:	50                   	push   eax
c0010ff1:	56                   	push   esi
c0010ff2:	e8 1f 9b ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c0010ff7:	83 c4 10             	add    esp,0x10
c0010ffa:	85 c0                	test   eax,eax
c0010ffc:	75 1c                	jne    c001101a <SysOpen(regs*)+0x1d3>
c0010ffe:	83 ec 0c             	sub    esp,0xc
c0011001:	56                   	push   esi
c0011002:	e8 3b 7e ff ff       	call   c0008e42 <UnixFile::getFileDescriptor()>
c0011007:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001100a:	83 c4 10             	add    esp,0x10
c001100d:	89 02                	mov    DWORD PTR [edx],eax
c001100f:	c1 f8 1f             	sar    eax,0x1f
c0011012:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011015:	e9 b6 fe ff ff       	jmp    c0010ed0 <SysOpen(regs*)+0x89>
c001101a:	81 c4 04 01 00 00    	add    esp,0x104
c0011020:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011025:	ba ff ff ff ff       	mov    edx,0xffffffff
c001102a:	5b                   	pop    ebx
c001102b:	5e                   	pop    esi
c001102c:	c3                   	ret    
c001102d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011030:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011036:	e9 8e fe ff ff       	jmp    c0010ec9 <SysOpen(regs*)+0x82>

c001103b <KeSystemCall(regs*, void*)>:
c001103b:	53                   	push   ebx
c001103c:	83 ec 10             	sub    esp,0x10
c001103f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011043:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0011046:	68 c5 e2 01 c0       	push   0xc001e2c5
c001104b:	e8 90 94 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0011050:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011053:	83 c4 10             	add    esp,0x10
c0011056:	83 f8 31             	cmp    eax,0x31
c0011059:	77 16                	ja     c0011071 <KeSystemCall(regs*, void*)+0x36>
c001105b:	8b 14 85 e0 f3 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0c20]
c0011062:	85 d2                	test   edx,edx
c0011064:	74 0b                	je     c0011071 <KeSystemCall(regs*, void*)+0x36>
c0011066:	83 ec 0c             	sub    esp,0xc
c0011069:	53                   	push   ebx
c001106a:	ff d2                	call   edx
c001106c:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001106f:	eb 0d                	jmp    c001107e <KeSystemCall(regs*, void*)+0x43>
c0011071:	52                   	push   edx
c0011072:	52                   	push   edx
c0011073:	50                   	push   eax
c0011074:	68 d5 e2 01 c0       	push   0xc001e2d5
c0011079:	e8 62 94 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001107e:	83 c4 10             	add    esp,0x10
c0011081:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011086:	31 d2                	xor    edx,edx
c0011088:	83 c4 08             	add    esp,0x8
c001108b:	5b                   	pop    ebx
c001108c:	c3                   	ret    

c001108d <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001108d:	55                   	push   ebp
c001108e:	57                   	push   edi
c001108f:	56                   	push   esi
c0011090:	53                   	push   ebx
c0011091:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0011097:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001109e:	8a 1e                	mov    bl,BYTE PTR [esi]
c00110a0:	8d 6e 01             	lea    ebp,[esi+0x1]
c00110a3:	80 fb 40             	cmp    bl,0x40
c00110a6:	75 1b                	jne    c00110c3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00110a8:	8a 16                	mov    dl,BYTE PTR [esi]
c00110aa:	84 d2                	test   dl,dl
c00110ac:	0f 84 f1 00 00 00    	je     c00111a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110b2:	8d 46 01             	lea    eax,[esi+0x1]
c00110b5:	80 fa 3a             	cmp    dl,0x3a
c00110b8:	74 04                	je     c00110be <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00110ba:	89 c6                	mov    esi,eax
c00110bc:	eb ea                	jmp    c00110a8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00110be:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00110c1:	89 c6                	mov    esi,eax
c00110c3:	50                   	push   eax
c00110c4:	6a 40                	push   0x40
c00110c6:	6a 00                	push   0x0
c00110c8:	8d 44 24 24          	lea    eax,[esp+0x24]
c00110cc:	50                   	push   eax
c00110cd:	e8 fe f3 fe ff       	call   c00004d0 <memset>
c00110d2:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00110d9:	31 c0                	xor    eax,eax
c00110db:	83 c4 10             	add    esp,0x10
c00110de:	8a 0f                	mov    cl,BYTE PTR [edi]
c00110e0:	84 c9                	test   cl,cl
c00110e2:	0f 84 bb 00 00 00    	je     c00111a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110e8:	3d c7 00 00 00       	cmp    eax,0xc7
c00110ed:	0f 8f b0 00 00 00    	jg     c00111a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00110f3:	80 f9 0a             	cmp    cl,0xa
c00110f6:	0f 85 98 00 00 00    	jne    c0011194 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c00110fc:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0011101:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0011105:	a8 df                	test   al,0xdf
c0011107:	0f 94 c1             	sete   cl
c001110a:	3c 23                	cmp    al,0x23
c001110c:	0f 94 c2             	sete   dl
c001110f:	08 d1                	or     cl,dl
c0011111:	75 4a                	jne    c001115d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011113:	8d 50 f7             	lea    edx,[eax-0x9]
c0011116:	80 fa 01             	cmp    dl,0x1
c0011119:	76 42                	jbe    c001115d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001111b:	3c 5b                	cmp    al,0x5b
c001111d:	75 42                	jne    c0011161 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001111f:	80 fb 40             	cmp    bl,0x40
c0011122:	75 39                	jne    c001115d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011124:	83 ec 0c             	sub    esp,0xc
c0011127:	8d 54 24 65          	lea    edx,[esp+0x65]
c001112b:	52                   	push   edx
c001112c:	e8 0f f4 fe ff       	call   c0000540 <strlen>
c0011131:	83 c4 10             	add    esp,0x10
c0011134:	83 f8 3f             	cmp    eax,0x3f
c0011137:	77 6a                	ja     c00111a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011139:	50                   	push   eax
c001113a:	50                   	push   eax
c001113b:	8d 54 24 61          	lea    edx,[esp+0x61]
c001113f:	52                   	push   edx
c0011140:	8d 54 24 24          	lea    edx,[esp+0x24]
c0011144:	52                   	push   edx
c0011145:	e8 b6 f4 fe ff       	call   c0000600 <strcpy>
c001114a:	58                   	pop    eax
c001114b:	8d 54 24 24          	lea    edx,[esp+0x24]
c001114f:	52                   	push   edx
c0011150:	e8 eb f3 fe ff       	call   c0000540 <strlen>
c0011155:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001115a:	83 c4 10             	add    esp,0x10
c001115d:	31 d2                	xor    edx,edx
c001115f:	eb 3a                	jmp    c001119b <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0011161:	80 fb 40             	cmp    bl,0x40
c0011164:	74 06                	je     c001116c <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c0011166:	8d 44 24 58          	lea    eax,[esp+0x58]
c001116a:	eb 20                	jmp    c001118c <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001116c:	50                   	push   eax
c001116d:	50                   	push   eax
c001116e:	55                   	push   ebp
c001116f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0011173:	50                   	push   eax
c0011174:	e8 67 f5 fe ff       	call   c00006e0 <strcmp>
c0011179:	83 c4 10             	add    esp,0x10
c001117c:	85 c0                	test   eax,eax
c001117e:	75 dd                	jne    c001115d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0011180:	eb e4                	jmp    c0011166 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c0011182:	8d 50 01             	lea    edx,[eax+0x1]
c0011185:	80 f9 3d             	cmp    cl,0x3d
c0011188:	74 1d                	je     c00111a7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001118a:	89 d0                	mov    eax,edx
c001118c:	8a 08                	mov    cl,BYTE PTR [eax]
c001118e:	84 c9                	test   cl,cl
c0011190:	75 f0                	jne    c0011182 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c0011192:	eb 0f                	jmp    c00111a3 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0011194:	8d 50 01             	lea    edx,[eax+0x1]
c0011197:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001119b:	47                   	inc    edi
c001119c:	89 d0                	mov    eax,edx
c001119e:	e9 3b ff ff ff       	jmp    c00110de <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00111a3:	31 c0                	xor    eax,eax
c00111a5:	eb 33                	jmp    c00111da <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00111a7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00111ab:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00111ae:	50                   	push   eax
c00111af:	50                   	push   eax
c00111b0:	8d 44 24 60          	lea    eax,[esp+0x60]
c00111b4:	50                   	push   eax
c00111b5:	56                   	push   esi
c00111b6:	e8 25 f5 fe ff       	call   c00006e0 <strcmp>
c00111bb:	83 c4 10             	add    esp,0x10
c00111be:	85 c0                	test   eax,eax
c00111c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00111c4:	75 97                	jne    c001115d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00111c6:	51                   	push   ecx
c00111c7:	51                   	push   ecx
c00111c8:	52                   	push   edx
c00111c9:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00111d0:	e8 2b f4 fe ff       	call   c0000600 <strcpy>
c00111d5:	83 c4 10             	add    esp,0x10
c00111d8:	b0 01                	mov    al,0x1
c00111da:	81 c4 2c 01 00 00    	add    esp,0x12c
c00111e0:	5b                   	pop    ebx
c00111e1:	5e                   	pop    esi
c00111e2:	5f                   	pop    edi
c00111e3:	5d                   	pop    ebp
c00111e4:	c3                   	ret    

c00111e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00111e5:	57                   	push   edi
c00111e6:	56                   	push   esi
c00111e7:	53                   	push   ebx
c00111e8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00111ee:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00111f5:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00111fc:	53                   	push   ebx
c00111fd:	e8 3e f3 fe ff       	call   c0000540 <strlen>
c0011202:	89 34 24             	mov    DWORD PTR [esp],esi
c0011205:	89 c7                	mov    edi,eax
c0011207:	e8 34 f3 fe ff       	call   c0000540 <strlen>
c001120c:	83 c4 10             	add    esp,0x10
c001120f:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0011213:	3d ff 00 00 00       	cmp    eax,0xff
c0011218:	0f 87 d3 00 00 00    	ja     c00112f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001121e:	57                   	push   edi
c001121f:	57                   	push   edi
c0011220:	56                   	push   esi
c0011221:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0011225:	56                   	push   esi
c0011226:	e8 d5 f3 fe ff       	call   c0000600 <strcpy>
c001122b:	58                   	pop    eax
c001122c:	5a                   	pop    edx
c001122d:	68 86 e5 01 c0       	push   0xc001e586
c0011232:	56                   	push   esi
c0011233:	e8 88 f5 fe ff       	call   c00007c0 <strcat>
c0011238:	59                   	pop    ecx
c0011239:	5f                   	pop    edi
c001123a:	53                   	push   ebx
c001123b:	56                   	push   esi
c001123c:	e8 7f f5 fe ff       	call   c00007c0 <strcat>
c0011241:	58                   	pop    eax
c0011242:	5a                   	pop    edx
c0011243:	68 e9 e2 01 c0       	push   0xc001e2e9
c0011248:	56                   	push   esi
c0011249:	e8 72 f5 fe ff       	call   c00007c0 <strcat>
c001124e:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011255:	e8 5f 65 ff ff       	call   c00077b9 <malloc>
c001125a:	83 c4 0c             	add    esp,0xc
c001125d:	89 c3                	mov    ebx,eax
c001125f:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c0011265:	56                   	push   esi
c0011266:	50                   	push   eax
c0011267:	e8 ea 97 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c001126c:	83 c4 10             	add    esp,0x10
c001126f:	85 db                	test   ebx,ebx
c0011271:	74 7e                	je     c00112f1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0011273:	51                   	push   ecx
c0011274:	51                   	push   ecx
c0011275:	6a 01                	push   0x1
c0011277:	53                   	push   ebx
c0011278:	e8 99 98 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c001127d:	83 c4 10             	add    esp,0x10
c0011280:	85 c0                	test   eax,eax
c0011282:	74 08                	je     c001128c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0011284:	83 ec 0c             	sub    esp,0xc
c0011287:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011289:	53                   	push   ebx
c001128a:	eb 5f                	jmp    c00112eb <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001128c:	52                   	push   edx
c001128d:	8d 44 24 17          	lea    eax,[esp+0x17]
c0011291:	50                   	push   eax
c0011292:	8d 44 24 20          	lea    eax,[esp+0x20]
c0011296:	50                   	push   eax
c0011297:	53                   	push   ebx
c0011298:	e8 25 9b ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c001129d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00112a1:	83 c4 10             	add    esp,0x10
c00112a4:	89 c1                	mov    ecx,eax
c00112a6:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00112aa:	74 31                	je     c00112dd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00112ac:	83 ec 0c             	sub    esp,0xc
c00112af:	50                   	push   eax
c00112b0:	e8 04 65 ff ff       	call   c00077b9 <malloc>
c00112b5:	89 c6                	mov    esi,eax
c00112b7:	58                   	pop    eax
c00112b8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112ba:	8d 54 24 20          	lea    edx,[esp+0x20]
c00112be:	52                   	push   edx
c00112bf:	56                   	push   esi
c00112c0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00112c4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00112c8:	53                   	push   ebx
c00112c9:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00112cc:	83 c4 20             	add    esp,0x20
c00112cf:	85 c0                	test   eax,eax
c00112d1:	75 0a                	jne    c00112dd <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00112d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00112d7:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00112db:	74 18                	je     c00112f5 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00112dd:	83 ec 0c             	sub    esp,0xc
c00112e0:	53                   	push   ebx
c00112e1:	e8 8e 98 ff ff       	call   c000ab74 <File::close()>
c00112e6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00112e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00112eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00112ee:	83 c4 10             	add    esp,0x10
c00112f1:	31 c0                	xor    eax,eax
c00112f3:	eb 3b                	jmp    c0011330 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00112f5:	83 ec 0c             	sub    esp,0xc
c00112f8:	53                   	push   ebx
c00112f9:	e8 76 98 ff ff       	call   c000ab74 <File::close()>
c00112fe:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011300:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011303:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011306:	83 c4 0c             	add    esp,0xc
c0011309:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011310:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0011317:	56                   	push   esi
c0011318:	e8 70 fd ff ff       	call   c001108d <Reg::findLineFromLoadedData(char*, char*, char*)>
c001131d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011320:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0011324:	e8 a0 64 ff ff       	call   c00077c9 <free>
c0011329:	83 c4 10             	add    esp,0x10
c001132c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0011330:	81 c4 20 01 00 00    	add    esp,0x120
c0011336:	5b                   	pop    ebx
c0011337:	5e                   	pop    esi
c0011338:	5f                   	pop    edi
c0011339:	c3                   	ret    

c001133a <Reg::getLine(char*, char*, char*)>:
c001133a:	57                   	push   edi
c001133b:	56                   	push   esi
c001133c:	53                   	push   ebx
c001133d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011341:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0011345:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011349:	57                   	push   edi
c001134a:	56                   	push   esi
c001134b:	53                   	push   ebx
c001134c:	68 ee e2 01 c0       	push   0xc001e2ee
c0011351:	e8 8f fe ff ff       	call   c00111e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0011356:	83 c4 10             	add    esp,0x10
c0011359:	84 c0                	test   al,al
c001135b:	75 10                	jne    c001136d <Reg::getLine(char*, char*, char*)+0x33>
c001135d:	57                   	push   edi
c001135e:	56                   	push   esi
c001135f:	53                   	push   ebx
c0011360:	68 13 e3 01 c0       	push   0xc001e313
c0011365:	e8 7b fe ff ff       	call   c00111e5 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001136a:	83 c4 10             	add    esp,0x10
c001136d:	5b                   	pop    ebx
c001136e:	5e                   	pop    esi
c001136f:	5f                   	pop    edi
c0011370:	c3                   	ret    

c0011371 <Reg::readInt(char*, char*, int*)>:
c0011371:	55                   	push   ebp
c0011372:	57                   	push   edi
c0011373:	56                   	push   esi
c0011374:	53                   	push   ebx
c0011375:	81 ec f0 00 00 00    	sub    esp,0xf0
c001137b:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001137f:	57                   	push   edi
c0011380:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0011387:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001138e:	e8 a7 ff ff ff       	call   c001133a <Reg::getLine(char*, char*, char*)>
c0011393:	83 c4 10             	add    esp,0x10
c0011396:	84 c0                	test   al,al
c0011398:	0f 84 b3 00 00 00    	je     c0011451 <Reg::readInt(char*, char*, int*)+0xe0>
c001139e:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00113a2:	80 fa 2b             	cmp    dl,0x2b
c00113a5:	74 0c                	je     c00113b3 <Reg::readInt(char*, char*, int*)+0x42>
c00113a7:	80 fa 2d             	cmp    dl,0x2d
c00113aa:	75 0e                	jne    c00113ba <Reg::readInt(char*, char*, int*)+0x49>
c00113ac:	ba 01 00 00 00       	mov    edx,0x1
c00113b1:	eb 0b                	jmp    c00113be <Reg::readInt(char*, char*, int*)+0x4d>
c00113b3:	ba 01 00 00 00       	mov    edx,0x1
c00113b8:	eb 02                	jmp    c00113bc <Reg::readInt(char*, char*, int*)+0x4b>
c00113ba:	31 d2                	xor    edx,edx
c00113bc:	31 c0                	xor    eax,eax
c00113be:	be 0a 00 00 00       	mov    esi,0xa
c00113c3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00113c8:	75 20                	jne    c00113ea <Reg::readInt(char*, char*, int*)+0x79>
c00113ca:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c00113ce:	80 f9 78             	cmp    cl,0x78
c00113d1:	75 0a                	jne    c00113dd <Reg::readInt(char*, char*, int*)+0x6c>
c00113d3:	83 c2 02             	add    edx,0x2
c00113d6:	be 10 00 00 00       	mov    esi,0x10
c00113db:	eb 0d                	jmp    c00113ea <Reg::readInt(char*, char*, int*)+0x79>
c00113dd:	80 f9 62             	cmp    cl,0x62
c00113e0:	75 08                	jne    c00113ea <Reg::readInt(char*, char*, int*)+0x79>
c00113e2:	83 c2 02             	add    edx,0x2
c00113e5:	be 02 00 00 00       	mov    esi,0x2
c00113ea:	01 d7                	add    edi,edx
c00113ec:	31 d2                	xor    edx,edx
c00113ee:	8a 1f                	mov    bl,BYTE PTR [edi]
c00113f0:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c00113f4:	80 fb 0d             	cmp    bl,0xd
c00113f7:	0f 94 c3             	sete   bl
c00113fa:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c00113ff:	0f 94 c1             	sete   cl
c0011402:	08 cb                	or     bl,cl
c0011404:	75 3a                	jne    c0011440 <Reg::readInt(char*, char*, int*)+0xcf>
c0011406:	0f af d6             	imul   edx,esi
c0011409:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001140e:	83 fe 10             	cmp    esi,0x10
c0011411:	75 26                	jne    c0011439 <Reg::readInt(char*, char*, int*)+0xc8>
c0011413:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0011417:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001141a:	89 e9                	mov    ecx,ebp
c001141c:	80 f9 05             	cmp    cl,0x5
c001141f:	77 06                	ja     c0011427 <Reg::readInt(char*, char*, int*)+0xb6>
c0011421:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0011425:	eb 16                	jmp    c001143d <Reg::readInt(char*, char*, int*)+0xcc>
c0011427:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001142b:	83 e9 61             	sub    ecx,0x61
c001142e:	80 f9 05             	cmp    cl,0x5
c0011431:	77 06                	ja     c0011439 <Reg::readInt(char*, char*, int*)+0xc8>
c0011433:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c0011437:	eb 04                	jmp    c001143d <Reg::readInt(char*, char*, int*)+0xcc>
c0011439:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001143d:	47                   	inc    edi
c001143e:	eb ae                	jmp    c00113ee <Reg::readInt(char*, char*, int*)+0x7d>
c0011440:	84 c0                	test   al,al
c0011442:	74 02                	je     c0011446 <Reg::readInt(char*, char*, int*)+0xd5>
c0011444:	f7 da                	neg    edx
c0011446:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001144d:	89 10                	mov    DWORD PTR [eax],edx
c001144f:	88 d8                	mov    al,bl
c0011451:	81 c4 ec 00 00 00    	add    esp,0xec
c0011457:	5b                   	pop    ebx
c0011458:	5e                   	pop    esi
c0011459:	5f                   	pop    edi
c001145a:	5d                   	pop    ebp
c001145b:	c3                   	ret    

c001145c <Reg::readString(char*, char*, char*, int)>:
c001145c:	57                   	push   edi
c001145d:	56                   	push   esi
c001145e:	53                   	push   ebx
c001145f:	81 ec d4 00 00 00    	sub    esp,0xd4
c0011465:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001146c:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0011470:	57                   	push   edi
c0011471:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0011478:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001147f:	e8 b6 fe ff ff       	call   c001133a <Reg::getLine(char*, char*, char*)>
c0011484:	83 c4 10             	add    esp,0x10
c0011487:	89 c6                	mov    esi,eax
c0011489:	84 c0                	test   al,al
c001148b:	74 44                	je     c00114d1 <Reg::readString(char*, char*, char*, int)+0x75>
c001148d:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0011494:	31 c0                	xor    eax,eax
c0011496:	4a                   	dec    edx
c0011497:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001149a:	84 c9                	test   cl,cl
c001149c:	74 0f                	je     c00114ad <Reg::readString(char*, char*, char*, int)+0x51>
c001149e:	39 c2                	cmp    edx,eax
c00114a0:	7e 0b                	jle    c00114ad <Reg::readString(char*, char*, char*, int)+0x51>
c00114a2:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00114a5:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00114aa:	40                   	inc    eax
c00114ab:	eb ea                	jmp    c0011497 <Reg::readString(char*, char*, char*, int)+0x3b>
c00114ad:	83 ec 0c             	sub    esp,0xc
c00114b0:	53                   	push   ebx
c00114b1:	e8 8a f0 fe ff       	call   c0000540 <strlen>
c00114b6:	83 c4 10             	add    esp,0x10
c00114b9:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00114be:	75 11                	jne    c00114d1 <Reg::readString(char*, char*, char*, int)+0x75>
c00114c0:	83 ec 0c             	sub    esp,0xc
c00114c3:	53                   	push   ebx
c00114c4:	e8 77 f0 fe ff       	call   c0000540 <strlen>
c00114c9:	83 c4 10             	add    esp,0x10
c00114cc:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00114d1:	81 c4 d0 00 00 00    	add    esp,0xd0
c00114d7:	89 f0                	mov    eax,esi
c00114d9:	5b                   	pop    ebx
c00114da:	5e                   	pop    esi
c00114db:	5f                   	pop    edi
c00114dc:	c3                   	ret    

c00114dd <Reg::readBool(char*, char*, bool*)>:
c00114dd:	83 ec 20             	sub    esp,0x20
c00114e0:	8d 44 24 10          	lea    eax,[esp+0x10]
c00114e4:	50                   	push   eax
c00114e5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114e9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00114ed:	e8 7f fe ff ff       	call   c0011371 <Reg::readInt(char*, char*, int*)>
c00114f2:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00114f7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00114fb:	0f 95 02             	setne  BYTE PTR [edx]
c00114fe:	83 c4 2c             	add    esp,0x2c
c0011501:	c3                   	ret    

c0011502 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0011502:	53                   	push   ebx
c0011503:	83 ec 1c             	sub    esp,0x1c
c0011506:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001150a:	8d 44 24 13          	lea    eax,[esp+0x13]
c001150e:	50                   	push   eax
c001150f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011513:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011517:	e8 c1 ff ff ff       	call   c00114dd <Reg::readBool(char*, char*, bool*)>
c001151c:	83 c4 10             	add    esp,0x10
c001151f:	84 c0                	test   al,al
c0011521:	74 04                	je     c0011527 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0011523:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0011527:	88 d8                	mov    al,bl
c0011529:	83 c4 18             	add    esp,0x18
c001152c:	5b                   	pop    ebx
c001152d:	c3                   	ret    

c001152e <Reg::readIntWithDefault(char*, char*, int)>:
c001152e:	53                   	push   ebx
c001152f:	83 ec 1c             	sub    esp,0x1c
c0011532:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011536:	8d 44 24 10          	lea    eax,[esp+0x10]
c001153a:	50                   	push   eax
c001153b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001153f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011543:	e8 29 fe ff ff       	call   c0011371 <Reg::readInt(char*, char*, int*)>
c0011548:	83 c4 10             	add    esp,0x10
c001154b:	84 c0                	test   al,al
c001154d:	74 04                	je     c0011553 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001154f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011553:	89 d8                	mov    eax,ebx
c0011555:	83 c4 18             	add    esp,0x18
c0011558:	5b                   	pop    ebx
c0011559:	c3                   	ret    

c001155a <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001155a:	57                   	push   edi
c001155b:	56                   	push   esi
c001155c:	56                   	push   esi
c001155d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0011561:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0011565:	56                   	push   esi
c0011566:	57                   	push   edi
c0011567:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001156b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001156f:	e8 e8 fe ff ff       	call   c001145c <Reg::readString(char*, char*, char*, int)>
c0011574:	83 c4 10             	add    esp,0x10
c0011577:	84 c0                	test   al,al
c0011579:	75 1a                	jne    c0011595 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001157b:	51                   	push   ecx
c001157c:	56                   	push   esi
c001157d:	6a 00                	push   0x0
c001157f:	57                   	push   edi
c0011580:	e8 4b ef fe ff       	call   c00004d0 <memset>
c0011585:	8d 4e ff             	lea    ecx,[esi-0x1]
c0011588:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001158c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001158e:	83 c4 10             	add    esp,0x10
c0011591:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0011595:	89 f8                	mov    eax,edi
c0011597:	5a                   	pop    edx
c0011598:	5e                   	pop    esi
c0011599:	5f                   	pop    edi
c001159a:	c3                   	ret    

c001159b <SysEject(regs*)>:
c001159b:	83 ec 0c             	sub    esp,0xc
c001159e:	83 ca ff             	or     edx,0xffffffff
c00115a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00115a5:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00115a8:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00115ad:	83 e9 41             	sub    ecx,0x41
c00115b0:	83 f9 19             	cmp    ecx,0x19
c00115b3:	77 18                	ja     c00115cd <SysEject(regs*)+0x32>
c00115b5:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c00115bc:	85 c9                	test   ecx,ecx
c00115be:	74 0d                	je     c00115cd <SysEject(regs*)+0x32>
c00115c0:	83 ec 0c             	sub    esp,0xc
c00115c3:	51                   	push   ecx
c00115c4:	e8 ad b5 ff ff       	call   c000cb76 <LogicalDisk::eject()>
c00115c9:	83 c4 10             	add    esp,0x10
c00115cc:	99                   	cdq    
c00115cd:	83 c4 0c             	add    esp,0xc
c00115d0:	c3                   	ret    

c00115d1 <SysExit(regs*)>:
c00115d1:	83 ec 18             	sub    esp,0x18
c00115d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00115d8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00115db:	e8 c8 26 00 00       	call   c0013ca8 <terminateTask(int)>
c00115e0:	83 c8 ff             	or     eax,0xffffffff
c00115e3:	83 c4 1c             	add    esp,0x1c
c00115e6:	89 c2                	mov    edx,eax
c00115e8:	c3                   	ret    

c00115e9 <SysGetCwd(regs*)>:
c00115e9:	83 ec 10             	sub    esp,0x10
c00115ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00115f0:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00115f3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00115f6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115fb:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00115fe:	e8 55 92 ff ff       	call   c000a858 <Fs::getcwd(Process*, char*, int)>
c0011603:	83 c4 1c             	add    esp,0x1c
c0011606:	99                   	cdq    
c0011607:	c3                   	ret    

c0011608 <SysGetPID(regs*)>:
c0011608:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001160d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011610:	8b 00                	mov    eax,DWORD PTR [eax]
c0011612:	99                   	cdq    
c0011613:	c3                   	ret    

c0011614 <SysGetRAMData(regs*)>:
c0011614:	8b 0d 08 05 02 c0    	mov    ecx,DWORD PTR ds:0xc0020508
c001161a:	69 05 04 05 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0020504,0xc8
c0011624:	99                   	cdq    
c0011625:	f7 f9                	idiv   ecx
c0011627:	c1 e0 18             	shl    eax,0x18
c001162a:	09 c8                	or     eax,ecx
c001162c:	99                   	cdq    
c001162d:	c3                   	ret    

c001162e <SysGetVGAPtr(regs*)>:
c001162e:	55                   	push   ebp
c001162f:	57                   	push   edi
c0011630:	56                   	push   esi
c0011631:	53                   	push   ebx
c0011632:	83 ec 18             	sub    esp,0x18
c0011635:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011639:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001163c:	e8 67 21 00 00       	call   c00137a8 <Thr::processFromPID(int)>
c0011641:	83 c4 10             	add    esp,0x10
c0011644:	89 c1                	mov    ecx,eax
c0011646:	b8 01 00 00 00       	mov    eax,0x1
c001164b:	85 c9                	test   ecx,ecx
c001164d:	74 57                	je     c00116a6 <SysGetVGAPtr(regs*)+0x78>
c001164f:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0011655:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0011659:	74 0c                	je     c0011667 <SysGetVGAPtr(regs*)+0x39>
c001165b:	83 ec 0c             	sub    esp,0xc
c001165e:	55                   	push   ebp
c001165f:	e8 93 6d ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0011664:	83 c4 10             	add    esp,0x10
c0011667:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c001166a:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c001166d:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0011672:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011674:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0011677:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001167a:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0011680:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011683:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0011686:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001168c:	50                   	push   eax
c001168d:	50                   	push   eax
c001168e:	68 2e e3 01 c0       	push   0xc001e32e
c0011693:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011696:	05 a8 0f 00 00       	add    eax,0xfa8
c001169b:	50                   	push   eax
c001169c:	e8 5f ef fe ff       	call   c0000600 <strcpy>
c00116a1:	83 c4 10             	add    esp,0x10
c00116a4:	31 c0                	xor    eax,eax
c00116a6:	83 c4 0c             	add    esp,0xc
c00116a9:	31 d2                	xor    edx,edx
c00116ab:	5b                   	pop    ebx
c00116ac:	5e                   	pop    esi
c00116ad:	5f                   	pop    edi
c00116ae:	5d                   	pop    ebp
c00116af:	c3                   	ret    

c00116b0 <SysLoadDLL(regs*)>:
c00116b0:	56                   	push   esi
c00116b1:	53                   	push   ebx
c00116b2:	31 d2                	xor    edx,edx
c00116b4:	51                   	push   ecx
c00116b5:	b8 01 00 00 00       	mov    eax,0x1
c00116ba:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00116be:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c00116c2:	0f 84 8c 00 00 00    	je     c0011754 <SysLoadDLL(regs*)+0xa4>
c00116c8:	83 ec 0c             	sub    esp,0xc
c00116cb:	68 14 01 00 00       	push   0x114
c00116d0:	e8 e4 60 ff ff       	call   c00077b9 <malloc>
c00116d5:	83 c4 0c             	add    esp,0xc
c00116d8:	89 c3                	mov    ebx,eax
c00116da:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00116df:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00116e2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00116e5:	53                   	push   ebx
c00116e6:	e8 6b 93 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c00116eb:	83 c4 10             	add    esp,0x10
c00116ee:	31 d2                	xor    edx,edx
c00116f0:	b8 02 00 00 00       	mov    eax,0x2
c00116f5:	85 db                	test   ebx,ebx
c00116f7:	74 5b                	je     c0011754 <SysLoadDLL(regs*)+0xa4>
c00116f9:	83 ec 0c             	sub    esp,0xc
c00116fc:	53                   	push   ebx
c00116fd:	e8 82 96 ff ff       	call   c000ad84 <File::exists()>
c0011702:	83 c4 10             	add    esp,0x10
c0011705:	84 c0                	test   al,al
c0011707:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011709:	75 11                	jne    c001171c <SysLoadDLL(regs*)+0x6c>
c001170b:	83 ec 0c             	sub    esp,0xc
c001170e:	53                   	push   ebx
c001170f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011712:	83 c4 10             	add    esp,0x10
c0011715:	b8 03 00 00 00       	mov    eax,0x3
c001171a:	eb 36                	jmp    c0011752 <SysLoadDLL(regs*)+0xa2>
c001171c:	83 ec 0c             	sub    esp,0xc
c001171f:	53                   	push   ebx
c0011720:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011723:	58                   	pop    eax
c0011724:	5a                   	pop    edx
c0011725:	6a 00                	push   0x0
c0011727:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001172a:	e8 4b 12 00 00       	call   c001297a <Thr::loadDLL(char const*, bool)>
c001172f:	83 c4 10             	add    esp,0x10
c0011732:	89 c1                	mov    ecx,eax
c0011734:	31 d2                	xor    edx,edx
c0011736:	b8 04 00 00 00       	mov    eax,0x4
c001173b:	85 c9                	test   ecx,ecx
c001173d:	74 15                	je     c0011754 <SysLoadDLL(regs*)+0xa4>
c001173f:	53                   	push   ebx
c0011740:	53                   	push   ebx
c0011741:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0011747:	51                   	push   ecx
c0011748:	e8 5e 14 00 00       	call   c0012bab <Thr::executeDLL(unsigned long, void*)>
c001174d:	83 c4 10             	add    esp,0x10
c0011750:	31 c0                	xor    eax,eax
c0011752:	31 d2                	xor    edx,edx
c0011754:	59                   	pop    ecx
c0011755:	5b                   	pop    ebx
c0011756:	5e                   	pop    esi
c0011757:	c3                   	ret    

c0011758 <SysRead(regs*)>:
c0011758:	57                   	push   edi
c0011759:	56                   	push   esi
c001175a:	53                   	push   ebx
c001175b:	83 ec 10             	sub    esp,0x10
c001175e:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011762:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011765:	83 f8 02             	cmp    eax,0x2
c0011768:	77 10                	ja     c001177a <SysRead(regs*)+0x22>
c001176a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001176f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011772:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011778:	eb 0e                	jmp    c0011788 <SysRead(regs*)+0x30>
c001177a:	83 ec 0c             	sub    esp,0xc
c001177d:	50                   	push   eax
c001177e:	e8 b4 79 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c0011783:	83 c4 10             	add    esp,0x10
c0011786:	89 c1                	mov    ecx,eax
c0011788:	83 c8 ff             	or     eax,0xffffffff
c001178b:	85 c9                	test   ecx,ecx
c001178d:	89 c2                	mov    edx,eax
c001178f:	74 28                	je     c00117b9 <SysRead(regs*)+0x61>
c0011791:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011799:	31 ff                	xor    edi,edi
c001179b:	83 ec 0c             	sub    esp,0xc
c001179e:	8b 01                	mov    eax,DWORD PTR [ecx]
c00117a0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00117a4:	52                   	push   edx
c00117a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00117a8:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00117ab:	57                   	push   edi
c00117ac:	56                   	push   esi
c00117ad:	51                   	push   ecx
c00117ae:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00117b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00117b5:	83 c4 20             	add    esp,0x20
c00117b8:	99                   	cdq    
c00117b9:	83 c4 10             	add    esp,0x10
c00117bc:	5b                   	pop    ebx
c00117bd:	5e                   	pop    esi
c00117be:	5f                   	pop    edi
c00117bf:	c3                   	ret    

c00117c0 <SysSbrk(regs*)>:
c00117c0:	56                   	push   esi
c00117c1:	53                   	push   ebx
c00117c2:	50                   	push   eax
c00117c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00117c8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00117cc:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00117cf:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c00117d2:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c00117d8:	85 db                	test   ebx,ebx
c00117da:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c00117dd:	74 02                	je     c00117e1 <SysSbrk(regs*)+0x21>
c00117df:	79 06                	jns    c00117e7 <SysSbrk(regs*)+0x27>
c00117e1:	89 f0                	mov    eax,esi
c00117e3:	31 d2                	xor    edx,edx
c00117e5:	eb 2a                	jmp    c0011811 <SysSbrk(regs*)+0x51>
c00117e7:	83 c8 ff             	or     eax,0xffffffff
c00117ea:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c00117f0:	89 c2                	mov    edx,eax
c00117f2:	77 1d                	ja     c0011811 <SysSbrk(regs*)+0x51>
c00117f4:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c00117fa:	50                   	push   eax
c00117fb:	c1 ea 0c             	shr    edx,0xc
c00117fe:	68 07 0c 00 00       	push   0xc07
c0011803:	52                   	push   edx
c0011804:	51                   	push   ecx
c0011805:	e8 1c 82 ff ff       	call   c0009a26 <VAS::allocatePages(int, int)>
c001180a:	89 f0                	mov    eax,esi
c001180c:	31 d2                	xor    edx,edx
c001180e:	83 c4 10             	add    esp,0x10
c0011811:	59                   	pop    ecx
c0011812:	5b                   	pop    ebx
c0011813:	5e                   	pop    esi
c0011814:	c3                   	ret    

c0011815 <SysSetCwd(regs*)>:
c0011815:	83 ec 14             	sub    esp,0x14
c0011818:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001181c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001181f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011824:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0011827:	e8 f7 95 ff ff       	call   c000ae23 <Fs::setcwd(Process*, char*)>
c001182c:	83 c4 1c             	add    esp,0x1c
c001182f:	99                   	cdq    
c0011830:	c3                   	ret    

c0011831 <SysSetTime(regs*)>:
c0011831:	55                   	push   ebp
c0011832:	31 c9                	xor    ecx,ecx
c0011834:	57                   	push   edi
c0011835:	bd 0c 00 00 00       	mov    ebp,0xc
c001183a:	56                   	push   esi
c001183b:	53                   	push   ebx
c001183c:	31 db                	xor    ebx,ebx
c001183e:	83 ec 10             	sub    esp,0x10
c0011841:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0011845:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0011848:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c001184b:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c001184e:	89 c2                	mov    edx,eax
c0011850:	66 81 ef 6c 07       	sub    di,0x76c
c0011855:	83 e2 1f             	and    edx,0x1f
c0011858:	c1 e7 10             	shl    edi,0x10
c001185b:	42                   	inc    edx
c001185c:	c1 e8 05             	shr    eax,0x5
c001185f:	88 d1                	mov    cl,dl
c0011861:	31 d2                	xor    edx,edx
c0011863:	f7 f5                	div    ebp
c0011865:	89 dd                	mov    ebp,ebx
c0011867:	88 d5                	mov    ch,dl
c0011869:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c001186f:	0f b7 c1             	movzx  eax,cx
c0011872:	31 d2                	xor    edx,edx
c0011874:	09 f8                	or     eax,edi
c0011876:	bf 3c 00 00 00       	mov    edi,0x3c
c001187b:	89 c1                	mov    ecx,eax
c001187d:	89 f0                	mov    eax,esi
c001187f:	f7 f7                	div    edi
c0011881:	c1 e2 10             	shl    edx,0x10
c0011884:	09 d5                	or     ebp,edx
c0011886:	31 d2                	xor    edx,edx
c0011888:	89 eb                	mov    ebx,ebp
c001188a:	f7 f7                	div    edi
c001188c:	bf 10 0e 00 00       	mov    edi,0xe10
c0011891:	88 d7                	mov    bh,dl
c0011893:	89 f0                	mov    eax,esi
c0011895:	31 d2                	xor    edx,edx
c0011897:	f7 f7                	div    edi
c0011899:	bf 18 00 00 00       	mov    edi,0x18
c001189e:	31 d2                	xor    edx,edx
c00118a0:	f7 f7                	div    edi
c00118a2:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00118a7:	88 d3                	mov    bl,dl
c00118a9:	53                   	push   ebx
c00118aa:	51                   	push   ecx
c00118ab:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00118b1:	e8 7e 9d ff ff       	call   c000b634 <Clock::setTimeInDatetimeLocal(datetime_t)>
c00118b6:	83 c4 1c             	add    esp,0x1c
c00118b9:	83 f0 01             	xor    eax,0x1
c00118bc:	5b                   	pop    ebx
c00118bd:	0f b6 c0             	movzx  eax,al
c00118c0:	5e                   	pop    esi
c00118c1:	31 d2                	xor    edx,edx
c00118c3:	5f                   	pop    edi
c00118c4:	5d                   	pop    ebp
c00118c5:	c3                   	ret    

c00118c6 <SysTimezone(regs*)>:
c00118c6:	53                   	push   ebx
c00118c7:	83 ec 08             	sub    esp,0x8
c00118ca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118ce:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c00118d2:	75 17                	jne    c00118eb <SysTimezone(regs*)+0x25>
c00118d4:	83 ec 0c             	sub    esp,0xc
c00118d7:	68 38 e3 01 c0       	push   0xc001e338
c00118dc:	e8 ff 8b ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00118e1:	83 c8 ff             	or     eax,0xffffffff
c00118e4:	83 c4 10             	add    esp,0x10
c00118e7:	89 c2                	mov    edx,eax
c00118e9:	eb 20                	jmp    c001190b <SysTimezone(regs*)+0x45>
c00118eb:	83 ec 0c             	sub    esp,0xc
c00118ee:	68 4d e3 01 c0       	push   0xc001e34d
c00118f3:	e8 e8 8b ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00118f8:	58                   	pop    eax
c00118f9:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00118fc:	e8 8f 9a ff ff       	call   c000b390 <User::loadClockSettings(int)>
c0011901:	83 c4 10             	add    esp,0x10
c0011904:	b8 01 00 00 00       	mov    eax,0x1
c0011909:	31 d2                	xor    edx,edx
c001190b:	83 c4 08             	add    esp,0x8
c001190e:	5b                   	pop    ebx
c001190f:	c3                   	ret    

c0011910 <SysWrite(regs*)>:
c0011910:	57                   	push   edi
c0011911:	56                   	push   esi
c0011912:	53                   	push   ebx
c0011913:	83 ec 10             	sub    esp,0x10
c0011916:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001191a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001191d:	83 f8 02             	cmp    eax,0x2
c0011920:	77 10                	ja     c0011932 <SysWrite(regs*)+0x22>
c0011922:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011927:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001192a:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0011930:	eb 0e                	jmp    c0011940 <SysWrite(regs*)+0x30>
c0011932:	83 ec 0c             	sub    esp,0xc
c0011935:	50                   	push   eax
c0011936:	e8 fc 77 ff ff       	call   c0009137 <getFromFileDescriptor(int)>
c001193b:	83 c4 10             	add    esp,0x10
c001193e:	89 c1                	mov    ecx,eax
c0011940:	83 c8 ff             	or     eax,0xffffffff
c0011943:	85 c9                	test   ecx,ecx
c0011945:	89 c2                	mov    edx,eax
c0011947:	74 28                	je     c0011971 <SysWrite(regs*)+0x61>
c0011949:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011951:	31 ff                	xor    edi,edi
c0011953:	83 ec 0c             	sub    esp,0xc
c0011956:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011958:	8d 54 24 18          	lea    edx,[esp+0x18]
c001195c:	52                   	push   edx
c001195d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0011960:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0011963:	57                   	push   edi
c0011964:	56                   	push   esi
c0011965:	51                   	push   ecx
c0011966:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011969:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001196d:	83 c4 20             	add    esp,0x20
c0011970:	99                   	cdq    
c0011971:	83 c4 10             	add    esp,0x10
c0011974:	5b                   	pop    ebx
c0011975:	5e                   	pop    esi
c0011976:	5f                   	pop    edi
c0011977:	c3                   	ret    

c0011978 <SysWsbe(regs*)>:
c0011978:	57                   	push   edi
c0011979:	b9 0b 00 00 00       	mov    ecx,0xb
c001197e:	56                   	push   esi
c001197f:	be 8c e3 01 c0       	mov    esi,0xc001e38c
c0011984:	53                   	push   ebx
c0011985:	83 ec 30             	sub    esp,0x30
c0011988:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001198c:	fc                   	cld    
c001198d:	83 ec 0c             	sub    esp,0xc
c0011990:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0011992:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0011996:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001199b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001199e:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c00119a4:	8b 06                	mov    eax,DWORD PTR [esi]
c00119a6:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c00119a9:	57                   	push   edi
c00119aa:	e8 91 eb fe ff       	call   c0000540 <strlen>
c00119af:	5a                   	pop    edx
c00119b0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00119b4:	52                   	push   edx
c00119b5:	31 d2                	xor    edx,edx
c00119b7:	57                   	push   edi
c00119b8:	52                   	push   edx
c00119b9:	50                   	push   eax
c00119ba:	56                   	push   esi
c00119bb:	ff d3                	call   ebx
c00119bd:	83 c4 14             	add    esp,0x14
c00119c0:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00119c4:	ff 70 24             	push   DWORD PTR [eax+0x24]
c00119c7:	e8 dc 22 00 00       	call   c0013ca8 <terminateTask(int)>
c00119cc:	83 c4 40             	add    esp,0x40
c00119cf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c00119d4:	5b                   	pop    ebx
c00119d5:	31 d2                	xor    edx,edx
c00119d7:	5e                   	pop    esi
c00119d8:	5f                   	pop    edi
c00119d9:	c3                   	ret    

c00119da <SysYield(regs*)>:
c00119da:	83 ec 0c             	sub    esp,0xc
c00119dd:	fa                   	cli    
c00119de:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c00119e4:	e8 9b 19 00 00       	call   c0013384 <schedule()>
c00119e9:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00119ee:	48                   	dec    eax
c00119ef:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00119f4:	75 01                	jne    c00119f7 <SysYield(regs*)+0x1d>
c00119f6:	fb                   	sti    
c00119f7:	31 c0                	xor    eax,eax
c00119f9:	31 d2                	xor    edx,edx
c00119fb:	83 c4 0c             	add    esp,0xc
c00119fe:	c3                   	ret    

c00119ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c00119ff:	55                   	push   ebp
c0011a00:	57                   	push   edi
c0011a01:	56                   	push   esi
c0011a02:	53                   	push   ebx
c0011a03:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011a09:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011a11:	0f 95 c2             	setne  dl
c0011a14:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011a1c:	0f 94 c0             	sete   al
c0011a1f:	84 c2                	test   dl,al
c0011a21:	74 34                	je     c0011a57 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011a23:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011a2e:	74 27                	je     c0011a57 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011a30:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011a37:	05 00 10 00 00       	add    eax,0x1000
c0011a3c:	89 c1                	mov    ecx,eax
c0011a3e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011a43:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011a49:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011a50:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011a57:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011a5e:	83 ec 0c             	sub    esp,0xc
c0011a61:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011a67:	6a 01                	push   0x1
c0011a69:	e8 1f 78 ff ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c0011a6e:	83 c4 10             	add    esp,0x10
c0011a71:	89 c3                	mov    ebx,eax
c0011a73:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011a79:	0f 86 25 01 00 00    	jbe    c0011ba4 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011a7f:	c1 ee 0c             	shr    esi,0xc
c0011a82:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011a89:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011a8d:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011a95:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011a9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011aa0:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011aa7:	29 ef                	sub    edi,ebp
c0011aa9:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011aad:	0f 83 f8 00 00 00    	jae    c0011bab <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011ab3:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011ab9:	76 05                	jbe    c0011ac0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011abb:	bf 00 10 00 00       	mov    edi,0x1000
c0011ac0:	83 ec 0c             	sub    esp,0xc
c0011ac3:	31 d2                	xor    edx,edx
c0011ac5:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011acc:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011ace:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011ad2:	50                   	push   eax
c0011ad3:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011ad7:	56                   	push   esi
c0011ad8:	52                   	push   edx
c0011ad9:	57                   	push   edi
c0011ada:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011ae1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011ae4:	83 c4 20             	add    esp,0x20
c0011ae7:	85 c0                	test   eax,eax
c0011ae9:	75 06                	jne    c0011af1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011aeb:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011aef:	74 13                	je     c0011b04 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011af1:	83 ec 0c             	sub    esp,0xc
c0011af4:	53                   	push   ebx
c0011af5:	e8 c3 7a ff ff       	call   c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c0011afa:	83 c4 10             	add    esp,0x10
c0011afd:	31 c0                	xor    eax,eax
c0011aff:	e9 7c 01 00 00       	jmp    c0011c80 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011b04:	fa                   	cli    
c0011b05:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0011b0b:	e8 85 5f ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011b10:	6a 07                	push   0x7
c0011b12:	89 c7                	mov    edi,eax
c0011b14:	53                   	push   ebx
c0011b15:	50                   	push   eax
c0011b16:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b1b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b1e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b24:	e8 f9 7d ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011b29:	83 c4 0c             	add    esp,0xc
c0011b2c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011b33:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b39:	6a 00                	push   0x0
c0011b3b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b40:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b43:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b49:	e8 46 7c ff ff       	call   c0009794 <VAS::mapOtherVASIn(bool, VAS*)>
c0011b4e:	58                   	pop    eax
c0011b4f:	5a                   	pop    edx
c0011b50:	68 07 0c 00 00       	push   0xc07
c0011b55:	55                   	push   ebp
c0011b56:	57                   	push   edi
c0011b57:	89 df                	mov    edi,ebx
c0011b59:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011b60:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b66:	6a 00                	push   0x0
c0011b68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011b6d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011b70:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011b76:	e8 67 81 ff ff       	call   c0009ce2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011b7b:	b9 00 10 00 00       	mov    ecx,0x1000
c0011b80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011b82:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0011b87:	83 c4 20             	add    esp,0x20
c0011b8a:	48                   	dec    eax
c0011b8b:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0011b90:	85 c0                	test   eax,eax
c0011b92:	75 01                	jne    c0011b95 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011b94:	fb                   	sti    
c0011b95:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011b9b:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011b9f:	e9 f1 fe ff ff       	jmp    c0011a95 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011ba4:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011bab:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011bb2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011bb8:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011bbe:	0f 86 ae 00 00 00    	jbe    c0011c72 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011bc4:	fa                   	cli    
c0011bc5:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0011bcb:	c1 ee 0c             	shr    esi,0xc
c0011bce:	51                   	push   ecx
c0011bcf:	31 ff                	xor    edi,edi
c0011bd1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011bd8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011bde:	6a 00                	push   0x0
c0011be0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011be5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011be8:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011bee:	e8 a1 7b ff ff       	call   c0009794 <VAS::mapOtherVASIn(bool, VAS*)>
c0011bf3:	83 c4 10             	add    esp,0x10
c0011bf6:	e8 9a 5e ff ff       	call   c0007a95 <Phys::allocatePage()>
c0011bfb:	47                   	inc    edi
c0011bfc:	6a 07                	push   0x7
c0011bfe:	53                   	push   ebx
c0011bff:	50                   	push   eax
c0011c00:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011c04:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011c0a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011c0d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011c13:	e8 0a 7d ff ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011c18:	58                   	pop    eax
c0011c19:	5a                   	pop    edx
c0011c1a:	68 07 0c 00 00       	push   0xc07
c0011c1f:	55                   	push   ebp
c0011c20:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011c26:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011c2a:	50                   	push   eax
c0011c2b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011c32:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c38:	6a 00                	push   0x0
c0011c3a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011c3f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011c42:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011c48:	e8 95 80 ff ff       	call   c0009ce2 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011c4d:	83 c4 1c             	add    esp,0x1c
c0011c50:	68 00 10 00 00       	push   0x1000
c0011c55:	6a 00                	push   0x0
c0011c57:	53                   	push   ebx
c0011c58:	e8 73 e8 fe ff       	call   c00004d0 <memset>
c0011c5d:	83 c4 10             	add    esp,0x10
c0011c60:	39 fe                	cmp    esi,edi
c0011c62:	77 92                	ja     c0011bf6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011c64:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0011c69:	48                   	dec    eax
c0011c6a:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0011c6f:	75 01                	jne    c0011c72 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011c71:	fb                   	sti    
c0011c72:	83 ec 0c             	sub    esp,0xc
c0011c75:	53                   	push   ebx
c0011c76:	e8 42 79 ff ff       	call   c00095bd <Virt::freeKernelVirtualPages(unsigned long)>
c0011c7b:	83 c4 10             	add    esp,0x10
c0011c7e:	b0 01                	mov    al,0x1
c0011c80:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011c86:	5b                   	pop    ebx
c0011c87:	5e                   	pop    esi
c0011c88:	5f                   	pop    edi
c0011c89:	5d                   	pop    ebp
c0011c8a:	c3                   	ret    

c0011c8b <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011c8b:	55                   	push   ebp
c0011c8c:	57                   	push   edi
c0011c8d:	56                   	push   esi
c0011c8e:	53                   	push   ebx
c0011c8f:	83 ec 48             	sub    esp,0x48
c0011c92:	68 14 01 00 00       	push   0x114
c0011c97:	e8 1d 5b ff ff       	call   c00077b9 <malloc>
c0011c9c:	83 c4 0c             	add    esp,0xc
c0011c9f:	89 c6                	mov    esi,eax
c0011ca1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011ca5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011ca9:	50                   	push   eax
c0011caa:	e8 a7 8d ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0011caf:	58                   	pop    eax
c0011cb0:	5a                   	pop    edx
c0011cb1:	6a 01                	push   0x1
c0011cb3:	56                   	push   esi
c0011cb4:	e8 5d 8e ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c0011cb9:	83 c4 10             	add    esp,0x10
c0011cbc:	85 c0                	test   eax,eax
c0011cbe:	0f 85 47 01 00 00    	jne    c0011e0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cc4:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011ccc:	83 ec 0c             	sub    esp,0xc
c0011ccf:	6a 34                	push   0x34
c0011cd1:	e8 e3 5a ff ff       	call   c00077b9 <malloc>
c0011cd6:	89 c3                	mov    ebx,eax
c0011cd8:	58                   	pop    eax
c0011cd9:	8b 06                	mov    eax,DWORD PTR [esi]
c0011cdb:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011cdf:	57                   	push   edi
c0011ce0:	53                   	push   ebx
c0011ce1:	6a 00                	push   0x0
c0011ce3:	6a 34                	push   0x34
c0011ce5:	56                   	push   esi
c0011ce6:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011ce9:	83 c4 20             	add    esp,0x20
c0011cec:	85 c0                	test   eax,eax
c0011cee:	0f 85 17 01 00 00    	jne    c0011e0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011cf4:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011cfa:	0f 85 0b 01 00 00    	jne    c0011e0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d00:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011d03:	85 c0                	test   eax,eax
c0011d05:	0f 84 00 01 00 00    	je     c0011e0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d0b:	31 d2                	xor    edx,edx
c0011d0d:	55                   	push   ebp
c0011d0e:	52                   	push   edx
c0011d0f:	50                   	push   eax
c0011d10:	56                   	push   esi
c0011d11:	e8 be 8e ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0011d16:	83 c4 10             	add    esp,0x10
c0011d19:	85 c0                	test   eax,eax
c0011d1b:	0f 85 ea 00 00 00    	jne    c0011e0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d21:	83 ec 0c             	sub    esp,0xc
c0011d24:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011d27:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011d2b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011d2f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011d33:	0f af c2             	imul   eax,edx
c0011d36:	50                   	push   eax
c0011d37:	e8 7d 5a ff ff       	call   c00077b9 <malloc>
c0011d3c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011d3e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011d42:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d45:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011d49:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011d4d:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011d51:	0f af c2             	imul   eax,edx
c0011d54:	99                   	cdq    
c0011d55:	52                   	push   edx
c0011d56:	50                   	push   eax
c0011d57:	56                   	push   esi
c0011d58:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d5b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011d5e:	83 c4 20             	add    esp,0x20
c0011d61:	85 c0                	test   eax,eax
c0011d63:	0f 84 a2 00 00 00    	je     c0011e0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d69:	31 d2                	xor    edx,edx
c0011d6b:	51                   	push   ecx
c0011d6c:	52                   	push   edx
c0011d6d:	50                   	push   eax
c0011d6e:	56                   	push   esi
c0011d6f:	e8 60 8e ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0011d74:	83 c4 10             	add    esp,0x10
c0011d77:	85 c0                	test   eax,eax
c0011d79:	0f 85 8c 00 00 00    	jne    c0011e0b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011d7f:	83 ec 0c             	sub    esp,0xc
c0011d82:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011d86:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011d8a:	31 ed                	xor    ebp,ebp
c0011d8c:	0f af c2             	imul   eax,edx
c0011d8f:	50                   	push   eax
c0011d90:	e8 24 5a ff ff       	call   c00077b9 <malloc>
c0011d95:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011d97:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011d9b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d9e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011da2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011da6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011daa:	0f af c2             	imul   eax,edx
c0011dad:	99                   	cdq    
c0011dae:	52                   	push   edx
c0011daf:	50                   	push   eax
c0011db0:	56                   	push   esi
c0011db1:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011db4:	83 c4 20             	add    esp,0x20
c0011db7:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011dbf:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0011dc3:	0f 86 80 00 00 00    	jbe    c0011e49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0011dc9:	0f b7 fd             	movzx  edi,bp
c0011dcc:	c1 e7 05             	shl    edi,0x5
c0011dcf:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0011dd3:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0011dd6:	75 6b                	jne    c0011e43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011dd8:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0011ddb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011ddf:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0011de2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011de6:	52                   	push   edx
c0011de7:	31 d2                	xor    edx,edx
c0011de9:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0011dec:	52                   	push   edx
c0011ded:	50                   	push   eax
c0011dee:	56                   	push   esi
c0011def:	e8 e0 8d ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0011df4:	83 c4 10             	add    esp,0x10
c0011df7:	85 c0                	test   eax,eax
c0011df9:	74 17                	je     c0011e12 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c0011dfb:	83 ec 0c             	sub    esp,0xc
c0011dfe:	68 b8 e3 01 c0       	push   0xc001e3b8
c0011e03:	e8 d8 86 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0011e08:	83 c4 10             	add    esp,0x10
c0011e0b:	31 c0                	xor    eax,eax
c0011e0d:	e9 87 00 00 00       	jmp    c0011e99 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0011e12:	83 ec 0c             	sub    esp,0xc
c0011e15:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0011e18:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0011e1b:	50                   	push   eax
c0011e1c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011e20:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0011e24:	56                   	push   esi
c0011e25:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0011e29:	e8 d1 fb ff ff       	call   c00119ff <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c0011e2e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0011e32:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0011e36:	83 c4 20             	add    esp,0x20
c0011e39:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0011e3d:	73 04                	jae    c0011e43 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0011e3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011e43:	45                   	inc    ebp
c0011e44:	e9 76 ff ff ff       	jmp    c0011dbf <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c0011e49:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0011e4d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011e51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011e55:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c0011e5b:	83 ec 0c             	sub    esp,0xc
c0011e5e:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c0011e64:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011e69:	05 00 10 00 00       	add    eax,0x1000
c0011e6e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011e71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011e75:	e8 4f 59 ff ff       	call   c00077c9 <free>
c0011e7a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011e7d:	e8 47 59 ff ff       	call   c00077c9 <free>
c0011e82:	58                   	pop    eax
c0011e83:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011e87:	e8 3d 59 ff ff       	call   c00077c9 <free>
c0011e8c:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e8f:	e8 e0 8c ff ff       	call   c000ab74 <File::close()>
c0011e94:	83 c4 10             	add    esp,0x10
c0011e97:	b0 01                	mov    al,0x1
c0011e99:	83 c4 3c             	add    esp,0x3c
c0011e9c:	5b                   	pop    ebx
c0011e9d:	5e                   	pop    esi
c0011e9e:	5f                   	pop    edi
c0011e9f:	5d                   	pop    ebp
c0011ea0:	c3                   	ret    

c0011ea1 <Thr::runtimeReferenceHelper()>:
c0011ea1:	83 ec 18             	sub    esp,0x18
c0011ea4:	68 c0 e3 01 c0       	push   0xc001e3c0
c0011ea9:	e8 32 86 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0011eae:	fa                   	cli    
c0011eaf:	83 c4 10             	add    esp,0x10
c0011eb2:	eb fe                	jmp    c0011eb2 <Thr::runtimeReferenceHelper()+0x11>

c0011eb4 <Thr::getAddressOfKernelSymbol(char const*)>:
c0011eb4:	57                   	push   edi
c0011eb5:	56                   	push   esi
c0011eb6:	53                   	push   ebx
c0011eb7:	31 db                	xor    ebx,ebx
c0011eb9:	39 1d 60 37 02 c0    	cmp    DWORD PTR ds:0xc0023760,ebx
c0011ebf:	7e 3c                	jle    c0011efd <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0011ec1:	8b 34 9d e0 36 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc920]
c0011ec8:	31 ff                	xor    edi,edi
c0011eca:	39 3c 9d e0 35 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdca20],edi
c0011ed1:	7e 27                	jle    c0011efa <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0011ed3:	50                   	push   eax
c0011ed4:	50                   	push   eax
c0011ed5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011ed9:	8b 06                	mov    eax,DWORD PTR [esi]
c0011edb:	03 04 9d 60 36 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc9a0]
c0011ee2:	50                   	push   eax
c0011ee3:	e8 f8 e7 fe ff       	call   c00006e0 <strcmp>
c0011ee8:	83 c4 10             	add    esp,0x10
c0011eeb:	85 c0                	test   eax,eax
c0011eed:	75 05                	jne    c0011ef4 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c0011eef:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0011ef2:	eb 0b                	jmp    c0011eff <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0011ef4:	83 c6 10             	add    esi,0x10
c0011ef7:	47                   	inc    edi
c0011ef8:	eb d0                	jmp    c0011eca <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0011efa:	43                   	inc    ebx
c0011efb:	eb bc                	jmp    c0011eb9 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c0011efd:	31 c0                	xor    eax,eax
c0011eff:	5b                   	pop    ebx
c0011f00:	5e                   	pop    esi
c0011f01:	5f                   	pop    edi
c0011f02:	c3                   	ret    

c0011f03 <Thr::loadKernelSymbolTable(char const*)>:
c0011f03:	55                   	push   ebp
c0011f04:	57                   	push   edi
c0011f05:	56                   	push   esi
c0011f06:	53                   	push   ebx
c0011f07:	83 ec 68             	sub    esp,0x68
c0011f0a:	8b 35 b0 37 02 c0    	mov    esi,DWORD PTR ds:0xc00237b0
c0011f10:	68 14 01 00 00       	push   0x114
c0011f15:	e8 9f 58 ff ff       	call   c00077b9 <malloc>
c0011f1a:	83 c4 0c             	add    esp,0xc
c0011f1d:	89 c3                	mov    ebx,eax
c0011f1f:	56                   	push   esi
c0011f20:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0011f24:	50                   	push   eax
c0011f25:	e8 2c 8b ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0011f2a:	5e                   	pop    esi
c0011f2b:	5f                   	pop    edi
c0011f2c:	6a 01                	push   0x1
c0011f2e:	53                   	push   ebx
c0011f2f:	e8 e2 8b ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c0011f34:	83 c4 10             	add    esp,0x10
c0011f37:	85 c0                	test   eax,eax
c0011f39:	74 0a                	je     c0011f45 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0011f3b:	83 ec 0c             	sub    esp,0xc
c0011f3e:	68 e2 e3 01 c0       	push   0xc001e3e2
c0011f43:	eb 34                	jmp    c0011f79 <Thr::loadKernelSymbolTable(char const*)+0x76>
c0011f45:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0011f4d:	83 ec 0c             	sub    esp,0xc
c0011f50:	6a 34                	push   0x34
c0011f52:	e8 62 58 ff ff       	call   c00077b9 <malloc>
c0011f57:	59                   	pop    ecx
c0011f58:	89 c7                	mov    edi,eax
c0011f5a:	8d 74 24 34          	lea    esi,[esp+0x34]
c0011f5e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f60:	56                   	push   esi
c0011f61:	57                   	push   edi
c0011f62:	6a 00                	push   0x0
c0011f64:	6a 34                	push   0x34
c0011f66:	53                   	push   ebx
c0011f67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011f6a:	83 c4 20             	add    esp,0x20
c0011f6d:	85 c0                	test   eax,eax
c0011f6f:	74 17                	je     c0011f88 <Thr::loadKernelSymbolTable(char const*)+0x85>
c0011f71:	83 ec 0c             	sub    esp,0xc
c0011f74:	68 f9 e3 01 c0       	push   0xc001e3f9
c0011f79:	e8 dd e1 ff ff       	call   c001015b <KePanic(char const*)>
c0011f7e:	83 c4 10             	add    esp,0x10
c0011f81:	31 c0                	xor    eax,eax
c0011f83:	e9 31 02 00 00       	jmp    c00121b9 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c0011f88:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0011f8e:	75 e1                	jne    c0011f71 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f90:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c0011f93:	85 c0                	test   eax,eax
c0011f95:	74 da                	je     c0011f71 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011f97:	52                   	push   edx
c0011f98:	31 d2                	xor    edx,edx
c0011f9a:	52                   	push   edx
c0011f9b:	50                   	push   eax
c0011f9c:	53                   	push   ebx
c0011f9d:	e8 32 8c ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0011fa2:	83 c4 10             	add    esp,0x10
c0011fa5:	85 c0                	test   eax,eax
c0011fa7:	75 c8                	jne    c0011f71 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0011fa9:	83 ec 0c             	sub    esp,0xc
c0011fac:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011fb0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011fb4:	31 ed                	xor    ebp,ebp
c0011fb6:	0f af c2             	imul   eax,edx
c0011fb9:	50                   	push   eax
c0011fba:	e8 fa 57 ff ff       	call   c00077b9 <malloc>
c0011fbf:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0011fc1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0011fc5:	89 34 24             	mov    DWORD PTR [esp],esi
c0011fc8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011fcc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0011fd0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0011fd4:	0f af c2             	imul   eax,edx
c0011fd7:	99                   	cdq    
c0011fd8:	52                   	push   edx
c0011fd9:	50                   	push   eax
c0011fda:	53                   	push   ebx
c0011fdb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011fde:	83 c4 20             	add    esp,0x20
c0011fe1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0011fe9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0011ff1:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0011ff9:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012001:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012005:	0f 86 aa 00 00 00    	jbe    c00120b5 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001200b:	0f b7 f5             	movzx  esi,bp
c001200e:	6b f6 28             	imul   esi,esi,0x28
c0012011:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012015:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012018:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001201c:	50                   	push   eax
c001201d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012021:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012025:	8b 16                	mov    edx,DWORD PTR [esi]
c0012027:	6b c0 28             	imul   eax,eax,0x28
c001202a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001202e:	89 d0                	mov    eax,edx
c0012030:	31 d2                	xor    edx,edx
c0012032:	52                   	push   edx
c0012033:	50                   	push   eax
c0012034:	53                   	push   ebx
c0012035:	e8 9a 8b ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c001203a:	83 c4 0c             	add    esp,0xc
c001203d:	6a 20                	push   0x20
c001203f:	6a 00                	push   0x0
c0012041:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c0012045:	52                   	push   edx
c0012046:	e8 85 e4 fe ff       	call   c00004d0 <memset>
c001204b:	58                   	pop    eax
c001204c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001204e:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c0012052:	51                   	push   ecx
c0012053:	8d 54 24 40          	lea    edx,[esp+0x40]
c0012057:	52                   	push   edx
c0012058:	6a 00                	push   0x0
c001205a:	6a 1f                	push   0x1f
c001205c:	53                   	push   ebx
c001205d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012060:	83 c4 18             	add    esp,0x18
c0012063:	68 10 e4 01 c0       	push   0xc001e410
c0012068:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001206c:	52                   	push   edx
c001206d:	e8 6e e6 fe ff       	call   c00006e0 <strcmp>
c0012072:	83 c4 10             	add    esp,0x10
c0012075:	85 c0                	test   eax,eax
c0012077:	75 0f                	jne    c0012088 <Thr::loadKernelSymbolTable(char const*)+0x185>
c0012079:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001207c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012080:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012084:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012088:	50                   	push   eax
c0012089:	50                   	push   eax
c001208a:	68 18 e4 01 c0       	push   0xc001e418
c001208f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c0012093:	50                   	push   eax
c0012094:	e8 47 e6 fe ff       	call   c00006e0 <strcmp>
c0012099:	83 c4 10             	add    esp,0x10
c001209c:	85 c0                	test   eax,eax
c001209e:	75 0f                	jne    c00120af <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00120a0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00120a3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00120a7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00120ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00120af:	45                   	inc    ebp
c00120b0:	e9 4c ff ff ff       	jmp    c0012001 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c00120b5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00120ba:	75 10                	jne    c00120cc <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c00120bc:	83 ec 0c             	sub    esp,0xc
c00120bf:	68 20 e4 01 c0       	push   0xc001e420
c00120c4:	e8 92 e0 ff ff       	call   c001015b <KePanic(char const*)>
c00120c9:	83 c4 10             	add    esp,0x10
c00120cc:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00120d1:	75 10                	jne    c00120e3 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c00120d3:	83 ec 0c             	sub    esp,0xc
c00120d6:	68 20 e4 01 c0       	push   0xc001e420
c00120db:	e8 7b e0 ff ff       	call   c001015b <KePanic(char const*)>
c00120e0:	83 c4 10             	add    esp,0x10
c00120e3:	31 d2                	xor    edx,edx
c00120e5:	50                   	push   eax
c00120e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00120ea:	52                   	push   edx
c00120eb:	50                   	push   eax
c00120ec:	53                   	push   ebx
c00120ed:	e8 e2 8a ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c00120f2:	5a                   	pop    edx
c00120f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00120f7:	e8 bd 56 ff ff       	call   c00077b9 <malloc>
c00120fc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012100:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012104:	31 c9                	xor    ecx,ecx
c0012106:	5e                   	pop    esi
c0012107:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012109:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001210d:	55                   	push   ebp
c001210e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012112:	51                   	push   ecx
c0012113:	52                   	push   edx
c0012114:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012118:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001211c:	53                   	push   ebx
c001211d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012120:	83 c4 14             	add    esp,0x14
c0012123:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012127:	e8 8d 56 ff ff       	call   c00077b9 <malloc>
c001212c:	89 c6                	mov    esi,eax
c001212e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012130:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012133:	56                   	push   esi
c0012134:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012138:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001213c:	51                   	push   ecx
c001213d:	52                   	push   edx
c001213e:	53                   	push   ebx
c001213f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012142:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012146:	8b 15 60 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023760
c001214c:	83 c4 1c             	add    esp,0x1c
c001214f:	c1 e8 04             	shr    eax,0x4
c0012152:	89 04 95 e0 35 02 c0 	mov    DWORD PTR [edx*4-0x3ffdca20],eax
c0012159:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001215d:	31 d2                	xor    edx,edx
c001215f:	52                   	push   edx
c0012160:	50                   	push   eax
c0012161:	53                   	push   ebx
c0012162:	e8 6d 8a ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0012167:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012169:	31 d2                	xor    edx,edx
c001216b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001216e:	56                   	push   esi
c001216f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012173:	52                   	push   edx
c0012174:	50                   	push   eax
c0012175:	53                   	push   ebx
c0012176:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012179:	83 c4 14             	add    esp,0x14
c001217c:	53                   	push   ebx
c001217d:	e8 f2 89 ff ff       	call   c000ab74 <File::close()>
c0012182:	5d                   	pop    ebp
c0012183:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012187:	e8 3d 56 ff ff       	call   c00077c9 <free>
c001218c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001218f:	e8 35 56 ff ff       	call   c00077c9 <free>
c0012194:	a1 60 37 02 c0       	mov    eax,ds:0xc0023760
c0012199:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001219d:	8d 50 01             	lea    edx,[eax+0x1]
c00121a0:	89 0c 85 e0 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc920],ecx
c00121a7:	89 34 85 60 36 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc9a0],esi
c00121ae:	89 15 60 37 02 c0    	mov    DWORD PTR ds:0xc0023760,edx
c00121b4:	83 c4 10             	add    esp,0x10
c00121b7:	b0 01                	mov    al,0x1
c00121b9:	83 c4 5c             	add    esp,0x5c
c00121bc:	5b                   	pop    ebx
c00121bd:	5e                   	pop    esi
c00121be:	5f                   	pop    edi
c00121bf:	5d                   	pop    ebp
c00121c0:	c3                   	ret    

c00121c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c00121c1:	55                   	push   ebp
c00121c2:	57                   	push   edi
c00121c3:	56                   	push   esi
c00121c4:	53                   	push   ebx
c00121c5:	81 ec 68 03 00 00    	sub    esp,0x368
c00121cb:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c00121d2:	8b 1d b0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237b0
c00121d8:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00121dc:	68 14 01 00 00       	push   0x114
c00121e1:	e8 d3 55 ff ff       	call   c00077b9 <malloc>
c00121e6:	83 c4 0c             	add    esp,0xc
c00121e9:	89 c5                	mov    ebp,eax
c00121eb:	53                   	push   ebx
c00121ec:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c00121f3:	50                   	push   eax
c00121f4:	e8 5d 88 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c00121f9:	5e                   	pop    esi
c00121fa:	5f                   	pop    edi
c00121fb:	6a 01                	push   0x1
c00121fd:	55                   	push   ebp
c00121fe:	e8 13 89 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c0012203:	83 c4 10             	add    esp,0x10
c0012206:	85 c0                	test   eax,eax
c0012208:	0f 85 a7 06 00 00    	jne    c00128b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001220e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012216:	83 ec 0c             	sub    esp,0xc
c0012219:	6a 34                	push   0x34
c001221b:	e8 99 55 ff ff       	call   c00077b9 <malloc>
c0012220:	5b                   	pop    ebx
c0012221:	89 c7                	mov    edi,eax
c0012223:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012227:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001222a:	53                   	push   ebx
c001222b:	57                   	push   edi
c001222c:	6a 00                	push   0x0
c001222e:	6a 34                	push   0x34
c0012230:	55                   	push   ebp
c0012231:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012234:	83 c4 20             	add    esp,0x20
c0012237:	85 c0                	test   eax,eax
c0012239:	0f 85 76 06 00 00    	jne    c00128b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001223f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c0012245:	0f 85 6a 06 00 00    	jne    c00128b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001224b:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001224e:	85 c0                	test   eax,eax
c0012250:	0f 84 5f 06 00 00    	je     c00128b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012256:	31 d2                	xor    edx,edx
c0012258:	51                   	push   ecx
c0012259:	52                   	push   edx
c001225a:	50                   	push   eax
c001225b:	55                   	push   ebp
c001225c:	e8 73 89 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0012261:	83 c4 10             	add    esp,0x10
c0012264:	85 c0                	test   eax,eax
c0012266:	0f 85 49 06 00 00    	jne    c00128b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001226c:	83 ec 0c             	sub    esp,0xc
c001226f:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c0012272:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012276:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001227a:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001227e:	0f af c2             	imul   eax,edx
c0012281:	50                   	push   eax
c0012282:	e8 32 55 ff ff       	call   c00077b9 <malloc>
c0012287:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001228a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001228e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012291:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012295:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012299:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001229d:	0f af c2             	imul   eax,edx
c00122a0:	99                   	cdq    
c00122a1:	52                   	push   edx
c00122a2:	50                   	push   eax
c00122a3:	55                   	push   ebp
c00122a4:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00122a7:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c00122aa:	83 c4 20             	add    esp,0x20
c00122ad:	85 c0                	test   eax,eax
c00122af:	0f 84 00 06 00 00    	je     c00128b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00122b5:	52                   	push   edx
c00122b6:	31 d2                	xor    edx,edx
c00122b8:	52                   	push   edx
c00122b9:	50                   	push   eax
c00122ba:	55                   	push   ebp
c00122bb:	e8 14 89 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c00122c0:	83 c4 10             	add    esp,0x10
c00122c3:	85 c0                	test   eax,eax
c00122c5:	0f 85 ea 05 00 00    	jne    c00128b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00122cb:	83 ec 0c             	sub    esp,0xc
c00122ce:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00122d2:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00122d6:	31 f6                	xor    esi,esi
c00122d8:	0f af c2             	imul   eax,edx
c00122db:	50                   	push   eax
c00122dc:	e8 d8 54 ff ff       	call   c00077b9 <malloc>
c00122e1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00122e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00122e8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122eb:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00122ef:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c00122f3:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c00122f7:	0f af c2             	imul   eax,edx
c00122fa:	99                   	cdq    
c00122fb:	52                   	push   edx
c00122fc:	50                   	push   eax
c00122fd:	55                   	push   ebp
c00122fe:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012301:	83 c4 20             	add    esp,0x20
c0012304:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012308:	0f 86 8a 00 00 00    	jbe    c0012398 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001230e:	0f b7 de             	movzx  ebx,si
c0012311:	c1 e3 05             	shl    ebx,0x5
c0012314:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012318:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001231b:	75 75                	jne    c0012392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001231d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012320:	31 d2                	xor    edx,edx
c0012322:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012326:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012329:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001232d:	50                   	push   eax
c001232e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012331:	52                   	push   edx
c0012332:	50                   	push   eax
c0012333:	55                   	push   ebp
c0012334:	e8 9b 88 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0012339:	83 c4 10             	add    esp,0x10
c001233c:	85 c0                	test   eax,eax
c001233e:	0f 85 71 05 00 00    	jne    c00128b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012344:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001234b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001234e:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0012352:	31 d2                	xor    edx,edx
c0012354:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0012358:	83 ec 0c             	sub    esp,0xc
c001235b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001235f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012366:	50                   	push   eax
c0012367:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001236b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001236f:	52                   	push   edx
c0012370:	50                   	push   eax
c0012371:	55                   	push   ebp
c0012372:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012375:	83 c4 1c             	add    esp,0x1c
c0012378:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001237b:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001237e:	50                   	push   eax
c001237f:	6a 00                	push   0x0
c0012381:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012385:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0012389:	50                   	push   eax
c001238a:	e8 41 e1 fe ff       	call   c00004d0 <memset>
c001238f:	83 c4 10             	add    esp,0x10
c0012392:	46                   	inc    esi
c0012393:	e9 6c ff ff ff       	jmp    c0012304 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0012398:	53                   	push   ebx
c0012399:	31 db                	xor    ebx,ebx
c001239b:	68 00 01 00 00       	push   0x100
c00123a0:	6a 00                	push   0x0
c00123a2:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c00123a6:	50                   	push   eax
c00123a7:	e8 24 e1 fe ff       	call   c00004d0 <memset>
c00123ac:	83 c4 0c             	add    esp,0xc
c00123af:	68 00 01 00 00       	push   0x100
c00123b4:	6a 00                	push   0x0
c00123b6:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c00123bd:	50                   	push   eax
c00123be:	e8 0d e1 fe ff       	call   c00004d0 <memset>
c00123c3:	83 c4 10             	add    esp,0x10
c00123c6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00123ce:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00123d6:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00123de:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00123e6:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00123ee:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c00123f2:	0f 86 30 01 00 00    	jbe    c0012528 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c00123f8:	0f b7 f3             	movzx  esi,bx
c00123fb:	6b f6 28             	imul   esi,esi,0x28
c00123fe:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012402:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012405:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012409:	52                   	push   edx
c001240a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001240e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012412:	8b 06                	mov    eax,DWORD PTR [esi]
c0012414:	6b d2 28             	imul   edx,edx,0x28
c0012417:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001241b:	31 d2                	xor    edx,edx
c001241d:	52                   	push   edx
c001241e:	50                   	push   eax
c001241f:	55                   	push   ebp
c0012420:	e8 af 87 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0012425:	83 c4 0c             	add    esp,0xc
c0012428:	6a 20                	push   0x20
c001242a:	6a 00                	push   0x0
c001242c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012433:	51                   	push   ecx
c0012434:	e8 97 e0 fe ff       	call   c00004d0 <memset>
c0012439:	59                   	pop    ecx
c001243a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001243d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0012441:	52                   	push   edx
c0012442:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0012449:	51                   	push   ecx
c001244a:	6a 00                	push   0x0
c001244c:	6a 1f                	push   0x1f
c001244e:	55                   	push   ebp
c001244f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012452:	83 c4 1c             	add    esp,0x1c
c0012455:	6a 09                	push   0x9
c0012457:	68 3a e4 01 c0       	push   0xc001e43a
c001245c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012463:	51                   	push   ecx
c0012464:	e8 27 df fe ff       	call   c0000390 <memcmp>
c0012469:	83 c4 10             	add    esp,0x10
c001246c:	85 c0                	test   eax,eax
c001246e:	75 21                	jne    c0012491 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0012470:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012474:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012478:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001247c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012480:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012483:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001248a:	89 d0                	mov    eax,edx
c001248c:	40                   	inc    eax
c001248d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012491:	50                   	push   eax
c0012492:	6a 09                	push   0x9
c0012494:	68 44 e4 01 c0       	push   0xc001e444
c0012499:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00124a0:	50                   	push   eax
c00124a1:	e8 ea de fe ff       	call   c0000390 <memcmp>
c00124a6:	83 c4 10             	add    esp,0x10
c00124a9:	85 c0                	test   eax,eax
c00124ab:	75 21                	jne    c00124ce <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c00124ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00124b1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124b5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00124b9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00124bd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124c0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00124c7:	89 d0                	mov    eax,edx
c00124c9:	40                   	inc    eax
c00124ca:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00124ce:	50                   	push   eax
c00124cf:	50                   	push   eax
c00124d0:	68 10 e4 01 c0       	push   0xc001e410
c00124d5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00124dc:	50                   	push   eax
c00124dd:	e8 fe e1 fe ff       	call   c00006e0 <strcmp>
c00124e2:	83 c4 10             	add    esp,0x10
c00124e5:	85 c0                	test   eax,eax
c00124e7:	75 0f                	jne    c00124f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c00124e9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00124ec:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00124f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124f8:	50                   	push   eax
c00124f9:	50                   	push   eax
c00124fa:	68 18 e4 01 c0       	push   0xc001e418
c00124ff:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012506:	50                   	push   eax
c0012507:	e8 d4 e1 fe ff       	call   c00006e0 <strcmp>
c001250c:	83 c4 10             	add    esp,0x10
c001250f:	85 c0                	test   eax,eax
c0012511:	75 0f                	jne    c0012522 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012513:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012516:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001251a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001251e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012522:	43                   	inc    ebx
c0012523:	e9 c6 fe ff ff       	jmp    c00123ee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012528:	31 d2                	xor    edx,edx
c001252a:	50                   	push   eax
c001252b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001252f:	52                   	push   edx
c0012530:	50                   	push   eax
c0012531:	55                   	push   ebp
c0012532:	e8 9d 86 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c0012537:	58                   	pop    eax
c0012538:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001253c:	e8 78 52 ff ff       	call   c00077b9 <malloc>
c0012541:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012544:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012548:	31 d2                	xor    edx,edx
c001254a:	58                   	pop    eax
c001254b:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001254f:	53                   	push   ebx
c0012550:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0012554:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012558:	52                   	push   edx
c0012559:	50                   	push   eax
c001255a:	55                   	push   ebp
c001255b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001255e:	83 c4 14             	add    esp,0x14
c0012561:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012565:	e8 4f 52 ff ff       	call   c00077b9 <malloc>
c001256a:	31 d2                	xor    edx,edx
c001256c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0012570:	83 c4 0c             	add    esp,0xc
c0012573:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0012577:	52                   	push   edx
c0012578:	50                   	push   eax
c0012579:	55                   	push   ebp
c001257a:	e8 55 86 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c001257f:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012582:	31 d2                	xor    edx,edx
c0012584:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012587:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001258b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001258f:	52                   	push   edx
c0012590:	50                   	push   eax
c0012591:	55                   	push   ebp
c0012592:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012595:	83 c4 20             	add    esp,0x20
c0012598:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00125a0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00125a4:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c00125a8:	0f 84 0b 03 00 00    	je     c00128b9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c00125ae:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c00125b5:	31 d2                	xor    edx,edx
c00125b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125bb:	c1 e8 03             	shr    eax,0x3
c00125be:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00125c2:	51                   	push   ecx
c00125c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00125c7:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c00125cb:	52                   	push   edx
c00125cc:	50                   	push   eax
c00125cd:	55                   	push   ebp
c00125ce:	e8 01 86 ff ff       	call   c000abd4 <File::seek(unsigned long long)>
c00125d3:	5b                   	pop    ebx
c00125d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125d8:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c00125df:	e8 d5 51 ff ff       	call   c00077b9 <malloc>
c00125e4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00125e7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00125eb:	31 d2                	xor    edx,edx
c00125ed:	5e                   	pop    esi
c00125ee:	8d 44 24 58          	lea    eax,[esp+0x58]
c00125f2:	50                   	push   eax
c00125f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00125f7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00125fb:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012602:	52                   	push   edx
c0012603:	50                   	push   eax
c0012604:	55                   	push   ebp
c0012605:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012608:	83 c4 20             	add    esp,0x20
c001260b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012613:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012617:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001261b:	0f 8d 7c 02 00 00    	jge    c001289d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012621:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012625:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012629:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001262e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012631:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012635:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012639:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001263d:	89 d8                	mov    eax,ebx
c001263f:	c1 e8 08             	shr    eax,0x8
c0012642:	89 c6                	mov    esi,eax
c0012644:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0012648:	c1 e6 04             	shl    esi,0x4
c001264b:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001264f:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0012652:	85 d2                	test   edx,edx
c0012654:	0f 85 bf 00 00 00    	jne    c0012719 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001265a:	83 ec 0c             	sub    esp,0xc
c001265d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012661:	03 06                	add    eax,DWORD PTR [esi]
c0012663:	50                   	push   eax
c0012664:	e8 4b f8 ff ff       	call   c0011eb4 <Thr::getAddressOfKernelSymbol(char const*)>
c0012669:	83 c4 10             	add    esp,0x10
c001266c:	89 c2                	mov    edx,eax
c001266e:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c0012673:	85 c0                	test   eax,eax
c0012675:	0f 85 9e 00 00 00    	jne    c0012719 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001267b:	83 ec 0c             	sub    esp,0xc
c001267e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012682:	03 06                	add    eax,DWORD PTR [esi]
c0012684:	50                   	push   eax
c0012685:	e8 22 dc ff ff       	call   c00102ac <KeResolveCompatibilitySymbol(char*)>
c001268a:	83 c4 10             	add    esp,0x10
c001268d:	89 c2                	mov    edx,eax
c001268f:	85 c0                	test   eax,eax
c0012691:	0f 85 82 00 00 00    	jne    c0012719 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c0012697:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001269b:	50                   	push   eax
c001269c:	50                   	push   eax
c001269d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126a1:	03 06                	add    eax,DWORD PTR [esi]
c00126a3:	50                   	push   eax
c00126a4:	68 4e e4 01 c0       	push   0xc001e44e
c00126a9:	e8 32 7e ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00126ae:	58                   	pop    eax
c00126af:	5a                   	pop    edx
c00126b0:	68 68 e4 01 c0       	push   0xc001e468
c00126b5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126bc:	50                   	push   eax
c00126bd:	e8 3e df fe ff       	call   c0000600 <strcpy>
c00126c2:	59                   	pop    ecx
c00126c3:	58                   	pop    eax
c00126c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00126c8:	03 06                	add    eax,DWORD PTR [esi]
c00126ca:	50                   	push   eax
c00126cb:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126d2:	50                   	push   eax
c00126d3:	e8 e8 e0 fe ff       	call   c00007c0 <strcat>
c00126d8:	58                   	pop    eax
c00126d9:	5a                   	pop    edx
c00126da:	68 fe e4 01 c0       	push   0xc001e4fe
c00126df:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00126e6:	50                   	push   eax
c00126e7:	e8 d4 e0 fe ff       	call   c00007c0 <strcat>
c00126ec:	83 c4 10             	add    esp,0x10
c00126ef:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00126f4:	0f 84 5d 01 00 00    	je     c0012857 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00126fa:	83 ec 0c             	sub    esp,0xc
c00126fd:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012704:	50                   	push   eax
c0012705:	e8 51 da ff ff       	call   c001015b <KePanic(char const*)>
c001270a:	83 c4 10             	add    esp,0x10
c001270d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012711:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012715:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012719:	80 fb 01             	cmp    bl,0x1
c001271c:	0f 85 88 00 00 00    	jne    c00127aa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012722:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012729:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001272d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012731:	01 ce                	add    esi,ecx
c0012733:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012739:	0f 94 c0             	sete   al
c001273c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012742:	0f 94 c3             	sete   bl
c0012745:	09 c3                	or     ebx,eax
c0012747:	8b 06                	mov    eax,DWORD PTR [esi]
c0012749:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001274e:	74 41                	je     c0012791 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c0012750:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012753:	84 db                	test   bl,bl
c0012755:	75 15                	jne    c001276c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c0012757:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001275b:	66 83 f8 0c          	cmp    ax,0xc
c001275f:	76 05                	jbe    c0012766 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c0012761:	b8 0c 00 00 00       	mov    eax,0xc
c0012766:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001276a:	76 37                	jbe    c00127a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001276c:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0012770:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012775:	0f 84 dc 00 00 00    	je     c0012857 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001277b:	83 ec 0c             	sub    esp,0xc
c001277e:	68 7f e4 01 c0       	push   0xc001e47f
c0012783:	e8 d3 d9 ff ff       	call   c001015b <KePanic(char const*)>
c0012788:	83 c4 10             	add    esp,0x10
c001278b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001278f:	eb 12                	jmp    c00127a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012791:	01 c1                	add    ecx,eax
c0012793:	84 db                	test   bl,bl
c0012795:	75 0c                	jne    c00127a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012797:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001279b:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001279f:	77 02                	ja     c00127a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00127a1:	01 d1                	add    ecx,edx
c00127a3:	89 0e                	mov    DWORD PTR [esi],ecx
c00127a5:	e9 ea 00 00 00       	jmp    c0012894 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c00127aa:	80 fb 02             	cmp    bl,0x2
c00127ad:	75 7c                	jne    c001282b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c00127af:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c00127b6:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c00127ba:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c00127be:	81 fb 01 04 00 00    	cmp    ebx,0x401
c00127c4:	74 20                	je     c00127e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00127c6:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00127cc:	74 18                	je     c00127e6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c00127ce:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00127d2:	b9 0a 00 00 00       	mov    ecx,0xa
c00127d7:	66 83 f8 0e          	cmp    ax,0xe
c00127db:	77 03                	ja     c00127e0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c00127dd:	8d 48 fc             	lea    ecx,[eax-0x4]
c00127e0:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c00127e4:	76 1f                	jbe    c0012805 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c00127e6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c00127ea:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00127ef:	74 66                	je     c0012857 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00127f1:	83 ec 0c             	sub    esp,0xc
c00127f4:	68 9b e4 01 c0       	push   0xc001e49b
c00127f9:	e8 5d d9 ff ff       	call   c001015b <KePanic(char const*)>
c00127fe:	83 c4 10             	add    esp,0x10
c0012801:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012805:	8b 06                	mov    eax,DWORD PTR [esi]
c0012807:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001280c:	74 13                	je     c0012821 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001280e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012812:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012819:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001281d:	01 c8                	add    eax,ecx
c001281f:	eb 04                	jmp    c0012825 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012821:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012825:	01 c2                	add    edx,eax
c0012827:	89 16                	mov    DWORD PTR [esi],edx
c0012829:	eb 69                	jmp    c0012894 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001282b:	0f b6 db             	movzx  ebx,bl
c001282e:	50                   	push   eax
c001282f:	50                   	push   eax
c0012830:	53                   	push   ebx
c0012831:	68 b7 e4 01 c0       	push   0xc001e4b7
c0012836:	e8 a5 7c ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001283b:	83 c4 10             	add    esp,0x10
c001283e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012843:	74 12                	je     c0012857 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012845:	83 ec 0c             	sub    esp,0xc
c0012848:	68 c2 e4 01 c0       	push   0xc001e4c2
c001284d:	e8 09 d9 ff ff       	call   c001015b <KePanic(char const*)>
c0012852:	83 c4 10             	add    esp,0x10
c0012855:	eb 3d                	jmp    c0012894 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012857:	83 ec 0c             	sub    esp,0xc
c001285a:	55                   	push   ebp
c001285b:	e8 14 83 ff ff       	call   c000ab74 <File::close()>
c0012860:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012863:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012866:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012869:	59                   	pop    ecx
c001286a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001286e:	e8 56 4f ff ff       	call   c00077c9 <free>
c0012873:	5b                   	pop    ebx
c0012874:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012878:	e8 4c 4f ff ff       	call   c00077c9 <free>
c001287d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012880:	e8 44 4f ff ff       	call   c00077c9 <free>
c0012885:	5e                   	pop    esi
c0012886:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001288a:	e8 3a 4f ff ff       	call   c00077c9 <free>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	eb 21                	jmp    c00128b5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012894:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012898:	e9 76 fd ff ff       	jmp    c0012613 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001289d:	83 ec 0c             	sub    esp,0xc
c00128a0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00128a4:	e8 20 4f ff ff       	call   c00077c9 <free>
c00128a9:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00128ad:	83 c4 10             	add    esp,0x10
c00128b0:	e9 eb fc ff ff       	jmp    c00125a0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c00128b5:	31 c0                	xor    eax,eax
c00128b7:	eb 33                	jmp    c00128ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c00128b9:	83 ec 0c             	sub    esp,0xc
c00128bc:	55                   	push   ebp
c00128bd:	e8 b2 82 ff ff       	call   c000ab74 <File::close()>
c00128c2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00128c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00128c8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00128cb:	58                   	pop    eax
c00128cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00128d0:	e8 f4 4e ff ff       	call   c00077c9 <free>
c00128d5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00128d8:	e8 ec 4e ff ff       	call   c00077c9 <free>
c00128dd:	5a                   	pop    edx
c00128de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00128e2:	e8 e2 4e ff ff       	call   c00077c9 <free>
c00128e7:	83 c4 10             	add    esp,0x10
c00128ea:	b0 01                	mov    al,0x1
c00128ec:	81 c4 5c 03 00 00    	add    esp,0x35c
c00128f2:	5b                   	pop    ebx
c00128f3:	5e                   	pop    esi
c00128f4:	5f                   	pop    edi
c00128f5:	5d                   	pop    ebp
c00128f6:	c3                   	ret    

c00128f7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c00128f7:	56                   	push   esi
c00128f8:	31 d2                	xor    edx,edx
c00128fa:	53                   	push   ebx
c00128fb:	8b 1d c0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fc0
c0012901:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012905:	39 d3                	cmp    ebx,edx
c0012907:	7e 1b                	jle    c0012924 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012909:	8b 04 95 e0 31 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdce20]
c0012910:	39 c8                	cmp    eax,ecx
c0012912:	77 0d                	ja     c0012921 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012914:	8b 34 95 e0 2f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdd020]
c001291b:	01 c6                	add    esi,eax
c001291d:	39 ce                	cmp    esi,ecx
c001291f:	77 05                	ja     c0012926 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012921:	42                   	inc    edx
c0012922:	eb e1                	jmp    c0012905 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012924:	31 c0                	xor    eax,eax
c0012926:	5b                   	pop    ebx
c0012927:	5e                   	pop    esi
c0012928:	c3                   	ret    

c0012929 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012929:	53                   	push   ebx
c001292a:	31 c0                	xor    eax,eax
c001292c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012930:	8b 1d c0 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022fc0
c0012936:	39 c3                	cmp    ebx,eax
c0012938:	7e 22                	jle    c001295c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001293a:	8b 14 85 e0 31 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdce20]
c0012941:	39 ca                	cmp    edx,ecx
c0012943:	77 14                	ja     c0012959 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012945:	03 14 85 e0 2f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdd020]
c001294c:	39 ca                	cmp    edx,ecx
c001294e:	76 09                	jbe    c0012959 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012950:	8b 04 85 e0 33 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcc20]
c0012957:	eb 05                	jmp    c001295e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012959:	40                   	inc    eax
c001295a:	eb da                	jmp    c0012936 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001295c:	31 c0                	xor    eax,eax
c001295e:	5b                   	pop    ebx
c001295f:	c3                   	ret    

c0012960 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012960:	53                   	push   ebx
c0012961:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012965:	53                   	push   ebx
c0012966:	e8 8c ff ff ff       	call   c00128f7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001296b:	5a                   	pop    edx
c001296c:	31 d2                	xor    edx,edx
c001296e:	85 c0                	test   eax,eax
c0012970:	74 04                	je     c0012976 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012972:	89 da                	mov    edx,ebx
c0012974:	29 c2                	sub    edx,eax
c0012976:	89 d0                	mov    eax,edx
c0012978:	5b                   	pop    ebx
c0012979:	c3                   	ret    

c001297a <Thr::loadDLL(char const*, bool)>:
c001297a:	55                   	push   ebp
c001297b:	57                   	push   edi
c001297c:	56                   	push   esi
c001297d:	53                   	push   ebx
c001297e:	81 ec 34 01 00 00    	sub    esp,0x134
c0012984:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001298b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012992:	56                   	push   esi
c0012993:	68 da e4 01 c0       	push   0xc001e4da
c0012998:	e8 43 7b ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001299d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00129a4:	e8 10 4e ff ff       	call   c00077b9 <malloc>
c00129a9:	83 c4 0c             	add    esp,0xc
c00129ac:	89 c3                	mov    ebx,eax
c00129ae:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c00129b4:	56                   	push   esi
c00129b5:	50                   	push   eax
c00129b6:	e8 9b 80 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c00129bb:	83 c4 10             	add    esp,0x10
c00129be:	85 db                	test   ebx,ebx
c00129c0:	75 3c                	jne    c00129fe <Thr::loadDLL(char const*, bool)+0x84>
c00129c2:	89 f8                	mov    eax,edi
c00129c4:	84 c0                	test   al,al
c00129c6:	0f 84 d2 01 00 00    	je     c0012b9e <Thr::loadDLL(char const*, bool)+0x224>
c00129cc:	55                   	push   ebp
c00129cd:	55                   	push   ebp
c00129ce:	68 eb e4 01 c0       	push   0xc001e4eb
c00129d3:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c00129d7:	55                   	push   ebp
c00129d8:	e8 23 dc fe ff       	call   c0000600 <strcpy>
c00129dd:	58                   	pop    eax
c00129de:	5a                   	pop    edx
c00129df:	56                   	push   esi
c00129e0:	55                   	push   ebp
c00129e1:	e8 da dd fe ff       	call   c00007c0 <strcat>
c00129e6:	59                   	pop    ecx
c00129e7:	58                   	pop    eax
c00129e8:	68 fe e4 01 c0       	push   0xc001e4fe
c00129ed:	55                   	push   ebp
c00129ee:	e8 cd dd fe ff       	call   c00007c0 <strcat>
c00129f3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00129f6:	e8 60 d7 ff ff       	call   c001015b <KePanic(char const*)>
c00129fb:	83 c4 10             	add    esp,0x10
c00129fe:	51                   	push   ecx
c00129ff:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012a03:	50                   	push   eax
c0012a04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012a08:	50                   	push   eax
c0012a09:	53                   	push   ebx
c0012a0a:	e8 b3 83 ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c0012a0f:	83 c4 10             	add    esp,0x10
c0012a12:	85 db                	test   ebx,ebx
c0012a14:	74 0c                	je     c0012a22 <Thr::loadDLL(char const*, bool)+0xa8>
c0012a16:	83 ec 0c             	sub    esp,0xc
c0012a19:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a1b:	53                   	push   ebx
c0012a1c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012a1f:	83 c4 10             	add    esp,0x10
c0012a22:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012a27:	75 0a                	jne    c0012a33 <Thr::loadDLL(char const*, bool)+0xb9>
c0012a29:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012a2d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012a31:	75 3c                	jne    c0012a6f <Thr::loadDLL(char const*, bool)+0xf5>
c0012a33:	89 f8                	mov    eax,edi
c0012a35:	84 c0                	test   al,al
c0012a37:	0f 84 49 01 00 00    	je     c0012b86 <Thr::loadDLL(char const*, bool)+0x20c>
c0012a3d:	51                   	push   ecx
c0012a3e:	51                   	push   ecx
c0012a3f:	68 eb e4 01 c0       	push   0xc001e4eb
c0012a44:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012a48:	53                   	push   ebx
c0012a49:	e8 b2 db fe ff       	call   c0000600 <strcpy>
c0012a4e:	5d                   	pop    ebp
c0012a4f:	58                   	pop    eax
c0012a50:	56                   	push   esi
c0012a51:	53                   	push   ebx
c0012a52:	e8 69 dd fe ff       	call   c00007c0 <strcat>
c0012a57:	58                   	pop    eax
c0012a58:	5a                   	pop    edx
c0012a59:	68 fe e4 01 c0       	push   0xc001e4fe
c0012a5e:	53                   	push   ebx
c0012a5f:	e8 5c dd fe ff       	call   c00007c0 <strcat>
c0012a64:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012a67:	e8 ef d6 ff ff       	call   c001015b <KePanic(char const*)>
c0012a6c:	83 c4 10             	add    esp,0x10
c0012a6f:	52                   	push   edx
c0012a70:	6a 03                	push   0x3
c0012a72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012a76:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012a7a:	05 ff 0f 00 00       	add    eax,0xfff
c0012a7f:	83 d2 00             	adc    edx,0x0
c0012a82:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012a86:	50                   	push   eax
c0012a87:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c0012a8d:	e8 94 6f ff ff       	call   c0009a26 <VAS::allocatePages(int, int)>
c0012a92:	59                   	pop    ecx
c0012a93:	89 c3                	mov    ebx,eax
c0012a95:	5d                   	pop    ebp
c0012a96:	50                   	push   eax
c0012a97:	68 b6 d2 01 c0       	push   0xc001d2b6
c0012a9c:	e8 3f 7a ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0012aa1:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aa4:	e8 97 da fe ff       	call   c0000540 <strlen>
c0012aa9:	8b 2d c0 2f 02 c0    	mov    ebp,DWORD PTR ds:0xc0022fc0
c0012aaf:	40                   	inc    eax
c0012ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0012ab3:	e8 01 4d ff ff       	call   c00077b9 <malloc>
c0012ab8:	89 04 ad e0 33 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdcc20],eax
c0012abf:	58                   	pop    eax
c0012ac0:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c0012ac5:	5a                   	pop    edx
c0012ac6:	56                   	push   esi
c0012ac7:	ff 34 85 e0 33 02 c0 	push   DWORD PTR [eax*4-0x3ffdcc20]
c0012ace:	e8 2d db fe ff       	call   c0000600 <strcpy>
c0012ad3:	a1 c0 2f 02 c0       	mov    eax,ds:0xc0022fc0
c0012ad8:	8d 50 01             	lea    edx,[eax+0x1]
c0012adb:	89 1c 85 e0 31 02 c0 	mov    DWORD PTR [eax*4-0x3ffdce20],ebx
c0012ae2:	89 15 c0 2f 02 c0    	mov    DWORD PTR ds:0xc0022fc0,edx
c0012ae8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012aec:	83 c4 0c             	add    esp,0xc
c0012aef:	89 14 85 e0 2f 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd020],edx
c0012af6:	6a 01                	push   0x1
c0012af8:	53                   	push   ebx
c0012af9:	56                   	push   esi
c0012afa:	e8 c2 f6 ff ff       	call   c00121c1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012aff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012b03:	83 c4 10             	add    esp,0x10
c0012b06:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012b0b:	0f 85 89 00 00 00    	jne    c0012b9a <Thr::loadDLL(char const*, bool)+0x220>
c0012b11:	89 f8                	mov    eax,edi
c0012b13:	84 c0                	test   al,al
c0012b15:	74 73                	je     c0012b8a <Thr::loadDLL(char const*, bool)+0x210>
c0012b17:	83 ec 0c             	sub    esp,0xc
c0012b1a:	68 00 e5 01 c0       	push   0xc001e500
c0012b1f:	e8 37 d6 ff ff       	call   c001015b <KePanic(char const*)>
c0012b24:	83 c4 10             	add    esp,0x10
c0012b27:	eb 61                	jmp    c0012b8a <Thr::loadDLL(char const*, bool)+0x210>
c0012b29:	50                   	push   eax
c0012b2a:	50                   	push   eax
c0012b2b:	89 e8                	mov    eax,ebp
c0012b2d:	c1 e0 0c             	shl    eax,0xc
c0012b30:	01 d8                	add    eax,ebx
c0012b32:	50                   	push   eax
c0012b33:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c0012b39:	e8 60 6a ff ff       	call   c000959e <VAS::getPageTableEntry(unsigned long)>
c0012b3e:	83 c4 10             	add    esp,0x10
c0012b41:	8b 00                	mov    eax,DWORD PTR [eax]
c0012b43:	a8 60                	test   al,0x60
c0012b45:	75 11                	jne    c0012b58 <Thr::loadDLL(char const*, bool)+0x1de>
c0012b47:	83 ec 0c             	sub    esp,0xc
c0012b4a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012b4f:	50                   	push   eax
c0012b50:	e8 de 4e ff ff       	call   c0007a33 <Phys::freePage(unsigned long)>
c0012b55:	83 c4 10             	add    esp,0x10
c0012b58:	45                   	inc    ebp
c0012b59:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012b5d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012b61:	05 ff 0f 00 00       	add    eax,0xfff
c0012b66:	bf 00 00 00 00       	mov    edi,0x0
c0012b6b:	83 d2 00             	adc    edx,0x0
c0012b6e:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012b72:	c1 ea 0c             	shr    edx,0xc
c0012b75:	39 c5                	cmp    ebp,eax
c0012b77:	89 d1                	mov    ecx,edx
c0012b79:	89 f8                	mov    eax,edi
c0012b7b:	19 c8                	sbb    eax,ecx
c0012b7d:	72 aa                	jb     c0012b29 <Thr::loadDLL(char const*, bool)+0x1af>
c0012b7f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012b84:	75 18                	jne    c0012b9e <Thr::loadDLL(char const*, bool)+0x224>
c0012b86:	31 db                	xor    ebx,ebx
c0012b88:	eb 14                	jmp    c0012b9e <Thr::loadDLL(char const*, bool)+0x224>
c0012b8a:	83 ec 0c             	sub    esp,0xc
c0012b8d:	68 1f e5 01 c0       	push   0xc001e51f
c0012b92:	e8 c4 d5 ff ff       	call   c001015b <KePanic(char const*)>
c0012b97:	83 c4 10             	add    esp,0x10
c0012b9a:	31 ed                	xor    ebp,ebp
c0012b9c:	eb bb                	jmp    c0012b59 <Thr::loadDLL(char const*, bool)+0x1df>
c0012b9e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012ba4:	89 d8                	mov    eax,ebx
c0012ba6:	5b                   	pop    ebx
c0012ba7:	5e                   	pop    esi
c0012ba8:	5f                   	pop    edi
c0012ba9:	5d                   	pop    ebp
c0012baa:	c3                   	ret    

c0012bab <Thr::executeDLL(unsigned long, void*)>:
c0012bab:	56                   	push   esi
c0012bac:	53                   	push   ebx
c0012bad:	52                   	push   edx
c0012bae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012bb2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012bb6:	85 db                	test   ebx,ebx
c0012bb8:	75 10                	jne    c0012bca <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012bba:	83 ec 0c             	sub    esp,0xc
c0012bbd:	68 3b e5 01 c0       	push   0xc001e53b
c0012bc2:	e8 94 d5 ff ff       	call   c001015b <KePanic(char const*)>
c0012bc7:	83 c4 10             	add    esp,0x10
c0012bca:	50                   	push   eax
c0012bcb:	50                   	push   eax
c0012bcc:	53                   	push   ebx
c0012bcd:	68 65 e5 01 c0       	push   0xc001e565
c0012bd2:	e8 09 79 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0012bd7:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012bdb:	89 d8                	mov    eax,ebx
c0012bdd:	83 c4 14             	add    esp,0x14
c0012be0:	5b                   	pop    ebx
c0012be1:	5e                   	pop    esi
c0012be2:	ff e0                	jmp    eax

c0012be4 <userModeEntryPoint(void*)>:
c0012be4:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0012be9:	48                   	dec    eax
c0012bea:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0012bef:	75 03                	jne    c0012bf4 <userModeEntryPoint(void*)+0x10>
c0012bf1:	fb                   	sti    
c0012bf2:	66 90                	xchg   ax,ax
c0012bf4:	fb                   	sti    
c0012bf5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012bfa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012bfd:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012c03:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012c07:	e9 33 d6 fe ff       	jmp    c000023f <goToUsermode>

c0012c0c <changeTSS>:
c0012c0c:	83 ec 14             	sub    esp,0x14
c0012c0f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c14:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012c17:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012c1c:	c1 e2 15             	shl    edx,0x15
c0012c1f:	29 d0                	sub    eax,edx
c0012c21:	50                   	push   eax
c0012c22:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0012c27:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012c2d:	05 7c 11 00 00       	add    eax,0x117c
c0012c32:	50                   	push   eax
c0012c33:	e8 a8 5f ff ff       	call   c0008be0 <TSS::setESP(unsigned long)>
c0012c38:	83 c4 1c             	add    esp,0x1c
c0012c3b:	c3                   	ret    

c0012c3c <switchToThread(ThreadControlBlock*)>:
c0012c3c:	57                   	push   edi
c0012c3d:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0012c42:	56                   	push   esi
c0012c43:	85 c0                	test   eax,eax
c0012c45:	53                   	push   ebx
c0012c46:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012c4a:	0f 85 90 00 00 00    	jne    c0012ce0 <switchToThread(ThreadControlBlock*)+0xa4>
c0012c50:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012c53:	80 fa ff             	cmp    dl,0xff
c0012c56:	0f 84 80 00 00 00    	je     c0012cdc <switchToThread(ThreadControlBlock*)+0xa0>
c0012c5c:	81 e2 ff 00 00 00    	and    edx,0xff
c0012c62:	b8 00 04 00 00       	mov    eax,0x400
c0012c67:	29 d0                	sub    eax,edx
c0012c69:	d1 f8                	sar    eax,1
c0012c6b:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012c6e:	66 90                	xchg   ax,ax
c0012c70:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012c73:	e8 fd 25 00 00       	call   c0015275 <HalQueryPerformanceCounter()>
c0012c78:	a3 c8 37 02 c0       	mov    ds:0xc00237c8,eax
c0012c7d:	89 15 cc 37 02 c0    	mov    DWORD PTR ds:0xc00237cc,edx
c0012c83:	89 c6                	mov    esi,eax
c0012c85:	89 d7                	mov    edi,edx
c0012c87:	2b 35 b8 37 02 c0    	sub    esi,DWORD PTR ds:0xc00237b8
c0012c8d:	a3 b8 37 02 c0       	mov    ds:0xc00237b8,eax
c0012c92:	1b 3d bc 37 02 c0    	sbb    edi,DWORD PTR ds:0xc00237bc
c0012c98:	89 35 c0 37 02 c0    	mov    DWORD PTR ds:0xc00237c0,esi
c0012c9e:	89 3d c4 37 02 c0    	mov    DWORD PTR ds:0xc00237c4,edi
c0012ca4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012caa:	89 15 bc 37 02 c0    	mov    DWORD PTR ds:0xc00237bc,edx
c0012cb0:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012cb3:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012cb6:	01 c6                	add    esi,eax
c0012cb8:	11 d7                	adc    edi,edx
c0012cba:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012cbd:	83 ec 0c             	sub    esp,0xc
c0012cc0:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012cc3:	53                   	push   ebx
c0012cc4:	e8 ae d5 fe ff       	call   c0000277 <switchToThreadASM>
c0012cc9:	0f 20 c0             	mov    eax,cr0
c0012ccc:	83 c8 08             	or     eax,0x8
c0012ccf:	0f 22 c0             	mov    cr0,eax
c0012cd2:	83 c4 10             	add    esp,0x10
c0012cd5:	5b                   	pop    ebx
c0012cd6:	5e                   	pop    esi
c0012cd7:	5f                   	pop    edi
c0012cd8:	c3                   	ret    
c0012cd9:	8d 76 00             	lea    esi,[esi+0x0]
c0012cdc:	31 c0                	xor    eax,eax
c0012cde:	eb 90                	jmp    c0012c70 <switchToThread(ThreadControlBlock*)+0x34>
c0012ce0:	5b                   	pop    ebx
c0012ce1:	c7 05 80 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x1
c0012ceb:	5e                   	pop    esi
c0012cec:	5f                   	pop    edi
c0012ced:	c3                   	ret    
c0012cee:	66 90                	xchg   ax,ax

c0012cf0 <Process::addArgs(char**)>:
c0012cf0:	57                   	push   edi
c0012cf1:	56                   	push   esi
c0012cf2:	53                   	push   ebx
c0012cf3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012cf7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012cfb:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012d05:	85 ff                	test   edi,edi
c0012d07:	74 43                	je     c0012d4c <Process::addArgs(char**)+0x5c>
c0012d09:	8b 07                	mov    eax,DWORD PTR [edi]
c0012d0b:	85 c0                	test   eax,eax
c0012d0d:	74 3d                	je     c0012d4c <Process::addArgs(char**)+0x5c>
c0012d0f:	31 db                	xor    ebx,ebx
c0012d11:	8d 76 00             	lea    esi,[esi+0x0]
c0012d14:	83 ec 0c             	sub    esp,0xc
c0012d17:	50                   	push   eax
c0012d18:	e8 23 d8 fe ff       	call   c0000540 <strlen>
c0012d1d:	40                   	inc    eax
c0012d1e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d21:	e8 93 4a ff ff       	call   c00077b9 <malloc>
c0012d26:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012d2d:	5a                   	pop    edx
c0012d2e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012d31:	59                   	pop    ecx
c0012d32:	43                   	inc    ebx
c0012d33:	52                   	push   edx
c0012d34:	50                   	push   eax
c0012d35:	e8 c6 d8 fe ff       	call   c0000600 <strcpy>
c0012d3a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012d40:	83 c4 10             	add    esp,0x10
c0012d43:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012d46:	85 c0                	test   eax,eax
c0012d48:	75 ca                	jne    c0012d14 <Process::addArgs(char**)+0x24>
c0012d4a:	66 90                	xchg   ax,ax
c0012d4c:	5b                   	pop    ebx
c0012d4d:	5e                   	pop    esi
c0012d4e:	5f                   	pop    edi
c0012d4f:	c3                   	ret    

c0012d50 <Process::Process(char const*, Process*, char**)>:
c0012d50:	56                   	push   esi
c0012d51:	53                   	push   ebx
c0012d52:	83 ec 14             	sub    esp,0x14
c0012d55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d59:	05 0c 02 00 00       	add    eax,0x20c
c0012d5e:	bb 07 00 00 00       	mov    ebx,0x7
c0012d63:	89 c6                	mov    esi,eax
c0012d65:	8d 76 00             	lea    esi,[esi+0x0]
c0012d68:	85 db                	test   ebx,ebx
c0012d6a:	78 14                	js     c0012d80 <Process::Process(char const*, Process*, char**)+0x30>
c0012d6c:	83 ec 0c             	sub    esp,0xc
c0012d6f:	56                   	push   esi
c0012d70:	e8 17 98 00 00       	call   c001c58c <ThreadControlBlock::ThreadControlBlock()>
c0012d75:	83 c4 10             	add    esp,0x10
c0012d78:	83 c6 5f             	add    esi,0x5f
c0012d7b:	4b                   	dec    ebx
c0012d7c:	eb ea                	jmp    c0012d68 <Process::Process(char const*, Process*, char**)+0x18>
c0012d7e:	66 90                	xchg   ax,ax
c0012d80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d84:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012d8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012d8f:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0012d96:	83 ec 0c             	sub    esp,0xc
c0012d99:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012d9d:	e8 ae d1 ff ff       	call   c000ff50 <Krnl::newProcessEnv(Process*)>
c0012da2:	83 c4 10             	add    esp,0x10
c0012da5:	89 c2                	mov    edx,eax
c0012da7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dab:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012db1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012db5:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012dbe:	a1 a8 f4 01 c0       	mov    eax,ds:0xc001f4a8
c0012dc3:	8d 50 01             	lea    edx,[eax+0x1]
c0012dc6:	89 15 a8 f4 01 c0    	mov    DWORD PTR ds:0xc001f4a8,edx
c0012dcc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0012dd0:	89 02                	mov    DWORD PTR [edx],eax
c0012dd2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0012dda:	83 ec 0c             	sub    esp,0xc
c0012ddd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012de1:	e8 d3 49 ff ff       	call   c00077b9 <malloc>
c0012de6:	83 c4 10             	add    esp,0x10
c0012de9:	89 c3                	mov    ebx,eax
c0012deb:	83 ec 08             	sub    esp,0x8
c0012dee:	6a 00                	push   0x0
c0012df0:	53                   	push   ebx
c0012df1:	e8 da 6f ff ff       	call   c0009dd0 <VAS::VAS(bool)>
c0012df6:	83 c4 10             	add    esp,0x10
c0012df9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012dfd:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0012e03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e07:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0012e11:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e15:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012e19:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0012e1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e23:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e29:	85 c0                	test   eax,eax
c0012e2b:	74 43                	je     c0012e70 <Process::Process(char const*, Process*, char**)+0x120>
c0012e2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e31:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e37:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0012e3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e41:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0012e47:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e4b:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0012e51:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0012e57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e5b:	05 0c 01 00 00       	add    eax,0x10c
c0012e60:	83 ec 08             	sub    esp,0x8
c0012e63:	52                   	push   edx
c0012e64:	50                   	push   eax
c0012e65:	e8 96 d7 fe ff       	call   c0000600 <strcpy>
c0012e6a:	83 c4 10             	add    esp,0x10
c0012e6d:	eb 65                	jmp    c0012ed4 <Process::Process(char const*, Process*, char**)+0x184>
c0012e6f:	90                   	nop
c0012e70:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c0012e78:	83 ec 0c             	sub    esp,0xc
c0012e7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012e7f:	e8 35 49 ff ff       	call   c00077b9 <malloc>
c0012e84:	83 c4 10             	add    esp,0x10
c0012e87:	89 c3                	mov    ebx,eax
c0012e89:	83 ec 08             	sub    esp,0x8
c0012e8c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012e90:	53                   	push   ebx
c0012e91:	e8 64 5a ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012e9d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0012ea3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ea7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0012ead:	83 ec 0c             	sub    esp,0xc
c0012eb0:	50                   	push   eax
c0012eb1:	e8 e4 52 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c0012eb6:	83 c4 10             	add    esp,0x10
c0012eb9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ebd:	05 0c 01 00 00       	add    eax,0x10c
c0012ec2:	83 ec 08             	sub    esp,0x8
c0012ec5:	68 84 e5 01 c0       	push   0xc001e584
c0012eca:	50                   	push   eax
c0012ecb:	e8 30 d7 fe ff       	call   c0000600 <strcpy>
c0012ed0:	83 c4 10             	add    esp,0x10
c0012ed3:	90                   	nop
c0012ed4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012ed8:	83 c0 0c             	add    eax,0xc
c0012edb:	83 ec 08             	sub    esp,0x8
c0012ede:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ee2:	50                   	push   eax
c0012ee3:	e8 18 d7 fe ff       	call   c0000600 <strcpy>
c0012ee8:	83 c4 10             	add    esp,0x10
c0012eeb:	83 ec 08             	sub    esp,0x8
c0012eee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012ef2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ef6:	e8 f5 fd ff ff       	call   c0012cf0 <Process::addArgs(char**)>
c0012efb:	83 c4 10             	add    esp,0x10
c0012efe:	83 ec 08             	sub    esp,0x8
c0012f01:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012f09:	e8 7d ed ff ff       	call   c0011c8b <Thr::loadProgramIntoMemory(Process*, char const*)>
c0012f0e:	83 c4 10             	add    esp,0x10
c0012f11:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012f15:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012f19:	83 f0 01             	xor    eax,0x1
c0012f1c:	88 c2                	mov    dl,al
c0012f1e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012f22:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c0012f28:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0012f2c:	25 ff 00 00 00       	and    eax,0xff
c0012f31:	83 ec 08             	sub    esp,0x8
c0012f34:	50                   	push   eax
c0012f35:	68 dc e5 01 c0       	push   0xc001e5dc
c0012f3a:	e8 a1 75 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0012f3f:	83 c4 10             	add    esp,0x10
c0012f42:	90                   	nop
c0012f43:	83 c4 14             	add    esp,0x14
c0012f46:	5b                   	pop    ebx
c0012f47:	5e                   	pop    esi
c0012f48:	c3                   	ret    
c0012f49:	90                   	nop
c0012f4a:	66 90                	xchg   ax,ax

c0012f4c <Process::Process(bool, char const*, Process*, char**)>:
c0012f4c:	56                   	push   esi
c0012f4d:	53                   	push   ebx
c0012f4e:	83 ec 24             	sub    esp,0x24
c0012f51:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012f55:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012f59:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f5d:	05 0c 02 00 00       	add    eax,0x20c
c0012f62:	bb 07 00 00 00       	mov    ebx,0x7
c0012f67:	89 c6                	mov    esi,eax
c0012f69:	8d 76 00             	lea    esi,[esi+0x0]
c0012f6c:	85 db                	test   ebx,ebx
c0012f6e:	78 14                	js     c0012f84 <Process::Process(bool, char const*, Process*, char**)+0x38>
c0012f70:	83 ec 0c             	sub    esp,0xc
c0012f73:	56                   	push   esi
c0012f74:	e8 13 96 00 00       	call   c001c58c <ThreadControlBlock::ThreadControlBlock()>
c0012f79:	83 c4 10             	add    esp,0x10
c0012f7c:	83 c6 5f             	add    esi,0x5f
c0012f7f:	4b                   	dec    ebx
c0012f80:	eb ea                	jmp    c0012f6c <Process::Process(bool, char const*, Process*, char**)+0x20>
c0012f82:	66 90                	xchg   ax,ax
c0012f84:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f88:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012f8f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012f93:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0012f9a:	83 ec 0c             	sub    esp,0xc
c0012f9d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012fa1:	e8 aa cf ff ff       	call   c000ff50 <Krnl::newProcessEnv(Process*)>
c0012fa6:	83 c4 10             	add    esp,0x10
c0012fa9:	89 c2                	mov    edx,eax
c0012fab:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012faf:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0012fb5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012fb9:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0012fc2:	a1 a8 f4 01 c0       	mov    eax,ds:0xc001f4a8
c0012fc7:	8d 50 01             	lea    edx,[eax+0x1]
c0012fca:	89 15 a8 f4 01 c0    	mov    DWORD PTR ds:0xc001f4a8,edx
c0012fd0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012fd4:	89 02                	mov    DWORD PTR [edx],eax
c0012fd6:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0012fde:	83 ec 0c             	sub    esp,0xc
c0012fe1:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012fe5:	e8 cf 47 ff ff       	call   c00077b9 <malloc>
c0012fea:	83 c4 10             	add    esp,0x10
c0012fed:	89 c3                	mov    ebx,eax
c0012fef:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0012ff3:	25 ff 00 00 00       	and    eax,0xff
c0012ff8:	83 ec 08             	sub    esp,0x8
c0012ffb:	50                   	push   eax
c0012ffc:	53                   	push   ebx
c0012ffd:	e8 ce 6d ff ff       	call   c0009dd0 <VAS::VAS(bool)>
c0013002:	83 c4 10             	add    esp,0x10
c0013005:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013009:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001300f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013013:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c001301d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013021:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0013025:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001302b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001302f:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013035:	85 c0                	test   eax,eax
c0013037:	74 43                	je     c001307c <Process::Process(bool, char const*, Process*, char**)+0x130>
c0013039:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001303d:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013043:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013049:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001304d:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c0013053:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013057:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001305d:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013063:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013067:	05 0c 01 00 00       	add    eax,0x10c
c001306c:	83 ec 08             	sub    esp,0x8
c001306f:	52                   	push   edx
c0013070:	50                   	push   eax
c0013071:	e8 8a d5 fe ff       	call   c0000600 <strcpy>
c0013076:	83 c4 10             	add    esp,0x10
c0013079:	eb 65                	jmp    c00130e0 <Process::Process(bool, char const*, Process*, char**)+0x194>
c001307b:	90                   	nop
c001307c:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c0013084:	83 ec 0c             	sub    esp,0xc
c0013087:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001308b:	e8 29 47 ff ff       	call   c00077b9 <malloc>
c0013090:	83 c4 10             	add    esp,0x10
c0013093:	89 c3                	mov    ebx,eax
c0013095:	83 ec 08             	sub    esp,0x8
c0013098:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001309c:	53                   	push   ebx
c001309d:	e8 58 58 ff ff       	call   c00088fa <VgaText::VgaText(char const*)>
c00130a2:	83 c4 10             	add    esp,0x10
c00130a5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130a9:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00130af:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130b3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00130b9:	83 ec 0c             	sub    esp,0xc
c00130bc:	50                   	push   eax
c00130bd:	e8 d8 50 ff ff       	call   c000819a <addToTerminalCycle(VgaText*)>
c00130c2:	83 c4 10             	add    esp,0x10
c00130c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130c9:	05 0c 01 00 00       	add    eax,0x10c
c00130ce:	83 ec 08             	sub    esp,0x8
c00130d1:	68 84 e5 01 c0       	push   0xc001e584
c00130d6:	50                   	push   eax
c00130d7:	e8 24 d5 fe ff       	call   c0000600 <strcpy>
c00130dc:	83 c4 10             	add    esp,0x10
c00130df:	90                   	nop
c00130e0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00130e4:	83 c0 0c             	add    eax,0xc
c00130e7:	83 ec 08             	sub    esp,0x8
c00130ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00130ee:	50                   	push   eax
c00130ef:	e8 0c d5 fe ff       	call   c0000600 <strcpy>
c00130f4:	83 c4 10             	add    esp,0x10
c00130f7:	83 ec 08             	sub    esp,0x8
c00130fa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00130fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0013102:	e8 e9 fb ff ff       	call   c0012cf0 <Process::addArgs(char**)>
c0013107:	83 c4 10             	add    esp,0x10
c001310a:	90                   	nop
c001310b:	83 c4 24             	add    esp,0x24
c001310e:	5b                   	pop    ebx
c001310f:	5e                   	pop    esi
c0013110:	c3                   	ret    
c0013111:	8d 76 00             	lea    esi,[esi+0x0]

c0013114 <taskStartupFunction>:
c0013114:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013119:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c001311c:	c3                   	ret    
c001311d:	90                   	nop
c001311e:	66 90                	xchg   ax,ax

c0013120 <Semaphore::Semaphore(int)>:
c0013120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013124:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013128:	89 10                	mov    DWORD PTR [eax],edx
c001312a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001312e:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0013135:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013139:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013140:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013144:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001314b:	90                   	nop
c001314c:	c3                   	ret    
c001314d:	90                   	nop
c001314e:	66 90                	xchg   ax,ax

c0013150 <Mutex::Mutex()>:
c0013150:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013154:	6a 01                	push   0x1
c0013156:	50                   	push   eax
c0013157:	e8 c4 ff ff ff       	call   c0013120 <Semaphore::Semaphore(int)>
c001315c:	83 c4 08             	add    esp,0x8
c001315f:	90                   	nop
c0013160:	c3                   	ret    
c0013161:	90                   	nop
c0013162:	66 90                	xchg   ax,ax

c0013164 <Process::createThread(void (*)(void*), void*, int)>:
c0013164:	57                   	push   edi
c0013165:	31 c9                	xor    ecx,ecx
c0013167:	56                   	push   esi
c0013168:	53                   	push   ebx
c0013169:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001316d:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c0013174:	89 f2                	mov    edx,esi
c0013176:	66 90                	xchg   ax,ax
c0013178:	31 c0                	xor    eax,eax
c001317a:	66 89 d0             	mov    ax,dx
c001317d:	83 e2 01             	and    edx,0x1
c0013180:	74 12                	je     c0013194 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0013182:	d1 f8                	sar    eax,1
c0013184:	41                   	inc    ecx
c0013185:	89 c2                	mov    edx,eax
c0013187:	83 f9 10             	cmp    ecx,0x10
c001318a:	75 ec                	jne    c0013178 <Process::createThread(void (*)(void*), void*, int)+0x14>
c001318c:	31 db                	xor    ebx,ebx
c001318e:	89 d8                	mov    eax,ebx
c0013190:	5b                   	pop    ebx
c0013191:	5e                   	pop    esi
c0013192:	5f                   	pop    edi
c0013193:	c3                   	ret    
c0013194:	b8 01 00 00 00       	mov    eax,0x1
c0013199:	d3 e0                	shl    eax,cl
c001319b:	09 c6                	or     esi,eax
c001319d:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00131a0:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00131a7:	01 c0                	add    eax,eax
c00131a9:	01 c8                	add    eax,ecx
c00131ab:	8d 04 80             	lea    eax,[eax+eax*4]
c00131ae:	01 d8                	add    eax,ebx
c00131b0:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00131b7:	75 0b                	jne    c00131c4 <Process::createThread(void (*)(void*), void*, int)+0x60>
c00131b9:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c00131c3:	90                   	nop
c00131c4:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00131ca:	83 ec 08             	sub    esp,0x8
c00131cd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00131d0:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00131d3:	01 c0                	add    eax,eax
c00131d5:	01 c8                	add    eax,ecx
c00131d7:	8d 3c 80             	lea    edi,[eax+eax*4]
c00131da:	8d 04 3b             	lea    eax,[ebx+edi*1]
c00131dd:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c00131e3:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c00131e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00131ed:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c00131f3:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c00131f9:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013200:	89 ca                	mov    edx,ecx
c0013202:	f7 da                	neg    edx
c0013204:	c1 e2 15             	shl    edx,0x15
c0013207:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001320d:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c0013213:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013217:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013221:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c0013227:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001322b:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013231:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001323b:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c0013245:	53                   	push   ebx
c0013246:	68 a4 37 02 c0       	push   0xc00237a4
c001324b:	e8 dc 90 00 00       	call   c001c32c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013250:	83 c4 10             	add    esp,0x10
c0013253:	89 d8                	mov    eax,ebx
c0013255:	5b                   	pop    ebx
c0013256:	5e                   	pop    esi
c0013257:	5f                   	pop    edi
c0013258:	c3                   	ret    
c0013259:	90                   	nop
c001325a:	66 90                	xchg   ax,ax

c001325c <Process::createUserThread()>:
c001325c:	83 ec 0c             	sub    esp,0xc
c001325f:	68 80 00 00 00       	push   0x80
c0013264:	6a 00                	push   0x0
c0013266:	68 e4 2b 01 c0       	push   0xc0012be4
c001326b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001326f:	50                   	push   eax
c0013270:	e8 ef fe ff ff       	call   c0013164 <Process::createThread(void (*)(void*), void*, int)>
c0013275:	83 c4 1c             	add    esp,0x1c
c0013278:	c3                   	ret    
c0013279:	8d 76 00             	lea    esi,[esi+0x0]

c001327c <setupMultitasking(void (*)())>:
c001327c:	56                   	push   esi
c001327d:	53                   	push   ebx
c001327e:	53                   	push   ebx
c001327f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013283:	eb 13                	jmp    c0013298 <setupMultitasking(void (*)())+0x1c>
c0013285:	8d 76 00             	lea    esi,[esi+0x0]
c0013288:	83 ec 0c             	sub    esp,0xc
c001328b:	68 a4 37 02 c0       	push   0xc00237a4
c0013290:	e8 df 8f 00 00       	call   c001c274 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013295:	83 c4 10             	add    esp,0x10
c0013298:	83 ec 0c             	sub    esp,0xc
c001329b:	68 a4 37 02 c0       	push   0xc00237a4
c00132a0:	e8 ab 8f 00 00       	call   c001c250 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00132a5:	83 c4 10             	add    esp,0x10
c00132a8:	84 c0                	test   al,al
c00132aa:	74 dc                	je     c0013288 <setupMultitasking(void (*)())+0xc>
c00132ac:	83 ec 0c             	sub    esp,0xc
c00132af:	68 20 07 00 00       	push   0x720
c00132b4:	e8 00 45 ff ff       	call   c00077b9 <malloc>
c00132b9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00132c0:	89 c3                	mov    ebx,eax
c00132c2:	6a 00                	push   0x0
c00132c4:	68 88 e5 01 c0       	push   0xc001e588
c00132c9:	6a 01                	push   0x1
c00132cb:	50                   	push   eax
c00132cc:	e8 7b fc ff ff       	call   c0012f4c <Process::Process(bool, char const*, Process*, char**)>
c00132d1:	83 c4 14             	add    esp,0x14
c00132d4:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c00132da:	89 1d b0 37 02 c0    	mov    DWORD PTR ds:0xc00237b0,ebx
c00132e0:	50                   	push   eax
c00132e1:	e8 11 51 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c00132e6:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c00132ee:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c00132f8:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c00132fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013301:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c001330b:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013311:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0013317:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013321:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c001332b:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0013335:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001333b:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013341:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001334b:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013351:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001335b:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0013361:	5a                   	pop    edx
c0013362:	59                   	pop    ecx
c0013363:	68 84 e5 01 c0       	push   0xc001e584
c0013368:	50                   	push   eax
c0013369:	e8 92 d2 fe ff       	call   c0000600 <strcpy>
c001336e:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0013375:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0013379:	83 c4 14             	add    esp,0x14
c001337c:	5b                   	pop    ebx
c001337d:	5e                   	pop    esi
c001337e:	e9 e6 ce fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0013383:	90                   	nop

c0013384 <schedule()>:
c0013384:	8b 15 84 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023784
c001338a:	85 d2                	test   edx,edx
c001338c:	74 0e                	je     c001339c <schedule()+0x18>
c001338e:	c7 05 80 37 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x1
c0013398:	c3                   	ret    
c0013399:	8d 76 00             	lea    esi,[esi+0x0]
c001339c:	53                   	push   ebx
c001339d:	83 ec 14             	sub    esp,0x14
c00133a0:	68 a4 37 02 c0       	push   0xc00237a4
c00133a5:	e8 a6 8e 00 00       	call   c001c250 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00133aa:	83 c4 10             	add    esp,0x10
c00133ad:	84 c0                	test   al,al
c00133af:	75 3b                	jne    c00133ec <schedule()+0x68>
c00133b1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00133b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00133b9:	4a                   	dec    edx
c00133ba:	74 38                	je     c00133f4 <schedule()+0x70>
c00133bc:	83 ec 0c             	sub    esp,0xc
c00133bf:	68 a4 37 02 c0       	push   0xc00237a4
c00133c4:	e8 a3 8e 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00133c9:	c7 04 24 a4 37 02 c0 	mov    DWORD PTR [esp],0xc00237a4
c00133d0:	89 c3                	mov    ebx,eax
c00133d2:	e8 9d 8e 00 00       	call   c001c274 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00133d7:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c00133de:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00133e1:	e8 56 f8 ff ff       	call   c0012c3c <switchToThread(ThreadControlBlock*)>
c00133e6:	83 c4 10             	add    esp,0x10
c00133e9:	8d 76 00             	lea    esi,[esi+0x0]
c00133ec:	83 c4 08             	add    esp,0x8
c00133ef:	5b                   	pop    ebx
c00133f0:	c3                   	ret    
c00133f1:	8d 76 00             	lea    esi,[esi+0x0]
c00133f4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00133fb:	83 ec 08             	sub    esp,0x8
c00133fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013403:	50                   	push   eax
c0013404:	68 a4 37 02 c0       	push   0xc00237a4
c0013409:	e8 1e 8f 00 00       	call   c001c32c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001340e:	83 c4 10             	add    esp,0x10
c0013411:	eb a9                	jmp    c00133bc <schedule()+0x38>
c0013413:	90                   	nop

c0013414 <Semaphore::tryAcquire()>:
c0013414:	53                   	push   ebx
c0013415:	83 ec 08             	sub    esp,0x8
c0013418:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001341c:	fa                   	cli    
c001341d:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013422:	8d 50 01             	lea    edx,[eax+0x1]
c0013425:	89 15 88 37 02 c0    	mov    DWORD PTR ds:0xc0023788,edx
c001342b:	8b 15 84 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023784
c0013431:	8d 5a 01             	lea    ebx,[edx+0x1]
c0013434:	89 1d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,ebx
c001343a:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001343d:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001343f:	7c 33                	jl     c0013474 <Semaphore::tryAcquire()+0x60>
c0013441:	89 15 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,edx
c0013447:	85 d2                	test   edx,edx
c0013449:	75 0d                	jne    c0013458 <Semaphore::tryAcquire()+0x44>
c001344b:	8b 15 80 37 02 c0    	mov    edx,DWORD PTR ds:0xc0023780
c0013451:	85 d2                	test   edx,edx
c0013453:	75 6b                	jne    c00134c0 <Semaphore::tryAcquire()+0xac>
c0013455:	8d 76 00             	lea    esi,[esi+0x0]
c0013458:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c001345d:	85 c0                	test   eax,eax
c001345f:	74 0b                	je     c001346c <Semaphore::tryAcquire()+0x58>
c0013461:	8d 76 00             	lea    esi,[esi+0x0]
c0013464:	31 c0                	xor    eax,eax
c0013466:	83 c4 08             	add    esp,0x8
c0013469:	5b                   	pop    ebx
c001346a:	c3                   	ret    
c001346b:	90                   	nop
c001346c:	fb                   	sti    
c001346d:	83 c4 08             	add    esp,0x8
c0013470:	5b                   	pop    ebx
c0013471:	c3                   	ret    
c0013472:	66 90                	xchg   ax,ax
c0013474:	43                   	inc    ebx
c0013475:	89 15 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,edx
c001347b:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001347e:	85 d2                	test   edx,edx
c0013480:	75 22                	jne    c00134a4 <Semaphore::tryAcquire()+0x90>
c0013482:	8b 0d 80 37 02 c0    	mov    ecx,DWORD PTR ds:0xc0023780
c0013488:	85 c9                	test   ecx,ecx
c001348a:	74 18                	je     c00134a4 <Semaphore::tryAcquire()+0x90>
c001348c:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c0013496:	e8 e9 fe ff ff       	call   c0013384 <schedule()>
c001349b:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00134a0:	48                   	dec    eax
c00134a1:	8d 76 00             	lea    esi,[esi+0x0]
c00134a4:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00134a9:	85 c0                	test   eax,eax
c00134ab:	75 0b                	jne    c00134b8 <Semaphore::tryAcquire()+0xa4>
c00134ad:	fb                   	sti    
c00134ae:	b0 01                	mov    al,0x1
c00134b0:	83 c4 08             	add    esp,0x8
c00134b3:	5b                   	pop    ebx
c00134b4:	c3                   	ret    
c00134b5:	8d 76 00             	lea    esi,[esi+0x0]
c00134b8:	b0 01                	mov    al,0x1
c00134ba:	83 c4 08             	add    esp,0x8
c00134bd:	5b                   	pop    ebx
c00134be:	c3                   	ret    
c00134bf:	90                   	nop
c00134c0:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c00134ca:	e8 b5 fe ff ff       	call   c0013384 <schedule()>
c00134cf:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00134d4:	48                   	dec    eax
c00134d5:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00134da:	85 c0                	test   eax,eax
c00134dc:	75 86                	jne    c0013464 <Semaphore::tryAcquire()+0x50>
c00134de:	eb 8c                	jmp    c001346c <Semaphore::tryAcquire()+0x58>

c00134e0 <Semaphore::assertLocked(char const*)>:
c00134e0:	83 ec 0c             	sub    esp,0xc
c00134e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00134e7:	fa                   	cli    
c00134e8:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c00134ee:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c00134f3:	8d 48 01             	lea    ecx,[eax+0x1]
c00134f6:	89 0d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,ecx
c00134fc:	8b 0a                	mov    ecx,DWORD PTR [edx]
c00134fe:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013501:	7c 29                	jl     c001352c <Semaphore::assertLocked(char const*)+0x4c>
c0013503:	90                   	nop
c0013504:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c0013509:	85 c0                	test   eax,eax
c001350b:	75 0b                	jne    c0013518 <Semaphore::assertLocked(char const*)+0x38>
c001350d:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c0013512:	85 c0                	test   eax,eax
c0013514:	75 2e                	jne    c0013544 <Semaphore::assertLocked(char const*)+0x64>
c0013516:	66 90                	xchg   ax,ax
c0013518:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001351d:	48                   	dec    eax
c001351e:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013523:	75 03                	jne    c0013528 <Semaphore::assertLocked(char const*)+0x48>
c0013525:	fb                   	sti    
c0013526:	66 90                	xchg   ax,ax
c0013528:	83 c4 0c             	add    esp,0xc
c001352b:	c3                   	ret    
c001352c:	83 ec 0c             	sub    esp,0xc
c001352f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013533:	52                   	push   edx
c0013534:	e8 22 cc ff ff       	call   c001015b <KePanic(char const*)>
c0013539:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c001353e:	83 c4 10             	add    esp,0x10
c0013541:	48                   	dec    eax
c0013542:	eb c0                	jmp    c0013504 <Semaphore::assertLocked(char const*)+0x24>
c0013544:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c001354e:	e8 31 fe ff ff       	call   c0013384 <schedule()>
c0013553:	eb c3                	jmp    c0013518 <Semaphore::assertLocked(char const*)+0x38>
c0013555:	8d 76 00             	lea    esi,[esi+0x0]

c0013558 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0013558:	83 ec 0c             	sub    esp,0xc
c001355b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013560:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013564:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013567:	e8 18 fe ff ff       	call   c0013384 <schedule()>
c001356c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013571:	48                   	dec    eax
c0013572:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013577:	75 03                	jne    c001357c <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0013579:	fb                   	sti    
c001357a:	66 90                	xchg   ax,ax
c001357c:	83 c4 0c             	add    esp,0xc
c001357f:	c3                   	ret    

c0013580 <blockTask(TaskState)>:
c0013580:	83 ec 0c             	sub    esp,0xc
c0013583:	fa                   	cli    
c0013584:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c001358a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001358e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013593:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0013596:	e8 e9 fd ff ff       	call   c0013384 <schedule()>
c001359b:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00135a0:	48                   	dec    eax
c00135a1:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00135a6:	75 04                	jne    c00135ac <blockTask(TaskState)+0x2c>
c00135a8:	fb                   	sti    
c00135a9:	8d 76 00             	lea    esi,[esi+0x0]
c00135ac:	83 c4 0c             	add    esp,0xc
c00135af:	c3                   	ret    

c00135b0 <waitTask(int, int*, int)>:
c00135b0:	83 ec 18             	sub    esp,0x18
c00135b3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135b8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00135bc:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c00135bf:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00135c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135c8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c00135cb:	6a 07                	push   0x7
c00135cd:	e8 ae ff ff ff       	call   c0013580 <blockTask(TaskState)>
c00135d2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135d7:	83 c4 10             	add    esp,0x10
c00135da:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c00135dd:	85 d2                	test   edx,edx
c00135df:	74 0b                	je     c00135ec <waitTask(int, int*, int)+0x3c>
c00135e1:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c00135e4:	89 02                	mov    DWORD PTR [edx],eax
c00135e6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135eb:	90                   	nop
c00135ec:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c00135ef:	83 c4 0c             	add    esp,0xc
c00135f2:	c3                   	ret    
c00135f3:	90                   	nop

c00135f4 <milliTenthSleepUntil(unsigned int)>:
c00135f4:	83 ec 0c             	sub    esp,0xc
c00135f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135fb:	39 05 ac 2a 02 c0    	cmp    DWORD PTR ds:0xc0022aac,eax
c0013601:	76 05                	jbe    c0013608 <milliTenthSleepUntil(unsigned int)+0x14>
c0013603:	90                   	nop
c0013604:	83 c4 0c             	add    esp,0xc
c0013607:	c3                   	ret    
c0013608:	fa                   	cli    
c0013609:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c001360f:	83 ec 08             	sub    esp,0x8
c0013612:	ff 05 84 37 02 c0    	inc    DWORD PTR ds:0xc0023784
c0013618:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001361e:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013621:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013627:	52                   	push   edx
c0013628:	68 98 37 02 c0       	push   0xc0023798
c001362d:	e8 fa 8c 00 00       	call   c001c32c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013632:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013639:	e8 42 ff ff ff       	call   c0013580 <blockTask(TaskState)>
c001363e:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013643:	83 c4 10             	add    esp,0x10
c0013646:	48                   	dec    eax
c0013647:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c001364c:	85 c0                	test   eax,eax
c001364e:	75 0c                	jne    c001365c <milliTenthSleepUntil(unsigned int)+0x68>
c0013650:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c0013655:	85 c0                	test   eax,eax
c0013657:	75 17                	jne    c0013670 <milliTenthSleepUntil(unsigned int)+0x7c>
c0013659:	8d 76 00             	lea    esi,[esi+0x0]
c001365c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013661:	48                   	dec    eax
c0013662:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013667:	75 9b                	jne    c0013604 <milliTenthSleepUntil(unsigned int)+0x10>
c0013669:	fb                   	sti    
c001366a:	83 c4 0c             	add    esp,0xc
c001366d:	c3                   	ret    
c001366e:	66 90                	xchg   ax,ax
c0013670:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c001367a:	e8 05 fd ff ff       	call   c0013384 <schedule()>
c001367f:	eb db                	jmp    c001365c <milliTenthSleepUntil(unsigned int)+0x68>
c0013681:	8d 76 00             	lea    esi,[esi+0x0]

c0013684 <milliTenthSleep(unsigned int)>:
c0013684:	a1 ac 2a 02 c0       	mov    eax,ds:0xc0022aac
c0013689:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001368d:	e9 62 ff ff ff       	jmp    c00135f4 <milliTenthSleepUntil(unsigned int)>
c0013692:	66 90                	xchg   ax,ax

c0013694 <sleep(unsigned int)>:
c0013694:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013698:	8d 04 80             	lea    eax,[eax+eax*4]
c001369b:	8d 04 80             	lea    eax,[eax+eax*4]
c001369e:	8d 04 80             	lea    eax,[eax+eax*4]
c00136a1:	8d 04 80             	lea    eax,[eax+eax*4]
c00136a4:	c1 e0 04             	shl    eax,0x4
c00136a7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00136ab:	eb d7                	jmp    c0013684 <milliTenthSleep(unsigned int)>
c00136ad:	90                   	nop
c00136ae:	66 90                	xchg   ax,ax

c00136b0 <Semaphore::acquire()>:
c00136b0:	83 ec 0c             	sub    esp,0xc
c00136b3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136b7:	fa                   	cli    
c00136b8:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c00136bd:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c00136c3:	8d 48 01             	lea    ecx,[eax+0x1]
c00136c6:	89 0d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,ecx
c00136cc:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00136cf:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c00136d1:	7d 2d                	jge    c0013700 <Semaphore::acquire()+0x50>
c00136d3:	41                   	inc    ecx
c00136d4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c00136d7:	90                   	nop
c00136d8:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c00136dd:	85 c0                	test   eax,eax
c00136df:	75 0b                	jne    c00136ec <Semaphore::acquire()+0x3c>
c00136e1:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c00136e6:	85 c0                	test   eax,eax
c00136e8:	75 62                	jne    c001374c <Semaphore::acquire()+0x9c>
c00136ea:	66 90                	xchg   ax,ax
c00136ec:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00136f1:	48                   	dec    eax
c00136f2:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00136f7:	75 03                	jne    c00136fc <Semaphore::acquire()+0x4c>
c00136f9:	fb                   	sti    
c00136fa:	66 90                	xchg   ax,ax
c00136fc:	83 c4 0c             	add    esp,0xc
c00136ff:	c3                   	ret    
c0013700:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013705:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001370c:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001370f:	85 c9                	test   ecx,ecx
c0013711:	74 4d                	je     c0013760 <Semaphore::acquire()+0xb0>
c0013713:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0013716:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001371c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001371f:	90                   	nop
c0013720:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013725:	83 ec 0c             	sub    esp,0xc
c0013728:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001372b:	68 04 e6 01 c0       	push   0xc001e604
c0013730:	e8 ab 6d ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0013735:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c001373c:	e8 3f fe ff ff       	call   c0013580 <blockTask(TaskState)>
c0013741:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013746:	83 c4 10             	add    esp,0x10
c0013749:	48                   	dec    eax
c001374a:	eb 8c                	jmp    c00136d8 <Semaphore::acquire()+0x28>
c001374c:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c0013756:	e8 29 fc ff ff       	call   c0013384 <schedule()>
c001375b:	eb 8f                	jmp    c00136ec <Semaphore::acquire()+0x3c>
c001375d:	8d 76 00             	lea    esi,[esi+0x0]
c0013760:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013765:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013768:	eb b6                	jmp    c0013720 <Semaphore::acquire()+0x70>
c001376a:	66 90                	xchg   ax,ax

c001376c <taskReturned>:
c001376c:	83 ec 18             	sub    esp,0x18
c001376f:	68 24 e6 01 c0       	push   0xc001e624
c0013774:	e8 e2 c9 ff ff       	call   c001015b <KePanic(char const*)>
c0013779:	83 c4 10             	add    esp,0x10
c001377c:	83 ec 0c             	sub    esp,0xc
c001377f:	6a 02                	push   0x2
c0013781:	e8 fa fd ff ff       	call   c0013580 <blockTask(TaskState)>
c0013786:	fa                   	cli    
c0013787:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c001378d:	e8 f2 fb ff ff       	call   c0013384 <schedule()>
c0013792:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013797:	83 c4 10             	add    esp,0x10
c001379a:	48                   	dec    eax
c001379b:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00137a0:	85 c0                	test   eax,eax
c00137a2:	75 d8                	jne    c001377c <taskReturned+0x10>
c00137a4:	fb                   	sti    
c00137a5:	eb d5                	jmp    c001377c <taskReturned+0x10>
c00137a7:	90                   	nop

c00137a8 <Thr::processFromPID(int)>:
c00137a8:	57                   	push   edi
c00137a9:	56                   	push   esi
c00137aa:	53                   	push   ebx
c00137ab:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00137af:	fa                   	cli    
c00137b0:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c00137b6:	83 ec 0c             	sub    esp,0xc
c00137b9:	68 a4 37 02 c0       	push   0xc00237a4
c00137be:	e8 a9 8a 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137c3:	83 c4 10             	add    esp,0x10
c00137c6:	89 c7                	mov    edi,eax
c00137c8:	eb 16                	jmp    c00137e0 <Thr::processFromPID(int)+0x38>
c00137ca:	66 90                	xchg   ax,ax
c00137cc:	83 ec 0c             	sub    esp,0xc
c00137cf:	68 a4 37 02 c0       	push   0xc00237a4
c00137d4:	e8 93 8a 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137d9:	83 c4 10             	add    esp,0x10
c00137dc:	39 f8                	cmp    eax,edi
c00137de:	74 4c                	je     c001382c <Thr::processFromPID(int)+0x84>
c00137e0:	83 ec 0c             	sub    esp,0xc
c00137e3:	68 a4 37 02 c0       	push   0xc00237a4
c00137e8:	e8 7f 8a 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00137ed:	c7 04 24 a4 37 02 c0 	mov    DWORD PTR [esp],0xc00237a4
c00137f4:	89 c3                	mov    ebx,eax
c00137f6:	e8 79 8a 00 00       	call   c001c274 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00137fb:	58                   	pop    eax
c00137fc:	5a                   	pop    edx
c00137fd:	53                   	push   ebx
c00137fe:	68 a4 37 02 c0       	push   0xc00237a4
c0013803:	e8 24 8b 00 00       	call   c001c32c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013808:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001380b:	83 c4 10             	add    esp,0x10
c001380e:	39 30                	cmp    DWORD PTR [eax],esi
c0013810:	75 ba                	jne    c00137cc <Thr::processFromPID(int)+0x24>
c0013812:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013817:	48                   	dec    eax
c0013818:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c001381d:	74 09                	je     c0013828 <Thr::processFromPID(int)+0x80>
c001381f:	90                   	nop
c0013820:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013823:	5b                   	pop    ebx
c0013824:	5e                   	pop    esi
c0013825:	5f                   	pop    edi
c0013826:	c3                   	ret    
c0013827:	90                   	nop
c0013828:	fb                   	sti    
c0013829:	eb f5                	jmp    c0013820 <Thr::processFromPID(int)+0x78>
c001382b:	90                   	nop
c001382c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013831:	48                   	dec    eax
c0013832:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013837:	75 07                	jne    c0013840 <Thr::processFromPID(int)+0x98>
c0013839:	fb                   	sti    
c001383a:	5b                   	pop    ebx
c001383b:	5e                   	pop    esi
c001383c:	5f                   	pop    edi
c001383d:	c3                   	ret    
c001383e:	66 90                	xchg   ax,ax
c0013840:	5b                   	pop    ebx
c0013841:	31 c0                	xor    eax,eax
c0013843:	5e                   	pop    esi
c0013844:	5f                   	pop    edi
c0013845:	c3                   	ret    
c0013846:	66 90                	xchg   ax,ax

c0013848 <unblockTask(ThreadControlBlock*)>:
c0013848:	53                   	push   ebx
c0013849:	83 ec 08             	sub    esp,0x8
c001384c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013850:	fa                   	cli    
c0013851:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013857:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001385a:	85 c0                	test   eax,eax
c001385c:	74 66                	je     c00138c4 <unblockTask(ThreadControlBlock*)+0x7c>
c001385e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013861:	48                   	dec    eax
c0013862:	74 38                	je     c001389c <unblockTask(ThreadControlBlock*)+0x54>
c0013864:	83 ec 0c             	sub    esp,0xc
c0013867:	68 a4 37 02 c0       	push   0xc00237a4
c001386c:	e8 fb 89 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013871:	83 c4 10             	add    esp,0x10
c0013874:	85 c0                	test   eax,eax
c0013876:	75 1c                	jne    c0013894 <unblockTask(ThreadControlBlock*)+0x4c>
c0013878:	eb 5e                	jmp    c00138d8 <unblockTask(ThreadControlBlock*)+0x90>
c001387a:	66 90                	xchg   ax,ax
c001387c:	83 ec 08             	sub    esp,0x8
c001387f:	50                   	push   eax
c0013880:	68 a4 37 02 c0       	push   0xc00237a4
c0013885:	e8 92 8d 00 00       	call   c001c61c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001388a:	83 c4 10             	add    esp,0x10
c001388d:	85 c0                	test   eax,eax
c001388f:	74 47                	je     c00138d8 <unblockTask(ThreadControlBlock*)+0x90>
c0013891:	8d 76 00             	lea    esi,[esi+0x0]
c0013894:	39 c3                	cmp    ebx,eax
c0013896:	75 e4                	jne    c001387c <unblockTask(ThreadControlBlock*)+0x34>
c0013898:	eb 12                	jmp    c00138ac <unblockTask(ThreadControlBlock*)+0x64>
c001389a:	66 90                	xchg   ax,ax
c001389c:	83 ec 0c             	sub    esp,0xc
c001389f:	68 a6 e5 01 c0       	push   0xc001e5a6
c00138a4:	e8 37 6c ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00138a9:	83 c4 10             	add    esp,0x10
c00138ac:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00138b1:	48                   	dec    eax
c00138b2:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00138b7:	75 03                	jne    c00138bc <unblockTask(ThreadControlBlock*)+0x74>
c00138b9:	fb                   	sti    
c00138ba:	66 90                	xchg   ax,ax
c00138bc:	83 c4 08             	add    esp,0x8
c00138bf:	5b                   	pop    ebx
c00138c0:	c3                   	ret    
c00138c1:	8d 76 00             	lea    esi,[esi+0x0]
c00138c4:	83 ec 0c             	sub    esp,0xc
c00138c7:	68 8f e5 01 c0       	push   0xc001e58f
c00138cc:	e8 0f 6c ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00138d1:	83 c4 10             	add    esp,0x10
c00138d4:	eb d6                	jmp    c00138ac <unblockTask(ThreadControlBlock*)+0x64>
c00138d6:	66 90                	xchg   ax,ax
c00138d8:	83 ec 08             	sub    esp,0x8
c00138db:	53                   	push   ebx
c00138dc:	68 a4 37 02 c0       	push   0xc00237a4
c00138e1:	e8 46 8a 00 00       	call   c001c32c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00138e6:	83 c4 10             	add    esp,0x10
c00138e9:	eb c1                	jmp    c00138ac <unblockTask(ThreadControlBlock*)+0x64>
c00138eb:	90                   	nop

c00138ec <cleanupTerminatedTask(ThreadControlBlock*)>:
c00138ec:	55                   	push   ebp
c00138ed:	57                   	push   edi
c00138ee:	56                   	push   esi
c00138ef:	53                   	push   ebx
c00138f0:	83 ec 1c             	sub    esp,0x1c
c00138f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00138f7:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00138fa:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013900:	85 ed                	test   ebp,ebp
c0013902:	7e 24                	jle    c0013928 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013904:	31 f6                	xor    esi,esi
c0013906:	66 90                	xchg   ax,ax
c0013908:	83 ec 0c             	sub    esp,0xc
c001390b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013912:	46                   	inc    esi
c0013913:	57                   	push   edi
c0013914:	e8 b0 3e ff ff       	call   c00077c9 <free>
c0013919:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001391c:	83 c4 10             	add    esp,0x10
c001391f:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013925:	7f e1                	jg     c0013908 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013927:	90                   	nop
c0013928:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013932:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013937:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001393a:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c001393d:	d3 c0                	rol    eax,cl
c001393f:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013946:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013949:	89 f7                	mov    edi,esi
c001394b:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013953:	0f 85 77 01 00 00    	jne    c0013ad0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013959:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001395f:	85 ed                	test   ebp,ebp
c0013961:	74 1d                	je     c0013980 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013963:	83 ec 0c             	sub    esp,0xc
c0013966:	55                   	push   ebp
c0013967:	e8 00 c5 ff ff       	call   c000fe6c <EnvVarContainer::~EnvVarContainer()>
c001396c:	59                   	pop    ecx
c001396d:	5e                   	pop    esi
c001396e:	6a 0c                	push   0xc
c0013970:	55                   	push   ebp
c0013971:	e8 74 6a ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c0013976:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013979:	83 c4 10             	add    esp,0x10
c001397c:	89 f7                	mov    edi,esi
c001397e:	66 90                	xchg   ax,ax
c0013980:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013986:	85 c0                	test   eax,eax
c0013988:	0f 84 b6 00 00 00    	je     c0013a44 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c001398e:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013991:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013995:	31 c9                	xor    ecx,ecx
c0013997:	eb 17                	jmp    c00139b0 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013999:	8d 76 00             	lea    esi,[esi+0x0]
c001399c:	41                   	inc    ecx
c001399d:	83 f9 10             	cmp    ecx,0x10
c00139a0:	0f 84 9e 00 00 00    	je     c0013a44 <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c00139a6:	66 90                	xchg   ax,ax
c00139a8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00139ae:	66 90                	xchg   ax,ax
c00139b0:	31 d2                	xor    edx,edx
c00139b2:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c00139b9:	d3 fa                	sar    edx,cl
c00139bb:	83 e2 01             	and    edx,0x1
c00139be:	74 dc                	je     c001399c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00139c0:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00139c3:	01 d2                	add    edx,edx
c00139c5:	01 ca                	add    edx,ecx
c00139c7:	8d 14 92             	lea    edx,[edx+edx*4]
c00139ca:	01 d0                	add    eax,edx
c00139cc:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00139d2:	83 fd 07             	cmp    ebp,0x7
c00139d5:	75 c5                	jne    c001399c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00139d7:	05 40 02 00 00       	add    eax,0x240
c00139dc:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00139df:	83 fd ff             	cmp    ebp,0xffffffff
c00139e2:	0f 8c f0 00 00 00    	jl     c0013ad8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00139e8:	0f 84 ae 01 00 00    	je     c0013b9c <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c00139ee:	85 ed                	test   ebp,ebp
c00139f0:	0f 84 92 01 00 00    	je     c0013b88 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c00139f6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c00139f8:	75 a2                	jne    c001399c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c00139fa:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013a00:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013a04:	01 d0                	add    eax,edx
c0013a06:	66 90                	xchg   ax,ax
c0013a08:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013a0c:	83 ec 0c             	sub    esp,0xc
c0013a0f:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013a15:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a18:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013a1e:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013a25:	50                   	push   eax
c0013a26:	e8 1d fe ff ff       	call   c0013848 <unblockTask(ThreadControlBlock*)>
c0013a2b:	83 c4 10             	add    esp,0x10
c0013a2e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013a31:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013a35:	89 f7                	mov    edi,esi
c0013a37:	41                   	inc    ecx
c0013a38:	83 f9 10             	cmp    ecx,0x10
c0013a3b:	0f 85 67 ff ff ff    	jne    c00139a8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013a41:	8d 76 00             	lea    esi,[esi+0x0]
c0013a44:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013a4a:	85 c0                	test   eax,eax
c0013a4c:	74 62                	je     c0013ab0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013a4e:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013a54:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013a5a:	74 54                	je     c0013ab0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013a5c:	83 ec 0c             	sub    esp,0xc
c0013a5f:	68 a4 37 02 c0       	push   0xc00237a4
c0013a64:	e8 03 88 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a69:	c7 04 24 a4 37 02 c0 	mov    DWORD PTR [esp],0xc00237a4
c0013a70:	89 c7                	mov    edi,eax
c0013a72:	e8 d9 87 00 00       	call   c001c250 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013a77:	83 c4 10             	add    esp,0x10
c0013a7a:	84 c0                	test   al,al
c0013a7c:	0f 84 ce 00 00 00    	je     c0013b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013a82:	66 90                	xchg   ax,ax
c0013a84:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a87:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013a8d:	85 d2                	test   edx,edx
c0013a8f:	74 0f                	je     c0013aa0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013a91:	83 ec 0c             	sub    esp,0xc
c0013a94:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a96:	52                   	push   edx
c0013a97:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013a9a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a9d:	83 c4 10             	add    esp,0x10
c0013aa0:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013aaa:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013aad:	8d 76 00             	lea    esi,[esi+0x0]
c0013ab0:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013ab6:	85 db                	test   ebx,ebx
c0013ab8:	74 16                	je     c0013ad0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013aba:	83 ec 0c             	sub    esp,0xc
c0013abd:	53                   	push   ebx
c0013abe:	e8 fb 5c ff ff       	call   c00097be <VAS::~VAS()>
c0013ac3:	58                   	pop    eax
c0013ac4:	5a                   	pop    edx
c0013ac5:	6a 14                	push   0x14
c0013ac7:	53                   	push   ebx
c0013ac8:	e8 1d 69 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c0013acd:	83 c4 10             	add    esp,0x10
c0013ad0:	83 c4 1c             	add    esp,0x1c
c0013ad3:	5b                   	pop    ebx
c0013ad4:	5e                   	pop    esi
c0013ad5:	5f                   	pop    edi
c0013ad6:	5d                   	pop    ebp
c0013ad7:	c3                   	ret    
c0013ad8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013adc:	83 ec 0c             	sub    esp,0xc
c0013adf:	68 58 e6 01 c0       	push   0xc001e658
c0013ae4:	e8 72 c6 ff ff       	call   c001015b <KePanic(char const*)>
c0013ae9:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013aec:	83 c4 10             	add    esp,0x10
c0013aef:	89 f7                	mov    edi,esi
c0013af1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013af5:	e9 a2 fe ff ff       	jmp    c001399c <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013afa:	66 90                	xchg   ax,ax
c0013afc:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013b02:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013b08:	75 1e                	jne    c0013b28 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b0a:	83 ec 0c             	sub    esp,0xc
c0013b0d:	68 c0 e6 01 c0       	push   0xc001e6c0
c0013b12:	e8 c9 69 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0013b17:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013b1e:	e8 5d fa ff ff       	call   c0013580 <blockTask(TaskState)>
c0013b23:	83 c4 10             	add    esp,0x10
c0013b26:	66 90                	xchg   ax,ax
c0013b28:	83 ec 08             	sub    esp,0x8
c0013b2b:	56                   	push   esi
c0013b2c:	68 a4 37 02 c0       	push   0xc00237a4
c0013b31:	e8 f6 87 00 00       	call   c001c32c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b36:	c7 04 24 a4 37 02 c0 	mov    DWORD PTR [esp],0xc00237a4
c0013b3d:	e8 2a 87 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b42:	83 c4 10             	add    esp,0x10
c0013b45:	39 f8                	cmp    eax,edi
c0013b47:	0f 84 37 ff ff ff    	je     c0013a84 <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b50:	83 ec 0c             	sub    esp,0xc
c0013b53:	68 a4 37 02 c0       	push   0xc00237a4
c0013b58:	e8 0f 87 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013b5d:	c7 04 24 a4 37 02 c0 	mov    DWORD PTR [esp],0xc00237a4
c0013b64:	89 c6                	mov    esi,eax
c0013b66:	e8 09 87 00 00       	call   c001c274 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013b6b:	83 c4 10             	add    esp,0x10
c0013b6e:	39 f3                	cmp    ebx,esi
c0013b70:	74 b6                	je     c0013b28 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b72:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013b75:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b78:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013b7e:	75 a8                	jne    c0013b28 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013b80:	e9 77 ff ff ff       	jmp    c0013afc <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013b85:	8d 76 00             	lea    esi,[esi+0x0]
c0013b88:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013b8c:	83 ec 0c             	sub    esp,0xc
c0013b8f:	68 8c e6 01 c0       	push   0xc001e68c
c0013b94:	e9 4b ff ff ff       	jmp    c0013ae4 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013b99:	8d 76 00             	lea    esi,[esi+0x0]
c0013b9c:	8b 36                	mov    esi,DWORD PTR [esi]
c0013b9e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ba2:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013ba5:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ba8:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013bae:	01 d7                	add    edi,edx
c0013bb0:	89 f8                	mov    eax,edi
c0013bb2:	e9 51 fe ff ff       	jmp    c0013a08 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013bb7:	90                   	nop

c0013bb8 <cleanerTaskFunction(void*)>:
c0013bb8:	53                   	push   ebx
c0013bb9:	83 ec 08             	sub    esp,0x8
c0013bbc:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013bc1:	48                   	dec    eax
c0013bc2:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013bc7:	75 03                	jne    c0013bcc <cleanerTaskFunction(void*)+0x14>
c0013bc9:	fb                   	sti    
c0013bca:	66 90                	xchg   ax,ax
c0013bcc:	fa                   	cli    
c0013bcd:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013bd2:	80 3d 6c 37 02 c0 00 	cmp    BYTE PTR ds:0xc002376c,0x0
c0013bd9:	8d 50 01             	lea    edx,[eax+0x1]
c0013bdc:	89 15 88 37 02 c0    	mov    DWORD PTR ds:0xc0023788,edx
c0013be2:	0f 84 ac 00 00 00    	je     c0013c94 <cleanerTaskFunction(void*)+0xdc>
c0013be8:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013bed:	85 c0                	test   eax,eax
c0013bef:	75 03                	jne    c0013bf4 <cleanerTaskFunction(void*)+0x3c>
c0013bf1:	fb                   	sti    
c0013bf2:	66 90                	xchg   ax,ax
c0013bf4:	c6 05 6c 37 02 c0 00 	mov    BYTE PTR ds:0xc002376c,0x0
c0013bfb:	fa                   	cli    
c0013bfc:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013c02:	ff 05 84 37 02 c0    	inc    DWORD PTR ds:0xc0023784
c0013c08:	fa                   	cli    
c0013c09:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013c0f:	eb 2b                	jmp    c0013c3c <cleanerTaskFunction(void*)+0x84>
c0013c11:	8d 76 00             	lea    esi,[esi+0x0]
c0013c14:	83 ec 0c             	sub    esp,0xc
c0013c17:	68 8c 37 02 c0       	push   0xc002378c
c0013c1c:	e8 4b 86 00 00       	call   c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013c21:	c7 04 24 8c 37 02 c0 	mov    DWORD PTR [esp],0xc002378c
c0013c28:	89 c3                	mov    ebx,eax
c0013c2a:	e8 45 86 00 00       	call   c001c274 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013c2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c32:	e8 b5 fc ff ff       	call   c00138ec <cleanupTerminatedTask(ThreadControlBlock*)>
c0013c37:	83 c4 10             	add    esp,0x10
c0013c3a:	66 90                	xchg   ax,ax
c0013c3c:	83 ec 0c             	sub    esp,0xc
c0013c3f:	68 8c 37 02 c0       	push   0xc002378c
c0013c44:	e8 07 86 00 00       	call   c001c250 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013c49:	83 c4 10             	add    esp,0x10
c0013c4c:	84 c0                	test   al,al
c0013c4e:	74 c4                	je     c0013c14 <cleanerTaskFunction(void*)+0x5c>
c0013c50:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013c55:	48                   	dec    eax
c0013c56:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013c5b:	75 03                	jne    c0013c60 <cleanerTaskFunction(void*)+0xa8>
c0013c5d:	fb                   	sti    
c0013c5e:	66 90                	xchg   ax,ax
c0013c60:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013c65:	48                   	dec    eax
c0013c66:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c0013c6b:	0f 85 4b ff ff ff    	jne    c0013bbc <cleanerTaskFunction(void*)+0x4>
c0013c71:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c0013c76:	85 c0                	test   eax,eax
c0013c78:	0f 84 3e ff ff ff    	je     c0013bbc <cleanerTaskFunction(void*)+0x4>
c0013c7e:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c0013c88:	e8 f7 f6 ff ff       	call   c0013384 <schedule()>
c0013c8d:	e9 2a ff ff ff       	jmp    c0013bbc <cleanerTaskFunction(void*)+0x4>
c0013c92:	66 90                	xchg   ax,ax
c0013c94:	83 ec 0c             	sub    esp,0xc
c0013c97:	6a 02                	push   0x2
c0013c99:	e8 ba f8 ff ff       	call   c0013558 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013c9e:	83 c4 10             	add    esp,0x10
c0013ca1:	e9 4e ff ff ff       	jmp    c0013bf4 <cleanerTaskFunction(void*)+0x3c>
c0013ca6:	66 90                	xchg   ax,ax

c0013ca8 <terminateTask(int)>:
c0013ca8:	83 ec 14             	sub    esp,0x14
c0013cab:	fa                   	cli    
c0013cac:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013cb2:	ff 05 84 37 02 c0    	inc    DWORD PTR ds:0xc0023784
c0013cb8:	fa                   	cli    
c0013cb9:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013cbf:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013cc3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cc8:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013ccb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013cd0:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013cd3:	50                   	push   eax
c0013cd4:	68 8c 37 02 c0       	push   0xc002378c
c0013cd9:	e8 4e 86 00 00       	call   c001c32c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013cde:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013ce3:	83 c4 10             	add    esp,0x10
c0013ce6:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013ced:	a1 68 37 02 c0       	mov    eax,ds:0xc0023768
c0013cf2:	85 c0                	test   eax,eax
c0013cf4:	74 5e                	je     c0013d54 <terminateTask(int)+0xac>
c0013cf6:	83 ec 0c             	sub    esp,0xc
c0013cf9:	c6 05 6c 37 02 c0 01 	mov    BYTE PTR ds:0xc002376c,0x1
c0013d00:	50                   	push   eax
c0013d01:	e8 42 fb ff ff       	call   c0013848 <unblockTask(ThreadControlBlock*)>
c0013d06:	83 c4 10             	add    esp,0x10
c0013d09:	8d 76 00             	lea    esi,[esi+0x0]
c0013d0c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013d11:	48                   	dec    eax
c0013d12:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013d17:	75 03                	jne    c0013d1c <terminateTask(int)+0x74>
c0013d19:	fb                   	sti    
c0013d1a:	66 90                	xchg   ax,ax
c0013d1c:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013d21:	48                   	dec    eax
c0013d22:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c0013d27:	75 0b                	jne    c0013d34 <terminateTask(int)+0x8c>
c0013d29:	83 3d 80 37 02 c0 00 	cmp    DWORD PTR ds:0xc0023780,0x0
c0013d30:	75 36                	jne    c0013d68 <terminateTask(int)+0xc0>
c0013d32:	66 90                	xchg   ax,ax
c0013d34:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013d39:	48                   	dec    eax
c0013d3a:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013d3f:	75 03                	jne    c0013d44 <terminateTask(int)+0x9c>
c0013d41:	fb                   	sti    
c0013d42:	66 90                	xchg   ax,ax
c0013d44:	fa                   	cli    
c0013d45:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013d4b:	90                   	nop
c0013d4c:	e8 33 f6 ff ff       	call   c0013384 <schedule()>
c0013d51:	eb e1                	jmp    c0013d34 <terminateTask(int)+0x8c>
c0013d53:	90                   	nop
c0013d54:	83 ec 0c             	sub    esp,0xc
c0013d57:	68 bd e5 01 c0       	push   0xc001e5bd
c0013d5c:	e8 7f 67 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0013d61:	83 c4 10             	add    esp,0x10
c0013d64:	eb a6                	jmp    c0013d0c <terminateTask(int)+0x64>
c0013d66:	66 90                	xchg   ax,ax
c0013d68:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c0013d72:	eb d8                	jmp    c0013d4c <terminateTask(int)+0xa4>

c0013d74 <Thr::terminateFromIRQ(int)>:
c0013d74:	83 ec 18             	sub    esp,0x18
c0013d77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013d7b:	50                   	push   eax
c0013d7c:	e8 27 ff ff ff       	call   c0013ca8 <terminateTask(int)>
c0013d81:	90                   	nop
c0013d82:	66 90                	xchg   ax,ax

c0013d84 <Semaphore::release()>:
c0013d84:	83 ec 0c             	sub    esp,0xc
c0013d87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013d8b:	fa                   	cli    
c0013d8c:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013d91:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013d97:	8d 48 01             	lea    ecx,[eax+0x1]
c0013d9a:	89 0d 84 37 02 c0    	mov    DWORD PTR ds:0xc0023784,ecx
c0013da0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013da3:	85 c9                	test   ecx,ecx
c0013da5:	74 41                	je     c0013de8 <Semaphore::release()+0x64>
c0013da7:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013daa:	83 ec 0c             	sub    esp,0xc
c0013dad:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013db0:	51                   	push   ecx
c0013db1:	e8 92 fa ff ff       	call   c0013848 <unblockTask(ThreadControlBlock*)>
c0013db6:	a1 84 37 02 c0       	mov    eax,ds:0xc0023784
c0013dbb:	83 c4 10             	add    esp,0x10
c0013dbe:	48                   	dec    eax
c0013dbf:	90                   	nop
c0013dc0:	a3 84 37 02 c0       	mov    ds:0xc0023784,eax
c0013dc5:	85 c0                	test   eax,eax
c0013dc7:	75 0b                	jne    c0013dd4 <Semaphore::release()+0x50>
c0013dc9:	a1 80 37 02 c0       	mov    eax,ds:0xc0023780
c0013dce:	85 c0                	test   eax,eax
c0013dd0:	75 1e                	jne    c0013df0 <Semaphore::release()+0x6c>
c0013dd2:	66 90                	xchg   ax,ax
c0013dd4:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013dd9:	48                   	dec    eax
c0013dda:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013ddf:	75 03                	jne    c0013de4 <Semaphore::release()+0x60>
c0013de1:	fb                   	sti    
c0013de2:	66 90                	xchg   ax,ax
c0013de4:	83 c4 0c             	add    esp,0xc
c0013de7:	c3                   	ret    
c0013de8:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0013deb:	eb d3                	jmp    c0013dc0 <Semaphore::release()+0x3c>
c0013ded:	8d 76 00             	lea    esi,[esi+0x0]
c0013df0:	c7 05 80 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023780,0x0
c0013dfa:	e8 85 f5 ff ff       	call   c0013384 <schedule()>
c0013dff:	eb d3                	jmp    c0013dd4 <Semaphore::release()+0x50>
c0013e01:	8d 76 00             	lea    esi,[esi+0x0]

c0013e04 <__static_initialization_and_destruction_0(int, int)>:
c0013e04:	83 ec 0c             	sub    esp,0xc
c0013e07:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0013e0c:	0f 85 8e 00 00 00    	jne    c0013ea0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013e12:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0013e1a:	0f 85 80 00 00 00    	jne    c0013ea0 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0013e20:	83 ec 0c             	sub    esp,0xc
c0013e23:	68 a4 37 02 c0       	push   0xc00237a4
c0013e28:	e8 ab 87 00 00       	call   c001c5d8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e2d:	83 c4 10             	add    esp,0x10
c0013e30:	83 ec 04             	sub    esp,0x4
c0013e33:	68 70 f1 01 c0       	push   0xc001f170
c0013e38:	68 a4 37 02 c0       	push   0xc00237a4
c0013e3d:	68 88 c5 01 c0       	push   0xc001c588
c0013e42:	e8 53 65 ff ff       	call   c000a39a <__cxa_atexit>
c0013e47:	83 c4 10             	add    esp,0x10
c0013e4a:	83 ec 0c             	sub    esp,0xc
c0013e4d:	68 98 37 02 c0       	push   0xc0023798
c0013e52:	e8 81 87 00 00       	call   c001c5d8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e57:	83 c4 10             	add    esp,0x10
c0013e5a:	83 ec 04             	sub    esp,0x4
c0013e5d:	68 70 f1 01 c0       	push   0xc001f170
c0013e62:	68 98 37 02 c0       	push   0xc0023798
c0013e67:	68 88 c5 01 c0       	push   0xc001c588
c0013e6c:	e8 29 65 ff ff       	call   c000a39a <__cxa_atexit>
c0013e71:	83 c4 10             	add    esp,0x10
c0013e74:	83 ec 0c             	sub    esp,0xc
c0013e77:	68 8c 37 02 c0       	push   0xc002378c
c0013e7c:	e8 57 87 00 00       	call   c001c5d8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0013e81:	83 c4 10             	add    esp,0x10
c0013e84:	83 ec 04             	sub    esp,0x4
c0013e87:	68 70 f1 01 c0       	push   0xc001f170
c0013e8c:	68 8c 37 02 c0       	push   0xc002378c
c0013e91:	68 88 c5 01 c0       	push   0xc001c588
c0013e96:	e8 ff 64 ff ff       	call   c000a39a <__cxa_atexit>
c0013e9b:	83 c4 10             	add    esp,0x10
c0013e9e:	66 90                	xchg   ax,ax
c0013ea0:	90                   	nop
c0013ea1:	83 c4 0c             	add    esp,0xc
c0013ea4:	c3                   	ret    
c0013ea5:	8d 76 00             	lea    esi,[esi+0x0]

c0013ea8 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0013ea8:	83 ec 0c             	sub    esp,0xc
c0013eab:	83 ec 08             	sub    esp,0x8
c0013eae:	68 ff ff 00 00       	push   0xffff
c0013eb3:	6a 01                	push   0x1
c0013eb5:	e8 4a ff ff ff       	call   c0013e04 <__static_initialization_and_destruction_0(int, int)>
c0013eba:	83 c4 10             	add    esp,0x10
c0013ebd:	83 c4 0c             	add    esp,0xc
c0013ec0:	c3                   	ret    

c0013ec1 <Vm::inbv(unsigned short)>:
c0013ec1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013ec5:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013eca:	75 06                	jne    c0013ed2 <Vm::inbv(unsigned short)+0x11>
c0013ecc:	a0 ec 37 02 c0       	mov    al,ds:0xc00237ec
c0013ed1:	c3                   	ret    
c0013ed2:	ec                   	in     al,dx
c0013ed3:	c3                   	ret    

c0013ed4 <Vm::outbv(unsigned short, unsigned char)>:
c0013ed4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013ed8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0013edc:	66 81 fa fe fe       	cmp    dx,0xfefe
c0013ee1:	75 25                	jne    c0013f08 <Vm::outbv(unsigned short, unsigned char)+0x34>
c0013ee3:	8b 0d ec 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237ec
c0013ee9:	8d 51 01             	lea    edx,[ecx+0x1]
c0013eec:	88 81 00 38 02 c0    	mov    BYTE PTR [ecx-0x3ffdc800],al
c0013ef2:	89 15 ec 37 02 c0    	mov    DWORD PTR ds:0xc00237ec,edx
c0013ef8:	83 fa 20             	cmp    edx,0x20
c0013efb:	75 0c                	jne    c0013f09 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0013efd:	c7 05 ec 37 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00237ec,0x1f
c0013f07:	c3                   	ret    
c0013f08:	ee                   	out    dx,al
c0013f09:	c3                   	ret    

c0013f0a <Vm::realToLinear(unsigned short, unsigned short)>:
c0013f0a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0013f0f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0013f14:	c1 e0 04             	shl    eax,0x4
c0013f17:	01 d0                	add    eax,edx
c0013f19:	c3                   	ret    

c0013f1a <Vm::getSegment(unsigned int)>:
c0013f1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f1e:	c1 e8 10             	shr    eax,0x10
c0013f21:	c3                   	ret    

c0013f22 <Vm::getOffset(unsigned int)>:
c0013f22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f26:	c3                   	ret    

c0013f27 <Vm::mainloop2()>:
c0013f27:	83 ec 18             	sub    esp,0x18
c0013f2a:	fa                   	cli    
c0013f2b:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013f31:	6a 02                	push   0x2
c0013f33:	c6 05 e5 37 02 c0 01 	mov    BYTE PTR ds:0xc00237e5,0x1
c0013f3a:	e8 19 f6 ff ff       	call   c0013558 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013f3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f44:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0013f48:	52                   	push   edx
c0013f49:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0013f4d:	52                   	push   edx
c0013f4e:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c0013f52:	52                   	push   edx
c0013f53:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c0013f57:	50                   	push   eax
c0013f58:	e8 b2 c2 fe ff       	call   c000020f <goToVM86>
c0013f5d:	83 c4 2c             	add    esp,0x2c
c0013f60:	c3                   	ret    

c0013f61 <Vm::mainVm8086Loop(void*)>:
c0013f61:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013f66:	48                   	dec    eax
c0013f67:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013f6c:	75 01                	jne    c0013f6f <Vm::mainVm8086Loop(void*)+0xe>
c0013f6e:	fb                   	sti    
c0013f6f:	eb b6                	jmp    c0013f27 <Vm::mainloop2()>

c0013f71 <Vm::mainloop3(unsigned long)>:
c0013f71:	83 ec 18             	sub    esp,0x18
c0013f74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f78:	fa                   	cli    
c0013f79:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013f7f:	6a 02                	push   0x2
c0013f81:	c6 05 e4 37 02 c0 01 	mov    BYTE PTR ds:0xc00237e4,0x1
c0013f88:	a3 e0 37 02 c0       	mov    ds:0xc00237e0,eax
c0013f8d:	e8 c6 f5 ff ff       	call   c0013558 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013f92:	83 c4 1c             	add    esp,0x1c
c0013f95:	eb 90                	jmp    c0013f27 <Vm::mainloop2()>

c0013f97 <Vm::initialise8086()>:
c0013f97:	83 ec 0c             	sub    esp,0xc
c0013f9a:	68 80 00 00 00       	push   0x80
c0013f9f:	6a 00                	push   0x0
c0013fa1:	68 61 3f 01 c0       	push   0xc0013f61
c0013fa6:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c0013fac:	e8 b3 f1 ff ff       	call   c0013164 <Process::createThread(void (*)(void*), void*, int)>
c0013fb1:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0013fb8:	a3 e8 37 02 c0       	mov    ds:0xc00237e8,eax
c0013fbd:	68 00 01 00 00       	push   0x100
c0013fc2:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0013fc7:	6a 00                	push   0x0
c0013fc9:	6a 00                	push   0x0
c0013fcb:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0013fd1:	e8 46 5c ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0013fd6:	83 c4 2c             	add    esp,0x2c
c0013fd9:	c3                   	ret    

c0013fda <Vm::finish8086()>:
c0013fda:	53                   	push   ebx
c0013fdb:	83 ec 08             	sub    esp,0x8
c0013fde:	fa                   	cli    
c0013fdf:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0013fe5:	80 3d e4 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237e4,0x0
c0013fec:	75 15                	jne    c0014003 <Vm::finish8086()+0x29>
c0013fee:	e8 91 f3 ff ff       	call   c0013384 <schedule()>
c0013ff3:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0013ff8:	48                   	dec    eax
c0013ff9:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0013ffe:	75 de                	jne    c0013fde <Vm::finish8086()+0x4>
c0014000:	fb                   	sti    
c0014001:	eb db                	jmp    c0013fde <Vm::finish8086()+0x4>
c0014003:	83 ec 0c             	sub    esp,0xc
c0014006:	8b 1d e0 37 02 c0    	mov    ebx,DWORD PTR ds:0xc00237e0
c001400c:	ff 35 e8 37 02 c0    	push   DWORD PTR ds:0xc00237e8
c0014012:	c6 05 e4 37 02 c0 00 	mov    BYTE PTR ds:0xc00237e4,0x0
c0014019:	e8 2a f8 ff ff       	call   c0013848 <unblockTask(ThreadControlBlock*)>
c001401e:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0014023:	83 c4 10             	add    esp,0x10
c0014026:	8d 50 ff             	lea    edx,[eax-0x1]
c0014029:	89 15 88 37 02 c0    	mov    DWORD PTR ds:0xc0023788,edx
c001402f:	85 d2                	test   edx,edx
c0014031:	75 01                	jne    c0014034 <Vm::finish8086()+0x5a>
c0014033:	fb                   	sti    
c0014034:	89 d8                	mov    eax,ebx
c0014036:	83 c4 08             	add    esp,0x8
c0014039:	5b                   	pop    ebx
c001403a:	c3                   	ret    

c001403b <Vm::getOutput8086(unsigned char*)>:
c001403b:	57                   	push   edi
c001403c:	8b 0d ec 37 02 c0    	mov    ecx,DWORD PTR ds:0xc00237ec
c0014042:	56                   	push   esi
c0014043:	be 00 38 02 c0       	mov    esi,0xc0023800
c0014048:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001404c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001404e:	a1 ec 37 02 c0       	mov    eax,ds:0xc00237ec
c0014053:	5e                   	pop    esi
c0014054:	c7 05 ec 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ec,0x0
c001405e:	5f                   	pop    edi
c001405f:	c3                   	ret    

c0014060 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014060:	55                   	push   ebp
c0014061:	57                   	push   edi
c0014062:	56                   	push   esi
c0014063:	53                   	push   ebx
c0014064:	83 ec 0c             	sub    esp,0xc
c0014067:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001406b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001406f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0014073:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0014077:	fa                   	cli    
c0014078:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c001407e:	80 3d e5 37 02 c0 00 	cmp    BYTE PTR ds:0xc00237e5,0x0
c0014085:	75 15                	jne    c001409c <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c0014087:	e8 f8 f2 ff ff       	call   c0013384 <schedule()>
c001408c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0014091:	48                   	dec    eax
c0014092:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0014097:	75 de                	jne    c0014077 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014099:	fb                   	sti    
c001409a:	eb db                	jmp    c0014077 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001409c:	a1 e8 37 02 c0       	mov    eax,ds:0xc00237e8
c00140a1:	c7 05 ec 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ec,0x0
c00140ab:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00140af:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00140b3:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00140b7:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00140bb:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00140bf:	0f b7 ff             	movzx  edi,di
c00140c2:	0f b7 f6             	movzx  esi,si
c00140c5:	50                   	push   eax
c00140c6:	6a 20                	push   0x20
c00140c8:	6a 00                	push   0x0
c00140ca:	68 00 38 02 c0       	push   0xc0023800
c00140cf:	e8 fc c3 fe ff       	call   c00004d0 <memset>
c00140d4:	5a                   	pop    edx
c00140d5:	59                   	pop    ecx
c00140d6:	57                   	push   edi
c00140d7:	56                   	push   esi
c00140d8:	e8 2d fe ff ff       	call   c0013f0a <Vm::realToLinear(unsigned short, unsigned short)>
c00140dd:	83 c4 10             	add    esp,0x10
c00140e0:	89 c7                	mov    edi,eax
c00140e2:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00140e6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00140ea:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00140ec:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c00140f1:	c6 05 e5 37 02 c0 00 	mov    BYTE PTR ds:0xc00237e5,0x0
c00140f8:	48                   	dec    eax
c00140f9:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c00140fe:	75 01                	jne    c0014101 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014100:	fb                   	sti    
c0014101:	83 ec 0c             	sub    esp,0xc
c0014104:	ff 35 e8 37 02 c0    	push   DWORD PTR ds:0xc00237e8
c001410a:	e8 39 f7 ff ff       	call   c0013848 <unblockTask(ThreadControlBlock*)>
c001410f:	83 c4 1c             	add    esp,0x1c
c0014112:	b0 01                	mov    al,0x1
c0014114:	5b                   	pop    ebx
c0014115:	5e                   	pop    esi
c0014116:	5f                   	pop    edi
c0014117:	5d                   	pop    ebp
c0014118:	c3                   	ret    

c0014119 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014119:	55                   	push   ebp
c001411a:	57                   	push   edi
c001411b:	56                   	push   esi
c001411c:	53                   	push   ebx
c001411d:	83 ec 2c             	sub    esp,0x2c
c0014120:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0014124:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014128:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001412c:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014130:	fa                   	cli    
c0014131:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c0014137:	0f b6 35 e5 37 02 c0 	movzx  esi,BYTE PTR ds:0xc00237e5
c001413e:	89 f0                	mov    eax,esi
c0014140:	84 c0                	test   al,al
c0014142:	75 1d                	jne    c0014161 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c0014144:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014148:	e8 37 f2 ff ff       	call   c0013384 <schedule()>
c001414d:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0014152:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014156:	48                   	dec    eax
c0014157:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c001415c:	75 d2                	jne    c0014130 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001415e:	fb                   	sti    
c001415f:	eb cf                	jmp    c0014130 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c0014161:	a1 e8 37 02 c0       	mov    eax,ds:0xc00237e8
c0014166:	c7 05 ec 37 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00237ec,0x0
c0014170:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c0014174:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014178:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c001417c:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c0014180:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014184:	50                   	push   eax
c0014185:	6a 20                	push   0x20
c0014187:	6a 00                	push   0x0
c0014189:	68 00 38 02 c0       	push   0xc0023800
c001418e:	e8 3d c3 fe ff       	call   c00004d0 <memset>
c0014193:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001419a:	e8 1a 36 ff ff       	call   c00077b9 <malloc>
c001419f:	83 c4 0c             	add    esp,0xc
c00141a2:	89 c3                	mov    ebx,eax
c00141a4:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c00141aa:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00141ae:	50                   	push   eax
c00141af:	e8 a2 68 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c00141b4:	83 c4 10             	add    esp,0x10
c00141b7:	85 db                	test   ebx,ebx
c00141b9:	75 0a                	jne    c00141c5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c00141bb:	83 ec 0c             	sub    esp,0xc
c00141be:	68 e8 e6 01 c0       	push   0xc001e6e8
c00141c3:	eb 3e                	jmp    c0014203 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00141c5:	50                   	push   eax
c00141c6:	8d 44 24 17          	lea    eax,[esp+0x17]
c00141ca:	50                   	push   eax
c00141cb:	8d 44 24 20          	lea    eax,[esp+0x20]
c00141cf:	50                   	push   eax
c00141d0:	53                   	push   ebx
c00141d1:	e8 ec 6b ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c00141d6:	83 c4 10             	add    esp,0x10
c00141d9:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c00141de:	74 0a                	je     c00141ea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c00141e0:	83 ec 0c             	sub    esp,0xc
c00141e3:	68 fc e6 01 c0       	push   0xc001e6fc
c00141e8:	eb 19                	jmp    c0014203 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c00141ea:	51                   	push   ecx
c00141eb:	51                   	push   ecx
c00141ec:	6a 01                	push   0x1
c00141ee:	53                   	push   ebx
c00141ef:	e8 22 69 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c00141f4:	83 c4 10             	add    esp,0x10
c00141f7:	85 c0                	test   eax,eax
c00141f9:	74 24                	je     c001421f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c00141fb:	83 ec 0c             	sub    esp,0xc
c00141fe:	68 15 e7 01 c0       	push   0xc001e715
c0014203:	e8 53 bf ff ff       	call   c001015b <KePanic(char const*)>
c0014208:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001420d:	83 c4 10             	add    esp,0x10
c0014210:	48                   	dec    eax
c0014211:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0014216:	85 c0                	test   eax,eax
c0014218:	75 01                	jne    c001421b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001421a:	fb                   	sti    
c001421b:	31 f6                	xor    esi,esi
c001421d:	eb 58                	jmp    c0014277 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001421f:	0f b7 ed             	movzx  ebp,bp
c0014222:	50                   	push   eax
c0014223:	0f b7 ff             	movzx  edi,di
c0014226:	50                   	push   eax
c0014227:	55                   	push   ebp
c0014228:	57                   	push   edi
c0014229:	e8 dc fc ff ff       	call   c0013f0a <Vm::realToLinear(unsigned short, unsigned short)>
c001422e:	5a                   	pop    edx
c001422f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014231:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0014235:	51                   	push   ecx
c0014236:	50                   	push   eax
c0014237:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001423b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001423f:	53                   	push   ebx
c0014240:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0014243:	83 c4 14             	add    esp,0x14
c0014246:	53                   	push   ebx
c0014247:	e8 28 69 ff ff       	call   c000ab74 <File::close()>
c001424c:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0014251:	83 c4 10             	add    esp,0x10
c0014254:	48                   	dec    eax
c0014255:	c6 05 e5 37 02 c0 00 	mov    BYTE PTR ds:0xc00237e5,0x0
c001425c:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0014261:	85 c0                	test   eax,eax
c0014263:	75 01                	jne    c0014266 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c0014265:	fb                   	sti    
c0014266:	83 ec 0c             	sub    esp,0xc
c0014269:	ff 35 e8 37 02 c0    	push   DWORD PTR ds:0xc00237e8
c001426f:	e8 d4 f5 ff ff       	call   c0013848 <unblockTask(ThreadControlBlock*)>
c0014274:	83 c4 10             	add    esp,0x10
c0014277:	83 c4 2c             	add    esp,0x2c
c001427a:	89 f0                	mov    eax,esi
c001427c:	5b                   	pop    ebx
c001427d:	5e                   	pop    esi
c001427e:	5f                   	pop    edi
c001427f:	5d                   	pop    ebp
c0014280:	c3                   	ret    

c0014281 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0014281:	57                   	push   edi
c0014282:	56                   	push   esi
c0014283:	53                   	push   ebx
c0014284:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014288:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001428c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014290:	83 e8 06             	sub    eax,0x6
c0014293:	0f b7 c0             	movzx  eax,ax
c0014296:	50                   	push   eax
c0014297:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001429c:	50                   	push   eax
c001429d:	e8 68 fc ff ff       	call   c0013f0a <Vm::realToLinear(unsigned short, unsigned short)>
c00142a2:	5a                   	pop    edx
c00142a3:	5e                   	pop    esi
c00142a4:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00142a7:	8d 56 fa             	lea    edx,[esi-0x6]
c00142aa:	81 e2 ff ff 00 00    	and    edx,0xffff
c00142b0:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00142b3:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00142b6:	83 c2 02             	add    edx,0x2
c00142b9:	66 89 10             	mov    WORD PTR [eax],dx
c00142bc:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c00142bf:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c00142c3:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c00142c6:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c00142ca:	89 d6                	mov    esi,edx
c00142cc:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00142d2:	66 81 e6 ff fd       	and    si,0xfdff
c00142d7:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c00142db:	74 07                	je     c00142e4 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c00142dd:	89 d6                	mov    esi,edx
c00142df:	66 81 ce 00 02       	or     si,0x200
c00142e4:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c00142e8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142ed:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00142f1:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c00142f9:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c00142fc:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c0014304:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c0014307:	5b                   	pop    ebx
c0014308:	5e                   	pop    esi
c0014309:	5f                   	pop    edi
c001430a:	c3                   	ret    

c001430b <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001430b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014310:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014315:	c1 e0 04             	shl    eax,0x4
c0014318:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001431b:	c3                   	ret    

c001431c <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001431c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014321:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014326:	c1 e0 04             	shl    eax,0x4
c0014329:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001432d:	c3                   	ret    

c001432e <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001432e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014333:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014338:	c1 e0 04             	shl    eax,0x4
c001433b:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001433e:	c3                   	ret    

c001433f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001433f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014344:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014349:	c1 e0 04             	shl    eax,0x4
c001434c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014350:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0014353:	c3                   	ret    

c0014354 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0014354:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014359:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001435e:	c1 e0 04             	shl    eax,0x4
c0014361:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014365:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0014369:	c3                   	ret    

c001436a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001436a:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001436f:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014374:	c1 e0 04             	shl    eax,0x4
c0014377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001437b:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001437e:	c3                   	ret    

c001437f <Vm::faultHandler(regs*)>:
c001437f:	55                   	push   ebp
c0014380:	57                   	push   edi
c0014381:	56                   	push   esi
c0014382:	53                   	push   ebx
c0014383:	83 ec 1c             	sub    esp,0x1c
c0014386:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001438a:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001438d:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0014391:	0f b7 f8             	movzx  edi,ax
c0014394:	52                   	push   edx
c0014395:	0f b7 c0             	movzx  eax,ax
c0014398:	50                   	push   eax
c0014399:	e8 6c fb ff ff       	call   c0013f0a <Vm::realToLinear(unsigned short, unsigned short)>
c001439e:	5a                   	pop    edx
c001439f:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00143a2:	59                   	pop    ecx
c00143a3:	89 c1                	mov    ecx,eax
c00143a5:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00143a8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143ac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00143b1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00143b5:	0f b7 c5             	movzx  eax,bp
c00143b8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00143bc:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00143c0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00143c4:	e8 41 fb ff ff       	call   c0013f0a <Vm::realToLinear(unsigned short, unsigned short)>
c00143c9:	5e                   	pop    esi
c00143ca:	be 06 00 00 00       	mov    esi,0x6
c00143cf:	5a                   	pop    edx
c00143d0:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c00143d5:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c00143da:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c00143dd:	80 fa 9d             	cmp    dl,0x9d
c00143e0:	0f 84 2c 02 00 00    	je     c0014612 <Vm::faultHandler(regs*)+0x293>
c00143e6:	0f 87 91 00 00 00    	ja     c001447d <Vm::faultHandler(regs*)+0xfe>
c00143ec:	80 fa 66             	cmp    dl,0x66
c00143ef:	0f 84 98 01 00 00    	je     c001458d <Vm::faultHandler(regs*)+0x20e>
c00143f5:	77 47                	ja     c001443e <Vm::faultHandler(regs*)+0xbf>
c00143f7:	80 fa 36             	cmp    dl,0x36
c00143fa:	0f 84 80 01 00 00    	je     c0014580 <Vm::faultHandler(regs*)+0x201>
c0014400:	77 1a                	ja     c001441c <Vm::faultHandler(regs*)+0x9d>
c0014402:	80 fa 26             	cmp    dl,0x26
c0014405:	0f 84 4e 01 00 00    	je     c0014559 <Vm::faultHandler(regs*)+0x1da>
c001440b:	80 fa 2e             	cmp    dl,0x2e
c001440e:	0f 85 e2 05 00 00    	jne    c00149f6 <Vm::faultHandler(regs*)+0x677>
c0014414:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014417:	31 f6                	xor    esi,esi
c0014419:	41                   	inc    ecx
c001441a:	eb be                	jmp    c00143da <Vm::faultHandler(regs*)+0x5b>
c001441c:	80 fa 64             	cmp    dl,0x64
c001441f:	0f 84 41 01 00 00    	je     c0014566 <Vm::faultHandler(regs*)+0x1e7>
c0014425:	0f 87 48 01 00 00    	ja     c0014573 <Vm::faultHandler(regs*)+0x1f4>
c001442b:	80 fa 3e             	cmp    dl,0x3e
c001442e:	0f 85 c2 05 00 00    	jne    c00149f6 <Vm::faultHandler(regs*)+0x677>
c0014434:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014437:	be 01 00 00 00       	mov    esi,0x1
c001443c:	eb db                	jmp    c0014419 <Vm::faultHandler(regs*)+0x9a>
c001443e:	80 fa 6d             	cmp    dl,0x6d
c0014441:	0f 84 ec 02 00 00    	je     c0014733 <Vm::faultHandler(regs*)+0x3b4>
c0014447:	77 17                	ja     c0014460 <Vm::faultHandler(regs*)+0xe1>
c0014449:	80 fa 67             	cmp    dl,0x67
c001444c:	0f 84 48 01 00 00    	je     c001459a <Vm::faultHandler(regs*)+0x21b>
c0014452:	80 fa 6c             	cmp    dl,0x6c
c0014455:	0f 84 69 02 00 00    	je     c00146c4 <Vm::faultHandler(regs*)+0x345>
c001445b:	e9 96 05 00 00       	jmp    c00149f6 <Vm::faultHandler(regs*)+0x677>
c0014460:	80 fa 6f             	cmp    dl,0x6f
c0014463:	0f 84 f4 03 00 00    	je     c001485d <Vm::faultHandler(regs*)+0x4de>
c0014469:	0f 82 59 03 00 00    	jb     c00147c8 <Vm::faultHandler(regs*)+0x449>
c001446f:	80 fa 9c             	cmp    dl,0x9c
c0014472:	0f 84 2f 01 00 00    	je     c00145a7 <Vm::faultHandler(regs*)+0x228>
c0014478:	e9 79 05 00 00       	jmp    c00149f6 <Vm::faultHandler(regs*)+0x677>
c001447d:	80 fa ec             	cmp    dl,0xec
c0014480:	0f 84 14 05 00 00    	je     c001499a <Vm::faultHandler(regs*)+0x61b>
c0014486:	77 7b                	ja     c0014503 <Vm::faultHandler(regs*)+0x184>
c0014488:	80 fa e4             	cmp    dl,0xe4
c001448b:	0f 84 93 04 00 00    	je     c0014924 <Vm::faultHandler(regs*)+0x5a5>
c0014491:	77 53                	ja     c00144e6 <Vm::faultHandler(regs*)+0x167>
c0014493:	80 fa cd             	cmp    dl,0xcd
c0014496:	0f 84 d9 01 00 00    	je     c0014675 <Vm::faultHandler(regs*)+0x2f6>
c001449c:	80 fa cf             	cmp    dl,0xcf
c001449f:	0f 85 51 05 00 00    	jne    c00149f6 <Vm::faultHandler(regs*)+0x677>
c00144a5:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00144a8:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00144ab:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00144af:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00144b2:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00144b6:	81 ca 00 02 02 00    	or     edx,0x20200
c00144bc:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c00144bf:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c00144c3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00144c9:	66 c1 e8 09          	shr    ax,0x9
c00144cd:	83 e0 01             	and    eax,0x1
c00144d0:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00144d3:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00144d6:	83 c0 06             	add    eax,0x6
c00144d9:	25 ff ff 00 00       	and    eax,0xffff
c00144de:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00144e1:	e9 0c 05 00 00       	jmp    c00149f2 <Vm::faultHandler(regs*)+0x673>
c00144e6:	80 fa e6             	cmp    dl,0xe6
c00144e9:	0f 84 7f 04 00 00    	je     c001496e <Vm::faultHandler(regs*)+0x5ef>
c00144ef:	0f 82 4b 04 00 00    	jb     c0014940 <Vm::faultHandler(regs*)+0x5c1>
c00144f5:	80 fa e7             	cmp    dl,0xe7
c00144f8:	0f 84 87 04 00 00    	je     c0014985 <Vm::faultHandler(regs*)+0x606>
c00144fe:	e9 f3 04 00 00       	jmp    c00149f6 <Vm::faultHandler(regs*)+0x677>
c0014503:	80 fa ef             	cmp    dl,0xef
c0014506:	0f 84 d1 04 00 00    	je     c00149dd <Vm::faultHandler(regs*)+0x65e>
c001450c:	77 28                	ja     c0014536 <Vm::faultHandler(regs*)+0x1b7>
c001450e:	80 fa ed             	cmp    dl,0xed
c0014511:	0f 84 9f 04 00 00    	je     c00149b6 <Vm::faultHandler(regs*)+0x637>
c0014517:	80 fa ee             	cmp    dl,0xee
c001451a:	0f 85 d6 04 00 00    	jne    c00149f6 <Vm::faultHandler(regs*)+0x677>
c0014520:	50                   	push   eax
c0014521:	50                   	push   eax
c0014522:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014526:	50                   	push   eax
c0014527:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001452b:	50                   	push   eax
c001452c:	e8 a3 f9 ff ff       	call   c0013ed4 <Vm::outbv(unsigned short, unsigned char)>
c0014531:	e9 9f 04 00 00       	jmp    c00149d5 <Vm::faultHandler(regs*)+0x656>
c0014536:	80 fa fa             	cmp    dl,0xfa
c0014539:	0f 84 69 01 00 00    	je     c00146a8 <Vm::faultHandler(regs*)+0x329>
c001453f:	80 fa fb             	cmp    dl,0xfb
c0014542:	0f 84 6e 01 00 00    	je     c00146b6 <Vm::faultHandler(regs*)+0x337>
c0014548:	80 fa f3             	cmp    dl,0xf3
c001454b:	0f 85 a5 04 00 00    	jne    c00149f6 <Vm::faultHandler(regs*)+0x677>
c0014551:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014554:	e9 c0 fe ff ff       	jmp    c0014419 <Vm::faultHandler(regs*)+0x9a>
c0014559:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001455c:	be 02 00 00 00       	mov    esi,0x2
c0014561:	e9 b3 fe ff ff       	jmp    c0014419 <Vm::faultHandler(regs*)+0x9a>
c0014566:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014569:	be 03 00 00 00       	mov    esi,0x3
c001456e:	e9 a6 fe ff ff       	jmp    c0014419 <Vm::faultHandler(regs*)+0x9a>
c0014573:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014576:	be 04 00 00 00       	mov    esi,0x4
c001457b:	e9 99 fe ff ff       	jmp    c0014419 <Vm::faultHandler(regs*)+0x9a>
c0014580:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014583:	be 05 00 00 00       	mov    esi,0x5
c0014588:	e9 8c fe ff ff       	jmp    c0014419 <Vm::faultHandler(regs*)+0x9a>
c001458d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014590:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c0014595:	e9 7f fe ff ff       	jmp    c0014419 <Vm::faultHandler(regs*)+0x9a>
c001459a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001459d:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00145a2:	e9 72 fe ff ff       	jmp    c0014419 <Vm::faultHandler(regs*)+0x9a>
c00145a7:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00145aa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00145ae:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00145b3:	74 30                	je     c00145e5 <Vm::faultHandler(regs*)+0x266>
c00145b5:	83 e9 04             	sub    ecx,0x4
c00145b8:	81 e2 ff 0d 00 00    	and    edx,0xdff
c00145be:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00145c4:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00145c7:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00145ca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00145d0:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00145d4:	0f 84 15 04 00 00    	je     c00149ef <Vm::faultHandler(regs*)+0x670>
c00145da:	80 ce 02             	or     dh,0x2
c00145dd:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c00145e0:	e9 0a 04 00 00       	jmp    c00149ef <Vm::faultHandler(regs*)+0x670>
c00145e5:	83 e9 02             	sub    ecx,0x2
c00145e8:	81 e1 ff ff 00 00    	and    ecx,0xffff
c00145ee:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c00145f1:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c00145f5:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00145fb:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c00145ff:	74 05                	je     c0014606 <Vm::faultHandler(regs*)+0x287>
c0014601:	80 ce 02             	or     dh,0x2
c0014604:	eb 03                	jmp    c0014609 <Vm::faultHandler(regs*)+0x28a>
c0014606:	80 e6 fd             	and    dh,0xfd
c0014609:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001460d:	e9 dd 03 00 00       	jmp    c00149ef <Vm::faultHandler(regs*)+0x670>
c0014612:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014617:	74 2a                	je     c0014643 <Vm::faultHandler(regs*)+0x2c4>
c0014619:	8b 10                	mov    edx,DWORD PTR [eax]
c001461b:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014621:	81 ca 00 02 02 00    	or     edx,0x20200
c0014627:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001462a:	8b 00                	mov    eax,DWORD PTR [eax]
c001462c:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014632:	c1 e8 09             	shr    eax,0x9
c0014635:	83 e0 01             	and    eax,0x1
c0014638:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001463b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001463e:	83 c0 04             	add    eax,0x4
c0014641:	eb 25                	jmp    c0014668 <Vm::faultHandler(regs*)+0x2e9>
c0014643:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0014646:	81 ca 00 02 02 00    	or     edx,0x20200
c001464c:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c001464f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0014652:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014658:	66 c1 e8 09          	shr    ax,0x9
c001465c:	83 e0 01             	and    eax,0x1
c001465f:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014662:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014665:	83 c0 02             	add    eax,0x2
c0014668:	25 ff ff 00 00       	and    eax,0xffff
c001466d:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014670:	e9 7a 03 00 00       	jmp    c00149ef <Vm::faultHandler(regs*)+0x670>
c0014675:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014679:	3c ee                	cmp    al,0xee
c001467b:	75 10                	jne    c001468d <Vm::faultHandler(regs*)+0x30e>
c001467d:	83 ec 0c             	sub    esp,0xc
c0014680:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014683:	e8 e9 f8 ff ff       	call   c0013f71 <Vm::mainloop3(unsigned long)>
c0014688:	e9 4b 03 00 00       	jmp    c00149d8 <Vm::faultHandler(regs*)+0x659>
c001468d:	83 ec 0c             	sub    esp,0xc
c0014690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014698:	51                   	push   ecx
c0014699:	50                   	push   eax
c001469a:	53                   	push   ebx
c001469b:	e8 e1 fb ff ff       	call   c0014281 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00146a0:	83 c4 20             	add    esp,0x20
c00146a3:	e9 4a 03 00 00       	jmp    c00149f2 <Vm::faultHandler(regs*)+0x673>
c00146a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146ad:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00146b1:	e9 39 03 00 00       	jmp    c00149ef <Vm::faultHandler(regs*)+0x670>
c00146b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00146bb:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c00146bf:	e9 2b 03 00 00       	jmp    c00149ef <Vm::faultHandler(regs*)+0x670>
c00146c4:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c00146c7:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00146cc:	74 2b                	je     c00146f9 <Vm::faultHandler(regs*)+0x37a>
c00146ce:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c00146d5:	76 22                	jbe    c00146f9 <Vm::faultHandler(regs*)+0x37a>
c00146d7:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00146db:	50                   	push   eax
c00146dc:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00146e0:	50                   	push   eax
c00146e1:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00146e5:	50                   	push   eax
c00146e6:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00146ea:	50                   	push   eax
c00146eb:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00146ef:	50                   	push   eax
c00146f0:	6a 6c                	push   0x6c
c00146f2:	6a 6c                	push   0x6c
c00146f4:	e9 b9 01 00 00       	jmp    c00148b2 <Vm::faultHandler(regs*)+0x533>
c00146f9:	83 ec 0c             	sub    esp,0xc
c00146fc:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014700:	0f b7 f6             	movzx  esi,si
c0014703:	50                   	push   eax
c0014704:	e8 b8 f7 ff ff       	call   c0013ec1 <Vm::inbv(unsigned short)>
c0014709:	83 c4 0c             	add    esp,0xc
c001470c:	0f b6 c0             	movzx  eax,al
c001470f:	50                   	push   eax
c0014710:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0014714:	50                   	push   eax
c0014715:	56                   	push   esi
c0014716:	e8 24 fc ff ff       	call   c001433f <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001471b:	83 c4 10             	add    esp,0x10
c001471e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014721:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014725:	74 03                	je     c001472a <Vm::faultHandler(regs*)+0x3ab>
c0014727:	48                   	dec    eax
c0014728:	eb 01                	jmp    c001472b <Vm::faultHandler(regs*)+0x3ac>
c001472a:	40                   	inc    eax
c001472b:	0f b7 c0             	movzx  eax,ax
c001472e:	e9 8d 00 00 00       	jmp    c00147c0 <Vm::faultHandler(regs*)+0x441>
c0014733:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0014736:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014739:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001473e:	74 29                	je     c0014769 <Vm::faultHandler(regs*)+0x3ea>
c0014740:	3d ff ff 00 00       	cmp    eax,0xffff
c0014745:	76 22                	jbe    c0014769 <Vm::faultHandler(regs*)+0x3ea>
c0014747:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001474b:	50                   	push   eax
c001474c:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014750:	50                   	push   eax
c0014751:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014755:	50                   	push   eax
c0014756:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001475a:	50                   	push   eax
c001475b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001475f:	50                   	push   eax
c0014760:	6a 6d                	push   0x6d
c0014762:	6a 6d                	push   0x6d
c0014764:	e9 49 01 00 00       	jmp    c00148b2 <Vm::faultHandler(regs*)+0x533>
c0014769:	0f b7 c8             	movzx  ecx,ax
c001476c:	0f b7 f6             	movzx  esi,si
c001476f:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014772:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014777:	74 20                	je     c0014799 <Vm::faultHandler(regs*)+0x41a>
c0014779:	ed                   	in     eax,dx
c001477a:	55                   	push   ebp
c001477b:	50                   	push   eax
c001477c:	51                   	push   ecx
c001477d:	56                   	push   esi
c001477e:	e8 e7 fb ff ff       	call   c001436a <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0014783:	83 c4 10             	add    esp,0x10
c0014786:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014789:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001478d:	74 05                	je     c0014794 <Vm::faultHandler(regs*)+0x415>
c001478f:	83 e8 04             	sub    eax,0x4
c0014792:	eb 27                	jmp    c00147bb <Vm::faultHandler(regs*)+0x43c>
c0014794:	83 c0 04             	add    eax,0x4
c0014797:	eb 22                	jmp    c00147bb <Vm::faultHandler(regs*)+0x43c>
c0014799:	66 ed                	in     ax,dx
c001479b:	0f b7 c0             	movzx  eax,ax
c001479e:	57                   	push   edi
c001479f:	50                   	push   eax
c00147a0:	51                   	push   ecx
c00147a1:	56                   	push   esi
c00147a2:	e8 ad fb ff ff       	call   c0014354 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00147a7:	83 c4 10             	add    esp,0x10
c00147aa:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00147ad:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00147b1:	74 05                	je     c00147b8 <Vm::faultHandler(regs*)+0x439>
c00147b3:	83 e8 02             	sub    eax,0x2
c00147b6:	eb 03                	jmp    c00147bb <Vm::faultHandler(regs*)+0x43c>
c00147b8:	83 c0 02             	add    eax,0x2
c00147bb:	25 ff ff 00 00       	and    eax,0xffff
c00147c0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00147c3:	e9 27 02 00 00       	jmp    c00149ef <Vm::faultHandler(regs*)+0x670>
c00147c8:	8d 46 ff             	lea    eax,[esi-0x1]
c00147cb:	3c 05                	cmp    al,0x5
c00147cd:	77 24                	ja     c00147f3 <Vm::faultHandler(regs*)+0x474>
c00147cf:	0f b6 c0             	movzx  eax,al
c00147d2:	ff 24 85 88 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1878]
c00147d9:	0f b7 fd             	movzx  edi,bp
c00147dc:	eb 15                	jmp    c00147f3 <Vm::faultHandler(regs*)+0x474>
c00147de:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00147e2:	eb 0f                	jmp    c00147f3 <Vm::faultHandler(regs*)+0x474>
c00147e4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00147e8:	eb 09                	jmp    c00147f3 <Vm::faultHandler(regs*)+0x474>
c00147ea:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00147ee:	eb 03                	jmp    c00147f3 <Vm::faultHandler(regs*)+0x474>
c00147f0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00147f3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00147f6:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00147fb:	74 29                	je     c0014826 <Vm::faultHandler(regs*)+0x4a7>
c00147fd:	3d ff ff 00 00       	cmp    eax,0xffff
c0014802:	76 22                	jbe    c0014826 <Vm::faultHandler(regs*)+0x4a7>
c0014804:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014808:	50                   	push   eax
c0014809:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001480d:	50                   	push   eax
c001480e:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014812:	50                   	push   eax
c0014813:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014817:	50                   	push   eax
c0014818:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001481c:	50                   	push   eax
c001481d:	6a 6e                	push   0x6e
c001481f:	6a 6e                	push   0x6e
c0014821:	e9 8c 00 00 00       	jmp    c00148b2 <Vm::faultHandler(regs*)+0x533>
c0014826:	0f b7 c0             	movzx  eax,ax
c0014829:	52                   	push   edx
c001482a:	52                   	push   edx
c001482b:	50                   	push   eax
c001482c:	57                   	push   edi
c001482d:	e8 d9 fa ff ff       	call   c001430b <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014832:	59                   	pop    ecx
c0014833:	0f b6 c0             	movzx  eax,al
c0014836:	5e                   	pop    esi
c0014837:	50                   	push   eax
c0014838:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001483c:	50                   	push   eax
c001483d:	e8 92 f6 ff ff       	call   c0013ed4 <Vm::outbv(unsigned short, unsigned char)>
c0014842:	83 c4 10             	add    esp,0x10
c0014845:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014848:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001484c:	74 03                	je     c0014851 <Vm::faultHandler(regs*)+0x4d2>
c001484e:	48                   	dec    eax
c001484f:	eb 01                	jmp    c0014852 <Vm::faultHandler(regs*)+0x4d3>
c0014851:	40                   	inc    eax
c0014852:	0f b7 c0             	movzx  eax,ax
c0014855:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014858:	e9 92 01 00 00       	jmp    c00149ef <Vm::faultHandler(regs*)+0x670>
c001485d:	8d 46 ff             	lea    eax,[esi-0x1]
c0014860:	3c 05                	cmp    al,0x5
c0014862:	77 1f                	ja     c0014883 <Vm::faultHandler(regs*)+0x504>
c0014864:	0f b6 c0             	movzx  eax,al
c0014867:	ff 24 85 a0 e7 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1860]
c001486e:	89 ef                	mov    edi,ebp
c0014870:	eb 11                	jmp    c0014883 <Vm::faultHandler(regs*)+0x504>
c0014872:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014875:	eb 0c                	jmp    c0014883 <Vm::faultHandler(regs*)+0x504>
c0014877:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001487a:	eb 07                	jmp    c0014883 <Vm::faultHandler(regs*)+0x504>
c001487c:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001487f:	eb 02                	jmp    c0014883 <Vm::faultHandler(regs*)+0x504>
c0014881:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014883:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014886:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001488b:	74 37                	je     c00148c4 <Vm::faultHandler(regs*)+0x545>
c001488d:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014893:	76 2f                	jbe    c00148c4 <Vm::faultHandler(regs*)+0x545>
c0014895:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014899:	50                   	push   eax
c001489a:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001489e:	50                   	push   eax
c001489f:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00148a3:	50                   	push   eax
c00148a4:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00148a8:	50                   	push   eax
c00148a9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148ad:	50                   	push   eax
c00148ae:	6a 6f                	push   0x6f
c00148b0:	6a 6f                	push   0x6f
c00148b2:	68 2e e7 01 c0       	push   0xc001e72e
c00148b7:	e8 24 5c ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00148bc:	83 c4 20             	add    esp,0x20
c00148bf:	e9 86 01 00 00       	jmp    c0014a4a <Vm::faultHandler(regs*)+0x6cb>
c00148c4:	0f b7 d7             	movzx  edx,di
c00148c7:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00148ca:	0f b7 c6             	movzx  eax,si
c00148cd:	81 e1 00 04 00 00    	and    ecx,0x400
c00148d3:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00148d6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00148db:	74 1d                	je     c00148fa <Vm::faultHandler(regs*)+0x57b>
c00148dd:	55                   	push   ebp
c00148de:	55                   	push   ebp
c00148df:	50                   	push   eax
c00148e0:	52                   	push   edx
c00148e1:	e8 48 fa ff ff       	call   c001432e <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00148e6:	83 c4 10             	add    esp,0x10
c00148e9:	89 fa                	mov    edx,edi
c00148eb:	ef                   	out    dx,eax
c00148ec:	85 c9                	test   ecx,ecx
c00148ee:	74 05                	je     c00148f5 <Vm::faultHandler(regs*)+0x576>
c00148f0:	83 ee 04             	sub    esi,0x4
c00148f3:	eb 21                	jmp    c0014916 <Vm::faultHandler(regs*)+0x597>
c00148f5:	83 c6 04             	add    esi,0x4
c00148f8:	eb 1c                	jmp    c0014916 <Vm::faultHandler(regs*)+0x597>
c00148fa:	55                   	push   ebp
c00148fb:	55                   	push   ebp
c00148fc:	50                   	push   eax
c00148fd:	52                   	push   edx
c00148fe:	e8 19 fa ff ff       	call   c001431c <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014903:	83 c4 10             	add    esp,0x10
c0014906:	89 fa                	mov    edx,edi
c0014908:	66 ef                	out    dx,ax
c001490a:	85 c9                	test   ecx,ecx
c001490c:	74 05                	je     c0014913 <Vm::faultHandler(regs*)+0x594>
c001490e:	83 ee 02             	sub    esi,0x2
c0014911:	eb 03                	jmp    c0014916 <Vm::faultHandler(regs*)+0x597>
c0014913:	83 c6 02             	add    esi,0x2
c0014916:	81 e6 ff ff 00 00    	and    esi,0xffff
c001491c:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c001491f:	e9 cb 00 00 00       	jmp    c00149ef <Vm::faultHandler(regs*)+0x670>
c0014924:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001492b:	83 ec 0c             	sub    esp,0xc
c001492e:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014932:	50                   	push   eax
c0014933:	e8 89 f5 ff ff       	call   c0013ec1 <Vm::inbv(unsigned short)>
c0014938:	0f b6 c0             	movzx  eax,al
c001493b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001493e:	eb 3f                	jmp    c001497f <Vm::faultHandler(regs*)+0x600>
c0014940:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014945:	74 07                	je     c001494e <Vm::faultHandler(regs*)+0x5cf>
c0014947:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001494b:	ed                   	in     eax,dx
c001494c:	eb 14                	jmp    c0014962 <Vm::faultHandler(regs*)+0x5e3>
c001494e:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014951:	66 31 f6             	xor    si,si
c0014954:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014957:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001495b:	66 ed                	in     ax,dx
c001495d:	0f b7 c0             	movzx  eax,ax
c0014960:	09 f0                	or     eax,esi
c0014962:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014965:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014969:	e9 84 00 00 00       	jmp    c00149f2 <Vm::faultHandler(regs*)+0x673>
c001496e:	52                   	push   edx
c001496f:	52                   	push   edx
c0014970:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014974:	50                   	push   eax
c0014975:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014979:	50                   	push   eax
c001497a:	e8 55 f5 ff ff       	call   c0013ed4 <Vm::outbv(unsigned short, unsigned char)>
c001497f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014983:	eb 53                	jmp    c00149d8 <Vm::faultHandler(regs*)+0x659>
c0014985:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014988:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001498c:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014991:	74 03                	je     c0014996 <Vm::faultHandler(regs*)+0x617>
c0014993:	ef                   	out    dx,eax
c0014994:	eb cf                	jmp    c0014965 <Vm::faultHandler(regs*)+0x5e6>
c0014996:	66 ef                	out    dx,ax
c0014998:	eb cb                	jmp    c0014965 <Vm::faultHandler(regs*)+0x5e6>
c001499a:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c00149a1:	83 ec 0c             	sub    esp,0xc
c00149a4:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c00149a8:	50                   	push   eax
c00149a9:	e8 13 f5 ff ff       	call   c0013ec1 <Vm::inbv(unsigned short)>
c00149ae:	0f b6 c0             	movzx  eax,al
c00149b1:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c00149b4:	eb 1f                	jmp    c00149d5 <Vm::faultHandler(regs*)+0x656>
c00149b6:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00149b9:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149be:	74 03                	je     c00149c3 <Vm::faultHandler(regs*)+0x644>
c00149c0:	ed                   	in     eax,dx
c00149c1:	eb 0d                	jmp    c00149d0 <Vm::faultHandler(regs*)+0x651>
c00149c3:	66 ed                	in     ax,dx
c00149c5:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00149c8:	0f b7 c0             	movzx  eax,ax
c00149cb:	66 31 d2             	xor    dx,dx
c00149ce:	09 d0                	or     eax,edx
c00149d0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00149d3:	eb 1a                	jmp    c00149ef <Vm::faultHandler(regs*)+0x670>
c00149d5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149d8:	83 c4 10             	add    esp,0x10
c00149db:	eb 15                	jmp    c00149f2 <Vm::faultHandler(regs*)+0x673>
c00149dd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00149e0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00149e3:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149e8:	74 03                	je     c00149ed <Vm::faultHandler(regs*)+0x66e>
c00149ea:	ef                   	out    dx,eax
c00149eb:	eb 02                	jmp    c00149ef <Vm::faultHandler(regs*)+0x670>
c00149ed:	66 ef                	out    dx,ax
c00149ef:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00149f2:	b0 01                	mov    al,0x1
c00149f4:	eb 56                	jmp    c0014a4c <Vm::faultHandler(regs*)+0x6cd>
c00149f6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00149fa:	50                   	push   eax
c00149fb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00149ff:	50                   	push   eax
c0014a00:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014a04:	50                   	push   eax
c0014a05:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014a09:	50                   	push   eax
c0014a0a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a0e:	50                   	push   eax
c0014a0f:	52                   	push   edx
c0014a10:	52                   	push   edx
c0014a11:	68 5b e7 01 c0       	push   0xc001e75b
c0014a16:	e8 c5 5a ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014a1b:	83 c4 20             	add    esp,0x20
c0014a1e:	83 ec 0c             	sub    esp,0xc
c0014a21:	6a 60                	push   0x60
c0014a23:	e8 99 f4 ff ff       	call   c0013ec1 <Vm::inbv(unsigned short)>
c0014a28:	83 c4 10             	add    esp,0x10
c0014a2b:	3c 1c                	cmp    al,0x1c
c0014a2d:	74 04                	je     c0014a33 <Vm::faultHandler(regs*)+0x6b4>
c0014a2f:	3c 5a                	cmp    al,0x5a
c0014a31:	75 eb                	jne    c0014a1e <Vm::faultHandler(regs*)+0x69f>
c0014a33:	3c 5a                	cmp    al,0x5a
c0014a35:	74 04                	je     c0014a3b <Vm::faultHandler(regs*)+0x6bc>
c0014a37:	3c 1c                	cmp    al,0x1c
c0014a39:	75 0f                	jne    c0014a4a <Vm::faultHandler(regs*)+0x6cb>
c0014a3b:	83 ec 0c             	sub    esp,0xc
c0014a3e:	6a 60                	push   0x60
c0014a40:	e8 7c f4 ff ff       	call   c0013ec1 <Vm::inbv(unsigned short)>
c0014a45:	83 c4 10             	add    esp,0x10
c0014a48:	eb e9                	jmp    c0014a33 <Vm::faultHandler(regs*)+0x6b4>
c0014a4a:	31 c0                	xor    eax,eax
c0014a4c:	83 c4 1c             	add    esp,0x1c
c0014a4f:	5b                   	pop    ebx
c0014a50:	5e                   	pop    esi
c0014a51:	5f                   	pop    edi
c0014a52:	5d                   	pop    ebp
c0014a53:	c3                   	ret    

c0014a54 <noCopro(unsigned long)>:
c0014a54:	c3                   	ret    

c0014a55 <nmiHandler(regs*, void*)>:
c0014a55:	83 ec 0c             	sub    esp,0xc
c0014a58:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0014a5d:	83 ec 0c             	sub    esp,0xc
c0014a60:	50                   	push   eax
c0014a61:	e8 74 25 ff ff       	call   c0006fda <Computer::handleNMI()>
c0014a66:	83 c4 10             	add    esp,0x10
c0014a69:	90                   	nop
c0014a6a:	83 c4 0c             	add    esp,0xc
c0014a6d:	c3                   	ret    

c0014a6e <doubleFault(regs*, void*)>:
c0014a6e:	55                   	push   ebp
c0014a6f:	89 e5                	mov    ebp,esp
c0014a71:	83 ec 08             	sub    esp,0x8
c0014a74:	83 ec 0c             	sub    esp,0xc
c0014a77:	68 b8 e7 01 c0       	push   0xc001e7b8
c0014a7c:	e8 da b6 ff ff       	call   c001015b <KePanic(char const*)>
c0014a81:	83 c4 10             	add    esp,0x10
c0014a84:	90                   	nop
c0014a85:	c9                   	leave  
c0014a86:	c3                   	ret    

c0014a87 <displayDebugInfo(regs*)>:
c0014a87:	83 ec 1c             	sub    esp,0x1c
c0014a8a:	0f 20 c0             	mov    eax,cr0
c0014a8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a91:	0f 20 d0             	mov    eax,cr2
c0014a94:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014a98:	0f 20 d8             	mov    eax,cr3
c0014a9b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a9f:	0f 20 e0             	mov    eax,cr4
c0014aa2:	89 04 24             	mov    DWORD PTR [esp],eax
c0014aa5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014aa9:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014aac:	83 ec 08             	sub    esp,0x8
c0014aaf:	50                   	push   eax
c0014ab0:	68 d4 e7 01 c0       	push   0xc001e7d4
c0014ab5:	e8 26 5a ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014aba:	83 c4 10             	add    esp,0x10
c0014abd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ac1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014ac4:	83 ec 08             	sub    esp,0x8
c0014ac7:	50                   	push   eax
c0014ac8:	68 c5 e7 01 c0       	push   0xc001e7c5
c0014acd:	e8 0e 5a ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014ad2:	83 c4 10             	add    esp,0x10
c0014ad5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ad9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014adc:	83 ec 08             	sub    esp,0x8
c0014adf:	50                   	push   eax
c0014ae0:	68 d0 e7 01 c0       	push   0xc001e7d0
c0014ae5:	e8 f6 59 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014aea:	83 c4 10             	add    esp,0x10
c0014aed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014af1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014af4:	83 ec 08             	sub    esp,0x8
c0014af7:	50                   	push   eax
c0014af8:	68 df e7 01 c0       	push   0xc001e7df
c0014afd:	e8 de 59 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014b02:	83 c4 10             	add    esp,0x10
c0014b05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014b09:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014b0c:	83 ec 08             	sub    esp,0x8
c0014b0f:	50                   	push   eax
c0014b10:	68 ea e7 01 c0       	push   0xc001e7ea
c0014b15:	e8 c6 59 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014b1a:	83 c4 10             	add    esp,0x10
c0014b1d:	83 ec 08             	sub    esp,0x8
c0014b20:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014b24:	68 f5 e7 01 c0       	push   0xc001e7f5
c0014b29:	e8 b2 59 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	83 ec 08             	sub    esp,0x8
c0014b34:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014b38:	68 00 e8 01 c0       	push   0xc001e800
c0014b3d:	e8 9e 59 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014b42:	83 c4 10             	add    esp,0x10
c0014b45:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014b4a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b50:	83 ec 0c             	sub    esp,0xc
c0014b53:	50                   	push   eax
c0014b54:	e8 9e 38 ff ff       	call   c00083f7 <setActiveTerminal(VgaText*)>
c0014b59:	83 c4 10             	add    esp,0x10
c0014b5c:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014b61:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b67:	83 ec 08             	sub    esp,0x8
c0014b6a:	68 0b e8 01 c0       	push   0xc001e80b
c0014b6f:	50                   	push   eax
c0014b70:	e8 c1 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b75:	83 c4 10             	add    esp,0x10
c0014b78:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014b7d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014b83:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014b88:	8b 12                	mov    edx,DWORD PTR [edx]
c0014b8a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014b8d:	83 c2 0c             	add    edx,0xc
c0014b90:	83 ec 08             	sub    esp,0x8
c0014b93:	52                   	push   edx
c0014b94:	50                   	push   eax
c0014b95:	e8 9c 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014b9a:	83 c4 10             	add    esp,0x10
c0014b9d:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014ba2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ba8:	83 ec 08             	sub    esp,0x8
c0014bab:	68 14 e8 01 c0       	push   0xc001e814
c0014bb0:	50                   	push   eax
c0014bb1:	e8 80 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bb6:	83 c4 10             	add    esp,0x10
c0014bb9:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014bbe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bc4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014bc8:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014bcb:	83 ec 08             	sub    esp,0x8
c0014bce:	52                   	push   edx
c0014bcf:	50                   	push   eax
c0014bd0:	e8 1b 3b ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014bd5:	83 c4 10             	add    esp,0x10
c0014bd8:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014bdd:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014be3:	83 ec 08             	sub    esp,0x8
c0014be6:	68 1c e8 01 c0       	push   0xc001e81c
c0014beb:	50                   	push   eax
c0014bec:	e8 45 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014bf1:	83 c4 10             	add    esp,0x10
c0014bf4:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014bf9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014bff:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c03:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014c06:	83 ec 08             	sub    esp,0x8
c0014c09:	52                   	push   edx
c0014c0a:	50                   	push   eax
c0014c0b:	e8 e0 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c10:	83 c4 10             	add    esp,0x10
c0014c13:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014c18:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c1e:	83 ec 08             	sub    esp,0x8
c0014c21:	68 24 e8 01 c0       	push   0xc001e824
c0014c26:	50                   	push   eax
c0014c27:	e8 0a 3b ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c2c:	83 c4 10             	add    esp,0x10
c0014c2f:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014c34:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c3a:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c3e:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014c41:	83 ec 08             	sub    esp,0x8
c0014c44:	52                   	push   edx
c0014c45:	50                   	push   eax
c0014c46:	e8 a5 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c4b:	83 c4 10             	add    esp,0x10
c0014c4e:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014c53:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c59:	83 ec 08             	sub    esp,0x8
c0014c5c:	68 2c e8 01 c0       	push   0xc001e82c
c0014c61:	50                   	push   eax
c0014c62:	e8 cf 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014c67:	83 c4 10             	add    esp,0x10
c0014c6a:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014c6f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c75:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014c79:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014c7c:	83 ec 08             	sub    esp,0x8
c0014c7f:	52                   	push   edx
c0014c80:	50                   	push   eax
c0014c81:	e8 6a 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014c86:	83 c4 10             	add    esp,0x10
c0014c89:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014c8e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014c94:	83 ec 08             	sub    esp,0x8
c0014c97:	68 34 e8 01 c0       	push   0xc001e834
c0014c9c:	50                   	push   eax
c0014c9d:	e8 94 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014ca2:	83 c4 10             	add    esp,0x10
c0014ca5:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014caa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014cb0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014cb4:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014cb7:	83 ec 08             	sub    esp,0x8
c0014cba:	52                   	push   edx
c0014cbb:	50                   	push   eax
c0014cbc:	e8 2f 3a ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cc1:	83 c4 10             	add    esp,0x10
c0014cc4:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014cc9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ccf:	83 ec 08             	sub    esp,0x8
c0014cd2:	68 3c e8 01 c0       	push   0xc001e83c
c0014cd7:	50                   	push   eax
c0014cd8:	e8 59 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014cdd:	83 c4 10             	add    esp,0x10
c0014ce0:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014ce5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ceb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014cef:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014cf2:	83 ec 08             	sub    esp,0x8
c0014cf5:	52                   	push   edx
c0014cf6:	50                   	push   eax
c0014cf7:	e8 f4 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014cfc:	83 c4 10             	add    esp,0x10
c0014cff:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014d04:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d0a:	83 ec 08             	sub    esp,0x8
c0014d0d:	68 44 e8 01 c0       	push   0xc001e844
c0014d12:	50                   	push   eax
c0014d13:	e8 1e 3a ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d18:	83 c4 10             	add    esp,0x10
c0014d1b:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014d20:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d26:	83 ec 08             	sub    esp,0x8
c0014d29:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014d2d:	50                   	push   eax
c0014d2e:	e8 bd 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d33:	83 c4 10             	add    esp,0x10
c0014d36:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014d3b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d41:	83 ec 08             	sub    esp,0x8
c0014d44:	68 4d e8 01 c0       	push   0xc001e84d
c0014d49:	50                   	push   eax
c0014d4a:	e8 e7 39 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d4f:	83 c4 10             	add    esp,0x10
c0014d52:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014d57:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d5d:	83 ec 08             	sub    esp,0x8
c0014d60:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d64:	50                   	push   eax
c0014d65:	e8 86 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014d6a:	83 c4 10             	add    esp,0x10
c0014d6d:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014d72:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d78:	83 ec 08             	sub    esp,0x8
c0014d7b:	68 55 e8 01 c0       	push   0xc001e855
c0014d80:	50                   	push   eax
c0014d81:	e8 b0 39 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0014d86:	83 c4 10             	add    esp,0x10
c0014d89:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c0014d8e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d94:	83 ec 08             	sub    esp,0x8
c0014d97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014d9b:	50                   	push   eax
c0014d9c:	e8 4f 39 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0014da1:	83 c4 10             	add    esp,0x10
c0014da4:	fa                   	cli    
c0014da5:	f4                   	hlt    
c0014da6:	eb fe                	jmp    c0014da6 <displayDebugInfo(regs*)+0x31f>

c0014da8 <HalSystemIdle()>:
c0014da8:	56                   	push   esi
c0014da9:	53                   	push   ebx
c0014daa:	83 ec 14             	sub    esp,0x14
c0014dad:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0014db2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014db8:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0014dbe:	83 e0 04             	and    eax,0x4
c0014dc1:	84 c0                	test   al,al
c0014dc3:	0f 95 c0             	setne  al
c0014dc6:	84 c0                	test   al,al
c0014dc8:	74 4c                	je     c0014e16 <HalSystemIdle()+0x6e>
c0014dca:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0014dcf:	83 ec 08             	sub    esp,0x8
c0014dd2:	68 e1 00 00 00       	push   0xe1
c0014dd7:	50                   	push   eax
c0014dd8:	e8 15 20 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c0014ddd:	83 c4 10             	add    esp,0x10
c0014de0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014de4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014de8:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0014ded:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014df1:	83 e2 02             	and    edx,0x2
c0014df4:	89 d3                	mov    ebx,edx
c0014df6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dfa:	83 e2 00             	and    edx,0x0
c0014dfd:	89 d6                	mov    esi,edx
c0014dff:	56                   	push   esi
c0014e00:	53                   	push   ebx
c0014e01:	68 e1 00 00 00       	push   0xe1
c0014e06:	50                   	push   eax
c0014e07:	e8 12 20 ff ff       	call   c0006e1e <Computer::wrmsr(unsigned int, unsigned long long)>
c0014e0c:	83 c4 10             	add    esp,0x10
c0014e0f:	e8 80 b3 fe ff       	call   c0000194 <doTPAUSE>
c0014e14:	eb 01                	jmp    c0014e17 <HalSystemIdle()+0x6f>
c0014e16:	f4                   	hlt    
c0014e17:	90                   	nop
c0014e18:	83 c4 14             	add    esp,0x14
c0014e1b:	5b                   	pop    ebx
c0014e1c:	5e                   	pop    esi
c0014e1d:	c3                   	ret    

c0014e1e <displayProgramFault(char const*)>:
c0014e1e:	83 ec 0c             	sub    esp,0xc
c0014e21:	83 ec 0c             	sub    esp,0xc
c0014e24:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e28:	e8 b3 56 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014e2d:	83 c4 10             	add    esp,0x10
c0014e30:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014e35:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e37:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e3a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e40:	85 c0                	test   eax,eax
c0014e42:	74 21                	je     c0014e65 <displayProgramFault(char const*)+0x47>
c0014e44:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014e49:	8b 00                	mov    eax,DWORD PTR [eax]
c0014e4b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014e4e:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e54:	6a 04                	push   0x4
c0014e56:	6a 0f                	push   0xf
c0014e58:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014e5c:	50                   	push   eax
c0014e5d:	e8 46 39 ff ff       	call   c00087a8 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0014e62:	83 c4 10             	add    esp,0x10
c0014e65:	90                   	nop
c0014e66:	83 c4 0c             	add    esp,0xc
c0014e69:	c3                   	ret    

c0014e6a <gpFault(regs*, void*)>:
c0014e6a:	83 ec 1c             	sub    esp,0x1c
c0014e6d:	c7 05 30 38 02 c0 7f 43 01 c0 	mov    DWORD PTR ds:0xc0023830,0xc001437f
c0014e77:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014e7c:	85 c0                	test   eax,eax
c0014e7e:	74 1c                	je     c0014e9c <gpFault(regs*, void*)+0x32>
c0014e80:	a1 30 38 02 c0       	mov    eax,ds:0xc0023830
c0014e85:	83 ec 0c             	sub    esp,0xc
c0014e88:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014e8c:	ff d0                	call   eax
c0014e8e:	83 c4 10             	add    esp,0x10
c0014e91:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0014e95:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0014e9a:	75 2e                	jne    c0014eca <gpFault(regs*, void*)+0x60>
c0014e9c:	83 ec 0c             	sub    esp,0xc
c0014e9f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ea3:	e8 df fb ff ff       	call   c0014a87 <displayDebugInfo(regs*)>
c0014ea8:	83 c4 10             	add    esp,0x10
c0014eab:	83 ec 0c             	sub    esp,0xc
c0014eae:	68 5d e8 01 c0       	push   0xc001e85d
c0014eb3:	e8 66 ff ff ff       	call   c0014e1e <displayProgramFault(char const*)>
c0014eb8:	83 c4 10             	add    esp,0x10
c0014ebb:	83 ec 0c             	sub    esp,0xc
c0014ebe:	6a 00                	push   0x0
c0014ec0:	e8 af ee ff ff       	call   c0013d74 <Thr::terminateFromIRQ(int)>
c0014ec5:	83 c4 10             	add    esp,0x10
c0014ec8:	eb 01                	jmp    c0014ecb <gpFault(regs*, void*)+0x61>
c0014eca:	90                   	nop
c0014ecb:	83 c4 1c             	add    esp,0x1c
c0014ece:	c3                   	ret    

c0014ecf <pgFault(regs*, void*)>:
c0014ecf:	83 ec 1c             	sub    esp,0x1c
c0014ed2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014ed6:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0014ed9:	0f 20 d0             	mov    eax,cr2
c0014edc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014ee4:	83 ec 04             	sub    esp,0x4
c0014ee7:	52                   	push   edx
c0014ee8:	50                   	push   eax
c0014ee9:	68 3c e9 01 c0       	push   0xc001e93c
c0014eee:	e8 ed 55 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014ef3:	83 c4 10             	add    esp,0x10
c0014ef6:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0014efb:	8b 00                	mov    eax,DWORD PTR [eax]
c0014efd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014f00:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0014f06:	0f 20 d2             	mov    edx,cr2
c0014f09:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014f0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014f11:	83 ec 08             	sub    esp,0x8
c0014f14:	52                   	push   edx
c0014f15:	50                   	push   eax
c0014f16:	e8 f7 51 ff ff       	call   c000a112 <VAS::tryLoadBackOffDisk(unsigned long)>
c0014f1b:	83 c4 10             	add    esp,0x10
c0014f1e:	84 c0                	test   al,al
c0014f20:	75 2e                	jne    c0014f50 <pgFault(regs*, void*)+0x81>
c0014f22:	83 ec 0c             	sub    esp,0xc
c0014f25:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014f29:	e8 59 fb ff ff       	call   c0014a87 <displayDebugInfo(regs*)>
c0014f2e:	83 c4 10             	add    esp,0x10
c0014f31:	83 ec 0c             	sub    esp,0xc
c0014f34:	68 76 e8 01 c0       	push   0xc001e876
c0014f39:	e8 e0 fe ff ff       	call   c0014e1e <displayProgramFault(char const*)>
c0014f3e:	83 c4 10             	add    esp,0x10
c0014f41:	83 ec 0c             	sub    esp,0xc
c0014f44:	6a 00                	push   0x0
c0014f46:	e8 29 ee ff ff       	call   c0013d74 <Thr::terminateFromIRQ(int)>
c0014f4b:	83 c4 10             	add    esp,0x10
c0014f4e:	eb 01                	jmp    c0014f51 <pgFault(regs*, void*)+0x82>
c0014f50:	90                   	nop
c0014f51:	83 c4 1c             	add    esp,0x1c
c0014f54:	c3                   	ret    

c0014f55 <otherISRHandler(regs*, void*)>:
c0014f55:	83 ec 0c             	sub    esp,0xc
c0014f58:	83 ec 0c             	sub    esp,0xc
c0014f5b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014f5f:	e8 23 fb ff ff       	call   c0014a87 <displayDebugInfo(regs*)>
c0014f64:	83 c4 10             	add    esp,0x10
c0014f67:	83 ec 0c             	sub    esp,0xc
c0014f6a:	68 64 e9 01 c0       	push   0xc001e964
c0014f6f:	e8 aa fe ff ff       	call   c0014e1e <displayProgramFault(char const*)>
c0014f74:	83 c4 10             	add    esp,0x10
c0014f77:	83 ec 0c             	sub    esp,0xc
c0014f7a:	6a 00                	push   0x0
c0014f7c:	e8 f3 ed ff ff       	call   c0013d74 <Thr::terminateFromIRQ(int)>
c0014f81:	83 c4 10             	add    esp,0x10
c0014f84:	90                   	nop
c0014f85:	83 c4 0c             	add    esp,0xc
c0014f88:	c3                   	ret    

c0014f89 <opcodeFault(regs*, void*)>:
c0014f89:	55                   	push   ebp
c0014f8a:	89 e5                	mov    ebp,esp
c0014f8c:	83 ec 08             	sub    esp,0x8
c0014f8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f92:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f95:	83 ec 08             	sub    esp,0x8
c0014f98:	50                   	push   eax
c0014f99:	68 81 e8 01 c0       	push   0xc001e881
c0014f9e:	e8 3d 55 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014fa3:	83 c4 10             	add    esp,0x10
c0014fa6:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0014fab:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014fb1:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0014fb7:	84 c0                	test   al,al
c0014fb9:	74 21                	je     c0014fdc <opcodeFault(regs*, void*)+0x53>
c0014fbb:	83 ec 0c             	sub    esp,0xc
c0014fbe:	68 8c e9 01 c0       	push   0xc001e98c
c0014fc3:	e8 18 55 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0014fc8:	83 c4 10             	add    esp,0x10
c0014fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fce:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fd1:	8d 50 19             	lea    edx,[eax+0x19]
c0014fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd7:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fda:	eb 2b                	jmp    c0015007 <opcodeFault(regs*, void*)+0x7e>
c0014fdc:	83 ec 0c             	sub    esp,0xc
c0014fdf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0014fe2:	e8 a0 fa ff ff       	call   c0014a87 <displayDebugInfo(regs*)>
c0014fe7:	83 c4 10             	add    esp,0x10
c0014fea:	83 ec 0c             	sub    esp,0xc
c0014fed:	68 8f e8 01 c0       	push   0xc001e88f
c0014ff2:	e8 27 fe ff ff       	call   c0014e1e <displayProgramFault(char const*)>
c0014ff7:	83 c4 10             	add    esp,0x10
c0014ffa:	83 ec 0c             	sub    esp,0xc
c0014ffd:	6a 00                	push   0x0
c0014fff:	e8 70 ed ff ff       	call   c0013d74 <Thr::terminateFromIRQ(int)>
c0015004:	83 c4 10             	add    esp,0x10
c0015007:	c9                   	leave  
c0015008:	c3                   	ret    

c0015009 <i386SaveCoprocessor(void*)>:
c0015009:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001500d:	83 c0 3f             	add    eax,0x3f
c0015010:	83 e0 c0             	and    eax,0xffffffc0
c0015013:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015017:	ff 25 2c 38 02 c0    	jmp    DWORD PTR ds:0xc002382c

c001501d <i386LoadCoprocessor(void*)>:
c001501d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015021:	83 c0 3f             	add    eax,0x3f
c0015024:	83 e0 c0             	and    eax,0xffffffc0
c0015027:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001502b:	ff 25 28 38 02 c0    	jmp    DWORD PTR ds:0xc0023828

c0015031 <x87EmulHandler(regs*, void*)>:
c0015031:	53                   	push   ebx
c0015032:	83 ec 08             	sub    esp,0x8
c0015035:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001503a:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c001503e:	74 10                	je     c0015050 <x87EmulHandler(regs*, void*)+0x1f>
c0015040:	83 ec 0c             	sub    esp,0xc
c0015043:	68 9c e8 01 c0       	push   0xc001e89c
c0015048:	e8 0e b1 ff ff       	call   c001015b <KePanic(char const*)>
c001504d:	83 c4 10             	add    esp,0x10
c0015050:	0f 20 c0             	mov    eax,cr0
c0015053:	a8 08                	test   al,0x8
c0015055:	74 59                	je     c00150b0 <x87EmulHandler(regs*, void*)+0x7f>
c0015057:	0f 06                	clts   
c0015059:	a1 24 38 02 c0       	mov    eax,ds:0xc0023824
c001505e:	85 c0                	test   eax,eax
c0015060:	74 0e                	je     c0015070 <x87EmulHandler(regs*, void*)+0x3f>
c0015062:	83 ec 0c             	sub    esp,0xc
c0015065:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015068:	e8 9c ff ff ff       	call   c0015009 <i386SaveCoprocessor(void*)>
c001506d:	83 c4 10             	add    esp,0x10
c0015070:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015076:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001507a:	75 12                	jne    c001508e <x87EmulHandler(regs*, void*)+0x5d>
c001507c:	83 ec 0c             	sub    esp,0xc
c001507f:	68 40 02 00 00       	push   0x240
c0015084:	e8 30 27 ff ff       	call   c00077b9 <malloc>
c0015089:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001508c:	eb 10                	jmp    c001509e <x87EmulHandler(regs*, void*)+0x6d>
c001508e:	83 ec 0c             	sub    esp,0xc
c0015091:	a1 24 38 02 c0       	mov    eax,ds:0xc0023824
c0015096:	ff 70 55             	push   DWORD PTR [eax+0x55]
c0015099:	e8 7f ff ff ff       	call   c001501d <i386LoadCoprocessor(void*)>
c001509e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00150a3:	83 c4 10             	add    esp,0x10
c00150a6:	a3 24 38 02 c0       	mov    ds:0xc0023824,eax
c00150ab:	83 c4 08             	add    esp,0x8
c00150ae:	5b                   	pop    ebx
c00150af:	c3                   	ret    
c00150b0:	83 ec 0c             	sub    esp,0xc
c00150b3:	68 b0 e8 01 c0       	push   0xc001e8b0
c00150b8:	e8 23 54 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00150bd:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c00150c5:	83 c4 18             	add    esp,0x18
c00150c8:	5b                   	pop    ebx
c00150c9:	e9 a6 ec ff ff       	jmp    c0013d74 <Thr::terminateFromIRQ(int)>

c00150ce <HalInitialiseCoprocessor()>:
c00150ce:	83 ec 10             	sub    esp,0x10
c00150d1:	c7 05 24 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023824,0x0
c00150db:	6a 00                	push   0x0
c00150dd:	68 31 50 01 c0       	push   0xc0015031
c00150e2:	6a 07                	push   0x7
c00150e4:	e8 6b 6d ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00150e9:	e8 92 65 00 00       	call   c001b680 <avxDetect>
c00150ee:	83 c4 10             	add    esp,0x10
c00150f1:	85 c0                	test   eax,eax
c00150f3:	74 1c                	je     c0015111 <HalInitialiseCoprocessor()+0x43>
c00150f5:	c7 05 2c 38 02 c0 aa b6 01 c0 	mov    DWORD PTR ds:0xc002382c,0xc001b6aa
c00150ff:	c7 05 28 38 02 c0 bb b6 01 c0 	mov    DWORD PTR ds:0xc0023828,0xc001b6bb
c0015109:	83 c4 0c             	add    esp,0xc
c001510c:	e9 bb 65 00 00       	jmp    c001b6cc <avxInit>
c0015111:	e8 ea 67 00 00       	call   c001b900 <absolutelyNoChanceInHell>
c0015116:	85 c0                	test   eax,eax
c0015118:	74 1c                	je     c0015136 <HalInitialiseCoprocessor()+0x68>
c001511a:	c7 05 2c 38 02 c0 18 b9 01 c0 	mov    DWORD PTR ds:0xc002382c,0xc001b918
c0015124:	c7 05 28 38 02 c0 20 b9 01 c0 	mov    DWORD PTR ds:0xc0023828,0xc001b920
c001512e:	83 c4 0c             	add    esp,0xc
c0015131:	e9 f2 67 00 00       	jmp    c001b928 <sseInit>
c0015136:	e8 0b 68 00 00       	call   c001b946 <x87Detect>
c001513b:	85 c0                	test   eax,eax
c001513d:	74 1c                	je     c001515b <HalInitialiseCoprocessor()+0x8d>
c001513f:	c7 05 2c 38 02 c0 61 b9 01 c0 	mov    DWORD PTR ds:0xc002382c,0xc001b961
c0015149:	c7 05 28 38 02 c0 68 b9 01 c0 	mov    DWORD PTR ds:0xc0023828,0xc001b968
c0015153:	83 c4 0c             	add    esp,0xc
c0015156:	e9 14 68 00 00       	jmp    c001b96f <x87Init>
c001515b:	c7 05 2c 38 02 c0 54 4a 01 c0 	mov    DWORD PTR ds:0xc002382c,0xc0014a54
c0015165:	c7 05 28 38 02 c0 54 4a 01 c0 	mov    DWORD PTR ds:0xc0023828,0xc0014a54
c001516f:	0f 20 c0             	mov    eax,cr0
c0015172:	83 c8 04             	or     eax,0x4
c0015175:	0f 22 c0             	mov    cr0,eax
c0015178:	83 c4 0c             	add    esp,0xc
c001517b:	c3                   	ret    

c001517c <HalPanic(char const*)>:
c001517c:	53                   	push   ebx
c001517d:	83 ec 10             	sub    esp,0x10
c0015180:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0015184:	fa                   	cli    
c0015185:	53                   	push   ebx
c0015186:	68 c6 e8 01 c0       	push   0xc001e8c6
c001518b:	e8 50 53 ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c0015190:	83 c4 0c             	add    esp,0xc
c0015193:	6a 01                	push   0x1
c0015195:	6a 0f                	push   0xf
c0015197:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c001519d:	e8 a8 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151a2:	58                   	pop    eax
c00151a3:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c00151a9:	e8 94 32 ff ff       	call   c0008442 <VgaText::clearScreen()>
c00151ae:	5a                   	pop    edx
c00151af:	59                   	pop    ecx
c00151b0:	68 68 d3 01 c0       	push   0xc001d368
c00151b5:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c00151bb:	e8 c2 30 ff ff       	call   c0008282 <VgaText::setTitle(char*)>
c00151c0:	83 c4 0c             	add    esp,0xc
c00151c3:	6a 01                	push   0x1
c00151c5:	6a 0f                	push   0xf
c00151c7:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c00151cd:	e8 78 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151d2:	58                   	pop    eax
c00151d3:	5a                   	pop    edx
c00151d4:	68 df e8 01 c0       	push   0xc001e8df
c00151d9:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c00151df:	e8 52 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c00151e4:	83 c4 0c             	add    esp,0xc
c00151e7:	6a 0f                	push   0xf
c00151e9:	6a 01                	push   0x1
c00151eb:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c00151f1:	e8 54 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00151f6:	59                   	pop    ecx
c00151f7:	58                   	pop    eax
c00151f8:	68 e8 e8 01 c0       	push   0xc001e8e8
c00151fd:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c0015203:	e8 2e 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015208:	83 c4 0c             	add    esp,0xc
c001520b:	6a 01                	push   0x1
c001520d:	6a 0f                	push   0xf
c001520f:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c0015215:	e8 30 30 ff ff       	call   c000824a <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001521a:	58                   	pop    eax
c001521b:	5a                   	pop    edx
c001521c:	68 2c e9 01 c0       	push   0xc001e92c
c0015221:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c0015227:	e8 0a 35 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001522c:	59                   	pop    ecx
c001522d:	58                   	pop    eax
c001522e:	68 f5 e8 01 c0       	push   0xc001e8f5
c0015233:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c0015239:	e8 f8 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001523e:	58                   	pop    eax
c001523f:	5a                   	pop    edx
c0015240:	68 2f e9 01 c0       	push   0xc001e92f
c0015245:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c001524b:	e8 e6 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015250:	59                   	pop    ecx
c0015251:	58                   	pop    eax
c0015252:	53                   	push   ebx
c0015253:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c0015259:	e8 d8 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001525e:	58                   	pop    eax
c001525f:	5a                   	pop    edx
c0015260:	68 2c e9 01 c0       	push   0xc001e92c
c0015265:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c001526b:	e8 c6 34 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0015270:	83 c4 10             	add    esp,0x10
c0015273:	eb fe                	jmp    c0015273 <HalPanic(char const*)+0xf7>

c0015275 <HalQueryPerformanceCounter()>:
c0015275:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c001527a:	31 d2                	xor    edx,edx
c001527c:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015282:	31 c0                	xor    eax,eax
c0015284:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c001528b:	74 02                	je     c001528f <HalQueryPerformanceCounter()+0x1a>
c001528d:	0f 31                	rdtsc  
c001528f:	c3                   	ret    

c0015290 <HalInitialise()>:
c0015290:	53                   	push   ebx
c0015291:	83 ec 08             	sub    esp,0x8
c0015294:	e8 ee 6d ff ff       	call   c000c087 <setupINTS()>
c0015299:	80 3d a0 2d 02 c0 00 	cmp    BYTE PTR ds:0xc0022da0,0x0
c00152a0:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00152a5:	75 07                	jne    c00152ae <HalInitialise()+0x1e>
c00152a7:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c00152ae:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c00152b4:	83 e0 01             	and    eax,0x1
c00152b7:	a2 20 38 02 c0       	mov    ds:0xc0023820,al
c00152bc:	e8 a7 02 00 00       	call   c0015568 <picOpen()>
c00152c1:	80 3d 20 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023820,0x0
c00152c8:	74 0a                	je     c00152d4 <HalInitialise()+0x44>
c00152ca:	e8 e1 01 00 00       	call   c00154b0 <picDisable()>
c00152cf:	e8 26 5d 00 00       	call   c001affa <apicOpen()>
c00152d4:	bb 0f 00 00 00       	mov    ebx,0xf
c00152d9:	50                   	push   eax
c00152da:	6a 00                	push   0x0
c00152dc:	68 55 4f 01 c0       	push   0xc0014f55
c00152e1:	6a 00                	push   0x0
c00152e3:	e8 6c 6b ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152e8:	83 c4 0c             	add    esp,0xc
c00152eb:	6a 00                	push   0x0
c00152ed:	68 55 4f 01 c0       	push   0xc0014f55
c00152f2:	6a 01                	push   0x1
c00152f4:	e8 5b 6b ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152f9:	83 c4 0c             	add    esp,0xc
c00152fc:	6a 00                	push   0x0
c00152fe:	68 55 4a 01 c0       	push   0xc0014a55
c0015303:	6a 02                	push   0x2
c0015305:	e8 4a 6b ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001530a:	83 c4 0c             	add    esp,0xc
c001530d:	6a 00                	push   0x0
c001530f:	68 55 4f 01 c0       	push   0xc0014f55
c0015314:	6a 03                	push   0x3
c0015316:	e8 39 6b ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001531b:	83 c4 0c             	add    esp,0xc
c001531e:	6a 00                	push   0x0
c0015320:	68 55 4f 01 c0       	push   0xc0014f55
c0015325:	6a 04                	push   0x4
c0015327:	e8 28 6b ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001532c:	83 c4 0c             	add    esp,0xc
c001532f:	6a 00                	push   0x0
c0015331:	68 55 4f 01 c0       	push   0xc0014f55
c0015336:	6a 05                	push   0x5
c0015338:	e8 17 6b ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001533d:	83 c4 0c             	add    esp,0xc
c0015340:	6a 00                	push   0x0
c0015342:	68 89 4f 01 c0       	push   0xc0014f89
c0015347:	6a 06                	push   0x6
c0015349:	e8 06 6b ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001534e:	83 c4 0c             	add    esp,0xc
c0015351:	6a 00                	push   0x0
c0015353:	68 6e 4a 01 c0       	push   0xc0014a6e
c0015358:	6a 08                	push   0x8
c001535a:	e8 f5 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c001535f:	83 c4 0c             	add    esp,0xc
c0015362:	6a 00                	push   0x0
c0015364:	68 55 4f 01 c0       	push   0xc0014f55
c0015369:	6a 09                	push   0x9
c001536b:	e8 e4 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015370:	83 c4 0c             	add    esp,0xc
c0015373:	6a 00                	push   0x0
c0015375:	68 55 4f 01 c0       	push   0xc0014f55
c001537a:	6a 0a                	push   0xa
c001537c:	e8 d3 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015381:	83 c4 0c             	add    esp,0xc
c0015384:	6a 00                	push   0x0
c0015386:	68 55 4f 01 c0       	push   0xc0014f55
c001538b:	6a 0b                	push   0xb
c001538d:	e8 c2 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015392:	83 c4 0c             	add    esp,0xc
c0015395:	6a 00                	push   0x0
c0015397:	68 6a 4e 01 c0       	push   0xc0014e6a
c001539c:	6a 0d                	push   0xd
c001539e:	e8 b1 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153a3:	83 c4 0c             	add    esp,0xc
c00153a6:	6a 00                	push   0x0
c00153a8:	68 cf 4e 01 c0       	push   0xc0014ecf
c00153ad:	6a 0e                	push   0xe
c00153af:	e8 a0 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153b4:	83 c4 10             	add    esp,0x10
c00153b7:	50                   	push   eax
c00153b8:	6a 00                	push   0x0
c00153ba:	68 55 4f 01 c0       	push   0xc0014f55
c00153bf:	53                   	push   ebx
c00153c0:	43                   	inc    ebx
c00153c1:	e8 8e 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153c6:	83 c4 10             	add    esp,0x10
c00153c9:	83 fb 1e             	cmp    ebx,0x1e
c00153cc:	75 e9                	jne    c00153b7 <HalInitialise()+0x127>
c00153ce:	50                   	push   eax
c00153cf:	6a 00                	push   0x0
c00153d1:	68 3b 10 01 c0       	push   0xc001103b
c00153d6:	6a 60                	push   0x60
c00153d8:	e8 77 6a ff ff       	call   c000be54 <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153dd:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00153e2:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00153ec:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00153f3:	e8 c1 23 ff ff       	call   c00077b9 <malloc>
c00153f8:	89 04 24             	mov    DWORD PTR [esp],eax
c00153fb:	89 c3                	mov    ebx,eax
c00153fd:	e8 2e 09 00 00       	call   c0015d30 <RTC::RTC()>
c0015402:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c001540c:	5a                   	pop    edx
c001540d:	59                   	pop    ecx
c001540e:	53                   	push   ebx
c001540f:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015415:	e8 06 65 ff ff       	call   c000b920 <Device::addChild(Device*)>
c001541a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001541c:	6a 00                	push   0x0
c001541e:	6a 00                	push   0x0
c0015420:	6a 00                	push   0x0
c0015422:	53                   	push   ebx
c0015423:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015426:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c001542b:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0015431:	83 c4 28             	add    esp,0x28
c0015434:	5b                   	pop    ebx
c0015435:	c3                   	ret    

c0015436 <HalMakeBeep(int)>:
c0015436:	53                   	push   ebx
c0015437:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001543b:	85 db                	test   ebx,ebx
c001543d:	75 07                	jne    c0015446 <HalMakeBeep(int)+0x10>
c001543f:	e4 61                	in     al,0x61
c0015441:	83 e0 fc             	and    eax,0xfffffffc
c0015444:	eb 26                	jmp    c001546c <HalMakeBeep(int)+0x36>
c0015446:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001544b:	99                   	cdq    
c001544c:	f7 fb                	idiv   ebx
c001544e:	89 c1                	mov    ecx,eax
c0015450:	b0 b6                	mov    al,0xb6
c0015452:	e6 43                	out    0x43,al
c0015454:	88 c8                	mov    al,cl
c0015456:	e6 42                	out    0x42,al
c0015458:	89 c8                	mov    eax,ecx
c001545a:	c1 e8 08             	shr    eax,0x8
c001545d:	e6 42                	out    0x42,al
c001545f:	e4 61                	in     al,0x61
c0015461:	88 c2                	mov    dl,al
c0015463:	83 ca 03             	or     edx,0x3
c0015466:	38 c2                	cmp    dl,al
c0015468:	74 04                	je     c001546e <HalMakeBeep(int)+0x38>
c001546a:	88 d0                	mov    al,dl
c001546c:	e6 61                	out    0x61,al
c001546e:	5b                   	pop    ebx
c001546f:	c3                   	ret    

c0015470 <HalGetRand()>:
c0015470:	31 c0                	xor    eax,eax
c0015472:	c3                   	ret    

c0015473 <HalEndOfInterrupt(int)>:
c0015473:	80 3d 20 38 02 c0 00 	cmp    BYTE PTR ds:0xc0023820,0x0
c001547a:	74 23                	je     c001549f <HalEndOfInterrupt(int)+0x2c>
c001547c:	83 ec 14             	sub    esp,0x14
c001547f:	6a 1b                	push   0x1b
c0015481:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015487:	e8 66 19 ff ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001548c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0015491:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c001549b:	83 c4 1c             	add    esp,0x1c
c001549e:	c3                   	ret    
c001549f:	e9 54 02 00 00       	jmp    c00156f8 <picEOI(int)>

c00154a4 <HalRestart()>:
c00154a4:	c3                   	ret    

c00154a5 <HalShutdown()>:
c00154a5:	c3                   	ret    

c00154a6 <HalSleep()>:
c00154a6:	c3                   	ret    
c00154a7:	90                   	nop

c00154a8 <picIoWait()>:
c00154a8:	eb 00                	jmp    c00154aa <picIoWait()+0x2>
c00154aa:	eb 00                	jmp    c00154ac <picIoWait()+0x4>
c00154ac:	90                   	nop
c00154ad:	c3                   	ret    
c00154ae:	66 90                	xchg   ax,ax

c00154b0 <picDisable()>:
c00154b0:	83 ec 10             	sub    esp,0x10
c00154b3:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c00154ba:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c00154bf:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00154c3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00154c8:	ee                   	out    dx,al
c00154c9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00154d0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00154d5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00154d9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00154de:	ee                   	out    dx,al
c00154df:	90                   	nop
c00154e0:	83 c4 10             	add    esp,0x10
c00154e3:	c3                   	ret    

c00154e4 <picGetIRQReg(int)>:
c00154e4:	83 ec 10             	sub    esp,0x10
c00154e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00154eb:	25 ff 00 00 00       	and    eax,0xff
c00154f0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00154f7:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00154fb:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00154ff:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015504:	ee                   	out    dx,al
c0015505:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015509:	25 ff 00 00 00       	and    eax,0xff
c001550e:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0015515:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0015519:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001551d:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015522:	ee                   	out    dx,al
c0015523:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001552a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001552f:	89 c2                	mov    edx,eax
c0015531:	ec                   	in     al,dx
c0015532:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015536:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001553a:	25 ff 00 00 00       	and    eax,0xff
c001553f:	c1 e0 08             	shl    eax,0x8
c0015542:	89 c1                	mov    ecx,eax
c0015544:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001554b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015550:	89 c2                	mov    edx,eax
c0015552:	ec                   	in     al,dx
c0015553:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015557:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001555b:	25 ff 00 00 00       	and    eax,0xff
c0015560:	09 c8                	or     eax,ecx
c0015562:	83 c4 10             	add    esp,0x10
c0015565:	c3                   	ret    
c0015566:	66 90                	xchg   ax,ax

c0015568 <picOpen()>:
c0015568:	83 ec 50             	sub    esp,0x50
c001556b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015572:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015577:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001557b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001557f:	ee                   	out    dx,al
c0015580:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015587:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001558c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015590:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015594:	ee                   	out    dx,al
c0015595:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001559d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c00155a5:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c00155ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00155b0:	89 c2                	mov    edx,eax
c00155b2:	ec                   	in     al,dx
c00155b3:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c00155b7:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00155bb:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c00155bf:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00155c6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00155ca:	89 c2                	mov    edx,eax
c00155cc:	ec                   	in     al,dx
c00155cd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00155d1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00155d5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00155d9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00155e0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00155e5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00155e9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00155ed:	ee                   	out    dx,al
c00155ee:	e8 b5 fe ff ff       	call   c00154a8 <picIoWait()>
c00155f3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00155fa:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00155ff:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0015603:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015607:	ee                   	out    dx,al
c0015608:	e8 9b fe ff ff       	call   c00154a8 <picIoWait()>
c001560d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0015611:	25 ff 00 00 00       	and    eax,0xff
c0015616:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c001561d:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015621:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015625:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015629:	ee                   	out    dx,al
c001562a:	e8 79 fe ff ff       	call   c00154a8 <picIoWait()>
c001562f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015633:	25 ff 00 00 00       	and    eax,0xff
c0015638:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001563f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015643:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015647:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001564b:	ee                   	out    dx,al
c001564c:	e8 57 fe ff ff       	call   c00154a8 <picIoWait()>
c0015651:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015658:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001565d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015661:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015665:	ee                   	out    dx,al
c0015666:	e8 3d fe ff ff       	call   c00154a8 <picIoWait()>
c001566b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015672:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015677:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001567b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001567f:	ee                   	out    dx,al
c0015680:	e8 23 fe ff ff       	call   c00154a8 <picIoWait()>
c0015685:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001568c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015691:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015695:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015699:	ee                   	out    dx,al
c001569a:	e8 09 fe ff ff       	call   c00154a8 <picIoWait()>
c001569f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c00156a6:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c00156ab:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c00156af:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00156b3:	ee                   	out    dx,al
c00156b4:	e8 ef fd ff ff       	call   c00154a8 <picIoWait()>
c00156b9:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c00156bd:	25 ff 00 00 00       	and    eax,0xff
c00156c2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00156c9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00156cd:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00156d1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00156d5:	ee                   	out    dx,al
c00156d6:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c00156da:	25 ff 00 00 00       	and    eax,0xff
c00156df:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00156e6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00156ea:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00156ee:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00156f2:	ee                   	out    dx,al
c00156f3:	90                   	nop
c00156f4:	83 c4 50             	add    esp,0x50
c00156f7:	c3                   	ret    

c00156f8 <picEOI(int)>:
c00156f8:	83 ec 10             	sub    esp,0x10
c00156fb:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015700:	75 22                	jne    c0015724 <picEOI(int)+0x2c>
c0015702:	6a 0b                	push   0xb
c0015704:	e8 db fd ff ff       	call   c00154e4 <picGetIRQReg(int)>
c0015709:	83 c4 04             	add    esp,0x4
c001570c:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0015711:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015716:	25 ff ff 00 00       	and    eax,0xffff
c001571b:	25 80 00 00 00       	and    eax,0x80
c0015720:	74 72                	je     c0015794 <picEOI(int)+0x9c>
c0015722:	66 90                	xchg   ax,ax
c0015724:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015729:	75 31                	jne    c001575c <picEOI(int)+0x64>
c001572b:	6a 0b                	push   0xb
c001572d:	e8 b2 fd ff ff       	call   c00154e4 <picGetIRQReg(int)>
c0015732:	83 c4 04             	add    esp,0x4
c0015735:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001573a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001573e:	66 85 c0             	test   ax,ax
c0015741:	78 19                	js     c001575c <picEOI(int)+0x64>
c0015743:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001574a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001574f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015753:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015758:	ee                   	out    dx,al
c0015759:	eb 3d                	jmp    c0015798 <picEOI(int)+0xa0>
c001575b:	90                   	nop
c001575c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015761:	7e 19                	jle    c001577c <picEOI(int)+0x84>
c0015763:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001576a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001576f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015773:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015778:	ee                   	out    dx,al
c0015779:	8d 76 00             	lea    esi,[esi+0x0]
c001577c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015783:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015788:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001578c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015791:	ee                   	out    dx,al
c0015792:	eb 04                	jmp    c0015798 <picEOI(int)+0xa0>
c0015794:	90                   	nop
c0015795:	8d 76 00             	lea    esi,[esi+0x0]
c0015798:	83 c4 10             	add    esp,0x10
c001579b:	c3                   	ret    

c001579c <RTC::open(int, int, void*)>:
c001579c:	31 c0                	xor    eax,eax
c001579e:	c3                   	ret    
c001579f:	90                   	nop

c00157a0 <RTC::close(int, int, void*)>:
c00157a0:	31 c0                	xor    eax,eax
c00157a2:	c3                   	ret    
c00157a3:	90                   	nop

c00157a4 <RTC::timeInSecondsUTC()>:
c00157a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00157a8:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00157ae:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00157b4:	c3                   	ret    
c00157b5:	90                   	nop

c00157b6 <RTC::timeInDatetimeUTC()>:
c00157b6:	53                   	push   ebx
c00157b7:	83 ec 14             	sub    esp,0x14
c00157ba:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00157be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00157c2:	8b 10                	mov    edx,DWORD PTR [eax]
c00157c4:	50                   	push   eax
c00157c5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00157c8:	83 c4 0c             	add    esp,0xc
c00157cb:	52                   	push   edx
c00157cc:	50                   	push   eax
c00157cd:	53                   	push   ebx
c00157ce:	e8 c1 5e ff ff       	call   c000b694 <secondsToDatetime(unsigned long long)>
c00157d3:	89 d8                	mov    eax,ebx
c00157d5:	83 c4 14             	add    esp,0x14
c00157d8:	5b                   	pop    ebx
c00157d9:	c2 04 00             	ret    0x4

c00157dc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00157dc:	56                   	push   esi
c00157dd:	53                   	push   ebx
c00157de:	83 ec 14             	sub    esp,0x14
c00157e1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00157e5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00157e7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00157ea:	8d 44 24 08          	lea    eax,[esp+0x8]
c00157ee:	52                   	push   edx
c00157ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00157f7:	50                   	push   eax
c00157f8:	e8 97 5e ff ff       	call   c000b694 <secondsToDatetime(unsigned long long)>
c00157fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015801:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015805:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0015809:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c001580d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0015811:	89 f0                	mov    eax,esi
c0015813:	83 c4 20             	add    esp,0x20
c0015816:	5b                   	pop    ebx
c0015817:	5e                   	pop    esi
c0015818:	ff e0                	jmp    eax

c001581a <RTC::~RTC()>:
c001581a:	83 ec 0c             	sub    esp,0xc
c001581d:	ba cc e9 01 c0       	mov    edx,0xc001e9cc
c0015822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015826:	89 10                	mov    DWORD PTR [eax],edx
c0015828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001582c:	83 ec 0c             	sub    esp,0xc
c001582f:	50                   	push   eax
c0015830:	e8 e3 5b ff ff       	call   c000b418 <Clock::~Clock()>
c0015835:	83 c4 10             	add    esp,0x10
c0015838:	90                   	nop
c0015839:	83 c4 0c             	add    esp,0xc
c001583c:	c3                   	ret    
c001583d:	90                   	nop

c001583e <RTC::~RTC()>:
c001583e:	83 ec 0c             	sub    esp,0xc
c0015841:	83 ec 0c             	sub    esp,0xc
c0015844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015848:	e8 cd ff ff ff       	call   c001581a <RTC::~RTC()>
c001584d:	83 c4 10             	add    esp,0x10
c0015850:	83 ec 08             	sub    esp,0x8
c0015853:	68 60 01 00 00       	push   0x160
c0015858:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001585c:	e8 89 4b ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c0015861:	83 c4 10             	add    esp,0x10
c0015864:	83 c4 0c             	add    esp,0xc
c0015867:	c3                   	ret    

c0015868 <RTC::get_update_in_progress_flag()>:
c0015868:	83 ec 14             	sub    esp,0x14
c001586b:	6a 0a                	push   0xa
c001586d:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015873:	e8 2e 16 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015878:	83 c4 1c             	add    esp,0x1c
c001587b:	c0 e8 07             	shr    al,0x7
c001587e:	c3                   	ret    
c001587f:	90                   	nop

c0015880 <RTC::completeRTCRefresh()>:
c0015880:	55                   	push   ebp
c0015881:	57                   	push   edi
c0015882:	56                   	push   esi
c0015883:	53                   	push   ebx
c0015884:	83 ec 2c             	sub    esp,0x2c
c0015887:	8b 1d ac 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022aac
c001588d:	83 ec 0c             	sub    esp,0xc
c0015890:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015894:	e8 cf ff ff ff       	call   c0015868 <RTC::get_update_in_progress_flag()>
c0015899:	83 c4 10             	add    esp,0x10
c001589c:	84 c0                	test   al,al
c001589e:	74 0e                	je     c00158ae <RTC::completeRTCRefresh()+0x2e>
c00158a0:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00158a6:	3b 05 ac 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022aac
c00158ac:	73 df                	jae    c001588d <RTC::completeRTCRefresh()+0xd>
c00158ae:	55                   	push   ebp
c00158af:	55                   	push   ebp
c00158b0:	6a 00                	push   0x0
c00158b2:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00158b8:	e8 e9 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158bd:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00158c1:	58                   	pop    eax
c00158c2:	5a                   	pop    edx
c00158c3:	6a 02                	push   0x2
c00158c5:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00158cb:	e8 d6 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158d0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00158d4:	59                   	pop    ecx
c00158d5:	5b                   	pop    ebx
c00158d6:	6a 04                	push   0x4
c00158d8:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00158de:	e8 c3 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158e3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00158e7:	5e                   	pop    esi
c00158e8:	5f                   	pop    edi
c00158e9:	6a 07                	push   0x7
c00158eb:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00158f1:	e8 b0 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00158f6:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c00158fa:	5d                   	pop    ebp
c00158fb:	58                   	pop    eax
c00158fc:	6a 08                	push   0x8
c00158fe:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015904:	e8 9d 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015909:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c001590d:	58                   	pop    eax
c001590e:	5a                   	pop    edx
c001590f:	6a 09                	push   0x9
c0015911:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015917:	e8 8a 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001591c:	83 c4 10             	add    esp,0x10
c001591f:	0f b6 e8             	movzx  ebp,al
c0015922:	8b 1d ac 2a 02 c0    	mov    ebx,DWORD PTR ds:0xc0022aac
c0015928:	83 ec 0c             	sub    esp,0xc
c001592b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001592f:	e8 34 ff ff ff       	call   c0015868 <RTC::get_update_in_progress_flag()>
c0015934:	83 c4 10             	add    esp,0x10
c0015937:	84 c0                	test   al,al
c0015939:	74 0e                	je     c0015949 <RTC::completeRTCRefresh()+0xc9>
c001593b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015941:	3b 05 ac 2a 02 c0    	cmp    eax,DWORD PTR ds:0xc0022aac
c0015947:	73 df                	jae    c0015928 <RTC::completeRTCRefresh()+0xa8>
c0015949:	50                   	push   eax
c001594a:	50                   	push   eax
c001594b:	6a 00                	push   0x0
c001594d:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015953:	e8 4e 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015958:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c001595c:	58                   	pop    eax
c001595d:	5a                   	pop    edx
c001595e:	6a 02                	push   0x2
c0015960:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015966:	e8 3b 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001596b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001596f:	59                   	pop    ecx
c0015970:	5b                   	pop    ebx
c0015971:	6a 04                	push   0x4
c0015973:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015979:	e8 28 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001597e:	5e                   	pop    esi
c001597f:	88 c3                	mov    bl,al
c0015981:	5f                   	pop    edi
c0015982:	6a 07                	push   0x7
c0015984:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c001598a:	e8 17 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c001598f:	89 c6                	mov    esi,eax
c0015991:	58                   	pop    eax
c0015992:	5a                   	pop    edx
c0015993:	6a 08                	push   0x8
c0015995:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c001599b:	e8 06 15 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00159a0:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00159a4:	59                   	pop    ecx
c00159a5:	5f                   	pop    edi
c00159a6:	6a 09                	push   0x9
c00159a8:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c00159ae:	e8 f3 14 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c00159b3:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c00159b7:	0f b6 f8             	movzx  edi,al
c00159ba:	83 c4 10             	add    esp,0x10
c00159bd:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c00159c1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c00159c5:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c00159c9:	89 f1                	mov    ecx,esi
c00159cb:	0f 94 c0             	sete   al
c00159ce:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c00159d2:	0f 94 c2             	sete   dl
c00159d5:	21 d0                	and    eax,edx
c00159d7:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c00159db:	0f 94 c2             	sete   dl
c00159de:	21 c2                	and    edx,eax
c00159e0:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c00159e4:	0f 94 c0             	sete   al
c00159e7:	21 d0                	and    eax,edx
c00159e9:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c00159ed:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c00159f1:	0f 94 c1             	sete   cl
c00159f4:	84 c8                	test   al,cl
c00159f6:	75 29                	jne    c0015a21 <RTC::completeRTCRefresh()+0x1a1>
c00159f8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c00159fc:	89 fd                	mov    ebp,edi
c00159fe:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015a02:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015a06:	89 f0                	mov    eax,esi
c0015a08:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015a0c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015a10:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015a14:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015a18:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015a1c:	e9 01 ff ff ff       	jmp    c0015922 <RTC::completeRTCRefresh()+0xa2>
c0015a21:	39 fd                	cmp    ebp,edi
c0015a23:	75 d3                	jne    c00159f8 <RTC::completeRTCRefresh()+0x178>
c0015a25:	55                   	push   ebp
c0015a26:	55                   	push   ebp
c0015a27:	6a 0b                	push   0xb
c0015a29:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015a2f:	e8 72 14 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015a34:	83 c4 10             	add    esp,0x10
c0015a37:	89 c5                	mov    ebp,eax
c0015a39:	a8 04                	test   al,0x4
c0015a3b:	75 78                	jne    c0015ab5 <RTC::completeRTCRefresh()+0x235>
c0015a3d:	b1 0a                	mov    cl,0xa
c0015a3f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015a43:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015a47:	83 e2 0f             	and    edx,0xf
c0015a4a:	c0 e8 04             	shr    al,0x4
c0015a4d:	c1 ef 04             	shr    edi,0x4
c0015a50:	f6 e1                	mul    cl
c0015a52:	6b ff 0a             	imul   edi,edi,0xa
c0015a55:	01 d0                	add    eax,edx
c0015a57:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015a5b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015a5f:	83 e2 0f             	and    edx,0xf
c0015a62:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015a66:	c0 e8 04             	shr    al,0x4
c0015a69:	f6 e1                	mul    cl
c0015a6b:	01 d0                	add    eax,edx
c0015a6d:	88 da                	mov    dl,bl
c0015a6f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015a73:	83 e2 0f             	and    edx,0xf
c0015a76:	88 d8                	mov    al,bl
c0015a78:	83 e3 80             	and    ebx,0xffffff80
c0015a7b:	c0 e8 04             	shr    al,0x4
c0015a7e:	83 e0 07             	and    eax,0x7
c0015a81:	f6 e1                	mul    cl
c0015a83:	01 d0                	add    eax,edx
c0015a85:	89 f2                	mov    edx,esi
c0015a87:	09 c3                	or     ebx,eax
c0015a89:	83 e2 0f             	and    edx,0xf
c0015a8c:	89 f0                	mov    eax,esi
c0015a8e:	c0 e8 04             	shr    al,0x4
c0015a91:	f6 e1                	mul    cl
c0015a93:	8d 34 02             	lea    esi,[edx+eax*1]
c0015a96:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015a9a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015a9e:	83 e2 0f             	and    edx,0xf
c0015aa1:	c0 e8 04             	shr    al,0x4
c0015aa4:	f6 e1                	mul    cl
c0015aa6:	01 d0                	add    eax,edx
c0015aa8:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015aac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015ab0:	83 e0 0f             	and    eax,0xf
c0015ab3:	01 c7                	add    edi,eax
c0015ab5:	83 e5 02             	and    ebp,0x2
c0015ab8:	75 14                	jne    c0015ace <RTC::completeRTCRefresh()+0x24e>
c0015aba:	84 db                	test   bl,bl
c0015abc:	79 10                	jns    c0015ace <RTC::completeRTCRefresh()+0x24e>
c0015abe:	83 e3 7f             	and    ebx,0x7f
c0015ac1:	b9 18 00 00 00       	mov    ecx,0x18
c0015ac6:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015ac9:	99                   	cdq    
c0015aca:	f7 f9                	idiv   ecx
c0015acc:	88 d3                	mov    bl,dl
c0015ace:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015ad4:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015ada:	77 06                	ja     c0015ae2 <RTC::completeRTCRefresh()+0x262>
c0015adc:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015ae2:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015ae7:	31 d2                	xor    edx,edx
c0015ae9:	c1 e1 10             	shl    ecx,0x10
c0015aec:	89 d7                	mov    edi,edx
c0015aee:	c1 e5 10             	shl    ebp,0x10
c0015af1:	31 c0                	xor    eax,eax
c0015af3:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015af9:	09 cf                	or     edi,ecx
c0015afb:	89 fa                	mov    edx,edi
c0015afd:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015b01:	88 da                	mov    dl,bl
c0015b03:	89 f3                	mov    ebx,esi
c0015b05:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015b09:	88 d8                	mov    al,bl
c0015b0b:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015b0f:	0f b7 c8             	movzx  ecx,ax
c0015b12:	09 e9                	or     ecx,ebp
c0015b14:	89 c8                	mov    eax,ecx
c0015b16:	51                   	push   ecx
c0015b17:	51                   	push   ecx
c0015b18:	52                   	push   edx
c0015b19:	50                   	push   eax
c0015b1a:	e8 e8 59 ff ff       	call   c000b507 <datetimeToSeconds(datetime_t)>
c0015b1f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015b23:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015b29:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015b2f:	83 c4 3c             	add    esp,0x3c
c0015b32:	5b                   	pop    ebx
c0015b33:	5e                   	pop    esi
c0015b34:	5f                   	pop    edi
c0015b35:	5d                   	pop    ebp
c0015b36:	c3                   	ret    
c0015b37:	90                   	nop

c0015b38 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015b38:	55                   	push   ebp
c0015b39:	57                   	push   edi
c0015b3a:	56                   	push   esi
c0015b3b:	53                   	push   ebx
c0015b3c:	83 ec 30             	sub    esp,0x30
c0015b3f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015b43:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015b47:	6a 00                	push   0x0
c0015b49:	6a 00                	push   0x0
c0015b4b:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015b51:	e8 66 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015b56:	83 c4 0c             	add    esp,0xc
c0015b59:	6a 00                	push   0x0
c0015b5b:	6a 02                	push   0x2
c0015b5d:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015b63:	e8 54 14 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015b68:	31 d2                	xor    edx,edx
c0015b6a:	89 f9                	mov    ecx,edi
c0015b6c:	89 f8                	mov    eax,edi
c0015b6e:	c1 e9 10             	shr    ecx,0x10
c0015b71:	0f b6 c4             	movzx  eax,ah
c0015b74:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015b78:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015b7c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015b80:	b9 64 00 00 00       	mov    ecx,0x64
c0015b85:	89 f0                	mov    eax,esi
c0015b87:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015b8b:	89 f0                	mov    eax,esi
c0015b8d:	0f b6 c4             	movzx  eax,ah
c0015b90:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015b94:	89 f0                	mov    eax,esi
c0015b96:	c1 e8 10             	shr    eax,0x10
c0015b99:	66 f7 f1             	div    cx
c0015b9c:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015ba1:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015ba6:	59                   	pop    ecx
c0015ba7:	5b                   	pop    ebx
c0015ba8:	89 fb                	mov    ebx,edi
c0015baa:	6a 0b                	push   0xb
c0015bac:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015bb2:	e8 ef 12 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015bb7:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015bbb:	83 c4 10             	add    esp,0x10
c0015bbe:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015bc3:	75 74                	jne    c0015c39 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015bc5:	b2 0a                	mov    dl,0xa
c0015bc7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015bcb:	0f b6 c1             	movzx  eax,cl
c0015bce:	f6 f2                	div    dl
c0015bd0:	88 c3                	mov    bl,al
c0015bd2:	88 e0                	mov    al,ah
c0015bd4:	c1 e3 04             	shl    ebx,0x4
c0015bd7:	09 c3                	or     ebx,eax
c0015bd9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015bde:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015be2:	f6 f2                	div    dl
c0015be4:	88 c1                	mov    cl,al
c0015be6:	88 e0                	mov    al,ah
c0015be8:	c1 e1 04             	shl    ecx,0x4
c0015beb:	09 c1                	or     ecx,eax
c0015bed:	89 f8                	mov    eax,edi
c0015bef:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015bf3:	0f b6 c0             	movzx  eax,al
c0015bf6:	f6 f2                	div    dl
c0015bf8:	88 c3                	mov    bl,al
c0015bfa:	88 e0                	mov    al,ah
c0015bfc:	c1 e3 04             	shl    ebx,0x4
c0015bff:	09 c3                	or     ebx,eax
c0015c01:	89 f0                	mov    eax,esi
c0015c03:	0f b6 c0             	movzx  eax,al
c0015c06:	f6 f2                	div    dl
c0015c08:	88 c1                	mov    cl,al
c0015c0a:	88 e0                	mov    al,ah
c0015c0c:	c1 e1 04             	shl    ecx,0x4
c0015c0f:	09 c1                	or     ecx,eax
c0015c11:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015c16:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015c1a:	f6 f2                	div    dl
c0015c1c:	88 c1                	mov    cl,al
c0015c1e:	88 e0                	mov    al,ah
c0015c20:	c1 e1 04             	shl    ecx,0x4
c0015c23:	09 c1                	or     ecx,eax
c0015c25:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015c2a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015c2e:	f6 f2                	div    dl
c0015c30:	89 c5                	mov    ebp,eax
c0015c32:	88 e0                	mov    al,ah
c0015c34:	c1 e5 04             	shl    ebp,0x4
c0015c37:	09 c5                	or     ebp,eax
c0015c39:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015c3e:	75 17                	jne    c0015c57 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c40:	80 fb 0b             	cmp    bl,0xb
c0015c43:	76 0c                	jbe    c0015c51 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015c45:	80 eb 0c             	sub    bl,0xc
c0015c48:	75 02                	jne    c0015c4c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015c4a:	b3 0c                	mov    bl,0xc
c0015c4c:	83 cb 80             	or     ebx,0xffffff80
c0015c4f:	eb 06                	jmp    c0015c57 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c51:	84 db                	test   bl,bl
c0015c53:	75 02                	jne    c0015c57 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015c55:	b3 0c                	mov    bl,0xc
c0015c57:	0f b6 db             	movzx  ebx,bl
c0015c5a:	50                   	push   eax
c0015c5b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015c60:	50                   	push   eax
c0015c61:	6a 00                	push   0x0
c0015c63:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015c69:	e8 4e 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c6e:	83 c4 0c             	add    esp,0xc
c0015c71:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015c76:	50                   	push   eax
c0015c77:	6a 02                	push   0x2
c0015c79:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015c7f:	e8 38 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c84:	83 c4 0c             	add    esp,0xc
c0015c87:	53                   	push   ebx
c0015c88:	6a 04                	push   0x4
c0015c8a:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015c90:	e8 27 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c95:	83 c4 0c             	add    esp,0xc
c0015c98:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015c9d:	50                   	push   eax
c0015c9e:	6a 07                	push   0x7
c0015ca0:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015ca6:	e8 11 13 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015cab:	83 c4 0c             	add    esp,0xc
c0015cae:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015cb3:	50                   	push   eax
c0015cb4:	6a 08                	push   0x8
c0015cb6:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015cbc:	e8 fb 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015cc1:	83 c4 0c             	add    esp,0xc
c0015cc4:	89 e8                	mov    eax,ebp
c0015cc6:	0f b6 e8             	movzx  ebp,al
c0015cc9:	55                   	push   ebp
c0015cca:	6a 09                	push   0x9
c0015ccc:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015cd2:	e8 e5 12 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015cd7:	5a                   	pop    edx
c0015cd8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015cdc:	e8 9f fb ff ff       	call   c0015880 <RTC::completeRTCRefresh()>
c0015ce1:	83 c4 3c             	add    esp,0x3c
c0015ce4:	b0 01                	mov    al,0x1
c0015ce6:	5b                   	pop    ebx
c0015ce7:	5e                   	pop    esi
c0015ce8:	5f                   	pop    edi
c0015ce9:	5d                   	pop    ebp
c0015cea:	c3                   	ret    

c0015ceb <rtcIRQHandler(regs*, void*)>:
c0015ceb:	53                   	push   ebx
c0015cec:	83 ec 10             	sub    esp,0x10
c0015cef:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015cf3:	6a 0c                	push   0xc
c0015cf5:	ff 35 d8 04 02 c0    	push   DWORD PTR ds:0xc00204d8
c0015cfb:	e8 a6 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d00:	83 c4 10             	add    esp,0x10
c0015d03:	84 c0                	test   al,al
c0015d05:	79 24                	jns    c0015d2b <rtcIRQHandler(regs*, void*)+0x40>
c0015d07:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015d0e:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015d15:	66 ff 05 34 38 02 c0 	inc    WORD PTR ds:0xc0023834
c0015d1c:	75 0d                	jne    c0015d2b <rtcIRQHandler(regs*, void*)+0x40>
c0015d1e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015d22:	83 c4 08             	add    esp,0x8
c0015d25:	5b                   	pop    ebx
c0015d26:	e9 55 fb ff ff       	jmp    c0015880 <RTC::completeRTCRefresh()>
c0015d2b:	83 c4 08             	add    esp,0x8
c0015d2e:	5b                   	pop    ebx
c0015d2f:	c3                   	ret    

c0015d30 <RTC::RTC()>:
c0015d30:	83 ec 1c             	sub    esp,0x1c
c0015d33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d37:	83 ec 08             	sub    esp,0x8
c0015d3a:	68 af e9 01 c0       	push   0xc001e9af
c0015d3f:	50                   	push   eax
c0015d40:	e8 9d 56 ff ff       	call   c000b3e2 <Clock::Clock(char const*)>
c0015d45:	83 c4 10             	add    esp,0x10
c0015d48:	ba cc e9 01 c0       	mov    edx,0xc001e9cc
c0015d4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d51:	89 10                	mov    DWORD PTR [eax],edx
c0015d53:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d57:	83 ec 0c             	sub    esp,0xc
c0015d5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015d5e:	6a 01                	push   0x1
c0015d60:	68 eb 5c 01 c0       	push   0xc0015ceb
c0015d65:	6a 08                	push   0x8
c0015d67:	50                   	push   eax
c0015d68:	e8 5f 5b ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015d6d:	83 c4 20             	add    esp,0x20
c0015d70:	89 c2                	mov    edx,eax
c0015d72:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015d76:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015d7c:	fa                   	cli    
c0015d7d:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0015d82:	40                   	inc    eax
c0015d83:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0015d88:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0015d8d:	83 ec 08             	sub    esp,0x8
c0015d90:	6a 0b                	push   0xb
c0015d92:	50                   	push   eax
c0015d93:	e8 0e 11 ff ff       	call   c0006ea6 <Computer::readCMOS(unsigned char)>
c0015d98:	83 c4 10             	add    esp,0x10
c0015d9b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015d9f:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c0015da4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015da8:	83 ca 10             	or     edx,0x10
c0015dab:	81 e2 ff 00 00 00    	and    edx,0xff
c0015db1:	83 ec 04             	sub    esp,0x4
c0015db4:	52                   	push   edx
c0015db5:	6a 0b                	push   0xb
c0015db7:	50                   	push   eax
c0015db8:	e8 ff 11 ff ff       	call   c0006fbc <Computer::writeCMOS(unsigned char, unsigned char)>
c0015dbd:	83 c4 10             	add    esp,0x10
c0015dc0:	83 ec 0c             	sub    esp,0xc
c0015dc3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015dc7:	e8 b4 fa ff ff       	call   c0015880 <RTC::completeRTCRefresh()>
c0015dcc:	83 c4 10             	add    esp,0x10
c0015dcf:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0015dd4:	48                   	dec    eax
c0015dd5:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c0015dda:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c0015ddf:	85 c0                	test   eax,eax
c0015de1:	75 01                	jne    c0015de4 <RTC::RTC()+0xb4>
c0015de3:	fb                   	sti    
c0015de4:	90                   	nop
c0015de5:	83 c4 1c             	add    esp,0x1c
c0015de8:	c3                   	ret    
c0015de9:	66 90                	xchg   ax,ax
c0015deb:	90                   	nop

c0015dec <HalConsoleScroll(int, int)>:
c0015dec:	83 ec 10             	sub    esp,0x10
c0015def:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015df7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015dff:	90                   	nop
c0015e00:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015e05:	0f 8f e1 00 00 00    	jg     c0015eec <HalConsoleScroll(int, int)+0x100>
c0015e0b:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015e13:	90                   	nop
c0015e14:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015e1c:	0f 8f be 00 00 00    	jg     c0015ee0 <HalConsoleScroll(int, int)+0xf4>
c0015e22:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e26:	89 d0                	mov    eax,edx
c0015e28:	c1 e0 02             	shl    eax,0x2
c0015e2b:	01 d0                	add    eax,edx
c0015e2d:	c1 e0 05             	shl    eax,0x5
c0015e30:	89 c2                	mov    edx,eax
c0015e32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e36:	01 d0                	add    eax,edx
c0015e38:	89 c2                	mov    edx,eax
c0015e3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e3e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015e41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e45:	89 d0                	mov    eax,edx
c0015e47:	c1 e0 02             	shl    eax,0x2
c0015e4a:	01 d0                	add    eax,edx
c0015e4c:	c1 e0 05             	shl    eax,0x5
c0015e4f:	89 c2                	mov    edx,eax
c0015e51:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e55:	01 d0                	add    eax,edx
c0015e57:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015e5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e61:	01 c2                	add    edx,eax
c0015e63:	8a 01                	mov    al,BYTE PTR [ecx]
c0015e65:	88 02                	mov    BYTE PTR [edx],al
c0015e67:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015e6c:	75 66                	jne    c0015ed4 <HalConsoleScroll(int, int)+0xe8>
c0015e6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e72:	83 e0 01             	and    eax,0x1
c0015e75:	74 39                	je     c0015eb0 <HalConsoleScroll(int, int)+0xc4>
c0015e77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015e7b:	83 e0 0f             	and    eax,0xf
c0015e7e:	88 c2                	mov    dl,al
c0015e80:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015e84:	c1 e0 04             	shl    eax,0x4
c0015e87:	88 d1                	mov    cl,dl
c0015e89:	09 c1                	or     ecx,eax
c0015e8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015e8f:	89 d0                	mov    eax,edx
c0015e91:	c1 e0 02             	shl    eax,0x2
c0015e94:	01 d0                	add    eax,edx
c0015e96:	c1 e0 05             	shl    eax,0x5
c0015e99:	89 c2                	mov    edx,eax
c0015e9b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015e9f:	01 d0                	add    eax,edx
c0015ea1:	89 c2                	mov    edx,eax
c0015ea3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ea7:	01 d0                	add    eax,edx
c0015ea9:	88 ca                	mov    dl,cl
c0015eab:	88 10                	mov    BYTE PTR [eax],dl
c0015ead:	eb 25                	jmp    c0015ed4 <HalConsoleScroll(int, int)+0xe8>
c0015eaf:	90                   	nop
c0015eb0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015eb4:	89 d0                	mov    eax,edx
c0015eb6:	c1 e0 02             	shl    eax,0x2
c0015eb9:	01 d0                	add    eax,edx
c0015ebb:	c1 e0 05             	shl    eax,0x5
c0015ebe:	89 c2                	mov    edx,eax
c0015ec0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015ec4:	01 d0                	add    eax,edx
c0015ec6:	89 c2                	mov    edx,eax
c0015ec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015ecc:	01 d0                	add    eax,edx
c0015ece:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015ed1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ed4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015ed8:	e9 37 ff ff ff       	jmp    c0015e14 <HalConsoleScroll(int, int)+0x28>
c0015edd:	8d 76 00             	lea    esi,[esi+0x0]
c0015ee0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015ee4:	e9 17 ff ff ff       	jmp    c0015e00 <HalConsoleScroll(int, int)+0x14>
c0015ee9:	8d 76 00             	lea    esi,[esi+0x0]
c0015eec:	90                   	nop
c0015eed:	83 c4 10             	add    esp,0x10
c0015ef0:	c3                   	ret    
c0015ef1:	8d 76 00             	lea    esi,[esi+0x0]

c0015ef4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0015ef4:	83 ec 14             	sub    esp,0x14
c0015ef7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015efb:	88 04 24             	mov    BYTE PTR [esp],al
c0015efe:	8a 04 24             	mov    al,BYTE PTR [esp]
c0015f01:	25 ff 00 00 00       	and    eax,0xff
c0015f06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015f0a:	89 d1                	mov    ecx,edx
c0015f0c:	83 e1 0f             	and    ecx,0xf
c0015f0f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015f13:	c1 e2 04             	shl    edx,0x4
c0015f16:	81 e2 ff 00 00 00    	and    edx,0xff
c0015f1c:	09 ca                	or     edx,ecx
c0015f1e:	c1 e2 08             	shl    edx,0x8
c0015f21:	09 d0                	or     eax,edx
c0015f23:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0015f28:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0015f30:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015f34:	89 d0                	mov    eax,edx
c0015f36:	c1 e0 02             	shl    eax,0x2
c0015f39:	01 d0                	add    eax,edx
c0015f3b:	c1 e0 04             	shl    eax,0x4
c0015f3e:	89 c2                	mov    edx,eax
c0015f40:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f44:	01 d0                	add    eax,edx
c0015f46:	01 c0                	add    eax,eax
c0015f48:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0015f4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0015f55:	66 89 02             	mov    WORD PTR [edx],ax
c0015f58:	90                   	nop
c0015f59:	83 c4 14             	add    esp,0x14
c0015f5c:	c3                   	ret    
c0015f5d:	8d 76 00             	lea    esi,[esi+0x0]

c0015f60 <HalConsoleCursorUpdate(int, int)>:
c0015f60:	83 ec 20             	sub    esp,0x20
c0015f63:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0015f67:	89 c2                	mov    edx,eax
c0015f69:	89 d0                	mov    eax,edx
c0015f6b:	c1 e0 02             	shl    eax,0x2
c0015f6e:	01 d0                	add    eax,edx
c0015f70:	c1 e0 04             	shl    eax,0x4
c0015f73:	89 c2                	mov    edx,eax
c0015f75:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0015f79:	01 d0                	add    eax,edx
c0015f7b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0015f80:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0015f87:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c0015f8c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015f90:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015f94:	ee                   	out    dx,al
c0015f95:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015f9a:	25 ff 00 00 00       	and    eax,0xff
c0015f9f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0015fa6:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0015faa:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015fae:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015fb2:	ee                   	out    dx,al
c0015fb3:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0015fba:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c0015fbf:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0015fc3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0015fc7:	ee                   	out    dx,al
c0015fc8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0015fcd:	66 c1 e8 08          	shr    ax,0x8
c0015fd1:	25 ff 00 00 00       	and    eax,0xff
c0015fd6:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0015fdd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015fe1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0015fe5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015fe9:	ee                   	out    dx,al
c0015fea:	90                   	nop
c0015feb:	83 c4 20             	add    esp,0x20
c0015fee:	c3                   	ret    
c0015fef:	90                   	nop

c0015ff0 <FAT::getName()>:
c0015ff0:	b8 00 ea 01 c0       	mov    eax,0xc001ea00
c0015ff5:	c3                   	ret    
c0015ff6:	66 90                	xchg   ax,ax

c0015ff8 <FAT::tell(void*, unsigned long long*)>:
c0015ff8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0015ffd:	75 09                	jne    c0016008 <FAT::tell(void*, unsigned long long*)+0x10>
c0015fff:	b8 04 00 00 00       	mov    eax,0x4
c0016004:	c3                   	ret    
c0016005:	8d 76 00             	lea    esi,[esi+0x0]
c0016008:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001600d:	75 09                	jne    c0016018 <FAT::tell(void*, unsigned long long*)+0x20>
c001600f:	b8 04 00 00 00       	mov    eax,0x4
c0016014:	c3                   	ret    
c0016015:	8d 76 00             	lea    esi,[esi+0x0]
c0016018:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001601c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001601f:	ba 00 00 00 00       	mov    edx,0x0
c0016024:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016028:	89 01                	mov    DWORD PTR [ecx],eax
c001602a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001602d:	b8 00 00 00 00       	mov    eax,0x0
c0016032:	c3                   	ret    
c0016033:	90                   	nop

c0016034 <FAT::stat(void*, unsigned long long*)>:
c0016034:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016039:	75 09                	jne    c0016044 <FAT::stat(void*, unsigned long long*)+0x10>
c001603b:	b8 04 00 00 00       	mov    eax,0x4
c0016040:	c3                   	ret    
c0016041:	8d 76 00             	lea    esi,[esi+0x0]
c0016044:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016049:	75 09                	jne    c0016054 <FAT::stat(void*, unsigned long long*)+0x20>
c001604b:	b8 04 00 00 00       	mov    eax,0x4
c0016050:	c3                   	ret    
c0016051:	8d 76 00             	lea    esi,[esi+0x0]
c0016054:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016058:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001605b:	ba 00 00 00 00       	mov    edx,0x0
c0016060:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016064:	89 01                	mov    DWORD PTR [ecx],eax
c0016066:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016069:	b8 00 00 00 00       	mov    eax,0x0
c001606e:	c3                   	ret    
c001606f:	90                   	nop

c0016070 <FAT::~FAT()>:
c0016070:	83 ec 0c             	sub    esp,0xc
c0016073:	ba 4c ea 01 c0       	mov    edx,0xc001ea4c
c0016078:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001607c:	89 10                	mov    DWORD PTR [eax],edx
c001607e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016082:	83 ec 0c             	sub    esp,0xc
c0016085:	50                   	push   eax
c0016086:	e8 9b 47 ff ff       	call   c000a826 <Filesystem::~Filesystem()>
c001608b:	83 c4 10             	add    esp,0x10
c001608e:	90                   	nop
c001608f:	83 c4 0c             	add    esp,0xc
c0016092:	c3                   	ret    
c0016093:	90                   	nop

c0016094 <FAT::~FAT()>:
c0016094:	83 ec 0c             	sub    esp,0xc
c0016097:	83 ec 0c             	sub    esp,0xc
c001609a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001609e:	e8 cd ff ff ff       	call   c0016070 <FAT::~FAT()>
c00160a3:	83 c4 10             	add    esp,0x10
c00160a6:	83 ec 08             	sub    esp,0x8
c00160a9:	6a 08                	push   0x8
c00160ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00160af:	e8 36 43 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c00160b4:	83 c4 10             	add    esp,0x10
c00160b7:	83 c4 0c             	add    esp,0xc
c00160ba:	c3                   	ret    
c00160bb:	90                   	nop

c00160bc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00160bc:	83 ec 1c             	sub    esp,0x1c
c00160bf:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00160c6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00160cb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160cf:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c00160d6:	83 f8 ff             	cmp    eax,0xffffffff
c00160d9:	75 35                	jne    c0016110 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00160db:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00160df:	88 c2                	mov    dl,al
c00160e1:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c00160e6:	01 d0                	add    eax,edx
c00160e8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00160ec:	8b 15 40 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023840
c00160f2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00160f6:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c00160fd:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0016102:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016106:	89 14 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],edx
c001610d:	eb 19                	jmp    c0016128 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c001610f:	90                   	nop
c0016110:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0016114:	88 c2                	mov    dl,al
c0016116:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001611a:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c0016121:	01 d0                	add    eax,edx
c0016123:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016127:	90                   	nop
c0016128:	83 ec 04             	sub    esp,0x4
c001612b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001612f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016133:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016137:	50                   	push   eax
c0016138:	e8 17 ed fe ff       	call   c0004e54 <f_getlabel>
c001613d:	83 c4 10             	add    esp,0x10
c0016140:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016144:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016149:	75 09                	jne    c0016154 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001614b:	b8 00 00 00 00       	mov    eax,0x0
c0016150:	eb 0a                	jmp    c001615c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016152:	66 90                	xchg   ax,ax
c0016154:	b8 01 00 00 00       	mov    eax,0x1
c0016159:	8d 76 00             	lea    esi,[esi+0x0]
c001615c:	83 c4 1c             	add    esp,0x1c
c001615f:	c3                   	ret    

c0016160 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016160:	57                   	push   edi
c0016161:	83 ec 58             	sub    esp,0x58
c0016164:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001616c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016170:	b8 00 00 00 00       	mov    eax,0x0
c0016175:	b9 0f 00 00 00       	mov    ecx,0xf
c001617a:	fc                   	cld    
c001617b:	89 d7                	mov    edi,edx
c001617d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001617f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016183:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c001618a:	83 f8 ff             	cmp    eax,0xffffffff
c001618d:	75 35                	jne    c00161c4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001618f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016193:	88 c2                	mov    dl,al
c0016195:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c001619a:	01 d0                	add    eax,edx
c001619c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00161a0:	8b 15 40 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023840
c00161a6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00161aa:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c00161b1:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c00161b6:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c00161ba:	89 14 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],edx
c00161c1:	eb 19                	jmp    c00161dc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00161c3:	90                   	nop
c00161c4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00161c8:	88 c2                	mov    dl,al
c00161ca:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00161ce:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c00161d5:	01 d0                	add    eax,edx
c00161d7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00161db:	90                   	nop
c00161dc:	83 ec 08             	sub    esp,0x8
c00161df:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00161e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00161e7:	50                   	push   eax
c00161e8:	e8 d3 a5 fe ff       	call   c00007c0 <strcat>
c00161ed:	83 c4 10             	add    esp,0x10
c00161f0:	83 ec 0c             	sub    esp,0xc
c00161f3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00161f7:	50                   	push   eax
c00161f8:	e8 a8 ed fe ff       	call   c0004fa5 <f_setlabel>
c00161fd:	83 c4 10             	add    esp,0x10
c0016200:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0016204:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0016209:	75 09                	jne    c0016214 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c001620b:	b8 00 00 00 00       	mov    eax,0x0
c0016210:	eb 0a                	jmp    c001621c <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0016212:	66 90                	xchg   ax,ax
c0016214:	b8 01 00 00 00       	mov    eax,0x1
c0016219:	8d 76 00             	lea    esi,[esi+0x0]
c001621c:	83 c4 58             	add    esp,0x58
c001621f:	5f                   	pop    edi
c0016220:	c3                   	ret    
c0016221:	90                   	nop
c0016222:	66 90                	xchg   ax,ax

c0016224 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016224:	83 ec 2c             	sub    esp,0x2c
c0016227:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001622f:	83 ec 08             	sub    esp,0x8
c0016232:	68 24 ea 01 c0       	push   0xc001ea24
c0016237:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001623b:	e8 a0 a4 fe ff       	call   c00006e0 <strcmp>
c0016240:	83 c4 10             	add    esp,0x10
c0016243:	85 c0                	test   eax,eax
c0016245:	0f 94 c0             	sete   al
c0016248:	84 c0                	test   al,al
c001624a:	74 10                	je     c001625c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001624c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016254:	e9 b3 00 00 00       	jmp    c001630c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016259:	8d 76 00             	lea    esi,[esi+0x0]
c001625c:	83 ec 08             	sub    esp,0x8
c001625f:	68 16 ea 01 c0       	push   0xc001ea16
c0016264:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016268:	e8 73 a4 fe ff       	call   c00006e0 <strcmp>
c001626d:	83 c4 10             	add    esp,0x10
c0016270:	85 c0                	test   eax,eax
c0016272:	0f 94 c0             	sete   al
c0016275:	84 c0                	test   al,al
c0016277:	74 0f                	je     c0016288 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016279:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016281:	e9 86 00 00 00       	jmp    c001630c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016286:	66 90                	xchg   ax,ax
c0016288:	83 ec 08             	sub    esp,0x8
c001628b:	68 1c ea 01 c0       	push   0xc001ea1c
c0016290:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016294:	e8 47 a4 fe ff       	call   c00006e0 <strcmp>
c0016299:	83 c4 10             	add    esp,0x10
c001629c:	85 c0                	test   eax,eax
c001629e:	0f 94 c0             	sete   al
c00162a1:	84 c0                	test   al,al
c00162a3:	74 0b                	je     c00162b0 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c00162a5:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00162ad:	eb 5d                	jmp    c001630c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00162af:	90                   	nop
c00162b0:	83 ec 08             	sub    esp,0x8
c00162b3:	68 7c ca 01 c0       	push   0xc001ca7c
c00162b8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00162bc:	e8 1f a4 fe ff       	call   c00006e0 <strcmp>
c00162c1:	83 c4 10             	add    esp,0x10
c00162c4:	85 c0                	test   eax,eax
c00162c6:	0f 94 c0             	sete   al
c00162c9:	84 c0                	test   al,al
c00162cb:	74 0b                	je     c00162d8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00162cd:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00162d5:	eb 35                	jmp    c001630c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00162d7:	90                   	nop
c00162d8:	83 ec 08             	sub    esp,0x8
c00162db:	68 22 ea 01 c0       	push   0xc001ea22
c00162e0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00162e4:	e8 f7 a3 fe ff       	call   c00006e0 <strcmp>
c00162e9:	83 c4 10             	add    esp,0x10
c00162ec:	85 c0                	test   eax,eax
c00162ee:	0f 94 c0             	sete   al
c00162f1:	84 c0                	test   al,al
c00162f3:	74 0b                	je     c0016300 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00162f5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00162fd:	eb 0d                	jmp    c001630c <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00162ff:	90                   	nop
c0016300:	b8 08 00 00 00       	mov    eax,0x8
c0016305:	e9 ea 00 00 00       	jmp    c00163f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c001630a:	66 90                	xchg   ax,ax
c001630c:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0016313:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0016318:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001631c:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c0016323:	83 f8 ff             	cmp    eax,0xffffffff
c0016326:	75 34                	jne    c001635c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016328:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001632c:	88 c2                	mov    dl,al
c001632e:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0016333:	01 d0                	add    eax,edx
c0016335:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016339:	8b 15 40 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023840
c001633f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016343:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c001634a:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c001634f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016353:	89 14 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],edx
c001635a:	eb 18                	jmp    c0016374 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001635c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016360:	88 c2                	mov    dl,al
c0016362:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016366:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c001636d:	01 d0                	add    eax,edx
c001636f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016373:	90                   	nop
c0016374:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016378:	88 04 24             	mov    BYTE PTR [esp],al
c001637b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001637f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016383:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001638b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016390:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016398:	83 ec 0c             	sub    esp,0xc
c001639b:	68 00 20 00 00       	push   0x2000
c00163a0:	e8 14 14 ff ff       	call   c00077b9 <malloc>
c00163a5:	83 c4 10             	add    esp,0x10
c00163a8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00163ac:	68 00 20 00 00       	push   0x2000
c00163b1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00163b5:	8d 44 24 08          	lea    eax,[esp+0x8]
c00163b9:	50                   	push   eax
c00163ba:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00163be:	50                   	push   eax
c00163bf:	e8 d1 ee fe ff       	call   c0005295 <f_mkfs>
c00163c4:	83 c4 10             	add    esp,0x10
c00163c7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00163cb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00163d0:	75 0a                	jne    c00163dc <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00163d2:	b8 00 00 00 00       	mov    eax,0x0
c00163d7:	eb 1b                	jmp    c00163f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00163d9:	8d 76 00             	lea    esi,[esi+0x0]
c00163dc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00163e1:	75 09                	jne    c00163ec <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00163e3:	b8 09 00 00 00       	mov    eax,0x9
c00163e8:	eb 0a                	jmp    c00163f4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00163ea:	66 90                	xchg   ax,ax
c00163ec:	b8 01 00 00 00       	mov    eax,0x1
c00163f1:	8d 76 00             	lea    esi,[esi+0x0]
c00163f4:	83 c4 2c             	add    esp,0x2c
c00163f7:	c3                   	ret    

c00163f8 <FAT::tryMount(LogicalDisk*, int)>:
c00163f8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00163fe:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0016403:	83 f8 14             	cmp    eax,0x14
c0016406:	75 18                	jne    c0016420 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0016408:	83 ec 0c             	sub    esp,0xc
c001640b:	68 28 ea 01 c0       	push   0xc001ea28
c0016410:	e8 46 9d ff ff       	call   c001015b <KePanic(char const*)>
c0016415:	83 c4 10             	add    esp,0x10
c0016418:	b0 00                	mov    al,0x0
c001641a:	e9 e9 01 00 00       	jmp    c0016608 <FAT::tryMount(LogicalDisk*, int)+0x210>
c001641f:	90                   	nop
c0016420:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016427:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001642d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016433:	3d 00 02 00 00       	cmp    eax,0x200
c0016438:	74 0a                	je     c0016444 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001643a:	b0 00                	mov    al,0x0
c001643c:	e9 c7 01 00 00       	jmp    c0016608 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016441:	8d 76 00             	lea    esi,[esi+0x0]
c0016444:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001644c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016453:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c001645a:	83 f8 ff             	cmp    eax,0xffffffff
c001645d:	74 09                	je     c0016468 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001645f:	b0 01                	mov    al,0x1
c0016461:	e9 a2 01 00 00       	jmp    c0016608 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016466:	66 90                	xchg   ax,ax
c0016468:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016472:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001647a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016481:	88 c2                	mov    dl,al
c0016483:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0016488:	01 d0                	add    eax,edx
c001648a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016491:	8b 15 40 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023840
c0016497:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001649e:	89 14 85 60 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc7a0],edx
c00164a5:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c00164aa:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c00164b1:	89 14 85 e0 38 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc720],edx
c00164b8:	83 ec 0c             	sub    esp,0xc
c00164bb:	68 34 02 00 00       	push   0x234
c00164c0:	e8 f4 12 ff ff       	call   c00077b9 <malloc>
c00164c5:	83 c4 10             	add    esp,0x10
c00164c8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00164cf:	83 ec 04             	sub    esp,0x4
c00164d2:	6a 00                	push   0x0
c00164d4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00164db:	50                   	push   eax
c00164dc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00164e3:	e8 d3 d5 fe ff       	call   c0003abb <f_mount>
c00164e8:	83 c4 10             	add    esp,0x10
c00164eb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00164f2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00164fa:	74 1c                	je     c0016518 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00164fc:	83 ec 0c             	sub    esp,0xc
c00164ff:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0016506:	e8 ce 12 ff ff       	call   c00077d9 <rfree>
c001650b:	83 c4 10             	add    esp,0x10
c001650e:	b0 00                	mov    al,0x0
c0016510:	e9 f3 00 00 00       	jmp    c0016608 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016515:	8d 76 00             	lea    esi,[esi+0x0]
c0016518:	83 ec 04             	sub    esp,0x4
c001651b:	68 00 01 00 00       	push   0x100
c0016520:	6a 00                	push   0x0
c0016522:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016529:	50                   	push   eax
c001652a:	e8 a1 9f fe ff       	call   c00004d0 <memset>
c001652f:	83 c4 10             	add    esp,0x10
c0016532:	83 ec 08             	sub    esp,0x8
c0016535:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001653c:	50                   	push   eax
c001653d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016544:	50                   	push   eax
c0016545:	e8 76 a2 fe ff       	call   c00007c0 <strcat>
c001654a:	83 c4 10             	add    esp,0x10
c001654d:	83 ec 08             	sub    esp,0x8
c0016550:	68 36 ea 01 c0       	push   0xc001ea36
c0016555:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001655c:	50                   	push   eax
c001655d:	e8 5e a2 fe ff       	call   c00007c0 <strcat>
c0016562:	83 c4 10             	add    esp,0x10
c0016565:	83 ec 04             	sub    esp,0x4
c0016568:	6a 01                	push   0x1
c001656a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016571:	50                   	push   eax
c0016572:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016576:	50                   	push   eax
c0016577:	e8 a1 d5 fe ff       	call   c0003b1d <f_open>
c001657c:	83 c4 10             	add    esp,0x10
c001657f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016586:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001658d:	85 c0                	test   eax,eax
c001658f:	74 0b                	je     c001659c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016591:	78 31                	js     c00165c4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016593:	83 e8 04             	sub    eax,0x4
c0016596:	83 f8 01             	cmp    eax,0x1
c0016599:	77 29                	ja     c00165c4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001659b:	90                   	nop
c001659c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c00165a4:	83 ec 0c             	sub    esp,0xc
c00165a7:	8d 44 24 14          	lea    eax,[esp+0x14]
c00165ab:	50                   	push   eax
c00165ac:	e8 1f dd fe ff       	call   c00042d0 <f_close>
c00165b1:	83 c4 10             	add    esp,0x10
c00165b4:	90                   	nop
c00165b5:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c00165bd:	74 41                	je     c0016600 <FAT::tryMount(LogicalDisk*, int)+0x208>
c00165bf:	eb 33                	jmp    c00165f4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00165c1:	8d 76 00             	lea    esi,[esi+0x0]
c00165c4:	83 ec 0c             	sub    esp,0xc
c00165c7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00165ce:	e8 06 12 ff ff       	call   c00077d9 <rfree>
c00165d3:	83 c4 10             	add    esp,0x10
c00165d6:	83 ec 04             	sub    esp,0x4
c00165d9:	6a 00                	push   0x0
c00165db:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00165e2:	50                   	push   eax
c00165e3:	6a 00                	push   0x0
c00165e5:	e8 d1 d4 fe ff       	call   c0003abb <f_mount>
c00165ea:	83 c4 10             	add    esp,0x10
c00165ed:	b0 00                	mov    al,0x0
c00165ef:	eb 17                	jmp    c0016608 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00165f1:	8d 76 00             	lea    esi,[esi+0x0]
c00165f4:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c00165f9:	40                   	inc    eax
c00165fa:	a3 40 38 02 c0       	mov    ds:0xc0023840,eax
c00165ff:	90                   	nop
c0016600:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0016607:	90                   	nop
c0016608:	81 c4 4c 03 00 00    	add    esp,0x34c
c001660e:	c3                   	ret    
c001660f:	90                   	nop

c0016610 <FAT::allocateSwapfile(char const*, int)>:
c0016610:	55                   	push   ebp
c0016611:	57                   	push   edi
c0016612:	56                   	push   esi
c0016613:	53                   	push   ebx
c0016614:	81 ec 3c 04 00 00    	sub    esp,0x43c
c001661a:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016625:	83 ec 0c             	sub    esp,0xc
c0016628:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001662f:	e8 85 11 ff ff       	call   c00077b9 <malloc>
c0016634:	83 c4 10             	add    esp,0x10
c0016637:	89 c7                	mov    edi,eax
c0016639:	a1 b0 37 02 c0       	mov    eax,ds:0xc00237b0
c001663e:	83 ec 04             	sub    esp,0x4
c0016641:	50                   	push   eax
c0016642:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016649:	57                   	push   edi
c001664a:	e8 07 44 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c001664f:	83 c4 10             	add    esp,0x10
c0016652:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016659:	83 ec 04             	sub    esp,0x4
c001665c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016660:	50                   	push   eax
c0016661:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016665:	50                   	push   eax
c0016666:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001666d:	e8 50 47 ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c0016672:	83 c4 10             	add    esp,0x10
c0016675:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001667c:	c1 e0 14             	shl    eax,0x14
c001667f:	89 c7                	mov    edi,eax
c0016681:	89 c5                	mov    ebp,eax
c0016683:	c1 fd 1f             	sar    ebp,0x1f
c0016686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001668a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001668e:	89 f9                	mov    ecx,edi
c0016690:	31 c1                	xor    ecx,eax
c0016692:	89 cb                	mov    ebx,ecx
c0016694:	89 e9                	mov    ecx,ebp
c0016696:	31 d1                	xor    ecx,edx
c0016698:	89 ce                	mov    esi,ecx
c001669a:	89 f0                	mov    eax,esi
c001669c:	09 d8                	or     eax,ebx
c001669e:	0f 84 9c 00 00 00    	je     c0016740 <FAT::allocateSwapfile(char const*, int)+0x130>
c00166a4:	83 ec 0c             	sub    esp,0xc
c00166a7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166ae:	e8 db 45 ff ff       	call   c000ac8e <File::unlink()>
c00166b3:	83 c4 10             	add    esp,0x10
c00166b6:	83 ec 08             	sub    esp,0x8
c00166b9:	6a 12                	push   0x12
c00166bb:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00166c2:	e8 4f 44 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c00166c7:	83 c4 10             	add    esp,0x10
c00166ca:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00166d1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00166d7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00166de:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00166e5:	c1 e0 14             	shl    eax,0x14
c00166e8:	83 ec 04             	sub    esp,0x4
c00166eb:	6a 01                	push   0x1
c00166ed:	50                   	push   eax
c00166ee:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00166f5:	e8 3b ea fe ff       	call   c0005135 <f_expand>
c00166fa:	83 c4 10             	add    esp,0x10
c00166fd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016704:	8b 00                	mov    eax,DWORD PTR [eax]
c0016706:	83 c0 10             	add    eax,0x10
c0016709:	8b 00                	mov    eax,DWORD PTR [eax]
c001670b:	83 ec 0c             	sub    esp,0xc
c001670e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016712:	52                   	push   edx
c0016713:	8d 54 24 30          	lea    edx,[esp+0x30]
c0016717:	52                   	push   edx
c0016718:	6a 00                	push   0x0
c001671a:	68 00 04 00 00       	push   0x400
c001671f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016726:	ff d0                	call   eax
c0016728:	83 c4 20             	add    esp,0x20
c001672b:	83 ec 0c             	sub    esp,0xc
c001672e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016735:	e8 3a 44 ff ff       	call   c000ab74 <File::close()>
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	8d 76 00             	lea    esi,[esi+0x0]
c0016740:	83 ec 08             	sub    esp,0x8
c0016743:	6a 01                	push   0x1
c0016745:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001674c:	e8 c5 43 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c0016751:	83 c4 10             	add    esp,0x10
c0016754:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001675b:	8b 00                	mov    eax,DWORD PTR [eax]
c001675d:	83 c0 0c             	add    eax,0xc
c0016760:	8b 00                	mov    eax,DWORD PTR [eax]
c0016762:	83 ec 0c             	sub    esp,0xc
c0016765:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016769:	52                   	push   edx
c001676a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001676e:	52                   	push   edx
c001676f:	6a 00                	push   0x0
c0016771:	6a 04                	push   0x4
c0016773:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001677a:	ff d0                	call   eax
c001677c:	83 c4 20             	add    esp,0x20
c001677f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016786:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001678c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016793:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001679a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001679d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c00167a4:	83 ec 0c             	sub    esp,0xc
c00167a7:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00167ae:	e8 c1 43 ff ff       	call   c000ab74 <File::close()>
c00167b3:	83 c4 10             	add    esp,0x10
c00167b6:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c00167bd:	ba 00 00 00 00       	mov    edx,0x0
c00167c2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00167c8:	5b                   	pop    ebx
c00167c9:	5e                   	pop    esi
c00167ca:	5f                   	pop    edi
c00167cb:	5d                   	pop    ebp
c00167cc:	c3                   	ret    
c00167cd:	90                   	nop
c00167ce:	66 90                	xchg   ax,ax

c00167d0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00167d0:	57                   	push   edi
c00167d1:	56                   	push   esi
c00167d2:	53                   	push   ebx
c00167d3:	81 ec 50 02 00 00    	sub    esp,0x250
c00167d9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00167e1:	74 0d                	je     c00167f0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00167e3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00167eb:	75 0f                	jne    c00167fc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00167ed:	8d 76 00             	lea    esi,[esi+0x0]
c00167f0:	b8 04 00 00 00       	mov    eax,0x4
c00167f5:	e9 36 01 00 00       	jmp    c0016930 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00167fa:	66 90                	xchg   ax,ax
c00167fc:	83 ec 08             	sub    esp,0x8
c00167ff:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016806:	50                   	push   eax
c0016807:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c001680e:	e8 80 dd fe ff       	call   c0004593 <f_readdir>
c0016813:	83 c4 10             	add    esp,0x10
c0016816:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c001681d:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016824:	83 ec 0c             	sub    esp,0xc
c0016827:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001682e:	83 c0 16             	add    eax,0x16
c0016831:	50                   	push   eax
c0016832:	e8 09 9d fe ff       	call   c0000540 <strlen>
c0016837:	83 c4 10             	add    esp,0x10
c001683a:	ba 00 00 00 00       	mov    edx,0x0
c001683f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016843:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016847:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001684e:	25 ff 00 00 00       	and    eax,0xff
c0016853:	83 e0 10             	and    eax,0x10
c0016856:	74 08                	je     c0016860 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016858:	b8 02 00 00 00       	mov    eax,0x2
c001685d:	eb 09                	jmp    c0016868 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001685f:	90                   	nop
c0016860:	b8 01 00 00 00       	mov    eax,0x1
c0016865:	8d 76 00             	lea    esi,[esi+0x0]
c0016868:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001686c:	83 ec 08             	sub    esp,0x8
c001686f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016876:	83 c0 16             	add    eax,0x16
c0016879:	50                   	push   eax
c001687a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001687e:	83 c0 10             	add    eax,0x10
c0016881:	50                   	push   eax
c0016882:	e8 79 9d fe ff       	call   c0000600 <strcpy>
c0016887:	83 c4 10             	add    esp,0x10
c001688a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016891:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016898:	8d 44 24 08          	lea    eax,[esp+0x8]
c001689c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c00168a3:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c00168aa:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c00168b1:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c00168b8:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c00168bf:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00168c6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00168cd:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00168d4:	89 c6                	mov    esi,eax
c00168d6:	89 d7                	mov    edi,edx
c00168d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168da:	89 c8                	mov    eax,ecx
c00168dc:	89 fa                	mov    edx,edi
c00168de:	89 f3                	mov    ebx,esi
c00168e0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00168e7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00168ee:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00168f5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00168fc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0016902:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c0016909:	84 c0                	test   al,al
c001690b:	75 07                	jne    c0016914 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c001690d:	b8 07 00 00 00       	mov    eax,0x7
c0016912:	eb 1c                	jmp    c0016930 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016914:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c001691b:	85 c0                	test   eax,eax
c001691d:	75 09                	jne    c0016928 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c001691f:	b8 00 00 00 00       	mov    eax,0x0
c0016924:	eb 0a                	jmp    c0016930 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016926:	66 90                	xchg   ax,ax
c0016928:	b8 01 00 00 00       	mov    eax,0x1
c001692d:	8d 76 00             	lea    esi,[esi+0x0]
c0016930:	81 c4 50 02 00 00    	add    esp,0x250
c0016936:	5b                   	pop    ebx
c0016937:	5e                   	pop    esi
c0016938:	5f                   	pop    edi
c0016939:	c3                   	ret    
c001693a:	66 90                	xchg   ax,ax

c001693c <FAT::read(void*, unsigned long, void*, int*)>:
c001693c:	83 ec 1c             	sub    esp,0x1c
c001693f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016944:	74 0a                	je     c0016950 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016946:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001694b:	75 0b                	jne    c0016958 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c001694d:	8d 76 00             	lea    esi,[esi+0x0]
c0016950:	b8 04 00 00 00       	mov    eax,0x4
c0016955:	eb 41                	jmp    c0016998 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016957:	90                   	nop
c0016958:	8d 44 24 08          	lea    eax,[esp+0x8]
c001695c:	50                   	push   eax
c001695d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016961:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016965:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016969:	e8 7a d4 fe ff       	call   c0003de8 <f_read>
c001696e:	83 c4 10             	add    esp,0x10
c0016971:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016975:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016979:	89 c2                	mov    edx,eax
c001697b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001697f:	89 10                	mov    DWORD PTR [eax],edx
c0016981:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016985:	85 c0                	test   eax,eax
c0016987:	75 07                	jne    c0016990 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016989:	b8 00 00 00 00       	mov    eax,0x0
c001698e:	eb 08                	jmp    c0016998 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016990:	b8 01 00 00 00       	mov    eax,0x1
c0016995:	8d 76 00             	lea    esi,[esi+0x0]
c0016998:	83 c4 1c             	add    esp,0x1c
c001699b:	c3                   	ret    

c001699c <FAT::write(void*, unsigned long, void*, int*)>:
c001699c:	83 ec 1c             	sub    esp,0x1c
c001699f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00169a4:	74 0a                	je     c00169b0 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c00169a6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00169ab:	75 0b                	jne    c00169b8 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c00169ad:	8d 76 00             	lea    esi,[esi+0x0]
c00169b0:	b8 04 00 00 00       	mov    eax,0x4
c00169b5:	eb 41                	jmp    c00169f8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00169b7:	90                   	nop
c00169b8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00169bc:	50                   	push   eax
c00169bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00169c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00169c5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00169c9:	e8 19 d6 fe ff       	call   c0003fe7 <f_write>
c00169ce:	83 c4 10             	add    esp,0x10
c00169d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00169d5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00169d9:	89 c2                	mov    edx,eax
c00169db:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00169df:	89 10                	mov    DWORD PTR [eax],edx
c00169e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00169e5:	85 c0                	test   eax,eax
c00169e7:	75 07                	jne    c00169f0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c00169e9:	b8 00 00 00 00       	mov    eax,0x0
c00169ee:	eb 08                	jmp    c00169f8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c00169f0:	b8 01 00 00 00       	mov    eax,0x1
c00169f5:	8d 76 00             	lea    esi,[esi+0x0]
c00169f8:	83 c4 1c             	add    esp,0x1c
c00169fb:	c3                   	ret    

c00169fc <FAT::close(void*)>:
c00169fc:	83 ec 1c             	sub    esp,0x1c
c00169ff:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016a04:	75 0a                	jne    c0016a10 <FAT::close(void*)+0x14>
c0016a06:	b8 04 00 00 00       	mov    eax,0x4
c0016a0b:	eb 3f                	jmp    c0016a4c <FAT::close(void*)+0x50>
c0016a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a10:	83 ec 0c             	sub    esp,0xc
c0016a13:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a17:	e8 b4 d8 fe ff       	call   c00042d0 <f_close>
c0016a1c:	83 c4 10             	add    esp,0x10
c0016a1f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a23:	83 ec 0c             	sub    esp,0xc
c0016a26:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a2a:	e8 9a 0d ff ff       	call   c00077c9 <free>
c0016a2f:	83 c4 10             	add    esp,0x10
c0016a32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a36:	85 c0                	test   eax,eax
c0016a38:	75 0a                	jne    c0016a44 <FAT::close(void*)+0x48>
c0016a3a:	b8 00 00 00 00       	mov    eax,0x0
c0016a3f:	eb 0b                	jmp    c0016a4c <FAT::close(void*)+0x50>
c0016a41:	8d 76 00             	lea    esi,[esi+0x0]
c0016a44:	b8 01 00 00 00       	mov    eax,0x1
c0016a49:	8d 76 00             	lea    esi,[esi+0x0]
c0016a4c:	83 c4 1c             	add    esp,0x1c
c0016a4f:	c3                   	ret    

c0016a50 <FAT::closeDir(void*)>:
c0016a50:	83 ec 1c             	sub    esp,0x1c
c0016a53:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016a58:	75 0a                	jne    c0016a64 <FAT::closeDir(void*)+0x14>
c0016a5a:	b8 04 00 00 00       	mov    eax,0x4
c0016a5f:	eb 3f                	jmp    c0016aa0 <FAT::closeDir(void*)+0x50>
c0016a61:	8d 76 00             	lea    esi,[esi+0x0]
c0016a64:	83 ec 0c             	sub    esp,0xc
c0016a67:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a6b:	e8 01 db fe ff       	call   c0004571 <f_closedir>
c0016a70:	83 c4 10             	add    esp,0x10
c0016a73:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a77:	83 ec 0c             	sub    esp,0xc
c0016a7a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a7e:	e8 46 0d ff ff       	call   c00077c9 <free>
c0016a83:	83 c4 10             	add    esp,0x10
c0016a86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a8a:	85 c0                	test   eax,eax
c0016a8c:	75 0a                	jne    c0016a98 <FAT::closeDir(void*)+0x48>
c0016a8e:	b8 00 00 00 00       	mov    eax,0x0
c0016a93:	eb 0b                	jmp    c0016aa0 <FAT::closeDir(void*)+0x50>
c0016a95:	8d 76 00             	lea    esi,[esi+0x0]
c0016a98:	b8 01 00 00 00       	mov    eax,0x1
c0016a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0016aa0:	83 c4 1c             	add    esp,0x1c
c0016aa3:	c3                   	ret    

c0016aa4 <FAT::seek(void*, unsigned long long)>:
c0016aa4:	83 ec 2c             	sub    esp,0x2c
c0016aa7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016aab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016aaf:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016ab3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ab7:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016abc:	75 0a                	jne    c0016ac8 <FAT::seek(void*, unsigned long long)+0x24>
c0016abe:	b8 04 00 00 00       	mov    eax,0x4
c0016ac3:	eb 33                	jmp    c0016af8 <FAT::seek(void*, unsigned long long)+0x54>
c0016ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ac8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016acc:	83 ec 08             	sub    esp,0x8
c0016acf:	50                   	push   eax
c0016ad0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016ad4:	e8 26 d8 fe ff       	call   c00042ff <f_lseek>
c0016ad9:	83 c4 10             	add    esp,0x10
c0016adc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ae0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016ae4:	85 c0                	test   eax,eax
c0016ae6:	75 08                	jne    c0016af0 <FAT::seek(void*, unsigned long long)+0x4c>
c0016ae8:	b8 00 00 00 00       	mov    eax,0x0
c0016aed:	eb 09                	jmp    c0016af8 <FAT::seek(void*, unsigned long long)+0x54>
c0016aef:	90                   	nop
c0016af0:	b8 01 00 00 00       	mov    eax,0x1
c0016af5:	8d 76 00             	lea    esi,[esi+0x0]
c0016af8:	83 c4 2c             	add    esp,0x2c
c0016afb:	c3                   	ret    

c0016afc <fatWrapperReadDisk>:
c0016afc:	53                   	push   ebx
c0016afd:	83 ec 18             	sub    esp,0x18
c0016b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b04:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016b08:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b0c:	25 ff 00 00 00       	and    eax,0xff
c0016b11:	8b 0c 85 40 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd5c0]
c0016b18:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b1c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b20:	ba 00 00 00 00       	mov    edx,0x0
c0016b25:	83 ec 0c             	sub    esp,0xc
c0016b28:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b2c:	53                   	push   ebx
c0016b2d:	52                   	push   edx
c0016b2e:	50                   	push   eax
c0016b2f:	51                   	push   ecx
c0016b30:	e8 ab 60 ff ff       	call   c000cbe0 <LogicalDisk::read(unsigned long long, int, void*)>
c0016b35:	83 c4 20             	add    esp,0x20
c0016b38:	83 c4 18             	add    esp,0x18
c0016b3b:	5b                   	pop    ebx
c0016b3c:	c3                   	ret    
c0016b3d:	8d 76 00             	lea    esi,[esi+0x0]

c0016b40 <fatWrapperWriteDisk>:
c0016b40:	53                   	push   ebx
c0016b41:	83 ec 18             	sub    esp,0x18
c0016b44:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b48:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016b4c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016b50:	25 ff 00 00 00       	and    eax,0xff
c0016b55:	8b 0c 85 40 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd5c0]
c0016b5c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016b60:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016b64:	ba 00 00 00 00       	mov    edx,0x0
c0016b69:	83 ec 0c             	sub    esp,0xc
c0016b6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b70:	53                   	push   ebx
c0016b71:	52                   	push   edx
c0016b72:	50                   	push   eax
c0016b73:	51                   	push   ecx
c0016b74:	e8 d3 60 ff ff       	call   c000cc4c <LogicalDisk::write(unsigned long long, int, void*)>
c0016b79:	83 c4 20             	add    esp,0x20
c0016b7c:	83 c4 18             	add    esp,0x18
c0016b7f:	5b                   	pop    ebx
c0016b80:	c3                   	ret    
c0016b81:	8d 76 00             	lea    esi,[esi+0x0]

c0016b84 <fatWrapperIoctl>:
c0016b84:	53                   	push   ebx
c0016b85:	83 ec 28             	sub    esp,0x28
c0016b88:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016b8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016b90:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016b94:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016b98:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016b9d:	75 35                	jne    c0016bd4 <fatWrapperIoctl+0x50>
c0016b9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016ba3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016ba7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016bab:	25 ff 00 00 00       	and    eax,0xff
c0016bb0:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c0016bb7:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016bbd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016bc3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016bc7:	66 89 02             	mov    WORD PTR [edx],ax
c0016bca:	b8 00 00 00 00       	mov    eax,0x0
c0016bcf:	e9 c4 00 00 00       	jmp    c0016c98 <fatWrapperIoctl+0x114>
c0016bd4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016bd9:	75 75                	jne    c0016c50 <fatWrapperIoctl+0xcc>
c0016bdb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016bdf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016be3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016be7:	25 ff 00 00 00       	and    eax,0xff
c0016bec:	8b 04 85 40 2a 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd5c0]
c0016bf3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016bf9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016bff:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016c05:	89 c8                	mov    eax,ecx
c0016c07:	89 da                	mov    edx,ebx
c0016c09:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016c0d:	c1 e0 0a             	shl    eax,0xa
c0016c10:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016c14:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016c1a:	8b 0c 8d 40 2a 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd5c0]
c0016c21:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016c27:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016c2d:	89 cb                	mov    ebx,ecx
c0016c2f:	c1 fb 1f             	sar    ebx,0x1f
c0016c32:	53                   	push   ebx
c0016c33:	51                   	push   ecx
c0016c34:	52                   	push   edx
c0016c35:	50                   	push   eax
c0016c36:	e8 45 50 00 00       	call   c001bc80 <__udivdi3>
c0016c3b:	83 c4 10             	add    esp,0x10
c0016c3e:	89 c2                	mov    edx,eax
c0016c40:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016c44:	89 10                	mov    DWORD PTR [eax],edx
c0016c46:	b8 00 00 00 00       	mov    eax,0x0
c0016c4b:	eb 4b                	jmp    c0016c98 <fatWrapperIoctl+0x114>
c0016c4d:	8d 76 00             	lea    esi,[esi+0x0]
c0016c50:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016c55:	75 09                	jne    c0016c60 <fatWrapperIoctl+0xdc>
c0016c57:	b8 00 00 00 00       	mov    eax,0x0
c0016c5c:	eb 3a                	jmp    c0016c98 <fatWrapperIoctl+0x114>
c0016c5e:	66 90                	xchg   ax,ax
c0016c60:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016c65:	75 19                	jne    c0016c80 <fatWrapperIoctl+0xfc>
c0016c67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016c6b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c6f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016c73:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016c79:	b8 00 00 00 00       	mov    eax,0x0
c0016c7e:	eb 18                	jmp    c0016c98 <fatWrapperIoctl+0x114>
c0016c80:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016c85:	75 09                	jne    c0016c90 <fatWrapperIoctl+0x10c>
c0016c87:	b8 00 00 00 00       	mov    eax,0x0
c0016c8c:	eb 0a                	jmp    c0016c98 <fatWrapperIoctl+0x114>
c0016c8e:	66 90                	xchg   ax,ax
c0016c90:	b8 04 00 00 00       	mov    eax,0x4
c0016c95:	8d 76 00             	lea    esi,[esi+0x0]
c0016c98:	83 c4 28             	add    esp,0x28
c0016c9b:	5b                   	pop    ebx
c0016c9c:	c3                   	ret    
c0016c9d:	90                   	nop
c0016c9e:	66 90                	xchg   ax,ax

c0016ca0 <FAT::FAT()>:
c0016ca0:	83 ec 1c             	sub    esp,0x1c
c0016ca3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ca7:	83 ec 0c             	sub    esp,0xc
c0016caa:	50                   	push   eax
c0016cab:	e8 52 3b ff ff       	call   c000a802 <Filesystem::Filesystem()>
c0016cb0:	83 c4 10             	add    esp,0x10
c0016cb3:	ba 4c ea 01 c0       	mov    edx,0xc001ea4c
c0016cb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016cbc:	89 10                	mov    DWORD PTR [eax],edx
c0016cbe:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c0016cc8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016cd0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016cd5:	7f 15                	jg     c0016cec <FAT::FAT()+0x4c>
c0016cd7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016cdb:	c7 04 85 60 38 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc7a0],0xffffffff
c0016ce6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016cea:	eb e4                	jmp    c0016cd0 <FAT::FAT()+0x30>
c0016cec:	90                   	nop
c0016ced:	83 c4 1c             	add    esp,0x1c
c0016cf0:	c3                   	ret    
c0016cf1:	90                   	nop
c0016cf2:	66 90                	xchg   ax,ax

c0016cf4 <FAT::fixFilepath(char*)>:
c0016cf4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016cf8:	8a 00                	mov    al,BYTE PTR [eax]
c0016cfa:	3c 40                	cmp    al,0x40
c0016cfc:	7e 2e                	jle    c0016d2c <FAT::fixFilepath(char*)+0x38>
c0016cfe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d02:	8a 00                	mov    al,BYTE PTR [eax]
c0016d04:	83 e8 41             	sub    eax,0x41
c0016d07:	88 c2                	mov    dl,al
c0016d09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d0d:	88 10                	mov    BYTE PTR [eax],dl
c0016d0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d13:	8a 00                	mov    al,BYTE PTR [eax]
c0016d15:	0f be c0             	movsx  eax,al
c0016d18:	8b 04 85 60 38 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc7a0]
c0016d1f:	83 c0 30             	add    eax,0x30
c0016d22:	88 c2                	mov    dl,al
c0016d24:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016d28:	88 10                	mov    BYTE PTR [eax],dl
c0016d2a:	66 90                	xchg   ax,ax
c0016d2c:	90                   	nop
c0016d2d:	c3                   	ret    
c0016d2e:	66 90                	xchg   ax,ax

c0016d30 <FAT::open(char const*, void**, FileOpenMode)>:
c0016d30:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016d36:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016d3e:	74 0c                	je     c0016d4c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016d40:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016d48:	75 0e                	jne    c0016d58 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016d4a:	66 90                	xchg   ax,ax
c0016d4c:	b8 04 00 00 00       	mov    eax,0x4
c0016d51:	e9 0a 01 00 00       	jmp    c0016e60 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016d56:	66 90                	xchg   ax,ax
c0016d58:	83 ec 08             	sub    esp,0x8
c0016d5b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016d62:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016d66:	50                   	push   eax
c0016d67:	e8 94 98 fe ff       	call   c0000600 <strcpy>
c0016d6c:	83 c4 10             	add    esp,0x10
c0016d6f:	83 ec 08             	sub    esp,0x8
c0016d72:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016d76:	50                   	push   eax
c0016d77:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016d7e:	e8 71 ff ff ff       	call   c0016cf4 <FAT::fixFilepath(char*)>
c0016d83:	83 c4 10             	add    esp,0x10
c0016d86:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016d8e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016d95:	83 e0 01             	and    eax,0x1
c0016d98:	74 0a                	je     c0016da4 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016d9a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016da2:	66 90                	xchg   ax,ax
c0016da4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016dab:	83 e0 04             	and    eax,0x4
c0016dae:	74 10                	je     c0016dc0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016db0:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016db8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016dc0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016dc7:	83 e0 02             	and    eax,0x2
c0016dca:	74 08                	je     c0016dd4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016dcc:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016dd4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016ddb:	83 e0 08             	and    eax,0x8
c0016dde:	74 08                	je     c0016de8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016de0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016de8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016def:	83 e0 10             	and    eax,0x10
c0016df2:	74 08                	je     c0016dfc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016df4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016dfc:	83 ec 0c             	sub    esp,0xc
c0016dff:	68 28 02 00 00       	push   0x228
c0016e04:	e8 b0 09 ff ff       	call   c00077b9 <malloc>
c0016e09:	83 c4 10             	add    esp,0x10
c0016e0c:	89 c2                	mov    edx,eax
c0016e0e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e15:	89 10                	mov    DWORD PTR [eax],edx
c0016e17:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016e1e:	31 d2                	xor    edx,edx
c0016e20:	88 c2                	mov    dl,al
c0016e22:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016e29:	8b 00                	mov    eax,DWORD PTR [eax]
c0016e2b:	83 ec 04             	sub    esp,0x4
c0016e2e:	52                   	push   edx
c0016e2f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016e33:	52                   	push   edx
c0016e34:	50                   	push   eax
c0016e35:	e8 e3 cc fe ff       	call   c0003b1d <f_open>
c0016e3a:	83 c4 10             	add    esp,0x10
c0016e3d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016e44:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016e4c:	74 0a                	je     c0016e58 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016e4e:	b8 01 00 00 00       	mov    eax,0x1
c0016e53:	eb 0b                	jmp    c0016e60 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016e55:	8d 76 00             	lea    esi,[esi+0x0]
c0016e58:	b8 00 00 00 00       	mov    eax,0x0
c0016e5d:	8d 76 00             	lea    esi,[esi+0x0]
c0016e60:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016e66:	c3                   	ret    
c0016e67:	90                   	nop

c0016e68 <FAT::openDir(char const*, void**)>:
c0016e68:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016e6e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016e76:	74 0c                	je     c0016e84 <FAT::openDir(char const*, void**)+0x1c>
c0016e78:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016e80:	75 0e                	jne    c0016e90 <FAT::openDir(char const*, void**)+0x28>
c0016e82:	66 90                	xchg   ax,ax
c0016e84:	b8 04 00 00 00       	mov    eax,0x4
c0016e89:	e9 82 00 00 00       	jmp    c0016f10 <FAT::openDir(char const*, void**)+0xa8>
c0016e8e:	66 90                	xchg   ax,ax
c0016e90:	83 ec 08             	sub    esp,0x8
c0016e93:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e9a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016e9e:	50                   	push   eax
c0016e9f:	e8 5c 97 fe ff       	call   c0000600 <strcpy>
c0016ea4:	83 c4 10             	add    esp,0x10
c0016ea7:	83 ec 08             	sub    esp,0x8
c0016eaa:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016eae:	50                   	push   eax
c0016eaf:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016eb6:	e8 39 fe ff ff       	call   c0016cf4 <FAT::fixFilepath(char*)>
c0016ebb:	83 c4 10             	add    esp,0x10
c0016ebe:	83 ec 0c             	sub    esp,0xc
c0016ec1:	6a 30                	push   0x30
c0016ec3:	e8 f1 08 ff ff       	call   c00077b9 <malloc>
c0016ec8:	83 c4 10             	add    esp,0x10
c0016ecb:	89 c2                	mov    edx,eax
c0016ecd:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016ed4:	89 10                	mov    DWORD PTR [eax],edx
c0016ed6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016edd:	8b 00                	mov    eax,DWORD PTR [eax]
c0016edf:	83 ec 08             	sub    esp,0x8
c0016ee2:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016ee6:	52                   	push   edx
c0016ee7:	50                   	push   eax
c0016ee8:	e8 b9 d5 fe ff       	call   c00044a6 <f_opendir>
c0016eed:	83 c4 10             	add    esp,0x10
c0016ef0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016ef7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0016eff:	74 07                	je     c0016f08 <FAT::openDir(char const*, void**)+0xa0>
c0016f01:	b8 01 00 00 00       	mov    eax,0x1
c0016f06:	eb 08                	jmp    c0016f10 <FAT::openDir(char const*, void**)+0xa8>
c0016f08:	b8 00 00 00 00       	mov    eax,0x0
c0016f0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f10:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016f16:	c3                   	ret    
c0016f17:	90                   	nop

c0016f18 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016f18:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016f1e:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0016f26:	75 0c                	jne    c0016f34 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0016f28:	b8 04 00 00 00       	mov    eax,0x4
c0016f2d:	e9 d6 00 00 00       	jmp    c0017008 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f32:	66 90                	xchg   ax,ax
c0016f34:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0016f3c:	75 0a                	jne    c0016f48 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0016f3e:	b8 04 00 00 00       	mov    eax,0x4
c0016f43:	e9 c0 00 00 00       	jmp    c0017008 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f48:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0016f50:	75 0a                	jne    c0016f5c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0016f52:	b8 04 00 00 00       	mov    eax,0x4
c0016f57:	e9 ac 00 00 00       	jmp    c0017008 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016f5c:	83 ec 08             	sub    esp,0x8
c0016f5f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016f66:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016f6d:	50                   	push   eax
c0016f6e:	e8 8d 96 fe ff       	call   c0000600 <strcpy>
c0016f73:	83 c4 10             	add    esp,0x10
c0016f76:	83 ec 08             	sub    esp,0x8
c0016f79:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0016f80:	50                   	push   eax
c0016f81:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0016f88:	e8 67 fd ff ff       	call   c0016cf4 <FAT::fixFilepath(char*)>
c0016f8d:	83 c4 10             	add    esp,0x10
c0016f90:	83 ec 08             	sub    esp,0x8
c0016f93:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0016f97:	50                   	push   eax
c0016f98:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0016f9f:	50                   	push   eax
c0016fa0:	e8 80 d6 fe ff       	call   c0004625 <f_stat>
c0016fa5:	83 c4 10             	add    esp,0x10
c0016fa8:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0016faf:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0016fb6:	85 c0                	test   eax,eax
c0016fb8:	74 0a                	je     c0016fc4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0016fba:	83 f8 04             	cmp    eax,0x4
c0016fbd:	74 39                	je     c0016ff8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0016fbf:	eb 3f                	jmp    c0017000 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0016fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0016fc4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016fc8:	25 ff 00 00 00       	and    eax,0xff
c0016fcd:	83 e0 10             	and    eax,0x10
c0016fd0:	0f 95 c2             	setne  dl
c0016fd3:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0016fda:	88 10                	mov    BYTE PTR [eax],dl
c0016fdc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016fe0:	ba 00 00 00 00       	mov    edx,0x0
c0016fe5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0016fec:	89 01                	mov    DWORD PTR [ecx],eax
c0016fee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016ff1:	b8 00 00 00 00       	mov    eax,0x0
c0016ff6:	eb 10                	jmp    c0017008 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016ff8:	b8 02 00 00 00       	mov    eax,0x2
c0016ffd:	eb 09                	jmp    c0017008 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0016fff:	90                   	nop
c0017000:	b8 01 00 00 00       	mov    eax,0x1
c0017005:	8d 76 00             	lea    esi,[esi+0x0]
c0017008:	81 c4 2c 02 00 00    	add    esp,0x22c
c001700e:	c3                   	ret    
c001700f:	90                   	nop

c0017010 <FAT::unlink(char const*)>:
c0017010:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0017016:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001701e:	75 08                	jne    c0017028 <FAT::unlink(char const*)+0x18>
c0017020:	b8 04 00 00 00       	mov    eax,0x4
c0017025:	eb 61                	jmp    c0017088 <FAT::unlink(char const*)+0x78>
c0017027:	90                   	nop
c0017028:	83 ec 08             	sub    esp,0x8
c001702b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017032:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017036:	50                   	push   eax
c0017037:	e8 c4 95 fe ff       	call   c0000600 <strcpy>
c001703c:	83 c4 10             	add    esp,0x10
c001703f:	83 ec 08             	sub    esp,0x8
c0017042:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017046:	50                   	push   eax
c0017047:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001704e:	e8 a1 fc ff ff       	call   c0016cf4 <FAT::fixFilepath(char*)>
c0017053:	83 c4 10             	add    esp,0x10
c0017056:	83 ec 0c             	sub    esp,0xc
c0017059:	8d 44 24 18          	lea    eax,[esp+0x18]
c001705d:	50                   	push   eax
c001705e:	e8 27 d8 fe ff       	call   c000488a <f_unlink>
c0017063:	83 c4 10             	add    esp,0x10
c0017066:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001706d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017074:	85 c0                	test   eax,eax
c0017076:	75 08                	jne    c0017080 <FAT::unlink(char const*)+0x70>
c0017078:	b8 00 00 00 00       	mov    eax,0x0
c001707d:	eb 09                	jmp    c0017088 <FAT::unlink(char const*)+0x78>
c001707f:	90                   	nop
c0017080:	b8 01 00 00 00       	mov    eax,0x1
c0017085:	8d 76 00             	lea    esi,[esi+0x0]
c0017088:	81 c4 1c 01 00 00    	add    esp,0x11c
c001708e:	c3                   	ret    
c001708f:	90                   	nop

c0017090 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017090:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017096:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001709d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00170a4:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00170a8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00170ac:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00170b4:	75 0a                	jne    c00170c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00170b6:	b8 04 00 00 00       	mov    eax,0x4
c00170bb:	e9 54 01 00 00       	jmp    c0017214 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00170c0:	83 ec 08             	sub    esp,0x8
c00170c3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00170ca:	8d 44 24 24          	lea    eax,[esp+0x24]
c00170ce:	50                   	push   eax
c00170cf:	e8 2c 95 fe ff       	call   c0000600 <strcpy>
c00170d4:	83 c4 10             	add    esp,0x10
c00170d7:	83 ec 08             	sub    esp,0x8
c00170da:	8d 44 24 20          	lea    eax,[esp+0x20]
c00170de:	50                   	push   eax
c00170df:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00170e6:	e8 09 fc ff ff       	call   c0016cf4 <FAT::fixFilepath(char*)>
c00170eb:	83 c4 10             	add    esp,0x10
c00170ee:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00170f6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00170fe:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017102:	25 ff 00 00 00       	and    eax,0xff
c0017107:	83 e0 01             	and    eax,0x1
c001710a:	74 08                	je     c0017114 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c001710c:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0017114:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017118:	25 ff 00 00 00       	and    eax,0xff
c001711d:	83 e0 02             	and    eax,0x2
c0017120:	74 0a                	je     c001712c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017122:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001712a:	66 90                	xchg   ax,ax
c001712c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017130:	25 ff 00 00 00       	and    eax,0xff
c0017135:	83 e0 04             	and    eax,0x4
c0017138:	74 0a                	je     c0017144 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001713a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017142:	66 90                	xchg   ax,ax
c0017144:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017148:	25 ff 00 00 00       	and    eax,0xff
c001714d:	83 e0 08             	and    eax,0x8
c0017150:	74 0a                	je     c001715c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017152:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001715a:	66 90                	xchg   ax,ax
c001715c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017160:	25 ff 00 00 00       	and    eax,0xff
c0017165:	83 e0 01             	and    eax,0x1
c0017168:	74 0a                	je     c0017174 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001716a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017172:	66 90                	xchg   ax,ax
c0017174:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017178:	25 ff 00 00 00       	and    eax,0xff
c001717d:	83 e0 02             	and    eax,0x2
c0017180:	74 0a                	je     c001718c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017182:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001718a:	66 90                	xchg   ax,ax
c001718c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017190:	25 ff 00 00 00       	and    eax,0xff
c0017195:	83 e0 04             	and    eax,0x4
c0017198:	74 0a                	je     c00171a4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001719a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00171a2:	66 90                	xchg   ax,ax
c00171a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00171a8:	25 ff 00 00 00       	and    eax,0xff
c00171ad:	83 e0 08             	and    eax,0x8
c00171b0:	74 0a                	je     c00171bc <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c00171b2:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00171ba:	66 90                	xchg   ax,ax
c00171bc:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00171c3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00171ca:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00171d1:	31 d2                	xor    edx,edx
c00171d3:	88 c2                	mov    dl,al
c00171d5:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00171dc:	25 ff 00 00 00       	and    eax,0xff
c00171e1:	83 ec 04             	sub    esp,0x4
c00171e4:	52                   	push   edx
c00171e5:	50                   	push   eax
c00171e6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00171ea:	50                   	push   eax
c00171eb:	e8 0d db fe ff       	call   c0004cfd <f_chmod>
c00171f0:	83 c4 10             	add    esp,0x10
c00171f3:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00171fa:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0017201:	85 c0                	test   eax,eax
c0017203:	75 07                	jne    c001720c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c0017205:	b8 00 00 00 00       	mov    eax,0x0
c001720a:	eb 08                	jmp    c0017214 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c001720c:	b8 01 00 00 00       	mov    eax,0x1
c0017211:	8d 76 00             	lea    esi,[esi+0x0]
c0017214:	81 c4 2c 01 00 00    	add    esp,0x12c
c001721a:	c3                   	ret    
c001721b:	90                   	nop

c001721c <FAT::rename(char const*, char const*)>:
c001721c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017222:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001722a:	74 0c                	je     c0017238 <FAT::rename(char const*, char const*)+0x1c>
c001722c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017234:	75 0e                	jne    c0017244 <FAT::rename(char const*, char const*)+0x28>
c0017236:	66 90                	xchg   ax,ax
c0017238:	b8 04 00 00 00       	mov    eax,0x4
c001723d:	e9 9e 00 00 00       	jmp    c00172e0 <FAT::rename(char const*, char const*)+0xc4>
c0017242:	66 90                	xchg   ax,ax
c0017244:	83 ec 08             	sub    esp,0x8
c0017247:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001724e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017255:	50                   	push   eax
c0017256:	e8 a5 93 fe ff       	call   c0000600 <strcpy>
c001725b:	83 c4 10             	add    esp,0x10
c001725e:	83 ec 08             	sub    esp,0x8
c0017261:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017268:	50                   	push   eax
c0017269:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017270:	e8 7f fa ff ff       	call   c0016cf4 <FAT::fixFilepath(char*)>
c0017275:	83 c4 10             	add    esp,0x10
c0017278:	83 ec 08             	sub    esp,0x8
c001727b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017282:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017286:	50                   	push   eax
c0017287:	e8 74 93 fe ff       	call   c0000600 <strcpy>
c001728c:	83 c4 10             	add    esp,0x10
c001728f:	83 ec 08             	sub    esp,0x8
c0017292:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017296:	50                   	push   eax
c0017297:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001729e:	e8 51 fa ff ff       	call   c0016cf4 <FAT::fixFilepath(char*)>
c00172a3:	83 c4 10             	add    esp,0x10
c00172a6:	83 ec 08             	sub    esp,0x8
c00172a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00172ad:	50                   	push   eax
c00172ae:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00172b5:	50                   	push   eax
c00172b6:	e8 8c d8 fe ff       	call   c0004b47 <f_rename>
c00172bb:	83 c4 10             	add    esp,0x10
c00172be:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00172c5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00172cc:	85 c0                	test   eax,eax
c00172ce:	75 08                	jne    c00172d8 <FAT::rename(char const*, char const*)+0xbc>
c00172d0:	b8 00 00 00 00       	mov    eax,0x0
c00172d5:	eb 09                	jmp    c00172e0 <FAT::rename(char const*, char const*)+0xc4>
c00172d7:	90                   	nop
c00172d8:	b8 01 00 00 00       	mov    eax,0x1
c00172dd:	8d 76 00             	lea    esi,[esi+0x0]
c00172e0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00172e6:	c3                   	ret    
c00172e7:	90                   	nop

c00172e8 <FAT::mkdir(char const*)>:
c00172e8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00172ee:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00172f6:	75 08                	jne    c0017300 <FAT::mkdir(char const*)+0x18>
c00172f8:	b8 04 00 00 00       	mov    eax,0x4
c00172fd:	eb 61                	jmp    c0017360 <FAT::mkdir(char const*)+0x78>
c00172ff:	90                   	nop
c0017300:	83 ec 08             	sub    esp,0x8
c0017303:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001730a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001730e:	50                   	push   eax
c001730f:	e8 ec 92 fe ff       	call   c0000600 <strcpy>
c0017314:	83 c4 10             	add    esp,0x10
c0017317:	83 ec 08             	sub    esp,0x8
c001731a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001731e:	50                   	push   eax
c001731f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017326:	e8 c9 f9 ff ff       	call   c0016cf4 <FAT::fixFilepath(char*)>
c001732b:	83 c4 10             	add    esp,0x10
c001732e:	83 ec 0c             	sub    esp,0xc
c0017331:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017335:	50                   	push   eax
c0017336:	e8 71 d6 fe ff       	call   c00049ac <f_mkdir>
c001733b:	83 c4 10             	add    esp,0x10
c001733e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017345:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001734c:	85 c0                	test   eax,eax
c001734e:	75 08                	jne    c0017358 <FAT::mkdir(char const*)+0x70>
c0017350:	b8 00 00 00 00       	mov    eax,0x0
c0017355:	eb 09                	jmp    c0017360 <FAT::mkdir(char const*)+0x78>
c0017357:	90                   	nop
c0017358:	b8 01 00 00 00       	mov    eax,0x1
c001735d:	8d 76 00             	lea    esi,[esi+0x0]
c0017360:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017366:	c3                   	ret    
c0017367:	90                   	nop

c0017368 <FAT::exists(char const*)>:
c0017368:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001736e:	83 ec 08             	sub    esp,0x8
c0017371:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017378:	8d 44 24 10          	lea    eax,[esp+0x10]
c001737c:	50                   	push   eax
c001737d:	e8 7e 92 fe ff       	call   c0000600 <strcpy>
c0017382:	83 c4 10             	add    esp,0x10
c0017385:	83 ec 08             	sub    esp,0x8
c0017388:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001738c:	50                   	push   eax
c001738d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017394:	e8 5b f9 ff ff       	call   c0016cf4 <FAT::fixFilepath(char*)>
c0017399:	83 c4 10             	add    esp,0x10
c001739c:	83 ec 08             	sub    esp,0x8
c001739f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c00173a6:	50                   	push   eax
c00173a7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00173ab:	50                   	push   eax
c00173ac:	e8 74 d2 fe ff       	call   c0004625 <f_stat>
c00173b1:	83 c4 10             	add    esp,0x10
c00173b4:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00173bb:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00173c2:	85 c0                	test   eax,eax
c00173c4:	75 06                	jne    c00173cc <FAT::exists(char const*)+0x64>
c00173c6:	b0 01                	mov    al,0x1
c00173c8:	eb 06                	jmp    c00173d0 <FAT::exists(char const*)+0x68>
c00173ca:	66 90                	xchg   ax,ax
c00173cc:	b0 00                	mov    al,0x0
c00173ce:	66 90                	xchg   ax,ax
c00173d0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00173d6:	c3                   	ret    
c00173d7:	90                   	nop

c00173d8 <isoReadDiscSectorHelper>:
c00173d8:	83 ec 2c             	sub    esp,0x2c
c00173db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173df:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00173e3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00173e8:	83 e8 41             	sub    eax,0x41
c00173eb:	8b 0c 85 40 2a 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd5c0]
c00173f2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00173f6:	ba 00 00 00 00       	mov    edx,0x0
c00173fb:	83 ec 0c             	sub    esp,0xc
c00173fe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0017402:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0017406:	52                   	push   edx
c0017407:	50                   	push   eax
c0017408:	51                   	push   ecx
c0017409:	e8 d2 57 ff ff       	call   c000cbe0 <LogicalDisk::read(unsigned long long, int, void*)>
c001740e:	83 c4 20             	add    esp,0x20
c0017411:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017415:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001741a:	74 0c                	je     c0017428 <isoReadDiscSectorHelper+0x50>
c001741c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017420:	c1 e0 0b             	shl    eax,0xb
c0017423:	eb 0b                	jmp    c0017430 <isoReadDiscSectorHelper+0x58>
c0017425:	8d 76 00             	lea    esi,[esi+0x0]
c0017428:	b8 00 00 00 00       	mov    eax,0x0
c001742d:	8d 76 00             	lea    esi,[esi+0x0]
c0017430:	83 c4 2c             	add    esp,0x2c
c0017433:	c3                   	ret    

c0017434 <iso_kprintf>:
c0017434:	83 ec 0c             	sub    esp,0xc
c0017437:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c001743c:	83 ec 08             	sub    esp,0x8
c001743f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017443:	50                   	push   eax
c0017444:	e8 ed 12 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017449:	83 c4 10             	add    esp,0x10
c001744c:	90                   	nop
c001744d:	83 c4 0c             	add    esp,0xc
c0017450:	c3                   	ret    
c0017451:	8d 76 00             	lea    esi,[esi+0x0]

c0017454 <iso_kprintfd>:
c0017454:	83 ec 0c             	sub    esp,0xc
c0017457:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c001745c:	83 ec 08             	sub    esp,0x8
c001745f:	68 ac ea 01 c0       	push   0xc001eaac
c0017464:	50                   	push   eax
c0017465:	e8 cc 12 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c001746a:	83 c4 10             	add    esp,0x10
c001746d:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c0017472:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017476:	83 ec 08             	sub    esp,0x8
c0017479:	52                   	push   edx
c001747a:	50                   	push   eax
c001747b:	e8 70 12 ff ff       	call   c00086f0 <VgaText::putx(unsigned int)>
c0017480:	83 c4 10             	add    esp,0x10
c0017483:	a1 24 05 02 c0       	mov    eax,ds:0xc0020524
c0017488:	83 ec 08             	sub    esp,0x8
c001748b:	68 2d e9 01 c0       	push   0xc001e92d
c0017490:	50                   	push   eax
c0017491:	e8 a0 12 ff ff       	call   c0008736 <VgaText::puts(char const*)>
c0017496:	83 c4 10             	add    esp,0x10
c0017499:	90                   	nop
c001749a:	83 c4 0c             	add    esp,0xc
c001749d:	c3                   	ret    

c001749e <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c001749e:	b8 08 00 00 00       	mov    eax,0x8
c00174a3:	c3                   	ret    

c00174a4 <ISO9660::getName()>:
c00174a4:	b8 af ea 01 c0       	mov    eax,0xc001eaaf
c00174a9:	c3                   	ret    

c00174aa <ISO9660::closeDir(void*)>:
c00174aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00174ae:	8b 00                	mov    eax,DWORD PTR [eax]
c00174b0:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c00174b3:	90                   	nop

c00174b4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00174b4:	b8 01 00 00 00       	mov    eax,0x1
c00174b9:	c3                   	ret    

c00174ba <ISO9660::unlink(char const*)>:
c00174ba:	b8 01 00 00 00       	mov    eax,0x1
c00174bf:	c3                   	ret    

c00174c0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00174c0:	b8 03 00 00 00       	mov    eax,0x3
c00174c5:	c3                   	ret    

c00174c6 <ISO9660::rename(char const*, char const*)>:
c00174c6:	b8 01 00 00 00       	mov    eax,0x1
c00174cb:	c3                   	ret    

c00174cc <ISO9660::mkdir(char const*)>:
c00174cc:	b8 01 00 00 00       	mov    eax,0x1
c00174d1:	c3                   	ret    

c00174d2 <ISO9660::~ISO9660()>:
c00174d2:	83 ec 0c             	sub    esp,0xc
c00174d5:	ba 00 eb 01 c0       	mov    edx,0xc001eb00
c00174da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174de:	89 10                	mov    DWORD PTR [eax],edx
c00174e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00174e4:	83 ec 0c             	sub    esp,0xc
c00174e7:	50                   	push   eax
c00174e8:	e8 39 33 ff ff       	call   c000a826 <Filesystem::~Filesystem()>
c00174ed:	83 c4 10             	add    esp,0x10
c00174f0:	90                   	nop
c00174f1:	83 c4 0c             	add    esp,0xc
c00174f4:	c3                   	ret    
c00174f5:	90                   	nop

c00174f6 <ISO9660::~ISO9660()>:
c00174f6:	83 ec 0c             	sub    esp,0xc
c00174f9:	83 ec 0c             	sub    esp,0xc
c00174fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017500:	e8 cd ff ff ff       	call   c00174d2 <ISO9660::~ISO9660()>
c0017505:	83 c4 10             	add    esp,0x10
c0017508:	83 ec 08             	sub    esp,0x8
c001750b:	6a 08                	push   0x8
c001750d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017511:	e8 d4 2e ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c0017516:	83 c4 10             	add    esp,0x10
c0017519:	83 c4 0c             	add    esp,0xc
c001751c:	c3                   	ret    
c001751d:	90                   	nop

c001751e <ISO9660::exists(char const*)>:
c001751e:	83 ec 18             	sub    esp,0x18
c0017521:	68 ca ea 01 c0       	push   0xc001eaca
c0017526:	e8 30 8c ff ff       	call   c001015b <KePanic(char const*)>
c001752b:	31 c0                	xor    eax,eax
c001752d:	83 c4 1c             	add    esp,0x1c
c0017530:	c3                   	ret    
c0017531:	90                   	nop

c0017532 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017532:	56                   	push   esi
c0017533:	53                   	push   ebx
c0017534:	50                   	push   eax
c0017535:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0017539:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001753d:	85 db                	test   ebx,ebx
c001753f:	0f 84 82 00 00 00    	je     c00175c7 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017545:	85 f6                	test   esi,esi
c0017547:	74 7e                	je     c00175c7 <ISO9660::open(char const*, void**, FileOpenMode)+0x95>
c0017549:	ba 03 00 00 00       	mov    edx,0x3
c001754e:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017553:	75 77                	jne    c00175cc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017555:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0017558:	3a 05 40 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023940
c001755e:	74 34                	je     c0017594 <ISO9660::open(char const*, void**, FileOpenMode)+0x62>
c0017560:	83 ec 0c             	sub    esp,0xc
c0017563:	50                   	push   eax
c0017564:	e8 56 f2 fe ff       	call   c00067bf <init_percd>
c0017569:	83 c4 10             	add    esp,0x10
c001756c:	ba 0b 00 00 00       	mov    edx,0xb
c0017571:	40                   	inc    eax
c0017572:	74 58                	je     c00175cc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c0017574:	80 3d 40 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023940,0x0
c001757b:	74 10                	je     c001758d <ISO9660::open(char const*, void**, FileOpenMode)+0x5b>
c001757d:	83 ec 0c             	sub    esp,0xc
c0017580:	68 e8 ea 01 c0       	push   0xc001eae8
c0017585:	e8 d1 8b ff ff       	call   c001015b <KePanic(char const*)>
c001758a:	83 c4 10             	add    esp,0x10
c001758d:	8a 03                	mov    al,BYTE PTR [ebx]
c001758f:	a2 40 39 02 c0       	mov    ds:0xc0023940,al
c0017594:	83 ec 0c             	sub    esp,0xc
c0017597:	0f be 05 40 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023940
c001759e:	83 c3 03             	add    ebx,0x3
c00175a1:	50                   	push   eax
c00175a2:	e8 18 f2 fe ff       	call   c00067bf <init_percd>
c00175a7:	59                   	pop    ecx
c00175a8:	58                   	pop    eax
c00175a9:	6a 00                	push   0x0
c00175ab:	53                   	push   ebx
c00175ac:	e8 4c ed fe ff       	call   c00062fd <iso_open>
c00175b1:	83 c4 10             	add    esp,0x10
c00175b4:	ba 01 00 00 00       	mov    edx,0x1
c00175b9:	83 f8 ff             	cmp    eax,0xffffffff
c00175bc:	74 0e                	je     c00175cc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00175be:	83 c0 64             	add    eax,0x64
c00175c1:	31 d2                	xor    edx,edx
c00175c3:	89 06                	mov    DWORD PTR [esi],eax
c00175c5:	eb 05                	jmp    c00175cc <ISO9660::open(char const*, void**, FileOpenMode)+0x9a>
c00175c7:	ba 04 00 00 00       	mov    edx,0x4
c00175cc:	89 d0                	mov    eax,edx
c00175ce:	5a                   	pop    edx
c00175cf:	5b                   	pop    ebx
c00175d0:	5e                   	pop    esi
c00175d1:	c3                   	ret    

c00175d2 <ISO9660::openDir(char const*, void**)>:
c00175d2:	56                   	push   esi
c00175d3:	53                   	push   ebx
c00175d4:	50                   	push   eax
c00175d5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00175d9:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00175dd:	85 db                	test   ebx,ebx
c00175df:	74 76                	je     c0017657 <ISO9660::openDir(char const*, void**)+0x85>
c00175e1:	85 f6                	test   esi,esi
c00175e3:	74 72                	je     c0017657 <ISO9660::openDir(char const*, void**)+0x85>
c00175e5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00175e8:	3a 05 40 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023940
c00175ee:	74 34                	je     c0017624 <ISO9660::openDir(char const*, void**)+0x52>
c00175f0:	83 ec 0c             	sub    esp,0xc
c00175f3:	50                   	push   eax
c00175f4:	e8 c6 f1 fe ff       	call   c00067bf <init_percd>
c00175f9:	83 c4 10             	add    esp,0x10
c00175fc:	ba 0b 00 00 00       	mov    edx,0xb
c0017601:	40                   	inc    eax
c0017602:	74 58                	je     c001765c <ISO9660::openDir(char const*, void**)+0x8a>
c0017604:	80 3d 40 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023940,0x0
c001760b:	74 10                	je     c001761d <ISO9660::openDir(char const*, void**)+0x4b>
c001760d:	83 ec 0c             	sub    esp,0xc
c0017610:	68 e8 ea 01 c0       	push   0xc001eae8
c0017615:	e8 41 8b ff ff       	call   c001015b <KePanic(char const*)>
c001761a:	83 c4 10             	add    esp,0x10
c001761d:	8a 03                	mov    al,BYTE PTR [ebx]
c001761f:	a2 40 39 02 c0       	mov    ds:0xc0023940,al
c0017624:	83 ec 0c             	sub    esp,0xc
c0017627:	0f be 05 40 39 02 c0 	movsx  eax,BYTE PTR ds:0xc0023940
c001762e:	83 c3 03             	add    ebx,0x3
c0017631:	50                   	push   eax
c0017632:	e8 88 f1 fe ff       	call   c00067bf <init_percd>
c0017637:	59                   	pop    ecx
c0017638:	58                   	pop    eax
c0017639:	6a 01                	push   0x1
c001763b:	53                   	push   ebx
c001763c:	e8 bc ec fe ff       	call   c00062fd <iso_open>
c0017641:	83 c4 10             	add    esp,0x10
c0017644:	ba 01 00 00 00       	mov    edx,0x1
c0017649:	83 f8 ff             	cmp    eax,0xffffffff
c001764c:	74 0e                	je     c001765c <ISO9660::openDir(char const*, void**)+0x8a>
c001764e:	83 c0 64             	add    eax,0x64
c0017651:	31 d2                	xor    edx,edx
c0017653:	89 06                	mov    DWORD PTR [esi],eax
c0017655:	eb 05                	jmp    c001765c <ISO9660::openDir(char const*, void**)+0x8a>
c0017657:	ba 04 00 00 00       	mov    edx,0x4
c001765c:	89 d0                	mov    eax,edx
c001765e:	5a                   	pop    edx
c001765f:	5b                   	pop    ebx
c0017660:	5e                   	pop    esi
c0017661:	c3                   	ret    

c0017662 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0017662:	53                   	push   ebx
c0017663:	83 ec 08             	sub    esp,0x8
c0017666:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001766a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001766e:	85 c0                	test   eax,eax
c0017670:	74 25                	je     c0017697 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017672:	85 db                	test   ebx,ebx
c0017674:	74 21                	je     c0017697 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017676:	83 e8 64             	sub    eax,0x64
c0017679:	52                   	push   edx
c001767a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001767e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017682:	50                   	push   eax
c0017683:	e8 1d ed fe ff       	call   c00063a5 <iso_read>
c0017688:	83 c4 10             	add    esp,0x10
c001768b:	89 03                	mov    DWORD PTR [ebx],eax
c001768d:	09 d0                	or     eax,edx
c001768f:	0f 94 c0             	sete   al
c0017692:	0f b6 c0             	movzx  eax,al
c0017695:	eb 05                	jmp    c001769c <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017697:	b8 04 00 00 00       	mov    eax,0x4
c001769c:	83 c4 08             	add    esp,0x8
c001769f:	5b                   	pop    ebx
c00176a0:	c3                   	ret    
c00176a1:	90                   	nop

c00176a2 <ISO9660::seek(void*, unsigned long long)>:
c00176a2:	57                   	push   edi
c00176a3:	56                   	push   esi
c00176a4:	b8 04 00 00 00       	mov    eax,0x4
c00176a9:	51                   	push   ecx
c00176aa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00176ae:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00176b2:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00176b6:	85 d2                	test   edx,edx
c00176b8:	74 1c                	je     c00176d6 <ISO9660::seek(void*, unsigned long long)+0x34>
c00176ba:	6a 00                	push   0x0
c00176bc:	83 ea 64             	sub    edx,0x64
c00176bf:	57                   	push   edi
c00176c0:	56                   	push   esi
c00176c1:	52                   	push   edx
c00176c2:	e8 f4 ed fe ff       	call   c00064bb <iso_seek>
c00176c7:	83 c4 10             	add    esp,0x10
c00176ca:	31 f0                	xor    eax,esi
c00176cc:	31 fa                	xor    edx,edi
c00176ce:	09 d0                	or     eax,edx
c00176d0:	0f 95 c0             	setne  al
c00176d3:	0f b6 c0             	movzx  eax,al
c00176d6:	5a                   	pop    edx
c00176d7:	5e                   	pop    esi
c00176d8:	5f                   	pop    edi
c00176d9:	c3                   	ret    

c00176da <ISO9660::tell(void*, unsigned long long*)>:
c00176da:	53                   	push   ebx
c00176db:	83 ec 08             	sub    esp,0x8
c00176de:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176e2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00176e6:	85 c0                	test   eax,eax
c00176e8:	74 1c                	je     c0017706 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c00176ea:	85 db                	test   ebx,ebx
c00176ec:	74 18                	je     c0017706 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c00176ee:	83 ec 0c             	sub    esp,0xc
c00176f1:	83 e8 64             	sub    eax,0x64
c00176f4:	50                   	push   eax
c00176f5:	e8 45 ee fe ff       	call   c000653f <iso_tell>
c00176fa:	83 c4 10             	add    esp,0x10
c00176fd:	89 03                	mov    DWORD PTR [ebx],eax
c00176ff:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017702:	31 c0                	xor    eax,eax
c0017704:	eb 05                	jmp    c001770b <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017706:	b8 04 00 00 00       	mov    eax,0x4
c001770b:	83 c4 08             	add    esp,0x8
c001770e:	5b                   	pop    ebx
c001770f:	c3                   	ret    

c0017710 <ISO9660::stat(void*, unsigned long long*)>:
c0017710:	53                   	push   ebx
c0017711:	83 ec 08             	sub    esp,0x8
c0017714:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017718:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001771c:	85 c0                	test   eax,eax
c001771e:	74 20                	je     c0017740 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017720:	85 db                	test   ebx,ebx
c0017722:	74 1c                	je     c0017740 <ISO9660::stat(void*, unsigned long long*)+0x30>
c0017724:	83 ec 0c             	sub    esp,0xc
c0017727:	83 e8 64             	sub    eax,0x64
c001772a:	50                   	push   eax
c001772b:	e8 40 ee fe ff       	call   c0006570 <iso_total>
c0017730:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0017737:	89 03                	mov    DWORD PTR [ebx],eax
c0017739:	83 c4 10             	add    esp,0x10
c001773c:	31 c0                	xor    eax,eax
c001773e:	eb 05                	jmp    c0017745 <ISO9660::stat(void*, unsigned long long*)+0x35>
c0017740:	b8 04 00 00 00       	mov    eax,0x4
c0017745:	83 c4 08             	add    esp,0x8
c0017748:	5b                   	pop    ebx
c0017749:	c3                   	ret    

c001774a <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001774a:	55                   	push   ebp
c001774b:	57                   	push   edi
c001774c:	56                   	push   esi
c001774d:	53                   	push   ebx
c001774e:	83 ec 0c             	sub    esp,0xc
c0017751:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017755:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0017759:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001775d:	85 ff                	test   edi,edi
c001775f:	0f 94 c2             	sete   dl
c0017762:	85 f6                	test   esi,esi
c0017764:	0f 94 c0             	sete   al
c0017767:	08 c2                	or     dl,al
c0017769:	0f 85 9e 00 00 00    	jne    c001780d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c001776f:	85 db                	test   ebx,ebx
c0017771:	0f 84 96 00 00 00    	je     c001780d <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc3>
c0017777:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001777a:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0017780:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c0017787:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001778a:	3a 05 40 39 02 c0    	cmp    al,BYTE PTR ds:0xc0023940
c0017790:	74 34                	je     c00177c6 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x7c>
c0017792:	83 ec 0c             	sub    esp,0xc
c0017795:	50                   	push   eax
c0017796:	e8 24 f0 fe ff       	call   c00067bf <init_percd>
c001779b:	83 c4 10             	add    esp,0x10
c001779e:	ba 0b 00 00 00       	mov    edx,0xb
c00177a3:	40                   	inc    eax
c00177a4:	74 6c                	je     c0017812 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c00177a6:	80 3d 40 39 02 c0 00 	cmp    BYTE PTR ds:0xc0023940,0x0
c00177ad:	74 10                	je     c00177bf <ISO9660::stat(char const*, unsigned long long*, bool*)+0x75>
c00177af:	83 ec 0c             	sub    esp,0xc
c00177b2:	68 e8 ea 01 c0       	push   0xc001eae8
c00177b7:	e8 9f 89 ff ff       	call   c001015b <KePanic(char const*)>
c00177bc:	83 c4 10             	add    esp,0x10
c00177bf:	8a 03                	mov    al,BYTE PTR [ebx]
c00177c1:	a2 40 39 02 c0       	mov    ds:0xc0023940,al
c00177c6:	83 c3 03             	add    ebx,0x3
c00177c9:	52                   	push   edx
c00177ca:	52                   	push   edx
c00177cb:	6a 00                	push   0x0
c00177cd:	53                   	push   ebx
c00177ce:	e8 2a eb fe ff       	call   c00062fd <iso_open>
c00177d3:	83 c4 10             	add    esp,0x10
c00177d6:	89 c5                	mov    ebp,eax
c00177d8:	83 f8 ff             	cmp    eax,0xffffffff
c00177db:	75 0f                	jne    c00177ec <ISO9660::stat(char const*, unsigned long long*, bool*)+0xa2>
c00177dd:	50                   	push   eax
c00177de:	50                   	push   eax
c00177df:	6a 01                	push   0x1
c00177e1:	53                   	push   ebx
c00177e2:	e8 16 eb fe ff       	call   c00062fd <iso_open>
c00177e7:	c6 07 01             	mov    BYTE PTR [edi],0x1
c00177ea:	eb 1a                	jmp    c0017806 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xbc>
c00177ec:	83 ec 0c             	sub    esp,0xc
c00177ef:	50                   	push   eax
c00177f0:	e8 7b ed fe ff       	call   c0006570 <iso_total>
c00177f5:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c00177fc:	89 06                	mov    DWORD PTR [esi],eax
c00177fe:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017801:	e8 81 eb fe ff       	call   c0006387 <iso_close>
c0017806:	83 c4 10             	add    esp,0x10
c0017809:	31 d2                	xor    edx,edx
c001780b:	eb 05                	jmp    c0017812 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xc8>
c001780d:	ba 04 00 00 00       	mov    edx,0x4
c0017812:	83 c4 0c             	add    esp,0xc
c0017815:	89 d0                	mov    eax,edx
c0017817:	5b                   	pop    ebx
c0017818:	5e                   	pop    esi
c0017819:	5f                   	pop    edi
c001781a:	5d                   	pop    ebp
c001781b:	c3                   	ret    

c001781c <ISO9660::close(void*)>:
c001781c:	83 ec 0c             	sub    esp,0xc
c001781f:	b8 04 00 00 00       	mov    eax,0x4
c0017824:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017828:	85 d2                	test   edx,edx
c001782a:	74 11                	je     c001783d <ISO9660::close(void*)+0x21>
c001782c:	83 ec 0c             	sub    esp,0xc
c001782f:	83 ea 64             	sub    edx,0x64
c0017832:	52                   	push   edx
c0017833:	e8 4f eb fe ff       	call   c0006387 <iso_close>
c0017838:	83 c4 10             	add    esp,0x10
c001783b:	31 c0                	xor    eax,eax
c001783d:	83 c4 0c             	add    esp,0xc
c0017840:	c3                   	ret    
c0017841:	90                   	nop

c0017842 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017842:	55                   	push   ebp
c0017843:	57                   	push   edi
c0017844:	56                   	push   esi
c0017845:	53                   	push   ebx
c0017846:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001784c:	8b 84 24 34 01 00 00 	mov    eax,DWORD PTR [esp+0x134]
c0017853:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001785a:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0017861:	85 c0                	test   eax,eax
c0017863:	0f 84 96 00 00 00    	je     c00178ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017869:	85 db                	test   ebx,ebx
c001786b:	0f 84 8e 00 00 00    	je     c00178ff <ISO9660::readDir(void*, unsigned long, void*, int*)+0xbd>
c0017871:	83 ec 0c             	sub    esp,0xc
c0017874:	83 e8 64             	sub    eax,0x64
c0017877:	50                   	push   eax
c0017878:	e8 44 ed fe ff       	call   c00065c1 <iso_readdir>
c001787d:	83 c4 10             	add    esp,0x10
c0017880:	89 c6                	mov    esi,eax
c0017882:	85 c0                	test   eax,eax
c0017884:	75 18                	jne    c001789e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x5c>
c0017886:	52                   	push   edx
c0017887:	68 10 01 00 00       	push   0x110
c001788c:	6a 00                	push   0x0
c001788e:	57                   	push   edi
c001788f:	e8 3c 8c fe ff       	call   c00004d0 <memset>
c0017894:	83 c4 10             	add    esp,0x10
c0017897:	b8 01 00 00 00       	mov    eax,0x1
c001789c:	eb 66                	jmp    c0017904 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c001789e:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c00178a4:	8d 68 08             	lea    ebp,[eax+0x8]
c00178a7:	83 ec 0c             	sub    esp,0xc
c00178aa:	55                   	push   ebp
c00178ab:	e8 90 8c fe ff       	call   c0000540 <strlen>
c00178b0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00178b8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00178bc:	83 c4 10             	add    esp,0x10
c00178bf:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c00178c3:	75 0a                	jne    c00178cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x8d>
c00178c5:	b8 02 00 00 00       	mov    eax,0x2
c00178ca:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c00178cd:	74 05                	je     c00178d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x92>
c00178cf:	b8 01 00 00 00       	mov    eax,0x1
c00178d4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00178d8:	50                   	push   eax
c00178d9:	50                   	push   eax
c00178da:	55                   	push   ebp
c00178db:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00178df:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00178e3:	50                   	push   eax
c00178e4:	e8 17 8d fe ff       	call   c0000600 <strcpy>
c00178e9:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00178f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00178f2:	31 c0                	xor    eax,eax
c00178f4:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c00178fa:	83 c4 10             	add    esp,0x10
c00178fd:	eb 05                	jmp    c0017904 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc2>
c00178ff:	b8 04 00 00 00       	mov    eax,0x4
c0017904:	81 c4 1c 01 00 00    	add    esp,0x11c
c001790a:	5b                   	pop    ebx
c001790b:	5e                   	pop    esi
c001790c:	5f                   	pop    edi
c001790d:	5d                   	pop    ebp
c001790e:	c3                   	ret    

c001790f <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001790f:	57                   	push   edi
c0017910:	56                   	push   esi
c0017911:	53                   	push   ebx
c0017912:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017916:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001791a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001791e:	39 35 44 39 02 c0    	cmp    DWORD PTR ds:0xc0023944,esi
c0017924:	75 08                	jne    c001792e <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017926:	38 1d ac f4 01 c0    	cmp    BYTE PTR ds:0xc001f4ac,bl
c001792c:	74 4a                	je     c0017978 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c001792e:	83 ec 0c             	sub    esp,0xc
c0017931:	31 d2                	xor    edx,edx
c0017933:	68 60 39 02 c0       	push   0xc0023960
c0017938:	0f be c3             	movsx  eax,bl
c001793b:	6a 01                	push   0x1
c001793d:	52                   	push   edx
c001793e:	56                   	push   esi
c001793f:	ff 34 85 3c 29 02 c0 	push   DWORD PTR [eax*4-0x3ffdd6c4]
c0017946:	e8 95 52 ff ff       	call   c000cbe0 <LogicalDisk::read(unsigned long long, int, void*)>
c001794b:	83 c4 20             	add    esp,0x20
c001794e:	85 c0                	test   eax,eax
c0017950:	75 0e                	jne    c0017960 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017952:	89 35 44 39 02 c0    	mov    DWORD PTR ds:0xc0023944,esi
c0017958:	88 1d ac f4 01 c0    	mov    BYTE PTR ds:0xc001f4ac,bl
c001795e:	eb 18                	jmp    c0017978 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x69>
c0017960:	50                   	push   eax
c0017961:	68 00 08 00 00       	push   0x800
c0017966:	6a 00                	push   0x0
c0017968:	57                   	push   edi
c0017969:	e8 62 8b fe ff       	call   c00004d0 <memset>
c001796e:	83 c4 10             	add    esp,0x10
c0017971:	b8 01 00 00 00       	mov    eax,0x1
c0017976:	eb 0e                	jmp    c0017986 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x77>
c0017978:	be 60 39 02 c0       	mov    esi,0xc0023960
c001797d:	b9 00 08 00 00       	mov    ecx,0x800
c0017982:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017984:	31 c0                	xor    eax,eax
c0017986:	5b                   	pop    ebx
c0017987:	5e                   	pop    esi
c0017988:	5f                   	pop    edi
c0017989:	c3                   	ret    

c001798a <ISO9660::tryMount(LogicalDisk*, int)>:
c001798a:	53                   	push   ebx
c001798b:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017991:	c7 05 44 39 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023944,0xdeadbeef
c001799b:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00179a2:	8d 58 41             	lea    ebx,[eax+0x41]
c00179a5:	0f be db             	movsx  ebx,bl
c00179a8:	53                   	push   ebx
c00179a9:	8d 44 24 08          	lea    eax,[esp+0x8]
c00179ad:	50                   	push   eax
c00179ae:	6a 10                	push   0x10
c00179b0:	e8 5a ff ff ff       	call   c001790f <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00179b5:	83 c4 10             	add    esp,0x10
c00179b8:	31 d2                	xor    edx,edx
c00179ba:	85 c0                	test   eax,eax
c00179bc:	75 33                	jne    c00179f1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179be:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00179c3:	75 2c                	jne    c00179f1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179c5:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00179ca:	75 25                	jne    c00179f1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179cc:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00179d1:	75 1e                	jne    c00179f1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179d3:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00179d8:	75 17                	jne    c00179f1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179da:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00179df:	75 10                	jne    c00179f1 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c00179e1:	83 ec 0c             	sub    esp,0xc
c00179e4:	53                   	push   ebx
c00179e5:	e8 d5 ed fe ff       	call   c00067bf <init_percd>
c00179ea:	83 c4 10             	add    esp,0x10
c00179ed:	40                   	inc    eax
c00179ee:	0f 95 c2             	setne  dl
c00179f1:	88 d0                	mov    al,dl
c00179f3:	81 c4 08 08 00 00    	add    esp,0x808
c00179f9:	5b                   	pop    ebx
c00179fa:	c3                   	ret    
c00179fb:	90                   	nop

c00179fc <ISO9660::ISO9660()>:
c00179fc:	83 ec 0c             	sub    esp,0xc
c00179ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a03:	83 ec 0c             	sub    esp,0xc
c0017a06:	50                   	push   eax
c0017a07:	e8 f6 2d ff ff       	call   c000a802 <Filesystem::Filesystem()>
c0017a0c:	83 c4 10             	add    esp,0x10
c0017a0f:	ba 00 eb 01 c0       	mov    edx,0xc001eb00
c0017a14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a18:	89 10                	mov    DWORD PTR [eax],edx
c0017a1a:	e8 a2 ee fe ff       	call   c00068c1 <fs_iso9660_init>
c0017a1f:	90                   	nop
c0017a20:	83 c4 0c             	add    esp,0xc
c0017a23:	c3                   	ret    

c0017a24 <SoundCard::beginPlayback()>:
c0017a24:	c7 44 24 04 60 eb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eb60
c0017a2c:	e9 2a 87 ff ff       	jmp    c001015b <KePanic(char const*)>
c0017a31:	90                   	nop

c0017a32 <SoundCard::stopPlayback()>:
c0017a32:	c7 44 24 04 60 eb 01 c0 	mov    DWORD PTR [esp+0x4],0xc001eb60
c0017a3a:	e9 1c 87 ff ff       	jmp    c001015b <KePanic(char const*)>
c0017a3f:	90                   	nop

c0017a40 <SoundCard::SoundCard(char const*)>:
c0017a40:	83 ec 1c             	sub    esp,0x1c
c0017a43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a47:	83 ec 08             	sub    esp,0x8
c0017a4a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017a4e:	50                   	push   eax
c0017a4f:	e8 64 40 ff ff       	call   c000bab8 <Device::Device(char const*)>
c0017a54:	83 c4 10             	add    esp,0x10
c0017a57:	ba ac eb 01 c0       	mov    edx,0xc001ebac
c0017a5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a60:	89 10                	mov    DWORD PTR [eax],edx
c0017a62:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a66:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017a6d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a71:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017a7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a7f:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017a89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a8d:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c0017a97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a9b:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0017aa5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017aad:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0017ab2:	7f 19                	jg     c0017acd <SoundCard::SoundCard(char const*)+0x8d>
c0017ab4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ab8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017abc:	83 c2 54             	add    edx,0x54
c0017abf:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0017ac7:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017acb:	eb e0                	jmp    c0017aad <SoundCard::SoundCard(char const*)+0x6d>
c0017acd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017ad1:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017ad8:	90                   	nop
c0017ad9:	83 c4 1c             	add    esp,0x1c
c0017adc:	c3                   	ret    
c0017add:	90                   	nop

c0017ade <SoundCard::~SoundCard()>:
c0017ade:	83 ec 0c             	sub    esp,0xc
c0017ae1:	ba ac eb 01 c0       	mov    edx,0xc001ebac
c0017ae6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017aea:	89 10                	mov    DWORD PTR [eax],edx
c0017aec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017af0:	83 ec 0c             	sub    esp,0xc
c0017af3:	50                   	push   eax
c0017af4:	e8 29 3d ff ff       	call   c000b822 <Device::~Device()>
c0017af9:	83 c4 10             	add    esp,0x10
c0017afc:	90                   	nop
c0017afd:	83 c4 0c             	add    esp,0xc
c0017b00:	c3                   	ret    
c0017b01:	90                   	nop

c0017b02 <SoundCard::~SoundCard()>:
c0017b02:	83 ec 0c             	sub    esp,0xc
c0017b05:	83 ec 0c             	sub    esp,0xc
c0017b08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b0c:	e8 cd ff ff ff       	call   c0017ade <SoundCard::~SoundCard()>
c0017b11:	83 c4 10             	add    esp,0x10
c0017b14:	83 ec 08             	sub    esp,0x8
c0017b17:	68 e8 01 00 00       	push   0x1e8
c0017b1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017b20:	e8 c5 28 ff ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c0017b25:	83 c4 10             	add    esp,0x10
c0017b28:	83 c4 0c             	add    esp,0xc
c0017b2b:	c3                   	ret    

c0017b2c <SoundCard::configureRates(int, int, int)>:
c0017b2c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017b30:	31 c0                	xor    eax,eax
c0017b32:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017b39:	75 20                	jne    c0017b5b <SoundCard::configureRates(int, int, int)+0x2f>
c0017b3b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017b3f:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017b45:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017b49:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017b4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b53:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017b59:	b0 01                	mov    al,0x1
c0017b5b:	c3                   	ret    

c0017b5c <SoundCard::getSamples16(int, short*)>:
c0017b5c:	55                   	push   ebp
c0017b5d:	57                   	push   edi
c0017b5e:	31 ff                	xor    edi,edi
c0017b60:	56                   	push   esi
c0017b61:	53                   	push   ebx
c0017b62:	31 db                	xor    ebx,ebx
c0017b64:	83 ec 10             	sub    esp,0x10
c0017b67:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017b6b:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017b6f:	8d 04 36             	lea    eax,[esi+esi*1]
c0017b72:	50                   	push   eax
c0017b73:	6a 00                	push   0x0
c0017b75:	55                   	push   ebp
c0017b76:	e8 55 89 fe ff       	call   c00004d0 <memset>
c0017b7b:	83 c4 10             	add    esp,0x10
c0017b7e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b82:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017b89:	85 c0                	test   eax,eax
c0017b8b:	74 1b                	je     c0017ba8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017b8d:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017b91:	75 15                	jne    c0017ba8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017b93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017b97:	55                   	push   ebp
c0017b98:	56                   	push   esi
c0017b99:	50                   	push   eax
c0017b9a:	e8 ed 02 00 00       	call   c0017e8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017b9f:	83 c4 10             	add    esp,0x10
c0017ba2:	39 c7                	cmp    edi,eax
c0017ba4:	7d 02                	jge    c0017ba8 <SoundCard::getSamples16(int, short*)+0x4c>
c0017ba6:	89 c7                	mov    edi,eax
c0017ba8:	43                   	inc    ebx
c0017ba9:	83 fb 20             	cmp    ebx,0x20
c0017bac:	75 d0                	jne    c0017b7e <SoundCard::getSamples16(int, short*)+0x22>
c0017bae:	83 c4 0c             	add    esp,0xc
c0017bb1:	89 f8                	mov    eax,edi
c0017bb3:	5b                   	pop    ebx
c0017bb4:	5e                   	pop    esi
c0017bb5:	5f                   	pop    edi
c0017bb6:	5d                   	pop    ebp
c0017bb7:	c3                   	ret    

c0017bb8 <SoundCard::getSamples32(int, int*)>:
c0017bb8:	55                   	push   ebp
c0017bb9:	57                   	push   edi
c0017bba:	31 ff                	xor    edi,edi
c0017bbc:	56                   	push   esi
c0017bbd:	31 f6                	xor    esi,esi
c0017bbf:	53                   	push   ebx
c0017bc0:	83 ec 10             	sub    esp,0x10
c0017bc3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bc7:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017bcb:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017bcf:	c1 e0 02             	shl    eax,0x2
c0017bd2:	50                   	push   eax
c0017bd3:	6a 00                	push   0x0
c0017bd5:	55                   	push   ebp
c0017bd6:	e8 f5 88 fe ff       	call   c00004d0 <memset>
c0017bdb:	83 c4 10             	add    esp,0x10
c0017bde:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017be5:	85 c0                	test   eax,eax
c0017be7:	74 1b                	je     c0017c04 <SoundCard::getSamples32(int, int*)+0x4c>
c0017be9:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017bed:	75 15                	jne    c0017c04 <SoundCard::getSamples32(int, int*)+0x4c>
c0017bef:	53                   	push   ebx
c0017bf0:	55                   	push   ebp
c0017bf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017bf5:	50                   	push   eax
c0017bf6:	e8 55 03 00 00       	call   c0017f50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017bfb:	83 c4 10             	add    esp,0x10
c0017bfe:	39 c6                	cmp    esi,eax
c0017c00:	7d 02                	jge    c0017c04 <SoundCard::getSamples32(int, int*)+0x4c>
c0017c02:	89 c6                	mov    esi,eax
c0017c04:	47                   	inc    edi
c0017c05:	83 ff 20             	cmp    edi,0x20
c0017c08:	75 d4                	jne    c0017bde <SoundCard::getSamples32(int, int*)+0x26>
c0017c0a:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017c10:	85 f6                	test   esi,esi
c0017c12:	75 0f                	jne    c0017c23 <SoundCard::getSamples32(int, int*)+0x6b>
c0017c14:	84 c0                	test   al,al
c0017c16:	74 1b                	je     c0017c33 <SoundCard::getSamples32(int, int*)+0x7b>
c0017c18:	83 ec 0c             	sub    esp,0xc
c0017c1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c1d:	53                   	push   ebx
c0017c1e:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017c21:	eb 0d                	jmp    c0017c30 <SoundCard::getSamples32(int, int*)+0x78>
c0017c23:	84 c0                	test   al,al
c0017c25:	75 0c                	jne    c0017c33 <SoundCard::getSamples32(int, int*)+0x7b>
c0017c27:	83 ec 0c             	sub    esp,0xc
c0017c2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017c2c:	53                   	push   ebx
c0017c2d:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017c30:	83 c4 10             	add    esp,0x10
c0017c33:	83 c4 0c             	add    esp,0xc
c0017c36:	89 f0                	mov    eax,esi
c0017c38:	5b                   	pop    ebx
c0017c39:	5e                   	pop    esi
c0017c3a:	5f                   	pop    edi
c0017c3b:	5d                   	pop    ebp
c0017c3c:	c3                   	ret    
c0017c3d:	90                   	nop

c0017c3e <SoundCard::addChannel(SoundPort*)>:
c0017c3e:	83 ec 0c             	sub    esp,0xc
c0017c41:	31 c0                	xor    eax,eax
c0017c43:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c47:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017c4f:	74 1b                	je     c0017c6c <SoundCard::addChannel(SoundPort*)+0x2e>
c0017c51:	40                   	inc    eax
c0017c52:	83 f8 20             	cmp    eax,0x20
c0017c55:	75 f0                	jne    c0017c47 <SoundCard::addChannel(SoundPort*)+0x9>
c0017c57:	83 ec 0c             	sub    esp,0xc
c0017c5a:	68 85 eb 01 c0       	push   0xc001eb85
c0017c5f:	e8 f7 84 ff ff       	call   c001015b <KePanic(char const*)>
c0017c64:	83 c4 10             	add    esp,0x10
c0017c67:	83 c8 ff             	or     eax,0xffffffff
c0017c6a:	eb 0b                	jmp    c0017c77 <SoundCard::addChannel(SoundPort*)+0x39>
c0017c6c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017c70:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017c77:	83 c4 0c             	add    esp,0xc
c0017c7a:	c3                   	ret    
c0017c7b:	90                   	nop

c0017c7c <SoundCard::removeChannel(int)>:
c0017c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c80:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017c84:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017c8f:	c3                   	ret    

c0017c90 <SoundPort::SoundPort(int, int, int, int)>:
c0017c90:	83 ec 0c             	sub    esp,0xc
c0017c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c97:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ca2:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017caa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017cae:	89 10                	mov    DWORD PTR [eax],edx
c0017cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cb4:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017cb8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cbf:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cc3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017cc6:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017ccb:	75 13                	jne    c0017ce0 <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017ccd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cd1:	8b 00                	mov    eax,DWORD PTR [eax]
c0017cd3:	05 a0 0f 00 00       	add    eax,0xfa0
c0017cd8:	01 c0                	add    eax,eax
c0017cda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017cde:	66 90                	xchg   ax,ax
c0017ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ce4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017ce8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017ceb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cef:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017cfa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017cfd:	c1 e0 02             	shl    eax,0x2
c0017d00:	83 ec 0c             	sub    esp,0xc
c0017d03:	50                   	push   eax
c0017d04:	e8 b0 fa fe ff       	call   c00077b9 <malloc>
c0017d09:	83 c4 10             	add    esp,0x10
c0017d0c:	89 c2                	mov    edx,eax
c0017d0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d12:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017d15:	90                   	nop
c0017d16:	83 c4 0c             	add    esp,0xc
c0017d19:	c3                   	ret    
c0017d1a:	66 90                	xchg   ax,ax

c0017d1c <SoundPort::~SoundPort()>:
c0017d1c:	83 ec 0c             	sub    esp,0xc
c0017d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017d26:	85 c0                	test   eax,eax
c0017d28:	74 1e                	je     c0017d48 <SoundPort::~SoundPort()+0x2c>
c0017d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d2e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017d31:	83 ec 0c             	sub    esp,0xc
c0017d34:	50                   	push   eax
c0017d35:	e8 8f fa fe ff       	call   c00077c9 <free>
c0017d3a:	83 c4 10             	add    esp,0x10
c0017d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d41:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017d48:	90                   	nop
c0017d49:	83 c4 0c             	add    esp,0xc
c0017d4c:	c3                   	ret    
c0017d4d:	90                   	nop
c0017d4e:	66 90                	xchg   ax,ax

c0017d50 <SoundPort::unpause()>:
c0017d50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d54:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017d58:	c3                   	ret    
c0017d59:	90                   	nop
c0017d5a:	66 90                	xchg   ax,ax

c0017d5c <SoundPort::pause()>:
c0017d5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d60:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017d64:	c3                   	ret    
c0017d65:	90                   	nop
c0017d66:	66 90                	xchg   ax,ax

c0017d68 <SoundPort::getBufferUsed()>:
c0017d68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d6c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017d6f:	c3                   	ret    

c0017d70 <SoundPort::getBufferSize()>:
c0017d70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017d74:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017d77:	c3                   	ret    

c0017d78 <SoundPort::buffer16(short*, int)>:
c0017d78:	55                   	push   ebp
c0017d79:	57                   	push   edi
c0017d7a:	56                   	push   esi
c0017d7b:	53                   	push   ebx
c0017d7c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017d80:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017d84:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017d87:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017d8a:	74 68                	je     c0017df4 <SoundPort::buffer16(short*, int)+0x7c>
c0017d8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017d90:	85 c9                	test   ecx,ecx
c0017d92:	7e 60                	jle    c0017df4 <SoundPort::buffer16(short*, int)+0x7c>
c0017d94:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017d98:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017d9b:	c1 e1 0f             	shl    ecx,0xf
c0017d9e:	8d 70 01             	lea    esi,[eax+0x1]
c0017da1:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017da4:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0017da7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017daa:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017dad:	74 4d                	je     c0017dfc <SoundPort::buffer16(short*, int)+0x84>
c0017daf:	31 f6                	xor    esi,esi
c0017db1:	eb 21                	jmp    c0017dd4 <SoundPort::buffer16(short*, int)+0x5c>
c0017db3:	90                   	nop
c0017db4:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017db9:	8d 79 01             	lea    edi,[ecx+0x1]
c0017dbc:	c1 e3 0f             	shl    ebx,0xf
c0017dbf:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0017dc2:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017dc5:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017dc8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017dcb:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017dce:	74 1c                	je     c0017dec <SoundPort::buffer16(short*, int)+0x74>
c0017dd0:	89 c6                	mov    esi,eax
c0017dd2:	66 90                	xchg   ax,ax
c0017dd4:	8d 46 01             	lea    eax,[esi+0x1]
c0017dd7:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017ddb:	75 d7                	jne    c0017db4 <SoundPort::buffer16(short*, int)+0x3c>
c0017ddd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017de1:	8d 76 00             	lea    esi,[esi+0x0]
c0017de4:	5b                   	pop    ebx
c0017de5:	5e                   	pop    esi
c0017de6:	5f                   	pop    edi
c0017de7:	5d                   	pop    ebp
c0017de8:	c3                   	ret    
c0017de9:	8d 76 00             	lea    esi,[esi+0x0]
c0017dec:	5b                   	pop    ebx
c0017ded:	8d 46 02             	lea    eax,[esi+0x2]
c0017df0:	5e                   	pop    esi
c0017df1:	5f                   	pop    edi
c0017df2:	5d                   	pop    ebp
c0017df3:	c3                   	ret    
c0017df4:	5b                   	pop    ebx
c0017df5:	31 c0                	xor    eax,eax
c0017df7:	5e                   	pop    esi
c0017df8:	5f                   	pop    edi
c0017df9:	5d                   	pop    ebp
c0017dfa:	c3                   	ret    
c0017dfb:	90                   	nop
c0017dfc:	b8 01 00 00 00       	mov    eax,0x1
c0017e01:	eb e1                	jmp    c0017de4 <SoundPort::buffer16(short*, int)+0x6c>
c0017e03:	90                   	nop

c0017e04 <SoundPort::buffer32(int*, int)>:
c0017e04:	55                   	push   ebp
c0017e05:	57                   	push   edi
c0017e06:	56                   	push   esi
c0017e07:	53                   	push   ebx
c0017e08:	51                   	push   ecx
c0017e09:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017e11:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017e14:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017e18:	89 04 24             	mov    DWORD PTR [esp],eax
c0017e1b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017e1e:	74 5c                	je     c0017e7c <SoundPort::buffer32(int*, int)+0x78>
c0017e20:	85 c0                	test   eax,eax
c0017e22:	7e 58                	jle    c0017e7c <SoundPort::buffer32(int*, int)+0x78>
c0017e24:	8d 71 01             	lea    esi,[ecx+0x1]
c0017e27:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017e2a:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017e2d:	8b 37                	mov    esi,DWORD PTR [edi]
c0017e2f:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017e32:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017e35:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017e38:	74 4a                	je     c0017e84 <SoundPort::buffer32(int*, int)+0x80>
c0017e3a:	31 f6                	xor    esi,esi
c0017e3c:	eb 1e                	jmp    c0017e5c <SoundPort::buffer32(int*, int)+0x58>
c0017e3e:	66 90                	xchg   ax,ax
c0017e40:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017e43:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0017e46:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017e49:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017e4c:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017e50:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017e53:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017e56:	74 18                	je     c0017e70 <SoundPort::buffer32(int*, int)+0x6c>
c0017e58:	89 de                	mov    esi,ebx
c0017e5a:	66 90                	xchg   ax,ax
c0017e5c:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017e5f:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017e62:	75 dc                	jne    c0017e40 <SoundPort::buffer32(int*, int)+0x3c>
c0017e64:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017e67:	90                   	nop
c0017e68:	5a                   	pop    edx
c0017e69:	5b                   	pop    ebx
c0017e6a:	5e                   	pop    esi
c0017e6b:	5f                   	pop    edi
c0017e6c:	5d                   	pop    ebp
c0017e6d:	c3                   	ret    
c0017e6e:	66 90                	xchg   ax,ax
c0017e70:	5a                   	pop    edx
c0017e71:	8d 46 02             	lea    eax,[esi+0x2]
c0017e74:	5b                   	pop    ebx
c0017e75:	5e                   	pop    esi
c0017e76:	5f                   	pop    edi
c0017e77:	5d                   	pop    ebp
c0017e78:	c3                   	ret    
c0017e79:	8d 76 00             	lea    esi,[esi+0x0]
c0017e7c:	5a                   	pop    edx
c0017e7d:	31 c0                	xor    eax,eax
c0017e7f:	5b                   	pop    ebx
c0017e80:	5e                   	pop    esi
c0017e81:	5f                   	pop    edi
c0017e82:	5d                   	pop    ebp
c0017e83:	c3                   	ret    
c0017e84:	b8 01 00 00 00       	mov    eax,0x1
c0017e89:	eb dd                	jmp    c0017e68 <SoundPort::buffer32(int*, int)+0x64>
c0017e8b:	90                   	nop

c0017e8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017e8c:	57                   	push   edi
c0017e8d:	56                   	push   esi
c0017e8e:	53                   	push   ebx
c0017e8f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017e93:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0017e97:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017e9d:	39 03                	cmp    DWORD PTR [ebx],eax
c0017e9f:	74 13                	je     c0017eb4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017ea1:	83 ec 0c             	sub    esp,0xc
c0017ea4:	68 d8 eb 01 c0       	push   0xc001ebd8
c0017ea9:	e8 ad 82 ff ff       	call   c001015b <KePanic(char const*)>
c0017eae:	83 c4 10             	add    esp,0x10
c0017eb1:	8d 76 00             	lea    esi,[esi+0x0]
c0017eb4:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017eba:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017ebd:	74 11                	je     c0017ed0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017ebf:	83 ec 0c             	sub    esp,0xc
c0017ec2:	68 17 ec 01 c0       	push   0xc001ec17
c0017ec7:	e8 8f 82 ff ff       	call   c001015b <KePanic(char const*)>
c0017ecc:	83 c4 10             	add    esp,0x10
c0017ecf:	90                   	nop
c0017ed0:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0017ed6:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0017ed9:	74 11                	je     c0017eec <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0017edb:	83 ec 0c             	sub    esp,0xc
c0017ede:	68 17 ec 01 c0       	push   0xc001ec17
c0017ee3:	e8 73 82 ff ff       	call   c001015b <KePanic(char const*)>
c0017ee8:	83 c4 10             	add    esp,0x10
c0017eeb:	90                   	nop
c0017eec:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017eef:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017ef3:	7e 07                	jle    c0017efc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017ef5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017ef9:	8d 76 00             	lea    esi,[esi+0x0]
c0017efc:	85 f6                	test   esi,esi
c0017efe:	7e 2c                	jle    c0017f2c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017f00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017f04:	8d 3c 36             	lea    edi,[esi+esi*1]
c0017f07:	31 c9                	xor    ecx,ecx
c0017f09:	01 d7                	add    edi,edx
c0017f0b:	90                   	nop
c0017f0c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017f0f:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0017f12:	85 c0                	test   eax,eax
c0017f14:	79 06                	jns    c0017f1c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0017f16:	05 ff 7f 00 00       	add    eax,0x7fff
c0017f1b:	90                   	nop
c0017f1c:	c1 f8 0f             	sar    eax,0xf
c0017f1f:	83 c1 04             	add    ecx,0x4
c0017f22:	66 01 02             	add    WORD PTR [edx],ax
c0017f25:	83 c2 02             	add    edx,0x2
c0017f28:	39 d7                	cmp    edi,edx
c0017f2a:	75 e0                	jne    c0017f0c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017f2c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017f2f:	50                   	push   eax
c0017f30:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017f33:	29 f0                	sub    eax,esi
c0017f35:	c1 e0 02             	shl    eax,0x2
c0017f38:	50                   	push   eax
c0017f39:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017f3c:	50                   	push   eax
c0017f3d:	52                   	push   edx
c0017f3e:	e8 9d 84 fe ff       	call   c00003e0 <memmove>
c0017f43:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0017f46:	83 c4 10             	add    esp,0x10
c0017f49:	89 f0                	mov    eax,esi
c0017f4b:	5b                   	pop    ebx
c0017f4c:	5e                   	pop    esi
c0017f4d:	5f                   	pop    edi
c0017f4e:	c3                   	ret    
c0017f4f:	90                   	nop

c0017f50 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017f50:	57                   	push   edi
c0017f51:	56                   	push   esi
c0017f52:	53                   	push   ebx
c0017f53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017f57:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017f5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017f5f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017f65:	39 06                	cmp    DWORD PTR [esi],eax
c0017f67:	74 13                	je     c0017f7c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017f69:	83 ec 0c             	sub    esp,0xc
c0017f6c:	68 f8 eb 01 c0       	push   0xc001ebf8
c0017f71:	e8 e5 81 ff ff       	call   c001015b <KePanic(char const*)>
c0017f76:	83 c4 10             	add    esp,0x10
c0017f79:	8d 76 00             	lea    esi,[esi+0x0]
c0017f7c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0017f82:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017f85:	74 11                	je     c0017f98 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017f87:	83 ec 0c             	sub    esp,0xc
c0017f8a:	68 33 ec 01 c0       	push   0xc001ec33
c0017f8f:	e8 c7 81 ff ff       	call   c001015b <KePanic(char const*)>
c0017f94:	83 c4 10             	add    esp,0x10
c0017f97:	90                   	nop
c0017f98:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017f9e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017fa1:	74 11                	je     c0017fb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0017fa3:	83 ec 0c             	sub    esp,0xc
c0017fa6:	68 33 ec 01 c0       	push   0xc001ec33
c0017fab:	e8 ab 81 ff ff       	call   c001015b <KePanic(char const*)>
c0017fb0:	83 c4 10             	add    esp,0x10
c0017fb3:	90                   	nop
c0017fb4:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017fb7:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017fbb:	7e 07                	jle    c0017fc4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017fbd:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017fc1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fc4:	85 ff                	test   edi,edi
c0017fc6:	7e 1c                	jle    c0017fe4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017fc8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017fcf:	31 c0                	xor    eax,eax
c0017fd1:	8d 76 00             	lea    esi,[esi+0x0]
c0017fd4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017fd7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017fda:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017fdd:	83 c0 04             	add    eax,0x4
c0017fe0:	39 c1                	cmp    ecx,eax
c0017fe2:	75 f0                	jne    c0017fd4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017fe4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017fe7:	50                   	push   eax
c0017fe8:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017feb:	29 f8                	sub    eax,edi
c0017fed:	c1 e0 02             	shl    eax,0x2
c0017ff0:	50                   	push   eax
c0017ff1:	8d 04 ba             	lea    eax,[edx+edi*4]
c0017ff4:	50                   	push   eax
c0017ff5:	52                   	push   edx
c0017ff6:	e8 e5 83 fe ff       	call   c00003e0 <memmove>
c0017ffb:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017ffe:	83 c4 10             	add    esp,0x10
c0018001:	89 f8                	mov    eax,edi
c0018003:	5b                   	pop    ebx
c0018004:	5e                   	pop    esi
c0018005:	5f                   	pop    edi
c0018006:	c3                   	ret    
c0018007:	90                   	nop

c0018008 <PCI::open(int, int, void*)>:
c0018008:	83 ec 18             	sub    esp,0x18
c001800b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001800f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0018013:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0018019:	8b 10                	mov    edx,DWORD PTR [eax]
c001801b:	50                   	push   eax
c001801c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001801f:	31 c0                	xor    eax,eax
c0018021:	83 c4 1c             	add    esp,0x1c
c0018024:	c3                   	ret    
c0018025:	90                   	nop

c0018026 <PCI::close(int, int, void*)>:
c0018026:	31 c0                	xor    eax,eax
c0018028:	c3                   	ret    
c0018029:	90                   	nop

c001802a <PCI::PCI()>:
c001802a:	83 ec 0c             	sub    esp,0xc
c001802d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018031:	83 ec 08             	sub    esp,0x8
c0018034:	68 4f ec 01 c0       	push   0xc001ec4f
c0018039:	50                   	push   eax
c001803a:	e8 35 32 ff ff       	call   c000b274 <Bus::Bus(char const*)>
c001803f:	83 c4 10             	add    esp,0x10
c0018042:	ba f8 ec 01 c0       	mov    edx,0xc001ecf8
c0018047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001804b:	89 10                	mov    DWORD PTR [eax],edx
c001804d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018051:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001805b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001805f:	a3 60 41 02 c0       	mov    ds:0xc0024160,eax
c0018064:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018068:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001806e:	31 d2                	xor    edx,edx
c0018070:	88 c2                	mov    dl,al
c0018072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018076:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001807d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018081:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0018087:	31 d2                	xor    edx,edx
c0018089:	88 c2                	mov    dl,al
c001808b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001808f:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0018094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018098:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001809e:	8d 50 01             	lea    edx,[eax+0x1]
c00180a1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00180a5:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00180ab:	31 d2                	xor    edx,edx
c00180ad:	88 c2                	mov    dl,al
c00180af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00180b3:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00180b7:	83 c9 c0             	or     ecx,0xffffffc0
c00180ba:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00180be:	90                   	nop
c00180bf:	83 c4 0c             	add    esp,0xc
c00180c2:	c3                   	ret    
c00180c3:	90                   	nop

c00180c4 <PCI::readBAR8(unsigned int, int)>:
c00180c4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180cc:	f6 c2 01             	test   dl,0x1
c00180cf:	74 07                	je     c00180d8 <PCI::readBAR8(unsigned int, int)+0x14>
c00180d1:	83 e2 fc             	and    edx,0xfffffffc
c00180d4:	01 c2                	add    edx,eax
c00180d6:	ec                   	in     al,dx
c00180d7:	c3                   	ret    
c00180d8:	83 e2 f0             	and    edx,0xfffffff0
c00180db:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00180de:	c3                   	ret    
c00180df:	90                   	nop

c00180e0 <PCI::readBAR16(unsigned int, int)>:
c00180e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00180e4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180e8:	f6 c2 01             	test   dl,0x1
c00180eb:	74 08                	je     c00180f5 <PCI::readBAR16(unsigned int, int)+0x15>
c00180ed:	83 e2 fc             	and    edx,0xfffffffc
c00180f0:	01 c2                	add    edx,eax
c00180f2:	66 ed                	in     ax,dx
c00180f4:	c3                   	ret    
c00180f5:	83 e2 f0             	and    edx,0xfffffff0
c00180f8:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00180fc:	c3                   	ret    
c00180fd:	90                   	nop

c00180fe <PCI::readBAR32(unsigned int, int)>:
c00180fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018102:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018106:	f6 c2 01             	test   dl,0x1
c0018109:	74 07                	je     c0018112 <PCI::readBAR32(unsigned int, int)+0x14>
c001810b:	83 e2 fc             	and    edx,0xfffffffc
c001810e:	01 c2                	add    edx,eax
c0018110:	ed                   	in     eax,dx
c0018111:	c3                   	ret    
c0018112:	83 e2 f0             	and    edx,0xfffffff0
c0018115:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018118:	c3                   	ret    
c0018119:	90                   	nop

c001811a <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001811a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001811e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018122:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018126:	f6 c2 01             	test   dl,0x1
c0018129:	74 07                	je     c0018132 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001812b:	83 e2 fc             	and    edx,0xfffffffc
c001812e:	01 ca                	add    edx,ecx
c0018130:	ee                   	out    dx,al
c0018131:	c3                   	ret    
c0018132:	83 e2 f0             	and    edx,0xfffffff0
c0018135:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018138:	c3                   	ret    
c0018139:	90                   	nop

c001813a <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001813a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001813e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018142:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018146:	f6 c2 01             	test   dl,0x1
c0018149:	74 08                	je     c0018153 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001814b:	83 e2 fc             	and    edx,0xfffffffc
c001814e:	01 ca                	add    edx,ecx
c0018150:	66 ef                	out    dx,ax
c0018152:	c3                   	ret    
c0018153:	83 e2 f0             	and    edx,0xfffffff0
c0018156:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001815a:	c3                   	ret    
c001815b:	90                   	nop

c001815c <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001815c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018160:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018164:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018168:	f6 c2 01             	test   dl,0x1
c001816b:	74 07                	je     c0018174 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001816d:	83 e2 fc             	and    edx,0xfffffffc
c0018170:	01 ca                	add    edx,ecx
c0018172:	ef                   	out    dx,eax
c0018173:	c3                   	ret    
c0018174:	83 e2 f0             	and    edx,0xfffffff0
c0018177:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001817a:	c3                   	ret    
c001817b:	90                   	nop

c001817c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001817c:	55                   	push   ebp
c001817d:	57                   	push   edi
c001817e:	56                   	push   esi
c001817f:	53                   	push   ebx
c0018180:	83 ec 0c             	sub    esp,0xc
c0018183:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018187:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001818b:	89 f0                	mov    eax,esi
c001818d:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0018191:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018195:	3c 07                	cmp    al,0x7
c0018197:	76 10                	jbe    c00181a9 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c0018199:	83 ec 0c             	sub    esp,0xc
c001819c:	68 57 ec 01 c0       	push   0xc001ec57
c00181a1:	e8 b5 7f ff ff       	call   c001015b <KePanic(char const*)>
c00181a6:	83 c4 10             	add    esp,0x10
c00181a9:	80 fb 0f             	cmp    bl,0xf
c00181ac:	76 10                	jbe    c00181be <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00181ae:	83 ec 0c             	sub    esp,0xc
c00181b1:	68 87 ec 01 c0       	push   0xc001ec87
c00181b6:	e8 a0 7f ff ff       	call   c001015b <KePanic(char const*)>
c00181bb:	83 c4 10             	add    esp,0x10
c00181be:	8d 04 36             	lea    eax,[esi+esi*1]
c00181c1:	ba f8 0c 00 00       	mov    edx,0xcf8
c00181c6:	83 c8 f0             	or     eax,0xfffffff0
c00181c9:	ee                   	out    dx,al
c00181ca:	ba fa 0c 00 00       	mov    edx,0xcfa
c00181cf:	89 e8                	mov    eax,ebp
c00181d1:	ee                   	out    dx,al
c00181d2:	83 c4 0c             	add    esp,0xc
c00181d5:	89 d8                	mov    eax,ebx
c00181d7:	66 81 e7 fc 00       	and    di,0xfc
c00181dc:	5b                   	pop    ebx
c00181dd:	c1 e0 08             	shl    eax,0x8
c00181e0:	5e                   	pop    esi
c00181e1:	09 f8                	or     eax,edi
c00181e3:	5f                   	pop    edi
c00181e4:	66 0d 00 c0          	or     ax,0xc000
c00181e8:	5d                   	pop    ebp
c00181e9:	c3                   	ret    

c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00181ea:	57                   	push   edi
c00181eb:	56                   	push   esi
c00181ec:	53                   	push   ebx
c00181ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00181f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00181f5:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c00181fb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00181ff:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018203:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018207:	83 ff 01             	cmp    edi,0x1
c001820a:	75 3e                	jne    c001824a <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c001820c:	89 de                	mov    esi,ebx
c001820e:	0f b6 c0             	movzx  eax,al
c0018211:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018217:	c1 e0 10             	shl    eax,0x10
c001821a:	0f b6 c9             	movzx  ecx,cl
c001821d:	09 f0                	or     eax,esi
c001821f:	c1 e1 08             	shl    ecx,0x8
c0018222:	0f b6 d2             	movzx  edx,dl
c0018225:	09 c8                	or     eax,ecx
c0018227:	c1 e2 0b             	shl    edx,0xb
c001822a:	09 d0                	or     eax,edx
c001822c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018231:	0d 00 00 00 80       	or     eax,0x80000000
c0018236:	ef                   	out    dx,eax
c0018237:	ba fc 0c 00 00       	mov    edx,0xcfc
c001823c:	ed                   	in     eax,dx
c001823d:	83 e3 02             	and    ebx,0x2
c0018240:	0f b6 cb             	movzx  ecx,bl
c0018243:	c1 e1 03             	shl    ecx,0x3
c0018246:	d3 e8                	shr    eax,cl
c0018248:	eb 43                	jmp    c001828d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001824a:	83 ff 02             	cmp    edi,0x2
c001824d:	75 2c                	jne    c001827b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001824f:	83 ec 0c             	sub    esp,0xc
c0018252:	0f b6 c9             	movzx  ecx,cl
c0018255:	0f b6 d2             	movzx  edx,dl
c0018258:	0f b6 fb             	movzx  edi,bl
c001825b:	0f b6 c0             	movzx  eax,al
c001825e:	57                   	push   edi
c001825f:	51                   	push   ecx
c0018260:	52                   	push   edx
c0018261:	50                   	push   eax
c0018262:	56                   	push   esi
c0018263:	e8 14 ff ff ff       	call   c001817c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018268:	89 c2                	mov    edx,eax
c001826a:	ed                   	in     eax,dx
c001826b:	83 e3 02             	and    ebx,0x2
c001826e:	83 c4 20             	add    esp,0x20
c0018271:	0f b6 cb             	movzx  ecx,bl
c0018274:	c1 e1 03             	shl    ecx,0x3
c0018277:	d3 e8                	shr    eax,cl
c0018279:	eb 12                	jmp    c001828d <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c001827b:	83 ec 0c             	sub    esp,0xc
c001827e:	68 b7 ec 01 c0       	push   0xc001ecb7
c0018283:	e8 d3 7e ff ff       	call   c001015b <KePanic(char const*)>
c0018288:	83 c4 10             	add    esp,0x10
c001828b:	31 c0                	xor    eax,eax
c001828d:	5b                   	pop    ebx
c001828e:	5e                   	pop    esi
c001828f:	5f                   	pop    edi
c0018290:	c3                   	ret    
c0018291:	90                   	nop

c0018292 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0018292:	83 ec 18             	sub    esp,0x18
c0018295:	6a 00                	push   0x0
c0018297:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001829c:	50                   	push   eax
c001829d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182a2:	50                   	push   eax
c00182a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182a8:	50                   	push   eax
c00182a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182ad:	e8 38 ff ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182b2:	83 c4 2c             	add    esp,0x2c
c00182b5:	c3                   	ret    

c00182b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00182b6:	83 ec 18             	sub    esp,0x18
c00182b9:	6a 0e                	push   0xe
c00182bb:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182c0:	50                   	push   eax
c00182c1:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182c6:	50                   	push   eax
c00182c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182cc:	50                   	push   eax
c00182cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182d1:	e8 14 ff ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182d6:	83 c4 2c             	add    esp,0x2c
c00182d9:	0f b6 c0             	movzx  eax,al
c00182dc:	c3                   	ret    
c00182dd:	90                   	nop

c00182de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00182de:	55                   	push   ebp
c00182df:	57                   	push   edi
c00182e0:	56                   	push   esi
c00182e1:	53                   	push   ebx
c00182e2:	83 ec 18             	sub    esp,0x18
c00182e5:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00182ea:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00182ef:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c00182f4:	6a 0a                	push   0xa
c00182f6:	56                   	push   esi
c00182f7:	55                   	push   ebp
c00182f8:	57                   	push   edi
c00182f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00182fd:	e8 e8 fe ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018302:	83 c4 14             	add    esp,0x14
c0018305:	89 c3                	mov    ebx,eax
c0018307:	6a 0a                	push   0xa
c0018309:	0f b6 db             	movzx  ebx,bl
c001830c:	56                   	push   esi
c001830d:	55                   	push   ebp
c001830e:	57                   	push   edi
c001830f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018313:	e8 d2 fe ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018318:	83 c4 2c             	add    esp,0x2c
c001831b:	25 00 ff 00 00       	and    eax,0xff00
c0018320:	09 d8                	or     eax,ebx
c0018322:	5b                   	pop    ebx
c0018323:	5e                   	pop    esi
c0018324:	5f                   	pop    edi
c0018325:	5d                   	pop    ebp
c0018326:	c3                   	ret    
c0018327:	90                   	nop

c0018328 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018328:	83 ec 18             	sub    esp,0x18
c001832b:	6a 08                	push   0x8
c001832d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018332:	50                   	push   eax
c0018333:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018338:	50                   	push   eax
c0018339:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001833e:	50                   	push   eax
c001833f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018343:	e8 a2 fe ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018348:	83 c4 2c             	add    esp,0x2c
c001834b:	0f b6 c4             	movzx  eax,ah
c001834e:	c3                   	ret    
c001834f:	90                   	nop

c0018350 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0018350:	83 ec 18             	sub    esp,0x18
c0018353:	6a 08                	push   0x8
c0018355:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001835a:	50                   	push   eax
c001835b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018360:	50                   	push   eax
c0018361:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018366:	50                   	push   eax
c0018367:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001836b:	e8 7a fe ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018370:	83 c4 2c             	add    esp,0x2c
c0018373:	c3                   	ret    

c0018374 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018374:	83 ec 18             	sub    esp,0x18
c0018377:	6a 3c                	push   0x3c
c0018379:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001837e:	50                   	push   eax
c001837f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018384:	50                   	push   eax
c0018385:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001838a:	50                   	push   eax
c001838b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001838f:	e8 56 fe ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018394:	83 c4 2c             	add    esp,0x2c
c0018397:	c3                   	ret    

c0018398 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0018398:	83 ec 18             	sub    esp,0x18
c001839b:	6a 18                	push   0x18
c001839d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00183a2:	50                   	push   eax
c00183a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00183a8:	50                   	push   eax
c00183a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00183ae:	50                   	push   eax
c00183af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00183b3:	e8 32 fe ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183b8:	83 c4 2c             	add    esp,0x2c
c00183bb:	0f b6 c4             	movzx  eax,ah
c00183be:	c3                   	ret    
c00183bf:	90                   	nop

c00183c0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00183c0:	55                   	push   ebp
c00183c1:	57                   	push   edi
c00183c2:	56                   	push   esi
c00183c3:	53                   	push   ebx
c00183c4:	83 ec 28             	sub    esp,0x28
c00183c7:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00183cb:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00183d0:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00183d5:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00183da:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00183e1:	8d 43 12             	lea    eax,[ebx+0x12]
c00183e4:	83 c3 10             	add    ebx,0x10
c00183e7:	0f b6 c0             	movzx  eax,al
c00183ea:	0f b6 db             	movzx  ebx,bl
c00183ed:	50                   	push   eax
c00183ee:	51                   	push   ecx
c00183ef:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00183f3:	57                   	push   edi
c00183f4:	55                   	push   ebp
c00183f5:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00183f9:	e8 ec fd ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183fe:	83 c4 14             	add    esp,0x14
c0018401:	89 c6                	mov    esi,eax
c0018403:	53                   	push   ebx
c0018404:	c1 e6 10             	shl    esi,0x10
c0018407:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001840b:	51                   	push   ecx
c001840c:	57                   	push   edi
c001840d:	55                   	push   ebp
c001840e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018412:	e8 d3 fd ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018417:	83 c4 3c             	add    esp,0x3c
c001841a:	0f b7 c0             	movzx  eax,ax
c001841d:	5b                   	pop    ebx
c001841e:	09 f0                	or     eax,esi
c0018420:	5e                   	pop    esi
c0018421:	5f                   	pop    edi
c0018422:	5d                   	pop    ebp
c0018423:	c3                   	ret    

c0018424 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018424:	55                   	push   ebp
c0018425:	57                   	push   edi
c0018426:	56                   	push   esi
c0018427:	53                   	push   ebx
c0018428:	83 ec 0c             	sub    esp,0xc
c001842b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001842f:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018433:	89 f5                	mov    ebp,esi
c0018435:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001843b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001843f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018443:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018447:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001844b:	83 f9 01             	cmp    ecx,0x1
c001844e:	75 5d                	jne    c00184ad <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c0018450:	0f b6 c8             	movzx  ecx,al
c0018453:	0f b6 d2             	movzx  edx,dl
c0018456:	c1 e1 10             	shl    ecx,0x10
c0018459:	c1 e2 0b             	shl    edx,0xb
c001845c:	89 f0                	mov    eax,esi
c001845e:	25 fc 00 00 00       	and    eax,0xfc
c0018463:	09 c1                	or     ecx,eax
c0018465:	89 e8                	mov    eax,ebp
c0018467:	0f b6 c0             	movzx  eax,al
c001846a:	c1 e0 08             	shl    eax,0x8
c001846d:	09 c1                	or     ecx,eax
c001846f:	09 d1                	or     ecx,edx
c0018471:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018476:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001847c:	89 c8                	mov    eax,ecx
c001847e:	ef                   	out    dx,eax
c001847f:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018484:	ed                   	in     eax,dx
c0018485:	0f b7 db             	movzx  ebx,bx
c0018488:	83 e6 02             	and    esi,0x2
c001848b:	74 0a                	je     c0018497 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001848d:	0f b7 d0             	movzx  edx,ax
c0018490:	c1 e3 10             	shl    ebx,0x10
c0018493:	09 d3                	or     ebx,edx
c0018495:	eb 05                	jmp    c001849c <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c0018497:	66 31 c0             	xor    ax,ax
c001849a:	09 c3                	or     ebx,eax
c001849c:	ba f8 0c 00 00       	mov    edx,0xcf8
c00184a1:	89 c8                	mov    eax,ecx
c00184a3:	ef                   	out    dx,eax
c00184a4:	ba fc 0c 00 00       	mov    edx,0xcfc
c00184a9:	89 d8                	mov    eax,ebx
c00184ab:	eb 41                	jmp    c00184ee <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00184ad:	83 f9 02             	cmp    ecx,0x2
c00184b0:	75 45                	jne    c00184f7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00184b2:	83 ec 0c             	sub    esp,0xc
c00184b5:	0f b6 d2             	movzx  edx,dl
c00184b8:	89 f1                	mov    ecx,esi
c00184ba:	0f b6 c0             	movzx  eax,al
c00184bd:	0f b6 f1             	movzx  esi,cl
c00184c0:	89 e9                	mov    ecx,ebp
c00184c2:	56                   	push   esi
c00184c3:	0f b6 c9             	movzx  ecx,cl
c00184c6:	51                   	push   ecx
c00184c7:	52                   	push   edx
c00184c8:	50                   	push   eax
c00184c9:	57                   	push   edi
c00184ca:	e8 ad fc ff ff       	call   c001817c <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00184cf:	89 c2                	mov    edx,eax
c00184d1:	ed                   	in     eax,dx
c00184d2:	83 c4 20             	add    esp,0x20
c00184d5:	0f b7 db             	movzx  ebx,bx
c00184d8:	f6 c2 02             	test   dl,0x2
c00184db:	74 0c                	je     c00184e9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00184dd:	0f b7 c8             	movzx  ecx,ax
c00184e0:	89 d8                	mov    eax,ebx
c00184e2:	c1 e0 10             	shl    eax,0x10
c00184e5:	09 c8                	or     eax,ecx
c00184e7:	eb 05                	jmp    c00184ee <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00184e9:	66 31 c0             	xor    ax,ax
c00184ec:	09 d8                	or     eax,ebx
c00184ee:	ef                   	out    dx,eax
c00184ef:	83 c4 0c             	add    esp,0xc
c00184f2:	5b                   	pop    ebx
c00184f3:	5e                   	pop    esi
c00184f4:	5f                   	pop    edi
c00184f5:	5d                   	pop    ebp
c00184f6:	c3                   	ret    
c00184f7:	c7 44 24 20 b7 ec 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ecb7
c00184ff:	83 c4 0c             	add    esp,0xc
c0018502:	5b                   	pop    ebx
c0018503:	5e                   	pop    esi
c0018504:	5f                   	pop    edi
c0018505:	5d                   	pop    ebp
c0018506:	e9 50 7c ff ff       	jmp    c001015b <KePanic(char const*)>
c001850b:	90                   	nop

c001850c <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001850c:	55                   	push   ebp
c001850d:	57                   	push   edi
c001850e:	56                   	push   esi
c001850f:	53                   	push   ebx
c0018510:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018516:	80 3d 6c 41 02 c0 00 	cmp    BYTE PTR ds:0xc002416c,0x0
c001851d:	0f 85 84 00 00 00    	jne    c00185a7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c0018523:	83 ec 0c             	sub    esp,0xc
c0018526:	68 14 01 00 00       	push   0x114
c001852b:	e8 89 f2 fe ff       	call   c00077b9 <malloc>
c0018530:	83 c4 0c             	add    esp,0xc
c0018533:	89 c3                	mov    ebx,eax
c0018535:	ff 35 b0 37 02 c0    	push   DWORD PTR ds:0xc00237b0
c001853b:	68 bd ec 01 c0       	push   0xc001ecbd
c0018540:	50                   	push   eax
c0018541:	e8 10 25 ff ff       	call   c000aa56 <File::File(char const*, Process*)>
c0018546:	5a                   	pop    edx
c0018547:	59                   	pop    ecx
c0018548:	6a 01                	push   0x1
c001854a:	53                   	push   ebx
c001854b:	e8 c6 25 ff ff       	call   c000ab16 <File::open(FileOpenMode)>
c0018550:	83 c4 0c             	add    esp,0xc
c0018553:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018557:	50                   	push   eax
c0018558:	8d 44 24 28          	lea    eax,[esp+0x28]
c001855c:	50                   	push   eax
c001855d:	53                   	push   ebx
c001855e:	e8 5f 28 ff ff       	call   c000adc2 <File::stat(unsigned long long*, bool*)>
c0018563:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018567:	40                   	inc    eax
c0018568:	89 04 24             	mov    DWORD PTR [esp],eax
c001856b:	e8 49 f2 fe ff       	call   c00077b9 <malloc>
c0018570:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018574:	a3 68 41 02 c0       	mov    ds:0xc0024168,eax
c0018579:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001857d:	5e                   	pop    esi
c001857e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0018580:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018584:	51                   	push   ecx
c0018585:	50                   	push   eax
c0018586:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001858a:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001858e:	53                   	push   ebx
c001858f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0018592:	83 c4 14             	add    esp,0x14
c0018595:	53                   	push   ebx
c0018596:	e8 d9 25 ff ff       	call   c000ab74 <File::close()>
c001859b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001859f:	83 c4 10             	add    esp,0x10
c00185a2:	a3 64 41 02 c0       	mov    ds:0xc0024164,eax
c00185a7:	a1 64 41 02 c0       	mov    eax,ds:0xc0024164
c00185ac:	8b 15 68 41 02 c0    	mov    edx,DWORD PTR ds:0xc0024168
c00185b2:	89 04 24             	mov    DWORD PTR [esp],eax
c00185b5:	31 ff                	xor    edi,edi
c00185b7:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00185bf:	31 f6                	xor    esi,esi
c00185c1:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00185c6:	31 db                	xor    ebx,ebx
c00185c8:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00185d0:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00185d5:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00185dc:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00185e0:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00185e7:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00185eb:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00185ee:	0f 8e 6b 01 00 00    	jle    c001875f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c00185f4:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00185f7:	d4 40                	aam    0x40
c00185f9:	d5 39                	aad    0x39
c00185fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00185ff:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c0018603:	d4 40                	aam    0x40
c0018605:	d5 39                	aad    0x39
c0018607:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001860b:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001860f:	d4 40                	aam    0x40
c0018611:	d5 39                	aad    0x39
c0018613:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018617:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c001861b:	d4 40                	aam    0x40
c001861d:	d5 39                	aad    0x39
c001861f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018623:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018627:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001862b:	3c 56                	cmp    al,0x56
c001862d:	74 45                	je     c0018674 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001862f:	d4 40                	aam    0x40
c0018631:	d5 39                	aad    0x39
c0018633:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018636:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c001863a:	0f b6 c9             	movzx  ecx,cl
c001863d:	c1 e1 04             	shl    ecx,0x4
c0018640:	d4 40                	aam    0x40
c0018642:	d5 39                	aad    0x39
c0018644:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018647:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c001864b:	0f b6 db             	movzx  ebx,bl
c001864e:	09 cb                	or     ebx,ecx
c0018650:	c1 e3 04             	shl    ebx,0x4
c0018653:	d4 40                	aam    0x40
c0018655:	d5 39                	aad    0x39
c0018657:	8d 48 d0             	lea    ecx,[eax-0x30]
c001865a:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001865e:	0f b6 c9             	movzx  ecx,cl
c0018661:	09 cb                	or     ebx,ecx
c0018663:	c1 e3 04             	shl    ebx,0x4
c0018666:	89 d9                	mov    ecx,ebx
c0018668:	d4 40                	aam    0x40
c001866a:	d5 39                	aad    0x39
c001866c:	8d 58 d0             	lea    ebx,[eax-0x30]
c001866f:	0f b6 db             	movzx  ebx,bl
c0018672:	09 cb                	or     ebx,ecx
c0018674:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018678:	80 f9 44             	cmp    cl,0x44
c001867b:	74 47                	je     c00186c4 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c001867d:	88 c8                	mov    al,cl
c001867f:	d4 40                	aam    0x40
c0018681:	d5 39                	aad    0x39
c0018683:	83 e8 30             	sub    eax,0x30
c0018686:	0f b6 e8             	movzx  ebp,al
c0018689:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c001868d:	c1 e5 04             	shl    ebp,0x4
c0018690:	d4 40                	aam    0x40
c0018692:	d5 39                	aad    0x39
c0018694:	83 e8 30             	sub    eax,0x30
c0018697:	0f b6 f0             	movzx  esi,al
c001869a:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c001869e:	09 ee                	or     esi,ebp
c00186a0:	c1 e6 04             	shl    esi,0x4
c00186a3:	d4 40                	aam    0x40
c00186a5:	d5 39                	aad    0x39
c00186a7:	83 e8 30             	sub    eax,0x30
c00186aa:	0f b6 e8             	movzx  ebp,al
c00186ad:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00186b1:	09 ee                	or     esi,ebp
c00186b3:	c1 e6 04             	shl    esi,0x4
c00186b6:	89 f5                	mov    ebp,esi
c00186b8:	d4 40                	aam    0x40
c00186ba:	d5 39                	aad    0x39
c00186bc:	83 e8 30             	sub    eax,0x30
c00186bf:	0f b6 f0             	movzx  esi,al
c00186c2:	09 ee                	or     esi,ebp
c00186c4:	83 c7 10             	add    edi,0x10
c00186c7:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00186cb:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00186ce:	3c 0a                	cmp    al,0xa
c00186d0:	74 09                	je     c00186db <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00186d2:	45                   	inc    ebp
c00186d3:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00186d6:	75 16                	jne    c00186ee <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c00186d8:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00186db:	3c 0a                	cmp    al,0xa
c00186dd:	0f 94 c0             	sete   al
c00186e0:	0f b6 c0             	movzx  eax,al
c00186e3:	01 c7                	add    edi,eax
c00186e5:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00186ea:	75 0c                	jne    c00186f8 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c00186ec:	eb 15                	jmp    c0018703 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c00186ee:	47                   	inc    edi
c00186ef:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00186f2:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c00186f6:	eb d3                	jmp    c00186cb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c00186f8:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c00186fd:	0f 85 e8 fe ff ff    	jne    c00185eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018703:	80 f9 44             	cmp    cl,0x44
c0018706:	74 0b                	je     c0018713 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018708:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c001870d:	0f 85 d8 fe ff ff    	jne    c00185eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018713:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018717:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001871b:	c1 e1 04             	shl    ecx,0x4
c001871e:	83 e8 30             	sub    eax,0x30
c0018721:	09 c8                	or     eax,ecx
c0018723:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018727:	0f 85 be fe ff ff    	jne    c00185eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001872d:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c0018731:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018735:	c1 e1 04             	shl    ecx,0x4
c0018738:	83 e8 30             	sub    eax,0x30
c001873b:	09 c8                	or     eax,ecx
c001873d:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0018741:	0f 85 a4 fe ff ff    	jne    c00185eb <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018747:	50                   	push   eax
c0018748:	50                   	push   eax
c0018749:	8d 44 24 28          	lea    eax,[esp+0x28]
c001874d:	50                   	push   eax
c001874e:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018755:	e8 a6 7e fe ff       	call   c0000600 <strcpy>
c001875a:	83 c4 10             	add    esp,0x10
c001875d:	eb 15                	jmp    c0018774 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001875f:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018766:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c0018771:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018774:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c001877b:	81 c4 2c 01 00 00    	add    esp,0x12c
c0018781:	5b                   	pop    ebx
c0018782:	5e                   	pop    esi
c0018783:	5f                   	pop    edi
c0018784:	5d                   	pop    ebp
c0018785:	c3                   	ret    

c0018786 <PCI::checkBus(unsigned char)>:
c0018786:	56                   	push   esi
c0018787:	53                   	push   ebx
c0018788:	31 f6                	xor    esi,esi
c001878a:	51                   	push   ecx
c001878b:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001878f:	0f b6 c3             	movzx  eax,bl
c0018792:	52                   	push   edx
c0018793:	56                   	push   esi
c0018794:	46                   	inc    esi
c0018795:	50                   	push   eax
c0018796:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001879a:	e8 f3 02 00 00       	call   c0018a92 <PCI::checkDevice(unsigned char, unsigned char)>
c001879f:	83 c4 10             	add    esp,0x10
c00187a2:	83 fe 20             	cmp    esi,0x20
c00187a5:	75 e8                	jne    c001878f <PCI::checkBus(unsigned char)+0x9>
c00187a7:	58                   	pop    eax
c00187a8:	5b                   	pop    ebx
c00187a9:	5e                   	pop    esi
c00187aa:	c3                   	ret    
c00187ab:	90                   	nop

c00187ac <PCI::foundDevice(PCIDeviceInfo)>:
c00187ac:	55                   	push   ebp
c00187ad:	57                   	push   edi
c00187ae:	56                   	push   esi
c00187af:	53                   	push   ebx
c00187b0:	83 ec 1c             	sub    esp,0x1c
c00187b3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00187b7:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00187bd:	0f 84 52 01 00 00    	je     c0018915 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00187c3:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00187c7:	66 81 f9 06 04       	cmp    cx,0x406
c00187cc:	75 2c                	jne    c00187fa <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00187ce:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00187d3:	50                   	push   eax
c00187d4:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00187d9:	50                   	push   eax
c00187da:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00187df:	50                   	push   eax
c00187e0:	56                   	push   esi
c00187e1:	e8 b2 fb ff ff       	call   c0018398 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00187e6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00187ea:	0f b6 c0             	movzx  eax,al
c00187ed:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00187f1:	83 c4 2c             	add    esp,0x2c
c00187f4:	5b                   	pop    ebx
c00187f5:	5e                   	pop    esi
c00187f6:	5f                   	pop    edi
c00187f7:	5d                   	pop    ebp
c00187f8:	eb 8c                	jmp    c0018786 <PCI::checkBus(unsigned char)>
c00187fa:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00187fe:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018804:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018808:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001880c:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0018810:	88 d3                	mov    bl,dl
c0018812:	85 c0                	test   eax,eax
c0018814:	74 33                	je     c0018849 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018816:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018819:	85 d2                	test   edx,edx
c001881b:	74 28                	je     c0018845 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001881d:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0018823:	31 ef                	xor    edi,ebp
c0018825:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c001882b:	75 18                	jne    c0018845 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c001882d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0018831:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018837:	75 0c                	jne    c0018845 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018839:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001883f:	0f 84 d0 00 00 00    	je     c0018915 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018845:	8b 00                	mov    eax,DWORD PTR [eax]
c0018847:	eb c9                	jmp    c0018812 <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018849:	66 81 f9 01 06       	cmp    cx,0x601
c001884e:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0018852:	75 19                	jne    c001886d <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018854:	83 ec 0c             	sub    esp,0xc
c0018857:	68 64 01 00 00       	push   0x164
c001885c:	e8 58 ef fe ff       	call   c00077b9 <malloc>
c0018861:	89 c5                	mov    ebp,eax
c0018863:	89 04 24             	mov    DWORD PTR [esp],eax
c0018866:	e8 47 0e 00 00       	call   c00196b2 <SATABus::SATABus()>
c001886b:	eb 1e                	jmp    c001888b <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c001886d:	66 81 f9 01 01       	cmp    cx,0x101
c0018872:	75 60                	jne    c00188d4 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018874:	83 ec 0c             	sub    esp,0xc
c0018877:	68 70 02 00 00       	push   0x270
c001887c:	e8 38 ef fe ff       	call   c00077b9 <malloc>
c0018881:	89 c5                	mov    ebp,eax
c0018883:	89 04 24             	mov    DWORD PTR [esp],eax
c0018886:	e8 cb 02 00 00       	call   c0018b56 <IDE::IDE()>
c001888b:	58                   	pop    eax
c001888c:	5a                   	pop    edx
c001888d:	55                   	push   ebp
c001888e:	56                   	push   esi
c001888f:	e8 8c 30 ff ff       	call   c000b920 <Device::addChild(Device*)>
c0018894:	83 ec 1c             	sub    esp,0x1c
c0018897:	b9 09 00 00 00       	mov    ecx,0x9
c001889c:	fc                   	cld    
c001889d:	89 e7                	mov    edi,esp
c001889f:	89 de                	mov    esi,ebx
c00188a1:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00188a3:	55                   	push   ebp
c00188a4:	e8 bd 2f ff ff       	call   c000b866 <Device::preOpenPCI(PCIDeviceInfo)>
c00188a9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00188ac:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00188b0:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00188b8:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00188c0:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00188c8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00188cb:	83 c4 4c             	add    esp,0x4c
c00188ce:	5b                   	pop    ebx
c00188cf:	5e                   	pop    esi
c00188d0:	5f                   	pop    edi
c00188d1:	5d                   	pop    ebp
c00188d2:	ff e0                	jmp    eax
c00188d4:	83 ec 0c             	sub    esp,0xc
c00188d7:	68 58 01 00 00       	push   0x158
c00188dc:	e8 d8 ee fe ff       	call   c00077b9 <malloc>
c00188e1:	89 c5                	mov    ebp,eax
c00188e3:	58                   	pop    eax
c00188e4:	5a                   	pop    edx
c00188e5:	68 d6 ec 01 c0       	push   0xc001ecd6
c00188ea:	55                   	push   ebp
c00188eb:	e8 ce 32 ff ff       	call   c000bbbe <DriverlessDevice::DriverlessDevice(char const*)>
c00188f0:	59                   	pop    ecx
c00188f1:	5f                   	pop    edi
c00188f2:	55                   	push   ebp
c00188f3:	56                   	push   esi
c00188f4:	e8 27 30 ff ff       	call   c000b920 <Device::addChild(Device*)>
c00188f9:	b9 09 00 00 00       	mov    ecx,0x9
c00188fe:	fc                   	cld    
c00188ff:	89 df                	mov    edi,ebx
c0018901:	89 de                	mov    esi,ebx
c0018903:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018905:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018909:	83 c4 2c             	add    esp,0x2c
c001890c:	5b                   	pop    ebx
c001890d:	5e                   	pop    esi
c001890e:	5f                   	pop    edi
c001890f:	5d                   	pop    ebp
c0018910:	e9 51 2f ff ff       	jmp    c000b866 <Device::preOpenPCI(PCIDeviceInfo)>
c0018915:	83 c4 1c             	add    esp,0x1c
c0018918:	5b                   	pop    ebx
c0018919:	5e                   	pop    esi
c001891a:	5f                   	pop    edi
c001891b:	5d                   	pop    ebp
c001891c:	c3                   	ret    
c001891d:	90                   	nop

c001891e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001891e:	55                   	push   ebp
c001891f:	57                   	push   edi
c0018920:	56                   	push   esi
c0018921:	53                   	push   ebx
c0018922:	83 ec 68             	sub    esp,0x68
c0018925:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018929:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0018930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018934:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001893b:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c0018940:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018944:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001894b:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c0018950:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018954:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018959:	6a 0c                	push   0xc
c001895b:	57                   	push   edi
c001895c:	53                   	push   ebx
c001895d:	56                   	push   esi
c001895e:	55                   	push   ebp
c001895f:	e8 86 f8 ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018964:	83 c4 20             	add    esp,0x20
c0018967:	57                   	push   edi
c0018968:	53                   	push   ebx
c0018969:	56                   	push   esi
c001896a:	55                   	push   ebp
c001896b:	e8 6e f9 ff ff       	call   c00182de <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0018970:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018975:	57                   	push   edi
c0018976:	53                   	push   ebx
c0018977:	56                   	push   esi
c0018978:	55                   	push   ebp
c0018979:	e8 f6 f9 ff ff       	call   c0018374 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001897e:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c0018982:	83 c4 14             	add    esp,0x14
c0018985:	6a 3c                	push   0x3c
c0018987:	57                   	push   edi
c0018988:	53                   	push   ebx
c0018989:	56                   	push   esi
c001898a:	55                   	push   ebp
c001898b:	e8 5a f8 ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018990:	0f b6 c4             	movzx  eax,ah
c0018993:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0018997:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c001899b:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001899f:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c00189a4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c00189aa:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c00189b0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00189b4:	83 c4 20             	add    esp,0x20
c00189b7:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00189bc:	74 30                	je     c00189ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00189be:	31 c0                	xor    eax,eax
c00189c0:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00189c4:	7e 28                	jle    c00189ee <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00189c6:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c00189ce:	39 cb                	cmp    ebx,ecx
c00189d0:	75 19                	jne    c00189eb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00189d2:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c00189da:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00189de:	75 0b                	jne    c00189eb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00189e0:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c00189e7:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c00189eb:	40                   	inc    eax
c00189ec:	eb d2                	jmp    c00189c0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c00189ee:	31 d2                	xor    edx,edx
c00189f0:	83 ec 0c             	sub    esp,0xc
c00189f3:	57                   	push   edi
c00189f4:	53                   	push   ebx
c00189f5:	56                   	push   esi
c00189f6:	52                   	push   edx
c00189f7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00189fb:	55                   	push   ebp
c00189fc:	e8 bf f9 ff ff       	call   c00183c0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a01:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a05:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018a09:	42                   	inc    edx
c0018a0a:	83 c4 20             	add    esp,0x20
c0018a0d:	83 fa 06             	cmp    edx,0x6
c0018a10:	75 de                	jne    c00189f0 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c0018a12:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018a17:	83 ec 0c             	sub    esp,0xc
c0018a1a:	86 e0                	xchg   al,ah
c0018a1c:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c0018a21:	6a 02                	push   0x2
c0018a23:	57                   	push   edi
c0018a24:	53                   	push   ebx
c0018a25:	56                   	push   esi
c0018a26:	55                   	push   ebp
c0018a27:	e8 be f7 ff ff       	call   c00181ea <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018a2c:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c0018a31:	83 c4 20             	add    esp,0x20
c0018a34:	57                   	push   edi
c0018a35:	53                   	push   ebx
c0018a36:	56                   	push   esi
c0018a37:	55                   	push   ebp
c0018a38:	e8 eb f8 ff ff       	call   c0018328 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018a3d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018a41:	57                   	push   edi
c0018a42:	53                   	push   ebx
c0018a43:	56                   	push   esi
c0018a44:	55                   	push   ebp
c0018a45:	e8 48 f8 ff ff       	call   c0018292 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a4a:	b9 09 00 00 00       	mov    ecx,0x9
c0018a4f:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018a54:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018a58:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018a5c:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0018a60:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018a64:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018a68:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018a6c:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c0018a70:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018a74:	83 ec 0c             	sub    esp,0xc
c0018a77:	fc                   	cld    
c0018a78:	89 e7                	mov    edi,esp
c0018a7a:	8d 74 24 58          	lea    esi,[esp+0x58]
c0018a7e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018a80:	55                   	push   ebp
c0018a81:	e8 26 fd ff ff       	call   c00187ac <PCI::foundDevice(PCIDeviceInfo)>
c0018a86:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018a8c:	5b                   	pop    ebx
c0018a8d:	5e                   	pop    esi
c0018a8e:	5f                   	pop    edi
c0018a8f:	5d                   	pop    ebp
c0018a90:	c3                   	ret    
c0018a91:	90                   	nop

c0018a92 <PCI::checkDevice(unsigned char, unsigned char)>:
c0018a92:	55                   	push   ebp
c0018a93:	57                   	push   edi
c0018a94:	56                   	push   esi
c0018a95:	53                   	push   ebx
c0018a96:	83 ec 0c             	sub    esp,0xc
c0018a99:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018a9d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0018aa2:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018aa7:	6a 00                	push   0x0
c0018aa9:	56                   	push   esi
c0018aaa:	57                   	push   edi
c0018aab:	55                   	push   ebp
c0018aac:	e8 e1 f7 ff ff       	call   c0018292 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018ab1:	6a 00                	push   0x0
c0018ab3:	56                   	push   esi
c0018ab4:	57                   	push   edi
c0018ab5:	55                   	push   ebp
c0018ab6:	e8 63 fe ff ff       	call   c001891e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018abb:	83 c4 20             	add    esp,0x20
c0018abe:	6a 00                	push   0x0
c0018ac0:	56                   	push   esi
c0018ac1:	57                   	push   edi
c0018ac2:	55                   	push   ebp
c0018ac3:	e8 ee f7 ff ff       	call   c00182b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018ac8:	83 c4 10             	add    esp,0x10
c0018acb:	84 c0                	test   al,al
c0018acd:	79 27                	jns    c0018af6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0018acf:	bb 01 00 00 00       	mov    ebx,0x1
c0018ad4:	53                   	push   ebx
c0018ad5:	56                   	push   esi
c0018ad6:	57                   	push   edi
c0018ad7:	55                   	push   ebp
c0018ad8:	e8 b5 f7 ff ff       	call   c0018292 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018add:	83 c4 10             	add    esp,0x10
c0018ae0:	66 40                	inc    ax
c0018ae2:	74 0c                	je     c0018af0 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0018ae4:	53                   	push   ebx
c0018ae5:	56                   	push   esi
c0018ae6:	57                   	push   edi
c0018ae7:	55                   	push   ebp
c0018ae8:	e8 31 fe ff ff       	call   c001891e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0018aed:	83 c4 10             	add    esp,0x10
c0018af0:	43                   	inc    ebx
c0018af1:	83 fb 08             	cmp    ebx,0x8
c0018af4:	75 de                	jne    c0018ad4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018af6:	83 c4 0c             	add    esp,0xc
c0018af9:	5b                   	pop    ebx
c0018afa:	5e                   	pop    esi
c0018afb:	5f                   	pop    edi
c0018afc:	5d                   	pop    ebp
c0018afd:	c3                   	ret    

c0018afe <PCI::detect()>:
c0018afe:	56                   	push   esi
c0018aff:	53                   	push   ebx
c0018b00:	53                   	push   ebx
c0018b01:	31 db                	xor    ebx,ebx
c0018b03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018b07:	6a 00                	push   0x0
c0018b09:	6a 00                	push   0x0
c0018b0b:	6a 00                	push   0x0
c0018b0d:	56                   	push   esi
c0018b0e:	e8 a3 f7 ff ff       	call   c00182b6 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018b13:	83 c4 10             	add    esp,0x10
c0018b16:	a8 80                	test   al,0x80
c0018b18:	75 21                	jne    c0018b3b <PCI::detect()+0x3d>
c0018b1a:	51                   	push   ecx
c0018b1b:	51                   	push   ecx
c0018b1c:	6a 00                	push   0x0
c0018b1e:	56                   	push   esi
c0018b1f:	e8 62 fc ff ff       	call   c0018786 <PCI::checkBus(unsigned char)>
c0018b24:	83 c4 10             	add    esp,0x10
c0018b27:	eb 24                	jmp    c0018b4d <PCI::detect()+0x4f>
c0018b29:	52                   	push   edx
c0018b2a:	52                   	push   edx
c0018b2b:	53                   	push   ebx
c0018b2c:	43                   	inc    ebx
c0018b2d:	56                   	push   esi
c0018b2e:	e8 53 fc ff ff       	call   c0018786 <PCI::checkBus(unsigned char)>
c0018b33:	83 c4 10             	add    esp,0x10
c0018b36:	83 fb 08             	cmp    ebx,0x8
c0018b39:	74 12                	je     c0018b4d <PCI::detect()+0x4f>
c0018b3b:	53                   	push   ebx
c0018b3c:	6a 00                	push   0x0
c0018b3e:	6a 00                	push   0x0
c0018b40:	56                   	push   esi
c0018b41:	e8 4c f7 ff ff       	call   c0018292 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018b46:	83 c4 10             	add    esp,0x10
c0018b49:	66 40                	inc    ax
c0018b4b:	74 dc                	je     c0018b29 <PCI::detect()+0x2b>
c0018b4d:	58                   	pop    eax
c0018b4e:	5b                   	pop    ebx
c0018b4f:	5e                   	pop    esi
c0018b50:	c3                   	ret    
c0018b51:	90                   	nop

c0018b52 <IDE::close(int, int, void*)>:
c0018b52:	83 c8 ff             	or     eax,0xffffffff
c0018b55:	c3                   	ret    

c0018b56 <IDE::IDE()>:
c0018b56:	83 ec 0c             	sub    esp,0xc
c0018b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b5d:	83 ec 08             	sub    esp,0x8
c0018b60:	68 1c ed 01 c0       	push   0xc001ed1c
c0018b65:	50                   	push   eax
c0018b66:	e8 f9 30 ff ff       	call   c000bc64 <HardDiskController::HardDiskController(char const*)>
c0018b6b:	83 c4 10             	add    esp,0x10
c0018b6e:	ba ac ed 01 c0       	mov    edx,0xc001edac
c0018b73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b77:	89 10                	mov    DWORD PTR [eax],edx
c0018b79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018b7d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018b84:	90                   	nop
c0018b85:	83 c4 0c             	add    esp,0xc
c0018b88:	c3                   	ret    
c0018b89:	90                   	nop

c0018b8a <IDE::prepareInterrupt(unsigned char)>:
c0018b8a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018b8f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018b93:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018b9b:	c3                   	ret    

c0018b9c <selectDrive(unsigned char, unsigned char)>:
c0018b9c:	c3                   	ret    
c0018b9d:	90                   	nop

c0018b9e <IDE::getBase(unsigned char)>:
c0018b9e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018ba3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ba7:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018baf:	c3                   	ret    

c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018bb0:	55                   	push   ebp
c0018bb1:	57                   	push   edi
c0018bb2:	56                   	push   esi
c0018bb3:	53                   	push   ebx
c0018bb4:	83 ec 1c             	sub    esp,0x1c
c0018bb7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018bbb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018bbf:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018bc2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018bc6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018bca:	80 f9 03             	cmp    cl,0x3
c0018bcd:	77 51                	ja     c0018c20 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018bcf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018bd3:	0f b6 f2             	movzx  esi,dl
c0018bd6:	0f b6 db             	movzx  ebx,bl
c0018bd9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018bdc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018be0:	83 ca 80             	or     edx,0xffffff80
c0018be3:	0f b6 d2             	movzx  edx,dl
c0018be6:	52                   	push   edx
c0018be7:	6a 0c                	push   0xc
c0018be9:	56                   	push   esi
c0018bea:	57                   	push   edi
c0018beb:	e8 c0 ff ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018bf0:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018bf5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018bf9:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018bfd:	ee                   	out    dx,al
c0018bfe:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018c03:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018c07:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018c0b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018c0f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018c17:	83 c4 2c             	add    esp,0x2c
c0018c1a:	5b                   	pop    ebx
c0018c1b:	5e                   	pop    esi
c0018c1c:	5f                   	pop    edi
c0018c1d:	5d                   	pop    ebp
c0018c1e:	eb 90                	jmp    c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018c20:	80 fb 07             	cmp    bl,0x7
c0018c23:	77 12                	ja     c0018c37 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018c25:	0f b6 d2             	movzx  edx,dl
c0018c28:	0f b6 db             	movzx  ebx,bl
c0018c2b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018c33:	89 da                	mov    edx,ebx
c0018c35:	eb 2f                	jmp    c0018c66 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018c37:	80 fb 0d             	cmp    bl,0xd
c0018c3a:	77 13                	ja     c0018c4f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018c3c:	0f b6 d2             	movzx  edx,dl
c0018c3f:	0f b6 db             	movzx  ebx,bl
c0018c42:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018c49:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018c4d:	eb 17                	jmp    c0018c66 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018c4f:	80 fb 15             	cmp    bl,0x15
c0018c52:	77 13                	ja     c0018c67 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018c54:	0f b6 d2             	movzx  edx,dl
c0018c57:	0f b6 db             	movzx  ebx,bl
c0018c5a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018c62:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0018c66:	ee                   	out    dx,al
c0018c67:	83 c4 1c             	add    esp,0x1c
c0018c6a:	5b                   	pop    ebx
c0018c6b:	5e                   	pop    esi
c0018c6c:	5f                   	pop    edi
c0018c6d:	5d                   	pop    ebp
c0018c6e:	c3                   	ret    
c0018c6f:	90                   	nop

c0018c70 <IDE::read(unsigned char, unsigned char)>:
c0018c70:	55                   	push   ebp
c0018c71:	57                   	push   edi
c0018c72:	56                   	push   esi
c0018c73:	53                   	push   ebx
c0018c74:	83 ec 1c             	sub    esp,0x1c
c0018c77:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018c7b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018c7f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0018c82:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018c86:	3c 03                	cmp    al,0x3
c0018c88:	77 43                	ja     c0018ccd <IDE::read(unsigned char, unsigned char)+0x5d>
c0018c8a:	0f b6 f2             	movzx  esi,dl
c0018c8d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018c90:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018c94:	83 c8 80             	or     eax,0xffffff80
c0018c97:	0f b6 c0             	movzx  eax,al
c0018c9a:	50                   	push   eax
c0018c9b:	6a 0c                	push   0xc
c0018c9d:	56                   	push   esi
c0018c9e:	57                   	push   edi
c0018c9f:	e8 0c ff ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018ca4:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018ca9:	0f b6 c3             	movzx  eax,bl
c0018cac:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018cb0:	ec                   	in     al,dx
c0018cb1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018cb5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018cba:	52                   	push   edx
c0018cbb:	6a 0c                	push   0xc
c0018cbd:	56                   	push   esi
c0018cbe:	57                   	push   edi
c0018cbf:	e8 ec fe ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018cc4:	83 c4 20             	add    esp,0x20
c0018cc7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018ccb:	eb 49                	jmp    c0018d16 <IDE::read(unsigned char, unsigned char)+0xa6>
c0018ccd:	80 fb 07             	cmp    bl,0x7
c0018cd0:	77 12                	ja     c0018ce4 <IDE::read(unsigned char, unsigned char)+0x74>
c0018cd2:	0f b6 d2             	movzx  edx,dl
c0018cd5:	0f b6 c3             	movzx  eax,bl
c0018cd8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018ce0:	89 c2                	mov    edx,eax
c0018ce2:	eb 31                	jmp    c0018d15 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018ce4:	80 fb 0d             	cmp    bl,0xd
c0018ce7:	77 13                	ja     c0018cfc <IDE::read(unsigned char, unsigned char)+0x8c>
c0018ce9:	0f b6 d2             	movzx  edx,dl
c0018cec:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018cf3:	0f b6 d3             	movzx  edx,bl
c0018cf6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0018cfa:	eb 19                	jmp    c0018d15 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018cfc:	31 c0                	xor    eax,eax
c0018cfe:	80 fb 15             	cmp    bl,0x15
c0018d01:	77 13                	ja     c0018d16 <IDE::read(unsigned char, unsigned char)+0xa6>
c0018d03:	0f b6 d2             	movzx  edx,dl
c0018d06:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018d0e:	0f b6 d3             	movzx  edx,bl
c0018d11:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018d15:	ec                   	in     al,dx
c0018d16:	83 c4 1c             	add    esp,0x1c
c0018d19:	5b                   	pop    ebx
c0018d1a:	5e                   	pop    esi
c0018d1b:	5f                   	pop    edi
c0018d1c:	5d                   	pop    ebp
c0018d1d:	c3                   	ret    

c0018d1e <IDE::waitInterrupt(unsigned char)>:
c0018d1e:	57                   	push   edi
c0018d1f:	56                   	push   esi
c0018d20:	31 f6                	xor    esi,esi
c0018d22:	53                   	push   ebx
c0018d23:	83 ec 10             	sub    esp,0x10
c0018d26:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018d2a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018d2e:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018d32:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018d37:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018d3e:	84 db                	test   bl,bl
c0018d40:	75 33                	jne    c0018d75 <IDE::waitInterrupt(unsigned char)+0x57>
c0018d42:	52                   	push   edx
c0018d43:	6a 0c                	push   0xc
c0018d45:	50                   	push   eax
c0018d46:	57                   	push   edi
c0018d47:	e8 24 ff ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c0018d4c:	83 c4 10             	add    esp,0x10
c0018d4f:	a8 01                	test   al,0x1
c0018d51:	75 2a                	jne    c0018d7d <IDE::waitInterrupt(unsigned char)+0x5f>
c0018d53:	f7 c6 04 00 00 00    	test   esi,0x4
c0018d59:	75 12                	jne    c0018d6d <IDE::waitInterrupt(unsigned char)+0x4f>
c0018d5b:	83 fe 32             	cmp    esi,0x32
c0018d5e:	7e 0d                	jle    c0018d6d <IDE::waitInterrupt(unsigned char)+0x4f>
c0018d60:	83 ec 0c             	sub    esp,0xc
c0018d63:	6a 64                	push   0x64
c0018d65:	e8 1a a9 ff ff       	call   c0013684 <milliTenthSleep(unsigned int)>
c0018d6a:	83 c4 10             	add    esp,0x10
c0018d6d:	83 fe 3c             	cmp    esi,0x3c
c0018d70:	74 0b                	je     c0018d7d <IDE::waitInterrupt(unsigned char)+0x5f>
c0018d72:	46                   	inc    esi
c0018d73:	eb bd                	jmp    c0018d32 <IDE::waitInterrupt(unsigned char)+0x14>
c0018d75:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018d7d:	83 c4 10             	add    esp,0x10
c0018d80:	88 d8                	mov    al,bl
c0018d82:	5b                   	pop    ebx
c0018d83:	5e                   	pop    esi
c0018d84:	5f                   	pop    edi
c0018d85:	c3                   	ret    

c0018d86 <ideChannel0IRQHandler(regs*, void*)>:
c0018d86:	83 ec 10             	sub    esp,0x10
c0018d89:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018d8d:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018d94:	6a 07                	push   0x7
c0018d96:	6a 00                	push   0x0
c0018d98:	50                   	push   eax
c0018d99:	e8 d2 fe ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c0018d9e:	83 c4 1c             	add    esp,0x1c
c0018da1:	c3                   	ret    

c0018da2 <ideChannel1IRQHandler(regs*, void*)>:
c0018da2:	83 ec 10             	sub    esp,0x10
c0018da5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018da9:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018db0:	6a 07                	push   0x7
c0018db2:	6a 01                	push   0x1
c0018db4:	50                   	push   eax
c0018db5:	e8 b6 fe ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c0018dba:	83 c4 1c             	add    esp,0x1c
c0018dbd:	c3                   	ret    

c0018dbe <IDE::enableIRQs(unsigned char, bool)>:
c0018dbe:	57                   	push   edi
c0018dbf:	56                   	push   esi
c0018dc0:	be 04 00 00 00       	mov    esi,0x4
c0018dc5:	53                   	push   ebx
c0018dc6:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018dcb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018dcf:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018dd4:	0f 94 c0             	sete   al
c0018dd7:	01 c0                	add    eax,eax
c0018dd9:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018de0:	0f b6 c0             	movzx  eax,al
c0018de3:	50                   	push   eax
c0018de4:	6a 0c                	push   0xc
c0018de6:	57                   	push   edi
c0018de7:	53                   	push   ebx
c0018de8:	e8 c3 fd ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018ded:	83 c4 10             	add    esp,0x10
c0018df0:	50                   	push   eax
c0018df1:	6a 0c                	push   0xc
c0018df3:	57                   	push   edi
c0018df4:	53                   	push   ebx
c0018df5:	e8 76 fe ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c0018dfa:	83 c4 10             	add    esp,0x10
c0018dfd:	4e                   	dec    esi
c0018dfe:	75 f0                	jne    c0018df0 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018e00:	5b                   	pop    ebx
c0018e01:	5e                   	pop    esi
c0018e02:	5f                   	pop    edi
c0018e03:	c3                   	ret    

c0018e04 <IDE::open(int, int, void*)>:
c0018e04:	55                   	push   ebp
c0018e05:	57                   	push   edi
c0018e06:	56                   	push   esi
c0018e07:	53                   	push   ebx
c0018e08:	83 ec 1c             	sub    esp,0x1c
c0018e0b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018e0f:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018e18:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018e21:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018e28:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018e2f:	0f 85 b0 02 00 00    	jne    c00190e5 <IDE::open(int, int, void*)+0x2e1>
c0018e35:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018e3b:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018e3f:	83 e0 7f             	and    eax,0x7f
c0018e42:	3c 05                	cmp    al,0x5
c0018e44:	74 04                	je     c0018e4a <IDE::open(int, int, void*)+0x46>
c0018e46:	3c 0f                	cmp    al,0xf
c0018e48:	75 32                	jne    c0018e7c <IDE::open(int, int, void*)+0x78>
c0018e4a:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018e50:	83 e0 fc             	and    eax,0xfffffffc
c0018e53:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018e5a:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018e60:	83 e0 fc             	and    eax,0xfffffffc
c0018e63:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018e6a:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018e70:	83 e0 fc             	and    eax,0xfffffffc
c0018e73:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018e7a:	eb 14                	jmp    c0018e90 <IDE::open(int, int, void*)+0x8c>
c0018e7c:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0018e86:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018e90:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0018e97:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018e9e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018ea2:	89 c6                	mov    esi,eax
c0018ea4:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018ea9:	c1 e6 10             	shl    esi,0x10
c0018eac:	89 e8                	mov    eax,ebp
c0018eae:	89 fa                	mov    edx,edi
c0018eb0:	c1 e0 0b             	shl    eax,0xb
c0018eb3:	09 f0                	or     eax,esi
c0018eb5:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018ebc:	c1 e6 08             	shl    esi,0x8
c0018ebf:	09 c6                	or     esi,eax
c0018ec1:	89 f0                	mov    eax,esi
c0018ec3:	0d 08 00 00 80       	or     eax,0x80000008
c0018ec8:	ef                   	out    dx,eax
c0018ec9:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018ece:	89 ca                	mov    edx,ecx
c0018ed0:	ed                   	in     eax,dx
c0018ed1:	c1 e8 10             	shr    eax,0x10
c0018ed4:	3d ff ff 00 00       	cmp    eax,0xffff
c0018ed9:	0f 84 f5 00 00 00    	je     c0018fd4 <IDE::open(int, int, void*)+0x1d0>
c0018edf:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018ee5:	89 fa                	mov    edx,edi
c0018ee7:	89 f0                	mov    eax,esi
c0018ee9:	ef                   	out    dx,eax
c0018eea:	b0 fe                	mov    al,0xfe
c0018eec:	89 ca                	mov    edx,ecx
c0018eee:	ee                   	out    dx,al
c0018eef:	89 f0                	mov    eax,esi
c0018ef1:	89 fa                	mov    edx,edi
c0018ef3:	ef                   	out    dx,eax
c0018ef4:	89 ca                	mov    edx,ecx
c0018ef6:	ed                   	in     eax,dx
c0018ef7:	3c fe                	cmp    al,0xfe
c0018ef9:	0f 85 a9 00 00 00    	jne    c0018fa8 <IDE::open(int, int, void*)+0x1a4>
c0018eff:	8b 15 d8 04 02 c0    	mov    edx,DWORD PTR ds:0xc00204d8
c0018f05:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018f0c:	74 33                	je     c0018f41 <IDE::open(int, int, void*)+0x13d>
c0018f0e:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0018f14:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0018f18:	40                   	inc    eax
c0018f19:	83 ec 0c             	sub    esp,0xc
c0018f1c:	0f b6 c0             	movzx  eax,al
c0018f1f:	50                   	push   eax
c0018f20:	55                   	push   ebp
c0018f21:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018f25:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0018f2b:	51                   	push   ecx
c0018f2c:	e8 43 57 ff ff       	call   c000e674 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018f31:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0018f36:	83 c4 1c             	add    esp,0x1c
c0018f39:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018f3f:	eb 0a                	jmp    c0018f4b <IDE::open(int, int, void*)+0x147>
c0018f41:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0018f4b:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018f52:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018f59:	c1 e1 10             	shl    ecx,0x10
c0018f5c:	c1 e0 08             	shl    eax,0x8
c0018f5f:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018f64:	09 c1                	or     ecx,eax
c0018f66:	89 fa                	mov    edx,edi
c0018f68:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018f6f:	c1 e0 0b             	shl    eax,0xb
c0018f72:	09 c1                	or     ecx,eax
c0018f74:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018f7a:	89 c8                	mov    eax,ecx
c0018f7c:	ef                   	out    dx,eax
c0018f7d:	be fc 0c 00 00       	mov    esi,0xcfc
c0018f82:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018f88:	89 f2                	mov    edx,esi
c0018f8a:	ee                   	out    dx,al
c0018f8b:	89 c8                	mov    eax,ecx
c0018f8d:	89 fa                	mov    edx,edi
c0018f8f:	ef                   	out    dx,eax
c0018f90:	89 f2                	mov    edx,esi
c0018f92:	ed                   	in     eax,dx
c0018f93:	0f b6 c0             	movzx  eax,al
c0018f96:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018f9c:	74 46                	je     c0018fe4 <IDE::open(int, int, void*)+0x1e0>
c0018f9e:	83 ec 0c             	sub    esp,0xc
c0018fa1:	68 34 ed 01 c0       	push   0xc001ed34
c0018fa6:	eb 34                	jmp    c0018fdc <IDE::open(int, int, void*)+0x1d8>
c0018fa8:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018fb1:	75 17                	jne    c0018fca <IDE::open(int, int, void*)+0x1c6>
c0018fb3:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018fb8:	74 07                	je     c0018fc1 <IDE::open(int, int, void*)+0x1bd>
c0018fba:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018fbf:	75 09                	jne    c0018fca <IDE::open(int, int, void*)+0x1c6>
c0018fc1:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018fc8:	eb 1a                	jmp    c0018fe4 <IDE::open(int, int, void*)+0x1e0>
c0018fca:	83 ec 0c             	sub    esp,0xc
c0018fcd:	68 3c ed 01 c0       	push   0xc001ed3c
c0018fd2:	eb 08                	jmp    c0018fdc <IDE::open(int, int, void*)+0x1d8>
c0018fd4:	83 ec 0c             	sub    esp,0xc
c0018fd7:	68 6d ed 01 c0       	push   0xc001ed6d
c0018fdc:	e8 7a 71 ff ff       	call   c001015b <KePanic(char const*)>
c0018fe1:	83 c4 10             	add    esp,0x10
c0018fe4:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018feb:	79 1a                	jns    c0019007 <IDE::open(int, int, void*)+0x203>
c0018fed:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0018ff3:	83 e0 fc             	and    eax,0xfffffffc
c0018ff6:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018ffd:	83 c0 08             	add    eax,0x8
c0019000:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0019007:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001900d:	89 c2                	mov    edx,eax
c001900f:	83 e2 0f             	and    edx,0xf
c0019012:	66 83 fa 08          	cmp    dx,0x8
c0019016:	75 0a                	jne    c0019022 <IDE::open(int, int, void*)+0x21e>
c0019018:	83 e8 02             	sub    eax,0x2
c001901b:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019022:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0019028:	89 c2                	mov    edx,eax
c001902a:	83 e2 0f             	and    edx,0xf
c001902d:	66 83 fa 08          	cmp    dx,0x8
c0019031:	75 0a                	jne    c001903d <IDE::open(int, int, void*)+0x239>
c0019033:	83 e8 02             	sub    eax,0x2
c0019036:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001903d:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019044:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001904b:	89 d0                	mov    eax,edx
c001904d:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019050:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0019054:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0019058:	8d 4a 01             	lea    ecx,[edx+0x1]
c001905b:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019060:	0f b6 c9             	movzx  ecx,cl
c0019063:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001906a:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001906d:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0019071:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0019075:	8d 50 02             	lea    edx,[eax+0x2]
c0019078:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c001907d:	0f b6 d2             	movzx  edx,dl
c0019080:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0019086:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019089:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001908d:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0019091:	8d 48 03             	lea    ecx,[eax+0x3]
c0019094:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019099:	0f b6 c9             	movzx  ecx,cl
c001909c:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c00190a2:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00190a5:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00190a9:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c00190ad:	8d 50 04             	lea    edx,[eax+0x4]
c00190b0:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00190b6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00190bb:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00190c2:	66 85 f6             	test   si,si
c00190c5:	74 5b                	je     c0019122 <IDE::open(int, int, void*)+0x31e>
c00190c7:	0f b6 d2             	movzx  edx,dl
c00190ca:	83 c0 05             	add    eax,0x5
c00190cd:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00190d0:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00190d4:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00190d8:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00190de:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00190e3:	eb 3d                	jmp    c0019122 <IDE::open(int, int, void*)+0x31e>
c00190e5:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c00190eb:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00190f2:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c00190f9:	66 05 06 02          	add    ax,0x206
c00190fd:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019104:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001910b:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0019112:	66 05 06 02          	add    ax,0x206
c0019116:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001911d:	e9 e5 fe ff ff       	jmp    c0019007 <IDE::open(int, int, void*)+0x203>
c0019122:	50                   	push   eax
c0019123:	50                   	push   eax
c0019124:	6a 00                	push   0x0
c0019126:	53                   	push   ebx
c0019127:	e8 5e fa ff ff       	call   c0018b8a <IDE::prepareInterrupt(unsigned char)>
c001912c:	5a                   	pop    edx
c001912d:	59                   	pop    ecx
c001912e:	6a 01                	push   0x1
c0019130:	53                   	push   ebx
c0019131:	e8 54 fa ff ff       	call   c0018b8a <IDE::prepareInterrupt(unsigned char)>
c0019136:	83 c4 0c             	add    esp,0xc
c0019139:	6a 00                	push   0x0
c001913b:	6a 00                	push   0x0
c001913d:	53                   	push   ebx
c001913e:	e8 7b fc ff ff       	call   c0018dbe <IDE::enableIRQs(unsigned char, bool)>
c0019143:	83 c4 0c             	add    esp,0xc
c0019146:	6a 00                	push   0x0
c0019148:	6a 01                	push   0x1
c001914a:	53                   	push   ebx
c001914b:	e8 6e fc ff ff       	call   c0018dbe <IDE::enableIRQs(unsigned char, bool)>
c0019150:	83 c4 10             	add    esp,0x10
c0019153:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001915a:	74 34                	je     c0019190 <IDE::open(int, int, void*)+0x38c>
c001915c:	83 ec 0c             	sub    esp,0xc
c001915f:	53                   	push   ebx
c0019160:	6a 01                	push   0x1
c0019162:	68 86 8d 01 c0       	push   0xc0018d86
c0019167:	6a 0e                	push   0xe
c0019169:	53                   	push   ebx
c001916a:	e8 5d 27 ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001916f:	83 c4 14             	add    esp,0x14
c0019172:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019178:	53                   	push   ebx
c0019179:	6a 01                	push   0x1
c001917b:	68 a2 8d 01 c0       	push   0xc0018da2
c0019180:	6a 0f                	push   0xf
c0019182:	53                   	push   ebx
c0019183:	e8 44 27 ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019188:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001918e:	eb 38                	jmp    c00191c8 <IDE::open(int, int, void*)+0x3c4>
c0019190:	83 ec 0c             	sub    esp,0xc
c0019193:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001919d:	53                   	push   ebx
c001919e:	6a 00                	push   0x0
c00191a0:	68 86 8d 01 c0       	push   0xc0018d86
c00191a5:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00191ab:	53                   	push   ebx
c00191ac:	e8 1b 27 ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00191b1:	83 c4 14             	add    esp,0x14
c00191b4:	53                   	push   ebx
c00191b5:	6a 00                	push   0x0
c00191b7:	68 a2 8d 01 c0       	push   0xc0018da2
c00191bc:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00191c2:	53                   	push   ebx
c00191c3:	e8 04 27 ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00191c8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00191ca:	83 c4 20             	add    esp,0x20
c00191cd:	83 ec 0c             	sub    esp,0xc
c00191d0:	53                   	push   ebx
c00191d1:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00191d4:	83 c4 0c             	add    esp,0xc
c00191d7:	6a 07                	push   0x7
c00191d9:	6a 00                	push   0x0
c00191db:	53                   	push   ebx
c00191dc:	e8 8f fa ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c00191e1:	83 c4 0c             	add    esp,0xc
c00191e4:	6a 07                	push   0x7
c00191e6:	6a 01                	push   0x1
c00191e8:	53                   	push   ebx
c00191e9:	e8 82 fa ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c00191ee:	83 c4 0c             	add    esp,0xc
c00191f1:	6a 01                	push   0x1
c00191f3:	6a 00                	push   0x0
c00191f5:	53                   	push   ebx
c00191f6:	e8 c3 fb ff ff       	call   c0018dbe <IDE::enableIRQs(unsigned char, bool)>
c00191fb:	83 c4 0c             	add    esp,0xc
c00191fe:	6a 01                	push   0x1
c0019200:	6a 01                	push   0x1
c0019202:	53                   	push   ebx
c0019203:	e8 b6 fb ff ff       	call   c0018dbe <IDE::enableIRQs(unsigned char, bool)>
c0019208:	83 c4 2c             	add    esp,0x2c
c001920b:	31 c0                	xor    eax,eax
c001920d:	5b                   	pop    ebx
c001920e:	5e                   	pop    esi
c001920f:	5f                   	pop    edi
c0019210:	5d                   	pop    ebp
c0019211:	c3                   	ret    

c0019212 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0019212:	55                   	push   ebp
c0019213:	57                   	push   edi
c0019214:	56                   	push   esi
c0019215:	53                   	push   ebx
c0019216:	83 ec 1c             	sub    esp,0x1c
c0019219:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001921d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019221:	8d 50 f8             	lea    edx,[eax-0x8]
c0019224:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019228:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001922c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0019230:	80 fa 03             	cmp    dl,0x3
c0019233:	77 5d                	ja     c0019292 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019235:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019239:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001923d:	0f b6 db             	movzx  ebx,bl
c0019240:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0019243:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019247:	83 ca 80             	or     edx,0xffffff80
c001924a:	0f b6 d2             	movzx  edx,dl
c001924d:	52                   	push   edx
c001924e:	6a 0c                	push   0xc
c0019250:	53                   	push   ebx
c0019251:	56                   	push   esi
c0019252:	e8 59 f9 ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019257:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001925c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019260:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019264:	0f b6 c0             	movzx  eax,al
c0019267:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c001926b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001926d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0019272:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019276:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001927a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001927e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019286:	83 c4 2c             	add    esp,0x2c
c0019289:	5b                   	pop    ebx
c001928a:	5e                   	pop    esi
c001928b:	5f                   	pop    edi
c001928c:	5d                   	pop    ebp
c001928d:	e9 1e f9 ff ff       	jmp    c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019292:	3c 07                	cmp    al,0x7
c0019294:	77 10                	ja     c00192a6 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0019296:	0f b6 db             	movzx  ebx,bl
c0019299:	0f b6 d0             	movzx  edx,al
c001929c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00192a4:	eb 2d                	jmp    c00192d3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00192a6:	3c 0d                	cmp    al,0xd
c00192a8:	77 13                	ja     c00192bd <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00192aa:	0f b6 db             	movzx  ebx,bl
c00192ad:	0f b6 c0             	movzx  eax,al
c00192b0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00192b7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00192bb:	eb 16                	jmp    c00192d3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00192bd:	3c 15                	cmp    al,0x15
c00192bf:	77 14                	ja     c00192d5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00192c1:	0f b6 db             	movzx  ebx,bl
c00192c4:	0f b6 c0             	movzx  eax,al
c00192c7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00192cf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00192d3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00192d5:	83 c4 1c             	add    esp,0x1c
c00192d8:	5b                   	pop    ebx
c00192d9:	5e                   	pop    esi
c00192da:	5f                   	pop    edi
c00192db:	5d                   	pop    ebp
c00192dc:	c3                   	ret    
c00192dd:	90                   	nop

c00192de <IDE::detect()>:
c00192de:	55                   	push   ebp
c00192df:	57                   	push   edi
c00192e0:	56                   	push   esi
c00192e1:	53                   	push   ebx
c00192e2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00192e8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00192ef:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00192f6:	0f 85 97 02 00 00    	jne    c0019593 <IDE::detect()+0x2b5>
c00192fc:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0019303:	31 f6                	xor    esi,esi
c0019305:	31 ed                	xor    ebp,ebp
c0019307:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001930f:	89 e8                	mov    eax,ebp
c0019311:	c1 e0 06             	shl    eax,0x6
c0019314:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001931c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019320:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019324:	c1 e0 04             	shl    eax,0x4
c0019327:	83 c8 a0             	or     eax,0xffffffa0
c001932a:	0f b6 c0             	movzx  eax,al
c001932d:	50                   	push   eax
c001932e:	6a 06                	push   0x6
c0019330:	56                   	push   esi
c0019331:	53                   	push   ebx
c0019332:	e8 79 f8 ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019337:	83 c4 0c             	add    esp,0xc
c001933a:	6a 0c                	push   0xc
c001933c:	56                   	push   esi
c001933d:	53                   	push   ebx
c001933e:	e8 2d f9 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c0019343:	83 c4 0c             	add    esp,0xc
c0019346:	6a 0c                	push   0xc
c0019348:	56                   	push   esi
c0019349:	53                   	push   ebx
c001934a:	e8 21 f9 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c001934f:	83 c4 0c             	add    esp,0xc
c0019352:	6a 0c                	push   0xc
c0019354:	56                   	push   esi
c0019355:	53                   	push   ebx
c0019356:	e8 15 f9 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c001935b:	83 c4 0c             	add    esp,0xc
c001935e:	6a 0c                	push   0xc
c0019360:	56                   	push   esi
c0019361:	53                   	push   ebx
c0019362:	e8 09 f9 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c0019367:	68 ec 00 00 00       	push   0xec
c001936c:	6a 07                	push   0x7
c001936e:	56                   	push   esi
c001936f:	53                   	push   ebx
c0019370:	e8 3b f8 ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019375:	83 c4 1c             	add    esp,0x1c
c0019378:	6a 0c                	push   0xc
c001937a:	56                   	push   esi
c001937b:	53                   	push   ebx
c001937c:	e8 ef f8 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c0019381:	83 c4 0c             	add    esp,0xc
c0019384:	6a 0c                	push   0xc
c0019386:	56                   	push   esi
c0019387:	53                   	push   ebx
c0019388:	e8 e3 f8 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c001938d:	83 c4 0c             	add    esp,0xc
c0019390:	6a 0c                	push   0xc
c0019392:	56                   	push   esi
c0019393:	53                   	push   ebx
c0019394:	e8 d7 f8 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c0019399:	83 c4 0c             	add    esp,0xc
c001939c:	6a 0c                	push   0xc
c001939e:	56                   	push   esi
c001939f:	53                   	push   ebx
c00193a0:	e8 cb f8 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c00193a5:	83 c4 0c             	add    esp,0xc
c00193a8:	6a 0c                	push   0xc
c00193aa:	56                   	push   esi
c00193ab:	53                   	push   ebx
c00193ac:	e8 bf f8 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c00193b1:	83 c4 10             	add    esp,0x10
c00193b4:	84 c0                	test   al,al
c00193b6:	0f 84 5f 01 00 00    	je     c001951b <IDE::detect()+0x23d>
c00193bc:	31 ff                	xor    edi,edi
c00193be:	50                   	push   eax
c00193bf:	6a 0c                	push   0xc
c00193c1:	56                   	push   esi
c00193c2:	53                   	push   ebx
c00193c3:	e8 a8 f8 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c00193c8:	83 c4 10             	add    esp,0x10
c00193cb:	a8 01                	test   al,0x1
c00193cd:	0f 85 69 01 00 00    	jne    c001953c <IDE::detect()+0x25e>
c00193d3:	84 c0                	test   al,al
c00193d5:	78 04                	js     c00193db <IDE::detect()+0xfd>
c00193d7:	a8 08                	test   al,0x8
c00193d9:	75 23                	jne    c00193fe <IDE::detect()+0x120>
c00193db:	47                   	inc    edi
c00193dc:	81 ff 17 01 00 00    	cmp    edi,0x117
c00193e2:	7e da                	jle    c00193be <IDE::detect()+0xe0>
c00193e4:	83 ec 0c             	sub    esp,0xc
c00193e7:	6a 32                	push   0x32
c00193e9:	e8 96 a2 ff ff       	call   c0013684 <milliTenthSleep(unsigned int)>
c00193ee:	83 c4 10             	add    esp,0x10
c00193f1:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00193f7:	75 c5                	jne    c00193be <IDE::detect()+0xe0>
c00193f9:	e9 3e 01 00 00       	jmp    c001953c <IDE::detect()+0x25e>
c00193fe:	31 c9                	xor    ecx,ecx
c0019400:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019404:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019408:	83 ec 0c             	sub    esp,0xc
c001940b:	68 80 00 00 00       	push   0x80
c0019410:	57                   	push   edi
c0019411:	6a 00                	push   0x0
c0019413:	56                   	push   esi
c0019414:	53                   	push   ebx
c0019415:	e8 f8 fd ff ff       	call   c0019212 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001941a:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001941f:	89 e8                	mov    eax,ebp
c0019421:	89 d1                	mov    ecx,edx
c0019423:	c1 e0 06             	shl    eax,0x6
c0019426:	01 d8                	add    eax,ebx
c0019428:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001942f:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019436:	89 f2                	mov    edx,esi
c0019438:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001943e:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0019442:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019448:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001944c:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0019453:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001945b:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0019462:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001946a:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0019470:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019477:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001947d:	8d 54 24 58          	lea    edx,[esp+0x58]
c0019481:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019485:	83 c4 20             	add    esp,0x20
c0019488:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001948b:	83 c0 02             	add    eax,0x2
c001948e:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c0019494:	83 c7 02             	add    edi,0x2
c0019497:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001949a:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00194a0:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00194a4:	75 e2                	jne    c0019488 <IDE::detect()+0x1aa>
c00194a6:	89 e8                	mov    eax,ebp
c00194a8:	c1 e0 06             	shl    eax,0x6
c00194ab:	01 d8                	add    eax,ebx
c00194ad:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00194b3:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00194ba:	66 c1 ea 09          	shr    dx,0x9
c00194be:	83 e2 01             	and    edx,0x1
c00194c1:	84 c9                	test   cl,cl
c00194c3:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00194c9:	75 22                	jne    c00194ed <IDE::detect()+0x20f>
c00194cb:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00194d2:	74 46                	je     c001951a <IDE::detect()+0x23c>
c00194d4:	83 ec 0c             	sub    esp,0xc
c00194d7:	68 7c 01 00 00       	push   0x17c
c00194dc:	e8 d8 e2 fe ff       	call   c00077b9 <malloc>
c00194e1:	89 c7                	mov    edi,eax
c00194e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00194e6:	e8 11 05 00 00       	call   c00199fc <ATA::ATA()>
c00194eb:	eb 17                	jmp    c0019504 <IDE::detect()+0x226>
c00194ed:	83 ec 0c             	sub    esp,0xc
c00194f0:	68 84 01 00 00       	push   0x184
c00194f5:	e8 bf e2 fe ff       	call   c00077b9 <malloc>
c00194fa:	89 c7                	mov    edi,eax
c00194fc:	89 04 24             	mov    DWORD PTR [esp],eax
c00194ff:	e8 f0 0a 00 00       	call   c0019ff4 <ATAPI::ATAPI()>
c0019504:	5a                   	pop    edx
c0019505:	59                   	pop    ecx
c0019506:	57                   	push   edi
c0019507:	53                   	push   ebx
c0019508:	e8 13 24 ff ff       	call   c000b920 <Device::addChild(Device*)>
c001950d:	8b 07                	mov    eax,DWORD PTR [edi]
c001950f:	53                   	push   ebx
c0019510:	55                   	push   ebp
c0019511:	6a 00                	push   0x0
c0019513:	57                   	push   edi
c0019514:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019517:	83 c4 20             	add    esp,0x20
c001951a:	45                   	inc    ebp
c001951b:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0019520:	74 0d                	je     c001952f <IDE::detect()+0x251>
c0019522:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001952a:	e9 e0 fd ff ff       	jmp    c001930f <IDE::detect()+0x31>
c001952f:	4e                   	dec    esi
c0019530:	74 61                	je     c0019593 <IDE::detect()+0x2b5>
c0019532:	be 01 00 00 00       	mov    esi,0x1
c0019537:	e9 cb fd ff ff       	jmp    c0019307 <IDE::detect()+0x29>
c001953c:	50                   	push   eax
c001953d:	6a 04                	push   0x4
c001953f:	56                   	push   esi
c0019540:	53                   	push   ebx
c0019541:	e8 2a f7 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c0019546:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001954a:	83 c4 0c             	add    esp,0xc
c001954d:	6a 05                	push   0x5
c001954f:	56                   	push   esi
c0019550:	53                   	push   ebx
c0019551:	e8 1a f7 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c0019556:	83 c4 10             	add    esp,0x10
c0019559:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c001955d:	80 fa 14             	cmp    dl,0x14
c0019560:	75 04                	jne    c0019566 <IDE::detect()+0x288>
c0019562:	3c eb                	cmp    al,0xeb
c0019564:	eb 07                	jmp    c001956d <IDE::detect()+0x28f>
c0019566:	3c 96                	cmp    al,0x96
c0019568:	75 b1                	jne    c001951b <IDE::detect()+0x23d>
c001956a:	80 fa 69             	cmp    dl,0x69
c001956d:	75 ac                	jne    c001951b <IDE::detect()+0x23d>
c001956f:	68 a1 00 00 00       	push   0xa1
c0019574:	6a 07                	push   0x7
c0019576:	56                   	push   esi
c0019577:	53                   	push   ebx
c0019578:	e8 33 f6 ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001957d:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019584:	e8 fb a0 ff ff       	call   c0013684 <milliTenthSleep(unsigned int)>
c0019589:	83 c4 10             	add    esp,0x10
c001958c:	b1 01                	mov    cl,0x1
c001958e:	e9 6d fe ff ff       	jmp    c0019400 <IDE::detect()+0x122>
c0019593:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019599:	5b                   	pop    ebx
c001959a:	5e                   	pop    esi
c001959b:	5f                   	pop    edi
c001959c:	5d                   	pop    ebp
c001959d:	c3                   	ret    

c001959e <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001959e:	55                   	push   ebp
c001959f:	57                   	push   edi
c00195a0:	56                   	push   esi
c00195a1:	53                   	push   ebx
c00195a2:	83 ec 1c             	sub    esp,0x1c
c00195a5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00195a9:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00195ad:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00195b1:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00195b5:	88 c3                	mov    bl,al
c00195b7:	84 c0                	test   al,al
c00195b9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00195bd:	0f 84 81 00 00 00    	je     c0019644 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00195c3:	83 ec 0c             	sub    esp,0xc
c00195c6:	68 97 ed 01 c0       	push   0xc001ed97
c00195cb:	e8 10 0f ff ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c00195d0:	83 c4 10             	add    esp,0x10
c00195d3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00195d7:	3c 01                	cmp    al,0x1
c00195d9:	74 63                	je     c001963e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00195db:	3c 02                	cmp    al,0x2
c00195dd:	75 53                	jne    c0019632 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00195df:	01 f6                	add    esi,esi
c00195e1:	09 ee                	or     esi,ebp
c00195e3:	50                   	push   eax
c00195e4:	89 f0                	mov    eax,esi
c00195e6:	6a 01                	push   0x1
c00195e8:	0f b6 f0             	movzx  esi,al
c00195eb:	c1 e6 06             	shl    esi,0x6
c00195ee:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00195f6:	50                   	push   eax
c00195f7:	57                   	push   edi
c00195f8:	e8 73 f6 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c00195fd:	83 c4 10             	add    esp,0x10
c0019600:	a8 01                	test   al,0x1
c0019602:	74 02                	je     c0019606 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019604:	b3 07                	mov    bl,0x7
c0019606:	a8 02                	test   al,0x2
c0019608:	74 02                	je     c001960c <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c001960a:	b3 03                	mov    bl,0x3
c001960c:	a8 04                	test   al,0x4
c001960e:	74 02                	je     c0019612 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c0019610:	b3 14                	mov    bl,0x14
c0019612:	a8 08                	test   al,0x8
c0019614:	74 02                	je     c0019618 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019616:	b3 03                	mov    bl,0x3
c0019618:	a8 10                	test   al,0x10
c001961a:	74 02                	je     c001961e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c001961c:	b3 15                	mov    bl,0x15
c001961e:	a8 20                	test   al,0x20
c0019620:	74 02                	je     c0019624 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c0019622:	b3 03                	mov    bl,0x3
c0019624:	a8 40                	test   al,0x40
c0019626:	74 02                	je     c001962a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019628:	b3 16                	mov    bl,0x16
c001962a:	84 c0                	test   al,al
c001962c:	79 16                	jns    c0019644 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001962e:	b3 0d                	mov    bl,0xd
c0019630:	eb 12                	jmp    c0019644 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019632:	3c 03                	cmp    al,0x3
c0019634:	74 0c                	je     c0019642 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019636:	3c 04                	cmp    al,0x4
c0019638:	75 0a                	jne    c0019644 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001963a:	b3 08                	mov    bl,0x8
c001963c:	eb 06                	jmp    c0019644 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001963e:	b3 13                	mov    bl,0x13
c0019640:	eb 02                	jmp    c0019644 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019642:	b3 17                	mov    bl,0x17
c0019644:	83 c4 1c             	add    esp,0x1c
c0019647:	88 d8                	mov    al,bl
c0019649:	5b                   	pop    ebx
c001964a:	5e                   	pop    esi
c001964b:	5f                   	pop    edi
c001964c:	5d                   	pop    ebp
c001964d:	c3                   	ret    

c001964e <IDE::polling(unsigned char, unsigned int)>:
c001964e:	55                   	push   ebp
c001964f:	bd 04 00 00 00       	mov    ebp,0x4
c0019654:	57                   	push   edi
c0019655:	56                   	push   esi
c0019656:	53                   	push   ebx
c0019657:	83 ec 0c             	sub    esp,0xc
c001965a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001965e:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c0019662:	0f b6 f3             	movzx  esi,bl
c0019665:	52                   	push   edx
c0019666:	6a 0c                	push   0xc
c0019668:	56                   	push   esi
c0019669:	57                   	push   edi
c001966a:	e8 01 f6 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c001966f:	83 c4 10             	add    esp,0x10
c0019672:	4d                   	dec    ebp
c0019673:	75 ed                	jne    c0019662 <IDE::polling(unsigned char, unsigned int)+0x14>
c0019675:	bb a0 86 01 00       	mov    ebx,0x186a0
c001967a:	50                   	push   eax
c001967b:	6a 0c                	push   0xc
c001967d:	56                   	push   esi
c001967e:	57                   	push   edi
c001967f:	e8 ec f5 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c0019684:	83 c4 10             	add    esp,0x10
c0019687:	a8 01                	test   al,0x1
c0019689:	75 17                	jne    c00196a2 <IDE::polling(unsigned char, unsigned int)+0x54>
c001968b:	a8 20                	test   al,0x20
c001968d:	75 0f                	jne    c001969e <IDE::polling(unsigned char, unsigned int)+0x50>
c001968f:	4b                   	dec    ebx
c0019690:	74 10                	je     c00196a2 <IDE::polling(unsigned char, unsigned int)+0x54>
c0019692:	84 c0                	test   al,al
c0019694:	78 e4                	js     c001967a <IDE::polling(unsigned char, unsigned int)+0x2c>
c0019696:	a8 08                	test   al,0x8
c0019698:	74 e0                	je     c001967a <IDE::polling(unsigned char, unsigned int)+0x2c>
c001969a:	31 c0                	xor    eax,eax
c001969c:	eb 06                	jmp    c00196a4 <IDE::polling(unsigned char, unsigned int)+0x56>
c001969e:	b0 01                	mov    al,0x1
c00196a0:	eb 02                	jmp    c00196a4 <IDE::polling(unsigned char, unsigned int)+0x56>
c00196a2:	b0 02                	mov    al,0x2
c00196a4:	83 c4 0c             	add    esp,0xc
c00196a7:	5b                   	pop    ebx
c00196a8:	5e                   	pop    esi
c00196a9:	5f                   	pop    edi
c00196aa:	5d                   	pop    ebp
c00196ab:	c3                   	ret    

c00196ac <SATABus::close(int, int, void*)>:
c00196ac:	31 c0                	xor    eax,eax
c00196ae:	c3                   	ret    
c00196af:	90                   	nop

c00196b0 <SATABus::detect()>:
c00196b0:	c3                   	ret    
c00196b1:	90                   	nop

c00196b2 <SATABus::SATABus()>:
c00196b2:	83 ec 0c             	sub    esp,0xc
c00196b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196b9:	83 ec 08             	sub    esp,0x8
c00196bc:	68 d0 ed 01 c0       	push   0xc001edd0
c00196c1:	50                   	push   eax
c00196c2:	e8 9d 25 ff ff       	call   c000bc64 <HardDiskController::HardDiskController(char const*)>
c00196c7:	83 c4 10             	add    esp,0x10
c00196ca:	ba fc ed 01 c0       	mov    edx,0xc001edfc
c00196cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196d3:	89 10                	mov    DWORD PTR [eax],edx
c00196d5:	83 ec 0c             	sub    esp,0xc
c00196d8:	6a 50                	push   0x50
c00196da:	e8 74 e4 fe ff       	call   c0007b53 <Phys::allocateContiguousPages(int)>
c00196df:	83 c4 10             	add    esp,0x10
c00196e2:	89 c2                	mov    edx,eax
c00196e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00196e8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00196ee:	83 ec 0c             	sub    esp,0xc
c00196f1:	6a 50                	push   0x50
c00196f3:	e8 95 fb fe ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c00196f8:	83 c4 10             	add    esp,0x10
c00196fb:	89 c2                	mov    edx,eax
c00196fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019701:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019707:	a1 d0 05 02 c0       	mov    eax,ds:0xc00205d0
c001970c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019710:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019716:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001971a:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0019720:	83 ec 0c             	sub    esp,0xc
c0019723:	6a 03                	push   0x3
c0019725:	6a 50                	push   0x50
c0019727:	51                   	push   ecx
c0019728:	52                   	push   edx
c0019729:	50                   	push   eax
c001972a:	e8 ed 04 ff ff       	call   c0009c1c <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001972f:	83 c4 20             	add    esp,0x20
c0019732:	90                   	nop
c0019733:	83 c4 0c             	add    esp,0xc
c0019736:	c3                   	ret    
c0019737:	90                   	nop

c0019738 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001973c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001973f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0019742:	09 c2                	or     edx,eax
c0019744:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019748:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001974e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0019750:	31 c0                	xor    eax,eax
c0019752:	c1 e9 08             	shr    ecx,0x8
c0019755:	83 e1 0f             	and    ecx,0xf
c0019758:	39 c8                	cmp    eax,ecx
c001975a:	74 0a                	je     c0019766 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001975c:	f6 c2 01             	test   dl,0x1
c001975f:	74 08                	je     c0019769 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0019761:	d1 ea                	shr    edx,1
c0019763:	40                   	inc    eax
c0019764:	eb f2                	jmp    c0019758 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019766:	83 c8 ff             	or     eax,0xffffffff
c0019769:	c3                   	ret    

c001976a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001976a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001976e:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0019771:	89 c2                	mov    edx,eax
c0019773:	c1 ea 08             	shr    edx,0x8
c0019776:	83 e2 0f             	and    edx,0xf
c0019779:	fe ca                	dec    dl
c001977b:	75 31                	jne    c00197ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001977d:	83 e0 0f             	and    eax,0xf
c0019780:	3c 03                	cmp    al,0x3
c0019782:	75 2a                	jne    c00197ae <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019784:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019787:	b8 02 00 00 00       	mov    eax,0x2
c001978c:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0019792:	74 1c                	je     c00197b0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0019794:	b8 04 00 00 00       	mov    eax,0x4
c0019799:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001979f:	74 0f                	je     c00197b0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00197a1:	31 c0                	xor    eax,eax
c00197a3:	83 fa 03             	cmp    edx,0x3
c00197a6:	0f 94 c0             	sete   al
c00197a9:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00197ad:	c3                   	ret    
c00197ae:	31 c0                	xor    eax,eax
c00197b0:	c3                   	ret    
c00197b1:	90                   	nop

c00197b2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00197b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197b6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197b9:	0f ba e2 0f          	bt     edx,0xf
c00197bd:	72 f7                	jb     c00197b6 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00197bf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197c2:	83 ca 10             	or     edx,0x10
c00197c5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197c8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197cb:	83 ca 01             	or     edx,0x1
c00197ce:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197d1:	c3                   	ret    

c00197d2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00197d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00197d6:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197d9:	83 e2 fe             	and    edx,0xfffffffe
c00197dc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197df:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197e2:	83 e2 ef             	and    edx,0xffffffef
c00197e5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00197e8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197eb:	0f ba e2 0e          	bt     edx,0xe
c00197ef:	72 f7                	jb     c00197e8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00197f1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00197f4:	0f ba e2 0f          	bt     edx,0xf
c00197f8:	72 ee                	jb     c00197e8 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00197fa:	c3                   	ret    
c00197fb:	90                   	nop

c00197fc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00197fc:	55                   	push   ebp
c00197fd:	57                   	push   edi
c00197fe:	56                   	push   esi
c00197ff:	53                   	push   ebx
c0019800:	83 ec 1c             	sub    esp,0x1c
c0019803:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019807:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001980b:	53                   	push   ebx
c001980c:	56                   	push   esi
c001980d:	e8 c0 ff ff ff       	call   c00197d2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0019812:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019816:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001981c:	83 ec 0c             	sub    esp,0xc
c001981f:	c1 e5 0a             	shl    ebp,0xa
c0019822:	01 e8                	add    eax,ebp
c0019824:	89 03                	mov    DWORD PTR [ebx],eax
c0019826:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019828:	68 00 04 00 00       	push   0x400
c001982d:	6a 00                	push   0x0
c001982f:	50                   	push   eax
c0019830:	e8 9b 6c fe ff       	call   c00004d0 <memset>
c0019835:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001983b:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001983f:	01 e8                	add    eax,ebp
c0019841:	83 c4 1c             	add    esp,0x1c
c0019844:	89 03                	mov    DWORD PTR [ebx],eax
c0019846:	c1 e2 08             	shl    edx,0x8
c0019849:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0019850:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019856:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001985c:	01 f8                	add    eax,edi
c001985e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0019861:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019864:	68 00 01 00 00       	push   0x100
c0019869:	6a 00                	push   0x0
c001986b:	50                   	push   eax
c001986c:	e8 5f 6c fe ff       	call   c00004d0 <memset>
c0019871:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019877:	01 fa                	add    edx,edi
c0019879:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001987d:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0019880:	c1 e7 0d             	shl    edi,0xd
c0019883:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001988a:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0019890:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0019896:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001989a:	31 ff                	xor    edi,edi
c001989c:	83 c4 10             	add    esp,0x10
c001989f:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00198a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00198a9:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00198af:	83 c5 20             	add    ebp,0x20
c00198b2:	01 f8                	add    eax,edi
c00198b4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00198b7:	52                   	push   edx
c00198b8:	68 00 01 00 00       	push   0x100
c00198bd:	6a 00                	push   0x0
c00198bf:	50                   	push   eax
c00198c0:	e8 0b 6c fe ff       	call   c00004d0 <memset>
c00198c5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00198c9:	83 c4 10             	add    esp,0x10
c00198cc:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00198d2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00198d9:	01 f8                	add    eax,edi
c00198db:	81 c7 00 01 00 00    	add    edi,0x100
c00198e1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00198e4:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00198ea:	75 b3                	jne    c001989f <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c00198ec:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c00198f3:	50                   	push   eax
c00198f4:	50                   	push   eax
c00198f5:	53                   	push   ebx
c00198f6:	56                   	push   esi
c00198f7:	e8 b6 fe ff ff       	call   c00197b2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c00198fc:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c0019903:	83 c4 2c             	add    esp,0x2c
c0019906:	5b                   	pop    ebx
c0019907:	5e                   	pop    esi
c0019908:	5f                   	pop    edi
c0019909:	5d                   	pop    ebp
c001990a:	c3                   	ret    
c001990b:	90                   	nop

c001990c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001990c:	55                   	push   ebp
c001990d:	57                   	push   edi
c001990e:	56                   	push   esi
c001990f:	53                   	push   ebx
c0019910:	31 db                	xor    ebx,ebx
c0019912:	83 ec 0c             	sub    esp,0xc
c0019915:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019919:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001991d:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0019920:	f7 c7 01 00 00 00    	test   edi,0x1
c0019926:	74 7a                	je     c00199a2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019928:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001992c:	89 d8                	mov    eax,ebx
c001992e:	c1 e0 07             	shl    eax,0x7
c0019931:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019938:	55                   	push   ebp
c0019939:	56                   	push   esi
c001993a:	e8 2b fe ff ff       	call   c001976a <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001993f:	5a                   	pop    edx
c0019940:	83 f8 01             	cmp    eax,0x1
c0019943:	59                   	pop    ecx
c0019944:	75 21                	jne    c0019967 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019946:	50                   	push   eax
c0019947:	53                   	push   ebx
c0019948:	55                   	push   ebp
c0019949:	56                   	push   esi
c001994a:	e8 ad fe ff ff       	call   c00197fc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001994f:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019956:	e8 5e de fe ff       	call   c00077b9 <malloc>
c001995b:	89 c5                	mov    ebp,eax
c001995d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019960:	e8 43 0d 00 00       	call   c001a6a8 <SATA::SATA()>
c0019965:	eb 24                	jmp    c001998b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019967:	83 f8 04             	cmp    eax,0x4
c001996a:	75 36                	jne    c00199a2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001996c:	51                   	push   ecx
c001996d:	53                   	push   ebx
c001996e:	55                   	push   ebp
c001996f:	56                   	push   esi
c0019970:	e8 87 fe ff ff       	call   c00197fc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019975:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001997c:	e8 38 de fe ff       	call   c00077b9 <malloc>
c0019981:	89 c5                	mov    ebp,eax
c0019983:	89 04 24             	mov    DWORD PTR [esp],eax
c0019986:	e8 79 10 00 00       	call   c001aa04 <SATAPI::SATAPI()>
c001998b:	58                   	pop    eax
c001998c:	5a                   	pop    edx
c001998d:	55                   	push   ebp
c001998e:	56                   	push   esi
c001998f:	e8 8c 1f ff ff       	call   c000b920 <Device::addChild(Device*)>
c0019994:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0019997:	56                   	push   esi
c0019998:	6a 00                	push   0x0
c001999a:	53                   	push   ebx
c001999b:	55                   	push   ebp
c001999c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001999f:	83 c4 20             	add    esp,0x20
c00199a2:	d1 ef                	shr    edi,1
c00199a4:	43                   	inc    ebx
c00199a5:	83 fb 20             	cmp    ebx,0x20
c00199a8:	0f 85 72 ff ff ff    	jne    c0019920 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00199ae:	83 c4 0c             	add    esp,0xc
c00199b1:	5b                   	pop    ebx
c00199b2:	5e                   	pop    esi
c00199b3:	5f                   	pop    edi
c00199b4:	5d                   	pop    ebp
c00199b5:	c3                   	ret    

c00199b6 <SATABus::open(int, int, void*)>:
c00199b6:	83 ec 14             	sub    esp,0x14
c00199b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00199bd:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00199c3:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00199c9:	52                   	push   edx
c00199ca:	50                   	push   eax
c00199cb:	e8 3c ff ff ff       	call   c001990c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00199d0:	31 c0                	xor    eax,eax
c00199d2:	83 c4 1c             	add    esp,0x1c
c00199d5:	c3                   	ret    

c00199d6 <ATA::close(int, int, void*)>:
c00199d6:	83 ec 0c             	sub    esp,0xc
c00199d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00199dd:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00199e3:	85 c0                	test   eax,eax
c00199e5:	74 0c                	je     c00199f3 <ATA::close(int, int, void*)+0x1d>
c00199e7:	83 ec 0c             	sub    esp,0xc
c00199ea:	8b 10                	mov    edx,DWORD PTR [eax]
c00199ec:	50                   	push   eax
c00199ed:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00199f0:	83 c4 10             	add    esp,0x10
c00199f3:	31 c0                	xor    eax,eax
c00199f5:	83 c4 0c             	add    esp,0xc
c00199f8:	c3                   	ret    
c00199f9:	90                   	nop

c00199fa <ATA::powerSaving(PowerSavingLevel)>:
c00199fa:	c3                   	ret    
c00199fb:	90                   	nop

c00199fc <ATA::ATA()>:
c00199fc:	83 ec 0c             	sub    esp,0xc
c00199ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a03:	83 ec 04             	sub    esp,0x4
c0019a06:	68 00 02 00 00       	push   0x200
c0019a0b:	68 c9 ee 01 c0       	push   0xc001eec9
c0019a10:	50                   	push   eax
c0019a11:	e8 d8 22 ff ff       	call   c000bcee <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019a16:	83 c4 10             	add    esp,0x10
c0019a19:	ba 3c ee 01 c0       	mov    edx,0xc001ee3c
c0019a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019a22:	89 10                	mov    DWORD PTR [eax],edx
c0019a24:	90                   	nop
c0019a25:	83 c4 0c             	add    esp,0xc
c0019a28:	c3                   	ret    
c0019a29:	90                   	nop

c0019a2a <ATA::flush(bool)>:
c0019a2a:	53                   	push   ebx
c0019a2b:	83 ec 08             	sub    esp,0x8
c0019a2e:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0019a33:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019a37:	19 c0                	sbb    eax,eax
c0019a39:	83 e0 fd             	and    eax,0xfffffffd
c0019a3c:	05 ea 00 00 00       	add    eax,0xea
c0019a41:	50                   	push   eax
c0019a42:	6a 07                	push   0x7
c0019a44:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a4b:	50                   	push   eax
c0019a4c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a52:	e8 59 f1 ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019a57:	83 c4 0c             	add    esp,0xc
c0019a5a:	6a 00                	push   0x0
c0019a5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019a63:	50                   	push   eax
c0019a64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019a6a:	e8 df fb ff ff       	call   c001964e <IDE::polling(unsigned char, unsigned int)>
c0019a6f:	83 c4 18             	add    esp,0x18
c0019a72:	5b                   	pop    ebx
c0019a73:	c3                   	ret    

c0019a74 <ATA::readyForCommand()>:
c0019a74:	56                   	push   esi
c0019a75:	53                   	push   ebx
c0019a76:	53                   	push   ebx
c0019a77:	31 db                	xor    ebx,ebx
c0019a79:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019a7d:	51                   	push   ecx
c0019a7e:	6a 0c                	push   0xc
c0019a80:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019a87:	50                   	push   eax
c0019a88:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019a8e:	e8 dd f1 ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c0019a93:	83 c4 10             	add    esp,0x10
c0019a96:	a8 88                	test   al,0x88
c0019a98:	74 1f                	je     c0019ab9 <ATA::readyForCommand()+0x45>
c0019a9a:	43                   	inc    ebx
c0019a9b:	83 fb 63             	cmp    ebx,0x63
c0019a9e:	7e dd                	jle    c0019a7d <ATA::readyForCommand()+0x9>
c0019aa0:	83 ec 0c             	sub    esp,0xc
c0019aa3:	6a 0a                	push   0xa
c0019aa5:	e8 da 9b ff ff       	call   c0013684 <milliTenthSleep(unsigned int)>
c0019aaa:	83 c4 10             	add    esp,0x10
c0019aad:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0019ab3:	75 c8                	jne    c0019a7d <ATA::readyForCommand()+0x9>
c0019ab5:	31 c0                	xor    eax,eax
c0019ab7:	eb 02                	jmp    c0019abb <ATA::readyForCommand()+0x47>
c0019ab9:	b0 01                	mov    al,0x1
c0019abb:	5a                   	pop    edx
c0019abc:	5b                   	pop    ebx
c0019abd:	5e                   	pop    esi
c0019abe:	c3                   	ret    
c0019abf:	90                   	nop

c0019ac0 <ATA::access(unsigned long long, int, void*, bool)>:
c0019ac0:	55                   	push   ebp
c0019ac1:	57                   	push   edi
c0019ac2:	56                   	push   esi
c0019ac3:	53                   	push   ebx
c0019ac4:	83 ec 2c             	sub    esp,0x2c
c0019ac7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0019acb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0019acf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0019ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0019ad7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019adb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0019adf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019ae3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019ae9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019aed:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019af3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019af7:	c1 e0 06             	shl    eax,0x6
c0019afa:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019b02:	74 5d                	je     c0019b61 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019b04:	89 fa                	mov    edx,edi
c0019b06:	89 f0                	mov    eax,esi
c0019b08:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019b0c:	c1 ea 1c             	shr    edx,0x1c
c0019b0f:	89 d1                	mov    ecx,edx
c0019b11:	09 c1                	or     ecx,eax
c0019b13:	74 25                	je     c0019b3a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019b15:	31 ed                	xor    ebp,ebp
c0019b17:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019b1e:	89 fa                	mov    edx,edi
c0019b20:	89 f0                	mov    eax,esi
c0019b22:	0f ad d0             	shrd   eax,edx,cl
c0019b25:	d3 ea                	shr    edx,cl
c0019b27:	f6 c1 20             	test   cl,0x20
c0019b2a:	74 02                	je     c0019b2e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019b2c:	89 d0                	mov    eax,edx
c0019b2e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019b32:	45                   	inc    ebp
c0019b33:	83 fd 06             	cmp    ebp,0x6
c0019b36:	75 df                	jne    c0019b17 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019b38:	eb 76                	jmp    c0019bb0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019b3a:	89 f0                	mov    eax,esi
c0019b3c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019b41:	89 fa                	mov    edx,edi
c0019b43:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019b4a:	0f ac d0 10          	shrd   eax,edx,0x10
c0019b4e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019b53:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019b57:	c1 ee 18             	shr    esi,0x18
c0019b5a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019b5f:	eb 56                	jmp    c0019bb7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019b61:	6a 00                	push   0x0
c0019b63:	6a 3f                	push   0x3f
c0019b65:	57                   	push   edi
c0019b66:	56                   	push   esi
c0019b67:	e8 14 22 00 00       	call   c001bd80 <__umoddi3>
c0019b6c:	83 c4 10             	add    esp,0x10
c0019b6f:	40                   	inc    eax
c0019b70:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019b74:	6a 00                	push   0x0
c0019b76:	68 f0 03 00 00       	push   0x3f0
c0019b7b:	57                   	push   edi
c0019b7c:	56                   	push   esi
c0019b7d:	e8 fe 20 00 00       	call   c001bc80 <__udivdi3>
c0019b82:	83 c4 10             	add    esp,0x10
c0019b85:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019b8a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019b91:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019b96:	6a 00                	push   0x0
c0019b98:	6a 3f                	push   0x3f
c0019b9a:	57                   	push   edi
c0019b9b:	56                   	push   esi
c0019b9c:	e8 df 20 00 00       	call   c001bc80 <__udivdi3>
c0019ba1:	83 c4 10             	add    esp,0x10
c0019ba4:	89 c6                	mov    esi,eax
c0019ba6:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019bab:	83 e6 0f             	and    esi,0xf
c0019bae:	eb 07                	jmp    c0019bb7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019bb0:	31 f6                	xor    esi,esi
c0019bb2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019bb7:	bf 01 00 00 00       	mov    edi,0x1
c0019bbc:	50                   	push   eax
c0019bbd:	6a 00                	push   0x0
c0019bbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bc6:	50                   	push   eax
c0019bc7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019bcb:	e8 ee f1 ff ff       	call   c0018dbe <IDE::enableIRQs(unsigned char, bool)>
c0019bd0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019bd3:	e8 9c fe ff ff       	call   c0019a74 <ATA::readyForCommand()>
c0019bd8:	83 c4 10             	add    esp,0x10
c0019bdb:	84 c0                	test   al,al
c0019bdd:	0f 84 4e 02 00 00    	je     c0019e31 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019be3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019be9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019bef:	c1 e0 04             	shl    eax,0x4
c0019bf2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019bf9:	09 c6                	or     esi,eax
c0019bfb:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019c00:	75 05                	jne    c0019c07 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019c02:	83 ce a0             	or     esi,0xffffffa0
c0019c05:	eb 03                	jmp    c0019c0a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019c07:	83 ce e0             	or     esi,0xffffffe0
c0019c0a:	89 f0                	mov    eax,esi
c0019c0c:	0f b6 f0             	movzx  esi,al
c0019c0f:	56                   	push   esi
c0019c10:	6a 06                	push   0x6
c0019c12:	51                   	push   ecx
c0019c13:	52                   	push   edx
c0019c14:	e8 97 ef ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c19:	83 c4 10             	add    esp,0x10
c0019c1c:	6a 00                	push   0x0
c0019c1e:	6a 01                	push   0x1
c0019c20:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c27:	50                   	push   eax
c0019c28:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c2e:	e8 7d ef ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c33:	83 c4 10             	add    esp,0x10
c0019c36:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019c3b:	75 6e                	jne    c0019cab <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019c3d:	6a 00                	push   0x0
c0019c3f:	6a 08                	push   0x8
c0019c41:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c48:	50                   	push   eax
c0019c49:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c4f:	e8 5c ef ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c54:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019c59:	50                   	push   eax
c0019c5a:	6a 09                	push   0x9
c0019c5c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c63:	50                   	push   eax
c0019c64:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c6a:	e8 41 ef ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c6f:	83 c4 20             	add    esp,0x20
c0019c72:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019c77:	50                   	push   eax
c0019c78:	6a 0a                	push   0xa
c0019c7a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c81:	50                   	push   eax
c0019c82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c88:	e8 23 ef ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c8d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019c92:	50                   	push   eax
c0019c93:	6a 0b                	push   0xb
c0019c95:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c9c:	50                   	push   eax
c0019c9d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ca3:	e8 08 ef ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ca8:	83 c4 20             	add    esp,0x20
c0019cab:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0019cb0:	50                   	push   eax
c0019cb1:	6a 02                	push   0x2
c0019cb3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cba:	50                   	push   eax
c0019cbb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cc1:	e8 ea ee ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cc6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019ccb:	50                   	push   eax
c0019ccc:	6a 03                	push   0x3
c0019cce:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cd5:	50                   	push   eax
c0019cd6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cdc:	e8 cf ee ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ce1:	83 c4 20             	add    esp,0x20
c0019ce4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019ce9:	50                   	push   eax
c0019cea:	6a 04                	push   0x4
c0019cec:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019cf3:	50                   	push   eax
c0019cf4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cfa:	e8 b1 ee ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019cff:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019d04:	50                   	push   eax
c0019d05:	6a 05                	push   0x5
c0019d07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d0e:	50                   	push   eax
c0019d0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d15:	e8 96 ee ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d1a:	83 c4 20             	add    esp,0x20
c0019d1d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019d22:	0f 94 c0             	sete   al
c0019d25:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019d2a:	74 09                	je     c0019d35 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019d2c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019d33:	eb 07                	jmp    c0019d3c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019d35:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019d3c:	0f b6 c0             	movzx  eax,al
c0019d3f:	50                   	push   eax
c0019d40:	6a 07                	push   0x7
c0019d42:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d49:	50                   	push   eax
c0019d4a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d50:	e8 5b ee ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019d55:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019d59:	83 c4 10             	add    esp,0x10
c0019d5c:	85 f6                	test   esi,esi
c0019d5e:	0f 84 ae 00 00 00    	je     c0019e12 <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019d64:	50                   	push   eax
c0019d65:	6a 01                	push   0x1
c0019d67:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019d6e:	50                   	push   eax
c0019d6f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d75:	e8 d4 f8 ff ff       	call   c001964e <IDE::polling(unsigned char, unsigned int)>
c0019d7a:	83 c4 10             	add    esp,0x10
c0019d7d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019d83:	84 c0                	test   al,al
c0019d85:	74 20                	je     c0019da7 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019d87:	0f b6 f8             	movzx  edi,al
c0019d8a:	0f b6 d2             	movzx  edx,dl
c0019d8d:	57                   	push   edi
c0019d8e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019d95:	50                   	push   eax
c0019d96:	52                   	push   edx
c0019d97:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d9d:	e8 fc f7 ff ff       	call   c001959e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019da2:	e9 87 00 00 00       	jmp    c0019e2e <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019da7:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019dac:	74 33                	je     c0019de1 <ATA::access(unsigned long long, int, void*, bool)+0x321>
c0019dae:	31 ed                	xor    ebp,ebp
c0019db0:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019db4:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019db8:	50                   	push   eax
c0019db9:	50                   	push   eax
c0019dba:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019dc1:	50                   	push   eax
c0019dc2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019dc8:	e8 d1 ed ff ff       	call   c0018b9e <IDE::getBase(unsigned char)>
c0019dcd:	89 c2                	mov    edx,eax
c0019dcf:	89 f8                	mov    eax,edi
c0019dd1:	66 ef                	out    dx,ax
c0019dd3:	45                   	inc    ebp
c0019dd4:	83 c4 10             	add    esp,0x10
c0019dd7:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019ddd:	75 d1                	jne    c0019db0 <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019ddf:	eb 23                	jmp    c0019e04 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c0019de1:	0f b6 d2             	movzx  edx,dl
c0019de4:	51                   	push   ecx
c0019de5:	51                   	push   ecx
c0019de6:	52                   	push   edx
c0019de7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ded:	e8 ac ed ff ff       	call   c0018b9e <IDE::getBase(unsigned char)>
c0019df2:	b9 00 01 00 00       	mov    ecx,0x100
c0019df7:	89 c2                	mov    edx,eax
c0019df9:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019dfd:	fc                   	cld    
c0019dfe:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0019e01:	83 c4 10             	add    esp,0x10
c0019e04:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019e0c:	4e                   	dec    esi
c0019e0d:	e9 4a ff ff ff       	jmp    c0019d5c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019e12:	31 ff                	xor    edi,edi
c0019e14:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019e19:	74 16                	je     c0019e31 <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019e1b:	50                   	push   eax
c0019e1c:	50                   	push   eax
c0019e1d:	31 c0                	xor    eax,eax
c0019e1f:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019e24:	0f 94 c0             	sete   al
c0019e27:	50                   	push   eax
c0019e28:	53                   	push   ebx
c0019e29:	e8 fc fb ff ff       	call   c0019a2a <ATA::flush(bool)>
c0019e2e:	83 c4 10             	add    esp,0x10
c0019e31:	83 c4 2c             	add    esp,0x2c
c0019e34:	89 f8                	mov    eax,edi
c0019e36:	5b                   	pop    ebx
c0019e37:	5e                   	pop    esi
c0019e38:	5f                   	pop    edi
c0019e39:	5d                   	pop    ebp
c0019e3a:	c3                   	ret    
c0019e3b:	90                   	nop

c0019e3c <ATA::read(unsigned long long, int, void*)>:
c0019e3c:	57                   	push   edi
c0019e3d:	b8 04 00 00 00       	mov    eax,0x4
c0019e42:	56                   	push   esi
c0019e43:	53                   	push   ebx
c0019e44:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e48:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e4c:	8d 7a ff             	lea    edi,[edx-0x1]
c0019e4f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e53:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019e57:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019e5d:	77 25                	ja     c0019e84 <ATA::read(unsigned long long, int, void*)+0x48>
c0019e5f:	b8 06 00 00 00       	mov    eax,0x6
c0019e64:	85 f6                	test   esi,esi
c0019e66:	74 1c                	je     c0019e84 <ATA::read(unsigned long long, int, void*)+0x48>
c0019e68:	50                   	push   eax
c0019e69:	50                   	push   eax
c0019e6a:	6a 00                	push   0x0
c0019e6c:	56                   	push   esi
c0019e6d:	52                   	push   edx
c0019e6e:	53                   	push   ebx
c0019e6f:	51                   	push   ecx
c0019e70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019e74:	e8 47 fc ff ff       	call   c0019ac0 <ATA::access(unsigned long long, int, void*, bool)>
c0019e79:	83 c4 20             	add    esp,0x20
c0019e7c:	85 c0                	test   eax,eax
c0019e7e:	0f 95 c0             	setne  al
c0019e81:	0f b6 c0             	movzx  eax,al
c0019e84:	5b                   	pop    ebx
c0019e85:	5e                   	pop    esi
c0019e86:	5f                   	pop    edi
c0019e87:	c3                   	ret    

c0019e88 <ATA::write(unsigned long long, int, void*)>:
c0019e88:	57                   	push   edi
c0019e89:	b8 04 00 00 00       	mov    eax,0x4
c0019e8e:	56                   	push   esi
c0019e8f:	53                   	push   ebx
c0019e90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e94:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019e98:	8d 7a ff             	lea    edi,[edx-0x1]
c0019e9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019e9f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019ea3:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019ea9:	77 25                	ja     c0019ed0 <ATA::write(unsigned long long, int, void*)+0x48>
c0019eab:	b8 06 00 00 00       	mov    eax,0x6
c0019eb0:	85 f6                	test   esi,esi
c0019eb2:	74 1c                	je     c0019ed0 <ATA::write(unsigned long long, int, void*)+0x48>
c0019eb4:	50                   	push   eax
c0019eb5:	50                   	push   eax
c0019eb6:	6a 01                	push   0x1
c0019eb8:	56                   	push   esi
c0019eb9:	52                   	push   edx
c0019eba:	53                   	push   ebx
c0019ebb:	51                   	push   ecx
c0019ebc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019ec0:	e8 fb fb ff ff       	call   c0019ac0 <ATA::access(unsigned long long, int, void*, bool)>
c0019ec5:	83 c4 20             	add    esp,0x20
c0019ec8:	85 c0                	test   eax,eax
c0019eca:	0f 95 c0             	setne  al
c0019ecd:	0f b6 c0             	movzx  eax,al
c0019ed0:	5b                   	pop    ebx
c0019ed1:	5e                   	pop    esi
c0019ed2:	5f                   	pop    edi
c0019ed3:	c3                   	ret    

c0019ed4 <ATA::detectCHS()>:
c0019ed4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019ed8:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0019ede:	c1 e0 06             	shl    eax,0x6
c0019ee1:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019ee7:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0019ef1:	c7 44 24 04 20 ee 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ee20
c0019ef9:	e9 5d 62 ff ff       	jmp    c001015b <KePanic(char const*)>

c0019efe <ATA::open(int, int, void*)>:
c0019efe:	53                   	push   ebx
c0019eff:	83 ec 08             	sub    esp,0x8
c0019f02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019f06:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019f0a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019f0e:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019f14:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019f1a:	c1 e0 06             	shl    eax,0x6
c0019f1d:	01 d0                	add    eax,edx
c0019f1f:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019f26:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0019f2c:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019f33:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019f3d:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019f43:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019f4a:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0019f51:	75 0c                	jne    c0019f5f <ATA::open(int, int, void*)+0x61>
c0019f53:	83 ec 0c             	sub    esp,0xc
c0019f56:	53                   	push   ebx
c0019f57:	e8 78 ff ff ff       	call   c0019ed4 <ATA::detectCHS()>
c0019f5c:	83 c4 10             	add    esp,0x10
c0019f5f:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019f65:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019f6b:	c1 e0 06             	shl    eax,0x6
c0019f6e:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019f75:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019f7f:	d1 e8                	shr    eax,1
c0019f81:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019f87:	6a 04                	push   0x4
c0019f89:	6a 0c                	push   0xc
c0019f8b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019f92:	50                   	push   eax
c0019f93:	52                   	push   edx
c0019f94:	e8 17 ec ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019f99:	90                   	nop
c0019f9a:	90                   	nop
c0019f9b:	6a 00                	push   0x0
c0019f9d:	6a 0c                	push   0xc
c0019f9f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019fa6:	50                   	push   eax
c0019fa7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019fad:	e8 fe eb ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019fb2:	83 c4 14             	add    esp,0x14
c0019fb5:	53                   	push   ebx
c0019fb6:	e8 9b 1d ff ff       	call   c000bd56 <PhysicalDisk::startCache()>
c0019fbb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019fbe:	e8 23 2e ff ff       	call   c000cde6 <createPartitionsForDisk(PhysicalDisk*)>
c0019fc3:	31 c0                	xor    eax,eax
c0019fc5:	83 c4 18             	add    esp,0x18
c0019fc8:	5b                   	pop    ebx
c0019fc9:	c3                   	ret    

c0019fca <ATAPI::write(unsigned long long, int, void*)>:
c0019fca:	b8 03 00 00 00       	mov    eax,0x3
c0019fcf:	c3                   	ret    

c0019fd0 <ATAPI::close(int, int, void*)>:
c0019fd0:	83 ec 0c             	sub    esp,0xc
c0019fd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019fd7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019fdd:	85 c0                	test   eax,eax
c0019fdf:	74 0c                	je     c0019fed <ATAPI::close(int, int, void*)+0x1d>
c0019fe1:	83 ec 0c             	sub    esp,0xc
c0019fe4:	8b 10                	mov    edx,DWORD PTR [eax]
c0019fe6:	50                   	push   eax
c0019fe7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019fea:	83 c4 10             	add    esp,0x10
c0019fed:	31 c0                	xor    eax,eax
c0019fef:	83 c4 0c             	add    esp,0xc
c0019ff2:	c3                   	ret    
c0019ff3:	90                   	nop

c0019ff4 <ATAPI::ATAPI()>:
c0019ff4:	83 ec 0c             	sub    esp,0xc
c0019ff7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ffb:	83 ec 04             	sub    esp,0x4
c0019ffe:	68 00 08 00 00       	push   0x800
c001a003:	68 69 ef 01 c0       	push   0xc001ef69
c001a008:	50                   	push   eax
c001a009:	e8 e0 1c ff ff       	call   c000bcee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a00e:	83 c4 10             	add    esp,0x10
c001a011:	ba 84 ee 01 c0       	mov    edx,0xc001ee84
c001a016:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a01a:	89 10                	mov    DWORD PTR [eax],edx
c001a01c:	90                   	nop
c001a01d:	83 c4 0c             	add    esp,0xc
c001a020:	c3                   	ret    
c001a021:	90                   	nop

c001a022 <ATAPI::readyForCommand()>:
c001a022:	56                   	push   esi
c001a023:	53                   	push   ebx
c001a024:	53                   	push   ebx
c001a025:	31 db                	xor    ebx,ebx
c001a027:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a02b:	51                   	push   ecx
c001a02c:	6a 0c                	push   0xc
c001a02e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001a035:	50                   	push   eax
c001a036:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001a03c:	e8 2f ec ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c001a041:	83 c4 10             	add    esp,0x10
c001a044:	a8 88                	test   al,0x88
c001a046:	74 25                	je     c001a06d <ATAPI::readyForCommand()+0x4b>
c001a048:	43                   	inc    ebx
c001a049:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001a04f:	7e da                	jle    c001a02b <ATAPI::readyForCommand()+0x9>
c001a051:	83 ec 0c             	sub    esp,0xc
c001a054:	68 5e 01 00 00       	push   0x15e
c001a059:	e8 26 96 ff ff       	call   c0013684 <milliTenthSleep(unsigned int)>
c001a05e:	83 c4 10             	add    esp,0x10
c001a061:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001a067:	75 c2                	jne    c001a02b <ATAPI::readyForCommand()+0x9>
c001a069:	31 c0                	xor    eax,eax
c001a06b:	eb 02                	jmp    c001a06f <ATAPI::readyForCommand()+0x4d>
c001a06d:	b0 01                	mov    al,0x1
c001a06f:	5a                   	pop    edx
c001a070:	5b                   	pop    ebx
c001a071:	5e                   	pop    esi
c001a072:	c3                   	ret    
c001a073:	90                   	nop

c001a074 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001a074:	55                   	push   ebp
c001a075:	57                   	push   edi
c001a076:	56                   	push   esi
c001a077:	53                   	push   ebx
c001a078:	83 ec 20             	sub    esp,0x20
c001a07b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a07f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001a083:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a087:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001a08b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a08f:	6a 01                	push   0x1
c001a091:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a098:	50                   	push   eax
c001a099:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a09f:	e8 1a ed ff ff       	call   c0018dbe <IDE::enableIRQs(unsigned char, bool)>
c001a0a4:	5e                   	pop    esi
c001a0a5:	58                   	pop    eax
c001a0a6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0ad:	50                   	push   eax
c001a0ae:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0b4:	e8 d1 ea ff ff       	call   c0018b8a <IDE::prepareInterrupt(unsigned char)>
c001a0b9:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a0bc:	e8 61 ff ff ff       	call   c001a022 <ATAPI::readyForCommand()>
c001a0c1:	83 c4 10             	add    esp,0x10
c001a0c4:	84 c0                	test   al,al
c001a0c6:	75 0a                	jne    c001a0d2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001a0c8:	bb 01 00 00 00       	mov    ebx,0x1
c001a0cd:	e9 57 02 00 00       	jmp    c001a329 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a0d2:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c001a0d8:	c1 e0 04             	shl    eax,0x4
c001a0db:	0f b6 c0             	movzx  eax,al
c001a0de:	50                   	push   eax
c001a0df:	6a 06                	push   0x6
c001a0e1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0e8:	50                   	push   eax
c001a0e9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0ef:	e8 bc ea ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a0f4:	6a 00                	push   0x0
c001a0f6:	6a 01                	push   0x1
c001a0f8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a0ff:	50                   	push   eax
c001a100:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a106:	e8 a5 ea ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a10b:	83 c4 20             	add    esp,0x20
c001a10e:	0f b6 c3             	movzx  eax,bl
c001a111:	0f b6 df             	movzx  ebx,bh
c001a114:	50                   	push   eax
c001a115:	6a 04                	push   0x4
c001a117:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a11e:	50                   	push   eax
c001a11f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a125:	e8 86 ea ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a12a:	53                   	push   ebx
c001a12b:	6a 05                	push   0x5
c001a12d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a134:	50                   	push   eax
c001a135:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a13b:	e8 70 ea ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a140:	83 c4 20             	add    esp,0x20
c001a143:	68 a0 00 00 00       	push   0xa0
c001a148:	6a 07                	push   0x7
c001a14a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a151:	50                   	push   eax
c001a152:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a158:	e8 53 ea ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a15d:	83 c4 0c             	add    esp,0xc
c001a160:	6a 01                	push   0x1
c001a162:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a169:	50                   	push   eax
c001a16a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a170:	e8 d9 f4 ff ff       	call   c001964e <IDE::polling(unsigned char, unsigned int)>
c001a175:	83 c4 10             	add    esp,0x10
c001a178:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a17e:	84 c0                	test   al,al
c001a180:	74 23                	je     c001a1a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a182:	0f b6 d8             	movzx  ebx,al
c001a185:	0f b6 d2             	movzx  edx,dl
c001a188:	53                   	push   ebx
c001a189:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a190:	50                   	push   eax
c001a191:	52                   	push   edx
c001a192:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a198:	e8 01 f4 ff ff       	call   c001959e <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a19d:	83 c4 10             	add    esp,0x10
c001a1a0:	e9 84 01 00 00       	jmp    c001a329 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a1a5:	0f b6 d2             	movzx  edx,dl
c001a1a8:	53                   	push   ebx
c001a1a9:	53                   	push   ebx
c001a1aa:	52                   	push   edx
c001a1ab:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a1b1:	e8 e8 e9 ff ff       	call   c0018b9e <IDE::getBase(unsigned char)>
c001a1b6:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a1ba:	b9 06 00 00 00       	mov    ecx,0x6
c001a1bf:	89 c2                	mov    edx,eax
c001a1c1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a1c4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a1c8:	83 c4 10             	add    esp,0x10
c001a1cb:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a1d1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a1d8:	85 db                	test   ebx,ebx
c001a1da:	0f 84 ec 00 00 00    	je     c001a2cc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a1e0:	51                   	push   ecx
c001a1e1:	51                   	push   ecx
c001a1e2:	52                   	push   edx
c001a1e3:	50                   	push   eax
c001a1e4:	e8 35 eb ff ff       	call   c0018d1e <IDE::waitInterrupt(unsigned char)>
c001a1e9:	83 c4 10             	add    esp,0x10
c001a1ec:	84 c0                	test   al,al
c001a1ee:	0f 84 d4 fe ff ff    	je     c001a0c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a1f4:	56                   	push   esi
c001a1f5:	56                   	push   esi
c001a1f6:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a1fd:	50                   	push   eax
c001a1fe:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a204:	e8 81 e9 ff ff       	call   c0018b8a <IDE::prepareInterrupt(unsigned char)>
c001a209:	83 c4 0c             	add    esp,0xc
c001a20c:	6a 04                	push   0x4
c001a20e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a215:	50                   	push   eax
c001a216:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a21c:	e8 4f ea ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c001a221:	83 c4 0c             	add    esp,0xc
c001a224:	89 c6                	mov    esi,eax
c001a226:	6a 05                	push   0x5
c001a228:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a22f:	50                   	push   eax
c001a230:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a236:	e8 35 ea ff ff       	call   c0018c70 <IDE::read(unsigned char, unsigned char)>
c001a23b:	89 f1                	mov    ecx,esi
c001a23d:	0f b6 c0             	movzx  eax,al
c001a240:	0f b6 f1             	movzx  esi,cl
c001a243:	c1 e0 08             	shl    eax,0x8
c001a246:	09 c6                	or     esi,eax
c001a248:	d1 fe                	sar    esi,1
c001a24a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a24e:	83 c4 10             	add    esp,0x10
c001a251:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a256:	74 41                	je     c001a299 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a258:	31 c9                	xor    ecx,ecx
c001a25a:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a260:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a267:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a26b:	75 0a                	jne    c001a277 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a26d:	01 c9                	add    ecx,ecx
c001a26f:	01 cd                	add    ebp,ecx
c001a271:	4b                   	dec    ebx
c001a272:	e9 54 ff ff ff       	jmp    c001a1cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a277:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a27c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a280:	51                   	push   ecx
c001a281:	51                   	push   ecx
c001a282:	52                   	push   edx
c001a283:	50                   	push   eax
c001a284:	e8 15 e9 ff ff       	call   c0018b9e <IDE::getBase(unsigned char)>
c001a289:	89 c2                	mov    edx,eax
c001a28b:	89 f0                	mov    eax,esi
c001a28d:	66 ef                	out    dx,ax
c001a28f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a293:	83 c4 10             	add    esp,0x10
c001a296:	41                   	inc    ecx
c001a297:	eb c1                	jmp    c001a25a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a299:	31 f6                	xor    esi,esi
c001a29b:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a2a1:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a2a8:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a2ac:	75 06                	jne    c001a2b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a2ae:	01 f6                	add    esi,esi
c001a2b0:	01 f5                	add    ebp,esi
c001a2b2:	eb bd                	jmp    c001a271 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a2b4:	51                   	push   ecx
c001a2b5:	51                   	push   ecx
c001a2b6:	52                   	push   edx
c001a2b7:	50                   	push   eax
c001a2b8:	e8 e1 e8 ff ff       	call   c0018b9e <IDE::getBase(unsigned char)>
c001a2bd:	89 c2                	mov    edx,eax
c001a2bf:	66 ed                	in     ax,dx
c001a2c1:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a2c6:	83 c4 10             	add    esp,0x10
c001a2c9:	46                   	inc    esi
c001a2ca:	eb cf                	jmp    c001a29b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a2cc:	51                   	push   ecx
c001a2cd:	51                   	push   ecx
c001a2ce:	52                   	push   edx
c001a2cf:	50                   	push   eax
c001a2d0:	e8 49 ea ff ff       	call   c0018d1e <IDE::waitInterrupt(unsigned char)>
c001a2d5:	83 c4 10             	add    esp,0x10
c001a2d8:	84 c0                	test   al,al
c001a2da:	0f 84 e8 fd ff ff    	je     c001a0c8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a2e0:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a2e5:	52                   	push   edx
c001a2e6:	52                   	push   edx
c001a2e7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a2ee:	50                   	push   eax
c001a2ef:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a2f5:	e8 90 e8 ff ff       	call   c0018b8a <IDE::prepareInterrupt(unsigned char)>
c001a2fa:	83 c4 10             	add    esp,0x10
c001a2fd:	50                   	push   eax
c001a2fe:	50                   	push   eax
c001a2ff:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a306:	50                   	push   eax
c001a307:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a30d:	e8 8c e8 ff ff       	call   c0018b9e <IDE::getBase(unsigned char)>
c001a312:	8d 50 07             	lea    edx,[eax+0x7]
c001a315:	ec                   	in     al,dx
c001a316:	83 c4 10             	add    esp,0x10
c001a319:	a8 88                	test   al,0x88
c001a31b:	74 0a                	je     c001a327 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a31d:	4b                   	dec    ebx
c001a31e:	75 dd                	jne    c001a2fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a320:	bb 02 00 00 00       	mov    ebx,0x2
c001a325:	eb 02                	jmp    c001a329 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a327:	31 db                	xor    ebx,ebx
c001a329:	83 c4 1c             	add    esp,0x1c
c001a32c:	89 d8                	mov    eax,ebx
c001a32e:	5b                   	pop    ebx
c001a32f:	5e                   	pop    esi
c001a330:	5f                   	pop    edi
c001a331:	5d                   	pop    ebp
c001a332:	c3                   	ret    
c001a333:	90                   	nop

c001a334 <ATAPI::diskRemoved()>:
c001a334:	53                   	push   ebx
c001a335:	83 ec 14             	sub    esp,0x14
c001a338:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a33c:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a343:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a349:	e8 18 28 ff ff       	call   c000cb66 <LogicalDisk::unmount()>
c001a34e:	58                   	pop    eax
c001a34f:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a355:	e8 52 31 ff ff       	call   c000d4ac <VCache::writeWriteBuffer()>
c001a35a:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a360:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a364:	83 c4 18             	add    esp,0x18
c001a367:	5b                   	pop    ebx
c001a368:	e9 2f 31 ff ff       	jmp    c000d49c <VCache::invalidateReadBuffer()>
c001a36d:	90                   	nop

c001a36e <ATAPI::eject()>:
c001a36e:	57                   	push   edi
c001a36f:	b9 03 00 00 00       	mov    ecx,0x3
c001a374:	53                   	push   ebx
c001a375:	83 ec 14             	sub    esp,0x14
c001a378:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a37c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a380:	fc                   	cld    
c001a381:	31 c0                	xor    eax,eax
c001a383:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a385:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a38a:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a38f:	50                   	push   eax
c001a390:	50                   	push   eax
c001a391:	6a 00                	push   0x0
c001a393:	6a 00                	push   0x0
c001a395:	6a 00                	push   0x0
c001a397:	6a 02                	push   0x2
c001a399:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a39d:	50                   	push   eax
c001a39e:	53                   	push   ebx
c001a39f:	e8 d0 fc ff ff       	call   c001a074 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a3a4:	83 c4 14             	add    esp,0x14
c001a3a7:	53                   	push   ebx
c001a3a8:	e8 87 ff ff ff       	call   c001a334 <ATAPI::diskRemoved()>
c001a3ad:	83 c4 24             	add    esp,0x24
c001a3b0:	31 c0                	xor    eax,eax
c001a3b2:	5b                   	pop    ebx
c001a3b3:	5f                   	pop    edi
c001a3b4:	c3                   	ret    
c001a3b5:	90                   	nop

c001a3b6 <ATAPI::diskInserted()>:
c001a3b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ba:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a3c1:	c3                   	ret    

c001a3c2 <ATAPI::detectMedia()>:
c001a3c2:	56                   	push   esi
c001a3c3:	53                   	push   ebx
c001a3c4:	83 ec 28             	sub    esp,0x28
c001a3c7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a3cb:	6a 0c                	push   0xc
c001a3cd:	6a 00                	push   0x0
c001a3cf:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a3d3:	56                   	push   esi
c001a3d4:	e8 f7 60 fe ff       	call   c00004d0 <memset>
c001a3d9:	58                   	pop    eax
c001a3da:	5a                   	pop    edx
c001a3db:	6a 00                	push   0x0
c001a3dd:	6a 00                	push   0x0
c001a3df:	6a 00                	push   0x0
c001a3e1:	6a 00                	push   0x0
c001a3e3:	56                   	push   esi
c001a3e4:	53                   	push   ebx
c001a3e5:	e8 8a fc ff ff       	call   c001a074 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a3ea:	83 c4 1c             	add    esp,0x1c
c001a3ed:	6a 0c                	push   0xc
c001a3ef:	6a 00                	push   0x0
c001a3f1:	56                   	push   esi
c001a3f2:	e8 d9 60 fe ff       	call   c00004d0 <memset>
c001a3f7:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a3fc:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a401:	59                   	pop    ecx
c001a402:	58                   	pop    eax
c001a403:	6a 01                	push   0x1
c001a405:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a409:	50                   	push   eax
c001a40a:	6a 00                	push   0x0
c001a40c:	6a 12                	push   0x12
c001a40e:	56                   	push   esi
c001a40f:	53                   	push   ebx
c001a410:	e8 5f fc ff ff       	call   c001a074 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a415:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a419:	83 c4 20             	add    esp,0x20
c001a41c:	83 e0 7f             	and    eax,0x7f
c001a41f:	3c 70                	cmp    al,0x70
c001a421:	74 15                	je     c001a438 <ATAPI::detectMedia()+0x76>
c001a423:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a42a:	75 0c                	jne    c001a438 <ATAPI::detectMedia()+0x76>
c001a42c:	83 ec 0c             	sub    esp,0xc
c001a42f:	53                   	push   ebx
c001a430:	e8 81 ff ff ff       	call   c001a3b6 <ATAPI::diskInserted()>
c001a435:	83 c4 10             	add    esp,0x10
c001a438:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a43c:	83 e0 0f             	and    eax,0xf
c001a43f:	3c 02                	cmp    al,0x2
c001a441:	75 1b                	jne    c001a45e <ATAPI::detectMedia()+0x9c>
c001a443:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a448:	75 2d                	jne    c001a477 <ATAPI::detectMedia()+0xb5>
c001a44a:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a451:	74 24                	je     c001a477 <ATAPI::detectMedia()+0xb5>
c001a453:	83 ec 0c             	sub    esp,0xc
c001a456:	53                   	push   ebx
c001a457:	e8 d8 fe ff ff       	call   c001a334 <ATAPI::diskRemoved()>
c001a45c:	eb 16                	jmp    c001a474 <ATAPI::detectMedia()+0xb2>
c001a45e:	84 c0                	test   al,al
c001a460:	75 15                	jne    c001a477 <ATAPI::detectMedia()+0xb5>
c001a462:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a469:	75 0c                	jne    c001a477 <ATAPI::detectMedia()+0xb5>
c001a46b:	83 ec 0c             	sub    esp,0xc
c001a46e:	53                   	push   ebx
c001a46f:	e8 42 ff ff ff       	call   c001a3b6 <ATAPI::diskInserted()>
c001a474:	83 c4 10             	add    esp,0x10
c001a477:	83 c4 24             	add    esp,0x24
c001a47a:	5b                   	pop    ebx
c001a47b:	5e                   	pop    esi
c001a47c:	c3                   	ret    
c001a47d:	90                   	nop

c001a47e <ATAPI::open(int, int, void*)>:
c001a47e:	56                   	push   esi
c001a47f:	53                   	push   ebx
c001a480:	50                   	push   eax
c001a481:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a485:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a489:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a48d:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a493:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a499:	c1 e0 06             	shl    eax,0x6
c001a49c:	01 d0                	add    eax,edx
c001a49e:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a4a5:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a4ab:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a4b2:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a4bc:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a4c2:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a4c9:	6a 04                	push   0x4
c001a4cb:	6a 0c                	push   0xc
c001a4cd:	51                   	push   ecx
c001a4ce:	52                   	push   edx
c001a4cf:	e8 dc e6 ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4d4:	90                   	nop
c001a4d5:	90                   	nop
c001a4d6:	6a 00                	push   0x0
c001a4d8:	6a 0c                	push   0xc
c001a4da:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a4e1:	50                   	push   eax
c001a4e2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a4e8:	e8 c3 e6 ff ff       	call   c0018bb0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a4ed:	83 c4 14             	add    esp,0x14
c001a4f0:	68 74 01 00 00       	push   0x174
c001a4f5:	e8 bf d2 fe ff       	call   c00077b9 <malloc>
c001a4fa:	83 c4 0c             	add    esp,0xc
c001a4fd:	89 c6                	mov    esi,eax
c001a4ff:	6a 00                	push   0x0
c001a501:	68 ff ff ff 7f       	push   0x7fffffff
c001a506:	6a 00                	push   0x0
c001a508:	6a 00                	push   0x0
c001a50a:	53                   	push   ebx
c001a50b:	68 20 f0 01 c0       	push   0xc001f020
c001a510:	50                   	push   eax
c001a511:	e8 9c 24 ff ff       	call   c000c9b2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a516:	83 c4 14             	add    esp,0x14
c001a519:	56                   	push   esi
c001a51a:	e8 49 25 ff ff       	call   c000ca68 <LogicalDisk::assignDriveLetter()>
c001a51f:	5a                   	pop    edx
c001a520:	0f be c0             	movsx  eax,al
c001a523:	59                   	pop    ecx
c001a524:	50                   	push   eax
c001a525:	68 6c ee 01 c0       	push   0xc001ee6c
c001a52a:	e8 b1 ff fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001a52f:	58                   	pop    eax
c001a530:	5a                   	pop    edx
c001a531:	56                   	push   esi
c001a532:	53                   	push   ebx
c001a533:	e8 e8 13 ff ff       	call   c000b920 <Device::addChild(Device*)>
c001a538:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a53e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a541:	e8 10 18 ff ff       	call   c000bd56 <PhysicalDisk::startCache()>
c001a546:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a54d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a550:	e8 6d fe ff ff       	call   c001a3c2 <ATAPI::detectMedia()>
c001a555:	83 c4 14             	add    esp,0x14
c001a558:	31 c0                	xor    eax,eax
c001a55a:	5b                   	pop    ebx
c001a55b:	5e                   	pop    esi
c001a55c:	c3                   	ret    
c001a55d:	90                   	nop

c001a55e <ATAPI::read(unsigned long long, int, void*)>:
c001a55e:	55                   	push   ebp
c001a55f:	57                   	push   edi
c001a560:	56                   	push   esi
c001a561:	53                   	push   ebx
c001a562:	83 ec 1c             	sub    esp,0x1c
c001a565:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a569:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a56d:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a571:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a578:	74 3c                	je     c001a5b6 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a57a:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a57e:	b9 03 00 00 00       	mov    ecx,0x3
c001a583:	fc                   	cld    
c001a584:	31 c0                	xor    eax,eax
c001a586:	0f ce                	bswap  esi
c001a588:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a58a:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a58f:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a593:	89 e8                	mov    eax,ebp
c001a595:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a599:	50                   	push   eax
c001a59a:	50                   	push   eax
c001a59b:	55                   	push   ebp
c001a59c:	c1 e5 0b             	shl    ebp,0xb
c001a59f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a5a3:	6a 00                	push   0x0
c001a5a5:	55                   	push   ebp
c001a5a6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a5aa:	50                   	push   eax
c001a5ab:	53                   	push   ebx
c001a5ac:	e8 c3 fa ff ff       	call   c001a074 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a5b1:	83 c4 20             	add    esp,0x20
c001a5b4:	eb 1a                	jmp    c001a5d0 <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a5b6:	83 ec 0c             	sub    esp,0xc
c001a5b9:	53                   	push   ebx
c001a5ba:	e8 03 fe ff ff       	call   c001a3c2 <ATAPI::detectMedia()>
c001a5bf:	83 c4 10             	add    esp,0x10
c001a5c2:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a5c9:	75 af                	jne    c001a57a <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a5cb:	b8 02 00 00 00       	mov    eax,0x2
c001a5d0:	83 c4 1c             	add    esp,0x1c
c001a5d3:	5b                   	pop    ebx
c001a5d4:	5e                   	pop    esi
c001a5d5:	5f                   	pop    edi
c001a5d6:	5d                   	pop    ebp
c001a5d7:	c3                   	ret    

c001a5d8 <SATA::close(int, int, void*)>:
c001a5d8:	83 ec 0c             	sub    esp,0xc
c001a5db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5df:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a5e5:	85 c0                	test   eax,eax
c001a5e7:	74 0c                	je     c001a5f5 <SATA::close(int, int, void*)+0x1d>
c001a5e9:	83 ec 0c             	sub    esp,0xc
c001a5ec:	8b 10                	mov    edx,DWORD PTR [eax]
c001a5ee:	50                   	push   eax
c001a5ef:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a5f2:	83 c4 10             	add    esp,0x10
c001a5f5:	31 c0                	xor    eax,eax
c001a5f7:	83 c4 0c             	add    esp,0xc
c001a5fa:	c3                   	ret    
c001a5fb:	90                   	nop

c001a5fc <SATA::powerSaving(PowerSavingLevel)>:
c001a5fc:	c3                   	ret    
c001a5fd:	90                   	nop

c001a5fe <SATA::open(int, int, void*)>:
c001a5fe:	56                   	push   esi
c001a5ff:	53                   	push   ebx
c001a600:	50                   	push   eax
c001a601:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a605:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a609:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a613:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a619:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a623:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a627:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a631:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a637:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a63e:	e8 52 d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a643:	89 c6                	mov    esi,eax
c001a645:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a64b:	81 c6 00 10 00 00    	add    esi,0x1000
c001a651:	e8 3f d4 fe ff       	call   c0007a95 <Phys::allocatePage()>
c001a656:	39 c6                	cmp    esi,eax
c001a658:	74 10                	je     c001a66a <SATA::open(int, int, void*)+0x6c>
c001a65a:	83 ec 0c             	sub    esp,0xc
c001a65d:	68 b4 ee 01 c0       	push   0xc001eeb4
c001a662:	e8 f4 5a ff ff       	call   c001015b <KePanic(char const*)>
c001a667:	83 c4 10             	add    esp,0x10
c001a66a:	83 ec 0c             	sub    esp,0xc
c001a66d:	6a 02                	push   0x2
c001a66f:	e8 19 ec fe ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c001a674:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a67a:	6a 03                	push   0x3
c001a67c:	50                   	push   eax
c001a67d:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a683:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c001a689:	e8 94 f2 fe ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c001a68e:	83 c4 14             	add    esp,0x14
c001a691:	53                   	push   ebx
c001a692:	e8 bf 16 ff ff       	call   c000bd56 <PhysicalDisk::startCache()>
c001a697:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a69a:	e8 47 27 ff ff       	call   c000cde6 <createPartitionsForDisk(PhysicalDisk*)>
c001a69f:	83 c4 14             	add    esp,0x14
c001a6a2:	31 c0                	xor    eax,eax
c001a6a4:	5b                   	pop    ebx
c001a6a5:	5e                   	pop    esi
c001a6a6:	c3                   	ret    
c001a6a7:	90                   	nop

c001a6a8 <SATA::SATA()>:
c001a6a8:	83 ec 0c             	sub    esp,0xc
c001a6ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6af:	83 ec 04             	sub    esp,0x4
c001a6b2:	68 00 02 00 00       	push   0x200
c001a6b7:	68 c8 ee 01 c0       	push   0xc001eec8
c001a6bc:	50                   	push   eax
c001a6bd:	e8 2c 16 ff ff       	call   c000bcee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a6c2:	83 c4 10             	add    esp,0x10
c001a6c5:	ba 38 ef 01 c0       	mov    edx,0xc001ef38
c001a6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6ce:	89 10                	mov    DWORD PTR [eax],edx
c001a6d0:	90                   	nop
c001a6d1:	83 c4 0c             	add    esp,0xc
c001a6d4:	c3                   	ret    
c001a6d5:	90                   	nop

c001a6d6 <SATA::access(unsigned long long, int, void*, bool)>:
c001a6d6:	55                   	push   ebp
c001a6d7:	57                   	push   edi
c001a6d8:	56                   	push   esi
c001a6d9:	53                   	push   ebx
c001a6da:	83 ec 2c             	sub    esp,0x2c
c001a6dd:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a6e1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a6e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a6e9:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a6ed:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a6f1:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a6f6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a6fa:	7e 10                	jle    c001a70c <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a6fc:	83 ec 0c             	sub    esp,0xc
c001a6ff:	68 d8 ee 01 c0       	push   0xc001eed8
c001a704:	e8 52 5a ff ff       	call   c001015b <KePanic(char const*)>
c001a709:	83 c4 10             	add    esp,0x10
c001a70c:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a712:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a718:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a71e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a722:	89 d0                	mov    eax,edx
c001a724:	c1 e0 07             	shl    eax,0x7
c001a727:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a72b:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a735:	51                   	push   ecx
c001a736:	8d 42 02             	lea    eax,[edx+0x2]
c001a739:	51                   	push   ecx
c001a73a:	c1 e0 07             	shl    eax,0x7
c001a73d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a741:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a745:	50                   	push   eax
c001a746:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a74c:	e8 e7 ef ff ff       	call   c0019738 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a751:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a755:	83 c4 10             	add    esp,0x10
c001a758:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a75d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a761:	0f 84 4f 01 00 00    	je     c001a8b6 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a767:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a76b:	c1 e0 09             	shl    eax,0x9
c001a76e:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a773:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a777:	74 0e                	je     c001a787 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a779:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a77f:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a783:	89 c1                	mov    ecx,eax
c001a785:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a787:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a78b:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a791:	8d 42 02             	lea    eax,[edx+0x2]
c001a794:	c1 e0 07             	shl    eax,0x7
c001a797:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a79b:	8b 00                	mov    eax,DWORD PTR [eax]
c001a79d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a7a3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a7a9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a7ad:	c1 e1 05             	shl    ecx,0x5
c001a7b0:	01 c8                	add    eax,ecx
c001a7b2:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a7b6:	83 e1 01             	and    ecx,0x1
c001a7b9:	89 ce                	mov    esi,ecx
c001a7bb:	8a 08                	mov    cl,BYTE PTR [eax]
c001a7bd:	c1 e6 06             	shl    esi,0x6
c001a7c0:	83 e1 bf             	and    ecx,0xffffffbf
c001a7c3:	09 f1                	or     ecx,esi
c001a7c5:	88 08                	mov    BYTE PTR [eax],cl
c001a7c7:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a7c9:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a7cf:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a7d5:	89 08                	mov    DWORD PTR [eax],ecx
c001a7d7:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a7dd:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a7e3:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a7e9:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a7ec:	50                   	push   eax
c001a7ed:	68 90 00 00 00       	push   0x90
c001a7f2:	6a 00                	push   0x0
c001a7f4:	56                   	push   esi
c001a7f5:	e8 d6 5c fe ff       	call   c00004d0 <memset>
c001a7fa:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a800:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a804:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a80a:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a80e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a812:	83 c4 10             	add    esp,0x10
c001a815:	48                   	dec    eax
c001a816:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a81b:	89 c1                	mov    ecx,eax
c001a81d:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a823:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a828:	09 c8                	or     eax,ecx
c001a82a:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a830:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a833:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a83a:	66 25 00 7f          	and    ax,0x7f00
c001a83e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a842:	66 0d 27 80          	or     ax,0x8027
c001a846:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a84b:	66 89 06             	mov    WORD PTR [esi],ax
c001a84e:	19 c0                	sbb    eax,eax
c001a850:	83 e0 f0             	and    eax,0xfffffff0
c001a853:	83 c0 35             	add    eax,0x35
c001a856:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a859:	89 e8                	mov    eax,ebp
c001a85b:	c1 e8 10             	shr    eax,0x10
c001a85e:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a861:	89 e8                	mov    eax,ebp
c001a863:	c1 e8 18             	shr    eax,0x18
c001a866:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a869:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a86d:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a870:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a874:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a877:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a87b:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a87f:	89 d6                	mov    esi,edx
c001a881:	31 c0                	xor    eax,eax
c001a883:	c1 e6 07             	shl    esi,0x7
c001a886:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a88a:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a890:	80 e1 88             	and    cl,0x88
c001a893:	74 0a                	je     c001a89f <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a895:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a89a:	74 0a                	je     c001a8a6 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a89c:	40                   	inc    eax
c001a89d:	eb eb                	jmp    c001a88a <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a89f:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a8a4:	75 17                	jne    c001a8bd <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a8a6:	83 ec 0c             	sub    esp,0xc
c001a8a9:	68 11 ef 01 c0       	push   0xc001ef11
c001a8ae:	e8 2d fc fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001a8b3:	83 c4 10             	add    esp,0x10
c001a8b6:	b8 01 00 00 00       	mov    eax,0x1
c001a8bb:	eb 5d                	jmp    c001a91a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a8bd:	b8 01 00 00 00       	mov    eax,0x1
c001a8c2:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a8c6:	c1 e2 07             	shl    edx,0x7
c001a8c9:	d3 e0                	shl    eax,cl
c001a8cb:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a8cf:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a8d5:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a8db:	85 c8                	test   eax,ecx
c001a8dd:	74 16                	je     c001a8f5 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a8df:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a8e5:	0f ba e1 1e          	bt     ecx,0x1e
c001a8e9:	73 ea                	jae    c001a8d5 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a8eb:	83 ec 0c             	sub    esp,0xc
c001a8ee:	68 1f ef 01 c0       	push   0xc001ef1f
c001a8f3:	eb b9                	jmp    c001a8ae <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a8f5:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a8fb:	0f ba e0 1e          	bt     eax,0x1e
c001a8ff:	72 b5                	jb     c001a8b6 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a901:	31 c0                	xor    eax,eax
c001a903:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a908:	75 10                	jne    c001a91a <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a90a:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a910:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a914:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a918:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a91a:	83 c4 2c             	add    esp,0x2c
c001a91d:	5b                   	pop    ebx
c001a91e:	5e                   	pop    esi
c001a91f:	5f                   	pop    edi
c001a920:	5d                   	pop    ebp
c001a921:	c3                   	ret    

c001a922 <SATA::read(unsigned long long, int, void*)>:
c001a922:	57                   	push   edi
c001a923:	b8 04 00 00 00       	mov    eax,0x4
c001a928:	56                   	push   esi
c001a929:	53                   	push   ebx
c001a92a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a92e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a932:	8d 7a ff             	lea    edi,[edx-0x1]
c001a935:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a939:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a93d:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a943:	77 25                	ja     c001a96a <SATA::read(unsigned long long, int, void*)+0x48>
c001a945:	b8 06 00 00 00       	mov    eax,0x6
c001a94a:	85 f6                	test   esi,esi
c001a94c:	74 1c                	je     c001a96a <SATA::read(unsigned long long, int, void*)+0x48>
c001a94e:	50                   	push   eax
c001a94f:	50                   	push   eax
c001a950:	6a 00                	push   0x0
c001a952:	56                   	push   esi
c001a953:	52                   	push   edx
c001a954:	53                   	push   ebx
c001a955:	51                   	push   ecx
c001a956:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a95a:	e8 77 fd ff ff       	call   c001a6d6 <SATA::access(unsigned long long, int, void*, bool)>
c001a95f:	83 c4 20             	add    esp,0x20
c001a962:	85 c0                	test   eax,eax
c001a964:	0f 95 c0             	setne  al
c001a967:	0f b6 c0             	movzx  eax,al
c001a96a:	5b                   	pop    ebx
c001a96b:	5e                   	pop    esi
c001a96c:	5f                   	pop    edi
c001a96d:	c3                   	ret    

c001a96e <SATA::write(unsigned long long, int, void*)>:
c001a96e:	55                   	push   ebp
c001a96f:	b8 04 00 00 00       	mov    eax,0x4
c001a974:	57                   	push   edi
c001a975:	56                   	push   esi
c001a976:	53                   	push   ebx
c001a977:	83 ec 0c             	sub    esp,0xc
c001a97a:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a97e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a982:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a985:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a989:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a98d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a993:	77 3d                	ja     c001a9d2 <SATA::write(unsigned long long, int, void*)+0x64>
c001a995:	b8 06 00 00 00       	mov    eax,0x6
c001a99a:	85 ed                	test   ebp,ebp
c001a99c:	74 34                	je     c001a9d2 <SATA::write(unsigned long long, int, void*)+0x64>
c001a99e:	c1 e3 09             	shl    ebx,0x9
c001a9a1:	01 eb                	add    ebx,ebp
c001a9a3:	89 d6                	mov    esi,edx
c001a9a5:	89 cf                	mov    edi,ecx
c001a9a7:	83 c6 01             	add    esi,0x1
c001a9aa:	83 d7 00             	adc    edi,0x0
c001a9ad:	50                   	push   eax
c001a9ae:	50                   	push   eax
c001a9af:	6a 01                	push   0x1
c001a9b1:	55                   	push   ebp
c001a9b2:	81 c5 00 02 00 00    	add    ebp,0x200
c001a9b8:	6a 01                	push   0x1
c001a9ba:	51                   	push   ecx
c001a9bb:	52                   	push   edx
c001a9bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a9c0:	e8 11 fd ff ff       	call   c001a6d6 <SATA::access(unsigned long long, int, void*, bool)>
c001a9c5:	83 c4 20             	add    esp,0x20
c001a9c8:	89 f2                	mov    edx,esi
c001a9ca:	89 f9                	mov    ecx,edi
c001a9cc:	39 dd                	cmp    ebp,ebx
c001a9ce:	75 d3                	jne    c001a9a3 <SATA::write(unsigned long long, int, void*)+0x35>
c001a9d0:	31 c0                	xor    eax,eax
c001a9d2:	83 c4 0c             	add    esp,0xc
c001a9d5:	5b                   	pop    ebx
c001a9d6:	5e                   	pop    esi
c001a9d7:	5f                   	pop    edi
c001a9d8:	5d                   	pop    ebp
c001a9d9:	c3                   	ret    

c001a9da <SATAPI::write(unsigned long long, int, void*)>:
c001a9da:	b8 03 00 00 00       	mov    eax,0x3
c001a9df:	c3                   	ret    

c001a9e0 <SATAPI::close(int, int, void*)>:
c001a9e0:	83 ec 0c             	sub    esp,0xc
c001a9e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a9e7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a9ed:	85 c0                	test   eax,eax
c001a9ef:	74 0c                	je     c001a9fd <SATAPI::close(int, int, void*)+0x1d>
c001a9f1:	83 ec 0c             	sub    esp,0xc
c001a9f4:	8b 10                	mov    edx,DWORD PTR [eax]
c001a9f6:	50                   	push   eax
c001a9f7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a9fa:	83 c4 10             	add    esp,0x10
c001a9fd:	31 c0                	xor    eax,eax
c001a9ff:	83 c4 0c             	add    esp,0xc
c001aa02:	c3                   	ret    
c001aa03:	90                   	nop

c001aa04 <SATAPI::SATAPI()>:
c001aa04:	83 ec 0c             	sub    esp,0xc
c001aa07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa0b:	83 ec 04             	sub    esp,0x4
c001aa0e:	68 00 08 00 00       	push   0x800
c001aa13:	68 68 ef 01 c0       	push   0xc001ef68
c001aa18:	50                   	push   eax
c001aa19:	e8 d0 12 ff ff       	call   c000bcee <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aa1e:	83 c4 10             	add    esp,0x10
c001aa21:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c001aa26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa2a:	89 10                	mov    DWORD PTR [eax],edx
c001aa2c:	90                   	nop
c001aa2d:	83 c4 0c             	add    esp,0xc
c001aa30:	c3                   	ret    
c001aa31:	90                   	nop

c001aa32 <SATAPI::diskRemoved()>:
c001aa32:	c3                   	ret    
c001aa33:	90                   	nop

c001aa34 <SATAPI::diskInserted()>:
c001aa34:	83 ec 18             	sub    esp,0x18
c001aa37:	68 74 ef 01 c0       	push   0xc001ef74
c001aa3c:	e8 9f fa fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001aa41:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa45:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001aa4c:	83 c4 1c             	add    esp,0x1c
c001aa4f:	c3                   	ret    

c001aa50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001aa50:	55                   	push   ebp
c001aa51:	57                   	push   edi
c001aa52:	56                   	push   esi
c001aa53:	53                   	push   ebx
c001aa54:	83 ec 38             	sub    esp,0x38
c001aa57:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001aa5b:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aa5f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001aa63:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa67:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aa6b:	68 8c ef 01 c0       	push   0xc001ef8c
c001aa70:	e8 6b fa fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001aa75:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aa7b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aa81:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa85:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aa8b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa8f:	83 c0 02             	add    eax,0x2
c001aa92:	c1 e0 07             	shl    eax,0x7
c001aa95:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aa99:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aa9d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001aaa1:	c1 e0 07             	shl    eax,0x7
c001aaa4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aaa8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aaac:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aab6:	58                   	pop    eax
c001aab7:	5a                   	pop    edx
c001aab8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001aabc:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aac2:	e8 71 ec ff ff       	call   c0019738 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aac7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aacb:	83 c4 10             	add    esp,0x10
c001aace:	b8 01 00 00 00       	mov    eax,0x1
c001aad3:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aad8:	0f 84 49 02 00 00    	je     c001ad27 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001aade:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aae8:	8b 00                	mov    eax,DWORD PTR [eax]
c001aaea:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001aaf0:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aaf6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aafa:	c1 e1 05             	shl    ecx,0x5
c001aafd:	01 c8                	add    eax,ecx
c001aaff:	8b 08                	mov    ecx,DWORD PTR [eax]
c001ab01:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001ab07:	81 c9 25 00 01 00    	or     ecx,0x10025
c001ab0d:	89 08                	mov    DWORD PTR [eax],ecx
c001ab0f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ab15:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001ab1b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001ab21:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001ab24:	8d 7b 40             	lea    edi,[ebx+0x40]
c001ab27:	50                   	push   eax
c001ab28:	68 90 00 00 00       	push   0x90
c001ab2d:	6a 00                	push   0x0
c001ab2f:	53                   	push   ebx
c001ab30:	e8 9b 59 fe ff       	call   c00004d0 <memset>
c001ab35:	b9 0c 00 00 00       	mov    ecx,0xc
c001ab3a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001ab3e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab40:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001ab46:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001ab4a:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001ab50:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001ab54:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ab58:	48                   	dec    eax
c001ab59:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ab5e:	89 c1                	mov    ecx,eax
c001ab60:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001ab66:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ab6b:	09 c8                	or     eax,ecx
c001ab6d:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001ab73:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001ab76:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001ab7d:	66 25 00 7f          	and    ax,0x7f00
c001ab81:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab85:	66 0d 27 80          	or     ax,0x8027
c001ab89:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001ab8d:	66 89 03             	mov    WORD PTR [ebx],ax
c001ab90:	89 d0                	mov    eax,edx
c001ab92:	c1 ea 18             	shr    edx,0x18
c001ab95:	c1 e8 10             	shr    eax,0x10
c001ab98:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001ab9b:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001ab9e:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001aba2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001aba5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aba9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001abac:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001abb0:	83 c4 10             	add    esp,0x10
c001abb3:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001abb7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abbb:	31 c0                	xor    eax,eax
c001abbd:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001abc3:	80 e1 88             	and    cl,0x88
c001abc6:	74 0a                	je     c001abd2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x182>
c001abc8:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001abcd:	74 0a                	je     c001abd9 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x189>
c001abcf:	40                   	inc    eax
c001abd0:	eb eb                	jmp    c001abbd <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16d>
c001abd2:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001abd7:	75 43                	jne    c001ac1c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1cc>
c001abd9:	83 ec 0c             	sub    esp,0xc
c001abdc:	68 a6 ef 01 c0       	push   0xc001efa6
c001abe1:	e8 fa f8 fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001abe6:	58                   	pop    eax
c001abe7:	5a                   	pop    edx
c001abe8:	68 bb ef 01 c0       	push   0xc001efbb
c001abed:	ff 35 24 05 02 c0    	push   DWORD PTR ds:0xc0020524
c001abf3:	e8 3e db fe ff       	call   c0008736 <VgaText::puts(char const*)>
c001abf8:	59                   	pop    ecx
c001abf9:	5b                   	pop    ebx
c001abfa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001abfe:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ac04:	e8 c9 eb ff ff       	call   c00197d2 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001ac09:	5e                   	pop    esi
c001ac0a:	5f                   	pop    edi
c001ac0b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001ac0f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001ac15:	e8 98 eb ff ff       	call   c00197b2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001ac1a:	eb 48                	jmp    c001ac64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x214>
c001ac1c:	be 01 00 00 00       	mov    esi,0x1
c001ac21:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001ac25:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001ac29:	d3 e6                	shl    esi,cl
c001ac2b:	c1 e7 07             	shl    edi,0x7
c001ac2e:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001ac34:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ac39:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ac3d:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ac43:	85 c6                	test   esi,eax
c001ac45:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001ac4b:	0f 84 a3 00 00 00    	je     c001acf4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a4>
c001ac51:	0f ba e0 1e          	bt     eax,0x1e
c001ac55:	73 1a                	jae    c001ac71 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x221>
c001ac57:	83 ec 0c             	sub    esp,0xc
c001ac5a:	68 cd ef 01 c0       	push   0xc001efcd
c001ac5f:	e8 7c f8 fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001ac64:	83 c4 10             	add    esp,0x10
c001ac67:	b8 01 00 00 00       	mov    eax,0x1
c001ac6c:	e9 b6 00 00 00       	jmp    c001ad27 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d7>
c001ac71:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001ac77:	83 f8 0d             	cmp    eax,0xd
c001ac7a:	77 0a                	ja     c001ac86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x236>
c001ac7c:	83 ec 0c             	sub    esp,0xc
c001ac7f:	68 c8 00 00 00       	push   0xc8
c001ac84:	eb 28                	jmp    c001acae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001ac86:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001ac8c:	83 f8 0d             	cmp    eax,0xd
c001ac8f:	77 0a                	ja     c001ac9b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24b>
c001ac91:	83 ec 0c             	sub    esp,0xc
c001ac94:	68 58 02 00 00       	push   0x258
c001ac99:	eb 13                	jmp    c001acae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25e>
c001ac9b:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001aca1:	83 f8 06             	cmp    eax,0x6
c001aca4:	77 10                	ja     c001acb6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x266>
c001aca6:	83 ec 0c             	sub    esp,0xc
c001aca9:	68 dc 05 00 00       	push   0x5dc
c001acae:	e8 d1 89 ff ff       	call   c0013684 <milliTenthSleep(unsigned int)>
c001acb3:	83 c4 10             	add    esp,0x10
c001acb6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001acba:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001acbd:	75 06                	jne    c001acc5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x275>
c001acbf:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001acc3:	74 15                	je     c001acda <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001acc5:	83 fb 06             	cmp    ebx,0x6
c001acc8:	77 10                	ja     c001acda <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x28a>
c001acca:	83 ec 0c             	sub    esp,0xc
c001accd:	68 c4 09 00 00       	push   0x9c4
c001acd2:	e8 ad 89 ff ff       	call   c0013684 <milliTenthSleep(unsigned int)>
c001acd7:	83 c4 10             	add    esp,0x10
c001acda:	43                   	inc    ebx
c001acdb:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001ace1:	0f 85 56 ff ff ff    	jne    c001ac3d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ed>
c001ace7:	83 ec 0c             	sub    esp,0xc
c001acea:	68 e0 ef 01 c0       	push   0xc001efe0
c001acef:	e9 6b ff ff ff       	jmp    c001ac5f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001acf4:	0f ba e0 1e          	bt     eax,0x1e
c001acf8:	73 0d                	jae    c001ad07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b7>
c001acfa:	83 ec 0c             	sub    esp,0xc
c001acfd:	68 f4 ef 01 c0       	push   0xc001eff4
c001ad02:	e9 58 ff ff ff       	jmp    c001ac5f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20f>
c001ad07:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ad0c:	74 17                	je     c001ad25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ad0e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ad13:	74 10                	je     c001ad25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001ad15:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ad1b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ad1f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ad23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad25:	31 c0                	xor    eax,eax
c001ad27:	83 c4 2c             	add    esp,0x2c
c001ad2a:	5b                   	pop    ebx
c001ad2b:	5e                   	pop    esi
c001ad2c:	5f                   	pop    edi
c001ad2d:	5d                   	pop    ebp
c001ad2e:	c3                   	ret    
c001ad2f:	90                   	nop

c001ad30 <SATAPI::eject()>:
c001ad30:	57                   	push   edi
c001ad31:	b9 03 00 00 00       	mov    ecx,0x3
c001ad36:	83 ec 18             	sub    esp,0x18
c001ad39:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ad3d:	fc                   	cld    
c001ad3e:	31 c0                	xor    eax,eax
c001ad40:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ad42:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ad47:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ad4c:	50                   	push   eax
c001ad4d:	6a 00                	push   0x0
c001ad4f:	6a 00                	push   0x0
c001ad51:	6a 00                	push   0x0
c001ad53:	6a 00                	push   0x0
c001ad55:	6a 02                	push   0x2
c001ad57:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad5b:	50                   	push   eax
c001ad5c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad60:	e8 eb fc ff ff       	call   c001aa50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ad65:	31 c0                	xor    eax,eax
c001ad67:	83 c4 38             	add    esp,0x38
c001ad6a:	5f                   	pop    edi
c001ad6b:	c3                   	ret    

c001ad6c <SATAPI::detectMedia()>:
c001ad6c:	53                   	push   ebx
c001ad6d:	83 ec 14             	sub    esp,0x14
c001ad70:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001ad74:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001ad7a:	e8 2d 27 ff ff       	call   c000d4ac <VCache::writeWriteBuffer()>
c001ad7f:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001ad85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ad89:	83 c4 18             	add    esp,0x18
c001ad8c:	5b                   	pop    ebx
c001ad8d:	e9 0a 27 ff ff       	jmp    c000d49c <VCache::invalidateReadBuffer()>

c001ad92 <SATAPI::open(int, int, void*)>:
c001ad92:	56                   	push   esi
c001ad93:	53                   	push   ebx
c001ad94:	51                   	push   ecx
c001ad95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ad99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad9d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001ada7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001adad:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001adb7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001adbb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001adc5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001adcb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001add2:	e8 be cc fe ff       	call   c0007a95 <Phys::allocatePage()>
c001add7:	89 c6                	mov    esi,eax
c001add9:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001addf:	81 c6 00 10 00 00    	add    esi,0x1000
c001ade5:	e8 ab cc fe ff       	call   c0007a95 <Phys::allocatePage()>
c001adea:	39 c6                	cmp    esi,eax
c001adec:	74 10                	je     c001adfe <SATAPI::open(int, int, void*)+0x6c>
c001adee:	83 ec 0c             	sub    esp,0xc
c001adf1:	68 09 f0 01 c0       	push   0xc001f009
c001adf6:	e8 60 53 ff ff       	call   c001015b <KePanic(char const*)>
c001adfb:	83 c4 10             	add    esp,0x10
c001adfe:	83 ec 0c             	sub    esp,0xc
c001ae01:	6a 02                	push   0x2
c001ae03:	e8 85 e4 fe ff       	call   c000928d <Virt::allocateKernelVirtualPages(int)>
c001ae08:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001ae0e:	6a 03                	push   0x3
c001ae10:	50                   	push   eax
c001ae11:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001ae17:	ff 35 d0 05 02 c0    	push   DWORD PTR ds:0xc00205d0
c001ae1d:	e8 00 eb fe ff       	call   c0009922 <VAS::mapPage(unsigned long, unsigned long, int)>
c001ae22:	83 c4 14             	add    esp,0x14
c001ae25:	68 74 01 00 00       	push   0x174
c001ae2a:	e8 8a c9 fe ff       	call   c00077b9 <malloc>
c001ae2f:	83 c4 0c             	add    esp,0xc
c001ae32:	89 c6                	mov    esi,eax
c001ae34:	6a 00                	push   0x0
c001ae36:	68 ff ff ff 7f       	push   0x7fffffff
c001ae3b:	6a 00                	push   0x0
c001ae3d:	6a 00                	push   0x0
c001ae3f:	53                   	push   ebx
c001ae40:	68 1f f0 01 c0       	push   0xc001f01f
c001ae45:	50                   	push   eax
c001ae46:	e8 67 1b ff ff       	call   c000c9b2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001ae4b:	83 c4 14             	add    esp,0x14
c001ae4e:	56                   	push   esi
c001ae4f:	e8 14 1c ff ff       	call   c000ca68 <LogicalDisk::assignDriveLetter()>
c001ae54:	5a                   	pop    edx
c001ae55:	0f be c0             	movsx  eax,al
c001ae58:	59                   	pop    ecx
c001ae59:	50                   	push   eax
c001ae5a:	68 6c ee 01 c0       	push   0xc001ee6c
c001ae5f:	e8 7c f6 fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001ae64:	58                   	pop    eax
c001ae65:	5a                   	pop    edx
c001ae66:	56                   	push   esi
c001ae67:	53                   	push   ebx
c001ae68:	e8 b3 0a ff ff       	call   c000b920 <Device::addChild(Device*)>
c001ae6d:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001ae73:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae76:	e8 db 0e ff ff       	call   c000bd56 <PhysicalDisk::startCache()>
c001ae7b:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001ae82:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ae85:	e8 e2 fe ff ff       	call   c001ad6c <SATAPI::detectMedia()>
c001ae8a:	83 c4 14             	add    esp,0x14
c001ae8d:	31 c0                	xor    eax,eax
c001ae8f:	5b                   	pop    ebx
c001ae90:	5e                   	pop    esi
c001ae91:	c3                   	ret    

c001ae92 <SATAPI::read(unsigned long long, int, void*)>:
c001ae92:	57                   	push   edi
c001ae93:	56                   	push   esi
c001ae94:	53                   	push   ebx
c001ae95:	83 ec 3c             	sub    esp,0x3c
c001ae98:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ae9c:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001aea0:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001aea4:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001aea8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001aeac:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001aeb0:	68 2d f0 01 c0       	push   0xc001f02d
c001aeb5:	e8 26 f6 fe ff       	call   c000a4e0 <Dbg::kprintf(char const*, ...)>
c001aeba:	83 c4 10             	add    esp,0x10
c001aebd:	83 fe 04             	cmp    esi,0x4
c001aec0:	7e 10                	jle    c001aed2 <SATAPI::read(unsigned long long, int, void*)+0x40>
c001aec2:	83 ec 0c             	sub    esp,0xc
c001aec5:	68 3e f0 01 c0       	push   0xc001f03e
c001aeca:	e8 8c 52 ff ff       	call   c001015b <KePanic(char const*)>
c001aecf:	83 c4 10             	add    esp,0x10
c001aed2:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001aed8:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001aede:	51                   	push   ecx
c001aedf:	50                   	push   eax
c001aee0:	83 c0 02             	add    eax,0x2
c001aee3:	c1 e0 07             	shl    eax,0x7
c001aee6:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001aeec:	50                   	push   eax
c001aeed:	52                   	push   edx
c001aeee:	e8 09 e9 ff ff       	call   c00197fc <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001aef3:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001aef7:	b9 03 00 00 00       	mov    ecx,0x3
c001aefc:	fc                   	cld    
c001aefd:	31 c0                	xor    eax,eax
c001aeff:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001af01:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001af06:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001af0b:	83 c4 0c             	add    esp,0xc
c001af0e:	6a 00                	push   0x0
c001af10:	6a 00                	push   0x0
c001af12:	6a 00                	push   0x0
c001af14:	6a 00                	push   0x0
c001af16:	6a 02                	push   0x2
c001af18:	8d 44 24 30          	lea    eax,[esp+0x30]
c001af1c:	50                   	push   eax
c001af1d:	53                   	push   ebx
c001af1e:	e8 2d fb ff ff       	call   c001aa50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001af23:	83 c4 20             	add    esp,0x20
c001af26:	85 c0                	test   eax,eax
c001af28:	75 44                	jne    c001af6e <SATAPI::read(unsigned long long, int, void*)+0xdc>
c001af2a:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001af2e:	b9 03 00 00 00       	mov    ecx,0x3
c001af33:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001af35:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af39:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001af3e:	0f c8                	bswap  eax
c001af40:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001af44:	89 f0                	mov    eax,esi
c001af46:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001af4a:	50                   	push   eax
c001af4b:	56                   	push   esi
c001af4c:	c1 e6 0b             	shl    esi,0xb
c001af4f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001af53:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af57:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001af5b:	56                   	push   esi
c001af5c:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001af60:	50                   	push   eax
c001af61:	53                   	push   ebx
c001af62:	e8 e9 fa ff ff       	call   c001aa50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001af67:	83 c4 20             	add    esp,0x20
c001af6a:	85 c0                	test   eax,eax
c001af6c:	74 14                	je     c001af82 <SATAPI::read(unsigned long long, int, void*)+0xf0>
c001af6e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af72:	83 ec 0c             	sub    esp,0xc
c001af75:	53                   	push   ebx
c001af76:	e8 f1 fd ff ff       	call   c001ad6c <SATAPI::detectMedia()>
c001af7b:	83 c4 10             	add    esp,0x10
c001af7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001af82:	83 c4 30             	add    esp,0x30
c001af85:	5b                   	pop    ebx
c001af86:	5e                   	pop    esi
c001af87:	5f                   	pop    edi
c001af88:	c3                   	ret    
c001af89:	90                   	nop

c001af8a <IOAPIC::close(int, int, void*)>:
c001af8a:	b8 00 00 00 00       	mov    eax,0x0
c001af8f:	c3                   	ret    

c001af90 <apicGetBase()>:
c001af90:	55                   	push   ebp
c001af91:	89 e5                	mov    ebp,esp
c001af93:	83 ec 18             	sub    esp,0x18
c001af96:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c001af9b:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001afa1:	83 e0 08             	and    eax,0x8
c001afa4:	84 c0                	test   al,al
c001afa6:	75 07                	jne    c001afaf <apicGetBase()+0x1f>
c001afa8:	b8 00 00 00 00       	mov    eax,0x0
c001afad:	eb 21                	jmp    c001afd0 <apicGetBase()+0x40>
c001afaf:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c001afb4:	83 ec 08             	sub    esp,0x8
c001afb7:	6a 1b                	push   0x1b
c001afb9:	50                   	push   eax
c001afba:	e8 33 be fe ff       	call   c0006df2 <Computer::rdmsr(unsigned int)>
c001afbf:	83 c4 10             	add    esp,0x10
c001afc2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001afc5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001afc8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001afcb:	25 00 00 ff ff       	and    eax,0xffff0000
c001afd0:	c9                   	leave  
c001afd1:	c3                   	ret    

c001afd2 <IOAPIC::IOAPIC()>:
c001afd2:	83 ec 0c             	sub    esp,0xc
c001afd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001afd9:	83 ec 08             	sub    esp,0x8
c001afdc:	68 a0 f0 01 c0       	push   0xc001f0a0
c001afe1:	50                   	push   eax
c001afe2:	e8 d1 0a ff ff       	call   c000bab8 <Device::Device(char const*)>
c001afe7:	83 c4 10             	add    esp,0x10
c001afea:	ba b0 f0 01 c0       	mov    edx,0xc001f0b0
c001afef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aff3:	89 10                	mov    DWORD PTR [eax],edx
c001aff5:	90                   	nop
c001aff6:	83 c4 0c             	add    esp,0xc
c001aff9:	c3                   	ret    

c001affa <apicOpen()>:
c001affa:	55                   	push   ebp
c001affb:	89 e5                	mov    ebp,esp
c001affd:	53                   	push   ebx
c001affe:	83 ec 34             	sub    esp,0x34
c001b001:	a0 c0 41 02 c0       	mov    al,ds:0xc00241c0
c001b006:	83 f0 01             	xor    eax,0x1
c001b009:	84 c0                	test   al,al
c001b00b:	0f 84 9d 00 00 00    	je     c001b0ae <apicOpen()+0xb4>
c001b011:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001b015:	a0 a0 2d 02 c0       	mov    al,ds:0xc0022da0
c001b01a:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001b01d:	0f 83 84 00 00 00    	jae    c001b0a7 <apicOpen()+0xad>
c001b023:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001b02a:	83 ec 0c             	sub    esp,0xc
c001b02d:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001b030:	e8 84 c7 fe ff       	call   c00077b9 <malloc>
c001b035:	83 c4 10             	add    esp,0x10
c001b038:	89 c3                	mov    ebx,eax
c001b03a:	83 ec 0c             	sub    esp,0xc
c001b03d:	53                   	push   ebx
c001b03e:	e8 8f ff ff ff       	call   c001afd2 <IOAPIC::IOAPIC()>
c001b043:	83 c4 10             	add    esp,0x10
c001b046:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001b049:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b04c:	25 ff 00 00 00       	and    eax,0xff
c001b051:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001b054:	89 14 85 a0 41 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbe60],edx
c001b05b:	a1 80 41 02 c0       	mov    eax,ds:0xc0024180
c001b060:	40                   	inc    eax
c001b061:	a3 80 41 02 c0       	mov    ds:0xc0024180,eax
c001b066:	a1 d8 04 02 c0       	mov    eax,ds:0xc00204d8
c001b06b:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001b071:	83 ec 08             	sub    esp,0x8
c001b074:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b077:	50                   	push   eax
c001b078:	e8 a3 08 ff ff       	call   c000b920 <Device::addChild(Device*)>
c001b07d:	83 c4 10             	add    esp,0x10
c001b080:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b083:	8b 00                	mov    eax,DWORD PTR [eax]
c001b085:	83 c0 08             	add    eax,0x8
c001b088:	8b 10                	mov    edx,DWORD PTR [eax]
c001b08a:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001b08d:	25 ff 00 00 00       	and    eax,0xff
c001b092:	6a 00                	push   0x0
c001b094:	6a 00                	push   0x0
c001b096:	50                   	push   eax
c001b097:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001b09a:	ff d2                	call   edx
c001b09c:	83 c4 10             	add    esp,0x10
c001b09f:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001b0a2:	e9 6e ff ff ff       	jmp    c001b015 <apicOpen()+0x1b>
c001b0a7:	c6 05 c0 41 02 c0 01 	mov    BYTE PTR ds:0xc00241c0,0x1
c001b0ae:	e8 dd fe ff ff       	call   c001af90 <apicGetBase()>
c001b0b3:	05 f0 00 00 00       	add    eax,0xf0
c001b0b8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b0bb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b0be:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0c0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001b0c3:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001b0ca:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001b0d1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001b0d4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001b0d7:	89 10                	mov    DWORD PTR [eax],edx
c001b0d9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001b0e0:	a1 f0 2c 02 c0       	mov    eax,ds:0xc0022cf0
c001b0e5:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001b0e8:	7d 70                	jge    c001b15a <apicOpen()+0x160>
c001b0ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b0ed:	8b 04 85 00 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd300]
c001b0f4:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b0f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b0fa:	8b 04 85 00 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd300]
c001b101:	c1 e8 08             	shr    eax,0x8
c001b104:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b108:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b10b:	8b 04 85 00 2d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd300]
c001b112:	c1 e8 18             	shr    eax,0x18
c001b115:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b118:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b11c:	75 37                	jne    c001b155 <apicOpen()+0x15b>
c001b11e:	e8 6d fe ff ff       	call   c001af90 <apicGetBase()>
c001b123:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b127:	75 07                	jne    c001b130 <apicOpen()+0x136>
c001b129:	ba 60 03 00 00       	mov    edx,0x360
c001b12e:	eb 05                	jmp    c001b135 <apicOpen()+0x13b>
c001b130:	ba 50 03 00 00       	mov    edx,0x350
c001b135:	01 d0                	add    eax,edx
c001b137:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b13a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b13d:	8b 00                	mov    eax,DWORD PTR [eax]
c001b13f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b142:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b149:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b14d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b150:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b153:	89 10                	mov    DWORD PTR [eax],edx
c001b155:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b158:	eb 86                	jmp    c001b0e0 <apicOpen()+0xe6>
c001b15a:	90                   	nop
c001b15b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b15e:	c9                   	leave  
c001b15f:	c3                   	ret    

c001b160 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b160:	55                   	push   ebp
c001b161:	89 e5                	mov    ebp,esp
c001b163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b166:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b16c:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b16f:	72 1d                	jb     c001b18e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b174:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b17a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b17d:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b183:	01 d0                	add    eax,edx
c001b185:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b188:	73 04                	jae    c001b18e <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b18a:	b0 01                	mov    al,0x1
c001b18c:	eb 02                	jmp    c001b190 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b18e:	b0 00                	mov    al,0x0
c001b190:	5d                   	pop    ebp
c001b191:	c3                   	ret    

c001b192 <IOAPIC::read(int)>:
c001b192:	55                   	push   ebp
c001b193:	89 e5                	mov    ebp,esp
c001b195:	83 ec 10             	sub    esp,0x10
c001b198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b19b:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b1a1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b1a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b1a7:	31 d2                	xor    edx,edx
c001b1a9:	88 c2                	mov    dl,al
c001b1ab:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b1ae:	89 10                	mov    DWORD PTR [eax],edx
c001b1b0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b1b3:	83 c0 10             	add    eax,0x10
c001b1b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001b1b8:	c9                   	leave  
c001b1b9:	c3                   	ret    

c001b1ba <IOAPIC::open(int, int, void*)>:
c001b1ba:	55                   	push   ebp
c001b1bb:	89 e5                	mov    ebp,esp
c001b1bd:	57                   	push   edi
c001b1be:	56                   	push   esi
c001b1bf:	53                   	push   ebx
c001b1c0:	83 ec 04             	sub    esp,0x4
c001b1c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1c6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b1c9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b1cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1d2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b1d8:	8b 14 85 e0 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd220]
c001b1df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1e2:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b1e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b1f1:	8b 14 85 60 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd1a0]
c001b1f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1fb:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b204:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b20a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b20d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b213:	89 c6                	mov    esi,eax
c001b215:	81 e6 ff 00 00 00    	and    esi,0xff
c001b21b:	89 d0                	mov    eax,edx
c001b21d:	ba 00 00 00 00       	mov    edx,0x0
c001b222:	89 c7                	mov    edi,eax
c001b224:	83 e7 ff             	and    edi,0xffffffff
c001b227:	89 f9                	mov    ecx,edi
c001b229:	89 d0                	mov    eax,edx
c001b22b:	25 ff 00 00 00       	and    eax,0xff
c001b230:	89 c3                	mov    ebx,eax
c001b232:	89 c8                	mov    eax,ecx
c001b234:	89 da                	mov    edx,ebx
c001b236:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b239:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b23c:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b240:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b244:	83 e0 00             	and    eax,0x0
c001b247:	09 d0                	or     eax,edx
c001b249:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b24d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b250:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b256:	8d 50 01             	lea    edx,[eax+0x1]
c001b259:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b25c:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b262:	31 d2                	xor    edx,edx
c001b264:	88 c2                	mov    dl,al
c001b266:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b269:	83 c2 08             	add    edx,0x8
c001b26c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b270:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b276:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b27c:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b280:	6a 01                	push   0x1
c001b282:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b285:	e8 08 ff ff ff       	call   c001b192 <IOAPIC::read(int)>
c001b28a:	83 c4 08             	add    esp,0x8
c001b28d:	c1 f8 10             	sar    eax,0x10
c001b290:	25 ff 00 00 00       	and    eax,0xff
c001b295:	8d 50 01             	lea    edx,[eax+0x1]
c001b298:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b29b:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b2a1:	b8 00 00 00 00       	mov    eax,0x0
c001b2a6:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b2a9:	5b                   	pop    ebx
c001b2aa:	5e                   	pop    esi
c001b2ab:	5f                   	pop    edi
c001b2ac:	5d                   	pop    ebp
c001b2ad:	c3                   	ret    

c001b2ae <IOAPIC::write(int, int)>:
c001b2ae:	55                   	push   ebp
c001b2af:	89 e5                	mov    ebp,esp
c001b2b1:	83 ec 10             	sub    esp,0x10
c001b2b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b2b7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b2bd:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b2c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b2c3:	31 d2                	xor    edx,edx
c001b2c5:	88 c2                	mov    dl,al
c001b2c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b2ca:	89 10                	mov    DWORD PTR [eax],edx
c001b2cc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b2cf:	8d 50 10             	lea    edx,[eax+0x10]
c001b2d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b2d5:	89 02                	mov    DWORD PTR [edx],eax
c001b2d7:	90                   	nop
c001b2d8:	c9                   	leave  
c001b2d9:	c3                   	ret    

c001b2da <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b2da:	55                   	push   ebp
c001b2db:	89 e5                	mov    ebp,esp
c001b2dd:	53                   	push   ebx
c001b2de:	83 ec 2c             	sub    esp,0x2c
c001b2e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b2e4:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b2e7:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b2ea:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b2ed:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b2f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b2f3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b2f6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b2f9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b2fc:	88 d8                	mov    al,bl
c001b2fe:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b301:	88 c8                	mov    al,cl
c001b303:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b306:	88 d0                	mov    al,dl
c001b308:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b30b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b30e:	25 ff 00 00 00       	and    eax,0xff
c001b313:	83 c0 08             	add    eax,0x8
c001b316:	01 c0                	add    eax,eax
c001b318:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b31b:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b31e:	25 ff 00 00 00       	and    eax,0xff
c001b323:	83 c0 08             	add    eax,0x8
c001b326:	01 c0                	add    eax,eax
c001b328:	40                   	inc    eax
c001b329:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b32c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b32f:	50                   	push   eax
c001b330:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b333:	e8 5a fe ff ff       	call   c001b192 <IOAPIC::read(int)>
c001b338:	83 c4 08             	add    esp,0x8
c001b33b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b33e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b345:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b348:	c1 e0 18             	shl    eax,0x18
c001b34b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b34e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b351:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b354:	52                   	push   edx
c001b355:	50                   	push   eax
c001b356:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b359:	e8 50 ff ff ff       	call   c001b2ae <IOAPIC::write(int, int)>
c001b35e:	83 c4 0c             	add    esp,0xc
c001b361:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b364:	50                   	push   eax
c001b365:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b368:	e8 25 fe ff ff       	call   c001b192 <IOAPIC::read(int)>
c001b36d:	83 c4 08             	add    esp,0x8
c001b370:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b373:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b37a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b381:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b388:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b38c:	74 09                	je     c001b397 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b38e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b395:	eb 07                	jmp    c001b39e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b397:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b39e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b3a2:	74 09                	je     c001b3ad <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b3a4:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b3ab:	eb 07                	jmp    c001b3b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b3ad:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b3b4:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b3bb:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b3be:	25 ff 00 00 00       	and    eax,0xff
c001b3c3:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b3c6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b3c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b3cc:	52                   	push   edx
c001b3cd:	50                   	push   eax
c001b3ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b3d1:	e8 d8 fe ff ff       	call   c001b2ae <IOAPIC::write(int, int)>
c001b3d6:	83 c4 0c             	add    esp,0xc
c001b3d9:	90                   	nop
c001b3da:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b3dd:	c9                   	leave  
c001b3de:	c3                   	ret    
c001b3df:	90                   	nop

c001b3e0 <APICTimer::close(int, int, void*)>:
c001b3e0:	b8 00 00 00 00       	mov    eax,0x0
c001b3e5:	c3                   	ret    
c001b3e6:	66 90                	xchg   ax,ax

c001b3e8 <apicTimerHandler(regs*, void*)>:
c001b3e8:	83 ec 0c             	sub    esp,0xc
c001b3eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3ef:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b3f1:	b8 10 27 00 00       	mov    eax,0x2710
c001b3f6:	ba 00 00 00 00       	mov    edx,0x0
c001b3fb:	f7 f1                	div    ecx
c001b3fd:	83 ec 0c             	sub    esp,0xc
c001b400:	50                   	push   eax
c001b401:	e8 c6 1d ff ff       	call   c000d1cc <timerHandler(unsigned int)>
c001b406:	83 c4 10             	add    esp,0x10
c001b409:	90                   	nop
c001b40a:	83 c4 0c             	add    esp,0xc
c001b40d:	c3                   	ret    
c001b40e:	66 90                	xchg   ax,ax

c001b410 <APICTimer::open(int, int, void*)>:
c001b410:	83 ec 0c             	sub    esp,0xc
c001b413:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b417:	8b 00                	mov    eax,DWORD PTR [eax]
c001b419:	83 c0 24             	add    eax,0x24
c001b41c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b41e:	83 ec 08             	sub    esp,0x8
c001b421:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b425:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b429:	ff d0                	call   eax
c001b42b:	83 c4 10             	add    esp,0x10
c001b42e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b432:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b436:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b43c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b440:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b444:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b44a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b44e:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b454:	83 ec 0c             	sub    esp,0xc
c001b457:	51                   	push   ecx
c001b458:	6a 01                	push   0x1
c001b45a:	68 e8 b3 01 c0       	push   0xc001b3e8
c001b45f:	52                   	push   edx
c001b460:	50                   	push   eax
c001b461:	e8 66 04 ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b466:	83 c4 20             	add    esp,0x20
c001b469:	89 c2                	mov    edx,eax
c001b46b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b46f:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b475:	b8 00 00 00 00       	mov    eax,0x0
c001b47a:	83 c4 0c             	add    esp,0xc
c001b47d:	c3                   	ret    
c001b47e:	66 90                	xchg   ax,ax

c001b480 <APICTimer::write(int)>:
c001b480:	83 ec 0c             	sub    esp,0xc
c001b483:	83 ec 0c             	sub    esp,0xc
c001b486:	68 d4 f0 01 c0       	push   0xc001f0d4
c001b48b:	e8 cb 4c ff ff       	call   c001015b <KePanic(char const*)>
c001b490:	83 c4 10             	add    esp,0x10
c001b493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b497:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b49b:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b4a1:	90                   	nop
c001b4a2:	83 c4 0c             	add    esp,0xc
c001b4a5:	c3                   	ret    
c001b4a6:	66 90                	xchg   ax,ax

c001b4a8 <APICTimer::APICTimer()>:
c001b4a8:	83 ec 0c             	sub    esp,0xc
c001b4ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4af:	83 ec 08             	sub    esp,0x8
c001b4b2:	68 e4 f0 01 c0       	push   0xc001f0e4
c001b4b7:	50                   	push   eax
c001b4b8:	e8 43 1c ff ff       	call   c000d100 <Timer::Timer(char const*)>
c001b4bd:	83 c4 10             	add    esp,0x10
c001b4c0:	ba f8 f0 01 c0       	mov    edx,0xc001f0f8
c001b4c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4c9:	89 10                	mov    DWORD PTR [eax],edx
c001b4cb:	90                   	nop
c001b4cc:	83 c4 0c             	add    esp,0xc
c001b4cf:	c3                   	ret    

c001b4d0 <PIT::write(int)>:
c001b4d0:	83 ec 10             	sub    esp,0x10
c001b4d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b4d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b4db:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b4e1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4e5:	a3 c4 41 02 c0       	mov    ds:0xc00241c4,eax
c001b4ea:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b4ef:	99                   	cdq    
c001b4f0:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b4f4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b4f8:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b4ff:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b504:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b508:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b50d:	ee                   	out    dx,al
c001b50e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b512:	25 ff 00 00 00       	and    eax,0xff
c001b517:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b51e:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b522:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b526:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b52b:	ee                   	out    dx,al
c001b52c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b530:	c1 f8 08             	sar    eax,0x8
c001b533:	25 ff 00 00 00       	and    eax,0xff
c001b538:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b53f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b543:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b547:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b54c:	ee                   	out    dx,al
c001b54d:	90                   	nop
c001b54e:	83 c4 10             	add    esp,0x10
c001b551:	c3                   	ret    
c001b552:	66 90                	xchg   ax,ax

c001b554 <pitHandler(regs*, void*)>:
c001b554:	83 ec 0c             	sub    esp,0xc
c001b557:	8b 0d c4 41 02 c0    	mov    ecx,DWORD PTR ds:0xc00241c4
c001b55d:	b8 10 27 00 00       	mov    eax,0x2710
c001b562:	99                   	cdq    
c001b563:	f7 f9                	idiv   ecx
c001b565:	83 ec 0c             	sub    esp,0xc
c001b568:	50                   	push   eax
c001b569:	e8 5e 1c ff ff       	call   c000d1cc <timerHandler(unsigned int)>
c001b56e:	83 c4 10             	add    esp,0x10
c001b571:	90                   	nop
c001b572:	83 c4 0c             	add    esp,0xc
c001b575:	c3                   	ret    
c001b576:	66 90                	xchg   ax,ax

c001b578 <PIT::open(int, int, void*)>:
c001b578:	83 ec 0c             	sub    esp,0xc
c001b57b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b57f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b581:	83 c0 24             	add    eax,0x24
c001b584:	8b 00                	mov    eax,DWORD PTR [eax]
c001b586:	83 ec 08             	sub    esp,0x8
c001b589:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b58d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b591:	ff d0                	call   eax
c001b593:	83 c4 10             	add    esp,0x10
c001b596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b59a:	83 ec 0c             	sub    esp,0xc
c001b59d:	6a 00                	push   0x0
c001b59f:	6a 01                	push   0x1
c001b5a1:	68 54 b5 01 c0       	push   0xc001b554
c001b5a6:	6a 00                	push   0x0
c001b5a8:	50                   	push   eax
c001b5a9:	e8 1e 03 ff ff       	call   c000b8cc <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b5ae:	83 c4 20             	add    esp,0x20
c001b5b1:	89 c2                	mov    edx,eax
c001b5b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5b7:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b5bd:	b8 00 00 00 00       	mov    eax,0x0
c001b5c2:	83 c4 0c             	add    esp,0xc
c001b5c5:	c3                   	ret    
c001b5c6:	66 90                	xchg   ax,ax

c001b5c8 <PIT::close(int, int, void*)>:
c001b5c8:	83 ec 0c             	sub    esp,0xc
c001b5cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5cf:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b5d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5dd:	6a 01                	push   0x1
c001b5df:	68 54 b5 01 c0       	push   0xc001b554
c001b5e4:	6a 00                	push   0x0
c001b5e6:	50                   	push   eax
c001b5e7:	e8 16 03 ff ff       	call   c000b902 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b5ec:	83 c4 10             	add    esp,0x10
c001b5ef:	b8 00 00 00 00       	mov    eax,0x0
c001b5f4:	83 c4 0c             	add    esp,0xc
c001b5f7:	c3                   	ret    

c001b5f8 <PIT::PIT()>:
c001b5f8:	83 ec 0c             	sub    esp,0xc
c001b5fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b5ff:	83 ec 08             	sub    esp,0x8
c001b602:	68 20 f1 01 c0       	push   0xc001f120
c001b607:	50                   	push   eax
c001b608:	e8 f3 1a ff ff       	call   c000d100 <Timer::Timer(char const*)>
c001b60d:	83 c4 10             	add    esp,0x10
c001b610:	ba 48 f1 01 c0       	mov    edx,0xc001f148
c001b615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b619:	89 10                	mov    DWORD PTR [eax],edx
c001b61b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b61f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b625:	31 d2                	xor    edx,edx
c001b627:	88 c2                	mov    dl,al
c001b629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b62d:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b634:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b638:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b63e:	31 d2                	xor    edx,edx
c001b640:	88 c2                	mov    dl,al
c001b642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b646:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b64b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b64f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b655:	8d 50 01             	lea    edx,[eax+0x1]
c001b658:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b65c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b662:	31 d2                	xor    edx,edx
c001b664:	88 c2                	mov    dl,al
c001b666:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b66a:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b66e:	83 e1 3f             	and    ecx,0x3f
c001b671:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b675:	90                   	nop
c001b676:	83 c4 0c             	add    esp,0xc
c001b679:	c3                   	ret    
c001b67a:	66 90                	xchg   ax,ax
c001b67c:	66 90                	xchg   ax,ax
c001b67e:	66 90                	xchg   ax,ax

c001b680 <avxDetect>:
c001b680:	b8 01 00 00 00       	mov    eax,0x1
c001b685:	0f a2                	cpuid  
c001b687:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b68d:	74 15                	je     c001b6a4 <avxDetect.noAVX>
c001b68f:	b8 01 00 00 00       	mov    eax,0x1
c001b694:	0f a2                	cpuid  
c001b696:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b69c:	74 06                	je     c001b6a4 <avxDetect.noAVX>
c001b69e:	b8 01 00 00 00       	mov    eax,0x1
c001b6a3:	c3                   	ret    

c001b6a4 <avxDetect.noAVX>:
c001b6a4:	b8 00 00 00 00       	mov    eax,0x0
c001b6a9:	c3                   	ret    

c001b6aa <avxSave>:
c001b6aa:	53                   	push   ebx
c001b6ab:	52                   	push   edx
c001b6ac:	31 c0                	xor    eax,eax
c001b6ae:	48                   	dec    eax
c001b6af:	89 c2                	mov    edx,eax
c001b6b1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b6b5:	0f ae 23             	xsave  [ebx]
c001b6b8:	5a                   	pop    edx
c001b6b9:	5b                   	pop    ebx
c001b6ba:	c3                   	ret    

c001b6bb <avxLoad>:
c001b6bb:	53                   	push   ebx
c001b6bc:	52                   	push   edx
c001b6bd:	31 c0                	xor    eax,eax
c001b6bf:	48                   	dec    eax
c001b6c0:	89 c2                	mov    edx,eax
c001b6c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b6c6:	0f ae 2b             	xrstor [ebx]
c001b6c9:	5a                   	pop    edx
c001b6ca:	5b                   	pop    ebx
c001b6cb:	c3                   	ret    

c001b6cc <avxInit>:
c001b6cc:	e8 57 02 00 00       	call   c001b928 <sseInit>
c001b6d1:	50                   	push   eax
c001b6d2:	51                   	push   ecx
c001b6d3:	0f 20 e0             	mov    eax,cr4
c001b6d6:	0d 00 00 04 00       	or     eax,0x40000
c001b6db:	0f 22 e0             	mov    cr4,eax
c001b6de:	31 c9                	xor    ecx,ecx
c001b6e0:	0f 01 d0             	xgetbv 
c001b6e3:	0d 07 00 00 00       	or     eax,0x7
c001b6e8:	0f 01 d1             	xsetbv 
c001b6eb:	59                   	pop    ecx
c001b6ec:	58                   	pop    eax
c001b6ed:	c3                   	ret    

c001b6ee <avxClose>:
c001b6ee:	c3                   	ret    

c001b6ef <wouldSheSayYes>:
c001b6ef:	c3                   	ret    
c001b6f0:	49                   	dec    ecx
c001b6f1:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b6f5:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b6f9:	75 20                	jne    c001b71b <isr0+0xb>
c001b6fb:	4e                   	dec    esi
c001b6fc:	79 61                	jns    c001b75f <isr7+0x3>
c001b6fe:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b703:	66 90                	xchg   ax,ax
c001b705:	66 90                	xchg   ax,ax
c001b707:	66 90                	xchg   ax,ax
c001b709:	66 90                	xchg   ax,ax
c001b70b:	66 90                	xchg   ax,ax
c001b70d:	66 90                	xchg   ax,ax
c001b70f:	90                   	nop

c001b710 <isr0>:
c001b710:	fa                   	cli    
c001b711:	68 00 00 00 00       	push   0x0
c001b716:	68 00 00 00 00       	push   0x0
c001b71b:	e9 44 01 00 00       	jmp    c001b864 <int_common_stub>

c001b720 <isr1>:
c001b720:	fa                   	cli    
c001b721:	6a 00                	push   0x0
c001b723:	6a 01                	push   0x1
c001b725:	e9 3a 01 00 00       	jmp    c001b864 <int_common_stub>

c001b72a <isr2>:
c001b72a:	fa                   	cli    
c001b72b:	6a 00                	push   0x0
c001b72d:	6a 02                	push   0x2
c001b72f:	e9 30 01 00 00       	jmp    c001b864 <int_common_stub>

c001b734 <isr3>:
c001b734:	fa                   	cli    
c001b735:	6a 00                	push   0x0
c001b737:	6a 03                	push   0x3
c001b739:	e9 26 01 00 00       	jmp    c001b864 <int_common_stub>

c001b73e <isr4>:
c001b73e:	fa                   	cli    
c001b73f:	6a 00                	push   0x0
c001b741:	6a 04                	push   0x4
c001b743:	e9 1c 01 00 00       	jmp    c001b864 <int_common_stub>

c001b748 <isr5>:
c001b748:	fa                   	cli    
c001b749:	6a 00                	push   0x0
c001b74b:	6a 05                	push   0x5
c001b74d:	e9 12 01 00 00       	jmp    c001b864 <int_common_stub>

c001b752 <isr6>:
c001b752:	fa                   	cli    
c001b753:	6a 00                	push   0x0
c001b755:	6a 06                	push   0x6
c001b757:	e9 08 01 00 00       	jmp    c001b864 <int_common_stub>

c001b75c <isr7>:
c001b75c:	fa                   	cli    
c001b75d:	6a 00                	push   0x0
c001b75f:	6a 07                	push   0x7
c001b761:	e9 fe 00 00 00       	jmp    c001b864 <int_common_stub>

c001b766 <isr8>:
c001b766:	fa                   	cli    
c001b767:	6a 08                	push   0x8
c001b769:	e9 f6 00 00 00       	jmp    c001b864 <int_common_stub>

c001b76e <isr9>:
c001b76e:	fa                   	cli    
c001b76f:	6a 00                	push   0x0
c001b771:	6a 09                	push   0x9
c001b773:	e9 ec 00 00 00       	jmp    c001b864 <int_common_stub>

c001b778 <isr10>:
c001b778:	fa                   	cli    
c001b779:	6a 0a                	push   0xa
c001b77b:	e9 e4 00 00 00       	jmp    c001b864 <int_common_stub>

c001b780 <isr11>:
c001b780:	fa                   	cli    
c001b781:	6a 0b                	push   0xb
c001b783:	e9 dc 00 00 00       	jmp    c001b864 <int_common_stub>

c001b788 <isr12>:
c001b788:	fa                   	cli    
c001b789:	6a 0c                	push   0xc
c001b78b:	e9 d4 00 00 00       	jmp    c001b864 <int_common_stub>

c001b790 <isr13>:
c001b790:	fa                   	cli    
c001b791:	6a 0d                	push   0xd
c001b793:	e9 cc 00 00 00       	jmp    c001b864 <int_common_stub>

c001b798 <isr14>:
c001b798:	fa                   	cli    
c001b799:	6a 0e                	push   0xe
c001b79b:	e9 c4 00 00 00       	jmp    c001b864 <int_common_stub>

c001b7a0 <isr15>:
c001b7a0:	fa                   	cli    
c001b7a1:	6a 00                	push   0x0
c001b7a3:	6a 0f                	push   0xf
c001b7a5:	e9 ba 00 00 00       	jmp    c001b864 <int_common_stub>

c001b7aa <isr16>:
c001b7aa:	fa                   	cli    
c001b7ab:	6a 00                	push   0x0
c001b7ad:	6a 10                	push   0x10
c001b7af:	e9 b0 00 00 00       	jmp    c001b864 <int_common_stub>

c001b7b4 <isr17>:
c001b7b4:	fa                   	cli    
c001b7b5:	6a 00                	push   0x0
c001b7b7:	6a 11                	push   0x11
c001b7b9:	e9 a6 00 00 00       	jmp    c001b864 <int_common_stub>

c001b7be <isr18>:
c001b7be:	fa                   	cli    
c001b7bf:	6a 00                	push   0x0
c001b7c1:	6a 12                	push   0x12
c001b7c3:	e9 9c 00 00 00       	jmp    c001b864 <int_common_stub>

c001b7c8 <irq3>:
c001b7c8:	fa                   	cli    
c001b7c9:	6a 00                	push   0x0
c001b7cb:	6a 23                	push   0x23
c001b7cd:	e9 92 00 00 00       	jmp    c001b864 <int_common_stub>

c001b7d2 <irq4>:
c001b7d2:	fa                   	cli    
c001b7d3:	6a 00                	push   0x0
c001b7d5:	6a 24                	push   0x24
c001b7d7:	e9 88 00 00 00       	jmp    c001b864 <int_common_stub>

c001b7dc <irq5>:
c001b7dc:	fa                   	cli    
c001b7dd:	6a 00                	push   0x0
c001b7df:	6a 25                	push   0x25
c001b7e1:	e9 7e 00 00 00       	jmp    c001b864 <int_common_stub>

c001b7e6 <irq6>:
c001b7e6:	fa                   	cli    
c001b7e7:	6a 00                	push   0x0
c001b7e9:	6a 26                	push   0x26
c001b7eb:	e9 74 00 00 00       	jmp    c001b864 <int_common_stub>

c001b7f0 <irq7>:
c001b7f0:	fa                   	cli    
c001b7f1:	6a 00                	push   0x0
c001b7f3:	6a 27                	push   0x27
c001b7f5:	e9 6a 00 00 00       	jmp    c001b864 <int_common_stub>

c001b7fa <irq8>:
c001b7fa:	fa                   	cli    
c001b7fb:	6a 00                	push   0x0
c001b7fd:	6a 28                	push   0x28
c001b7ff:	e9 60 00 00 00       	jmp    c001b864 <int_common_stub>

c001b804 <irq9>:
c001b804:	fa                   	cli    
c001b805:	6a 00                	push   0x0
c001b807:	6a 29                	push   0x29
c001b809:	e9 56 00 00 00       	jmp    c001b864 <int_common_stub>

c001b80e <irq10>:
c001b80e:	fa                   	cli    
c001b80f:	6a 00                	push   0x0
c001b811:	6a 2a                	push   0x2a
c001b813:	e9 4c 00 00 00       	jmp    c001b864 <int_common_stub>

c001b818 <irq11>:
c001b818:	fa                   	cli    
c001b819:	6a 00                	push   0x0
c001b81b:	6a 2b                	push   0x2b
c001b81d:	e9 42 00 00 00       	jmp    c001b864 <int_common_stub>

c001b822 <irq12>:
c001b822:	fa                   	cli    
c001b823:	6a 00                	push   0x0
c001b825:	6a 2c                	push   0x2c
c001b827:	e9 38 00 00 00       	jmp    c001b864 <int_common_stub>

c001b82c <irq13>:
c001b82c:	fa                   	cli    
c001b82d:	6a 00                	push   0x0
c001b82f:	6a 2d                	push   0x2d
c001b831:	e9 2e 00 00 00       	jmp    c001b864 <int_common_stub>

c001b836 <irq14>:
c001b836:	fa                   	cli    
c001b837:	6a 00                	push   0x0
c001b839:	6a 2e                	push   0x2e
c001b83b:	e9 24 00 00 00       	jmp    c001b864 <int_common_stub>

c001b840 <irq15>:
c001b840:	fa                   	cli    
c001b841:	6a 00                	push   0x0
c001b843:	6a 2f                	push   0x2f
c001b845:	e9 1a 00 00 00       	jmp    c001b864 <int_common_stub>

c001b84a <irq1>:
c001b84a:	fa                   	cli    
c001b84b:	6a 00                	push   0x0
c001b84d:	6a 21                	push   0x21
c001b84f:	eb 13                	jmp    c001b864 <int_common_stub>

c001b851 <irq2>:
c001b851:	fa                   	cli    
c001b852:	6a 00                	push   0x0
c001b854:	6a 22                	push   0x22
c001b856:	eb 0c                	jmp    c001b864 <int_common_stub>

c001b858 <isr96>:
c001b858:	6a 00                	push   0x0
c001b85a:	6a 60                	push   0x60
c001b85c:	fb                   	sti    
c001b85d:	eb 05                	jmp    c001b864 <int_common_stub>

c001b85f <irq0>:
c001b85f:	fa                   	cli    
c001b860:	6a 00                	push   0x0
c001b862:	6a 20                	push   0x20

c001b864 <int_common_stub>:
c001b864:	60                   	pusha  
c001b865:	1e                   	push   ds
c001b866:	06                   	push   es
c001b867:	0f a0                	push   fs
c001b869:	0f a8                	push   gs
c001b86b:	66 b8 10 00          	mov    ax,0x10
c001b86f:	66 8e d8             	mov    ds,ax
c001b872:	66 8e c0             	mov    es,ax
c001b875:	66 8e e0             	mov    fs,ax
c001b878:	66 8e e8             	mov    gs,ax
c001b87b:	54                   	push   esp
c001b87c:	fc                   	cld    
c001b87d:	e8 4a 05 ff ff       	call   c000bdcc <int_handler>
c001b882:	81 c4 04 00 00 00    	add    esp,0x4
c001b888:	0f a9                	pop    gs
c001b88a:	0f a1                	pop    fs
c001b88c:	07                   	pop    es
c001b88d:	1f                   	pop    ds
c001b88e:	61                   	popa   
c001b88f:	81 c4 08 00 00 00    	add    esp,0x8
c001b895:	cf                   	iret   

c001b896 <irq16>:
c001b896:	fa                   	cli    
c001b897:	6a 00                	push   0x0
c001b899:	6a 30                	push   0x30
c001b89b:	e9 c4 ff ff ff       	jmp    c001b864 <int_common_stub>

c001b8a0 <irq17>:
c001b8a0:	fa                   	cli    
c001b8a1:	6a 00                	push   0x0
c001b8a3:	6a 31                	push   0x31
c001b8a5:	e9 ba ff ff ff       	jmp    c001b864 <int_common_stub>

c001b8aa <irq18>:
c001b8aa:	fa                   	cli    
c001b8ab:	6a 00                	push   0x0
c001b8ad:	6a 32                	push   0x32
c001b8af:	e9 b0 ff ff ff       	jmp    c001b864 <int_common_stub>

c001b8b4 <irq19>:
c001b8b4:	fa                   	cli    
c001b8b5:	6a 00                	push   0x0
c001b8b7:	6a 33                	push   0x33
c001b8b9:	e9 a6 ff ff ff       	jmp    c001b864 <int_common_stub>

c001b8be <irq20>:
c001b8be:	fa                   	cli    
c001b8bf:	6a 00                	push   0x0
c001b8c1:	6a 34                	push   0x34
c001b8c3:	e9 9c ff ff ff       	jmp    c001b864 <int_common_stub>

c001b8c8 <irq21>:
c001b8c8:	fa                   	cli    
c001b8c9:	6a 00                	push   0x0
c001b8cb:	6a 35                	push   0x35
c001b8cd:	e9 92 ff ff ff       	jmp    c001b864 <int_common_stub>

c001b8d2 <irq22>:
c001b8d2:	fa                   	cli    
c001b8d3:	6a 00                	push   0x0
c001b8d5:	6a 36                	push   0x36
c001b8d7:	e9 88 ff ff ff       	jmp    c001b864 <int_common_stub>

c001b8dc <irq23>:
c001b8dc:	fa                   	cli    
c001b8dd:	6a 00                	push   0x0
c001b8df:	6a 37                	push   0x37
c001b8e1:	e9 7e ff ff ff       	jmp    c001b864 <int_common_stub>
c001b8e6:	66 90                	xchg   ax,ax
c001b8e8:	66 90                	xchg   ax,ax
c001b8ea:	66 90                	xchg   ax,ax
c001b8ec:	66 90                	xchg   ax,ax
c001b8ee:	66 90                	xchg   ax,ax

c001b8f0 <i386GetRDRAND>:
c001b8f0:	b9 64 00 00 00       	mov    ecx,0x64

c001b8f5 <retry>:
c001b8f5:	0f c7 f0             	rdrand eax
c001b8f8:	72 05                	jb     c001b8ff <retry.done>
c001b8fa:	e2 f9                	loop   c001b8f5 <retry>

c001b8fc <retry.fail>:
c001b8fc:	31 c0                	xor    eax,eax
c001b8fe:	c3                   	ret    

c001b8ff <retry.done>:
c001b8ff:	c3                   	ret    

c001b900 <absolutelyNoChanceInHell>:
c001b900:	b8 01 00 00 00       	mov    eax,0x1
c001b905:	0f a2                	cpuid  
c001b907:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b90d:	74 06                	je     c001b915 <sseDetect.noSSE>
c001b90f:	b8 01 00 00 00       	mov    eax,0x1
c001b914:	c3                   	ret    

c001b915 <sseDetect.noSSE>:
c001b915:	31 c0                	xor    eax,eax
c001b917:	c3                   	ret    

c001b918 <sseSave>:
c001b918:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b91c:	0f ae 00             	fxsave [eax]
c001b91f:	c3                   	ret    

c001b920 <sseLoad>:
c001b920:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b924:	0f ae 08             	fxrstor [eax]
c001b927:	c3                   	ret    

c001b928 <sseInit>:
c001b928:	e8 42 00 00 00       	call   c001b96f <x87Init>
c001b92d:	0f 20 e0             	mov    eax,cr4
c001b930:	66 0d 00 06          	or     ax,0x600
c001b934:	0f 22 e0             	mov    cr4,eax
c001b937:	c3                   	ret    

c001b938 <sseClose>:
c001b938:	c3                   	ret    
c001b939:	66 90                	xchg   ax,ax
c001b93b:	66 90                	xchg   ax,ax
c001b93d:	66 90                	xchg   ax,ax
c001b93f:	90                   	nop

c001b940 <value_37F>:
c001b940:	7f 03                	jg     c001b945 <value_37A+0x1>

c001b942 <value_37E>:
c001b942:	7e 03                	jle    c001b947 <x87Detect+0x1>

c001b944 <value_37A>:
c001b944:	7a 03                	jp     c001b949 <x87Detect+0x3>

c001b946 <x87Detect>:
c001b946:	b8 01 00 00 00       	mov    eax,0x1
c001b94b:	0f a2                	cpuid  
c001b94d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b953:	74 06                	je     c001b95b <x87Detect.nox87>
c001b955:	b8 01 00 00 00       	mov    eax,0x1
c001b95a:	c3                   	ret    

c001b95b <x87Detect.nox87>:
c001b95b:	b8 00 00 00 00       	mov    eax,0x0
c001b960:	c3                   	ret    

c001b961 <x87Save>:
c001b961:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b965:	dd 30                	fnsave [eax]
c001b967:	c3                   	ret    

c001b968 <x87Load>:
c001b968:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b96c:	dd 20                	frstor [eax]
c001b96e:	c3                   	ret    

c001b96f <x87Init>:
c001b96f:	0f 20 c0             	mov    eax,cr0
c001b972:	66 25 fb ff          	and    ax,0xfffb
c001b976:	66 0d 22 00          	or     ax,0x22
c001b97a:	0f 22 c0             	mov    cr0,eax
c001b97d:	db e3                	fninit 
c001b97f:	0f 06                	clts   
c001b981:	d9 2d 44 b9 01 c0    	fldcw  WORD PTR ds:0xc001b944
c001b987:	c3                   	ret    

c001b988 <x87Close>:
c001b988:	c3                   	ret    
c001b989:	66 90                	xchg   ax,ax
c001b98b:	90                   	nop

c001b98c <__do_global_ctors_aux>:
c001b98c:	a1 3c c9 01 c0       	mov    eax,ds:0xc001c93c
c001b991:	83 f8 ff             	cmp    eax,0xffffffff
c001b994:	74 1a                	je     c001b9b0 <__do_global_ctors_aux+0x24>
c001b996:	55                   	push   ebp
c001b997:	89 e5                	mov    ebp,esp
c001b999:	53                   	push   ebx
c001b99a:	52                   	push   edx
c001b99b:	bb 3c c9 01 c0       	mov    ebx,0xc001c93c
c001b9a0:	ff d0                	call   eax
c001b9a2:	83 eb 04             	sub    ebx,0x4
c001b9a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9a7:	83 f8 ff             	cmp    eax,0xffffffff
c001b9aa:	75 f4                	jne    c001b9a0 <__do_global_ctors_aux+0x14>
c001b9ac:	58                   	pop    eax
c001b9ad:	5b                   	pop    ebx
c001b9ae:	5d                   	pop    ebp
c001b9af:	c3                   	ret    
c001b9b0:	c3                   	ret    
c001b9b1:	66 90                	xchg   ax,ax
c001b9b3:	90                   	nop

c001b9b4 <__divdi3>:
c001b9b4:	55                   	push   ebp
c001b9b5:	57                   	push   edi
c001b9b6:	56                   	push   esi
c001b9b7:	53                   	push   ebx
c001b9b8:	83 ec 1c             	sub    esp,0x1c
c001b9bb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b9bf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b9c3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b9c6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b9ca:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b9ce:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b9d2:	85 db                	test   ebx,ebx
c001b9d4:	0f 88 8e 00 00 00    	js     c001ba68 <__divdi3+0xb4>
c001b9da:	89 dd                	mov    ebp,ebx
c001b9dc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b9e4:	89 d3                	mov    ebx,edx
c001b9e6:	85 d2                	test   edx,edx
c001b9e8:	79 0d                	jns    c001b9f7 <__divdi3+0x43>
c001b9ea:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b9ee:	f7 d8                	neg    eax
c001b9f0:	83 d2 00             	adc    edx,0x0
c001b9f3:	f7 da                	neg    edx
c001b9f5:	89 d3                	mov    ebx,edx
c001b9f7:	89 c7                	mov    edi,eax
c001b9f9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b9fc:	85 db                	test   ebx,ebx
c001b9fe:	75 48                	jne    c001ba48 <__divdi3+0x94>
c001ba00:	39 ef                	cmp    edi,ebp
c001ba02:	76 24                	jbe    c001ba28 <__divdi3+0x74>
c001ba04:	89 ea                	mov    edx,ebp
c001ba06:	f7 f7                	div    edi
c001ba08:	89 c1                	mov    ecx,eax
c001ba0a:	31 f6                	xor    esi,esi
c001ba0c:	89 c8                	mov    eax,ecx
c001ba0e:	89 f2                	mov    edx,esi
c001ba10:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ba14:	85 c9                	test   ecx,ecx
c001ba16:	74 07                	je     c001ba1f <__divdi3+0x6b>
c001ba18:	f7 d8                	neg    eax
c001ba1a:	83 d2 00             	adc    edx,0x0
c001ba1d:	f7 da                	neg    edx
c001ba1f:	83 c4 1c             	add    esp,0x1c
c001ba22:	5b                   	pop    ebx
c001ba23:	5e                   	pop    esi
c001ba24:	5f                   	pop    edi
c001ba25:	5d                   	pop    ebp
c001ba26:	c3                   	ret    
c001ba27:	90                   	nop
c001ba28:	85 ff                	test   edi,edi
c001ba2a:	75 0b                	jne    c001ba37 <__divdi3+0x83>
c001ba2c:	b8 01 00 00 00       	mov    eax,0x1
c001ba31:	31 d2                	xor    edx,edx
c001ba33:	f7 f3                	div    ebx
c001ba35:	89 c7                	mov    edi,eax
c001ba37:	31 d2                	xor    edx,edx
c001ba39:	89 e8                	mov    eax,ebp
c001ba3b:	f7 f7                	div    edi
c001ba3d:	89 c6                	mov    esi,eax
c001ba3f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba42:	f7 f7                	div    edi
c001ba44:	89 c1                	mov    ecx,eax
c001ba46:	eb c4                	jmp    c001ba0c <__divdi3+0x58>
c001ba48:	39 eb                	cmp    ebx,ebp
c001ba4a:	77 3c                	ja     c001ba88 <__divdi3+0xd4>
c001ba4c:	0f bd f3             	bsr    esi,ebx
c001ba4f:	83 f6 1f             	xor    esi,0x1f
c001ba52:	75 40                	jne    c001ba94 <__divdi3+0xe0>
c001ba54:	39 eb                	cmp    ebx,ebp
c001ba56:	72 09                	jb     c001ba61 <__divdi3+0xad>
c001ba58:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ba5b:	0f 87 97 00 00 00    	ja     c001baf8 <__divdi3+0x144>
c001ba61:	b9 01 00 00 00       	mov    ecx,0x1
c001ba66:	eb a4                	jmp    c001ba0c <__divdi3+0x58>
c001ba68:	f7 d9                	neg    ecx
c001ba6a:	83 d3 00             	adc    ebx,0x0
c001ba6d:	f7 db                	neg    ebx
c001ba6f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001ba72:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001ba76:	89 dd                	mov    ebp,ebx
c001ba78:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001ba80:	e9 5f ff ff ff       	jmp    c001b9e4 <__divdi3+0x30>
c001ba85:	8d 76 00             	lea    esi,[esi+0x0]
c001ba88:	31 f6                	xor    esi,esi
c001ba8a:	31 c9                	xor    ecx,ecx
c001ba8c:	e9 7b ff ff ff       	jmp    c001ba0c <__divdi3+0x58>
c001ba91:	8d 76 00             	lea    esi,[esi+0x0]
c001ba94:	b8 20 00 00 00       	mov    eax,0x20
c001ba99:	29 f0                	sub    eax,esi
c001ba9b:	89 f1                	mov    ecx,esi
c001ba9d:	d3 e3                	shl    ebx,cl
c001ba9f:	89 fa                	mov    edx,edi
c001baa1:	88 c1                	mov    cl,al
c001baa3:	d3 ea                	shr    edx,cl
c001baa5:	09 da                	or     edx,ebx
c001baa7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001baab:	89 f1                	mov    ecx,esi
c001baad:	d3 e7                	shl    edi,cl
c001baaf:	89 eb                	mov    ebx,ebp
c001bab1:	88 c1                	mov    cl,al
c001bab3:	d3 eb                	shr    ebx,cl
c001bab5:	89 f1                	mov    ecx,esi
c001bab7:	d3 e5                	shl    ebp,cl
c001bab9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001babc:	88 c1                	mov    cl,al
c001babe:	d3 ea                	shr    edx,cl
c001bac0:	09 d5                	or     ebp,edx
c001bac2:	89 e8                	mov    eax,ebp
c001bac4:	89 da                	mov    edx,ebx
c001bac6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001baca:	89 d3                	mov    ebx,edx
c001bacc:	89 c5                	mov    ebp,eax
c001bace:	f7 e7                	mul    edi
c001bad0:	39 d3                	cmp    ebx,edx
c001bad2:	72 18                	jb     c001baec <__divdi3+0x138>
c001bad4:	74 0a                	je     c001bae0 <__divdi3+0x12c>
c001bad6:	89 e9                	mov    ecx,ebp
c001bad8:	31 f6                	xor    esi,esi
c001bada:	e9 2d ff ff ff       	jmp    c001ba0c <__divdi3+0x58>
c001badf:	90                   	nop
c001bae0:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001bae3:	89 f1                	mov    ecx,esi
c001bae5:	d3 e7                	shl    edi,cl
c001bae7:	39 c7                	cmp    edi,eax
c001bae9:	73 eb                	jae    c001bad6 <__divdi3+0x122>
c001baeb:	90                   	nop
c001baec:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001baef:	31 f6                	xor    esi,esi
c001baf1:	e9 16 ff ff ff       	jmp    c001ba0c <__divdi3+0x58>
c001baf6:	66 90                	xchg   ax,ax
c001baf8:	31 c9                	xor    ecx,ecx
c001bafa:	e9 0d ff ff ff       	jmp    c001ba0c <__divdi3+0x58>
c001baff:	90                   	nop

c001bb00 <__moddi3>:
c001bb00:	55                   	push   ebp
c001bb01:	57                   	push   edi
c001bb02:	56                   	push   esi
c001bb03:	53                   	push   ebx
c001bb04:	83 ec 2c             	sub    esp,0x2c
c001bb07:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001bb0b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001bb0f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001bb13:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001bb17:	85 db                	test   ebx,ebx
c001bb19:	0f 88 85 00 00 00    	js     c001bba4 <__moddi3+0xa4>
c001bb1f:	89 de                	mov    esi,ebx
c001bb21:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001bb29:	89 d7                	mov    edi,edx
c001bb2b:	85 d2                	test   edx,edx
c001bb2d:	79 09                	jns    c001bb38 <__moddi3+0x38>
c001bb2f:	f7 d8                	neg    eax
c001bb31:	83 d2 00             	adc    edx,0x0
c001bb34:	f7 da                	neg    edx
c001bb36:	89 d7                	mov    edi,edx
c001bb38:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb3c:	89 cd                	mov    ebp,ecx
c001bb3e:	85 ff                	test   edi,edi
c001bb40:	75 52                	jne    c001bb94 <__moddi3+0x94>
c001bb42:	89 c3                	mov    ebx,eax
c001bb44:	39 f0                	cmp    eax,esi
c001bb46:	76 24                	jbe    c001bb6c <__moddi3+0x6c>
c001bb48:	89 c8                	mov    eax,ecx
c001bb4a:	89 f2                	mov    edx,esi
c001bb4c:	f7 f3                	div    ebx
c001bb4e:	89 d6                	mov    esi,edx
c001bb50:	89 f0                	mov    eax,esi
c001bb52:	31 d2                	xor    edx,edx
c001bb54:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001bb58:	85 c9                	test   ecx,ecx
c001bb5a:	74 07                	je     c001bb63 <__moddi3+0x63>
c001bb5c:	f7 d8                	neg    eax
c001bb5e:	83 d2 00             	adc    edx,0x0
c001bb61:	f7 da                	neg    edx
c001bb63:	83 c4 2c             	add    esp,0x2c
c001bb66:	5b                   	pop    ebx
c001bb67:	5e                   	pop    esi
c001bb68:	5f                   	pop    edi
c001bb69:	5d                   	pop    ebp
c001bb6a:	c3                   	ret    
c001bb6b:	90                   	nop
c001bb6c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001bb70:	85 db                	test   ebx,ebx
c001bb72:	75 0d                	jne    c001bb81 <__moddi3+0x81>
c001bb74:	b8 01 00 00 00       	mov    eax,0x1
c001bb79:	31 d2                	xor    edx,edx
c001bb7b:	f7 f7                	div    edi
c001bb7d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bb81:	89 f0                	mov    eax,esi
c001bb83:	31 d2                	xor    edx,edx
c001bb85:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb89:	f7 f7                	div    edi
c001bb8b:	89 e8                	mov    eax,ebp
c001bb8d:	f7 f7                	div    edi
c001bb8f:	89 d6                	mov    esi,edx
c001bb91:	eb bd                	jmp    c001bb50 <__moddi3+0x50>
c001bb93:	90                   	nop
c001bb94:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bb98:	39 f7                	cmp    edi,esi
c001bb9a:	76 20                	jbe    c001bbbc <__moddi3+0xbc>
c001bb9c:	89 c8                	mov    eax,ecx
c001bb9e:	89 f2                	mov    edx,esi
c001bba0:	eb b2                	jmp    c001bb54 <__moddi3+0x54>
c001bba2:	66 90                	xchg   ax,ax
c001bba4:	f7 d9                	neg    ecx
c001bba6:	83 d3 00             	adc    ebx,0x0
c001bba9:	f7 db                	neg    ebx
c001bbab:	89 de                	mov    esi,ebx
c001bbad:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bbb5:	e9 6f ff ff ff       	jmp    c001bb29 <__moddi3+0x29>
c001bbba:	66 90                	xchg   ax,ax
c001bbbc:	0f bd c7             	bsr    eax,edi
c001bbbf:	83 f0 1f             	xor    eax,0x1f
c001bbc2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bbc6:	75 24                	jne    c001bbec <__moddi3+0xec>
c001bbc8:	39 f7                	cmp    edi,esi
c001bbca:	72 06                	jb     c001bbd2 <__moddi3+0xd2>
c001bbcc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001bbd0:	77 0c                	ja     c001bbde <__moddi3+0xde>
c001bbd2:	89 e9                	mov    ecx,ebp
c001bbd4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001bbd8:	19 fe                	sbb    esi,edi
c001bbda:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bbde:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bbe2:	89 f2                	mov    edx,esi
c001bbe4:	e9 6b ff ff ff       	jmp    c001bb54 <__moddi3+0x54>
c001bbe9:	8d 76 00             	lea    esi,[esi+0x0]
c001bbec:	b8 20 00 00 00       	mov    eax,0x20
c001bbf1:	89 c2                	mov    edx,eax
c001bbf3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bbf7:	29 da                	sub    edx,ebx
c001bbf9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bbfd:	88 d9                	mov    cl,bl
c001bbff:	d3 e7                	shl    edi,cl
c001bc01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc05:	88 d1                	mov    cl,dl
c001bc07:	d3 e8                	shr    eax,cl
c001bc09:	09 c7                	or     edi,eax
c001bc0b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bc0f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bc13:	89 d8                	mov    eax,ebx
c001bc15:	88 d9                	mov    cl,bl
c001bc17:	d3 e7                	shl    edi,cl
c001bc19:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bc1d:	89 f3                	mov    ebx,esi
c001bc1f:	88 d1                	mov    cl,dl
c001bc21:	d3 eb                	shr    ebx,cl
c001bc23:	89 c7                	mov    edi,eax
c001bc25:	88 c1                	mov    cl,al
c001bc27:	d3 e6                	shl    esi,cl
c001bc29:	89 e8                	mov    eax,ebp
c001bc2b:	88 d1                	mov    cl,dl
c001bc2d:	d3 e8                	shr    eax,cl
c001bc2f:	09 f0                	or     eax,esi
c001bc31:	89 f9                	mov    ecx,edi
c001bc33:	d3 e5                	shl    ebp,cl
c001bc35:	89 da                	mov    edx,ebx
c001bc37:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001bc3b:	89 d3                	mov    ebx,edx
c001bc3d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bc41:	89 c6                	mov    esi,eax
c001bc43:	89 d1                	mov    ecx,edx
c001bc45:	39 d3                	cmp    ebx,edx
c001bc47:	72 27                	jb     c001bc70 <__moddi3+0x170>
c001bc49:	74 21                	je     c001bc6c <__moddi3+0x16c>
c001bc4b:	29 f5                	sub    ebp,esi
c001bc4d:	19 cb                	sbb    ebx,ecx
c001bc4f:	89 de                	mov    esi,ebx
c001bc51:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001bc55:	d3 e6                	shl    esi,cl
c001bc57:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bc5b:	89 f9                	mov    ecx,edi
c001bc5d:	d3 ed                	shr    ebp,cl
c001bc5f:	09 ee                	or     esi,ebp
c001bc61:	89 f0                	mov    eax,esi
c001bc63:	d3 eb                	shr    ebx,cl
c001bc65:	89 da                	mov    edx,ebx
c001bc67:	e9 e8 fe ff ff       	jmp    c001bb54 <__moddi3+0x54>
c001bc6c:	39 c5                	cmp    ebp,eax
c001bc6e:	73 db                	jae    c001bc4b <__moddi3+0x14b>
c001bc70:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bc74:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001bc78:	89 d1                	mov    ecx,edx
c001bc7a:	89 c6                	mov    esi,eax
c001bc7c:	eb cd                	jmp    c001bc4b <__moddi3+0x14b>
c001bc7e:	66 90                	xchg   ax,ax

c001bc80 <__udivdi3>:
c001bc80:	55                   	push   ebp
c001bc81:	57                   	push   edi
c001bc82:	56                   	push   esi
c001bc83:	53                   	push   ebx
c001bc84:	83 ec 1c             	sub    esp,0x1c
c001bc87:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001bc8b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bc8f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bc93:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bc97:	85 d2                	test   edx,edx
c001bc99:	75 41                	jne    c001bcdc <__udivdi3+0x5c>
c001bc9b:	39 f7                	cmp    edi,esi
c001bc9d:	76 15                	jbe    c001bcb4 <__udivdi3+0x34>
c001bc9f:	89 e8                	mov    eax,ebp
c001bca1:	89 f2                	mov    edx,esi
c001bca3:	f7 f7                	div    edi
c001bca5:	31 db                	xor    ebx,ebx
c001bca7:	89 da                	mov    edx,ebx
c001bca9:	83 c4 1c             	add    esp,0x1c
c001bcac:	5b                   	pop    ebx
c001bcad:	5e                   	pop    esi
c001bcae:	5f                   	pop    edi
c001bcaf:	5d                   	pop    ebp
c001bcb0:	c3                   	ret    
c001bcb1:	8d 76 00             	lea    esi,[esi+0x0]
c001bcb4:	89 f9                	mov    ecx,edi
c001bcb6:	85 ff                	test   edi,edi
c001bcb8:	75 0b                	jne    c001bcc5 <__udivdi3+0x45>
c001bcba:	b8 01 00 00 00       	mov    eax,0x1
c001bcbf:	31 d2                	xor    edx,edx
c001bcc1:	f7 f7                	div    edi
c001bcc3:	89 c1                	mov    ecx,eax
c001bcc5:	31 d2                	xor    edx,edx
c001bcc7:	89 f0                	mov    eax,esi
c001bcc9:	f7 f1                	div    ecx
c001bccb:	89 c3                	mov    ebx,eax
c001bccd:	89 e8                	mov    eax,ebp
c001bccf:	f7 f1                	div    ecx
c001bcd1:	89 da                	mov    edx,ebx
c001bcd3:	83 c4 1c             	add    esp,0x1c
c001bcd6:	5b                   	pop    ebx
c001bcd7:	5e                   	pop    esi
c001bcd8:	5f                   	pop    edi
c001bcd9:	5d                   	pop    ebp
c001bcda:	c3                   	ret    
c001bcdb:	90                   	nop
c001bcdc:	39 f2                	cmp    edx,esi
c001bcde:	77 1c                	ja     c001bcfc <__udivdi3+0x7c>
c001bce0:	0f bd da             	bsr    ebx,edx
c001bce3:	83 f3 1f             	xor    ebx,0x1f
c001bce6:	75 24                	jne    c001bd0c <__udivdi3+0x8c>
c001bce8:	39 f2                	cmp    edx,esi
c001bcea:	72 08                	jb     c001bcf4 <__udivdi3+0x74>
c001bcec:	39 ef                	cmp    edi,ebp
c001bcee:	0f 87 84 00 00 00    	ja     c001bd78 <__udivdi3+0xf8>
c001bcf4:	b8 01 00 00 00       	mov    eax,0x1
c001bcf9:	eb ac                	jmp    c001bca7 <__udivdi3+0x27>
c001bcfb:	90                   	nop
c001bcfc:	31 db                	xor    ebx,ebx
c001bcfe:	31 c0                	xor    eax,eax
c001bd00:	89 da                	mov    edx,ebx
c001bd02:	83 c4 1c             	add    esp,0x1c
c001bd05:	5b                   	pop    ebx
c001bd06:	5e                   	pop    esi
c001bd07:	5f                   	pop    edi
c001bd08:	5d                   	pop    ebp
c001bd09:	c3                   	ret    
c001bd0a:	66 90                	xchg   ax,ax
c001bd0c:	b8 20 00 00 00       	mov    eax,0x20
c001bd11:	29 d8                	sub    eax,ebx
c001bd13:	88 d9                	mov    cl,bl
c001bd15:	d3 e2                	shl    edx,cl
c001bd17:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bd1b:	89 fa                	mov    edx,edi
c001bd1d:	88 c1                	mov    cl,al
c001bd1f:	d3 ea                	shr    edx,cl
c001bd21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bd25:	09 d1                	or     ecx,edx
c001bd27:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bd2b:	88 d9                	mov    cl,bl
c001bd2d:	d3 e7                	shl    edi,cl
c001bd2f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bd33:	89 f7                	mov    edi,esi
c001bd35:	88 c1                	mov    cl,al
c001bd37:	d3 ef                	shr    edi,cl
c001bd39:	88 d9                	mov    cl,bl
c001bd3b:	d3 e6                	shl    esi,cl
c001bd3d:	89 ea                	mov    edx,ebp
c001bd3f:	88 c1                	mov    cl,al
c001bd41:	d3 ea                	shr    edx,cl
c001bd43:	09 d6                	or     esi,edx
c001bd45:	89 f0                	mov    eax,esi
c001bd47:	89 fa                	mov    edx,edi
c001bd49:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bd4d:	89 d7                	mov    edi,edx
c001bd4f:	89 c6                	mov    esi,eax
c001bd51:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bd55:	39 d7                	cmp    edi,edx
c001bd57:	72 13                	jb     c001bd6c <__udivdi3+0xec>
c001bd59:	74 09                	je     c001bd64 <__udivdi3+0xe4>
c001bd5b:	89 f0                	mov    eax,esi
c001bd5d:	31 db                	xor    ebx,ebx
c001bd5f:	e9 43 ff ff ff       	jmp    c001bca7 <__udivdi3+0x27>
c001bd64:	88 d9                	mov    cl,bl
c001bd66:	d3 e5                	shl    ebp,cl
c001bd68:	39 c5                	cmp    ebp,eax
c001bd6a:	73 ef                	jae    c001bd5b <__udivdi3+0xdb>
c001bd6c:	8d 46 ff             	lea    eax,[esi-0x1]
c001bd6f:	31 db                	xor    ebx,ebx
c001bd71:	e9 31 ff ff ff       	jmp    c001bca7 <__udivdi3+0x27>
c001bd76:	66 90                	xchg   ax,ax
c001bd78:	31 c0                	xor    eax,eax
c001bd7a:	e9 28 ff ff ff       	jmp    c001bca7 <__udivdi3+0x27>
c001bd7f:	90                   	nop

c001bd80 <__umoddi3>:
c001bd80:	55                   	push   ebp
c001bd81:	57                   	push   edi
c001bd82:	56                   	push   esi
c001bd83:	53                   	push   ebx
c001bd84:	83 ec 1c             	sub    esp,0x1c
c001bd87:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bd8b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bd8f:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bd93:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bd97:	89 da                	mov    edx,ebx
c001bd99:	85 c0                	test   eax,eax
c001bd9b:	75 37                	jne    c001bdd4 <__umoddi3+0x54>
c001bd9d:	39 df                	cmp    edi,ebx
c001bd9f:	76 13                	jbe    c001bdb4 <__umoddi3+0x34>
c001bda1:	89 f0                	mov    eax,esi
c001bda3:	f7 f7                	div    edi
c001bda5:	89 d0                	mov    eax,edx
c001bda7:	31 d2                	xor    edx,edx
c001bda9:	83 c4 1c             	add    esp,0x1c
c001bdac:	5b                   	pop    ebx
c001bdad:	5e                   	pop    esi
c001bdae:	5f                   	pop    edi
c001bdaf:	5d                   	pop    ebp
c001bdb0:	c3                   	ret    
c001bdb1:	8d 76 00             	lea    esi,[esi+0x0]
c001bdb4:	89 fd                	mov    ebp,edi
c001bdb6:	85 ff                	test   edi,edi
c001bdb8:	75 0b                	jne    c001bdc5 <__umoddi3+0x45>
c001bdba:	b8 01 00 00 00       	mov    eax,0x1
c001bdbf:	31 d2                	xor    edx,edx
c001bdc1:	f7 f7                	div    edi
c001bdc3:	89 c5                	mov    ebp,eax
c001bdc5:	89 d8                	mov    eax,ebx
c001bdc7:	31 d2                	xor    edx,edx
c001bdc9:	f7 f5                	div    ebp
c001bdcb:	89 f0                	mov    eax,esi
c001bdcd:	f7 f5                	div    ebp
c001bdcf:	89 d0                	mov    eax,edx
c001bdd1:	eb d4                	jmp    c001bda7 <__umoddi3+0x27>
c001bdd3:	90                   	nop
c001bdd4:	89 f1                	mov    ecx,esi
c001bdd6:	39 d8                	cmp    eax,ebx
c001bdd8:	76 0a                	jbe    c001bde4 <__umoddi3+0x64>
c001bdda:	89 f0                	mov    eax,esi
c001bddc:	83 c4 1c             	add    esp,0x1c
c001bddf:	5b                   	pop    ebx
c001bde0:	5e                   	pop    esi
c001bde1:	5f                   	pop    edi
c001bde2:	5d                   	pop    ebp
c001bde3:	c3                   	ret    
c001bde4:	0f bd e8             	bsr    ebp,eax
c001bde7:	83 f5 1f             	xor    ebp,0x1f
c001bdea:	75 1c                	jne    c001be08 <__umoddi3+0x88>
c001bdec:	39 d8                	cmp    eax,ebx
c001bdee:	72 04                	jb     c001bdf4 <__umoddi3+0x74>
c001bdf0:	39 f7                	cmp    edi,esi
c001bdf2:	77 08                	ja     c001bdfc <__umoddi3+0x7c>
c001bdf4:	89 da                	mov    edx,ebx
c001bdf6:	29 fe                	sub    esi,edi
c001bdf8:	19 c2                	sbb    edx,eax
c001bdfa:	89 f1                	mov    ecx,esi
c001bdfc:	89 c8                	mov    eax,ecx
c001bdfe:	83 c4 1c             	add    esp,0x1c
c001be01:	5b                   	pop    ebx
c001be02:	5e                   	pop    esi
c001be03:	5f                   	pop    edi
c001be04:	5d                   	pop    ebp
c001be05:	c3                   	ret    
c001be06:	66 90                	xchg   ax,ax
c001be08:	ba 20 00 00 00       	mov    edx,0x20
c001be0d:	29 ea                	sub    edx,ebp
c001be0f:	89 e9                	mov    ecx,ebp
c001be11:	d3 e0                	shl    eax,cl
c001be13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001be17:	89 f8                	mov    eax,edi
c001be19:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001be1d:	88 d1                	mov    cl,dl
c001be1f:	d3 e8                	shr    eax,cl
c001be21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001be25:	09 c1                	or     ecx,eax
c001be27:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001be2b:	89 e9                	mov    ecx,ebp
c001be2d:	d3 e7                	shl    edi,cl
c001be2f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001be33:	89 d8                	mov    eax,ebx
c001be35:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001be39:	88 d1                	mov    cl,dl
c001be3b:	d3 e8                	shr    eax,cl
c001be3d:	89 c7                	mov    edi,eax
c001be3f:	89 e9                	mov    ecx,ebp
c001be41:	d3 e3                	shl    ebx,cl
c001be43:	89 f0                	mov    eax,esi
c001be45:	88 d1                	mov    cl,dl
c001be47:	d3 e8                	shr    eax,cl
c001be49:	09 d8                	or     eax,ebx
c001be4b:	89 e9                	mov    ecx,ebp
c001be4d:	d3 e6                	shl    esi,cl
c001be4f:	89 f3                	mov    ebx,esi
c001be51:	89 fa                	mov    edx,edi
c001be53:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001be57:	89 d1                	mov    ecx,edx
c001be59:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001be5d:	89 c6                	mov    esi,eax
c001be5f:	89 d7                	mov    edi,edx
c001be61:	39 d1                	cmp    ecx,edx
c001be63:	72 27                	jb     c001be8c <__umoddi3+0x10c>
c001be65:	74 21                	je     c001be88 <__umoddi3+0x108>
c001be67:	89 ca                	mov    edx,ecx
c001be69:	29 f3                	sub    ebx,esi
c001be6b:	19 fa                	sbb    edx,edi
c001be6d:	89 d0                	mov    eax,edx
c001be6f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001be73:	d3 e0                	shl    eax,cl
c001be75:	89 e9                	mov    ecx,ebp
c001be77:	d3 eb                	shr    ebx,cl
c001be79:	09 d8                	or     eax,ebx
c001be7b:	d3 ea                	shr    edx,cl
c001be7d:	83 c4 1c             	add    esp,0x1c
c001be80:	5b                   	pop    ebx
c001be81:	5e                   	pop    esi
c001be82:	5f                   	pop    edi
c001be83:	5d                   	pop    ebp
c001be84:	c3                   	ret    
c001be85:	8d 76 00             	lea    esi,[esi+0x0]
c001be88:	39 c3                	cmp    ebx,eax
c001be8a:	73 db                	jae    c001be67 <__umoddi3+0xe7>
c001be8c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001be90:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001be94:	89 d7                	mov    edi,edx
c001be96:	89 c6                	mov    esi,eax
c001be98:	eb cd                	jmp    c001be67 <__umoddi3+0xe7>

Disassembly of section .init:

c001be9a <_init>:
c001be9a:	55                   	push   ebp
c001be9b:	89 e5                	mov    ebp,esp
c001be9d:	e8 52 42 fe ff       	call   c00000f4 <frame_dummy>
c001bea2:	e8 e5 fa ff ff       	call   c001b98c <__do_global_ctors_aux>
c001bea7:	5d                   	pop    ebp
c001bea8:	c3                   	ret    

Disassembly of section .fini:

c001bea9 <_fini>:
c001bea9:	55                   	push   ebp
c001beaa:	89 e5                	mov    ebp,esp
c001beac:	e8 d3 41 fe ff       	call   c0000084 <__do_global_dtors_aux>
c001beb1:	5d                   	pop    ebp
c001beb2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001beb4 <Computer::~Computer()>:
c001beb4:	83 ec 0c             	sub    esp,0xc
c001beb7:	ba 78 d1 01 c0       	mov    edx,0xc001d178
c001bebc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec0:	89 10                	mov    DWORD PTR [eax],edx
c001bec2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec6:	83 ec 0c             	sub    esp,0xc
c001bec9:	50                   	push   eax
c001beca:	e8 53 f9 fe ff       	call   c000b822 <Device::~Device()>
c001becf:	83 c4 10             	add    esp,0x10
c001bed2:	90                   	nop
c001bed3:	83 c4 0c             	add    esp,0xc
c001bed6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001bed8 <Computer::~Computer()>:
c001bed8:	83 ec 0c             	sub    esp,0xc
c001bedb:	83 ec 0c             	sub    esp,0xc
c001bede:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bee2:	e8 cd ff ff ff       	call   c001beb4 <Computer::~Computer()>
c001bee7:	83 c4 10             	add    esp,0x10
c001beea:	83 ec 08             	sub    esp,0x8
c001beed:	68 70 01 00 00       	push   0x170
c001bef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001bef6:	e8 ef e4 fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001befb:	83 c4 10             	add    esp,0x10
c001befe:	83 c4 0c             	add    esp,0xc
c001bf01:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001bf02 <idleCommon()>:
c001bf02:	83 ec 0c             	sub    esp,0xc
c001bf05:	fa                   	cli    
c001bf06:	ff 05 88 37 02 c0    	inc    DWORD PTR ds:0xc0023788
c001bf0c:	e8 73 74 ff ff       	call   c0013384 <schedule()>
c001bf11:	a1 88 37 02 c0       	mov    eax,ds:0xc0023788
c001bf16:	48                   	dec    eax
c001bf17:	a3 88 37 02 c0       	mov    ds:0xc0023788,eax
c001bf1c:	75 01                	jne    c001bf1f <idleCommon()+0x1d>
c001bf1e:	fb                   	sti    
c001bf1f:	83 c4 0c             	add    esp,0xc
c001bf22:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001bf24 <LinkedList<UnixFile>::~LinkedList()>:
c001bf24:	90                   	nop
c001bf25:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001bf26 <LinkedList<UnixFile>::LinkedList()>:
c001bf26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf2a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf34:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf3b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf3f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bf50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bf5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf66:	90                   	nop
c001bf67:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001bf68 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001bf68:	83 ec 0c             	sub    esp,0xc
c001bf6b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001bf70:	75 10                	jne    c001bf82 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001bf72:	83 ec 0c             	sub    esp,0xc
c001bf75:	68 d8 d3 01 c0       	push   0xc001d3d8
c001bf7a:	e8 dc 41 ff ff       	call   c001015b <KePanic(char const*)>
c001bf7f:	83 c4 10             	add    esp,0x10
c001bf82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf86:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf88:	85 c0                	test   eax,eax
c001bf8a:	74 34                	je     c001bfc0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bf8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf93:	85 c0                	test   eax,eax
c001bf95:	74 29                	je     c001bfc0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001bf97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf9b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf9e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfa2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bfa5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bfb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfb7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bfbe:	eb 65                	jmp    c001c025 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bfc0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfc4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfc6:	85 c0                	test   eax,eax
c001bfc8:	75 4b                	jne    c001c015 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bfca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bfd1:	85 c0                	test   eax,eax
c001bfd3:	75 40                	jne    c001c015 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bfd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfd9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfdd:	89 10                	mov    DWORD PTR [eax],edx
c001bfdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfe3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bfe7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bfea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bff1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bffc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfff:	85 c0                	test   eax,eax
c001c001:	74 22                	je     c001c025 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c003:	83 ec 0c             	sub    esp,0xc
c001c006:	68 fa d3 01 c0       	push   0xc001d3fa
c001c00b:	e8 4b 41 ff ff       	call   c001015b <KePanic(char const*)>
c001c010:	83 c4 10             	add    esp,0x10
c001c013:	eb 10                	jmp    c001c025 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001c015:	83 ec 0c             	sub    esp,0xc
c001c018:	68 04 d4 01 c0       	push   0xc001d404
c001c01d:	e8 39 41 ff ff       	call   c001015b <KePanic(char const*)>
c001c022:	83 c4 10             	add    esp,0x10
c001c025:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c029:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c02c:	8d 50 01             	lea    edx,[eax+0x1]
c001c02f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c033:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c036:	90                   	nop
c001c037:	83 c4 0c             	add    esp,0xc
c001c03a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001c03c <LinkedList<UnixFile>::getFirstElement()>:
c001c03c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c040:	8b 00                	mov    eax,DWORD PTR [eax]
c001c042:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001c044 <LinkedList<UnixFile>::removeFirst()>:
c001c044:	83 ec 0c             	sub    esp,0xc
c001c047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c04b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c04d:	85 c0                	test   eax,eax
c001c04f:	75 12                	jne    c001c063 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001c051:	83 ec 0c             	sub    esp,0xc
c001c054:	68 10 d4 01 c0       	push   0xc001d410
c001c059:	e8 fd 40 ff ff       	call   c001015b <KePanic(char const*)>
c001c05e:	83 c4 10             	add    esp,0x10
c001c061:	eb 7e                	jmp    c001c0e1 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001c063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c067:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c06a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c06d:	85 c0                	test   eax,eax
c001c06f:	74 10                	je     c001c081 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001c071:	83 ec 0c             	sub    esp,0xc
c001c074:	68 5b d4 01 c0       	push   0xc001d45b
c001c079:	e8 dd 40 ff ff       	call   c001015b <KePanic(char const*)>
c001c07e:	83 c4 10             	add    esp,0x10
c001c081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c085:	8b 00                	mov    eax,DWORD PTR [eax]
c001c087:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c08a:	85 c0                	test   eax,eax
c001c08c:	75 33                	jne    c001c0c1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001c08e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c092:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c09c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c0a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0aa:	83 f8 01             	cmp    eax,0x1
c001c0ad:	74 21                	je     c001c0d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c0af:	83 ec 0c             	sub    esp,0xc
c001c0b2:	68 34 d4 01 c0       	push   0xc001d434
c001c0b7:	e8 9f 40 ff ff       	call   c001015b <KePanic(char const*)>
c001c0bc:	83 c4 10             	add    esp,0x10
c001c0bf:	eb 0f                	jmp    c001c0d0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001c0c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0c5:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0c7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001c0ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ce:	89 10                	mov    DWORD PTR [eax],edx
c001c0d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0d7:	8d 50 ff             	lea    edx,[eax-0x1]
c001c0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0de:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c0e1:	83 c4 0c             	add    esp,0xc
c001c0e4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c0e6 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c0e6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c0ea:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0ed:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c0ee <DriverlessDevice::~DriverlessDevice()>:
c001c0ee:	ba 9c da 01 c0       	mov    edx,0xc001da9c
c001c0f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0f7:	89 10                	mov    DWORD PTR [eax],edx
c001c0f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c0fd:	50                   	push   eax
c001c0fe:	e8 1f f7 fe ff       	call   c000b822 <Device::~Device()>
c001c103:	83 c4 04             	add    esp,0x4
c001c106:	90                   	nop
c001c107:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c108 <DriverlessDevice::~DriverlessDevice()>:
c001c108:	83 ec 0c             	sub    esp,0xc
c001c10b:	83 ec 0c             	sub    esp,0xc
c001c10e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c112:	e8 d7 ff ff ff       	call   c001c0ee <DriverlessDevice::~DriverlessDevice()>
c001c117:	83 c4 10             	add    esp,0x10
c001c11a:	83 ec 08             	sub    esp,0x8
c001c11d:	68 58 01 00 00       	push   0x158
c001c122:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c126:	e8 bf e2 fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c12b:	83 c4 10             	add    esp,0x10
c001c12e:	83 c4 0c             	add    esp,0xc
c001c131:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c132 <LinkedList<Device>::addElement(Device*)>:
c001c132:	83 ec 0c             	sub    esp,0xc
c001c135:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c13a:	75 10                	jne    c001c14c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c13c:	83 ec 0c             	sub    esp,0xc
c001c13f:	68 d8 d3 01 c0       	push   0xc001d3d8
c001c144:	e8 12 40 ff ff       	call   c001015b <KePanic(char const*)>
c001c149:	83 c4 10             	add    esp,0x10
c001c14c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c150:	8b 00                	mov    eax,DWORD PTR [eax]
c001c152:	85 c0                	test   eax,eax
c001c154:	74 3a                	je     c001c190 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c15a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c15d:	85 c0                	test   eax,eax
c001c15f:	74 2f                	je     c001c190 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c165:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c168:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c16c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c172:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c176:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c17a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c17d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c181:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c184:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c18e:	eb 68                	jmp    c001c1f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c194:	8b 00                	mov    eax,DWORD PTR [eax]
c001c196:	85 c0                	test   eax,eax
c001c198:	75 4e                	jne    c001c1e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c19a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1a1:	85 c0                	test   eax,eax
c001c1a3:	75 43                	jne    c001c1e8 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c1a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1a9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c1ad:	89 10                	mov    DWORD PTR [eax],edx
c001c1af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1b3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c1b7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c1ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1c1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1cf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c1d2:	85 c0                	test   eax,eax
c001c1d4:	74 22                	je     c001c1f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c1d6:	83 ec 0c             	sub    esp,0xc
c001c1d9:	68 fa d3 01 c0       	push   0xc001d3fa
c001c1de:	e8 78 3f ff ff       	call   c001015b <KePanic(char const*)>
c001c1e3:	83 c4 10             	add    esp,0x10
c001c1e6:	eb 10                	jmp    c001c1f8 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c1e8:	83 ec 0c             	sub    esp,0xc
c001c1eb:	68 04 d4 01 c0       	push   0xc001d404
c001c1f0:	e8 66 3f ff ff       	call   c001015b <KePanic(char const*)>
c001c1f5:	83 c4 10             	add    esp,0x10
c001c1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1fc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c1ff:	8d 50 01             	lea    edx,[eax+0x1]
c001c202:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c206:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c209:	90                   	nop
c001c20a:	83 c4 0c             	add    esp,0xc
c001c20d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c20e <LinkedList<Device>::LinkedList()>:
c001c20e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c212:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c218:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c21c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c223:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c227:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c22e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c232:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c238:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c23c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c243:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c247:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c24e:	90                   	nop
c001c24f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c250 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c250:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c254:	8b 00                	mov    eax,DWORD PTR [eax]
c001c256:	85 c0                	test   eax,eax
c001c258:	75 0e                	jne    c001c268 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c25a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c25e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c261:	85 c0                	test   eax,eax
c001c263:	75 03                	jne    c001c268 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c265:	b0 01                	mov    al,0x1
c001c267:	c3                   	ret    
c001c268:	b0 00                	mov    al,0x0
c001c26a:	90                   	nop
c001c26b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c26c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c26c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c270:	8b 00                	mov    eax,DWORD PTR [eax]
c001c272:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c274 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c274:	83 ec 0c             	sub    esp,0xc
c001c277:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c27b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c27d:	85 c0                	test   eax,eax
c001c27f:	75 17                	jne    c001c298 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c281:	83 ec 0c             	sub    esp,0xc
c001c284:	68 10 d4 01 c0       	push   0xc001d410
c001c289:	e8 cd 3e ff ff       	call   c001015b <KePanic(char const*)>
c001c28e:	83 c4 10             	add    esp,0x10
c001c291:	e9 92 00 00 00       	jmp    c001c328 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c296:	66 90                	xchg   ax,ax
c001c298:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c29c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c29f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c2a2:	85 c0                	test   eax,eax
c001c2a4:	0f 95 c0             	setne  al
c001c2a7:	84 c0                	test   al,al
c001c2a9:	74 11                	je     c001c2bc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c2ab:	83 ec 0c             	sub    esp,0xc
c001c2ae:	68 5b d4 01 c0       	push   0xc001d45b
c001c2b3:	e8 a3 3e ff ff       	call   c001015b <KePanic(char const*)>
c001c2b8:	83 c4 10             	add    esp,0x10
c001c2bb:	90                   	nop
c001c2bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2c2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c2c5:	85 c0                	test   eax,eax
c001c2c7:	0f 94 c0             	sete   al
c001c2ca:	84 c0                	test   al,al
c001c2cc:	74 36                	je     c001c304 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c2ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c2d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2dc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c2e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c2ea:	83 f8 01             	cmp    eax,0x1
c001c2ed:	74 25                	je     c001c314 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c2ef:	83 ec 0c             	sub    esp,0xc
c001c2f2:	68 34 d4 01 c0       	push   0xc001d434
c001c2f7:	e8 5f 3e ff ff       	call   c001015b <KePanic(char const*)>
c001c2fc:	83 c4 10             	add    esp,0x10
c001c2ff:	eb 13                	jmp    c001c314 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c301:	8d 76 00             	lea    esi,[esi+0x0]
c001c304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c308:	8b 00                	mov    eax,DWORD PTR [eax]
c001c30a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c30d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c311:	89 10                	mov    DWORD PTR [eax],edx
c001c313:	90                   	nop
c001c314:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c318:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c31b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c31e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c322:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c325:	8d 76 00             	lea    esi,[esi+0x0]
c001c328:	83 c4 0c             	add    esp,0xc
c001c32b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c32c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c32c:	83 ec 0c             	sub    esp,0xc
c001c32f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c334:	75 12                	jne    c001c348 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c336:	83 ec 0c             	sub    esp,0xc
c001c339:	68 d8 d3 01 c0       	push   0xc001d3d8
c001c33e:	e8 18 3e ff ff       	call   c001015b <KePanic(char const*)>
c001c343:	83 c4 10             	add    esp,0x10
c001c346:	66 90                	xchg   ax,ax
c001c348:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c34c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c34e:	85 c0                	test   eax,eax
c001c350:	74 36                	je     c001c388 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c356:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c359:	85 c0                	test   eax,eax
c001c35b:	74 2b                	je     c001c388 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c35d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c361:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c364:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c368:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c36b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c36f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c373:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c37a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c37d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c384:	eb 6a                	jmp    c001c3f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c386:	66 90                	xchg   ax,ax
c001c388:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c38e:	85 c0                	test   eax,eax
c001c390:	75 4e                	jne    c001c3e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c392:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c396:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c399:	85 c0                	test   eax,eax
c001c39b:	75 43                	jne    c001c3e0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c39d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3a5:	89 10                	mov    DWORD PTR [eax],edx
c001c3a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c3af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c3b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3b9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c3c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c3c7:	85 c0                	test   eax,eax
c001c3c9:	74 25                	je     c001c3f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c3cb:	83 ec 0c             	sub    esp,0xc
c001c3ce:	68 fa d3 01 c0       	push   0xc001d3fa
c001c3d3:	e8 83 3d ff ff       	call   c001015b <KePanic(char const*)>
c001c3d8:	83 c4 10             	add    esp,0x10
c001c3db:	eb 13                	jmp    c001c3f0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c3dd:	8d 76 00             	lea    esi,[esi+0x0]
c001c3e0:	83 ec 0c             	sub    esp,0xc
c001c3e3:	68 04 d4 01 c0       	push   0xc001d404
c001c3e8:	e8 6e 3d ff ff       	call   c001015b <KePanic(char const*)>
c001c3ed:	83 c4 10             	add    esp,0x10
c001c3f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c3f7:	8d 50 01             	lea    edx,[eax+0x1]
c001c3fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c401:	90                   	nop
c001c402:	83 c4 0c             	add    esp,0xc
c001c405:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c408 <ACPI::~ACPI()>:
c001c408:	83 ec 0c             	sub    esp,0xc
c001c40b:	ba 04 e0 01 c0       	mov    edx,0xc001e004
c001c410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c414:	89 10                	mov    DWORD PTR [eax],edx
c001c416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c41a:	83 ec 0c             	sub    esp,0xc
c001c41d:	50                   	push   eax
c001c41e:	e8 ff f3 fe ff       	call   c000b822 <Device::~Device()>
c001c423:	83 c4 10             	add    esp,0x10
c001c426:	90                   	nop
c001c427:	83 c4 0c             	add    esp,0xc
c001c42a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c42c <ACPI::~ACPI()>:
c001c42c:	83 ec 0c             	sub    esp,0xc
c001c42f:	83 ec 0c             	sub    esp,0xc
c001c432:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c436:	e8 cd ff ff ff       	call   c001c408 <ACPI::~ACPI()>
c001c43b:	83 c4 10             	add    esp,0x10
c001c43e:	83 ec 08             	sub    esp,0x8
c001c441:	68 64 12 00 00       	push   0x1264
c001c446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c44a:	e8 9b df fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c44f:	83 c4 10             	add    esp,0x10
c001c452:	83 c4 0c             	add    esp,0xc
c001c455:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c458 <LinkedList<Device>::~LinkedList()>:
c001c458:	90                   	nop
c001c459:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c45c <LinkedList<Device>::isEmpty()>:
c001c45c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c460:	8b 00                	mov    eax,DWORD PTR [eax]
c001c462:	85 c0                	test   eax,eax
c001c464:	75 0e                	jne    c001c474 <LinkedList<Device>::isEmpty()+0x18>
c001c466:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c46a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c46d:	85 c0                	test   eax,eax
c001c46f:	75 03                	jne    c001c474 <LinkedList<Device>::isEmpty()+0x18>
c001c471:	b0 01                	mov    al,0x1
c001c473:	c3                   	ret    
c001c474:	b0 00                	mov    al,0x0
c001c476:	90                   	nop
c001c477:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c478 <LinkedList<Device>::getFirstElement()>:
c001c478:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c47c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c47e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c480 <LinkedList<Device>::removeFirst()>:
c001c480:	83 ec 0c             	sub    esp,0xc
c001c483:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c487:	8b 00                	mov    eax,DWORD PTR [eax]
c001c489:	85 c0                	test   eax,eax
c001c48b:	75 17                	jne    c001c4a4 <LinkedList<Device>::removeFirst()+0x24>
c001c48d:	83 ec 0c             	sub    esp,0xc
c001c490:	68 10 d4 01 c0       	push   0xc001d410
c001c495:	e8 c1 3c ff ff       	call   c001015b <KePanic(char const*)>
c001c49a:	83 c4 10             	add    esp,0x10
c001c49d:	e9 92 00 00 00       	jmp    c001c534 <LinkedList<Device>::removeFirst()+0xb4>
c001c4a2:	66 90                	xchg   ax,ax
c001c4a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c4ab:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c4b1:	85 c0                	test   eax,eax
c001c4b3:	74 13                	je     c001c4c8 <LinkedList<Device>::removeFirst()+0x48>
c001c4b5:	83 ec 0c             	sub    esp,0xc
c001c4b8:	68 5b d4 01 c0       	push   0xc001d45b
c001c4bd:	e8 99 3c ff ff       	call   c001015b <KePanic(char const*)>
c001c4c2:	83 c4 10             	add    esp,0x10
c001c4c5:	8d 76 00             	lea    esi,[esi+0x0]
c001c4c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001c4ce:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c4d4:	85 c0                	test   eax,eax
c001c4d6:	75 34                	jne    c001c50c <LinkedList<Device>::removeFirst()+0x8c>
c001c4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c4e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c4f4:	83 f8 01             	cmp    eax,0x1
c001c4f7:	74 27                	je     c001c520 <LinkedList<Device>::removeFirst()+0xa0>
c001c4f9:	83 ec 0c             	sub    esp,0xc
c001c4fc:	68 34 d4 01 c0       	push   0xc001d434
c001c501:	e8 55 3c ff ff       	call   c001015b <KePanic(char const*)>
c001c506:	83 c4 10             	add    esp,0x10
c001c509:	eb 15                	jmp    c001c520 <LinkedList<Device>::removeFirst()+0xa0>
c001c50b:	90                   	nop
c001c50c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c510:	8b 00                	mov    eax,DWORD PTR [eax]
c001c512:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c51c:	89 10                	mov    DWORD PTR [eax],edx
c001c51e:	66 90                	xchg   ax,ax
c001c520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c524:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c527:	8d 50 ff             	lea    edx,[eax-0x1]
c001c52a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c52e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c531:	8d 76 00             	lea    esi,[esi+0x0]
c001c534:	83 c4 0c             	add    esp,0xc
c001c537:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c538 <CPU::~CPU()>:
c001c538:	83 ec 0c             	sub    esp,0xc
c001c53b:	ba a0 e1 01 c0       	mov    edx,0xc001e1a0
c001c540:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c544:	89 10                	mov    DWORD PTR [eax],edx
c001c546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c54a:	83 ec 0c             	sub    esp,0xc
c001c54d:	50                   	push   eax
c001c54e:	e8 cf f2 fe ff       	call   c000b822 <Device::~Device()>
c001c553:	83 c4 10             	add    esp,0x10
c001c556:	90                   	nop
c001c557:	83 c4 0c             	add    esp,0xc
c001c55a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c55c <CPU::~CPU()>:
c001c55c:	83 ec 0c             	sub    esp,0xc
c001c55f:	83 ec 0c             	sub    esp,0xc
c001c562:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c566:	e8 cd ff ff ff       	call   c001c538 <CPU::~CPU()>
c001c56b:	83 c4 10             	add    esp,0x10
c001c56e:	83 ec 08             	sub    esp,0x8
c001c571:	68 94 11 00 00       	push   0x1194
c001c576:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c57a:	e8 6b de fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c57f:	83 c4 10             	add    esp,0x10
c001c582:	83 c4 0c             	add    esp,0xc
c001c585:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c588 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c588:	90                   	nop
c001c589:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c58c <ThreadControlBlock::ThreadControlBlock()>:
c001c58c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c590:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c59b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c5a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5a6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c5ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5b1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c5b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5bc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c5c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5c7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c5cb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5cf:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c5d3:	90                   	nop
c001c5d4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c5d8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c5d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c5e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5e6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c5ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5f1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c5f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c5fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c602:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c606:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c60d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c611:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c618:	90                   	nop
c001c619:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c61c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c61c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c620:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c623:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c624 <PCI::~PCI()>:
c001c624:	83 ec 0c             	sub    esp,0xc
c001c627:	ba f8 ec 01 c0       	mov    edx,0xc001ecf8
c001c62c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c630:	89 10                	mov    DWORD PTR [eax],edx
c001c632:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c636:	83 ec 0c             	sub    esp,0xc
c001c639:	50                   	push   eax
c001c63a:	e8 6d ec fe ff       	call   c000b2ac <Bus::~Bus()>
c001c63f:	83 c4 10             	add    esp,0x10
c001c642:	90                   	nop
c001c643:	83 c4 0c             	add    esp,0xc
c001c646:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c648 <PCI::~PCI()>:
c001c648:	83 ec 0c             	sub    esp,0xc
c001c64b:	83 ec 0c             	sub    esp,0xc
c001c64e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c652:	e8 cd ff ff ff       	call   c001c624 <PCI::~PCI()>
c001c657:	83 c4 10             	add    esp,0x10
c001c65a:	83 ec 08             	sub    esp,0x8
c001c65d:	68 5c 01 00 00       	push   0x15c
c001c662:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c666:	e8 7f dd fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c66b:	83 c4 10             	add    esp,0x10
c001c66e:	83 c4 0c             	add    esp,0xc
c001c671:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c672 <IDE::~IDE()>:
c001c672:	83 ec 0c             	sub    esp,0xc
c001c675:	ba ac ed 01 c0       	mov    edx,0xc001edac
c001c67a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c67e:	89 10                	mov    DWORD PTR [eax],edx
c001c680:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c684:	83 ec 0c             	sub    esp,0xc
c001c687:	50                   	push   eax
c001c688:	e8 0f f6 fe ff       	call   c000bc9c <HardDiskController::~HardDiskController()>
c001c68d:	83 c4 10             	add    esp,0x10
c001c690:	90                   	nop
c001c691:	83 c4 0c             	add    esp,0xc
c001c694:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c696 <IDE::~IDE()>:
c001c696:	83 ec 0c             	sub    esp,0xc
c001c699:	83 ec 0c             	sub    esp,0xc
c001c69c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6a0:	e8 cd ff ff ff       	call   c001c672 <IDE::~IDE()>
c001c6a5:	83 c4 10             	add    esp,0x10
c001c6a8:	83 ec 08             	sub    esp,0x8
c001c6ab:	68 70 02 00 00       	push   0x270
c001c6b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6b4:	e8 31 dd fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c6b9:	83 c4 10             	add    esp,0x10
c001c6bc:	83 c4 0c             	add    esp,0xc
c001c6bf:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c6c0 <SATABus::~SATABus()>:
c001c6c0:	83 ec 0c             	sub    esp,0xc
c001c6c3:	ba fc ed 01 c0       	mov    edx,0xc001edfc
c001c6c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6cc:	89 10                	mov    DWORD PTR [eax],edx
c001c6ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d2:	83 ec 0c             	sub    esp,0xc
c001c6d5:	50                   	push   eax
c001c6d6:	e8 c1 f5 fe ff       	call   c000bc9c <HardDiskController::~HardDiskController()>
c001c6db:	83 c4 10             	add    esp,0x10
c001c6de:	90                   	nop
c001c6df:	83 c4 0c             	add    esp,0xc
c001c6e2:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c6e4 <SATABus::~SATABus()>:
c001c6e4:	83 ec 0c             	sub    esp,0xc
c001c6e7:	83 ec 0c             	sub    esp,0xc
c001c6ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6ee:	e8 cd ff ff ff       	call   c001c6c0 <SATABus::~SATABus()>
c001c6f3:	83 c4 10             	add    esp,0x10
c001c6f6:	83 ec 08             	sub    esp,0x8
c001c6f9:	68 64 01 00 00       	push   0x164
c001c6fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c702:	e8 e3 dc fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c707:	83 c4 10             	add    esp,0x10
c001c70a:	83 c4 0c             	add    esp,0xc
c001c70d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c70e <ATA::~ATA()>:
c001c70e:	83 ec 0c             	sub    esp,0xc
c001c711:	ba 3c ee 01 c0       	mov    edx,0xc001ee3c
c001c716:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c71a:	89 10                	mov    DWORD PTR [eax],edx
c001c71c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c720:	83 ec 0c             	sub    esp,0xc
c001c723:	50                   	push   eax
c001c724:	e8 55 f6 fe ff       	call   c000bd7e <PhysicalDisk::~PhysicalDisk()>
c001c729:	83 c4 10             	add    esp,0x10
c001c72c:	90                   	nop
c001c72d:	83 c4 0c             	add    esp,0xc
c001c730:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c732 <ATA::~ATA()>:
c001c732:	83 ec 0c             	sub    esp,0xc
c001c735:	83 ec 0c             	sub    esp,0xc
c001c738:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c73c:	e8 cd ff ff ff       	call   c001c70e <ATA::~ATA()>
c001c741:	83 c4 10             	add    esp,0x10
c001c744:	83 ec 08             	sub    esp,0x8
c001c747:	68 7c 01 00 00       	push   0x17c
c001c74c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c750:	e8 95 dc fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c755:	83 c4 10             	add    esp,0x10
c001c758:	83 c4 0c             	add    esp,0xc
c001c75b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c75c <ATAPI::~ATAPI()>:
c001c75c:	83 ec 0c             	sub    esp,0xc
c001c75f:	ba 84 ee 01 c0       	mov    edx,0xc001ee84
c001c764:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c768:	89 10                	mov    DWORD PTR [eax],edx
c001c76a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c76e:	83 ec 0c             	sub    esp,0xc
c001c771:	50                   	push   eax
c001c772:	e8 07 f6 fe ff       	call   c000bd7e <PhysicalDisk::~PhysicalDisk()>
c001c777:	83 c4 10             	add    esp,0x10
c001c77a:	90                   	nop
c001c77b:	83 c4 0c             	add    esp,0xc
c001c77e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c780 <ATAPI::~ATAPI()>:
c001c780:	83 ec 0c             	sub    esp,0xc
c001c783:	83 ec 0c             	sub    esp,0xc
c001c786:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c78a:	e8 cd ff ff ff       	call   c001c75c <ATAPI::~ATAPI()>
c001c78f:	83 c4 10             	add    esp,0x10
c001c792:	83 ec 08             	sub    esp,0x8
c001c795:	68 84 01 00 00       	push   0x184
c001c79a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c79e:	e8 47 dc fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c7a3:	83 c4 10             	add    esp,0x10
c001c7a6:	83 c4 0c             	add    esp,0xc
c001c7a9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c7aa <SATA::~SATA()>:
c001c7aa:	83 ec 0c             	sub    esp,0xc
c001c7ad:	ba 38 ef 01 c0       	mov    edx,0xc001ef38
c001c7b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7b6:	89 10                	mov    DWORD PTR [eax],edx
c001c7b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7bc:	83 ec 0c             	sub    esp,0xc
c001c7bf:	50                   	push   eax
c001c7c0:	e8 b9 f5 fe ff       	call   c000bd7e <PhysicalDisk::~PhysicalDisk()>
c001c7c5:	83 c4 10             	add    esp,0x10
c001c7c8:	90                   	nop
c001c7c9:	83 c4 0c             	add    esp,0xc
c001c7cc:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c7ce <SATA::~SATA()>:
c001c7ce:	83 ec 0c             	sub    esp,0xc
c001c7d1:	83 ec 0c             	sub    esp,0xc
c001c7d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7d8:	e8 cd ff ff ff       	call   c001c7aa <SATA::~SATA()>
c001c7dd:	83 c4 10             	add    esp,0x10
c001c7e0:	83 ec 08             	sub    esp,0x8
c001c7e3:	68 7c 01 00 00       	push   0x17c
c001c7e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7ec:	e8 f9 db fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c7f1:	83 c4 10             	add    esp,0x10
c001c7f4:	83 c4 0c             	add    esp,0xc
c001c7f7:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c7f8 <SATAPI::~SATAPI()>:
c001c7f8:	83 ec 0c             	sub    esp,0xc
c001c7fb:	ba 70 f0 01 c0       	mov    edx,0xc001f070
c001c800:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c804:	89 10                	mov    DWORD PTR [eax],edx
c001c806:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c80a:	83 ec 0c             	sub    esp,0xc
c001c80d:	50                   	push   eax
c001c80e:	e8 6b f5 fe ff       	call   c000bd7e <PhysicalDisk::~PhysicalDisk()>
c001c813:	83 c4 10             	add    esp,0x10
c001c816:	90                   	nop
c001c817:	83 c4 0c             	add    esp,0xc
c001c81a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c81c <SATAPI::~SATAPI()>:
c001c81c:	83 ec 0c             	sub    esp,0xc
c001c81f:	83 ec 0c             	sub    esp,0xc
c001c822:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c826:	e8 cd ff ff ff       	call   c001c7f8 <SATAPI::~SATAPI()>
c001c82b:	83 c4 10             	add    esp,0x10
c001c82e:	83 ec 08             	sub    esp,0x8
c001c831:	68 84 01 00 00       	push   0x184
c001c836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c83a:	e8 ab db fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c83f:	83 c4 10             	add    esp,0x10
c001c842:	83 c4 0c             	add    esp,0xc
c001c845:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c846 <IOAPIC::~IOAPIC()>:
c001c846:	83 ec 0c             	sub    esp,0xc
c001c849:	ba b0 f0 01 c0       	mov    edx,0xc001f0b0
c001c84e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c852:	89 10                	mov    DWORD PTR [eax],edx
c001c854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c858:	83 ec 0c             	sub    esp,0xc
c001c85b:	50                   	push   eax
c001c85c:	e8 c1 ef fe ff       	call   c000b822 <Device::~Device()>
c001c861:	83 c4 10             	add    esp,0x10
c001c864:	90                   	nop
c001c865:	83 c4 0c             	add    esp,0xc
c001c868:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c86a <IOAPIC::~IOAPIC()>:
c001c86a:	83 ec 0c             	sub    esp,0xc
c001c86d:	83 ec 0c             	sub    esp,0xc
c001c870:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c874:	e8 cd ff ff ff       	call   c001c846 <IOAPIC::~IOAPIC()>
c001c879:	83 c4 10             	add    esp,0x10
c001c87c:	83 ec 08             	sub    esp,0x8
c001c87f:	68 68 01 00 00       	push   0x168
c001c884:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c888:	e8 5d db fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c88d:	83 c4 10             	add    esp,0x10
c001c890:	83 c4 0c             	add    esp,0xc
c001c893:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c894 <APICTimer::~APICTimer()>:
c001c894:	83 ec 0c             	sub    esp,0xc
c001c897:	ba f8 f0 01 c0       	mov    edx,0xc001f0f8
c001c89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a0:	89 10                	mov    DWORD PTR [eax],edx
c001c8a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8a6:	83 ec 0c             	sub    esp,0xc
c001c8a9:	50                   	push   eax
c001c8aa:	e8 89 08 ff ff       	call   c000d138 <Timer::~Timer()>
c001c8af:	83 c4 10             	add    esp,0x10
c001c8b2:	90                   	nop
c001c8b3:	83 c4 0c             	add    esp,0xc
c001c8b6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c8b8 <APICTimer::~APICTimer()>:
c001c8b8:	83 ec 0c             	sub    esp,0xc
c001c8bb:	83 ec 0c             	sub    esp,0xc
c001c8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8c2:	e8 cd ff ff ff       	call   c001c894 <APICTimer::~APICTimer()>
c001c8c7:	83 c4 10             	add    esp,0x10
c001c8ca:	83 ec 08             	sub    esp,0x8
c001c8cd:	68 60 01 00 00       	push   0x160
c001c8d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c8d6:	e8 0f db fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c8db:	83 c4 10             	add    esp,0x10
c001c8de:	83 c4 0c             	add    esp,0xc
c001c8e1:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c8e4 <PIT::~PIT()>:
c001c8e4:	83 ec 0c             	sub    esp,0xc
c001c8e7:	ba 48 f1 01 c0       	mov    edx,0xc001f148
c001c8ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f0:	89 10                	mov    DWORD PTR [eax],edx
c001c8f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c8f6:	83 ec 0c             	sub    esp,0xc
c001c8f9:	50                   	push   eax
c001c8fa:	e8 39 08 ff ff       	call   c000d138 <Timer::~Timer()>
c001c8ff:	83 c4 10             	add    esp,0x10
c001c902:	90                   	nop
c001c903:	83 c4 0c             	add    esp,0xc
c001c906:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c908 <PIT::~PIT()>:
c001c908:	83 ec 0c             	sub    esp,0xc
c001c90b:	83 ec 0c             	sub    esp,0xc
c001c90e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c912:	e8 cd ff ff ff       	call   c001c8e4 <PIT::~PIT()>
c001c917:	83 c4 10             	add    esp,0x10
c001c91a:	83 ec 08             	sub    esp,0x8
c001c91d:	68 5c 01 00 00       	push   0x15c
c001c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c926:	e8 bf da fe ff       	call   c000a3ea <operator delete(void*, unsigned long)>
c001c92b:	83 c4 10             	add    esp,0x10
c001c92e:	83 c4 0c             	add    esp,0xc
c001c931:	c3                   	ret    
