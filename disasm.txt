
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 db fb 00 00       	call   c000fbfb <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 e3 86 02 00       	call   c0028708 <_init>
c0000025:	c3                   	ret    
c0000026:	bb b2 92 02 c0       	mov    ebx,0xc00292b2
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb c0 92 02 c0    	cmp    ebx,0xc00292c0
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 b8 da 02 c0       	mov    eax,0xc002dab8
c0000049:	3d b8 da 02 c0       	cmp    eax,0xc002dab8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 b8 da 02 c0       	push   0xc002dab8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 b8 da 02 c0       	mov    eax,0xc002dab8
c0000075:	2d b8 da 02 c0       	sub    eax,0xc002dab8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 b8 da 02 c0       	push   0xc002dab8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d e8 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0e8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb c8 92 02 c0       	mov    ebx,0xc00292c8
c00000bb:	81 eb c4 92 02 c0    	sub    ebx,0xc00292c4
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be c4 92 02 c0       	mov    esi,0xc00292c4
c00000ca:	a1 ec e0 02 c0       	mov    eax,ds:0xc002e0ec
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 ec e0 02 c0       	mov    ds:0xc002e0ec,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 ec e0 02 c0       	mov    eax,ds:0xc002e0ec
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 b8 da 02 c0       	push   0xc002dab8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 e8 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0e8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 f0 e0 02 c0       	push   0xc002e0f0
c000012c:	68 b8 da 02 c0       	push   0xc002dab8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 bd d6 01 00       	call   c001da58 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 1a 2a 01 00       	call   c0012dcd <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 9b d6 01 00       	call   c001da58 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 e9 da 01 00       	call   c001dec5 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 97 e0 01 00       	call   c001e47c <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 30 e5 02 c0 	lgdtd  ds:0xc002e530
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 f8 46 01 00       	call   c0014cd1 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 08 e1 02 c0       	mov    ds:0xc002e108,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 08 e1 02 c0    	mov    DWORD PTR ds:0xc002e108,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d 08 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e108
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 e0 92 02 c0 02 	test   BYTE PTR [edx-0x3ffd6d20],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 e0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d20],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 e0 92 02 c0 08 	test   BYTE PTR [edx-0x3ffd6d20],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 e0 92 02 c0 04 	test   BYTE PTR [ebx-0x3ffd6d20],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 e0 92 02 c0 01 	test   BYTE PTR [edx-0x3ffd6d20],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 20 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e120
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 20 e1 02 c0    	mov    DWORD PTR ds:0xc002e120,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 24 e1 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd1edc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 24 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1edc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 20 e1 02 c0    	mov    DWORD PTR ds:0xc002e120,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 4c e1 02 c0    	cmp    DWORD PTR ds:0xc002e14c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 5c e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e15c
c0000e60:	c7 42 0c 54 e1 02 c0 	mov    DWORD PTR [edx+0xc],0xc002e154
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 5c e1 02 c0    	mov    DWORD PTR ds:0xc002e15c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 4c e1 02 c0    	mov    DWORD PTR ds:0xc002e14c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 20 e1 02 c0 02 	test   BYTE PTR ds:0xc002e120,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 20 e1 02 c0    	mov    edi,DWORD PTR ds:0xc002e120
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 24 e1 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1edc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 24 e1 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1edc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 54 e1 02 c0 	lea    edx,[eax*8-0x3ffd1eac]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 60 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e160
c00011e2:	81 fb 54 e1 02 c0    	cmp    ebx,0xc002e154
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 54 e1 02 c0       	cmp    eax,0xc002e154
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 50 e1 02 c0    	cmp    DWORD PTR ds:0xc002e150,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 5c e1 02 c0       	mov    ds:0xc002e15c,eax
c000121e:	a3 60 e1 02 c0       	mov    ds:0xc002e160,eax
c0001223:	a3 50 e1 02 c0       	mov    ds:0xc002e150,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 54 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e154
c0001231:	c7 40 0c 54 e1 02 c0 	mov    DWORD PTR [eax+0xc],0xc002e154
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 60 e1 02 c0       	mov    ds:0xc002e160,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 54 e1 02 c0 	mov    DWORD PTR [eax+0x8],0xc002e154
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 18 e1 02 c0 	lea    ebp,[edx*4-0x3ffd1ee8]
c0001282:	8b 14 95 20 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ee0]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 20 e1 02 c0 	lea    ecx,[edx*4-0x3ffd1ee0]
c000129d:	8b 14 95 20 e1 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd1ee0]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 54 e4 02 c0 	or     DWORD PTR [edi*4-0x3ffd1bac],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 54 e1 02 c0 	lea    eax,[eax*8-0x3ffd1eac]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 5c e1 02 c0    	mov    DWORD PTR ds:0xc002e15c,ecx
c0001357:	89 0d 60 e1 02 c0    	mov    DWORD PTR ds:0xc002e160,ecx
c000135d:	c7 41 08 54 e1 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002e154
c0001364:	c7 41 0c 54 e1 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002e154
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 4c e1 02 c0 	lea    edx,[ecx*8-0x3ffd1eb4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 54 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1bac]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 54 e4 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd1bac]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 4c e1 02 c0 	lea    edx,[eax*4-0x3ffd1eb4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 54 e4 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd1bac],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 5c e1 02 c0    	mov    DWORD PTR ds:0xc002e15c,edi
c000142a:	89 3d 60 e1 02 c0    	mov    DWORD PTR ds:0xc002e160,edi
c0001430:	c7 47 08 54 e1 02 c0 	mov    DWORD PTR [edi+0x8],0xc002e154
c0001437:	c7 47 0c 54 e1 02 c0 	mov    DWORD PTR [edi+0xc],0xc002e154
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 50 e1 02 c0    	mov    DWORD PTR ds:0xc002e150,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 4c e1 02 c0       	mov    eax,ds:0xc002e14c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 4c e1 02 c0    	mov    DWORD PTR ds:0xc002e14c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 20 e1 02 c0       	mov    edx,0xc002e120
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 20 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e120,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 74 e4 02 c0    	mov    ebx,DWORD PTR ds:0xc002e474
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 74 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e474,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 74 e4 02 c0    	mov    DWORD PTR ds:0xc002e474,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 4c e1 02 c0    	cmp    DWORD PTR ds:0xc002e14c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 4c e1 02 c0    	mov    DWORD PTR ds:0xc002e14c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 20 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e120,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 7c e4 02 c0    	push   DWORD PTR ds:0xc002e47c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 20 e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e120,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 7c e4 02 c0       	mov    eax,ds:0xc002e47c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 4c e1 02 c0 00 	cmp    DWORD PTR ds:0xc002e14c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 4c e1 02 c0       	mov    eax,ds:0xc002e14c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 24 e1 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1edc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 54 e1 02 c0       	mov    eax,0xc002e154
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 4c e4 02 c0       	cmp    eax,0xc002e44c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 88 e4 02 c0       	mov    eax,ds:0xc002e488
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 70 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e470
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 84 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e484
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 94 e4 02 c0    	mov    esi,DWORD PTR ds:0xc002e494
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 e4 93 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd6c1c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 20 e1 02 c0       	mov    eax,ds:0xc002e120
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 20 e1 02 c0       	mov    ds:0xc002e120,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 64 e4 02 c0    	mov    DWORD PTR ds:0xc002e464,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 68 e4 02 c0    	mov    DWORD PTR ds:0xc002e468,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 6c e4 02 c0    	mov    DWORD PTR ds:0xc002e46c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 74 e4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e474,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 00 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce400]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 48 f2 01 00       	jmp    c0020e74 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 00 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce400]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 79 f2 01 00       	jmp    c0020ebb <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 00 1c 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce400]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 a1 f2 01 00       	jmp    c0020f02 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 28 4b 02 00       	call   c0026a6c <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 00 95 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6b00]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 00 95 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6b00]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 00 94 02 c0       	mov    edx,0xc0029400
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba 20 95 02 c0       	mov    edx,0xc0029520
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 40 c9 02 c0       	mov    edx,0xc002c940
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba 2c 95 02 c0       	mov    edx,0xc002952c
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 10 95 02 c0       	mov    edx,0xc0029510
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 c0 e4 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1b40]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 a0 e4 02 c0    	mov    ax,ds:0xc002e4a0
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 a0 e4 02 c0    	mov    ds:0xc002e4a0,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 25 39 02 00       	call   c0026a6c <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 32 95 02 c0       	mov    eax,0xc0029532
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 80 94 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6b80]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 3b 95 02 c0       	mov    eax,0xc002953b
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 00 95 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6b00]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 f0 22 02 00       	call   c0026a6c <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 10 95 02 c0       	mov    edx,0xc0029510
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 00 94 02 c0       	mov    edx,0xc0029400
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 10 94 02 c0       	mov    edx,0xc0029410
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 c0 e4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1b40]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 c0 e4 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1b40],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 b7 0c 02 00       	call   c0026a6c <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 9d 0c 02 00       	call   c0026a6c <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 57 94 02 c0       	mov    eax,0xc0029457
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 50 94 02 c0       	mov    eax,0xc0029450
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 c0 e4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1b40]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be 40 94 02 c0       	mov    esi,0xc0029440
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 e0 f3 01 00       	call   c0026a6c <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba 20 95 02 c0       	mov    edx,0xc0029520
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba 20 94 02 c0       	mov    edx,0xc0029420
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba 30 94 02 c0       	mov    edx,0xc0029430
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba 42 95 02 c0       	mov    edx,0xc0029542
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba 4e 95 02 c0       	mov    edx,0xc002954e
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba 62 95 02 c0       	mov    edx,0xc0029562
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 a0 73 00 00       	call   c000f843 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 9a 73 00 00       	call   c000f853 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 80 98 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029880
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 80 98 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029880
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 80 96 02 c0       	mov    eax,0xc0029680
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 c0 95 02 c0       	mov    eax,0xc00295c0
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 80 95 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6a80]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 df 70 00 00       	call   c000f853 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c9 70 00 00       	call   c000f853 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 34 fd 01 00       	call   c002853f <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 f7 fc 01 00       	call   c0028521 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 cb fc 01 00       	call   c002853f <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 7e f3 01 00       	call   c0027c44 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 f8 fd 01 00       	call   c00286d0 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 45 fc 01 00       	call   c002853f <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 87 fb 01 00       	call   c002853f <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 54 fb 01 00       	call   c0028521 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 41 fa 01 00       	call   c002853f <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 09 fa 01 00       	call   c0028521 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a8 6c 00 00       	call   c000f873 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 43 6c 00 00       	call   c000f853 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 80 99 02 c0       	mov    eax,0xc0029980
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 15 f8 01 00       	call   c002853f <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 da f7 01 00       	call   c0028521 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 e0 9d 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6220]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 ea f4 01 00       	call   c00282d3 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 68 ee 01 00       	call   c0027c70 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 24 f7 01 00       	call   c0028543 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 12 f8 01 00       	call   c0028667 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 fc ed 01 00       	call   c0027c70 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 a7 f6 01 00       	call   c002853d <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 88 f6 01 00       	call   c0028541 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 16 f8 01 00       	call   c00286f0 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 c8 f3 01 00       	call   c00282d3 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 46 ed 01 00       	call   c0027c70 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 02 f6 01 00       	call   c0028543 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 f0 f6 01 00       	call   c0028667 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 da ec 01 00       	call   c0027c70 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 85 f5 01 00       	call   c002853d <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 65 f5 01 00       	call   c0028541 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 f2 f6 01 00       	call   c00286f0 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 a0 f4 01 00       	call   c002853f <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 5e f4 01 00       	call   c0028521 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 46 f4 01 00       	call   c002853f <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 b8 f1 01 00       	call   c00282d3 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 ba e4 01 00       	call   c00275f3 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 1d eb 01 00       	call   c0027c70 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 6f f1 01 00       	call   c00282d3 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 75 e4 01 00       	call   c00275f3 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 44 f1 01 00       	call   c00282d3 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 94 f3 01 00       	call   c002853d <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 71 ea 01 00       	call   c0027c44 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 eb f4 01 00       	call   c00286d0 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 1a f3 01 00       	call   c0028521 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 15 ea 01 00       	call   c0027c44 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 93 f0 01 00       	call   c00282d3 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 16 ea 01 00       	call   c0027c70 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 68 f0 01 00       	call   c00282d3 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 cf ec 01 00       	call   c0027f54 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 4e e3 01 00       	call   c00275f3 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 ae dc 01 00       	call   c0026f88 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 85 f3 01 00       	call   c0028667 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 6e e9 01 00       	call   c0027c70 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 55 f3 01 00       	call   c0028667 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 c7 e2 01 00       	call   c00275f3 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 00 f2 01 00       	call   c0028543 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 e8 eb 01 00       	call   c0027f54 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 6e e2 01 00       	call   c00275f3 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 54 f3 01 00       	call   c00286f0 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 2e ef 01 00       	call   c00282d3 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 85 e8 01 00       	call   c0027c44 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 64 f1 01 00       	call   c002853f <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 fd e1 01 00       	call   c00275f3 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 29 e8 01 00       	call   c0027c44 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 c3 f2 01 00       	call   c00286f0 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 7c ee 01 00       	call   c00282d3 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 f9 e7 01 00       	call   c0027c70 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 4c ee 01 00       	call   c00282d3 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 52 e1 01 00       	call   c00275f3 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 22 ee 01 00       	call   c00282d3 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 74 f0 01 00       	call   c002853f <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 4b e7 01 00       	call   c0027c44 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 c5 f1 01 00       	call   c00286d0 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 f4 ef 01 00       	call   c0028521 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 ee e6 01 00       	call   c0027c44 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 6c ed 01 00       	call   c00282d3 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 ef e6 01 00       	call   c0027c70 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 41 ed 01 00       	call   c00282d3 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 a8 e9 01 00       	call   c0027f54 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 27 e0 01 00       	call   c00275f3 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 77 d9 01 00       	call   c0026f88 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 4e f0 01 00       	call   c0028667 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 37 e6 01 00       	call   c0027c70 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 1e f0 01 00       	call   c0028667 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 90 df 01 00       	call   c00275f3 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 c9 ee 01 00       	call   c0028543 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 b0 e8 01 00       	call   c0027f54 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 2f df 01 00       	call   c00275f3 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 15 f0 01 00       	call   c00286f0 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 ef eb 01 00       	call   c00282d3 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 46 e5 01 00       	call   c0027c44 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 25 ee 01 00       	call   c002853f <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 be de 01 00       	call   c00275f3 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 ea e4 01 00       	call   c0027c44 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 5f eb 01 00       	call   c00282d3 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 65 de 01 00       	call   c00275f3 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 40 9e 02 c0       	mov    eax,0xc0029e40
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 54 9e 02 c0       	mov    eax,0xc0029e54
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 dc 5f 00 00       	call   c000f853 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 de 5f 00 00       	call   c000f873 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 da e9 01 00       	call   c00282d3 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 58 e3 01 00       	call   c0027c70 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 ea d5 01 00       	call   c0026f88 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 c1 ec 01 00       	call   c0028667 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 aa e2 01 00       	call   c0027c70 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 8d ec 01 00       	call   c0028667 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 ff db 01 00       	call   c00275f3 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 5f ec 01 00       	call   c0028667 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 4e e2 01 00       	call   c0027c70 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 b7 db 01 00       	call   c00275f3 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 d8 d4 01 00       	call   c0026f88 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 af eb 01 00       	call   c0028667 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 98 e1 01 00       	call   c0027c70 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 7b eb 01 00       	call   c0028667 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 ed da 01 00       	call   c00275f3 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 4d eb 01 00       	call   c0028667 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 3c e1 01 00       	call   c0027c70 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 a5 da 01 00       	call   c00275f3 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 83 da 01 00       	call   c00275f3 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 5f d3 01 00       	call   c0026f88 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 36 ea 01 00       	call   c0028667 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 1f e0 01 00       	call   c0027c70 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 02 ea 01 00       	call   c0028667 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 74 d9 01 00       	call   c00275f3 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 d4 e9 01 00       	call   c0028667 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 bd df 01 00       	call   c0027c70 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 26 d9 01 00       	call   c00275f3 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 86 e9 01 00       	call   c0028667 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 6f df 01 00       	call   c0027c70 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 d8 d8 01 00       	call   c00275f3 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 ed d1 01 00       	call   c0026f88 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 c4 e8 01 00       	call   c0028667 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 ad de 01 00       	call   c0027c70 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 94 e8 01 00       	call   c0028667 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 06 d8 01 00       	call   c00275f3 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 66 e8 01 00       	call   c0028667 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 4f de 01 00       	call   c0027c70 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 b8 d7 01 00       	call   c00275f3 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 18 e8 01 00       	call   c0028667 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 01 de 01 00       	call   c0027c70 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 6a d7 01 00       	call   c00275f3 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 3e d7 01 00       	call   c00275f3 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 9b dd 01 00       	call   c0027c70 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 57 e6 01 00       	call   c0028543 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 e6 d6 01 00       	call   c00275f3 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 43 dd 01 00       	call   c0027c70 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 ff e5 01 00       	call   c0028543 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 79 cf 01 00       	call   c0026f88 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 50 e6 01 00       	call   c0028667 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 39 dc 01 00       	call   c0027c70 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 1c e6 01 00       	call   c0028667 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 8e d5 01 00       	call   c00275f3 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 ee e5 01 00       	call   c0028667 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 d7 db 01 00       	call   c0027c70 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 40 d5 01 00       	call   c00275f3 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 a0 e5 01 00       	call   c0028667 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 89 db 01 00       	call   c0027c70 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 f2 d4 01 00       	call   c00275f3 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 52 e5 01 00       	call   c0028667 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 3b db 01 00       	call   c0027c70 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 a4 d4 01 00       	call   c00275f3 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 04 e5 01 00       	call   c0028667 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 ed da 01 00       	call   c0027c70 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 56 d4 01 00       	call   c00275f3 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 58 cd 01 00       	call   c0026f88 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 2f e4 01 00       	call   c0028667 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 18 da 01 00       	call   c0027c70 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 ff e3 01 00       	call   c0028667 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 71 d3 01 00       	call   c00275f3 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 d1 e3 01 00       	call   c0028667 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 ba d9 01 00       	call   c0027c70 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 23 d3 01 00       	call   c00275f3 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 83 e3 01 00       	call   c0028667 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 6c d9 01 00       	call   c0027c70 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 d5 d2 01 00       	call   c00275f3 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 35 e3 01 00       	call   c0028667 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 1e d9 01 00       	call   c0027c70 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 87 d2 01 00       	call   c00275f3 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 e7 e2 01 00       	call   c0028667 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 d0 d8 01 00       	call   c0027c70 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 39 d2 01 00       	call   c00275f3 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 0d d2 01 00       	call   c00275f3 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 6a d8 01 00       	call   c0027c70 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 26 e1 01 00       	call   c0028543 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 b5 d1 01 00       	call   c00275f3 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 12 d8 01 00       	call   c0027c70 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 ce e0 01 00       	call   c0028543 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 5c d1 01 00       	call   c00275f3 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 b9 d7 01 00       	call   c0027c70 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 75 e0 01 00       	call   c0028543 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 03 d1 01 00       	call   c00275f3 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 60 d7 01 00       	call   c0027c70 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 1c e0 01 00       	call   c0028543 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 7a c9 01 00       	call   c0026f88 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 51 e0 01 00       	call   c0028667 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 3a d6 01 00       	call   c0027c70 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 1d e0 01 00       	call   c0028667 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 8f cf 01 00       	call   c00275f3 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 ef df 01 00       	call   c0028667 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 d8 d5 01 00       	call   c0027c70 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 41 cf 01 00       	call   c00275f3 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 a1 df 01 00       	call   c0028667 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 8a d5 01 00       	call   c0027c70 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 f3 ce 01 00       	call   c00275f3 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 53 df 01 00       	call   c0028667 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 3c d5 01 00       	call   c0027c70 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 a5 ce 01 00       	call   c00275f3 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 05 df 01 00       	call   c0028667 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 ee d4 01 00       	call   c0027c70 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 57 ce 01 00       	call   c00275f3 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 b7 de 01 00       	call   c0028667 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 a0 d4 01 00       	call   c0027c70 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 06 ce 01 00       	call   c00275f3 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 66 de 01 00       	call   c0028667 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 4f d4 01 00       	call   c0027c70 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 b8 cd 01 00       	call   c00275f3 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 b2 c6 01 00       	call   c0026f88 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 89 dd 01 00       	call   c0028667 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 72 d3 01 00       	call   c0027c70 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 52 dd 01 00       	call   c0028667 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 c4 cc 01 00       	call   c00275f3 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 24 dd 01 00       	call   c0028667 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 0d d3 01 00       	call   c0027c70 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 76 cc 01 00       	call   c00275f3 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 d6 dc 01 00       	call   c0028667 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 bf d2 01 00       	call   c0027c70 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 28 cc 01 00       	call   c00275f3 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 88 dc 01 00       	call   c0028667 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 71 d2 01 00       	call   c0027c70 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 da cb 01 00       	call   c00275f3 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 3a dc 01 00       	call   c0028667 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 23 d2 01 00       	call   c0027c70 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 8c cb 01 00       	call   c00275f3 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 ec db 01 00       	call   c0028667 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 d5 d1 01 00       	call   c0027c70 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 3b cb 01 00       	call   c00275f3 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 9b db 01 00       	call   c0028667 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 84 d1 01 00       	call   c0027c70 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 f3 ca 01 00       	call   c00275f3 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 cc ca 01 00       	call   c00275f3 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 2a d1 01 00       	call   c0027c70 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 e6 d9 01 00       	call   c0028543 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 75 ca 01 00       	call   c00275f3 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 d3 d0 01 00       	call   c0027c70 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 8f d9 01 00       	call   c0028543 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 1d ca 01 00       	call   c00275f3 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 7b d0 01 00       	call   c0027c70 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 37 d9 01 00       	call   c0028543 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 c5 c9 01 00       	call   c00275f3 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 23 d0 01 00       	call   c0027c70 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 df d8 01 00       	call   c0028543 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 6d c9 01 00       	call   c00275f3 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 cb cf 01 00       	call   c0027c70 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 87 d8 01 00       	call   c0028543 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 1b c9 01 00       	call   c00275f3 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 79 cf 01 00       	call   c0027c70 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 35 d8 01 00       	call   c0028543 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 49 c1 01 00       	call   c0026f88 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 20 d8 01 00       	call   c0028667 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 09 ce 01 00       	call   c0027c70 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 f0 d7 01 00       	call   c0028667 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 62 c7 01 00       	call   c00275f3 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 84 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd617c]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 96 d7 01 00       	call   c0028667 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 7f cd 01 00       	call   c0027c70 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 ea c6 01 00       	call   c00275f3 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 37 d7 01 00       	call   c0028667 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 20 cd 01 00       	call   c0027c70 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 8b c6 01 00       	call   c00275f3 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 d8 d6 01 00       	call   c0028667 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 c1 cc 01 00       	call   c0027c70 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 2c c6 01 00       	call   c00275f3 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 79 d6 01 00       	call   c0028667 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 62 cc 01 00       	call   c0027c70 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 cd c5 01 00       	call   c00275f3 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 1a d6 01 00       	call   c0028667 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 03 cc 01 00       	call   c0027c70 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 6e c5 01 00       	call   c00275f3 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 bb d5 01 00       	call   c0028667 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 a4 cb 01 00       	call   c0027c70 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 0f c5 01 00       	call   c00275f3 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 5c d5 01 00       	call   c0028667 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 45 cb 01 00       	call   c0027c70 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 b0 c4 01 00       	call   c00275f3 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 fd d4 01 00       	call   c0028667 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 e6 ca 01 00       	call   c0027c70 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 51 c4 01 00       	call   c00275f3 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 5b bd 01 00       	call   c0026f88 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 32 d4 01 00       	call   c0028667 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 1b ca 01 00       	call   c0027c70 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 02 d4 01 00       	call   c0028667 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 74 c3 01 00       	call   c00275f3 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 a0 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6160]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 a7 d3 01 00       	call   c0028667 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 90 c9 01 00       	call   c0027c70 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 fb c2 01 00       	call   c00275f3 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 47 d3 01 00       	call   c0028667 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 30 c9 01 00       	call   c0027c70 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 9b c2 01 00       	call   c00275f3 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 e7 d2 01 00       	call   c0028667 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 d0 c8 01 00       	call   c0027c70 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 3b c2 01 00       	call   c00275f3 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 87 d2 01 00       	call   c0028667 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 70 c8 01 00       	call   c0027c70 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 db c1 01 00       	call   c00275f3 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 27 d2 01 00       	call   c0028667 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 10 c8 01 00       	call   c0027c70 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 7b c1 01 00       	call   c00275f3 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 c7 d1 01 00       	call   c0028667 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 b0 c7 01 00       	call   c0027c70 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 1b c1 01 00       	call   c00275f3 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 67 d1 01 00       	call   c0028667 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 50 c7 01 00       	call   c0027c70 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 bb c0 01 00       	call   c00275f3 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 07 d1 01 00       	call   c0028667 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 f0 c6 01 00       	call   c0027c70 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 5b c0 01 00       	call   c00275f3 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 bc 9e 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd6144]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 00 c0 01 00       	call   c00275f3 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 5d c6 01 00       	call   c0027c70 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 19 cf 01 00       	call   c0028543 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 a3 bf 01 00       	call   c00275f3 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 00 c6 01 00       	call   c0027c70 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 bc ce 01 00       	call   c0028543 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 46 bf 01 00       	call   c00275f3 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 a3 c5 01 00       	call   c0027c70 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 5f ce 01 00       	call   c0028543 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 e9 be 01 00       	call   c00275f3 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 46 c5 01 00       	call   c0027c70 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 02 ce 01 00       	call   c0028543 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 8c be 01 00       	call   c00275f3 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 e9 c4 01 00       	call   c0027c70 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 a5 cd 01 00       	call   c0028543 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 2f be 01 00       	call   c00275f3 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 8c c4 01 00       	call   c0027c70 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 48 cd 01 00       	call   c0028543 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 d2 bd 01 00       	call   c00275f3 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 2f c4 01 00       	call   c0027c70 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 eb cc 01 00       	call   c0028543 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 75 bd 01 00       	call   c00275f3 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 d2 c3 01 00       	call   c0027c70 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 8e cc 01 00       	call   c0028543 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 8a c3 01 00       	call   c0027c70 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 fa cd 01 00       	jmp    c00286f0 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 6c ca 01 00       	call   c002853f <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 2a ca 01 00       	call   c0028521 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 c1 c7 01 00       	call   c00282d3 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 c2 ba 01 00       	call   c00275f3 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 91 c7 01 00       	call   c00282d3 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 f8 c3 01 00       	call   c0027f54 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 97 c9 01 00       	call   c0028521 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 9a c9 01 00       	call   c002853f <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 6d c9 01 00       	call   c002853f <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 66 c3 01 00       	call   c0027f54 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 e8 ca 01 00       	call   c00286f0 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 c3 ca 01 00       	call   c00286f0 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 9d c6 01 00       	call   c00282d3 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 f4 bf 01 00       	call   c0027c44 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 d3 c8 01 00       	call   c002853f <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 6c b9 01 00       	call   c00275f3 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 90 bf 01 00       	call   c0027c44 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 2a ca 01 00       	call   c00286f0 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 6a c2 01 00       	call   c0027f54 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 e7 b8 01 00       	call   c00275f3 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 13 c5 01 00       	call   c00282d3 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 13 b8 01 00       	call   c00275f3 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 f3 b7 01 00       	call   c00275f3 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 c3 c4 01 00       	call   c00282d3 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 13 c7 01 00       	call   c002853d <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 f2 bd 01 00       	call   c0027c44 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 6c c8 01 00       	call   c00286d0 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 9b c6 01 00       	call   c0028521 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 99 bd 01 00       	call   c0027c44 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 17 c4 01 00       	call   c00282d3 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 9a bd 01 00       	call   c0027c70 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 ec c3 01 00       	call   c00282d3 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 53 c0 01 00       	call   c0027f54 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 d2 b6 01 00       	call   c00275f3 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 9c c3 01 00       	call   c00282d3 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 e8 c5 01 00       	call   c002853f <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 dd bc 01 00       	call   c0027c70 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 af bc 01 00       	call   c0027c70 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 e8 c2 01 00       	call   c00282d3 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 4c bf 01 00       	call   c0027f54 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 14 bf 01 00       	call   c0027f54 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 93 b5 01 00       	call   c00275f3 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 78 c6 01 00       	call   c00286f0 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 52 c2 01 00       	call   c00282d3 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 a9 bb 01 00       	call   c0027c44 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 88 c4 01 00       	call   c002853f <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 20 b5 01 00       	call   c00275f3 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 44 bb 01 00       	call   c0027c44 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 de c5 01 00       	call   c00286f0 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 a7 c3 01 00       	call   c002853f <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 65 c3 01 00       	call   c0028521 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 fc c0 01 00       	call   c00282d3 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 fd b3 01 00       	call   c00275f3 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 cc c0 01 00       	call   c00282d3 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 33 bd 01 00       	call   c0027f54 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 d2 c2 01 00       	call   c0028521 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 d5 c2 01 00       	call   c002853f <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 a8 c2 01 00       	call   c002853f <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 a1 bc 01 00       	call   c0027f54 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 23 c4 01 00       	call   c00286f0 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 fe c3 01 00       	call   c00286f0 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 d8 bf 01 00       	call   c00282d3 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 2f b9 01 00       	call   c0027c44 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 0e c2 01 00       	call   c002853f <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 a7 b2 01 00       	call   c00275f3 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 cb b8 01 00       	call   c0027c44 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 65 c3 01 00       	call   c00286f0 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 a5 bb 01 00       	call   c0027f54 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 22 b2 01 00       	call   c00275f3 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 4d be 01 00       	call   c00282d3 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 4d b1 01 00       	call   c00275f3 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 2d b1 01 00       	call   c00275f3 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 fd bd 01 00       	call   c00282d3 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 4d c0 01 00       	call   c002853d <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 2b b7 01 00       	call   c0027c44 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 a5 c1 01 00       	call   c00286d0 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 d4 bf 01 00       	call   c0028521 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 d1 b6 01 00       	call   c0027c44 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 4f bd 01 00       	call   c00282d3 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 d2 b6 01 00       	call   c0027c70 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 24 bd 01 00       	call   c00282d3 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 8b b9 01 00       	call   c0027f54 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 0a b0 01 00       	call   c00275f3 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 d4 bc 01 00       	call   c00282d3 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 20 bf 01 00       	call   c002853f <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 15 b6 01 00       	call   c0027c70 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 e7 b5 01 00       	call   c0027c70 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 1e bc 01 00       	call   c00282d3 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 82 b8 01 00       	call   c0027f54 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 4f b8 01 00       	call   c0027f54 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 ce ae 01 00       	call   c00275f3 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 b3 bf 01 00       	call   c00286f0 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 8d bb 01 00       	call   c00282d3 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 e4 b4 01 00       	call   c0027c44 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 c3 bd 01 00       	call   c002853f <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 5b ae 01 00       	call   c00275f3 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 7f b4 01 00       	call   c0027c44 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 19 bf 01 00       	call   c00286f0 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 e2 bc 01 00       	call   c002853f <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 a0 bc 01 00       	call   c0028521 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 37 ba 01 00       	call   c00282d3 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 38 ad 01 00       	call   c00275f3 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 07 ba 01 00       	call   c00282d3 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 6e b6 01 00       	call   c0027f54 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 0d bc 01 00       	call   c0028521 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 10 bc 01 00       	call   c002853f <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 e3 bb 01 00       	call   c002853f <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 dc b5 01 00       	call   c0027f54 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 5e bd 01 00       	call   c00286f0 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 39 bd 01 00       	call   c00286f0 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 13 b9 01 00       	call   c00282d3 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 6a b2 01 00       	call   c0027c44 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 49 bb 01 00       	call   c002853f <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 e2 ab 01 00       	call   c00275f3 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 06 b2 01 00       	call   c0027c44 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 a0 bc 01 00       	call   c00286f0 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 e0 b4 01 00       	call   c0027f54 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 5d ab 01 00       	call   c00275f3 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 88 b7 01 00       	call   c00282d3 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 88 aa 01 00       	call   c00275f3 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 68 aa 01 00       	call   c00275f3 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 38 b7 01 00       	call   c00282d3 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 88 b9 01 00       	call   c002853d <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 66 b0 01 00       	call   c0027c44 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 e0 ba 01 00       	call   c00286d0 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 0f b9 01 00       	call   c0028521 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 0c b0 01 00       	call   c0027c44 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 8a b6 01 00       	call   c00282d3 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 0d b0 01 00       	call   c0027c70 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 5f b6 01 00       	call   c00282d3 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 c6 b2 01 00       	call   c0027f54 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 45 a9 01 00       	call   c00275f3 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 0f b6 01 00       	call   c00282d3 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 5b b8 01 00       	call   c002853f <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 50 af 01 00       	call   c0027c70 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 22 af 01 00       	call   c0027c70 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 59 b5 01 00       	call   c00282d3 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 bd b1 01 00       	call   c0027f54 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 8a b1 01 00       	call   c0027f54 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 09 a8 01 00       	call   c00275f3 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 ee b8 01 00       	call   c00286f0 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 c8 b4 01 00       	call   c00282d3 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 1f ae 01 00       	call   c0027c44 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 fe b6 01 00       	call   c002853f <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 96 a7 01 00       	call   c00275f3 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 ba ad 01 00       	call   c0027c44 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 54 b8 01 00       	call   c00286f0 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 1d b6 01 00       	call   c002853f <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 db b5 01 00       	call   c0028521 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 72 b3 01 00       	call   c00282d3 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 73 a6 01 00       	call   c00275f3 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 42 b3 01 00       	call   c00282d3 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 a9 af 01 00       	call   c0027f54 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 48 b5 01 00       	call   c0028521 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 4b b5 01 00       	call   c002853f <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 1e b5 01 00       	call   c002853f <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 17 af 01 00       	call   c0027f54 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 99 b6 01 00       	call   c00286f0 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 74 b6 01 00       	call   c00286f0 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 4e b2 01 00       	call   c00282d3 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 a5 ab 01 00       	call   c0027c44 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 84 b4 01 00       	call   c002853f <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 1d a5 01 00       	call   c00275f3 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 41 ab 01 00       	call   c0027c44 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 db b5 01 00       	call   c00286f0 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 1b ae 01 00       	call   c0027f54 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 98 a4 01 00       	call   c00275f3 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 c3 b0 01 00       	call   c00282d3 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 c3 a3 01 00       	call   c00275f3 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 a3 a3 01 00       	call   c00275f3 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 73 b0 01 00       	call   c00282d3 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 c3 b2 01 00       	call   c002853d <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 a1 a9 01 00       	call   c0027c44 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 1b b4 01 00       	call   c00286d0 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 4a b2 01 00       	call   c0028521 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 47 a9 01 00       	call   c0027c44 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 c5 af 01 00       	call   c00282d3 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 48 a9 01 00       	call   c0027c70 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 9a af 01 00       	call   c00282d3 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 01 ac 01 00       	call   c0027f54 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 80 a2 01 00       	call   c00275f3 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 4a af 01 00       	call   c00282d3 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 96 b1 01 00       	call   c002853f <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 8b a8 01 00       	call   c0027c70 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 5d a8 01 00       	call   c0027c70 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 94 ae 01 00       	call   c00282d3 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 f8 aa 01 00       	call   c0027f54 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 c5 aa 01 00       	call   c0027f54 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 44 a1 01 00       	call   c00275f3 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 29 b2 01 00       	call   c00286f0 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 03 ae 01 00       	call   c00282d3 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 5a a7 01 00       	call   c0027c44 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 39 b0 01 00       	call   c002853f <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 d1 a0 01 00       	call   c00275f3 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 f5 a6 01 00       	call   c0027c44 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 8f b1 01 00       	call   c00286f0 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 55 af 01 00       	call   c002853f <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 13 af 01 00       	call   c0028521 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 aa ac 01 00       	call   c00282d3 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 ab 9f 01 00       	call   c00275f3 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 7a ac 01 00       	call   c00282d3 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 e1 a8 01 00       	call   c0027f54 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 80 ae 01 00       	call   c0028521 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 83 ae 01 00       	call   c002853f <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 56 ae 01 00       	call   c002853f <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 4f a8 01 00       	call   c0027f54 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 d1 af 01 00       	call   c00286f0 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 a8 af 01 00       	call   c00286f0 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 82 ab 01 00       	call   c00282d3 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 d9 a4 01 00       	call   c0027c44 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 b8 ad 01 00       	call   c002853f <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 51 9e 01 00       	call   c00275f3 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 79 a4 01 00       	call   c0027c44 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 13 af 01 00       	call   c00286f0 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 54 a7 01 00       	call   c0027f54 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 d1 9d 01 00       	call   c00275f3 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 fd a9 01 00       	call   c00282d3 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 fd 9c 01 00       	call   c00275f3 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 dd 9c 01 00       	call   c00275f3 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 ad a9 01 00       	call   c00282d3 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 e1 ab 01 00       	call   c0028521 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 d8 a2 01 00       	call   c0027c44 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 52 ad 01 00       	call   c00286d0 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 81 ab 01 00       	call   c0028521 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 7b a2 01 00       	call   c0027c44 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 f9 a8 01 00       	call   c00282d3 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 7c a2 01 00       	call   c0027c70 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 ce a8 01 00       	call   c00282d3 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 35 a5 01 00       	call   c0027f54 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 b4 9b 01 00       	call   c00275f3 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 7e a8 01 00       	call   c00282d3 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 ca aa 01 00       	call   c002853f <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 bf a1 01 00       	call   c0027c70 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 91 a1 01 00       	call   c0027c70 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 d5 a7 01 00       	call   c00282d3 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 3c a4 01 00       	call   c0027f54 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 25 a1 01 00       	call   c0027c70 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 e1 a9 01 00       	call   c0028543 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 d4 a3 01 00       	call   c0027f54 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 53 9a 01 00       	call   c00275f3 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 38 ab 01 00       	call   c00286f0 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 12 a7 01 00       	call   c00282d3 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 69 a0 01 00       	call   c0027c44 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 48 a9 01 00       	call   c002853f <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 e0 99 01 00       	call   c00275f3 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 08 a0 01 00       	call   c0027c44 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 a2 aa 01 00       	call   c00286f0 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 e4 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd611c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 d8 9e 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6128]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 a2 1b 00 00       	call   c000f853 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 5d a7 01 00       	call   c002853f <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 1b a7 01 00       	call   c0028521 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 07 a7 01 00       	call   c002853f <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 79 a4 01 00       	call   c00282d3 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 f7 9d 01 00       	call   c0027c70 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 49 a4 01 00       	call   c00282d3 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 4f 97 01 00       	call   c00275f3 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 1e a4 01 00       	call   c00282d3 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 6e a6 01 00       	call   c002853d <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 4f 9d 01 00       	call   c0027c44 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 c9 a7 01 00       	call   c00286d0 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 f8 a5 01 00       	call   c0028521 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 f7 9c 01 00       	call   c0027c44 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 75 a3 01 00       	call   c00282d3 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 f8 9c 01 00       	call   c0027c70 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 4a a3 01 00       	call   c00282d3 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 b1 9f 01 00       	call   c0027f54 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 30 96 01 00       	call   c00275f3 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 58 9f 01 00       	call   c0027f54 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 de 95 01 00       	call   c00275f3 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 c4 a6 01 00       	call   c00286f0 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 9e a2 01 00       	call   c00282d3 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 f5 9b 01 00       	call   c0027c44 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 d4 a4 01 00       	call   c002853f <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 6d 95 01 00       	call   c00275f3 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 99 9b 01 00       	call   c0027c44 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 33 a6 01 00       	call   c00286f0 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 e8 a1 01 00       	call   c00282d3 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 65 9b 01 00       	call   c0027c70 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 b6 a1 01 00       	call   c00282d3 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 bc 94 01 00       	call   c00275f3 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 8c a1 01 00       	call   c00282d3 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 e0 a3 01 00       	call   c0028541 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 b9 9a 01 00       	call   c0027c44 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 33 a5 01 00       	call   c00286d0 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 62 a3 01 00       	call   c0028521 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 60 9a 01 00       	call   c0027c44 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 de a0 01 00       	call   c00282d3 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 61 9a 01 00       	call   c0027c70 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 b3 a0 01 00       	call   c00282d3 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 1a 9d 01 00       	call   c0027f54 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 99 93 01 00       	call   c00275f3 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 b5 9c 01 00       	call   c0027f54 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 34 93 01 00       	call   c00275f3 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 1a a4 01 00       	call   c00286f0 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 f4 9f 01 00       	call   c00282d3 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 4b 99 01 00       	call   c0027c44 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 2a a2 01 00       	call   c002853f <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 c3 92 01 00       	call   c00275f3 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 ef 98 01 00       	call   c0027c44 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 60 9f 01 00       	call   c00282d3 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 66 92 01 00       	call   c00275f3 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 fe 9f 02 c0       	mov    eax,0xc0029ffe
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 0f a0 02 c0       	mov    eax,0xc002a00f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e4 13 00 00       	call   c000f853 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e6 13 00 00       	call   c000f873 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 55 13 00 00       	call   c000f843 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 46 a0 02 c0       	push   0xc002a046
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 28 e5 02 c0       	mov    eax,0xc002e528
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 4f a0 02 c0       	push   0xc002a04f
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 6c 6a 02 c0       	mov    eax,0xc0026a6c
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 59 a0 02 c0       	push   0xc002a059
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 a0 67 02 c0       	mov    eax,0xc00267a0
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 62 a0 02 c0       	push   0xc002a062
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 6c 6b 02 c0       	mov    eax,0xc0026b6c
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 6c a0 02 c0       	push   0xc002a06c
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 ec 68 02 c0       	mov    eax,0xc00268ec
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 75 a0 02 c0       	push   0xc002a075
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 2c e5 02 c0       	mov    eax,0xc002e52c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 82 a0 02 c0       	push   0xc002a082
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 2d e5 02 c0       	mov    eax,0xc002e52d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 69 5f 00 00       	call   c001458c <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 ea 11 00 00       	call   c000f843 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c000e668:	68 8f a0 02 c0       	push   0xc002a08f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 51 f6 00 00       	call   c001dcc6 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 3a f9 00 00       	call   c001dfc4 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 22 e8 01 c0       	push   0xc001e822
c000e693:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c000e699:	e8 26 f9 00 00       	call   c001dfc4 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 48 1a 03 c0       	mov    ds:0xc0031a48,eax
c000e6a6:	c6 05 2d e5 02 c0 01 	mov    BYTE PTR ds:0xc002e52d,0x1
c000e6ad:	e8 f1 04 01 00       	call   c001eba3 <Vm::initialise8086()>
c000e6b2:	e8 bd 4c 00 00       	call   c0013374 <Fs::initVFS()>
c000e6b7:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 69 df 00 00       	call   c001c63c <Sys::loadSyscalls()>
c000e6d3:	e8 8c be 00 00       	call   c001a564 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 9c a0 02 c0       	push   0xc002a09c
c000e6e2:	68 a5 a0 02 c0       	push   0xc002a0a5
c000e6e7:	e8 9e cb 00 00       	call   c001b28a <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 68 57 00 00       	call   c0013e5c <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 5b 5e 00 00       	call   c0014560 <Device::loadDriversForAll()>
c000e705:	e8 a0 b9 00 00       	call   c001a0aa <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 ad a0 02 c0       	push   0xc002a0ad
c000e719:	e8 b2 f0 00 00       	call   c001d7d0 <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 f8 f2 00 00       	call   c001da1f <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 f4 fb 00 00       	call   c001e328 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 c9 a0 02 c0       	push   0xc002a0c9
c000e749:	50                   	push   eax
c000e74a:	e8 b7 5e 00 00       	call   c0014606 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba 68 a2 02 c0       	mov    edx,0xc002a268
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 41 e5 02 c0 04 	test   BYTE PTR ds:0xc002e541,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 53 7e 01 00       	call   c0026736 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 9e a4 00 00       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 77 a4 00 00       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 55 a4 00 00       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 33 a4 00 00       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 40 e5 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e540,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 41 a3 00 00       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 1c a3 00 00       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 bd 7c 01 00       	call   c00266f0 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 7a 7c 01 00       	call   c00266d0 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 38 a3 00 00       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 d9 a0 02 c0       	push   0xc002a0d9
c000eaaf:	e8 3b 45 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 ec a0 02 c0       	push   0xc002a0ec
c000ead2:	e8 18 45 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 fd a0 02 c0       	push   0xc002a0fd
c000eaf5:	e8 f5 44 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 0e a1 02 c0       	push   0xc002a10e
c000eb18:	e8 d2 44 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 1f a1 02 c0       	push   0xc002a11f
c000eb3b:	e8 af 44 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 30 a1 02 c0       	push   0xc002a130
c000eb5e:	e8 8c 44 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 41 a1 02 c0       	push   0xc002a141
c000eb81:	e8 69 44 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 52 a1 02 c0       	push   0xc002a152
c000eba4:	e8 46 44 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 63 a1 02 c0       	push   0xc002a163
c000ebc7:	e8 23 44 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 74 a1 02 c0       	push   0xc002a174
c000ebea:	e8 00 44 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 85 a1 02 c0       	push   0xc002a185
c000ec0d:	e8 dd 43 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 96 a1 02 c0       	push   0xc002a196
c000ec30:	e8 ba 43 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 a7 a1 02 c0       	push   0xc002a1a7
c000ec53:	e8 97 43 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 b8 a1 02 c0       	push   0xc002a1b8
c000ec76:	e8 74 43 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 c9 a1 02 c0       	push   0xc002a1c9
c000ec99:	e8 51 43 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 da a1 02 c0       	push   0xc002a1da
c000ecbc:	e8 2e 43 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 eb a1 02 c0       	push   0xc002a1eb
c000ecdf:	e8 0b 43 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 fc a1 02 c0       	push   0xc002a1fc
c000ed02:	e8 e8 42 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 0d a2 02 c0       	push   0xc002a20d
c000ed21:	e8 c9 42 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 0c bc 02 c0 	mov    DWORD PTR [esp+0x20],0xc002bc0c
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 b8 42 00 00       	jmp    c0012fef <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 1e a2 02 c0       	push   0xc002a21e
c000ee0a:	e8 8e b8 00 00       	call   c001a69d <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 24 a2 02 c0       	push   0xc002a224
c000ee42:	e8 56 b8 00 00       	call   c001a69d <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 40 e5 02 c0 04 	test   BYTE PTR ds:0xc002e540,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 64 d4 02 c0 	sete   BYTE PTR ds:0xc002d464
c000eea6:	e8 98 09 00 00       	call   c000f843 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 d7 93 00 00       	call   c001828c <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 52 55 00 00       	call   c0014416 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 59 09 00 00       	call   c000f843 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 80 9f 00 00       	call   c0018e74 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 13 55 00 00       	call   c0014416 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 7d 5a 00 00       	call   c001499c <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 e3 54 00 00       	call   c0014416 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 6f f1 00 00       	call   c001e0c4 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 2a a2 02 c0       	push   0xc002a22a
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 4c 40 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 3b a2 02 c0       	push   0xc002a23b
c000efc0:	e8 d8 b6 00 00       	call   c001a69d <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 48 a2 02 c0       	push   0xc002a248
c000efd5:	e8 c3 b6 00 00       	call   c001a69d <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 52 a2 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a252
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 ac b6 00 00       	jmp    c001a69d <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 8c a2 02 c0       	push   0xc002a28c
c000f086:	e8 64 3f 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 32 e5 02 c0       	mov    ds:0xc002e532,eax
c000f0c7:	66 89 15 30 e5 02 c0 	mov    WORD PTR ds:0xc002e530,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 b6 ec 00 00       	call   c001de94 <unlockScheduler()>
c000f1de:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 44 95 01 00       	call   c0028770 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 3b 95 01 00       	call   c0028770 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 38 e5 02 c0 ff 07 	mov    WORD PTR ds:0xc002e538,0x7ff
c000f323:	a3 3a e5 02 c0       	mov    ds:0xc002e53a,eax
c000f328:	0f 01 1d 38 e5 02 c0 	lidtd  ds:0xc002e538
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 05 28 00 00       	call   c0011e1a <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 4c 2e 00 00       	call   c001246c <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 15 02 00 00       	call   c000f843 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 72 1e 00 00       	call   c00114b0 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 a3 1e 00 00       	call   c00114f0 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 54 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d454
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 54 d4 02 c0       	mov    eax,ds:0xc002d454
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 a8 a2 02 c0       	push   0xc002a2a8
c000f6f4:	e8 f6 38 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 54 d4 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002d454,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 fb 26 00 00       	call   c0011e1a <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 54 d4 02 c0    	mov    ebp,DWORD PTR ds:0xc002d454
c000f727:	e8 b9 07 00 00       	call   c000fee5 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 33 2c 00 00       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 54 d4 02 c0    	mov    ebx,DWORD PTR ds:0xc002d454
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 d8 a2 02 c0       	push   0xc002a2d8
c000f7ad:	e8 eb ae 00 00       	call   c001a69d <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 dd a2 02 c0       	push   0xc002a2dd
c000f7c3:	e8 d5 ae 00 00       	call   c001a69d <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 b9 e6 00 00       	call   c001de92 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 aa e6 00 00       	call   c001de94 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 1f 26 00 00       	call   c0011e1a <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	68 01 08 00 00       	push   0x801
c000f803:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f807:	50                   	push   eax
c000f808:	e8 5f 2c 00 00       	call   c001246c <VAS::allocatePages(int, int)>
c000f80d:	83 c4 1c             	add    esp,0x1c
c000f810:	c3                   	ret    

c000f811 <liballoc_free(void*, int)>:
c000f811:	83 ec 0c             	sub    esp,0xc
c000f814:	e8 01 26 00 00       	call   c0011e1a <Virt::getAKernelVAS()>
c000f819:	83 ec 08             	sub    esp,0x8
c000f81c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f820:	50                   	push   eax
c000f821:	e8 02 29 00 00       	call   c0012128 <VAS::freeAllocatedPages(unsigned long)>
c000f826:	b8 00 00 00 00       	mov    eax,0x0
c000f82b:	83 c4 1c             	add    esp,0x1c
c000f82e:	c3                   	ret    

c000f82f <realloc>:
c000f82f:	83 ec 14             	sub    esp,0x14
c000f832:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f836:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f83a:	e8 15 1e ff ff       	call   c0001654 <dlrealloc>
c000f83f:	83 c4 1c             	add    esp,0x1c
c000f842:	c3                   	ret    

c000f843 <malloc>:
c000f843:	83 ec 18             	sub    esp,0x18
c000f846:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f84a:	e8 c8 18 ff ff       	call   c0001117 <dlmalloc>
c000f84f:	83 c4 1c             	add    esp,0x1c
c000f852:	c3                   	ret    

c000f853 <free>:
c000f853:	83 ec 18             	sub    esp,0x18
c000f856:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f85a:	e8 5d 15 ff ff       	call   c0000dbc <dlfree>
c000f85f:	83 c4 1c             	add    esp,0x1c
c000f862:	c3                   	ret    

c000f863 <rfree>:
c000f863:	83 ec 18             	sub    esp,0x18
c000f866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f86a:	e8 4d 15 ff ff       	call   c0000dbc <dlfree>
c000f86f:	83 c4 1c             	add    esp,0x1c
c000f872:	c3                   	ret    

c000f873 <calloc>:
c000f873:	56                   	push   esi
c000f874:	53                   	push   ebx
c000f875:	83 ec 10             	sub    esp,0x10
c000f878:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f87c:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f881:	53                   	push   ebx
c000f882:	e8 bc ff ff ff       	call   c000f843 <malloc>
c000f887:	89 c6                	mov    esi,eax
c000f889:	83 c4 0c             	add    esp,0xc
c000f88c:	53                   	push   ebx
c000f88d:	6a 00                	push   0x0
c000f88f:	50                   	push   eax
c000f890:	e8 e3 0e ff ff       	call   c0000778 <memset>
c000f895:	89 f0                	mov    eax,esi
c000f897:	83 c4 14             	add    esp,0x14
c000f89a:	5b                   	pop    ebx
c000f89b:	5e                   	pop    esi
c000f89c:	c3                   	ret    

c000f89d <hwTextMode_loadInData(VgaText*)>:
c000f89d:	55                   	push   ebp
c000f89e:	a1 60 d4 02 c0       	mov    eax,ds:0xc002d460
c000f8a3:	57                   	push   edi
c000f8a4:	56                   	push   esi
c000f8a5:	53                   	push   ebx
c000f8a6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8aa:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8b0:	85 d2                	test   edx,edx
c000f8b2:	7e 2f                	jle    c000f8e3 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b4:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8ba:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8bd:	31 f6                	xor    esi,esi
c000f8bf:	29 fd                	sub    ebp,edi
c000f8c1:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c4:	31 c0                	xor    eax,eax
c000f8c6:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8ca:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8ce:	40                   	inc    eax
c000f8cf:	83 f8 50             	cmp    eax,0x50
c000f8d2:	75 f2                	jne    c000f8c6 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d4:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8da:	46                   	inc    esi
c000f8db:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8e1:	7f de                	jg     c000f8c1 <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e3:	5b                   	pop    ebx
c000f8e4:	5e                   	pop    esi
c000f8e5:	5f                   	pop    edi
c000f8e6:	5d                   	pop    ebp
c000f8e7:	c3                   	ret    

c000f8e8 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e8:	55                   	push   ebp
c000f8e9:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000f8f0:	57                   	push   edi
c000f8f1:	56                   	push   esi
c000f8f2:	53                   	push   ebx
c000f8f3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f7:	75 50                	jne    c000f949 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f9:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8ff:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f905:	8b 15 60 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d460
c000f90b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90f:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f915:	eb 0e                	jmp    c000f925 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f917:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91d:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f923:	89 da                	mov    edx,ebx
c000f925:	83 e5 0f             	and    ebp,0xf
c000f928:	c1 e0 04             	shl    eax,0x4
c000f92b:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92e:	0f b6 c0             	movzx  eax,al
c000f931:	41                   	inc    ecx
c000f932:	09 e8                	or     eax,ebp
c000f934:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f938:	c1 e0 08             	shl    eax,0x8
c000f93b:	09 e8                	or     eax,ebp
c000f93d:	39 fb                	cmp    ebx,edi
c000f93f:	66 89 02             	mov    WORD PTR [edx],ax
c000f942:	75 d3                	jne    c000f917 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f944:	5b                   	pop    ebx
c000f945:	5e                   	pop    esi
c000f946:	5f                   	pop    edi
c000f947:	5d                   	pop    ebp
c000f948:	c3                   	ret    
c000f949:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f953:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95d:	31 c0                	xor    eax,eax
c000f95f:	bd 02 00 00 00       	mov    ebp,0x2
c000f964:	eb 9f                	jmp    c000f905 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f966 <hwTextMode_showCursor(VgaText*, bool)>:
c000f966:	56                   	push   esi
c000f967:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000f96e:	53                   	push   ebx
c000f96f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f973:	75 39                	jne    c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f975:	84 c0                	test   al,al
c000f977:	74 38                	je     c000f9b1 <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f979:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97e:	b0 0a                	mov    al,0xa
c000f980:	89 da                	mov    edx,ebx
c000f982:	ee                   	out    dx,al
c000f983:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f988:	89 ca                	mov    edx,ecx
c000f98a:	ec                   	in     al,dx
c000f98b:	b2 0f                	mov    dl,0xf
c000f98d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f991:	83 e0 c0             	and    eax,0xffffffc0
c000f994:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f99a:	09 d0                	or     eax,edx
c000f99c:	89 ca                	mov    edx,ecx
c000f99e:	ee                   	out    dx,al
c000f99f:	b0 0b                	mov    al,0xb
c000f9a1:	89 da                	mov    edx,ebx
c000f9a3:	ee                   	out    dx,al
c000f9a4:	89 ca                	mov    edx,ecx
c000f9a6:	ec                   	in     al,dx
c000f9a7:	83 e0 e0             	and    eax,0xffffffe0
c000f9aa:	83 c8 0f             	or     eax,0xf
c000f9ad:	ee                   	out    dx,al
c000f9ae:	5b                   	pop    ebx
c000f9af:	5e                   	pop    esi
c000f9b0:	c3                   	ret    
c000f9b1:	b0 0a                	mov    al,0xa
c000f9b3:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b8:	ee                   	out    dx,al
c000f9b9:	b0 20                	mov    al,0x20
c000f9bb:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9c0:	ee                   	out    dx,al
c000f9c1:	5b                   	pop    ebx
c000f9c2:	5e                   	pop    esi
c000f9c3:	c3                   	ret    

c000f9c4 <hwTextMode_update(VgaText*)>:
c000f9c4:	c3                   	ret    

c000f9c5 <hwTextMode_updateCursor(VgaText*)>:
c000f9c5:	56                   	push   esi
c000f9c6:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000f9cd:	53                   	push   ebx
c000f9ce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9d2:	75 3f                	jne    c000fa13 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d4:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d9:	b9 19 00 00 00       	mov    ecx,0x19
c000f9de:	89 f2                	mov    edx,esi
c000f9e0:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e6:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9ec:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ef:	c1 e1 04             	shl    ecx,0x4
c000f9f2:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f8:	b0 0f                	mov    al,0xf
c000f9fa:	ee                   	out    dx,al
c000f9fb:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa00:	88 c8                	mov    al,cl
c000fa02:	89 da                	mov    edx,ebx
c000fa04:	ee                   	out    dx,al
c000fa05:	b0 0e                	mov    al,0xe
c000fa07:	89 f2                	mov    edx,esi
c000fa09:	ee                   	out    dx,al
c000fa0a:	89 c8                	mov    eax,ecx
c000fa0c:	89 da                	mov    edx,ebx
c000fa0e:	66 c1 e8 08          	shr    ax,0x8
c000fa12:	ee                   	out    dx,al
c000fa13:	5b                   	pop    ebx
c000fa14:	5e                   	pop    esi
c000fa15:	c3                   	ret    

c000fa16 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa1a:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000fa21:	75 38                	jne    c000fa5b <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa23:	ba da 03 00 00       	mov    edx,0x3da
c000fa28:	84 c0                	test   al,al
c000fa2a:	75 18                	jne    c000fa44 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa2c:	ec                   	in     al,dx
c000fa2d:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa32:	b0 30                	mov    al,0x30
c000fa34:	89 ca                	mov    edx,ecx
c000fa36:	ee                   	out    dx,al
c000fa37:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa3c:	ec                   	in     al,dx
c000fa3d:	83 c8 08             	or     eax,0x8
c000fa40:	89 ca                	mov    edx,ecx
c000fa42:	ee                   	out    dx,al
c000fa43:	c3                   	ret    
c000fa44:	ec                   	in     al,dx
c000fa45:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa4a:	b0 30                	mov    al,0x30
c000fa4c:	89 ca                	mov    edx,ecx
c000fa4e:	ee                   	out    dx,al
c000fa4f:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa54:	ec                   	in     al,dx
c000fa55:	83 e0 f7             	and    eax,0xfffffff7
c000fa58:	89 ca                	mov    edx,ecx
c000fa5a:	ee                   	out    dx,al
c000fa5b:	c3                   	ret    

c000fa5c <hwTextMode_scrollScreen(VgaText*)>:
c000fa5c:	55                   	push   ebp
c000fa5d:	57                   	push   edi
c000fa5e:	56                   	push   esi
c000fa5f:	53                   	push   ebx
c000fa60:	83 ec 1c             	sub    esp,0x1c
c000fa63:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa67:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000fa6e:	74 14                	je     c000fa84 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa70:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa7a:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa84:	a1 60 d4 02 c0       	mov    eax,ds:0xc002d460
c000fa89:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8e:	05 a0 00 00 00       	add    eax,0xa0
c000fa93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa97:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa9b:	31 c0                	xor    eax,eax
c000fa9d:	eb 0b                	jmp    c000faaa <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9f:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa5:	74 57                	je     c000fafe <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa7:	43                   	inc    ebx
c000faa8:	89 f0                	mov    eax,esi
c000faaa:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000fab0:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab6:	88 13                	mov    BYTE PTR [ebx],dl
c000fab8:	8d 70 01             	lea    esi,[eax+0x1]
c000fabb:	83 fd 18             	cmp    ebp,0x18
c000fabe:	75 df                	jne    c000fa9f <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fac0:	a8 01                	test   al,0x1
c000fac2:	75 13                	jne    c000fad7 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac4:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac7:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000facd:	75 d8                	jne    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facf:	83 c4 1c             	add    esp,0x1c
c000fad2:	5b                   	pop    ebx
c000fad3:	5e                   	pop    esi
c000fad4:	5f                   	pop    edi
c000fad5:	5d                   	pop    ebp
c000fad6:	c3                   	ret    
c000fad7:	83 ec 08             	sub    esp,0x8
c000fada:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fae1:	50                   	push   eax
c000fae2:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae6:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faed:	50                   	push   eax
c000faee:	e8 8f 0c 00 00       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf3:	83 c4 10             	add    esp,0x10
c000faf6:	88 07                	mov    BYTE PTR [edi],al
c000faf8:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fafc:	eb c9                	jmp    c000fac7 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafe:	45                   	inc    ebp
c000faff:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb07:	eb 8e                	jmp    c000fa97 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb09 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb09:	57                   	push   edi
c000fb0a:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000fb11:	56                   	push   esi
c000fb12:	53                   	push   ebx
c000fb13:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb17:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb1b:	75 65                	jne    c000fb82 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1d:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb22:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb27:	83 ec 08             	sub    esp,0x8
c000fb2a:	52                   	push   edx
c000fb2b:	50                   	push   eax
c000fb2c:	e8 51 0c 00 00       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb31:	5a                   	pop    edx
c000fb32:	0f b6 c0             	movzx  eax,al
c000fb35:	59                   	pop    ecx
c000fb36:	50                   	push   eax
c000fb37:	0f be c3             	movsx  eax,bl
c000fb3a:	50                   	push   eax
c000fb3b:	e8 e8 0c 00 00       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c000fb40:	83 c4 10             	add    esp,0x10
c000fb43:	8b 35 60 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d460
c000fb49:	80 3d c0 e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e5c0,0x0
c000fb50:	74 07                	je     c000fb59 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb52:	66 0f be c3          	movsx  ax,bl
c000fb56:	80 cc 02             	or     ah,0x2
c000fb59:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5d:	ba 19 00 00 00       	mov    edx,0x19
c000fb62:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb68:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb6b:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6e:	c1 e1 04             	shl    ecx,0x4
c000fb71:	c1 e2 04             	shl    edx,0x4
c000fb74:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb78:	01 ca                	add    edx,ecx
c000fb7a:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7e:	5b                   	pop    ebx
c000fb7f:	5e                   	pop    esi
c000fb80:	5f                   	pop    edi
c000fb81:	c3                   	ret    
c000fb82:	b8 02 00 00 00       	mov    eax,0x2
c000fb87:	31 d2                	xor    edx,edx
c000fb89:	eb 9c                	jmp    c000fb27 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb8b <setupTextMode()>:
c000fb8b:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb90:	83 e0 30             	and    eax,0x30
c000fb93:	66 83 f8 30          	cmp    ax,0x30
c000fb97:	75 11                	jne    c000fbaa <setupTextMode()+0x1f>
c000fb99:	81 2d 60 d4 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002d460,0x8000
c000fba3:	c6 05 c0 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5c0,0x1
c000fbaa:	c7 05 f8 e5 02 c0 16 fa 00 c0 	mov    DWORD PTR ds:0xc002e5f8,0xc000fa16
c000fbb4:	c7 05 e4 e5 02 c0 9d f8 00 c0 	mov    DWORD PTR ds:0xc002e5e4,0xc000f89d
c000fbbe:	c7 05 e0 e5 02 c0 e8 f8 00 c0 	mov    DWORD PTR ds:0xc002e5e0,0xc000f8e8
c000fbc8:	c7 05 ec e5 02 c0 5c fa 00 c0 	mov    DWORD PTR ds:0xc002e5ec,0xc000fa5c
c000fbd2:	c7 05 f4 e5 02 c0 66 f9 00 c0 	mov    DWORD PTR ds:0xc002e5f4,0xc000f966
c000fbdc:	c7 05 e8 e5 02 c0 c4 f9 00 c0 	mov    DWORD PTR ds:0xc002e5e8,0xc000f9c4
c000fbe6:	c7 05 f0 e5 02 c0 c5 f9 00 c0 	mov    DWORD PTR ds:0xc002e5f0,0xc000f9c5
c000fbf0:	c7 05 fc e5 02 c0 09 fb 00 c0 	mov    DWORD PTR ds:0xc002e5fc,0xc000fb09
c000fbfa:	c3                   	ret    

c000fbfb <kernel_main>:
c000fbfb:	57                   	push   edi
c000fbfc:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc01:	56                   	push   esi
c000fc02:	31 f6                	xor    esi,esi
c000fc04:	53                   	push   ebx
c000fc05:	83 ec 20             	sub    esp,0x20
c000fc08:	e8 cf 09 00 00       	call   c00105dc <installVgaTextImplementation()>
c000fc0d:	e8 79 ff ff ff       	call   c000fb8b <setupTextMode()>
c000fc12:	89 f0                	mov    eax,esi
c000fc14:	89 fa                	mov    edx,edi
c000fc16:	ee                   	out    dx,al
c000fc17:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc1c:	b0 80                	mov    al,0x80
c000fc1e:	89 da                	mov    edx,ebx
c000fc20:	ee                   	out    dx,al
c000fc21:	b1 03                	mov    cl,0x3
c000fc23:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc28:	88 c8                	mov    al,cl
c000fc2a:	ee                   	out    dx,al
c000fc2b:	89 f0                	mov    eax,esi
c000fc2d:	89 fa                	mov    edx,edi
c000fc2f:	ee                   	out    dx,al
c000fc30:	88 c8                	mov    al,cl
c000fc32:	89 da                	mov    edx,ebx
c000fc34:	ee                   	out    dx,al
c000fc35:	b0 c7                	mov    al,0xc7
c000fc37:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc3c:	ee                   	out    dx,al
c000fc3d:	b0 0b                	mov    al,0xb
c000fc3f:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc44:	ee                   	out    dx,al
c000fc45:	83 ec 0c             	sub    esp,0xc
c000fc48:	68 e4 a2 02 c0       	push   0xc002a2e4
c000fc4d:	e8 9d 33 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000fc52:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc57:	05 ff 0f 00 00       	add    eax,0xfff
c000fc5c:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc61:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc64:	e8 2f 04 00 00       	call   c0010098 <Phys::physicalMemorySetup(unsigned int)>
c000fc69:	e8 d0 20 00 00       	call   c0011d3e <Virt::virtualMemorySetup()>
c000fc6e:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc74:	83 c4 10             	add    esp,0x10
c000fc77:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7d:	75 0e                	jne    c000fc8d <kernel_main+0x92>
c000fc7f:	89 d8                	mov    eax,ebx
c000fc81:	25 48 03 00 00       	and    eax,0x348
c000fc86:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8b:	74 10                	je     c000fc9d <kernel_main+0xa2>
c000fc8d:	83 ec 0c             	sub    esp,0xc
c000fc90:	68 0d bc 02 c0       	push   0xc002bc0d
c000fc95:	e8 03 aa 00 00       	call   c001a69d <Krnl::panic(char const*)>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	83 ec 0c             	sub    esp,0xc
c000fca0:	89 1d 40 e5 02 c0    	mov    DWORD PTR ds:0xc002e540,ebx
c000fca6:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcaa:	53                   	push   ebx
c000fcab:	e8 a0 22 00 00       	call   c0011f50 <VAS::VAS()>
c000fcb0:	89 1d ac e6 02 c0    	mov    DWORD PTR ds:0xc002e6ac,ebx
c000fcb6:	e8 65 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcbb:	c7 04 24 fb a2 02 c0 	mov    DWORD PTR [esp],0xc002a2fb
c000fcc2:	e8 28 33 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000fcc7:	e8 f1 20 00 00       	call   c0011dbd <Virt::swappingSetup()>
c000fccc:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fcd3:	e8 6b fb ff ff       	call   c000f843 <malloc>
c000fcd8:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcdb:	89 c6                	mov    esi,eax
c000fcdd:	e8 58 ea ff ff       	call   c000e73a <Computer::Computer()>
c000fce2:	58                   	pop    eax
c000fce3:	89 35 28 e5 02 c0    	mov    DWORD PTR ds:0xc002e528,esi
c000fce9:	5a                   	pop    edx
c000fcea:	56                   	push   esi
c000fceb:	68 18 a3 02 c0       	push   0xc002a318
c000fcf0:	e8 fa 32 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000fcf5:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c000fcfa:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcfc:	6a 00                	push   0x0
c000fcfe:	6a 00                	push   0x0
c000fd00:	6a 00                	push   0x0
c000fd02:	50                   	push   eax
c000fd03:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd06:	83 c4 14             	add    esp,0x14
c000fd09:	53                   	push   ebx
c000fd0a:	e8 f1 24 00 00       	call   c0012200 <VAS::~VAS()>
c000fd0f:	c7 04 24 2b a3 02 c0 	mov    DWORD PTR [esp],0xc002a32b
c000fd16:	e8 82 a9 00 00       	call   c001a69d <Krnl::panic(char const*)>
c000fd1b:	83 c4 30             	add    esp,0x30
c000fd1e:	5b                   	pop    ebx
c000fd1f:	5e                   	pop    esi
c000fd20:	5f                   	pop    edi
c000fd21:	c3                   	ret    

c000fd22 <Phys::allocateDMA(unsigned long)>:
c000fd22:	55                   	push   ebp
c000fd23:	31 d2                	xor    edx,edx
c000fd25:	57                   	push   edi
c000fd26:	31 ed                	xor    ebp,ebp
c000fd28:	56                   	push   esi
c000fd29:	31 c9                	xor    ecx,ecx
c000fd2b:	53                   	push   ebx
c000fd2c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd30:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd36:	31 c0                	xor    eax,eax
c000fd38:	c1 ee 0c             	shr    esi,0xc
c000fd3b:	eb 17                	jmp    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd3d:	85 c9                	test   ecx,ecx
c000fd3f:	75 04                	jne    c000fd45 <Phys::allocateDMA(unsigned long)+0x23>
c000fd41:	89 d5                	mov    ebp,edx
c000fd43:	89 d0                	mov    eax,edx
c000fd45:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd48:	39 de                	cmp    esi,ebx
c000fd4a:	74 20                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x4a>
c000fd4c:	42                   	inc    edx
c000fd4d:	89 d9                	mov    ecx,ebx
c000fd4f:	83 fa 2f             	cmp    edx,0x2f
c000fd52:	7f 11                	jg     c000fd65 <Phys::allocateDMA(unsigned long)+0x43>
c000fd54:	80 ba 80 e5 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1a80],0x0
c000fd5b:	74 e0                	je     c000fd3d <Phys::allocateDMA(unsigned long)+0x1b>
c000fd5d:	31 c9                	xor    ecx,ecx
c000fd5f:	42                   	inc    edx
c000fd60:	83 fa 2f             	cmp    edx,0x2f
c000fd63:	7e ef                	jle    c000fd54 <Phys::allocateDMA(unsigned long)+0x32>
c000fd65:	5b                   	pop    ebx
c000fd66:	31 c0                	xor    eax,eax
c000fd68:	5e                   	pop    esi
c000fd69:	5f                   	pop    edi
c000fd6a:	5d                   	pop    ebp
c000fd6b:	c3                   	ret    
c000fd6c:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd6f:	89 d7                	mov    edi,edx
c000fd71:	4f                   	dec    edi
c000fd72:	79 03                	jns    c000fd77 <Phys::allocateDMA(unsigned long)+0x55>
c000fd74:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd77:	c1 ff 04             	sar    edi,0x4
c000fd7a:	89 c2                	mov    edx,eax
c000fd7c:	c1 fa 04             	sar    edx,0x4
c000fd7f:	39 fa                	cmp    edx,edi
c000fd81:	75 2f                	jne    c000fdb2 <Phys::allocateDMA(unsigned long)+0x90>
c000fd83:	85 db                	test   ebx,ebx
c000fd85:	74 1a                	je     c000fda1 <Phys::allocateDMA(unsigned long)+0x7f>
c000fd87:	be 80 e5 02 c0       	mov    esi,0xc002e580
c000fd8c:	8d 90 80 e5 02 c0    	lea    edx,[eax-0x3ffd1a80]
c000fd92:	f7 d6                	not    esi
c000fd94:	29 c6                	sub    esi,eax
c000fd96:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd99:	42                   	inc    edx
c000fd9a:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd9d:	39 d9                	cmp    ecx,ebx
c000fd9f:	7f f5                	jg     c000fd96 <Phys::allocateDMA(unsigned long)+0x74>
c000fda1:	85 ff                	test   edi,edi
c000fda3:	74 13                	je     c000fdb8 <Phys::allocateDMA(unsigned long)+0x96>
c000fda5:	5b                   	pop    ebx
c000fda6:	05 50 20 0c 00       	add    eax,0xc2050
c000fdab:	5e                   	pop    esi
c000fdac:	c1 e0 0c             	shl    eax,0xc
c000fdaf:	5f                   	pop    edi
c000fdb0:	5d                   	pop    ebp
c000fdb1:	c3                   	ret    
c000fdb2:	89 ea                	mov    edx,ebp
c000fdb4:	31 c9                	xor    ecx,ecx
c000fdb6:	eb a7                	jmp    c000fd5f <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb8:	5b                   	pop    ebx
c000fdb9:	c1 e0 0c             	shl    eax,0xc
c000fdbc:	5e                   	pop    esi
c000fdbd:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdc2:	5f                   	pop    edi
c000fdc3:	5d                   	pop    ebp
c000fdc4:	c3                   	ret    

c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdc5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdcd:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdd3:	c1 e9 0c             	shr    ecx,0xc
c000fdd6:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fddb:	76 25                	jbe    c000fe02 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fddd:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fde2:	c1 e8 0c             	shr    eax,0xc
c000fde5:	8d 50 10             	lea    edx,[eax+0x10]
c000fde8:	85 c9                	test   ecx,ecx
c000fdea:	74 15                	je     c000fe01 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fdec:	8d 82 80 e5 02 c0    	lea    eax,[edx-0x3ffd1a80]
c000fdf2:	8d 94 11 80 e5 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1a80]
c000fdf9:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdfc:	40                   	inc    eax
c000fdfd:	39 d0                	cmp    eax,edx
c000fdff:	75 f8                	jne    c000fdf9 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe01:	c3                   	ret    
c000fe02:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe08:	c1 ea 0c             	shr    edx,0xc
c000fe0b:	eb db                	jmp    c000fde8 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe0d <Phys::setPageState(unsigned long, bool)>:
c000fe0d:	56                   	push   esi
c000fe0e:	ba 01 00 00 00       	mov    edx,0x1
c000fe13:	53                   	push   ebx
c000fe14:	8b 35 58 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d458
c000fe1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe1e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe22:	89 c8                	mov    eax,ecx
c000fe24:	83 e1 07             	and    ecx,0x7
c000fe27:	c1 e8 03             	shr    eax,0x3
c000fe2a:	d3 e3                	shl    ebx,cl
c000fe2c:	01 c6                	add    esi,eax
c000fe2e:	d3 e2                	shl    edx,cl
c000fe30:	f7 d2                	not    edx
c000fe32:	20 16                	and    BYTE PTR [esi],dl
c000fe34:	03 05 58 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d458
c000fe3a:	08 18                	or     BYTE PTR [eax],bl
c000fe3c:	5b                   	pop    ebx
c000fe3d:	5e                   	pop    esi
c000fe3e:	c3                   	ret    

c000fe3f <Phys::getPageState(unsigned long)>:
c000fe3f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe43:	8b 15 58 d4 02 c0    	mov    edx,DWORD PTR ds:0xc002d458
c000fe49:	89 c8                	mov    eax,ecx
c000fe4b:	83 e1 07             	and    ecx,0x7
c000fe4e:	c1 e8 03             	shr    eax,0x3
c000fe51:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe55:	d3 f8                	sar    eax,cl
c000fe57:	83 e0 01             	and    eax,0x1
c000fe5a:	c3                   	ret    

c000fe5b <Phys::freePage(unsigned long)>:
c000fe5b:	53                   	push   ebx
c000fe5c:	83 ec 08             	sub    esp,0x8
c000fe5f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe63:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe69:	76 57                	jbe    c000fec2 <Phys::freePage(unsigned long)+0x67>
c000fe6b:	c1 eb 0c             	shr    ebx,0xc
c000fe6e:	53                   	push   ebx
c000fe6f:	e8 cb ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000fe74:	5a                   	pop    edx
c000fe75:	84 c0                	test   al,al
c000fe77:	74 5b                	je     c000fed4 <Phys::freePage(unsigned long)+0x79>
c000fe79:	a1 70 e5 02 c0       	mov    eax,ds:0xc002e570
c000fe7e:	48                   	dec    eax
c000fe7f:	a3 70 e5 02 c0       	mov    ds:0xc002e570,eax
c000fe84:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe87:	8d 04 80             	lea    eax,[eax+eax*4]
c000fe8a:	c1 e0 02             	shl    eax,0x2
c000fe8d:	99                   	cdq    
c000fe8e:	f7 3d 74 e5 02 c0    	idiv   DWORD PTR ds:0xc002e574
c000fe94:	39 05 6c e5 02 c0    	cmp    DWORD PTR ds:0xc002e56c,eax
c000fe9a:	75 13                	jne    c000feaf <Phys::freePage(unsigned long)+0x54>
c000fe9c:	83 ec 08             	sub    esp,0x8
c000fe9f:	6a 00                	push   0x0
c000fea1:	53                   	push   ebx
c000fea2:	e8 66 ff ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000fea7:	83 c4 10             	add    esp,0x10
c000feaa:	83 c4 08             	add    esp,0x8
c000fead:	5b                   	pop    ebx
c000feae:	c3                   	ret    
c000feaf:	83 ec 0c             	sub    esp,0xc
c000feb2:	a3 6c e5 02 c0       	mov    ds:0xc002e56c,eax
c000feb7:	50                   	push   eax
c000feb8:	e8 b3 0a 00 00       	call   c0010970 <VgaText::updateRAMUsageDisplay(int)>
c000febd:	83 c4 10             	add    esp,0x10
c000fec0:	eb da                	jmp    c000fe9c <Phys::freePage(unsigned long)+0x41>
c000fec2:	68 00 10 00 00       	push   0x1000
c000fec7:	53                   	push   ebx
c000fec8:	e8 f8 fe ff ff       	call   c000fdc5 <Phys::freeDMA(unsigned long, unsigned long)>
c000fecd:	59                   	pop    ecx
c000fece:	5b                   	pop    ebx
c000fecf:	83 c4 08             	add    esp,0x8
c000fed2:	5b                   	pop    ebx
c000fed3:	c3                   	ret    
c000fed4:	c7 44 24 10 46 a3 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a346
c000fedc:	83 c4 08             	add    esp,0x8
c000fedf:	5b                   	pop    ebx
c000fee0:	e9 b8 a7 00 00       	jmp    c001a69d <Krnl::panic(char const*)>

c000fee5 <Phys::allocatePage()>:
c000fee5:	56                   	push   esi
c000fee6:	53                   	push   ebx
c000fee7:	83 ec 14             	sub    esp,0x14
c000feea:	8b 35 64 e5 02 c0    	mov    esi,DWORD PTR ds:0xc002e564
c000fef0:	89 f3                	mov    ebx,esi
c000fef2:	eb 0a                	jmp    c000fefe <Phys::allocatePage()+0x19>
c000fef4:	89 1d 64 e5 02 c0    	mov    DWORD PTR ds:0xc002e564,ebx
c000fefa:	39 de                	cmp    esi,ebx
c000fefc:	74 24                	je     c000ff22 <Phys::allocatePage()+0x3d>
c000fefe:	53                   	push   ebx
c000feff:	e8 3b ff ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff04:	5a                   	pop    edx
c000ff05:	84 c0                	test   al,al
c000ff07:	74 7b                	je     c000ff84 <Phys::allocatePage()+0x9f>
c000ff09:	43                   	inc    ebx
c000ff0a:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff10:	75 e2                	jne    c000fef4 <Phys::allocatePage()+0xf>
c000ff12:	31 db                	xor    ebx,ebx
c000ff14:	c7 05 64 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e564,0x0
c000ff1e:	39 de                	cmp    esi,ebx
c000ff20:	75 dc                	jne    c000fefe <Phys::allocatePage()+0x19>
c000ff22:	83 ec 0c             	sub    esp,0xc
c000ff25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff2d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff33:	e8 be 2d 00 00       	call   c0012cf6 <VAS::scanForEviction()>
c000ff38:	83 c4 10             	add    esp,0x10
c000ff3b:	85 c0                	test   eax,eax
c000ff3d:	0f 85 a8 00 00 00    	jne    c000ffeb <Phys::allocatePage()+0x106>
c000ff43:	83 ec 0c             	sub    esp,0xc
c000ff46:	68 6b a3 02 c0       	push   0xc002a36b
c000ff4b:	e8 9f 30 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ff50:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff57:	e8 c6 fd ff ff       	call   c000fd22 <Phys::allocateDMA(unsigned long)>
c000ff5c:	83 c4 10             	add    esp,0x10
c000ff5f:	85 c0                	test   eax,eax
c000ff61:	75 6f                	jne    c000ffd2 <Phys::allocatePage()+0xed>
c000ff63:	83 ec 0c             	sub    esp,0xc
c000ff66:	68 7c a3 02 c0       	push   0xc002a37c
c000ff6b:	e8 2d a7 00 00       	call   c001a69d <Krnl::panic(char const*)>
c000ff70:	83 c4 10             	add    esp,0x10
c000ff73:	8b 1d 64 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e564
c000ff79:	53                   	push   ebx
c000ff7a:	e8 c0 fe ff ff       	call   c000fe3f <Phys::getPageState(unsigned long)>
c000ff7f:	5a                   	pop    edx
c000ff80:	84 c0                	test   al,al
c000ff82:	75 85                	jne    c000ff09 <Phys::allocatePage()+0x24>
c000ff84:	6a 01                	push   0x1
c000ff86:	53                   	push   ebx
c000ff87:	e8 81 fe ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c000ff8c:	a1 70 e5 02 c0       	mov    eax,ds:0xc002e570
c000ff91:	40                   	inc    eax
c000ff92:	a3 70 e5 02 c0       	mov    ds:0xc002e570,eax
c000ff97:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff9a:	8d 04 80             	lea    eax,[eax+eax*4]
c000ff9d:	c1 e0 02             	shl    eax,0x2
c000ffa0:	99                   	cdq    
c000ffa1:	f7 3d 74 e5 02 c0    	idiv   DWORD PTR ds:0xc002e574
c000ffa7:	5a                   	pop    edx
c000ffa8:	39 05 6c e5 02 c0    	cmp    DWORD PTR ds:0xc002e56c,eax
c000ffae:	59                   	pop    ecx
c000ffaf:	75 27                	jne    c000ffd8 <Phys::allocatePage()+0xf3>
c000ffb1:	83 ec 08             	sub    esp,0x8
c000ffb4:	a1 64 e5 02 c0       	mov    eax,ds:0xc002e564
c000ffb9:	c1 e0 0c             	shl    eax,0xc
c000ffbc:	50                   	push   eax
c000ffbd:	68 5c a3 02 c0       	push   0xc002a35c
c000ffc2:	e8 28 30 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000ffc7:	a1 64 e5 02 c0       	mov    eax,ds:0xc002e564
c000ffcc:	83 c4 10             	add    esp,0x10
c000ffcf:	c1 e0 0c             	shl    eax,0xc
c000ffd2:	83 c4 14             	add    esp,0x14
c000ffd5:	5b                   	pop    ebx
c000ffd6:	5e                   	pop    esi
c000ffd7:	c3                   	ret    
c000ffd8:	83 ec 0c             	sub    esp,0xc
c000ffdb:	a3 6c e5 02 c0       	mov    ds:0xc002e56c,eax
c000ffe0:	50                   	push   eax
c000ffe1:	e8 8a 09 00 00       	call   c0010970 <VgaText::updateRAMUsageDisplay(int)>
c000ffe6:	83 c4 10             	add    esp,0x10
c000ffe9:	eb c6                	jmp    c000ffb1 <Phys::allocatePage()+0xcc>
c000ffeb:	83 ec 08             	sub    esp,0x8
c000ffee:	50                   	push   eax
c000ffef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fff3:	68 5c a3 02 c0       	push   0xc002a35c
c000fff8:	e8 f2 2f 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c000fffd:	83 c4 10             	add    esp,0x10
c0010000:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010004:	eb cc                	jmp    c000ffd2 <Phys::allocatePage()+0xed>

c0010006 <Phys::allocateContiguousPages(int)>:
c0010006:	57                   	push   edi
c0010007:	56                   	push   esi
c0010008:	53                   	push   ebx
c0010009:	31 db                	xor    ebx,ebx
c001000b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001000f:	e8 7e de 00 00       	call   c001de92 <lockScheduler()>
c0010014:	85 db                	test   ebx,ebx
c0010016:	75 11                	jne    c0010029 <Phys::allocateContiguousPages(int)+0x23>
c0010018:	e8 c8 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c001001d:	83 ff 01             	cmp    edi,0x1
c0010020:	89 c6                	mov    esi,eax
c0010022:	74 21                	je     c0010045 <Phys::allocateContiguousPages(int)+0x3f>
c0010024:	bb 01 00 00 00       	mov    ebx,0x1
c0010029:	e8 b7 fe ff ff       	call   c000fee5 <Phys::allocatePage()>
c001002e:	89 da                	mov    edx,ebx
c0010030:	c1 e2 0c             	shl    edx,0xc
c0010033:	01 f2                	add    edx,esi
c0010035:	39 c2                	cmp    edx,eax
c0010037:	74 17                	je     c0010050 <Phys::allocateContiguousPages(int)+0x4a>
c0010039:	bb 01 00 00 00       	mov    ebx,0x1
c001003e:	89 c6                	mov    esi,eax
c0010040:	83 ff 01             	cmp    edi,0x1
c0010043:	75 e4                	jne    c0010029 <Phys::allocateContiguousPages(int)+0x23>
c0010045:	e8 4a de 00 00       	call   c001de94 <unlockScheduler()>
c001004a:	89 f0                	mov    eax,esi
c001004c:	5b                   	pop    ebx
c001004d:	5e                   	pop    esi
c001004e:	5f                   	pop    edi
c001004f:	c3                   	ret    
c0010050:	43                   	inc    ebx
c0010051:	39 fb                	cmp    ebx,edi
c0010053:	75 bf                	jne    c0010014 <Phys::allocateContiguousPages(int)+0xe>
c0010055:	e8 3a de 00 00       	call   c001de94 <unlockScheduler()>
c001005a:	89 f0                	mov    eax,esi
c001005c:	5b                   	pop    ebx
c001005d:	5e                   	pop    esi
c001005e:	5f                   	pop    edi
c001005f:	c3                   	ret    

c0010060 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010060:	56                   	push   esi
c0010061:	53                   	push   ebx
c0010062:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010066:	39 1d 68 e5 02 c0    	cmp    DWORD PTR ds:0xc002e568,ebx
c001006c:	73 06                	jae    c0010074 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c001006e:	89 1d 68 e5 02 c0    	mov    DWORD PTR ds:0xc002e568,ebx
c0010074:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0010078:	c1 eb 0c             	shr    ebx,0xc
c001007b:	c1 e8 0c             	shr    eax,0xc
c001007e:	39 d8                	cmp    eax,ebx
c0010080:	73 13                	jae    c0010095 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010082:	6a 00                	push   0x0
c0010084:	8d 70 01             	lea    esi,[eax+0x1]
c0010087:	50                   	push   eax
c0010088:	e8 80 fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c001008d:	5a                   	pop    edx
c001008e:	89 f0                	mov    eax,esi
c0010090:	59                   	pop    ecx
c0010091:	39 f3                	cmp    ebx,esi
c0010093:	75 ed                	jne    c0010082 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0010095:	5b                   	pop    ebx
c0010096:	5e                   	pop    esi
c0010097:	c3                   	ret    

c0010098 <Phys::physicalMemorySetup(unsigned int)>:
c0010098:	55                   	push   ebp
c0010099:	57                   	push   edi
c001009a:	56                   	push   esi
c001009b:	53                   	push   ebx
c001009c:	31 db                	xor    ebx,ebx
c001009e:	83 ec 40             	sub    esp,0x40
c00100a1:	6a 30                	push   0x30
c00100a3:	6a 00                	push   0x0
c00100a5:	68 80 e5 02 c0       	push   0xc002e580
c00100aa:	e8 c9 06 ff ff       	call   c0000778 <memset>
c00100af:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100b3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100b8:	05 00 10 00 00       	add    eax,0x1000
c00100bd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100c1:	83 c4 10             	add    esp,0x10
c00100c4:	83 ec 08             	sub    esp,0x8
c00100c7:	6a 01                	push   0x1
c00100c9:	53                   	push   ebx
c00100ca:	43                   	inc    ebx
c00100cb:	e8 3d fd ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c00100d0:	83 c4 10             	add    esp,0x10
c00100d3:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100d9:	75 e9                	jne    c00100c4 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100db:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100e2:	66 85 c0             	test   ax,ax
c00100e5:	0f 84 8e 01 00 00    	je     c0010279 <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100ef:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100f7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100fb:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010100:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010104:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001010c:	eb 15                	jmp    c0010123 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001010e:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010112:	83 c3 18             	add    ebx,0x18
c0010115:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010119:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001011d:	0f 84 66 01 00 00    	je     c0010289 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010123:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010126:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0010129:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001012c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010130:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010134:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010136:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0010139:	01 f0                	add    eax,esi
c001013b:	55                   	push   ebp
c001013c:	11 fa                	adc    edx,edi
c001013e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010142:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001014a:	56                   	push   esi
c001014b:	68 b4 a3 02 c0       	push   0xc002a3b4
c0010150:	e8 9a 2e 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0010155:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010159:	83 c4 10             	add    esp,0x10
c001015c:	09 f8                	or     eax,edi
c001015e:	0f 85 25 01 00 00    	jne    c0010289 <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010164:	4d                   	dec    ebp
c0010165:	75 a7                	jne    c001010e <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010167:	ba 00 00 08 00       	mov    edx,0x80000
c001016c:	89 c1                	mov    ecx,eax
c001016e:	39 f2                	cmp    edx,esi
c0010170:	19 f9                	sbb    ecx,edi
c0010172:	0f 82 a7 00 00 00    	jb     c001021f <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010178:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001017c:	89 c1                	mov    ecx,eax
c001017e:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010182:	0f 83 97 00 00 00    	jae    c001021f <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010188:	ba 00 00 0a 00       	mov    edx,0xa0000
c001018d:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010191:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010195:	39 fa                	cmp    edx,edi
c0010197:	19 e8                	sbb    eax,ebp
c0010199:	0f 82 14 01 00 00    	jb     c00102b3 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c001019f:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101a3:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a7:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101ad:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101b2:	83 d5 ff             	adc    ebp,0xffffffff
c00101b5:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101b9:	31 c0                	xor    eax,eax
c00101bb:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101bf:	39 fa                	cmp    edx,edi
c00101c1:	89 c1                	mov    ecx,eax
c00101c3:	19 e9                	sbb    ecx,ebp
c00101c5:	0f 83 43 ff ff ff    	jae    c001010e <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101cb:	be 00 00 08 00       	mov    esi,0x80000
c00101d0:	50                   	push   eax
c00101d1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101d5:	57                   	push   edi
c00101d6:	56                   	push   esi
c00101d7:	68 d8 a3 02 c0       	push   0xc002a3d8
c00101dc:	e8 0e 2e 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00101e1:	5a                   	pop    edx
c00101e2:	59                   	pop    ecx
c00101e3:	57                   	push   edi
c00101e4:	56                   	push   esi
c00101e5:	e8 76 fe ff ff       	call   c0010060 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101ea:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101ee:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101f2:	83 c4 0c             	add    esp,0xc
c00101f5:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101f9:	03 05 74 e5 02 c0    	add    eax,DWORD PTR ds:0xc002e574
c00101ff:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010206:	a3 74 e5 02 c0       	mov    ds:0xc002e574,eax
c001020b:	52                   	push   edx
c001020c:	50                   	push   eax
c001020d:	68 98 a3 02 c0       	push   0xc002a398
c0010212:	e8 d8 2d 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0010217:	83 c4 10             	add    esp,0x10
c001021a:	e9 ef fe ff ff       	jmp    c001010e <Phys::physicalMemorySetup(unsigned int)+0x76>
c001021f:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010223:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010227:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001022b:	39 ea                	cmp    edx,ebp
c001022d:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010231:	0f 82 d7 fe ff ff    	jb     c001010e <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010237:	ba ff 1f 00 00       	mov    edx,0x1fff
c001023c:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010240:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010244:	0f 83 c4 fe ff ff    	jae    c001010e <Phys::physicalMemorySetup(unsigned int)+0x76>
c001024a:	39 ee                	cmp    esi,ebp
c001024c:	89 f8                	mov    eax,edi
c001024e:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010252:	0f 83 78 ff ff ff    	jae    c00101d0 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010258:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001025c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010260:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010264:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010268:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001026c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010270:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010274:	e9 57 ff ff ff       	jmp    c00101d0 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010279:	83 ec 0c             	sub    esp,0xc
c001027c:	68 8a a3 02 c0       	push   0xc002a38a
c0010281:	e8 17 a4 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0010286:	83 c4 10             	add    esp,0x10
c0010289:	bb 40 01 00 00       	mov    ebx,0x140
c001028e:	83 ec 08             	sub    esp,0x8
c0010291:	6a 00                	push   0x0
c0010293:	53                   	push   ebx
c0010294:	43                   	inc    ebx
c0010295:	e8 73 fb ff ff       	call   c000fe0d <Phys::setPageState(unsigned long, bool)>
c001029a:	ff 05 74 e5 02 c0    	inc    DWORD PTR ds:0xc002e574
c00102a0:	83 c4 10             	add    esp,0x10
c00102a3:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102a9:	75 e3                	jne    c001028e <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102ab:	83 c4 3c             	add    esp,0x3c
c00102ae:	5b                   	pop    ebx
c00102af:	5e                   	pop    esi
c00102b0:	5f                   	pop    edi
c00102b1:	5d                   	pop    ebp
c00102b2:	c3                   	ret    
c00102b3:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102bb:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102c3:	e9 d7 fe ff ff       	jmp    c001019f <Phys::physicalMemorySetup(unsigned int)+0x107>

c00102c8 <Pipe::isAtty()>:
c00102c8:	31 c0                	xor    eax,eax
c00102ca:	c3                   	ret    
c00102cb:	90                   	nop

c00102cc <Pipe::~Pipe()>:
c00102cc:	83 ec 0c             	sub    esp,0xc
c00102cf:	ba 44 a4 02 c0       	mov    edx,0xc002a444
c00102d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d8:	89 10                	mov    DWORD PTR [eax],edx
c00102da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102de:	83 ec 0c             	sub    esp,0xc
c00102e1:	50                   	push   eax
c00102e2:	e8 37 16 00 00       	call   c001191e <UnixFile::~UnixFile()>
c00102e7:	83 c4 10             	add    esp,0x10
c00102ea:	90                   	nop
c00102eb:	83 c4 0c             	add    esp,0xc
c00102ee:	c3                   	ret    
c00102ef:	90                   	nop

c00102f0 <Pipe::~Pipe()>:
c00102f0:	83 ec 0c             	sub    esp,0xc
c00102f3:	83 ec 0c             	sub    esp,0xc
c00102f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102fa:	e8 cd ff ff ff       	call   c00102cc <Pipe::~Pipe()>
c00102ff:	83 c4 10             	add    esp,0x10
c0010302:	83 ec 08             	sub    esp,0x8
c0010305:	6a 20                	push   0x20
c0010307:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001030b:	e8 ff 2b 00 00       	call   c0012f0f <operator delete(void*, unsigned long)>
c0010310:	83 c4 10             	add    esp,0x10
c0010313:	83 c4 0c             	add    esp,0xc
c0010316:	c3                   	ret    
c0010317:	90                   	nop

c0010318 <Pipe::read(unsigned long long, void*, int*)>:
c0010318:	55                   	push   ebp
c0010319:	57                   	push   edi
c001031a:	56                   	push   esi
c001031b:	53                   	push   ebx
c001031c:	83 ec 1c             	sub    esp,0x1c
c001031f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010323:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010327:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001032b:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c001032e:	89 c8                	mov    eax,ecx
c0010330:	99                   	cdq    
c0010331:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010335:	74 19                	je     c0010350 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010337:	39 f9                	cmp    ecx,edi
c0010339:	89 d1                	mov    ecx,edx
c001033b:	19 f1                	sbb    ecx,esi
c001033d:	73 11                	jae    c0010350 <Pipe::read(unsigned long long, void*, int*)+0x38>
c001033f:	e8 4e db 00 00       	call   c001de92 <lockScheduler()>
c0010344:	e8 85 de 00 00       	call   c001e1ce <schedule()>
c0010349:	e8 46 db 00 00       	call   c001de94 <unlockScheduler()>
c001034e:	eb db                	jmp    c001032b <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010350:	39 f8                	cmp    eax,edi
c0010352:	89 d1                	mov    ecx,edx
c0010354:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0010358:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001035c:	19 f1                	sbb    ecx,esi
c001035e:	73 08                	jae    c0010368 <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010360:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010364:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0010368:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001036b:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c001036e:	29 c6                	sub    esi,eax
c0010370:	89 f1                	mov    ecx,esi
c0010372:	c1 f9 1f             	sar    ecx,0x1f
c0010375:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0010379:	89 ca                	mov    edx,ecx
c001037b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001037f:	19 d1                	sbb    ecx,edx
c0010381:	73 04                	jae    c0010387 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010383:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010387:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001038b:	89 fd                	mov    ebp,edi
c001038d:	29 f5                	sub    ebp,esi
c001038f:	85 f6                	test   esi,esi
c0010391:	74 12                	je     c00103a5 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010393:	52                   	push   edx
c0010394:	56                   	push   esi
c0010395:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c0010398:	50                   	push   eax
c0010399:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001039d:	e8 a2 03 ff ff       	call   c0000744 <memcpy>
c00103a2:	83 c4 10             	add    esp,0x10
c00103a5:	85 ed                	test   ebp,ebp
c00103a7:	74 12                	je     c00103bb <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103a9:	50                   	push   eax
c00103aa:	55                   	push   ebp
c00103ab:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103ae:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103b2:	56                   	push   esi
c00103b3:	e8 8c 03 ff ff       	call   c0000744 <memcpy>
c00103b8:	83 c4 10             	add    esp,0x10
c00103bb:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103be:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103c1:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103c4:	99                   	cdq    
c00103c5:	89 f7                	mov    edi,esi
c00103c7:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103cb:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103cf:	c1 ff 1f             	sar    edi,0x1f
c00103d2:	57                   	push   edi
c00103d3:	56                   	push   esi
c00103d4:	52                   	push   edx
c00103d5:	50                   	push   eax
c00103d6:	e8 91 67 01 00       	call   c0026b6c <__umoddi3>
c00103db:	83 c4 10             	add    esp,0x10
c00103de:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103e1:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103e6:	75 10                	jne    c00103f8 <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103e8:	83 ec 0c             	sub    esp,0xc
c00103eb:	68 01 a4 02 c0       	push   0xc002a401
c00103f0:	e8 a8 a2 00 00       	call   c001a69d <Krnl::panic(char const*)>
c00103f5:	83 c4 10             	add    esp,0x10
c00103f8:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010400:	89 10                	mov    DWORD PTR [eax],edx
c0010402:	83 c4 1c             	add    esp,0x1c
c0010405:	31 c0                	xor    eax,eax
c0010407:	5b                   	pop    ebx
c0010408:	5e                   	pop    esi
c0010409:	5f                   	pop    edi
c001040a:	5d                   	pop    ebp
c001040b:	c3                   	ret    

c001040c <Pipe::write(unsigned long long, void*, int*)>:
c001040c:	55                   	push   ebp
c001040d:	57                   	push   edi
c001040e:	56                   	push   esi
c001040f:	53                   	push   ebx
c0010410:	83 ec 1c             	sub    esp,0x1c
c0010413:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010417:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001041b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001041f:	89 04 24             	mov    DWORD PTR [esp],eax
c0010422:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010425:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c0010428:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001042c:	89 de                	mov    esi,ebx
c001042e:	89 df                	mov    edi,ebx
c0010430:	c1 ff 1f             	sar    edi,0x1f
c0010433:	01 c6                	add    esi,eax
c0010435:	89 c8                	mov    eax,ecx
c0010437:	11 d7                	adc    edi,edx
c0010439:	99                   	cdq    
c001043a:	39 f1                	cmp    ecx,esi
c001043c:	89 d0                	mov    eax,edx
c001043e:	19 f8                	sbb    eax,edi
c0010440:	b8 01 00 00 00       	mov    eax,0x1
c0010445:	0f 82 80 00 00 00    	jb     c00104cb <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001044b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001044e:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010451:	01 d8                	add    eax,ebx
c0010453:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010457:	99                   	cdq    
c0010458:	f7 f9                	idiv   ecx
c001045a:	29 d1                	sub    ecx,edx
c001045c:	89 d7                	mov    edi,edx
c001045e:	89 c8                	mov    eax,ecx
c0010460:	99                   	cdq    
c0010461:	39 ce                	cmp    esi,ecx
c0010463:	19 d3                	sbb    ebx,edx
c0010465:	bb 00 00 00 00       	mov    ebx,0x0
c001046a:	72 04                	jb     c0010470 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001046c:	89 f3                	mov    ebx,esi
c001046e:	29 cb                	sub    ebx,ecx
c0010470:	89 f1                	mov    ecx,esi
c0010472:	29 d9                	sub    ecx,ebx
c0010474:	74 1a                	je     c0010490 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010476:	52                   	push   edx
c0010477:	51                   	push   ecx
c0010478:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001047c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010480:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010483:	57                   	push   edi
c0010484:	e8 bb 02 ff ff       	call   c0000744 <memcpy>
c0010489:	83 c4 10             	add    esp,0x10
c001048c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010490:	85 db                	test   ebx,ebx
c0010492:	74 12                	je     c00104a6 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010494:	50                   	push   eax
c0010495:	53                   	push   ebx
c0010496:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001049a:	51                   	push   ecx
c001049b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c001049e:	e8 a1 02 ff ff       	call   c0000744 <memcpy>
c00104a3:	83 c4 10             	add    esp,0x10
c00104a6:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104a9:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104ae:	75 10                	jne    c00104c0 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104b0:	83 ec 0c             	sub    esp,0xc
c00104b3:	68 1d a4 02 c0       	push   0xc002a41d
c00104b8:	e8 e0 a1 00 00       	call   c001a69d <Krnl::panic(char const*)>
c00104bd:	83 c4 10             	add    esp,0x10
c00104c0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104c4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104c7:	89 38                	mov    DWORD PTR [eax],edi
c00104c9:	31 c0                	xor    eax,eax
c00104cb:	83 c4 1c             	add    esp,0x1c
c00104ce:	5b                   	pop    ebx
c00104cf:	5e                   	pop    esi
c00104d0:	5f                   	pop    edi
c00104d1:	5d                   	pop    ebp
c00104d2:	c3                   	ret    
c00104d3:	90                   	nop

c00104d4 <Pipe::Pipe(int)>:
c00104d4:	83 ec 0c             	sub    esp,0xc
c00104d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104db:	83 ec 08             	sub    esp,0x8
c00104de:	6a 00                	push   0x0
c00104e0:	50                   	push   eax
c00104e1:	e8 56 12 00 00       	call   c001173c <UnixFile::UnixFile(int)>
c00104e6:	83 c4 10             	add    esp,0x10
c00104e9:	ba 44 a4 02 c0       	mov    edx,0xc002a444
c00104ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f2:	89 10                	mov    DWORD PTR [eax],edx
c00104f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104fc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010503:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001050a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001050e:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010515:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010519:	83 ec 0c             	sub    esp,0xc
c001051c:	50                   	push   eax
c001051d:	e8 21 f3 ff ff       	call   c000f843 <malloc>
c0010522:	83 c4 10             	add    esp,0x10
c0010525:	89 c2                	mov    edx,eax
c0010527:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001052e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010532:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010536:	90                   	nop
c0010537:	83 c4 0c             	add    esp,0xc
c001053a:	c3                   	ret    
c001053b:	90                   	nop

c001053c <VgaText::isAtty()>:
c001053c:	b0 01                	mov    al,0x1
c001053e:	c3                   	ret    
c001053f:	90                   	nop

c0010540 <VgaText::~VgaText()>:
c0010540:	83 ec 0c             	sub    esp,0xc
c0010543:	ba 00 a5 02 c0       	mov    edx,0xc002a500
c0010548:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054c:	89 10                	mov    DWORD PTR [eax],edx
c001054e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010552:	83 ec 0c             	sub    esp,0xc
c0010555:	50                   	push   eax
c0010556:	e8 c3 13 00 00       	call   c001191e <UnixFile::~UnixFile()>
c001055b:	83 c4 10             	add    esp,0x10
c001055e:	90                   	nop
c001055f:	83 c4 0c             	add    esp,0xc
c0010562:	c3                   	ret    
c0010563:	90                   	nop

c0010564 <VgaText::~VgaText()>:
c0010564:	83 ec 0c             	sub    esp,0xc
c0010567:	83 ec 0c             	sub    esp,0xc
c001056a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001056e:	e8 cd ff ff ff       	call   c0010540 <VgaText::~VgaText()>
c0010573:	83 c4 10             	add    esp,0x10
c0010576:	83 ec 08             	sub    esp,0x8
c0010579:	68 60 12 00 00       	push   0x1260
c001057e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010582:	e8 88 29 00 00       	call   c0012f0f <operator delete(void*, unsigned long)>
c0010587:	83 c4 10             	add    esp,0x10
c001058a:	83 c4 0c             	add    esp,0xc
c001058d:	c3                   	ret    

c001058e <VgaText::read(unsigned long long, void*, int*)>:
c001058e:	83 ec 10             	sub    esp,0x10
c0010591:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010595:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001059d:	e8 fc 5d 00 00       	call   c001639e <readKeyboard(VgaText*, char*, unsigned long)>
c00105a2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105a6:	89 02                	mov    DWORD PTR [edx],eax
c00105a8:	31 c0                	xor    eax,eax
c00105aa:	83 c4 1c             	add    esp,0x1c
c00105ad:	c3                   	ret    

c00105ae <setTerminalScrollLock(bool)>:
c00105ae:	c3                   	ret    

c00105af <addToTerminalCycle(VgaText*)>:
c00105af:	8b 15 00 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e600
c00105b5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105b9:	85 d2                	test   edx,edx
c00105bb:	75 0c                	jne    c00105c9 <addToTerminalCycle(VgaText*)+0x1a>
c00105bd:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105c3:	a3 00 e6 02 c0       	mov    ds:0xc002e600,eax
c00105c8:	c3                   	ret    
c00105c9:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105cf:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105d5:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105db:	c3                   	ret    

c00105dc <installVgaTextImplementation()>:
c00105dc:	83 ec 10             	sub    esp,0x10
c00105df:	6a 20                	push   0x20
c00105e1:	6a 00                	push   0x0
c00105e3:	68 e0 e5 02 c0       	push   0xc002e5e0
c00105e8:	e8 8b 01 ff ff       	call   c0000778 <memset>
c00105ed:	83 c4 1c             	add    esp,0x1c
c00105f0:	c3                   	ret    

c00105f1 <scrollTerminalScrollLock(int)>:
c00105f1:	c3                   	ret    

c00105f2 <VgaText::load()>:
c00105f2:	53                   	push   ebx
c00105f3:	31 c0                	xor    eax,eax
c00105f5:	83 ec 58             	sub    esp,0x58
c00105f8:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105fc:	89 e2                	mov    edx,esp
c00105fe:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010602:	40                   	inc    eax
c0010603:	83 f8 50             	cmp    eax,0x50
c0010606:	75 f6                	jne    c00105fe <VgaText::load()+0xc>
c0010608:	31 c0                	xor    eax,eax
c001060a:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010611:	84 c9                	test   cl,cl
c0010613:	74 06                	je     c001061b <VgaText::load()+0x29>
c0010615:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0010618:	40                   	inc    eax
c0010619:	eb ef                	jmp    c001060a <VgaText::load()+0x18>
c001061b:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010621:	85 c0                	test   eax,eax
c0010623:	74 09                	je     c001062e <VgaText::load()+0x3c>
c0010625:	51                   	push   ecx
c0010626:	51                   	push   ecx
c0010627:	52                   	push   edx
c0010628:	53                   	push   ebx
c0010629:	ff d0                	call   eax
c001062b:	83 c4 10             	add    esp,0x10
c001062e:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010634:	85 c0                	test   eax,eax
c0010636:	74 09                	je     c0010641 <VgaText::load()+0x4f>
c0010638:	83 ec 0c             	sub    esp,0xc
c001063b:	53                   	push   ebx
c001063c:	ff d0                	call   eax
c001063e:	83 c4 10             	add    esp,0x10
c0010641:	83 c4 58             	add    esp,0x58
c0010644:	5b                   	pop    ebx
c0010645:	c3                   	ret    

c0010646 <VgaText::updateCursor()>:
c0010646:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001064a:	39 05 04 e6 02 c0    	cmp    DWORD PTR ds:0xc002e604,eax
c0010650:	75 0c                	jne    c001065e <VgaText::updateCursor()+0x18>
c0010652:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c0010658:	85 c0                	test   eax,eax
c001065a:	74 02                	je     c001065e <VgaText::updateCursor()+0x18>
c001065c:	ff e0                	jmp    eax
c001065e:	c3                   	ret    
c001065f:	90                   	nop

c0010660 <VgaText::showCursor(bool)>:
c0010660:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010664:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010668:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c001066e:	c3                   	ret    
c001066f:	90                   	nop

c0010670 <VgaText::disableBlink(bool)>:
c0010670:	56                   	push   esi
c0010671:	53                   	push   ebx
c0010672:	51                   	push   ecx
c0010673:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010677:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001067b:	39 1d 04 e6 02 c0    	cmp    DWORD PTR ds:0xc002e604,ebx
c0010681:	75 18                	jne    c001069b <VgaText::disableBlink(bool)+0x2b>
c0010683:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c0010689:	85 c0                	test   eax,eax
c001068b:	74 0e                	je     c001069b <VgaText::disableBlink(bool)+0x2b>
c001068d:	89 f1                	mov    ecx,esi
c001068f:	52                   	push   edx
c0010690:	52                   	push   edx
c0010691:	0f b6 d1             	movzx  edx,cl
c0010694:	52                   	push   edx
c0010695:	53                   	push   ebx
c0010696:	ff d0                	call   eax
c0010698:	83 c4 10             	add    esp,0x10
c001069b:	89 f0                	mov    eax,esi
c001069d:	83 f0 01             	xor    eax,0x1
c00106a0:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106a6:	58                   	pop    eax
c00106a7:	5b                   	pop    ebx
c00106a8:	5e                   	pop    esi
c00106a9:	c3                   	ret    

c00106aa <VgaText::doANSI_SGR(int)>:
c00106aa:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106b2:	85 d2                	test   edx,edx
c00106b4:	75 14                	jne    c00106ca <VgaText::doANSI_SGR(int)+0x20>
c00106b6:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106bc:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106c2:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106c8:	eb 65                	jmp    c001072f <VgaText::doANSI_SGR(int)+0x85>
c00106ca:	83 fa 07             	cmp    edx,0x7
c00106cd:	75 14                	jne    c00106e3 <VgaText::doANSI_SGR(int)+0x39>
c00106cf:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106d5:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106db:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106e1:	eb 4c                	jmp    c001072f <VgaText::doANSI_SGR(int)+0x85>
c00106e3:	83 fa 1b             	cmp    edx,0x1b
c00106e6:	74 ce                	je     c00106b6 <VgaText::doANSI_SGR(int)+0xc>
c00106e8:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106eb:	83 f9 07             	cmp    ecx,0x7
c00106ee:	77 09                	ja     c00106f9 <VgaText::doANSI_SGR(int)+0x4f>
c00106f0:	8b 14 8d 80 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b80]
c00106f7:	eb 20                	jmp    c0010719 <VgaText::doANSI_SGR(int)+0x6f>
c00106f9:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106fc:	83 f9 07             	cmp    ecx,0x7
c00106ff:	77 09                	ja     c001070a <VgaText::doANSI_SGR(int)+0x60>
c0010701:	8b 14 8d 80 d4 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2b80]
c0010708:	eb 25                	jmp    c001072f <VgaText::doANSI_SGR(int)+0x85>
c001070a:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001070d:	83 f9 07             	cmp    ecx,0x7
c0010710:	77 0e                	ja     c0010720 <VgaText::doANSI_SGR(int)+0x76>
c0010712:	8b 14 95 38 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2cc8]
c0010719:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c001071f:	c3                   	ret    
c0010720:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010723:	83 f9 07             	cmp    ecx,0x7
c0010726:	77 0d                	ja     c0010735 <VgaText::doANSI_SGR(int)+0x8b>
c0010728:	8b 14 95 10 d3 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2cf0]
c001072f:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010735:	c3                   	ret    

c0010736 <VgaText::setDefaultBgColour(VgaColour)>:
c0010736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001073a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001073e:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010744:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001074a:	c3                   	ret    
c001074b:	90                   	nop

c001074c <VgaText::setDefaultFgColour(VgaColour)>:
c001074c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010750:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010754:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001075a:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010760:	c3                   	ret    
c0010761:	90                   	nop

c0010762 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010762:	53                   	push   ebx
c0010763:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010767:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001076b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001076f:	51                   	push   ecx
c0010770:	e8 c1 ff ff ff       	call   c0010736 <VgaText::setDefaultBgColour(VgaColour)>
c0010775:	58                   	pop    eax
c0010776:	5a                   	pop    edx
c0010777:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001077b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001077f:	5b                   	pop    ebx
c0010780:	eb ca                	jmp    c001074c <VgaText::setDefaultFgColour(VgaColour)>

c0010782 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010782:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010786:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001078b:	83 e0 0f             	and    eax,0xf
c001078e:	c1 e2 04             	shl    edx,0x4
c0010791:	09 d0                	or     eax,edx
c0010793:	c3                   	ret    

c0010794 <VgaText::scrollScreen()>:
c0010794:	57                   	push   edi
c0010795:	56                   	push   esi
c0010796:	be 01 00 00 00       	mov    esi,0x1
c001079b:	53                   	push   ebx
c001079c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107a0:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107a6:	31 ff                	xor    edi,edi
c00107a8:	01 d9                	add    ecx,ebx
c00107aa:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107ad:	83 fe 17             	cmp    esi,0x17
c00107b0:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107b6:	75 28                	jne    c00107e0 <VgaText::scrollScreen()+0x4c>
c00107b8:	f7 c7 01 00 00 00    	test   edi,0x1
c00107be:	74 1c                	je     c00107dc <VgaText::scrollScreen()+0x48>
c00107c0:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107c7:	50                   	push   eax
c00107c8:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107cf:	50                   	push   eax
c00107d0:	e8 ad ff ff ff       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c00107d5:	5a                   	pop    edx
c00107d6:	5a                   	pop    edx
c00107d7:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107da:	eb 04                	jmp    c00107e0 <VgaText::scrollScreen()+0x4c>
c00107dc:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107e0:	47                   	inc    edi
c00107e1:	41                   	inc    ecx
c00107e2:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107e8:	75 c0                	jne    c00107aa <VgaText::scrollScreen()+0x16>
c00107ea:	46                   	inc    esi
c00107eb:	83 fe 18             	cmp    esi,0x18
c00107ee:	75 b0                	jne    c00107a0 <VgaText::scrollScreen()+0xc>
c00107f0:	39 1d 04 e6 02 c0    	cmp    DWORD PTR ds:0xc002e604,ebx
c00107f6:	75 24                	jne    c001081c <VgaText::scrollScreen()+0x88>
c00107f8:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c00107ff:	74 08                	je     c0010809 <VgaText::scrollScreen()+0x75>
c0010801:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010807:	eb 13                	jmp    c001081c <VgaText::scrollScreen()+0x88>
c0010809:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c001080f:	85 c0                	test   eax,eax
c0010811:	74 09                	je     c001081c <VgaText::scrollScreen()+0x88>
c0010813:	83 ec 0c             	sub    esp,0xc
c0010816:	53                   	push   ebx
c0010817:	ff d0                	call   eax
c0010819:	83 c4 10             	add    esp,0x10
c001081c:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010820:	5b                   	pop    ebx
c0010821:	5e                   	pop    esi
c0010822:	5f                   	pop    edi
c0010823:	e9 1e fe ff ff       	jmp    c0010646 <VgaText::updateCursor()>

c0010828 <VgaText::combineCharAndColour(char, unsigned char)>:
c0010828:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001082d:	c1 e0 08             	shl    eax,0x8
c0010830:	89 c2                	mov    edx,eax
c0010832:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010837:	09 d0                	or     eax,edx
c0010839:	c3                   	ret    

c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001083a:	53                   	push   ebx
c001083b:	83 ec 08             	sub    esp,0x8
c001083e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010842:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010847:	50                   	push   eax
c0010848:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001084d:	50                   	push   eax
c001084e:	e8 2f ff ff ff       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c0010853:	5a                   	pop    edx
c0010854:	0f b6 c0             	movzx  eax,al
c0010857:	5b                   	pop    ebx
c0010858:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001085d:	50                   	push   eax
c001085e:	53                   	push   ebx
c001085f:	e8 c4 ff ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010864:	5a                   	pop    edx
c0010865:	5a                   	pop    edx
c0010866:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001086c:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010870:	0f b7 d2             	movzx  edx,dx
c0010873:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c0010878:	39 0d 04 e6 02 c0    	cmp    DWORD PTR ds:0xc002e604,ecx
c001087e:	75 14                	jne    c0010894 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010880:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010886:	85 c0                	test   eax,eax
c0010888:	74 0a                	je     c0010894 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001088a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001088e:	83 c4 08             	add    esp,0x8
c0010891:	5b                   	pop    ebx
c0010892:	ff e0                	jmp    eax
c0010894:	83 c4 08             	add    esp,0x8
c0010897:	5b                   	pop    ebx
c0010898:	c3                   	ret    
c0010899:	90                   	nop

c001089a <VgaText::getCursorX()>:
c001089a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001089e:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108a4:	c3                   	ret    
c00108a5:	90                   	nop

c00108a6 <VgaText::getCursorY()>:
c00108a6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108aa:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108b0:	c3                   	ret    
c00108b1:	90                   	nop

c00108b2 <VgaText::setCursor(int, int)>:
c00108b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108ba:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108c0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108c4:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108ca:	e9 77 fd ff ff       	jmp    c0010646 <VgaText::updateCursor()>
c00108cf:	90                   	nop

c00108d0 <VgaText::setCursorX(int)>:
c00108d0:	83 ec 10             	sub    esp,0x10
c00108d3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108d7:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e1:	50                   	push   eax
c00108e2:	e8 cb ff ff ff       	call   c00108b2 <VgaText::setCursor(int, int)>
c00108e7:	83 c4 1c             	add    esp,0x1c
c00108ea:	c3                   	ret    
c00108eb:	90                   	nop

c00108ec <VgaText::setCursorY(int)>:
c00108ec:	83 ec 10             	sub    esp,0x10
c00108ef:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108f7:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108fd:	50                   	push   eax
c00108fe:	e8 af ff ff ff       	call   c00108b2 <VgaText::setCursor(int, int)>
c0010903:	83 c4 1c             	add    esp,0x1c
c0010906:	c3                   	ret    
c0010907:	90                   	nop

c0010908 <VgaText::incrementCursor(bool)>:
c0010908:	56                   	push   esi
c0010909:	53                   	push   ebx
c001090a:	51                   	push   ecx
c001090b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001090f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010913:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c0010919:	40                   	inc    eax
c001091a:	83 f8 50             	cmp    eax,0x50
c001091d:	74 08                	je     c0010927 <VgaText::incrementCursor(bool)+0x1f>
c001091f:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010925:	eb 33                	jmp    c001095a <VgaText::incrementCursor(bool)+0x52>
c0010927:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001092d:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010937:	8d 50 01             	lea    edx,[eax+0x1]
c001093a:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010940:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010946:	75 12                	jne    c001095a <VgaText::incrementCursor(bool)+0x52>
c0010948:	83 ec 0c             	sub    esp,0xc
c001094b:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010951:	53                   	push   ebx
c0010952:	e8 3d fe ff ff       	call   c0010794 <VgaText::scrollScreen()>
c0010957:	83 c4 10             	add    esp,0x10
c001095a:	89 f0                	mov    eax,esi
c001095c:	84 c0                	test   al,al
c001095e:	74 0c                	je     c001096c <VgaText::incrementCursor(bool)+0x64>
c0010960:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010964:	5a                   	pop    edx
c0010965:	5b                   	pop    ebx
c0010966:	5e                   	pop    esi
c0010967:	e9 da fc ff ff       	jmp    c0010646 <VgaText::updateCursor()>
c001096c:	58                   	pop    eax
c001096d:	5b                   	pop    ebx
c001096e:	5e                   	pop    esi
c001096f:	c3                   	ret    

c0010970 <VgaText::updateRAMUsageDisplay(int)>:
c0010970:	56                   	push   esi
c0010971:	8b 35 60 d4 02 c0    	mov    esi,DWORD PTR ds:0xc002d460
c0010977:	53                   	push   ebx
c0010978:	bb 0a 00 00 00       	mov    ebx,0xa
c001097d:	6a 0f                	push   0xf
c001097f:	6a 00                	push   0x0
c0010981:	e8 fc fd ff ff       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c0010986:	5a                   	pop    edx
c0010987:	59                   	pop    ecx
c0010988:	0f b6 c8             	movzx  ecx,al
c001098b:	51                   	push   ecx
c001098c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010990:	99                   	cdq    
c0010991:	f7 fb                	idiv   ebx
c0010993:	89 d3                	mov    ebx,edx
c0010995:	83 c0 30             	add    eax,0x30
c0010998:	83 c3 30             	add    ebx,0x30
c001099b:	0f be c0             	movsx  eax,al
c001099e:	0f b6 db             	movzx  ebx,bl
c00109a1:	50                   	push   eax
c00109a2:	e8 81 fe ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c00109a7:	5a                   	pop    edx
c00109a8:	5a                   	pop    edx
c00109a9:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109b0:	51                   	push   ecx
c00109b1:	53                   	push   ebx
c00109b2:	e8 71 fe ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c00109b7:	5b                   	pop    ebx
c00109b8:	5a                   	pop    edx
c00109b9:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109c0:	51                   	push   ecx
c00109c1:	6a 25                	push   0x25
c00109c3:	e8 60 fe ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c00109c8:	59                   	pop    ecx
c00109c9:	5b                   	pop    ebx
c00109ca:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109d1:	5b                   	pop    ebx
c00109d2:	5e                   	pop    esi
c00109d3:	c3                   	ret    

c00109d4 <VgaText::updateDiskUsage()>:
c00109d4:	55                   	push   ebp
c00109d5:	bd 10 27 00 00       	mov    ebp,0x2710
c00109da:	57                   	push   edi
c00109db:	8b 3d 60 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d460
c00109e1:	56                   	push   esi
c00109e2:	53                   	push   ebx
c00109e3:	6a 0f                	push   0xf
c00109e5:	6a 00                	push   0x0
c00109e7:	e8 96 fd ff ff       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c00109ec:	5a                   	pop    edx
c00109ed:	0f b6 d8             	movzx  ebx,al
c00109f0:	59                   	pop    ecx
c00109f1:	8b 35 88 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032888
c00109f7:	53                   	push   ebx
c00109f8:	b9 0a 00 00 00       	mov    ecx,0xa
c00109fd:	89 f0                	mov    eax,esi
c00109ff:	99                   	cdq    
c0010a00:	f7 fd                	idiv   ebp
c0010a02:	99                   	cdq    
c0010a03:	f7 f9                	idiv   ecx
c0010a05:	8d 42 30             	lea    eax,[edx+0x30]
c0010a08:	0f b6 c0             	movzx  eax,al
c0010a0b:	50                   	push   eax
c0010a0c:	e8 17 fe ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a11:	5d                   	pop    ebp
c0010a12:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a17:	5a                   	pop    edx
c0010a18:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a1c:	53                   	push   ebx
c0010a1d:	89 f0                	mov    eax,esi
c0010a1f:	99                   	cdq    
c0010a20:	f7 fd                	idiv   ebp
c0010a22:	99                   	cdq    
c0010a23:	f7 f9                	idiv   ecx
c0010a25:	8d 42 30             	lea    eax,[edx+0x30]
c0010a28:	0f b6 c0             	movzx  eax,al
c0010a2b:	50                   	push   eax
c0010a2c:	e8 f7 fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a31:	5d                   	pop    ebp
c0010a32:	bd 64 00 00 00       	mov    ebp,0x64
c0010a37:	5a                   	pop    edx
c0010a38:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a3f:	53                   	push   ebx
c0010a40:	89 f0                	mov    eax,esi
c0010a42:	99                   	cdq    
c0010a43:	f7 fd                	idiv   ebp
c0010a45:	99                   	cdq    
c0010a46:	f7 f9                	idiv   ecx
c0010a48:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4b:	0f b6 c0             	movzx  eax,al
c0010a4e:	50                   	push   eax
c0010a4f:	e8 d4 fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a54:	5d                   	pop    ebp
c0010a55:	5a                   	pop    edx
c0010a56:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a5d:	53                   	push   ebx
c0010a5e:	89 f0                	mov    eax,esi
c0010a60:	99                   	cdq    
c0010a61:	f7 f9                	idiv   ecx
c0010a63:	89 d6                	mov    esi,edx
c0010a65:	99                   	cdq    
c0010a66:	f7 f9                	idiv   ecx
c0010a68:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6b:	0f b6 c0             	movzx  eax,al
c0010a6e:	50                   	push   eax
c0010a6f:	e8 b4 fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a74:	5d                   	pop    ebp
c0010a75:	5a                   	pop    edx
c0010a76:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a7d:	53                   	push   ebx
c0010a7e:	8d 46 30             	lea    eax,[esi+0x30]
c0010a81:	0f b6 f0             	movzx  esi,al
c0010a84:	56                   	push   esi
c0010a85:	e8 9e fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010a8a:	5e                   	pop    esi
c0010a8b:	8b 35 84 28 03 c0    	mov    esi,DWORD PTR ds:0xc0032884
c0010a91:	5d                   	pop    ebp
c0010a92:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a99:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a9e:	53                   	push   ebx
c0010a9f:	89 f0                	mov    eax,esi
c0010aa1:	99                   	cdq    
c0010aa2:	f7 fd                	idiv   ebp
c0010aa4:	99                   	cdq    
c0010aa5:	f7 f9                	idiv   ecx
c0010aa7:	8d 42 30             	lea    eax,[edx+0x30]
c0010aaa:	0f b6 c0             	movzx  eax,al
c0010aad:	50                   	push   eax
c0010aae:	e8 75 fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab3:	5a                   	pop    edx
c0010ab4:	5d                   	pop    ebp
c0010ab5:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010abc:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ac1:	53                   	push   ebx
c0010ac2:	89 f0                	mov    eax,esi
c0010ac4:	99                   	cdq    
c0010ac5:	f7 fd                	idiv   ebp
c0010ac7:	99                   	cdq    
c0010ac8:	f7 f9                	idiv   ecx
c0010aca:	8d 42 30             	lea    eax,[edx+0x30]
c0010acd:	0f b6 c0             	movzx  eax,al
c0010ad0:	50                   	push   eax
c0010ad1:	e8 52 fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad6:	5a                   	pop    edx
c0010ad7:	5d                   	pop    ebp
c0010ad8:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010adf:	bd 64 00 00 00       	mov    ebp,0x64
c0010ae4:	53                   	push   ebx
c0010ae5:	89 f0                	mov    eax,esi
c0010ae7:	99                   	cdq    
c0010ae8:	f7 fd                	idiv   ebp
c0010aea:	99                   	cdq    
c0010aeb:	f7 f9                	idiv   ecx
c0010aed:	83 c2 30             	add    edx,0x30
c0010af0:	0f b6 d2             	movzx  edx,dl
c0010af3:	52                   	push   edx
c0010af4:	e8 2f fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010af9:	5a                   	pop    edx
c0010afa:	5d                   	pop    ebp
c0010afb:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b02:	53                   	push   ebx
c0010b03:	89 f0                	mov    eax,esi
c0010b05:	99                   	cdq    
c0010b06:	f7 f9                	idiv   ecx
c0010b08:	89 d6                	mov    esi,edx
c0010b0a:	99                   	cdq    
c0010b0b:	f7 f9                	idiv   ecx
c0010b0d:	8d 42 30             	lea    eax,[edx+0x30]
c0010b10:	0f b6 c0             	movzx  eax,al
c0010b13:	50                   	push   eax
c0010b14:	e8 0f fd ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b19:	5a                   	pop    edx
c0010b1a:	59                   	pop    ecx
c0010b1b:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b22:	53                   	push   ebx
c0010b23:	8d 46 30             	lea    eax,[esi+0x30]
c0010b26:	0f b6 f0             	movzx  esi,al
c0010b29:	56                   	push   esi
c0010b2a:	e8 f9 fc ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010b2f:	5b                   	pop    ebx
c0010b30:	5e                   	pop    esi
c0010b31:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b38:	5b                   	pop    ebx
c0010b39:	5e                   	pop    esi
c0010b3a:	5f                   	pop    edi
c0010b3b:	5d                   	pop    ebp
c0010b3c:	c3                   	ret    
c0010b3d:	90                   	nop

c0010b3e <VgaText::updateTitle()>:
c0010b3e:	53                   	push   ebx
c0010b3f:	31 c0                	xor    eax,eax
c0010b41:	83 ec 58             	sub    esp,0x58
c0010b44:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b48:	89 e1                	mov    ecx,esp
c0010b4a:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b4e:	40                   	inc    eax
c0010b4f:	83 f8 50             	cmp    eax,0x50
c0010b52:	75 f6                	jne    c0010b4a <VgaText::updateTitle()+0xc>
c0010b54:	31 c0                	xor    eax,eax
c0010b56:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b5d:	84 db                	test   bl,bl
c0010b5f:	74 06                	je     c0010b67 <VgaText::updateTitle()+0x29>
c0010b61:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b64:	40                   	inc    eax
c0010b65:	eb ef                	jmp    c0010b56 <VgaText::updateTitle()+0x18>
c0010b67:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b6d:	85 c0                	test   eax,eax
c0010b6f:	74 09                	je     c0010b7a <VgaText::updateTitle()+0x3c>
c0010b71:	53                   	push   ebx
c0010b72:	53                   	push   ebx
c0010b73:	51                   	push   ecx
c0010b74:	52                   	push   edx
c0010b75:	ff d0                	call   eax
c0010b77:	83 c4 10             	add    esp,0x10
c0010b7a:	e8 55 fe ff ff       	call   c00109d4 <VgaText::updateDiskUsage()>
c0010b7f:	83 c4 58             	add    esp,0x58
c0010b82:	5b                   	pop    ebx
c0010b83:	c3                   	ret    

c0010b84 <VgaText::setTitleTextColour(VgaColour)>:
c0010b84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b8c:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b92:	eb aa                	jmp    c0010b3e <VgaText::updateTitle()>

c0010b94 <VgaText::setTitleColour(VgaColour)>:
c0010b94:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b9c:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010ba2:	eb 9a                	jmp    c0010b3e <VgaText::updateTitle()>

c0010ba4 <VgaText::setTitle(char*)>:
c0010ba4:	53                   	push   ebx
c0010ba5:	83 ec 10             	sub    esp,0x10
c0010ba8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb0:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bb6:	50                   	push   eax
c0010bb7:	e8 78 fc fe ff       	call   c0000834 <strcpy>
c0010bbc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bc0:	83 c4 18             	add    esp,0x18
c0010bc3:	5b                   	pop    ebx
c0010bc4:	e9 75 ff ff ff       	jmp    c0010b3e <VgaText::updateTitle()>
c0010bc9:	90                   	nop

c0010bca <VgaText::decrementCursor(bool)>:
c0010bca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bce:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bd2:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bd8:	85 c0                	test   eax,eax
c0010bda:	74 07                	je     c0010be3 <VgaText::decrementCursor(bool)+0x19>
c0010bdc:	48                   	dec    eax
c0010bdd:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010be3:	84 c9                	test   cl,cl
c0010be5:	74 09                	je     c0010bf0 <VgaText::decrementCursor(bool)+0x26>
c0010be7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010beb:	e9 56 fa ff ff       	jmp    c0010646 <VgaText::updateCursor()>
c0010bf0:	c3                   	ret    
c0010bf1:	90                   	nop

c0010bf2 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bf2:	53                   	push   ebx
c0010bf3:	83 ec 08             	sub    esp,0x8
c0010bf6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bfa:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010bfe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c02:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c06:	3c 07                	cmp    al,0x7
c0010c08:	75 2a                	jne    c0010c34 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c0a:	a1 b4 e6 02 c0       	mov    eax,ds:0xc002e6b4
c0010c0f:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c17:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c1f:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c27:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c2b:	83 c4 08             	add    esp,0x8
c0010c2e:	5b                   	pop    ebx
c0010c2f:	e9 ba 31 00 00       	jmp    c0013dee <Buzzer::beep(int, int, bool)>
c0010c34:	3c 0d                	cmp    al,0xd
c0010c36:	75 0c                	jne    c0010c44 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c38:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c42:	eb 3b                	jmp    c0010c7f <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c44:	3c 0a                	cmp    al,0xa
c0010c46:	75 40                	jne    c0010c88 <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c48:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c4e:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c58:	8d 50 01             	lea    edx,[eax+0x1]
c0010c5b:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c61:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c67:	75 12                	jne    c0010c7b <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c69:	83 ec 0c             	sub    esp,0xc
c0010c6c:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c72:	53                   	push   ebx
c0010c73:	e8 1c fb ff ff       	call   c0010794 <VgaText::scrollScreen()>
c0010c78:	83 c4 10             	add    esp,0x10
c0010c7b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c7f:	83 c4 08             	add    esp,0x8
c0010c82:	5b                   	pop    ebx
c0010c83:	e9 be f9 ff ff       	jmp    c0010646 <VgaText::updateCursor()>
c0010c88:	3c 08                	cmp    al,0x8
c0010c8a:	75 31                	jne    c0010cbd <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c8c:	50                   	push   eax
c0010c8d:	50                   	push   eax
c0010c8e:	6a 01                	push   0x1
c0010c90:	53                   	push   ebx
c0010c91:	e8 34 ff ff ff       	call   c0010bca <VgaText::decrementCursor(bool)>
c0010c96:	5a                   	pop    edx
c0010c97:	59                   	pop    ecx
c0010c98:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010c9e:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ca4:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010caa:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cb0:	6a 20                	push   0x20
c0010cb2:	53                   	push   ebx
c0010cb3:	e8 82 fb ff ff       	call   c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cb8:	83 c4 28             	add    esp,0x28
c0010cbb:	5b                   	pop    ebx
c0010cbc:	c3                   	ret    
c0010cbd:	83 ec 08             	sub    esp,0x8
c0010cc0:	0f be c0             	movsx  eax,al
c0010cc3:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010cc9:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ccf:	51                   	push   ecx
c0010cd0:	52                   	push   edx
c0010cd1:	50                   	push   eax
c0010cd2:	53                   	push   ebx
c0010cd3:	e8 62 fb ff ff       	call   c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cd8:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cdc:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ce4:	83 c4 28             	add    esp,0x28
c0010ce7:	5b                   	pop    ebx
c0010ce8:	e9 1b fc ff ff       	jmp    c0010908 <VgaText::incrementCursor(bool)>
c0010ced:	90                   	nop

c0010cee <VgaText::isShowingCursor()>:
c0010cee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf2:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cf8:	c3                   	ret    
c0010cf9:	90                   	nop

c0010cfa <VgaText::isBlinkDisabled()>:
c0010cfa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cfe:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d04:	83 f0 01             	xor    eax,0x1
c0010d07:	c3                   	ret    

c0010d08 <VgaText::setCursorHeight(int)>:
c0010d08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d10:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d16:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d1d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d21:	e9 3a f9 ff ff       	jmp    c0010660 <VgaText::showCursor(bool)>

c0010d26 <VgaText::getCursorHeight()>:
c0010d26:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d2a:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d30:	c3                   	ret    

c0010d31 <setActiveTerminal(VgaText*)>:
c0010d31:	53                   	push   ebx
c0010d32:	83 ec 08             	sub    esp,0x8
c0010d35:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d39:	85 db                	test   ebx,ebx
c0010d3b:	75 11                	jne    c0010d4e <setActiveTerminal(VgaText*)+0x1d>
c0010d3d:	c7 44 24 10 58 a4 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a458
c0010d45:	83 c4 08             	add    esp,0x8
c0010d48:	5b                   	pop    ebx
c0010d49:	e9 4f 99 00 00       	jmp    c001a69d <Krnl::panic(char const*)>
c0010d4e:	50                   	push   eax
c0010d4f:	50                   	push   eax
c0010d50:	53                   	push   ebx
c0010d51:	68 66 a4 02 c0       	push   0xc002a466
c0010d56:	e8 94 22 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0010d5b:	a1 04 e6 02 c0       	mov    eax,ds:0xc002e604
c0010d60:	83 c4 10             	add    esp,0x10
c0010d63:	85 c0                	test   eax,eax
c0010d65:	74 0c                	je     c0010d73 <setActiveTerminal(VgaText*)+0x42>
c0010d67:	83 ec 0c             	sub    esp,0xc
c0010d6a:	50                   	push   eax
c0010d6b:	e8 d6 f8 ff ff       	call   c0010646 <VgaText::updateCursor()>
c0010d70:	83 c4 10             	add    esp,0x10
c0010d73:	89 1d 04 e6 02 c0    	mov    DWORD PTR ds:0xc002e604,ebx
c0010d79:	51                   	push   ecx
c0010d7a:	51                   	push   ecx
c0010d7b:	53                   	push   ebx
c0010d7c:	68 7e a4 02 c0       	push   0xc002a47e
c0010d81:	e8 69 22 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0010d86:	83 c4 0c             	add    esp,0xc
c0010d89:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d8f:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d95:	53                   	push   ebx
c0010d96:	e8 17 fb ff ff       	call   c00108b2 <VgaText::setCursor(int, int)>
c0010d9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d9e:	e8 57 ff ff ff       	call   c0010cfa <VgaText::isBlinkDisabled()>
c0010da3:	5a                   	pop    edx
c0010da4:	0f b6 c0             	movzx  eax,al
c0010da7:	59                   	pop    ecx
c0010da8:	50                   	push   eax
c0010da9:	53                   	push   ebx
c0010daa:	e8 c1 f8 ff ff       	call   c0010670 <VgaText::disableBlink(bool)>
c0010daf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db2:	e8 6f ff ff ff       	call   c0010d26 <VgaText::getCursorHeight()>
c0010db7:	5a                   	pop    edx
c0010db8:	59                   	pop    ecx
c0010db9:	50                   	push   eax
c0010dba:	53                   	push   ebx
c0010dbb:	e8 48 ff ff ff       	call   c0010d08 <VgaText::setCursorHeight(int)>
c0010dc0:	83 c4 10             	add    esp,0x10
c0010dc3:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dca:	75 0a                	jne    c0010dd6 <setActiveTerminal(VgaText*)+0xa5>
c0010dcc:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dd6:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010dda:	83 c4 08             	add    esp,0x8
c0010ddd:	5b                   	pop    ebx
c0010dde:	e9 0f f8 ff ff       	jmp    c00105f2 <VgaText::load()>

c0010de3 <doTerminalCycle()>:
c0010de3:	83 ec 18             	sub    esp,0x18
c0010de6:	a1 00 e6 02 c0       	mov    eax,ds:0xc002e600
c0010deb:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010df1:	50                   	push   eax
c0010df2:	a3 00 e6 02 c0       	mov    ds:0xc002e600,eax
c0010df7:	e8 35 ff ff ff       	call   c0010d31 <setActiveTerminal(VgaText*)>
c0010dfc:	83 c4 1c             	add    esp,0x1c
c0010dff:	c3                   	ret    

c0010e00 <VgaText::doUpdate()>:
c0010e00:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e04:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e0a:	85 c0                	test   eax,eax
c0010e0c:	74 02                	je     c0010e10 <VgaText::doUpdate()+0x10>
c0010e0e:	ff e0                	jmp    eax
c0010e10:	c3                   	ret    
c0010e11:	90                   	nop

c0010e12 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e12:	55                   	push   ebp
c0010e13:	57                   	push   edi
c0010e14:	56                   	push   esi
c0010e15:	53                   	push   ebx
c0010e16:	83 ec 1c             	sub    esp,0x1c
c0010e19:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e1d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e22:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e29:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e2c:	50                   	push   eax
c0010e2d:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e32:	50                   	push   eax
c0010e33:	e8 4a f9 ff ff       	call   c0010782 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e38:	59                   	pop    ecx
c0010e39:	0f b6 c0             	movzx  eax,al
c0010e3c:	5b                   	pop    ebx
c0010e3d:	31 c9                	xor    ecx,ecx
c0010e3f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e47:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e4b:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e51:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e55:	0f b7 db             	movzx  ebx,bx
c0010e58:	01 db                	add    ebx,ebx
c0010e5a:	01 fb                	add    ebx,edi
c0010e5c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e5f:	84 c0                	test   al,al
c0010e61:	0f 84 38 01 00 00    	je     c0010f9f <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e67:	3c 0d                	cmp    al,0xd
c0010e69:	75 0f                	jne    c0010e7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e6b:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e75:	e9 1f 01 00 00       	jmp    c0010f99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e7a:	3c 0a                	cmp    al,0xa
c0010e7c:	75 5b                	jne    c0010ed9 <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e7e:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e84:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e8e:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e91:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e97:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e9d:	75 12                	jne    c0010eb1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010e9f:	83 ec 0c             	sub    esp,0xc
c0010ea2:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010ea8:	55                   	push   ebp
c0010ea9:	e8 e6 f8 ff ff       	call   c0010794 <VgaText::scrollScreen()>
c0010eae:	83 c4 10             	add    esp,0x10
c0010eb1:	83 ec 0c             	sub    esp,0xc
c0010eb4:	55                   	push   ebp
c0010eb5:	e8 8c f7 ff ff       	call   c0010646 <VgaText::updateCursor()>
c0010eba:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ec2:	83 c4 10             	add    esp,0x10
c0010ec5:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ecb:	31 c9                	xor    ecx,ecx
c0010ecd:	0f b7 db             	movzx  ebx,bx
c0010ed0:	01 db                	add    ebx,ebx
c0010ed2:	01 fb                	add    ebx,edi
c0010ed4:	e9 c0 00 00 00       	jmp    c0010f99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010ed9:	3c 08                	cmp    al,0x8
c0010edb:	75 4e                	jne    c0010f2b <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010edd:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ee1:	53                   	push   ebx
c0010ee2:	53                   	push   ebx
c0010ee3:	6a 01                	push   0x1
c0010ee5:	55                   	push   ebp
c0010ee6:	e8 df fc ff ff       	call   c0010bca <VgaText::decrementCursor(bool)>
c0010eeb:	58                   	pop    eax
c0010eec:	5a                   	pop    edx
c0010eed:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ef3:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010ef9:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010eff:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f05:	6a 20                	push   0x20
c0010f07:	55                   	push   ebp
c0010f08:	e8 2d f9 ff ff       	call   c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f0d:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f15:	83 c4 20             	add    esp,0x20
c0010f18:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f1e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f22:	0f b7 db             	movzx  ebx,bx
c0010f25:	01 db                	add    ebx,ebx
c0010f27:	01 fb                	add    ebx,edi
c0010f29:	eb 6e                	jmp    c0010f99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f2b:	51                   	push   ecx
c0010f2c:	51                   	push   ecx
c0010f2d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f31:	50                   	push   eax
c0010f32:	e8 f1 f8 ff ff       	call   c0010828 <VgaText::combineCharAndColour(char, unsigned char)>
c0010f37:	83 c4 10             	add    esp,0x10
c0010f3a:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f3d:	39 2d 04 e6 02 c0    	cmp    DWORD PTR ds:0xc002e604,ebp
c0010f43:	75 2a                	jne    c0010f6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f45:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f4b:	85 c0                	test   eax,eax
c0010f4d:	74 20                	je     c0010f6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f4f:	52                   	push   edx
c0010f50:	52                   	push   edx
c0010f51:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f57:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f5d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f61:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f65:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f68:	51                   	push   ecx
c0010f69:	55                   	push   ebp
c0010f6a:	ff d0                	call   eax
c0010f6c:	83 c4 20             	add    esp,0x20
c0010f6f:	83 c3 02             	add    ebx,0x2
c0010f72:	50                   	push   eax
c0010f73:	50                   	push   eax
c0010f74:	6a 00                	push   0x0
c0010f76:	55                   	push   ebp
c0010f77:	e8 8c f9 ff ff       	call   c0010908 <VgaText::incrementCursor(bool)>
c0010f7c:	83 c4 10             	add    esp,0x10
c0010f7f:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f86:	75 0f                	jne    c0010f97 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f88:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f90:	0f b7 db             	movzx  ebx,bx
c0010f93:	01 db                	add    ebx,ebx
c0010f95:	01 fb                	add    ebx,edi
c0010f97:	b1 01                	mov    cl,0x1
c0010f99:	46                   	inc    esi
c0010f9a:	e9 bd fe ff ff       	jmp    c0010e5c <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010f9f:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fa3:	83 ec 0c             	sub    esp,0xc
c0010fa6:	55                   	push   ebp
c0010fa7:	e8 9a f6 ff ff       	call   c0010646 <VgaText::updateCursor()>
c0010fac:	83 c4 10             	add    esp,0x10
c0010faf:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fb3:	84 c9                	test   cl,cl
c0010fb5:	74 0c                	je     c0010fc3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fb7:	83 ec 0c             	sub    esp,0xc
c0010fba:	55                   	push   ebp
c0010fbb:	e8 40 fe ff ff       	call   c0010e00 <VgaText::doUpdate()>
c0010fc0:	83 c4 10             	add    esp,0x10
c0010fc3:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fca:	83 c4 1c             	add    esp,0x1c
c0010fcd:	5b                   	pop    ebx
c0010fce:	5e                   	pop    esi
c0010fcf:	5f                   	pop    edi
c0010fd0:	5d                   	pop    ebp
c0010fd1:	c3                   	ret    

c0010fd2 <VgaText::clearScreen()>:
c0010fd2:	57                   	push   edi
c0010fd3:	56                   	push   esi
c0010fd4:	31 f6                	xor    esi,esi
c0010fd6:	53                   	push   ebx
c0010fd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fdb:	52                   	push   edx
c0010fdc:	6a 00                	push   0x0
c0010fde:	6a 00                	push   0x0
c0010fe0:	53                   	push   ebx
c0010fe1:	e8 cc f8 ff ff       	call   c00108b2 <VgaText::setCursor(int, int)>
c0010fe6:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010ff6:	7e 26                	jle    c001101e <VgaText::clearScreen()+0x4c>
c0010ff8:	31 ff                	xor    edi,edi
c0010ffa:	50                   	push   eax
c0010ffb:	50                   	push   eax
c0010ffc:	56                   	push   esi
c0010ffd:	57                   	push   edi
c0010ffe:	47                   	inc    edi
c0010fff:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011005:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001100b:	6a 20                	push   0x20
c001100d:	53                   	push   ebx
c001100e:	e8 27 f8 ff ff       	call   c001083a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011013:	83 c4 20             	add    esp,0x20
c0011016:	83 ff 50             	cmp    edi,0x50
c0011019:	75 df                	jne    c0010ffa <VgaText::clearScreen()+0x28>
c001101b:	46                   	inc    esi
c001101c:	eb d2                	jmp    c0010ff0 <VgaText::clearScreen()+0x1e>
c001101e:	83 ec 0c             	sub    esp,0xc
c0011021:	53                   	push   ebx
c0011022:	e8 d9 fd ff ff       	call   c0010e00 <VgaText::doUpdate()>
c0011027:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c001102e:	83 c4 10             	add    esp,0x10
c0011031:	5b                   	pop    ebx
c0011032:	5e                   	pop    esi
c0011033:	5f                   	pop    edi
c0011034:	c3                   	ret    
c0011035:	90                   	nop

c0011036 <VgaText::putchar(char)>:
c0011036:	56                   	push   esi
c0011037:	53                   	push   ebx
c0011038:	83 ec 14             	sub    esp,0x14
c001103b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001103f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011043:	3c 5b                	cmp    al,0x5b
c0011045:	75 21                	jne    c0011068 <VgaText::putchar(char)+0x32>
c0011047:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c001104e:	74 28                	je     c0011078 <VgaText::putchar(char)+0x42>
c0011050:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c0011059:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011063:	e9 e2 00 00 00       	jmp    c001114a <VgaText::putchar(char)+0x114>
c0011068:	3c 1b                	cmp    al,0x1b
c001106a:	75 0c                	jne    c0011078 <VgaText::putchar(char)+0x42>
c001106c:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011073:	e9 d2 00 00 00       	jmp    c001114a <VgaText::putchar(char)+0x114>
c0011078:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c001107e:	84 c9                	test   cl,cl
c0011080:	0f 84 ab 00 00 00    	je     c0011131 <VgaText::putchar(char)+0xfb>
c0011086:	8d 50 c0             	lea    edx,[eax-0x40]
c0011089:	80 fa 3e             	cmp    dl,0x3e
c001108c:	0f 87 82 00 00 00    	ja     c0011114 <VgaText::putchar(char)+0xde>
c0011092:	3c 6d                	cmp    al,0x6d
c0011094:	75 4d                	jne    c00110e3 <VgaText::putchar(char)+0xad>
c0011096:	31 f6                	xor    esi,esi
c0011098:	31 d2                	xor    edx,edx
c001109a:	31 c0                	xor    eax,eax
c001109c:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110a2:	7e 30                	jle    c00110d4 <VgaText::putchar(char)+0x9e>
c00110a4:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110ac:	80 fa 3b             	cmp    dl,0x3b
c00110af:	75 17                	jne    c00110c8 <VgaText::putchar(char)+0x92>
c00110b1:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110b5:	50                   	push   eax
c00110b6:	53                   	push   ebx
c00110b7:	e8 ee f5 ff ff       	call   c00106aa <VgaText::doANSI_SGR(int)>
c00110bc:	59                   	pop    ecx
c00110bd:	31 d2                	xor    edx,edx
c00110bf:	58                   	pop    eax
c00110c0:	31 c0                	xor    eax,eax
c00110c2:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110c6:	eb 09                	jmp    c00110d1 <VgaText::putchar(char)+0x9b>
c00110c8:	6b c0 0a             	imul   eax,eax,0xa
c00110cb:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110cf:	88 ca                	mov    dl,cl
c00110d1:	46                   	inc    esi
c00110d2:	eb c8                	jmp    c001109c <VgaText::putchar(char)+0x66>
c00110d4:	84 d2                	test   dl,dl
c00110d6:	74 31                	je     c0011109 <VgaText::putchar(char)+0xd3>
c00110d8:	50                   	push   eax
c00110d9:	53                   	push   ebx
c00110da:	e8 cb f5 ff ff       	call   c00106aa <VgaText::doANSI_SGR(int)>
c00110df:	58                   	pop    eax
c00110e0:	5a                   	pop    edx
c00110e1:	eb 26                	jmp    c0011109 <VgaText::putchar(char)+0xd3>
c00110e3:	3c 4a                	cmp    al,0x4a
c00110e5:	75 22                	jne    c0011109 <VgaText::putchar(char)+0xd3>
c00110e7:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110ee:	75 19                	jne    c0011109 <VgaText::putchar(char)+0xd3>
c00110f0:	83 ec 0c             	sub    esp,0xc
c00110f3:	53                   	push   ebx
c00110f4:	e8 d9 fe ff ff       	call   c0010fd2 <VgaText::clearScreen()>
c00110f9:	83 c4 0c             	add    esp,0xc
c00110fc:	6a 00                	push   0x0
c00110fe:	6a 00                	push   0x0
c0011100:	53                   	push   ebx
c0011101:	e8 ac f7 ff ff       	call   c00108b2 <VgaText::setCursor(int, int)>
c0011106:	83 c4 10             	add    esp,0x10
c0011109:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011112:	eb 36                	jmp    c001114a <VgaText::putchar(char)+0x114>
c0011114:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001111a:	83 fa 0e             	cmp    edx,0xe
c001111d:	7f 2b                	jg     c001114a <VgaText::putchar(char)+0x114>
c001111f:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011122:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c0011128:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c001112f:	eb 19                	jmp    c001114a <VgaText::putchar(char)+0x114>
c0011131:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011137:	0f be c0             	movsx  eax,al
c001113a:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011140:	50                   	push   eax
c0011141:	53                   	push   ebx
c0011142:	e8 ab fa ff ff       	call   c0010bf2 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011147:	83 c4 10             	add    esp,0x10
c001114a:	83 c4 14             	add    esp,0x14
c001114d:	5b                   	pop    ebx
c001114e:	5e                   	pop    esi
c001114f:	c3                   	ret    

c0011150 <VgaText::puts(char const*)>:
c0011150:	53                   	push   ebx
c0011151:	83 ec 08             	sub    esp,0x8
c0011154:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0011158:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001115b:	84 c0                	test   al,al
c001115d:	74 12                	je     c0011171 <VgaText::puts(char const*)+0x21>
c001115f:	43                   	inc    ebx
c0011160:	51                   	push   ecx
c0011161:	51                   	push   ecx
c0011162:	50                   	push   eax
c0011163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011167:	e8 ca fe ff ff       	call   c0011036 <VgaText::putchar(char)>
c001116c:	83 c4 10             	add    esp,0x10
c001116f:	eb e7                	jmp    c0011158 <VgaText::puts(char const*)+0x8>
c0011171:	83 c4 08             	add    esp,0x8
c0011174:	5b                   	pop    ebx
c0011175:	c3                   	ret    

c0011176 <VgaText::putx(unsigned int)>:
c0011176:	57                   	push   edi
c0011177:	b9 11 00 00 00       	mov    ecx,0x11
c001117c:	56                   	push   esi
c001117d:	be 9a a4 02 c0       	mov    esi,0xc002a49a
c0011182:	53                   	push   ebx
c0011183:	83 ec 20             	sub    esp,0x20
c0011186:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001118a:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c001118e:	fc                   	cld    
c001118f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011191:	be 08 00 00 00       	mov    esi,0x8
c0011196:	50                   	push   eax
c0011197:	50                   	push   eax
c0011198:	89 d8                	mov    eax,ebx
c001119a:	c1 e3 04             	shl    ebx,0x4
c001119d:	c1 e8 1c             	shr    eax,0x1c
c00111a0:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111a5:	50                   	push   eax
c00111a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111aa:	e8 87 fe ff ff       	call   c0011036 <VgaText::putchar(char)>
c00111af:	83 c4 10             	add    esp,0x10
c00111b2:	4e                   	dec    esi
c00111b3:	75 e1                	jne    c0011196 <VgaText::putx(unsigned int)+0x20>
c00111b5:	83 c4 20             	add    esp,0x20
c00111b8:	5b                   	pop    ebx
c00111b9:	5e                   	pop    esi
c00111ba:	5f                   	pop    edi
c00111bb:	c3                   	ret    

c00111bc <VgaText::VgaText(char const*)>:
c00111bc:	57                   	push   edi
c00111bd:	56                   	push   esi
c00111be:	53                   	push   ebx
c00111bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c3:	83 ec 08             	sub    esp,0x8
c00111c6:	6a 00                	push   0x0
c00111c8:	50                   	push   eax
c00111c9:	e8 6e 05 00 00       	call   c001173c <UnixFile::UnixFile(int)>
c00111ce:	83 c4 10             	add    esp,0x10
c00111d1:	ba 00 a5 02 c0       	mov    edx,0xc002a500
c00111d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111da:	89 10                	mov    DWORD PTR [eax],edx
c00111dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e0:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111ee:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fc:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011207:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c001120e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011212:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001121c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011220:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001122a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001122e:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011235:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011239:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011244:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001124a:	bb e0 e5 02 c0       	mov    ebx,0xc002e5e0
c001124f:	b8 08 00 00 00       	mov    eax,0x8
c0011254:	fc                   	cld    
c0011255:	89 d7                	mov    edi,edx
c0011257:	89 de                	mov    esi,ebx
c0011259:	89 c1                	mov    ecx,eax
c001125b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001125d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011261:	05 1e 10 00 00       	add    eax,0x101e
c0011266:	83 ec 08             	sub    esp,0x8
c0011269:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001126d:	50                   	push   eax
c001126e:	e8 c1 f5 fe ff       	call   c0000834 <strcpy>
c0011273:	83 c4 10             	add    esp,0x10
c0011276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001127a:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011284:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011288:	83 c0 0c             	add    eax,0xc
c001128b:	83 ec 04             	sub    esp,0x4
c001128e:	68 00 0f 00 00       	push   0xf00
c0011293:	6a 00                	push   0x0
c0011295:	50                   	push   eax
c0011296:	e8 dd f4 fe ff       	call   c0000778 <memset>
c001129b:	83 c4 10             	add    esp,0x10
c001129e:	83 ec 04             	sub    esp,0x4
c00112a1:	6a 00                	push   0x0
c00112a3:	6a 07                	push   0x7
c00112a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112a9:	e8 b4 f4 ff ff       	call   c0010762 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112ae:	83 c4 10             	add    esp,0x10
c00112b1:	83 ec 08             	sub    esp,0x8
c00112b4:	6a 02                	push   0x2
c00112b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ba:	e8 49 fa ff ff       	call   c0010d08 <VgaText::setCursorHeight(int)>
c00112bf:	83 c4 10             	add    esp,0x10
c00112c2:	83 ec 04             	sub    esp,0x4
c00112c5:	6a 00                	push   0x0
c00112c7:	6a 00                	push   0x0
c00112c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112cd:	e8 e0 f5 ff ff       	call   c00108b2 <VgaText::setCursor(int, int)>
c00112d2:	83 c4 10             	add    esp,0x10
c00112d5:	83 ec 08             	sub    esp,0x8
c00112d8:	6a 01                	push   0x1
c00112da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112de:	e8 7d f3 ff ff       	call   c0010660 <VgaText::showCursor(bool)>
c00112e3:	83 c4 10             	add    esp,0x10
c00112e6:	83 ec 08             	sub    esp,0x8
c00112e9:	6a 01                	push   0x1
c00112eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ef:	e8 7c f3 ff ff       	call   c0010670 <VgaText::disableBlink(bool)>
c00112f4:	83 c4 10             	add    esp,0x10
c00112f7:	83 ec 0c             	sub    esp,0xc
c00112fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112fe:	e8 cf fc ff ff       	call   c0010fd2 <VgaText::clearScreen()>
c0011303:	83 c4 10             	add    esp,0x10
c0011306:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130a:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011315:	05 9e 10 00 00       	add    eax,0x109e
c001131a:	83 ec 04             	sub    esp,0x4
c001131d:	68 96 00 00 00       	push   0x96
c0011322:	6a 00                	push   0x0
c0011324:	50                   	push   eax
c0011325:	e8 4e f4 fe ff       	call   c0000778 <memset>
c001132a:	83 c4 10             	add    esp,0x10
c001132d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011331:	05 34 11 00 00       	add    eax,0x1134
c0011336:	83 ec 04             	sub    esp,0x4
c0011339:	68 2c 01 00 00       	push   0x12c
c001133e:	6a 00                	push   0x0
c0011340:	50                   	push   eax
c0011341:	e8 32 f4 fe ff       	call   c0000778 <memset>
c0011346:	83 c4 10             	add    esp,0x10
c0011349:	90                   	nop
c001134a:	5b                   	pop    ebx
c001134b:	5e                   	pop    esi
c001134c:	5f                   	pop    edi
c001134d:	c3                   	ret    

c001134e <VgaText::receiveKey(unsigned char)>:
c001134e:	55                   	push   ebp
c001134f:	57                   	push   edi
c0011350:	56                   	push   esi
c0011351:	53                   	push   ebx
c0011352:	83 ec 1c             	sub    esp,0x1c
c0011355:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011359:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001135d:	84 db                	test   bl,bl
c001135f:	0f 84 c9 00 00 00    	je     c001142e <VgaText::receiveKey(unsigned char)+0xe0>
c0011365:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001136b:	80 fb 08             	cmp    bl,0x8
c001136e:	75 2c                	jne    c001139c <VgaText::receiveKey(unsigned char)+0x4e>
c0011370:	83 ec 0c             	sub    esp,0xc
c0011373:	57                   	push   edi
c0011374:	e8 1b f4 fe ff       	call   c0000794 <strlen>
c0011379:	83 c4 10             	add    esp,0x10
c001137c:	85 c0                	test   eax,eax
c001137e:	74 41                	je     c00113c1 <VgaText::receiveKey(unsigned char)+0x73>
c0011380:	50                   	push   eax
c0011381:	50                   	push   eax
c0011382:	6a 08                	push   0x8
c0011384:	56                   	push   esi
c0011385:	e8 ac fc ff ff       	call   c0011036 <VgaText::putchar(char)>
c001138a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001138d:	e8 02 f4 fe ff       	call   c0000794 <strlen>
c0011392:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001139a:	eb 22                	jmp    c00113be <VgaText::receiveKey(unsigned char)+0x70>
c001139c:	0f be c3             	movsx  eax,bl
c001139f:	52                   	push   edx
c00113a0:	52                   	push   edx
c00113a1:	50                   	push   eax
c00113a2:	56                   	push   esi
c00113a3:	e8 8e fc ff ff       	call   c0011036 <VgaText::putchar(char)>
c00113a8:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113ac:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113b1:	59                   	pop    ecx
c00113b2:	5d                   	pop    ebp
c00113b3:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113b7:	50                   	push   eax
c00113b8:	57                   	push   edi
c00113b9:	e8 b6 f5 fe ff       	call   c0000974 <strcat>
c00113be:	83 c4 10             	add    esp,0x10
c00113c1:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113c8:	75 05                	jne    c00113cf <VgaText::receiveKey(unsigned char)+0x81>
c00113ca:	80 fb 0a             	cmp    bl,0xa
c00113cd:	75 53                	jne    c0011422 <VgaText::receiveKey(unsigned char)+0xd4>
c00113cf:	83 ec 0c             	sub    esp,0xc
c00113d2:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113d8:	53                   	push   ebx
c00113d9:	e8 b6 f3 fe ff       	call   c0000794 <strlen>
c00113de:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113e1:	89 c5                	mov    ebp,eax
c00113e3:	e8 ac f3 fe ff       	call   c0000794 <strlen>
c00113e8:	83 c4 10             	add    esp,0x10
c00113eb:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113ef:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113f4:	76 10                	jbe    c0011406 <VgaText::receiveKey(unsigned char)+0xb8>
c00113f6:	83 ec 0c             	sub    esp,0xc
c00113f9:	68 ab a4 02 c0       	push   0xc002a4ab
c00113fe:	e8 9a 92 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0011403:	83 c4 10             	add    esp,0x10
c0011406:	50                   	push   eax
c0011407:	50                   	push   eax
c0011408:	57                   	push   edi
c0011409:	53                   	push   ebx
c001140a:	e8 65 f5 fe ff       	call   c0000974 <strcat>
c001140f:	83 c4 0c             	add    esp,0xc
c0011412:	68 96 00 00 00       	push   0x96
c0011417:	6a 00                	push   0x0
c0011419:	57                   	push   edi
c001141a:	e8 59 f3 fe ff       	call   c0000778 <memset>
c001141f:	83 c4 10             	add    esp,0x10
c0011422:	83 ec 0c             	sub    esp,0xc
c0011425:	56                   	push   esi
c0011426:	e8 d5 f9 ff ff       	call   c0010e00 <VgaText::doUpdate()>
c001142b:	83 c4 10             	add    esp,0x10
c001142e:	83 c4 1c             	add    esp,0x1c
c0011431:	5b                   	pop    ebx
c0011432:	5e                   	pop    esi
c0011433:	5f                   	pop    edi
c0011434:	5d                   	pop    ebp
c0011435:	c3                   	ret    

c0011436 <VgaText::write(unsigned long long, void*, int*)>:
c0011436:	55                   	push   ebp
c0011437:	57                   	push   edi
c0011438:	56                   	push   esi
c0011439:	53                   	push   ebx
c001143a:	83 ec 0c             	sub    esp,0xc
c001143d:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011441:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011445:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0011449:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011450:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011453:	39 eb                	cmp    ebx,ebp
c0011455:	74 13                	je     c001146a <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011457:	43                   	inc    ebx
c0011458:	50                   	push   eax
c0011459:	50                   	push   eax
c001145a:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c001145e:	50                   	push   eax
c001145f:	56                   	push   esi
c0011460:	e8 d1 fb ff ff       	call   c0011036 <VgaText::putchar(char)>
c0011465:	83 c4 10             	add    esp,0x10
c0011468:	eb e9                	jmp    c0011453 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001146a:	83 ec 0c             	sub    esp,0xc
c001146d:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011474:	56                   	push   esi
c0011475:	e8 86 f9 ff ff       	call   c0010e00 <VgaText::doUpdate()>
c001147a:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001147e:	89 38                	mov    DWORD PTR [eax],edi
c0011480:	83 c4 1c             	add    esp,0x1c
c0011483:	31 c0                	xor    eax,eax
c0011485:	5b                   	pop    ebx
c0011486:	5e                   	pop    esi
c0011487:	5f                   	pop    edi
c0011488:	5d                   	pop    ebp
c0011489:	c3                   	ret    

c001148a <newTerminal(char*)>:
c001148a:	83 ec 28             	sub    esp,0x28
c001148d:	68 60 12 00 00       	push   0x1260
c0011492:	e8 ac e3 ff ff       	call   c000f843 <malloc>
c0011497:	5a                   	pop    edx
c0011498:	59                   	pop    ecx
c0011499:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001149d:	50                   	push   eax
c001149e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114a2:	e8 15 fd ff ff       	call   c00111bc <VgaText::VgaText(char const*)>
c00114a7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114ab:	83 c4 2c             	add    esp,0x2c
c00114ae:	c3                   	ret    
c00114af:	90                   	nop

c00114b0 <TSS::TSS()>:
c00114b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114b4:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114bb:	90                   	nop
c00114bc:	c3                   	ret    
c00114bd:	90                   	nop

c00114be <TSS::setESP(unsigned long)>:
c00114be:	55                   	push   ebp
c00114bf:	89 e5                	mov    ebp,esp
c00114c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114cd:	90                   	nop
c00114ce:	5d                   	pop    ebp
c00114cf:	c3                   	ret    

c00114d0 <TSS::flush()>:
c00114d0:	55                   	push   ebp
c00114d1:	89 e5                	mov    ebp,esp
c00114d3:	83 ec 10             	sub    esp,0x10
c00114d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114d9:	8b 00                	mov    eax,DWORD PTR [eax]
c00114db:	83 c8 03             	or     eax,0x3
c00114de:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114e2:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114e6:	66 89 d0             	mov    ax,dx
c00114e9:	0f 00 d8             	ltr    ax
c00114ec:	90                   	nop
c00114ed:	c9                   	leave  
c00114ee:	c3                   	ret    
c00114ef:	90                   	nop

c00114f0 <TSS::setup(unsigned long, unsigned long)>:
c00114f0:	55                   	push   ebp
c00114f1:	89 e5                	mov    ebp,esp
c00114f3:	83 ec 18             	sub    esp,0x18
c00114f6:	83 ec 0c             	sub    esp,0xc
c00114f9:	6a 68                	push   0x68
c00114fb:	e8 43 e3 ff ff       	call   c000f843 <malloc>
c0011500:	83 c4 10             	add    esp,0x10
c0011503:	89 c2                	mov    edx,eax
c0011505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011508:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001150b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011511:	83 ec 04             	sub    esp,0x4
c0011514:	6a 68                	push   0x68
c0011516:	6a 00                	push   0x0
c0011518:	50                   	push   eax
c0011519:	e8 5a f2 fe ff       	call   c0000778 <memset>
c001151e:	83 c4 10             	add    esp,0x10
c0011521:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011524:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011527:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001152d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011530:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011533:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0011539:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001153f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011542:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011545:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011548:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154b:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011551:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011557:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001155d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011560:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011563:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0011569:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001156f:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011575:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011578:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157b:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011584:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011587:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001158d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011590:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011593:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011596:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0011599:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001159f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115a2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ab:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115b8:	0f 20 da             	mov    edx,cr3
c00115bb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115c1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ca:	83 ec 08             	sub    esp,0x8
c00115cd:	50                   	push   eax
c00115ce:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115d1:	50                   	push   eax
c00115d2:	e8 47 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115d7:	83 c4 10             	add    esp,0x10
c00115da:	83 ec 08             	sub    esp,0x8
c00115dd:	6a 68                	push   0x68
c00115df:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115e2:	50                   	push   eax
c00115e3:	e8 52 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115e8:	83 c4 10             	add    esp,0x10
c00115eb:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115ef:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115f2:	83 e0 0f             	and    eax,0xf
c00115f5:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115f8:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115fb:	83 c8 40             	or     eax,0x40
c00115fe:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011601:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0011606:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001160c:	05 78 01 00 00       	add    eax,0x178
c0011611:	83 ec 04             	sub    esp,0x4
c0011614:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011617:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001161a:	50                   	push   eax
c001161b:	e8 4e da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011620:	83 c4 10             	add    esp,0x10
c0011623:	89 c2                	mov    edx,eax
c0011625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011628:	89 10                	mov    DWORD PTR [eax],edx
c001162a:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001162f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011635:	05 78 01 00 00       	add    eax,0x178
c001163a:	83 ec 0c             	sub    esp,0xc
c001163d:	50                   	push   eax
c001163e:	e8 6f da ff ff       	call   c000f0b2 <GDT::flush()>
c0011643:	83 c4 10             	add    esp,0x10
c0011646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011649:	8b 00                	mov    eax,DWORD PTR [eax]
c001164b:	83 ec 08             	sub    esp,0x8
c001164e:	50                   	push   eax
c001164f:	68 14 a5 02 c0       	push   0xc002a514
c0011654:	e8 96 19 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0011659:	83 c4 10             	add    esp,0x10
c001165c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001165f:	8b 00                	mov    eax,DWORD PTR [eax]
c0011661:	c9                   	leave  
c0011662:	c3                   	ret    
c0011663:	90                   	nop

c0011664 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011668:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001166c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001166f:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011674:	75 08                	jne    c001167e <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011676:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001167c:	eb 38                	jmp    c00116b6 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c001167e:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011683:	75 17                	jne    c001169c <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011685:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001168a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001168d:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011693:	8b 10                	mov    edx,DWORD PTR [eax]
c0011695:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011699:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001169c:	89 c1                	mov    ecx,eax
c001169e:	83 e1 fd             	and    ecx,0xfffffffd
c00116a1:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116a7:	74 cd                	je     c0011676 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116a9:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116ae:	83 e0 ef             	and    eax,0xffffffef
c00116b1:	83 f8 08             	cmp    eax,0x8
c00116b4:	76 c0                	jbe    c0011676 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116b6:	31 c0                	xor    eax,eax
c00116b8:	c3                   	ret    
c00116b9:	90                   	nop

c00116ba <ReservedFilename::isAtty()>:
c00116ba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116be:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116c1:	31 c0                	xor    eax,eax
c00116c3:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116c9:	74 09                	je     c00116d4 <ReservedFilename::isAtty()+0x1a>
c00116cb:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116d1:	0f 94 c0             	sete   al
c00116d4:	c3                   	ret    
c00116d5:	90                   	nop

c00116d6 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116e1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116e5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116ea:	75 08                	jne    c00116f4 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116ec:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116f2:	eb 3d                	jmp    c0011731 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116f4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116f9:	75 17                	jne    c0011712 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011700:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011703:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011709:	8b 10                	mov    edx,DWORD PTR [eax]
c001170b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001170f:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011712:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011717:	75 04                	jne    c001171d <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c0011719:	89 0a                	mov    DWORD PTR [edx],ecx
c001171b:	eb 14                	jmp    c0011731 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001171d:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011722:	74 c8                	je     c00116ec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011724:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011729:	83 e0 ef             	and    eax,0xffffffef
c001172c:	83 f8 08             	cmp    eax,0x8
c001172f:	76 bb                	jbe    c00116ec <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011731:	31 c0                	xor    eax,eax
c0011733:	c3                   	ret    

c0011734 <UnixFile::getFileDescriptor()>:
c0011734:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011738:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001173b:	c3                   	ret    

c001173c <UnixFile::UnixFile(int)>:
c001173c:	53                   	push   ebx
c001173d:	83 ec 28             	sub    esp,0x28
c0011740:	ba 00 a6 02 c0       	mov    edx,0xc002a600
c0011745:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0011749:	89 10                	mov    DWORD PTR [eax],edx
c001174b:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011753:	0f 8f 8c 01 00 00    	jg     c00118e5 <UnixFile::UnixFile(int)+0x1a9>
c0011759:	a1 c0 d4 02 c0       	mov    eax,ds:0xc002d4c0
c001175e:	8d 50 01             	lea    edx,[eax+0x1]
c0011761:	89 15 c0 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c0,edx
c0011767:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001176b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001176e:	83 ec 08             	sub    esp,0x8
c0011771:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011775:	68 98 e6 02 c0       	push   0xc002e698
c001177a:	e8 61 70 01 00       	call   c00287e0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c001177f:	83 c4 10             	add    esp,0x10
c0011782:	a0 94 e6 02 c0       	mov    al,ds:0xc002e694
c0011787:	83 f0 01             	xor    eax,0x1
c001178a:	84 c0                	test   al,al
c001178c:	0f 84 54 01 00 00    	je     c00118e6 <UnixFile::UnixFile(int)+0x1aa>
c0011792:	c6 05 94 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e694,0x1
c0011799:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117a1:	83 ec 0c             	sub    esp,0xc
c00117a4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117a8:	e8 96 e0 ff ff       	call   c000f843 <malloc>
c00117ad:	83 c4 10             	add    esp,0x10
c00117b0:	89 c3                	mov    ebx,eax
c00117b2:	83 ec 08             	sub    esp,0x8
c00117b5:	68 03 ff ff 0f       	push   0xfffff03
c00117ba:	53                   	push   ebx
c00117bb:	e8 2c 01 00 00       	call   c00118ec <ReservedFilename::ReservedFilename(int)>
c00117c0:	83 c4 10             	add    esp,0x10
c00117c3:	89 1d 8c e6 02 c0    	mov    DWORD PTR ds:0xc002e68c,ebx
c00117c9:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117d1:	83 ec 0c             	sub    esp,0xc
c00117d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117d8:	e8 66 e0 ff ff       	call   c000f843 <malloc>
c00117dd:	83 c4 10             	add    esp,0x10
c00117e0:	89 c3                	mov    ebx,eax
c00117e2:	83 ec 08             	sub    esp,0x8
c00117e5:	68 01 ff ff 0f       	push   0xfffff01
c00117ea:	53                   	push   ebx
c00117eb:	e8 fc 00 00 00       	call   c00118ec <ReservedFilename::ReservedFilename(int)>
c00117f0:	83 c4 10             	add    esp,0x10
c00117f3:	89 1d 90 e6 02 c0    	mov    DWORD PTR ds:0xc002e690,ebx
c00117f9:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011801:	83 ec 0c             	sub    esp,0xc
c0011804:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011808:	e8 36 e0 ff ff       	call   c000f843 <malloc>
c001180d:	83 c4 10             	add    esp,0x10
c0011810:	89 c3                	mov    ebx,eax
c0011812:	83 ec 08             	sub    esp,0x8
c0011815:	68 00 ff ff 0f       	push   0xfffff00
c001181a:	53                   	push   ebx
c001181b:	e8 cc 00 00 00       	call   c00118ec <ReservedFilename::ReservedFilename(int)>
c0011820:	83 c4 10             	add    esp,0x10
c0011823:	89 1d 84 e6 02 c0    	mov    DWORD PTR ds:0xc002e684,ebx
c0011829:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011831:	83 ec 0c             	sub    esp,0xc
c0011834:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0011838:	e8 06 e0 ff ff       	call   c000f843 <malloc>
c001183d:	83 c4 10             	add    esp,0x10
c0011840:	89 c3                	mov    ebx,eax
c0011842:	83 ec 08             	sub    esp,0x8
c0011845:	68 02 ff ff 0f       	push   0xfffff02
c001184a:	53                   	push   ebx
c001184b:	e8 9c 00 00 00       	call   c00118ec <ReservedFilename::ReservedFilename(int)>
c0011850:	83 c4 10             	add    esp,0x10
c0011853:	89 1d 88 e6 02 c0    	mov    DWORD PTR ds:0xc002e688,ebx
c0011859:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011861:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011866:	7f 7e                	jg     c00118e6 <UnixFile::UnixFile(int)+0x1aa>
c0011868:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011870:	83 ec 0c             	sub    esp,0xc
c0011873:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011877:	e8 c7 df ff ff       	call   c000f843 <malloc>
c001187c:	83 c4 10             	add    esp,0x10
c001187f:	89 c3                	mov    ebx,eax
c0011881:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011885:	05 10 ff ff 0f       	add    eax,0xfffff10
c001188a:	83 ec 08             	sub    esp,0x8
c001188d:	50                   	push   eax
c001188e:	53                   	push   ebx
c001188f:	e8 58 00 00 00       	call   c00118ec <ReservedFilename::ReservedFilename(int)>
c0011894:	83 c4 10             	add    esp,0x10
c0011897:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001189b:	89 1c 85 60 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd19a0],ebx
c00118a2:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118aa:	83 ec 0c             	sub    esp,0xc
c00118ad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118b1:	e8 8d df ff ff       	call   c000f843 <malloc>
c00118b6:	83 c4 10             	add    esp,0x10
c00118b9:	89 c3                	mov    ebx,eax
c00118bb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118bf:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118c4:	83 ec 08             	sub    esp,0x8
c00118c7:	50                   	push   eax
c00118c8:	53                   	push   ebx
c00118c9:	e8 1e 00 00 00       	call   c00118ec <ReservedFilename::ReservedFilename(int)>
c00118ce:	83 c4 10             	add    esp,0x10
c00118d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118d5:	89 1c 85 20 e6 02 c0 	mov    DWORD PTR [eax*4-0x3ffd19e0],ebx
c00118dc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118e0:	e9 7c ff ff ff       	jmp    c0011861 <UnixFile::UnixFile(int)+0x125>
c00118e5:	90                   	nop
c00118e6:	83 c4 28             	add    esp,0x28
c00118e9:	5b                   	pop    ebx
c00118ea:	c3                   	ret    
c00118eb:	90                   	nop

c00118ec <ReservedFilename::ReservedFilename(int)>:
c00118ec:	83 ec 0c             	sub    esp,0xc
c00118ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118f3:	83 ec 08             	sub    esp,0x8
c00118f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118fa:	50                   	push   eax
c00118fb:	e8 3c fe ff ff       	call   c001173c <UnixFile::UnixFile(int)>
c0011900:	83 c4 10             	add    esp,0x10
c0011903:	ba 1c a6 02 c0       	mov    edx,0xc002a61c
c0011908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190c:	89 10                	mov    DWORD PTR [eax],edx
c001190e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011912:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011916:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011919:	90                   	nop
c001191a:	83 c4 0c             	add    esp,0xc
c001191d:	c3                   	ret    

c001191e <UnixFile::~UnixFile()>:
c001191e:	83 ec 1c             	sub    esp,0x1c
c0011921:	ba 00 a6 02 c0       	mov    edx,0xc002a600
c0011926:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001192a:	89 10                	mov    DWORD PTR [eax],edx
c001192c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011930:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011933:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c0011938:	7f 73                	jg     c00119ad <UnixFile::~UnixFile()+0x8f>
c001193a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011942:	83 ec 0c             	sub    esp,0xc
c0011945:	68 98 e6 02 c0       	push   0xc002e698
c001194a:	e8 65 6f 01 00       	call   c00288b4 <LinkedList<UnixFile>::getFirstElement()>
c001194f:	83 c4 10             	add    esp,0x10
c0011952:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011956:	83 ec 0c             	sub    esp,0xc
c0011959:	68 98 e6 02 c0       	push   0xc002e698
c001195e:	e8 59 6f 01 00       	call   c00288bc <LinkedList<UnixFile>::removeFirst()>
c0011963:	83 c4 10             	add    esp,0x10
c0011966:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001196a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001196e:	74 40                	je     c00119b0 <UnixFile::~UnixFile()+0x92>
c0011970:	83 ec 08             	sub    esp,0x8
c0011973:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011977:	68 98 e6 02 c0       	push   0xc002e698
c001197c:	e8 5f 6e 01 00       	call   c00287e0 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011981:	83 c4 10             	add    esp,0x10
c0011984:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011988:	8d 50 01             	lea    edx,[eax+0x1]
c001198b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001198f:	3d 88 13 00 00       	cmp    eax,0x1388
c0011994:	0f 94 c0             	sete   al
c0011997:	84 c0                	test   al,al
c0011999:	74 a7                	je     c0011942 <UnixFile::~UnixFile()+0x24>
c001199b:	83 ec 0c             	sub    esp,0xc
c001199e:	68 d8 a5 02 c0       	push   0xc002a5d8
c00119a3:	e8 f5 8c 00 00       	call   c001a69d <Krnl::panic(char const*)>
c00119a8:	83 c4 10             	add    esp,0x10
c00119ab:	eb 95                	jmp    c0011942 <UnixFile::~UnixFile()+0x24>
c00119ad:	90                   	nop
c00119ae:	eb 01                	jmp    c00119b1 <UnixFile::~UnixFile()+0x93>
c00119b0:	90                   	nop
c00119b1:	90                   	nop
c00119b2:	83 c4 1c             	add    esp,0x1c
c00119b5:	c3                   	ret    

c00119b6 <UnixFile::~UnixFile()>:
c00119b6:	83 ec 0c             	sub    esp,0xc
c00119b9:	83 ec 0c             	sub    esp,0xc
c00119bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c0:	e8 59 ff ff ff       	call   c001191e <UnixFile::~UnixFile()>
c00119c5:	83 c4 10             	add    esp,0x10
c00119c8:	83 ec 08             	sub    esp,0x8
c00119cb:	6a 0c                	push   0xc
c00119cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d1:	e8 39 15 00 00       	call   c0012f0f <operator delete(void*, unsigned long)>
c00119d6:	83 c4 10             	add    esp,0x10
c00119d9:	83 c4 0c             	add    esp,0xc
c00119dc:	c3                   	ret    
c00119dd:	90                   	nop

c00119de <ReservedFilename::~ReservedFilename()>:
c00119de:	83 ec 0c             	sub    esp,0xc
c00119e1:	ba 1c a6 02 c0       	mov    edx,0xc002a61c
c00119e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ea:	89 10                	mov    DWORD PTR [eax],edx
c00119ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f0:	83 ec 0c             	sub    esp,0xc
c00119f3:	50                   	push   eax
c00119f4:	e8 25 ff ff ff       	call   c001191e <UnixFile::~UnixFile()>
c00119f9:	83 c4 10             	add    esp,0x10
c00119fc:	90                   	nop
c00119fd:	83 c4 0c             	add    esp,0xc
c0011a00:	c3                   	ret    
c0011a01:	90                   	nop

c0011a02 <ReservedFilename::~ReservedFilename()>:
c0011a02:	83 ec 0c             	sub    esp,0xc
c0011a05:	83 ec 0c             	sub    esp,0xc
c0011a08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a0c:	e8 cd ff ff ff       	call   c00119de <ReservedFilename::~ReservedFilename()>
c0011a11:	83 c4 10             	add    esp,0x10
c0011a14:	83 ec 08             	sub    esp,0x8
c0011a17:	6a 0c                	push   0xc
c0011a19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a1d:	e8 ed 14 00 00       	call   c0012f0f <operator delete(void*, unsigned long)>
c0011a22:	83 c4 10             	add    esp,0x10
c0011a25:	83 c4 0c             	add    esp,0xc
c0011a28:	c3                   	ret    

c0011a29 <getFromFileDescriptor(int)>:
c0011a29:	53                   	push   ebx
c0011a2a:	83 ec 08             	sub    esp,0x8
c0011a2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a31:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a37:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a3d:	7f 2c                	jg     c0011a6b <getFromFileDescriptor(int)+0x42>
c0011a3f:	83 ec 0c             	sub    esp,0xc
c0011a42:	68 98 e6 02 c0       	push   0xc002e698
c0011a47:	e8 68 6e 01 00       	call   c00288b4 <LinkedList<UnixFile>::getFirstElement()>
c0011a4c:	83 c4 10             	add    esp,0x10
c0011a4f:	85 c0                	test   eax,eax
c0011a51:	75 04                	jne    c0011a57 <getFromFileDescriptor(int)+0x2e>
c0011a53:	31 c0                	xor    eax,eax
c0011a55:	eb 6e                	jmp    c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011a57:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a5a:	74 69                	je     c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011a5c:	52                   	push   edx
c0011a5d:	52                   	push   edx
c0011a5e:	50                   	push   eax
c0011a5f:	68 98 e6 02 c0       	push   0xc002e698
c0011a64:	e8 f5 6e 01 00       	call   c002895e <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a69:	eb e1                	jmp    c0011a4c <getFromFileDescriptor(int)+0x23>
c0011a6b:	a1 8c e6 02 c0       	mov    eax,ds:0xc002e68c
c0011a70:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a76:	74 4d                	je     c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011a78:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c0011a7d:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a83:	74 40                	je     c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011a85:	a1 88 e6 02 c0       	mov    eax,ds:0xc002e688
c0011a8a:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a90:	74 33                	je     c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011a92:	a1 84 e6 02 c0       	mov    eax,ds:0xc002e684
c0011a97:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a9d:	74 26                	je     c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011a9f:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011aa5:	83 f8 08             	cmp    eax,0x8
c0011aa8:	77 09                	ja     c0011ab3 <getFromFileDescriptor(int)+0x8a>
c0011aaa:	8b 04 85 60 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19a0]
c0011ab1:	eb 12                	jmp    c0011ac5 <getFromFileDescriptor(int)+0x9c>
c0011ab3:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011ab9:	83 fb 08             	cmp    ebx,0x8
c0011abc:	77 95                	ja     c0011a53 <getFromFileDescriptor(int)+0x2a>
c0011abe:	8b 04 9d 20 e6 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd19e0]
c0011ac5:	83 c4 08             	add    esp,0x8
c0011ac8:	5b                   	pop    ebx
c0011ac9:	c3                   	ret    

c0011aca <__static_initialization_and_destruction_0(int, int)>:
c0011aca:	83 ec 0c             	sub    esp,0xc
c0011acd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ad2:	75 34                	jne    c0011b08 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ad4:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011adc:	75 2a                	jne    c0011b08 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ade:	83 ec 0c             	sub    esp,0xc
c0011ae1:	68 98 e6 02 c0       	push   0xc002e698
c0011ae6:	e8 9d 6c 01 00       	call   c0028788 <LinkedList<UnixFile>::LinkedList()>
c0011aeb:	83 c4 10             	add    esp,0x10
c0011aee:	83 ec 04             	sub    esp,0x4
c0011af1:	68 50 d4 02 c0       	push   0xc002d450
c0011af6:	68 98 e6 02 c0       	push   0xc002e698
c0011afb:	68 86 87 02 c0       	push   0xc0028786
c0011b00:	e8 84 13 00 00       	call   c0012e89 <__cxa_atexit>
c0011b05:	83 c4 10             	add    esp,0x10
c0011b08:	90                   	nop
c0011b09:	83 c4 0c             	add    esp,0xc
c0011b0c:	c3                   	ret    

c0011b0d <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b0d:	83 ec 0c             	sub    esp,0xc
c0011b10:	83 ec 08             	sub    esp,0x8
c0011b13:	68 ff ff 00 00       	push   0xffff
c0011b18:	6a 01                	push   0x1
c0011b1a:	e8 ab ff ff ff       	call   c0011aca <__static_initialization_and_destruction_0(int, int)>
c0011b1f:	83 c4 10             	add    esp,0x10
c0011b22:	83 c4 0c             	add    esp,0xc
c0011b25:	c3                   	ret    

c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b26:	53                   	push   ebx
c0011b27:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b2b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b2f:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b35:	89 c8                	mov    eax,ecx
c0011b37:	d1 e8                	shr    eax,1
c0011b39:	03 05 c8 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4c8
c0011b3f:	83 e1 01             	and    ecx,0x1
c0011b42:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b44:	75 09                	jne    c0011b4f <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b46:	83 e2 f0             	and    edx,0xfffffff0
c0011b49:	09 da                	or     edx,ebx
c0011b4b:	88 10                	mov    BYTE PTR [eax],dl
c0011b4d:	5b                   	pop    ebx
c0011b4e:	c3                   	ret    
c0011b4f:	c1 e3 04             	shl    ebx,0x4
c0011b52:	83 e2 0f             	and    edx,0xf
c0011b55:	09 da                	or     edx,ebx
c0011b57:	88 10                	mov    BYTE PTR [eax],dl
c0011b59:	5b                   	pop    ebx
c0011b5a:	c3                   	ret    

c0011b5b <Virt::getPageState(unsigned long)>:
c0011b5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b5f:	8b 0d c8 d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4c8
c0011b65:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b6b:	89 d0                	mov    eax,edx
c0011b6d:	d1 e8                	shr    eax,1
c0011b6f:	83 e2 01             	and    edx,0x1
c0011b72:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b75:	75 04                	jne    c0011b7b <Virt::getPageState(unsigned long)+0x20>
c0011b77:	83 e0 0f             	and    eax,0xf
c0011b7a:	c3                   	ret    
c0011b7b:	c0 e8 04             	shr    al,0x4
c0011b7e:	c3                   	ret    

c0011b7f <Virt::allocateKernelVirtualPages(int)>:
c0011b7f:	55                   	push   ebp
c0011b80:	31 ed                	xor    ebp,ebp
c0011b82:	57                   	push   edi
c0011b83:	56                   	push   esi
c0011b84:	53                   	push   ebx
c0011b85:	31 db                	xor    ebx,ebx
c0011b87:	83 ec 1c             	sub    esp,0x1c
c0011b8a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b8e:	8b 3d c4 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4c4
c0011b94:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b99:	57                   	push   edi
c0011b9a:	e8 bc ff ff ff       	call   c0011b5b <Virt::getPageState(unsigned long)>
c0011b9f:	5a                   	pop    edx
c0011ba0:	84 c0                	test   al,al
c0011ba2:	75 3a                	jne    c0011bde <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011ba4:	85 db                	test   ebx,ebx
c0011ba6:	75 02                	jne    c0011baa <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011ba8:	89 fd                	mov    ebp,edi
c0011baa:	43                   	inc    ebx
c0011bab:	39 f3                	cmp    ebx,esi
c0011bad:	74 5a                	je     c0011c09 <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011baf:	47                   	inc    edi
c0011bb0:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bb6:	76 31                	jbe    c0011be9 <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bb8:	c7 05 c4 d4 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002d4c4,0xc8000
c0011bc2:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bc7:	75 28                	jne    c0011bf1 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bc9:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bce:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bd3:	57                   	push   edi
c0011bd4:	e8 82 ff ff ff       	call   c0011b5b <Virt::getPageState(unsigned long)>
c0011bd9:	5a                   	pop    edx
c0011bda:	84 c0                	test   al,al
c0011bdc:	74 c6                	je     c0011ba4 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011bde:	31 db                	xor    ebx,ebx
c0011be0:	47                   	inc    edi
c0011be1:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011be7:	77 cf                	ja     c0011bb8 <Virt::allocateKernelVirtualPages(int)+0x39>
c0011be9:	89 3d c4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c4,edi
c0011bef:	eb a8                	jmp    c0011b99 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bf1:	83 ec 0c             	sub    esp,0xc
c0011bf4:	68 30 a6 02 c0       	push   0xc002a630
c0011bf9:	e8 9f 8a 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0011bfe:	8b 3d c4 d4 02 c0    	mov    edi,DWORD PTR ds:0xc002d4c4
c0011c04:	83 c4 10             	add    esp,0x10
c0011c07:	eb 90                	jmp    c0011b99 <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c09:	89 2d c4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c4,ebp
c0011c0f:	4b                   	dec    ebx
c0011c10:	74 5f                	je     c0011c71 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c12:	85 f6                	test   esi,esi
c0011c14:	74 3d                	je     c0011c53 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c16:	89 e8                	mov    eax,ebp
c0011c18:	31 db                	xor    ebx,ebx
c0011c1a:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c1d:	eb 14                	jmp    c0011c33 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c1f:	6a 01                	push   0x1
c0011c21:	43                   	inc    ebx
c0011c22:	50                   	push   eax
c0011c23:	e8 fe fe ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c28:	58                   	pop    eax
c0011c29:	39 f3                	cmp    ebx,esi
c0011c2b:	5a                   	pop    edx
c0011c2c:	74 25                	je     c0011c53 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c2e:	a1 c4 d4 02 c0       	mov    eax,ds:0xc002d4c4
c0011c33:	8d 50 01             	lea    edx,[eax+0x1]
c0011c36:	85 db                	test   ebx,ebx
c0011c38:	89 15 c4 d4 02 c0    	mov    DWORD PTR ds:0xc002d4c4,edx
c0011c3e:	74 20                	je     c0011c60 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c40:	39 df                	cmp    edi,ebx
c0011c42:	75 db                	jne    c0011c1f <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c44:	6a 03                	push   0x3
c0011c46:	43                   	inc    ebx
c0011c47:	50                   	push   eax
c0011c48:	e8 d9 fe ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4d:	59                   	pop    ecx
c0011c4e:	39 f3                	cmp    ebx,esi
c0011c50:	58                   	pop    eax
c0011c51:	75 db                	jne    c0011c2e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c53:	83 c4 1c             	add    esp,0x1c
c0011c56:	89 e8                	mov    eax,ebp
c0011c58:	5b                   	pop    ebx
c0011c59:	c1 e0 0c             	shl    eax,0xc
c0011c5c:	5e                   	pop    esi
c0011c5d:	5f                   	pop    edi
c0011c5e:	5d                   	pop    ebp
c0011c5f:	c3                   	ret    
c0011c60:	6a 02                	push   0x2
c0011c62:	bb 01 00 00 00       	mov    ebx,0x1
c0011c67:	50                   	push   eax
c0011c68:	e8 b9 fe ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6d:	58                   	pop    eax
c0011c6e:	5a                   	pop    edx
c0011c6f:	eb bd                	jmp    c0011c2e <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c71:	6a 04                	push   0x4
c0011c73:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c76:	55                   	push   ebp
c0011c77:	a3 c4 d4 02 c0       	mov    ds:0xc002d4c4,eax
c0011c7c:	e8 a5 fe ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c81:	59                   	pop    ecx
c0011c82:	89 e8                	mov    eax,ebp
c0011c84:	5b                   	pop    ebx
c0011c85:	c1 e0 0c             	shl    eax,0xc
c0011c88:	83 c4 1c             	add    esp,0x1c
c0011c8b:	5b                   	pop    ebx
c0011c8c:	5e                   	pop    esi
c0011c8d:	5f                   	pop    edi
c0011c8e:	5d                   	pop    ebp
c0011c8f:	c3                   	ret    

c0011c90 <Virt::freeSwapfilePage(unsigned long)>:
c0011c90:	53                   	push   ebx
c0011c91:	8b 15 a8 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6a8
c0011c97:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011c9b:	b8 01 00 00 00       	mov    eax,0x1
c0011ca0:	89 cb                	mov    ebx,ecx
c0011ca2:	d3 e0                	shl    eax,cl
c0011ca4:	c1 eb 05             	shr    ebx,0x5
c0011ca7:	f7 d0                	not    eax
c0011ca9:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011cac:	5b                   	pop    ebx
c0011cad:	c3                   	ret    

c0011cae <Virt::swapIDToSector(unsigned long)>:
c0011cae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011cb2:	0f af 05 cc d4 02 c0 	imul   eax,DWORD PTR ds:0xc002d4cc
c0011cb9:	03 05 d4 d4 02 c0    	add    eax,DWORD PTR ds:0xc002d4d4
c0011cbf:	c3                   	ret    

c0011cc0 <Virt::allocateSwapfilePage()>:
c0011cc0:	55                   	push   ebp
c0011cc1:	31 d2                	xor    edx,edx
c0011cc3:	57                   	push   edi
c0011cc4:	56                   	push   esi
c0011cc5:	53                   	push   ebx
c0011cc6:	83 ec 0c             	sub    esp,0xc
c0011cc9:	8b 0d cc d4 02 c0    	mov    ecx,DWORD PTR ds:0xc002d4cc
c0011ccf:	a1 d0 d4 02 c0       	mov    eax,ds:0xc002d4d0
c0011cd4:	f7 f1                	div    ecx
c0011cd6:	39 0d d0 d4 02 c0    	cmp    DWORD PTR ds:0xc002d4d0,ecx
c0011cdc:	72 2d                	jb     c0011d0b <Virt::allocateSwapfilePage()+0x4b>
c0011cde:	8b 35 a8 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e6a8
c0011ce4:	8b 16                	mov    edx,DWORD PTR [esi]
c0011ce6:	f6 c2 01             	test   dl,0x1
c0011ce9:	74 3c                	je     c0011d27 <Virt::allocateSwapfilePage()+0x67>
c0011ceb:	31 c9                	xor    ecx,ecx
c0011ced:	bf 01 00 00 00       	mov    edi,0x1
c0011cf2:	eb 12                	jmp    c0011d06 <Virt::allocateSwapfilePage()+0x46>
c0011cf4:	89 fd                	mov    ebp,edi
c0011cf6:	89 ca                	mov    edx,ecx
c0011cf8:	d3 e5                	shl    ebp,cl
c0011cfa:	c1 ea 05             	shr    edx,0x5
c0011cfd:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011d00:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011d02:	85 ea                	test   edx,ebp
c0011d04:	74 2a                	je     c0011d30 <Virt::allocateSwapfilePage()+0x70>
c0011d06:	41                   	inc    ecx
c0011d07:	39 c8                	cmp    eax,ecx
c0011d09:	77 e9                	ja     c0011cf4 <Virt::allocateSwapfilePage()+0x34>
c0011d0b:	83 ec 0c             	sub    esp,0xc
c0011d0e:	68 dd a7 02 c0       	push   0xc002a7dd
c0011d13:	e8 85 89 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0011d18:	83 c4 10             	add    esp,0x10
c0011d1b:	31 c9                	xor    ecx,ecx
c0011d1d:	83 c4 0c             	add    esp,0xc
c0011d20:	89 c8                	mov    eax,ecx
c0011d22:	5b                   	pop    ebx
c0011d23:	5e                   	pop    esi
c0011d24:	5f                   	pop    edi
c0011d25:	5d                   	pop    ebp
c0011d26:	c3                   	ret    
c0011d27:	89 f3                	mov    ebx,esi
c0011d29:	bd 01 00 00 00       	mov    ebp,0x1
c0011d2e:	31 c9                	xor    ecx,ecx
c0011d30:	09 ea                	or     edx,ebp
c0011d32:	89 c8                	mov    eax,ecx
c0011d34:	89 13                	mov    DWORD PTR [ebx],edx
c0011d36:	83 c4 0c             	add    esp,0xc
c0011d39:	5b                   	pop    ebx
c0011d3a:	5e                   	pop    esi
c0011d3b:	5f                   	pop    edi
c0011d3c:	5d                   	pop    ebp
c0011d3d:	c3                   	ret    

c0011d3e <Virt::virtualMemorySetup()>:
c0011d3e:	53                   	push   ebx
c0011d3f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d44:	83 ec 08             	sub    esp,0x8
c0011d47:	6a 0f                	push   0xf
c0011d49:	53                   	push   ebx
c0011d4a:	43                   	inc    ebx
c0011d4b:	e8 d6 fd ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d50:	59                   	pop    ecx
c0011d51:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d57:	58                   	pop    eax
c0011d58:	75 ed                	jne    c0011d47 <Virt::virtualMemorySetup()+0x9>
c0011d5a:	83 ec 08             	sub    esp,0x8
c0011d5d:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011d62:	68 00 00 00 c8       	push   0xc8000000
c0011d67:	68 f4 a7 02 c0       	push   0xc002a7f4
c0011d6c:	e8 7e 12 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0011d71:	58                   	pop    eax
c0011d72:	5a                   	pop    edx
c0011d73:	68 00 f0 ff ef       	push   0xeffff000
c0011d78:	68 08 a8 02 c0       	push   0xc002a808
c0011d7d:	e8 6d 12 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0011d82:	83 c4 10             	add    esp,0x10
c0011d85:	83 ec 08             	sub    esp,0x8
c0011d88:	6a 00                	push   0x0
c0011d8a:	53                   	push   ebx
c0011d8b:	43                   	inc    ebx
c0011d8c:	e8 95 fd ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d91:	83 c4 10             	add    esp,0x10
c0011d94:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011d9a:	75 e9                	jne    c0011d85 <Virt::virtualMemorySetup()+0x47>
c0011d9c:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011da1:	83 ec 08             	sub    esp,0x8
c0011da4:	6a 0f                	push   0xf
c0011da6:	53                   	push   ebx
c0011da7:	43                   	inc    ebx
c0011da8:	e8 79 fd ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011dad:	83 c4 10             	add    esp,0x10
c0011db0:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011db6:	75 e9                	jne    c0011da1 <Virt::virtualMemorySetup()+0x63>
c0011db8:	83 c4 08             	add    esp,0x8
c0011dbb:	5b                   	pop    ebx
c0011dbc:	c3                   	ret    

c0011dbd <Virt::swappingSetup()>:
c0011dbd:	83 ec 14             	sub    esp,0x14
c0011dc0:	31 d2                	xor    edx,edx
c0011dc2:	a1 d0 d4 02 c0       	mov    eax,ds:0xc002d4d0
c0011dc7:	f7 35 cc d4 02 c0    	div    DWORD PTR ds:0xc002d4cc
c0011dcd:	c1 e8 05             	shr    eax,0x5
c0011dd0:	50                   	push   eax
c0011dd1:	68 1c a8 02 c0       	push   0xc002a81c
c0011dd6:	e8 14 12 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0011ddb:	a1 d0 d4 02 c0       	mov    eax,ds:0xc002d4d0
c0011de0:	31 d2                	xor    edx,edx
c0011de2:	f7 35 cc d4 02 c0    	div    DWORD PTR ds:0xc002d4cc
c0011de8:	c1 e8 05             	shr    eax,0x5
c0011deb:	89 04 24             	mov    DWORD PTR [esp],eax
c0011dee:	e8 50 da ff ff       	call   c000f843 <malloc>
c0011df3:	83 c4 0c             	add    esp,0xc
c0011df6:	89 c1                	mov    ecx,eax
c0011df8:	a3 a8 e6 02 c0       	mov    ds:0xc002e6a8,eax
c0011dfd:	31 d2                	xor    edx,edx
c0011dff:	a1 d0 d4 02 c0       	mov    eax,ds:0xc002d4d0
c0011e04:	f7 35 cc d4 02 c0    	div    DWORD PTR ds:0xc002d4cc
c0011e0a:	c1 e8 05             	shr    eax,0x5
c0011e0d:	50                   	push   eax
c0011e0e:	6a 00                	push   0x0
c0011e10:	51                   	push   ecx
c0011e11:	e8 62 e9 fe ff       	call   c0000778 <memset>
c0011e16:	83 c4 1c             	add    esp,0x1c
c0011e19:	c3                   	ret    

c0011e1a <Virt::getAKernelVAS()>:
c0011e1a:	a1 ac e6 02 c0       	mov    eax,ds:0xc002e6ac
c0011e1f:	c3                   	ret    

c0011e20 <Virt::setupPageSwapping(int)>:
c0011e20:	57                   	push   edi
c0011e21:	56                   	push   esi
c0011e22:	53                   	push   ebx
c0011e23:	83 ec 1c             	sub    esp,0x1c
c0011e26:	68 14 01 00 00       	push   0x114
c0011e2b:	e8 13 da ff ff       	call   c000f843 <malloc>
c0011e30:	83 c4 0c             	add    esp,0xc
c0011e33:	89 c6                	mov    esi,eax
c0011e35:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c0011e3b:	68 37 a8 02 c0       	push   0xc002a837
c0011e40:	50                   	push   eax
c0011e41:	e8 02 17 00 00       	call   c0013548 <File::File(char const*, Process*)>
c0011e46:	89 34 24             	mov    DWORD PTR [esp],esi
c0011e49:	e8 d6 18 00 00       	call   c0013724 <File::unlink()>
c0011e4e:	58                   	pop    eax
c0011e4f:	5a                   	pop    edx
c0011e50:	6a 12                	push   0x12
c0011e52:	56                   	push   esi
c0011e53:	e8 54 17 00 00       	call   c00135ac <File::open(FileOpenMode)>
c0011e58:	83 c4 10             	add    esp,0x10
c0011e5b:	85 c0                	test   eax,eax
c0011e5d:	0f 85 ca 00 00 00    	jne    c0011f2d <Virt::setupPageSwapping(int)+0x10d>
c0011e63:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011e67:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011e6f:	c1 e3 08             	shl    ebx,0x8
c0011e72:	83 ec 0c             	sub    esp,0xc
c0011e75:	68 00 00 01 00       	push   0x10000
c0011e7a:	e8 c4 d9 ff ff       	call   c000f843 <malloc>
c0011e7f:	83 c4 0c             	add    esp,0xc
c0011e82:	89 c7                	mov    edi,eax
c0011e84:	68 00 00 01 00       	push   0x10000
c0011e89:	6a 00                	push   0x0
c0011e8b:	50                   	push   eax
c0011e8c:	e8 e7 e8 fe ff       	call   c0000778 <memset>
c0011e91:	83 c4 10             	add    esp,0x10
c0011e94:	85 db                	test   ebx,ebx
c0011e96:	79 03                	jns    c0011e9b <Virt::setupPageSwapping(int)+0x7b>
c0011e98:	83 c3 0f             	add    ebx,0xf
c0011e9b:	c1 fb 04             	sar    ebx,0x4
c0011e9e:	4b                   	dec    ebx
c0011e9f:	83 fb ff             	cmp    ebx,0xffffffff
c0011ea2:	74 4b                	je     c0011eef <Virt::setupPageSwapping(int)+0xcf>
c0011ea4:	83 ec 0c             	sub    esp,0xc
c0011ea7:	8b 06                	mov    eax,DWORD PTR [esi]
c0011ea9:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011ead:	52                   	push   edx
c0011eae:	57                   	push   edi
c0011eaf:	6a 00                	push   0x0
c0011eb1:	68 00 00 01 00       	push   0x10000
c0011eb6:	56                   	push   esi
c0011eb7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011eba:	83 c4 20             	add    esp,0x20
c0011ebd:	85 c0                	test   eax,eax
c0011ebf:	75 59                	jne    c0011f1a <Virt::setupPageSwapping(int)+0xfa>
c0011ec1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011ec5:	3d 00 00 01 00       	cmp    eax,0x10000
c0011eca:	74 d2                	je     c0011e9e <Virt::setupPageSwapping(int)+0x7e>
c0011ecc:	83 ec 08             	sub    esp,0x8
c0011ecf:	4b                   	dec    ebx
c0011ed0:	50                   	push   eax
c0011ed1:	68 8a a8 02 c0       	push   0xc002a88a
c0011ed6:	e8 14 11 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0011edb:	c7 04 24 93 a8 02 c0 	mov    DWORD PTR [esp],0xc002a893
c0011ee2:	e8 b6 87 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0011ee7:	83 c4 10             	add    esp,0x10
c0011eea:	83 fb ff             	cmp    ebx,0xffffffff
c0011eed:	75 b5                	jne    c0011ea4 <Virt::setupPageSwapping(int)+0x84>
c0011eef:	83 ec 0c             	sub    esp,0xc
c0011ef2:	56                   	push   esi
c0011ef3:	e8 12 17 00 00       	call   c001360a <File::close()>
c0011ef8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011efb:	e8 63 d9 ff ff       	call   c000f863 <rfree>
c0011f00:	83 c4 10             	add    esp,0x10
c0011f03:	85 f6                	test   esi,esi
c0011f05:	74 0c                	je     c0011f13 <Virt::setupPageSwapping(int)+0xf3>
c0011f07:	83 ec 0c             	sub    esp,0xc
c0011f0a:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f0c:	56                   	push   esi
c0011f0d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f10:	83 c4 10             	add    esp,0x10
c0011f13:	83 c4 10             	add    esp,0x10
c0011f16:	5b                   	pop    ebx
c0011f17:	5e                   	pop    esi
c0011f18:	5f                   	pop    edi
c0011f19:	c3                   	ret    
c0011f1a:	83 ec 08             	sub    esp,0x8
c0011f1d:	50                   	push   eax
c0011f1e:	68 72 a8 02 c0       	push   0xc002a872
c0011f23:	e8 c7 10 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0011f28:	83 c4 10             	add    esp,0x10
c0011f2b:	eb 94                	jmp    c0011ec1 <Virt::setupPageSwapping(int)+0xa1>
c0011f2d:	83 ec 08             	sub    esp,0x8
c0011f30:	50                   	push   eax
c0011f31:	68 4e a8 02 c0       	push   0xc002a84e
c0011f36:	e8 b4 10 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0011f3b:	c7 04 24 57 a8 02 c0 	mov    DWORD PTR [esp],0xc002a857
c0011f42:	e8 56 87 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0011f47:	83 c4 10             	add    esp,0x10
c0011f4a:	e9 14 ff ff ff       	jmp    c0011e63 <Virt::setupPageSwapping(int)+0x43>
c0011f4f:	90                   	nop

c0011f50 <VAS::VAS()>:
c0011f50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f5f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011f66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f6a:	a3 ac e6 02 c0       	mov    ds:0xc002e6ac,eax
c0011f6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f73:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011f77:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f7b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011f7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011f82:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011f89:	90                   	nop
c0011f8a:	c3                   	ret    
c0011f8b:	90                   	nop

c0011f8c <VAS::VAS(VAS*)>:
c0011f8c:	83 ec 0c             	sub    esp,0xc
c0011f8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f93:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011f9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f9e:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0011fa5:	83 ec 0c             	sub    esp,0xc
c0011fa8:	68 50 a6 02 c0       	push   0xc002a650
c0011fad:	e8 eb 86 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0011fb2:	83 c4 10             	add    esp,0x10
c0011fb5:	90                   	nop
c0011fb6:	83 c4 0c             	add    esp,0xc
c0011fb9:	c3                   	ret    

c0011fba <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011fba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011fbe:	89 c2                	mov    edx,eax
c0011fc0:	c1 e8 0a             	shr    eax,0xa
c0011fc3:	c1 ea 16             	shr    edx,0x16
c0011fc6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011fcb:	19 c9                	sbb    ecx,ecx
c0011fcd:	c1 e2 0c             	shl    edx,0xc
c0011fd0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011fd6:	25 fc 0f 00 00       	and    eax,0xffc
c0011fdb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011fe2:	01 d0                	add    eax,edx
c0011fe4:	c3                   	ret    
c0011fe5:	90                   	nop

c0011fe6 <VAS::getPageTableEntry(unsigned long)>:
c0011fe6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011fea:	89 ca                	mov    edx,ecx
c0011fec:	c1 e9 0a             	shr    ecx,0xa
c0011fef:	c1 ea 16             	shr    edx,0x16
c0011ff2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ff8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ffe:	c1 e0 0c             	shl    eax,0xc
c0012001:	8d 04 08             	lea    eax,[eax+ecx*1]
c0012004:	c3                   	ret    

c0012005 <Virt::freeKernelVirtualPages(unsigned long)>:
c0012005:	57                   	push   edi
c0012006:	56                   	push   esi
c0012007:	be 01 00 00 00       	mov    esi,0x1
c001200c:	53                   	push   ebx
c001200d:	83 ec 10             	sub    esp,0x10
c0012010:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012014:	c1 eb 0c             	shr    ebx,0xc
c0012017:	eb 3f                	jmp    c0012058 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0012019:	e8 fc fd ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c001201e:	83 ec 08             	sub    esp,0x8
c0012021:	57                   	push   edi
c0012022:	50                   	push   eax
c0012023:	e8 be ff ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012028:	83 c4 10             	add    esp,0x10
c001202b:	8b 00                	mov    eax,DWORD PTR [eax]
c001202d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012031:	f6 c4 04             	test   ah,0x4
c0012034:	75 5f                	jne    c0012095 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0012036:	80 fa 04             	cmp    dl,0x4
c0012039:	74 78                	je     c00120b3 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c001203b:	80 fa 02             	cmp    dl,0x2
c001203e:	0f 84 88 00 00 00    	je     c00120cc <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0012044:	80 fa 03             	cmp    dl,0x3
c0012047:	0f 84 ad 00 00 00    	je     c00120fa <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c001204d:	fe ca                	dec    dl
c001204f:	0f 84 92 00 00 00    	je     c00120e7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0012055:	43                   	inc    ebx
c0012056:	31 f6                	xor    esi,esi
c0012058:	53                   	push   ebx
c0012059:	e8 fd fa ff ff       	call   c0011b5b <Virt::getPageState(unsigned long)>
c001205e:	5f                   	pop    edi
c001205f:	89 df                	mov    edi,ebx
c0012061:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012065:	c1 e7 0c             	shl    edi,0xc
c0012068:	84 c0                	test   al,al
c001206a:	75 ad                	jne    c0012019 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c001206c:	83 ec 0c             	sub    esp,0xc
c001206f:	68 99 a8 02 c0       	push   0xc002a899
c0012074:	e8 24 86 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0012079:	e8 9c fd ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c001207e:	5a                   	pop    edx
c001207f:	59                   	pop    ecx
c0012080:	57                   	push   edi
c0012081:	50                   	push   eax
c0012082:	e8 5f ff ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012087:	83 c4 10             	add    esp,0x10
c001208a:	8b 00                	mov    eax,DWORD PTR [eax]
c001208c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0012090:	f6 c4 04             	test   ah,0x4
c0012093:	74 c0                	je     c0012055 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0012095:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0012099:	25 00 f0 ff ff       	and    eax,0xfffff000
c001209e:	83 ec 0c             	sub    esp,0xc
c00120a1:	50                   	push   eax
c00120a2:	e8 b4 dd ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00120a7:	83 c4 10             	add    esp,0x10
c00120aa:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00120ae:	80 fa 04             	cmp    dl,0x4
c00120b1:	75 88                	jne    c001203b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00120b3:	89 f0                	mov    eax,esi
c00120b5:	84 c0                	test   al,al
c00120b7:	75 47                	jne    c0012100 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c00120b9:	c7 44 24 20 74 a6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a674
c00120c1:	83 c4 10             	add    esp,0x10
c00120c4:	5b                   	pop    ebx
c00120c5:	5e                   	pop    esi
c00120c6:	5f                   	pop    edi
c00120c7:	e9 d1 85 00 00       	jmp    c001a69d <Krnl::panic(char const*)>
c00120cc:	89 f0                	mov    eax,esi
c00120ce:	84 c0                	test   al,al
c00120d0:	75 15                	jne    c00120e7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c00120d2:	83 ec 0c             	sub    esp,0xc
c00120d5:	68 b5 a8 02 c0       	push   0xc002a8b5
c00120da:	e8 be 85 00 00       	call   c001a69d <Krnl::panic(char const*)>
c00120df:	83 c4 10             	add    esp,0x10
c00120e2:	e9 6e ff ff ff       	jmp    c0012055 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120e7:	83 ec 08             	sub    esp,0x8
c00120ea:	6a 00                	push   0x0
c00120ec:	53                   	push   ebx
c00120ed:	e8 34 fa ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00120f2:	83 c4 10             	add    esp,0x10
c00120f5:	e9 5b ff ff ff       	jmp    c0012055 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00120fa:	89 f0                	mov    eax,esi
c00120fc:	84 c0                	test   al,al
c00120fe:	75 15                	jne    c0012115 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0012100:	83 ec 08             	sub    esp,0x8
c0012103:	6a 00                	push   0x0
c0012105:	53                   	push   ebx
c0012106:	e8 1b fa ff ff       	call   c0011b26 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c001210b:	83 c4 10             	add    esp,0x10
c001210e:	83 c4 10             	add    esp,0x10
c0012111:	5b                   	pop    ebx
c0012112:	5e                   	pop    esi
c0012113:	5f                   	pop    edi
c0012114:	c3                   	ret    
c0012115:	c7 44 24 20 d1 a8 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a8d1
c001211d:	83 c4 10             	add    esp,0x10
c0012120:	5b                   	pop    ebx
c0012121:	5e                   	pop    esi
c0012122:	5f                   	pop    edi
c0012123:	e9 75 85 00 00       	jmp    c001a69d <Krnl::panic(char const*)>

c0012128 <VAS::freeAllocatedPages(unsigned long)>:
c0012128:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001212c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012130:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012134:	74 09                	je     c001213f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012136:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001213a:	e9 c6 fe ff ff       	jmp    c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c001213f:	c7 44 24 04 98 a6 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a698
c0012147:	e9 a3 0e 00 00       	jmp    c0012fef <Dbg::kprintf(char const*, ...)>

c001214c <VAS::virtualToPhysical(unsigned long)>:
c001214c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012150:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012154:	e8 8d fe ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012159:	5a                   	pop    edx
c001215a:	8b 00                	mov    eax,DWORD PTR [eax]
c001215c:	59                   	pop    ecx
c001215d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012162:	c3                   	ret    
c0012163:	90                   	nop

c0012164 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012164:	55                   	push   ebp
c0012165:	57                   	push   edi
c0012166:	56                   	push   esi
c0012167:	53                   	push   ebx
c0012168:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001216c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012170:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012174:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012178:	85 db                	test   ebx,ebx
c001217a:	7e 22                	jle    c001219e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001217c:	c1 e3 0c             	shl    ebx,0xc
c001217f:	01 f3                	add    ebx,esi
c0012181:	56                   	push   esi
c0012182:	81 c6 00 10 00 00    	add    esi,0x1000
c0012188:	55                   	push   ebp
c0012189:	e8 58 fe ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c001218e:	5a                   	pop    edx
c001218f:	59                   	pop    ecx
c0012190:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012192:	21 f9                	and    ecx,edi
c0012194:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012198:	39 f3                	cmp    ebx,esi
c001219a:	89 08                	mov    DWORD PTR [eax],ecx
c001219c:	75 e3                	jne    c0012181 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001219e:	5b                   	pop    ebx
c001219f:	5e                   	pop    esi
c00121a0:	5f                   	pop    edi
c00121a1:	5d                   	pop    ebp
c00121a2:	c3                   	ret    
c00121a3:	90                   	nop

c00121a4 <VAS::setToWriteCombining(unsigned long, int)>:
c00121a4:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00121a9:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00121af:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00121b6:	75 01                	jne    c00121b9 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00121b8:	c3                   	ret    
c00121b9:	68 80 00 00 00       	push   0x80
c00121be:	6a ff                	push   0xffffffff
c00121c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121c8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00121cc:	e8 93 ff ff ff       	call   c0012164 <VAS::reflagRange(unsigned long, int, int, int)>
c00121d1:	83 c4 14             	add    esp,0x14
c00121d4:	c3                   	ret    
c00121d5:	90                   	nop

c00121d6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00121d6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00121db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00121df:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00121e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121e6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00121e9:	19 c0                	sbb    eax,eax
c00121eb:	83 ca 03             	or     edx,0x3
c00121ee:	83 e0 fc             	and    eax,0xfffffffc
c00121f1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00121f8:	0f 20 d8             	mov    eax,cr3
c00121fb:	0f 22 d8             	mov    cr3,eax
c00121fe:	c3                   	ret    
c00121ff:	90                   	nop

c0012200 <VAS::~VAS()>:
c0012200:	83 ec 2c             	sub    esp,0x2c
c0012203:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001220b:	e8 82 bc 00 00       	call   c001de92 <lockScheduler()>
c0012210:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012215:	8b 00                	mov    eax,DWORD PTR [eax]
c0012217:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001221a:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012220:	83 ec 04             	sub    esp,0x4
c0012223:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012227:	6a 01                	push   0x1
c0012229:	50                   	push   eax
c001222a:	e8 a7 ff ff ff       	call   c00121d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001222f:	83 c4 10             	add    esp,0x10
c0012232:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001223a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012242:	0f 8f d7 00 00 00    	jg     c001231f <VAS::~VAS()+0x11f>
c0012248:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001224c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001224f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012253:	c1 e2 02             	shl    edx,0x2
c0012256:	01 d0                	add    eax,edx
c0012258:	8b 00                	mov    eax,DWORD PTR [eax]
c001225a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001225e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012262:	83 e0 01             	and    eax,0x1
c0012265:	0f 84 ab 00 00 00    	je     c0012316 <VAS::~VAS()+0x116>
c001226b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012273:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001227b:	7f 75                	jg     c00122f2 <VAS::~VAS()+0xf2>
c001227d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012281:	c1 e0 0a             	shl    eax,0xa
c0012284:	89 c2                	mov    edx,eax
c0012286:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001228a:	01 d0                	add    eax,edx
c001228c:	c1 e0 0c             	shl    eax,0xc
c001228f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012293:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012298:	8b 00                	mov    eax,DWORD PTR [eax]
c001229a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001229d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00122a3:	83 ec 04             	sub    esp,0x4
c00122a6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00122aa:	6a 01                	push   0x1
c00122ac:	50                   	push   eax
c00122ad:	e8 08 fd ff ff       	call   c0011fba <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00122b2:	83 c4 10             	add    esp,0x10
c00122b5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00122b9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00122bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00122bf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122c7:	25 01 04 00 00       	and    eax,0x401
c00122cc:	3d 01 04 00 00       	cmp    eax,0x401
c00122d1:	75 19                	jne    c00122ec <VAS::~VAS()+0xec>
c00122d3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00122d7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00122dc:	83 ec 0c             	sub    esp,0xc
c00122df:	50                   	push   eax
c00122e0:	e8 76 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c00122e5:	83 c4 10             	add    esp,0x10
c00122e8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00122ec:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00122f0:	eb 81                	jmp    c0012273 <VAS::~VAS()+0x73>
c00122f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122f6:	25 00 04 00 00       	and    eax,0x400
c00122fb:	74 19                	je     c0012316 <VAS::~VAS()+0x116>
c00122fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012301:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012306:	83 ec 0c             	sub    esp,0xc
c0012309:	50                   	push   eax
c001230a:	e8 4c db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001230f:	83 c4 10             	add    esp,0x10
c0012312:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012316:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001231a:	e9 1b ff ff ff       	jmp    c001223a <VAS::~VAS()+0x3a>
c001231f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012323:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012326:	83 ec 0c             	sub    esp,0xc
c0012329:	50                   	push   eax
c001232a:	e8 d6 fc ff ff       	call   c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c001232f:	83 c4 10             	add    esp,0x10
c0012332:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012336:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012339:	83 ec 0c             	sub    esp,0xc
c001233c:	50                   	push   eax
c001233d:	e8 19 db ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c0012342:	83 c4 10             	add    esp,0x10
c0012345:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012349:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001234d:	c1 e0 02             	shl    eax,0x2
c0012350:	83 ec 08             	sub    esp,0x8
c0012353:	50                   	push   eax
c0012354:	68 bc a6 02 c0       	push   0xc002a6bc
c0012359:	e8 91 0c 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001235e:	83 c4 10             	add    esp,0x10
c0012361:	e8 2e bb 00 00       	call   c001de94 <unlockScheduler()>
c0012366:	90                   	nop
c0012367:	83 c4 2c             	add    esp,0x2c
c001236a:	c3                   	ret    
c001236b:	90                   	nop

c001236c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001236c:	55                   	push   ebp
c001236d:	57                   	push   edi
c001236e:	56                   	push   esi
c001236f:	53                   	push   ebx
c0012370:	83 ec 1c             	sub    esp,0x1c
c0012373:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012377:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001237b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012381:	77 08                	ja     c001238b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012383:	0f 20 d8             	mov    eax,cr3
c0012386:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012389:	75 47                	jne    c00123d2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001238b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001238f:	09 d8                	or     eax,ebx
c0012391:	a9 ff 0f 00 00       	test   eax,0xfff
c0012396:	75 57                	jne    c00123ef <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012398:	89 de                	mov    esi,ebx
c001239a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001239d:	c1 ee 16             	shr    esi,0x16
c00123a0:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00123a7:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00123ab:	74 54                	je     c0012401 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00123ad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00123b1:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00123b7:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00123bb:	c1 e6 0c             	shl    esi,0xc
c00123be:	c1 eb 0a             	shr    ebx,0xa
c00123c1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00123c7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00123ca:	83 c4 1c             	add    esp,0x1c
c00123cd:	5b                   	pop    ebx
c00123ce:	5e                   	pop    esi
c00123cf:	5f                   	pop    edi
c00123d0:	5d                   	pop    ebp
c00123d1:	c3                   	ret    
c00123d2:	83 ec 0c             	sub    esp,0xc
c00123d5:	68 dc a6 02 c0       	push   0xc002a6dc
c00123da:	e8 10 0c 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00123df:	83 c4 10             	add    esp,0x10
c00123e2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123e6:	09 d8                	or     eax,ebx
c00123e8:	a9 ff 0f 00 00       	test   eax,0xfff
c00123ed:	74 a9                	je     c0012398 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00123ef:	83 ec 0c             	sub    esp,0xc
c00123f2:	68 44 a7 02 c0       	push   0xc002a744
c00123f7:	e8 a1 82 00 00       	call   c001a69d <Krnl::panic(char const*)>
c00123fc:	83 c4 10             	add    esp,0x10
c00123ff:	eb 97                	jmp    c0012398 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0012401:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012405:	e8 db da ff ff       	call   c000fee5 <Phys::allocatePage()>
c001240a:	89 c5                	mov    ebp,eax
c001240c:	e8 09 fa ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0012411:	83 ec 0c             	sub    esp,0xc
c0012414:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012418:	6a 01                	push   0x1
c001241a:	e8 60 f7 ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c001241f:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012426:	6a 01                	push   0x1
c0012428:	50                   	push   eax
c0012429:	55                   	push   ebp
c001242a:	81 cd 07 04 00 00    	or     ebp,0x407
c0012430:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012434:	51                   	push   ecx
c0012435:	e8 26 02 00 00       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001243a:	83 c4 1c             	add    esp,0x1c
c001243d:	68 00 10 00 00       	push   0x1000
c0012442:	6a 00                	push   0x0
c0012444:	50                   	push   eax
c0012445:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012449:	e8 2a e3 fe ff       	call   c0000778 <memset>
c001244e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012452:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012455:	e8 ab fb ff ff       	call   c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c001245a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001245e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012461:	83 c4 10             	add    esp,0x10
c0012464:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012467:	e9 41 ff ff ff       	jmp    c00123ad <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001246c <VAS::allocatePages(int, int)>:
c001246c:	55                   	push   ebp
c001246d:	57                   	push   edi
c001246e:	56                   	push   esi
c001246f:	53                   	push   ebx
c0012470:	83 ec 1c             	sub    esp,0x1c
c0012473:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012477:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001247c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012482:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012488:	83 e0 01             	and    eax,0x1
c001248b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001248f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012493:	0f 85 cc 00 00 00    	jne    c0012565 <VAS::allocatePages(int, int)+0xf9>
c0012499:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001249c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00124a0:	85 c0                	test   eax,eax
c00124a2:	0f 84 a1 00 00 00    	je     c0012549 <VAS::allocatePages(int, int)+0xdd>
c00124a8:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00124ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124b0:	c1 e6 0c             	shl    esi,0xc
c00124b3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00124b7:	85 c0                	test   eax,eax
c00124b9:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00124bc:	7e 33                	jle    c00124f1 <VAS::allocatePages(int, int)+0x85>
c00124be:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00124c2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124c6:	81 cd 00 04 00 00    	or     ebp,0x400
c00124cc:	e8 14 da ff ff       	call   c000fee5 <Phys::allocatePage()>
c00124d1:	55                   	push   ebp
c00124d2:	53                   	push   ebx
c00124d3:	50                   	push   eax
c00124d4:	57                   	push   edi
c00124d5:	e8 92 fe ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c00124da:	83 c4 10             	add    esp,0x10
c00124dd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124e2:	74 03                	je     c00124e7 <VAS::allocatePages(int, int)+0x7b>
c00124e4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124e7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124ed:	39 de                	cmp    esi,ebx
c00124ef:	75 db                	jne    c00124cc <VAS::allocatePages(int, int)+0x60>
c00124f1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124f6:	75 12                	jne    c001250a <VAS::allocatePages(int, int)+0x9e>
c00124f8:	0f 20 d8             	mov    eax,cr3
c00124fb:	0f 22 d8             	mov    cr3,eax
c00124fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012502:	83 c4 1c             	add    esp,0x1c
c0012505:	5b                   	pop    ebx
c0012506:	5e                   	pop    esi
c0012507:	5f                   	pop    edi
c0012508:	5d                   	pop    ebp
c0012509:	c3                   	ret    
c001250a:	c1 ee 0a             	shr    esi,0xa
c001250d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012511:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012517:	c1 eb 0a             	shr    ebx,0xa
c001251a:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012520:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012526:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001252c:	39 c3                	cmp    ebx,eax
c001252e:	77 ce                	ja     c00124fe <VAS::allocatePages(int, int)+0x92>
c0012530:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012533:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012539:	39 d8                	cmp    eax,ebx
c001253b:	73 f3                	jae    c0012530 <VAS::allocatePages(int, int)+0xc4>
c001253d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012541:	83 c4 1c             	add    esp,0x1c
c0012544:	5b                   	pop    ebx
c0012545:	5e                   	pop    esi
c0012546:	5f                   	pop    edi
c0012547:	5d                   	pop    ebp
c0012548:	c3                   	ret    
c0012549:	83 ec 0c             	sub    esp,0xc
c001254c:	68 68 a7 02 c0       	push   0xc002a768
c0012551:	e8 47 81 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0012556:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012559:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001255d:	83 c4 10             	add    esp,0x10
c0012560:	e9 43 ff ff ff       	jmp    c00124a8 <VAS::allocatePages(int, int)+0x3c>
c0012565:	83 ec 0c             	sub    esp,0xc
c0012568:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001256c:	e8 0e f6 ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0012571:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012575:	83 c4 10             	add    esp,0x10
c0012578:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001257d:	0f 87 9b 00 00 00    	ja     c001261e <VAS::allocatePages(int, int)+0x1b2>
c0012583:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012587:	85 d2                	test   edx,edx
c0012589:	7e 3c                	jle    c00125c7 <VAS::allocatePages(int, int)+0x15b>
c001258b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001258f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012593:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012597:	c1 e5 0c             	shl    ebp,0xc
c001259a:	81 ce 00 04 00 00    	or     esi,0x400
c00125a0:	01 dd                	add    ebp,ebx
c00125a2:	e8 3e d9 ff ff       	call   c000fee5 <Phys::allocatePage()>
c00125a7:	56                   	push   esi
c00125a8:	53                   	push   ebx
c00125a9:	50                   	push   eax
c00125aa:	57                   	push   edi
c00125ab:	e8 bc fd ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c00125b0:	83 c4 10             	add    esp,0x10
c00125b3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125b8:	74 03                	je     c00125bd <VAS::allocatePages(int, int)+0x151>
c00125ba:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125bd:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125c3:	39 dd                	cmp    ebp,ebx
c00125c5:	75 db                	jne    c00125a2 <VAS::allocatePages(int, int)+0x136>
c00125c7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125cc:	0f 84 26 ff ff ff    	je     c00124f8 <VAS::allocatePages(int, int)+0x8c>
c00125d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00125d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00125da:	89 d3                	mov    ebx,edx
c00125dc:	c1 e0 0c             	shl    eax,0xc
c00125df:	c1 eb 0a             	shr    ebx,0xa
c00125e2:	01 d0                	add    eax,edx
c00125e4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125ea:	c1 e8 0a             	shr    eax,0xa
c00125ed:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125f3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125f8:	2d 00 00 40 00       	sub    eax,0x400000
c00125fd:	39 c3                	cmp    ebx,eax
c00125ff:	0f 87 f9 fe ff ff    	ja     c00124fe <VAS::allocatePages(int, int)+0x92>
c0012605:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012608:	81 c3 00 10 00 00    	add    ebx,0x1000
c001260e:	39 d8                	cmp    eax,ebx
c0012610:	73 f3                	jae    c0012605 <VAS::allocatePages(int, int)+0x199>
c0012612:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012616:	83 c4 1c             	add    esp,0x1c
c0012619:	5b                   	pop    ebx
c001261a:	5e                   	pop    esi
c001261b:	5f                   	pop    edi
c001261c:	5d                   	pop    ebp
c001261d:	c3                   	ret    
c001261e:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0012623:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012629:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012630:	0f 84 4d ff ff ff    	je     c0012583 <VAS::allocatePages(int, int)+0x117>
c0012636:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001263e:	e9 40 ff ff ff       	jmp    c0012583 <VAS::allocatePages(int, int)+0x117>
c0012643:	90                   	nop

c0012644 <VAS::setCPUSpecific(unsigned long)>:
c0012644:	83 ec 0c             	sub    esp,0xc
c0012647:	6a 05                	push   0x5
c0012649:	68 00 00 40 c2       	push   0xc2400000
c001264e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012656:	e8 11 fd ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c001265b:	83 c4 1c             	add    esp,0x1c
c001265e:	c3                   	ret    
c001265f:	90                   	nop

c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012660:	55                   	push   ebp
c0012661:	57                   	push   edi
c0012662:	56                   	push   esi
c0012663:	53                   	push   ebx
c0012664:	83 ec 1c             	sub    esp,0x1c
c0012667:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001266c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012670:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012676:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001267a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012680:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012684:	83 e0 01             	and    eax,0x1
c0012687:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001268b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001268f:	85 c0                	test   eax,eax
c0012691:	7e 39                	jle    c00126cc <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012693:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012697:	89 f3                	mov    ebx,esi
c0012699:	c1 e0 0c             	shl    eax,0xc
c001269c:	01 f0                	add    eax,esi
c001269e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00126a2:	55                   	push   ebp
c00126a3:	53                   	push   ebx
c00126a4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126a8:	29 f0                	sub    eax,esi
c00126aa:	01 d8                	add    eax,ebx
c00126ac:	50                   	push   eax
c00126ad:	57                   	push   edi
c00126ae:	e8 b9 fc ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c00126b3:	83 c4 10             	add    esp,0x10
c00126b6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126bb:	74 03                	je     c00126c0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00126bd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00126c0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00126c6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00126ca:	75 d6                	jne    c00126a2 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00126cc:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00126d1:	75 10                	jne    c00126e3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00126d3:	0f 20 d8             	mov    eax,cr3
c00126d6:	0f 22 d8             	mov    cr3,eax
c00126d9:	83 c4 1c             	add    esp,0x1c
c00126dc:	89 f0                	mov    eax,esi
c00126de:	5b                   	pop    ebx
c00126df:	5e                   	pop    esi
c00126e0:	5f                   	pop    edi
c00126e1:	5d                   	pop    ebp
c00126e2:	c3                   	ret    
c00126e3:	89 f3                	mov    ebx,esi
c00126e5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00126e9:	c1 eb 0a             	shr    ebx,0xa
c00126ec:	c1 e0 0c             	shl    eax,0xc
c00126ef:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00126f5:	01 f0                	add    eax,esi
c00126f7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00126fd:	c1 e8 0a             	shr    eax,0xa
c0012700:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012705:	2d 00 00 40 00       	sub    eax,0x400000
c001270a:	39 c3                	cmp    ebx,eax
c001270c:	77 cb                	ja     c00126d9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001270e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012711:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012717:	39 d8                	cmp    eax,ebx
c0012719:	73 f3                	jae    c001270e <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c001271b:	83 c4 1c             	add    esp,0x1c
c001271e:	89 f0                	mov    eax,esi
c0012720:	5b                   	pop    ebx
c0012721:	5e                   	pop    esi
c0012722:	5f                   	pop    edi
c0012723:	5d                   	pop    ebp
c0012724:	c3                   	ret    
c0012725:	90                   	nop

c0012726 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012726:	55                   	push   ebp
c0012727:	57                   	push   edi
c0012728:	56                   	push   esi
c0012729:	53                   	push   ebx
c001272a:	83 ec 1c             	sub    esp,0x1c
c001272d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012731:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012735:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012739:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001273d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012742:	75 4a                	jne    c001278e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012744:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012748:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001274b:	c1 eb 16             	shr    ebx,0x16
c001274e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012755:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012759:	74 4d                	je     c00127a8 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001275b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001275f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012763:	c1 e8 0a             	shr    eax,0xa
c0012766:	80 fa 01             	cmp    dl,0x1
c0012769:	19 d2                	sbb    edx,edx
c001276b:	c1 e3 0c             	shl    ebx,0xc
c001276e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012772:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012778:	25 fc 0f 00 00       	and    eax,0xffc
c001277d:	01 d8                	add    eax,ebx
c001277f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012786:	83 c4 1c             	add    esp,0x1c
c0012789:	5b                   	pop    ebx
c001278a:	5e                   	pop    esi
c001278b:	5f                   	pop    edi
c001278c:	5d                   	pop    ebp
c001278d:	c3                   	ret    
c001278e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012792:	83 ec 0c             	sub    esp,0xc
c0012795:	68 94 a7 02 c0       	push   0xc002a794
c001279a:	e8 fe 7e 00 00       	call   c001a69d <Krnl::panic(char const*)>
c001279f:	83 c4 10             	add    esp,0x10
c00127a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00127a6:	eb 9c                	jmp    c0012744 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00127a8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00127ac:	e8 34 d7 ff ff       	call   c000fee5 <Phys::allocatePage()>
c00127b1:	89 c5                	mov    ebp,eax
c00127b3:	e8 62 f6 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c00127b8:	83 ec 0c             	sub    esp,0xc
c00127bb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00127bf:	6a 01                	push   0x1
c00127c1:	e8 b9 f3 ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c00127c6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00127cd:	6a 01                	push   0x1
c00127cf:	50                   	push   eax
c00127d0:	55                   	push   ebp
c00127d1:	81 cd 07 04 00 00    	or     ebp,0x407
c00127d7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00127db:	51                   	push   ecx
c00127dc:	e8 7f fe ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00127e1:	83 c4 1c             	add    esp,0x1c
c00127e4:	68 00 10 00 00       	push   0x1000
c00127e9:	6a 00                	push   0x0
c00127eb:	50                   	push   eax
c00127ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00127f0:	e8 83 df fe ff       	call   c0000778 <memset>
c00127f5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00127f9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00127fc:	e8 04 f8 ff ff       	call   c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c0012801:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012804:	83 c4 10             	add    esp,0x10
c0012807:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c001280a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001280e:	e9 48 ff ff ff       	jmp    c001275b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c0012813:	90                   	nop

c0012814 <VAS::VAS(bool)>:
c0012814:	53                   	push   ebx
c0012815:	83 ec 28             	sub    esp,0x28
c0012818:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001281c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012820:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012824:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001282b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001282f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c0012836:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001283a:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001283e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012841:	e8 9f d6 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012846:	89 c2                	mov    edx,eax
c0012848:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001284c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001284f:	e8 c6 f5 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0012854:	89 c3                	mov    ebx,eax
c0012856:	83 ec 0c             	sub    esp,0xc
c0012859:	6a 01                	push   0x1
c001285b:	e8 1f f3 ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0012860:	83 c4 10             	add    esp,0x10
c0012863:	89 c2                	mov    edx,eax
c0012865:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012869:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001286c:	83 ec 0c             	sub    esp,0xc
c001286f:	6a 03                	push   0x3
c0012871:	6a 01                	push   0x1
c0012873:	52                   	push   edx
c0012874:	50                   	push   eax
c0012875:	53                   	push   ebx
c0012876:	e8 e5 fd ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001287b:	83 c4 20             	add    esp,0x20
c001287e:	89 c2                	mov    edx,eax
c0012880:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012884:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0012887:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001288f:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c0012897:	7f 1c                	jg     c00128b5 <VAS::VAS(bool)+0xa1>
c0012899:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00128a0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00128a4:	c1 e2 02             	shl    edx,0x2
c00128a7:	01 d0                	add    eax,edx
c00128a9:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00128af:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00128b3:	eb da                	jmp    c001288f <VAS::VAS(bool)+0x7b>
c00128b5:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00128bd:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00128c5:	7f 7a                	jg     c0012941 <VAS::VAS(bool)+0x12d>
c00128c7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00128cb:	2d 00 02 00 00       	sub    eax,0x200
c00128d0:	c1 e0 0c             	shl    eax,0xc
c00128d3:	83 c8 03             	or     eax,0x3
c00128d6:	89 c2                	mov    edx,eax
c00128d8:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00128dd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e3:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128e9:	83 e0 10             	and    eax,0x10
c00128ec:	84 c0                	test   al,al
c00128ee:	74 07                	je     c00128f7 <VAS::VAS(bool)+0xe3>
c00128f0:	b8 00 01 00 00       	mov    eax,0x100
c00128f5:	eb 05                	jmp    c00128fc <VAS::VAS(bool)+0xe8>
c00128f7:	b8 00 00 00 00       	mov    eax,0x0
c00128fc:	09 d0                	or     eax,edx
c00128fe:	89 c1                	mov    ecx,eax
c0012900:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012904:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012907:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001290b:	c1 e2 02             	shl    edx,0x2
c001290e:	01 d0                	add    eax,edx
c0012910:	89 ca                	mov    edx,ecx
c0012912:	89 10                	mov    DWORD PTR [eax],edx
c0012914:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012918:	2d 40 03 00 00       	sub    eax,0x340
c001291d:	83 f8 7f             	cmp    eax,0x7f
c0012920:	77 16                	ja     c0012938 <VAS::VAS(bool)+0x124>
c0012922:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012926:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012929:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001292d:	c1 e2 02             	shl    edx,0x2
c0012930:	01 d0                	add    eax,edx
c0012932:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012938:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c001293c:	e9 7c ff ff ff       	jmp    c00128bd <VAS::VAS(bool)+0xa9>
c0012941:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0012946:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012952:	83 e0 10             	and    eax,0x10
c0012955:	84 c0                	test   al,al
c0012957:	74 07                	je     c0012960 <VAS::VAS(bool)+0x14c>
c0012959:	b8 03 41 00 00       	mov    eax,0x4103
c001295e:	eb 05                	jmp    c0012965 <VAS::VAS(bool)+0x151>
c0012960:	b8 03 40 00 00       	mov    eax,0x4003
c0012965:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012969:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c001296c:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012972:	89 02                	mov    DWORD PTR [edx],eax
c0012974:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0012979:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001297f:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012985:	83 ec 08             	sub    esp,0x8
c0012988:	50                   	push   eax
c0012989:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001298d:	e8 b2 fc ff ff       	call   c0012644 <VAS::setCPUSpecific(unsigned long)>
c0012992:	83 c4 10             	add    esp,0x10
c0012995:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012999:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001299c:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00129a1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129a7:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00129ad:	83 e0 10             	and    eax,0x10
c00129b0:	84 c0                	test   al,al
c00129b2:	74 07                	je     c00129bb <VAS::VAS(bool)+0x1a7>
c00129b4:	b8 00 01 00 00       	mov    eax,0x100
c00129b9:	eb 05                	jmp    c00129c0 <VAS::VAS(bool)+0x1ac>
c00129bb:	b8 00 00 00 00       	mov    eax,0x0
c00129c0:	09 c2                	or     edx,eax
c00129c2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129c6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00129c9:	05 fc 0f 00 00       	add    eax,0xffc
c00129ce:	83 ca 03             	or     edx,0x3
c00129d1:	89 10                	mov    DWORD PTR [eax],edx
c00129d3:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00129d8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00129de:	83 ec 0c             	sub    esp,0xc
c00129e1:	50                   	push   eax
c00129e2:	e8 1b 1d 00 00       	call   c0014702 <Device::getName()>
c00129e7:	83 c4 10             	add    esp,0x10
c00129ea:	83 ec 08             	sub    esp,0x8
c00129ed:	68 eb a8 02 c0       	push   0xc002a8eb
c00129f2:	50                   	push   eax
c00129f3:	e8 c8 de fe ff       	call   c00008c0 <strcmp>
c00129f8:	83 c4 10             	add    esp,0x10
c00129fb:	85 c0                	test   eax,eax
c00129fd:	0f 94 c0             	sete   al
c0012a00:	84 c0                	test   al,al
c0012a02:	74 70                	je     c0012a74 <VAS::VAS(bool)+0x260>
c0012a04:	e8 6c b4 00 00       	call   c001de75 <disableIRQs()>
c0012a09:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0012a0e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a14:	05 7c 09 00 00       	add    eax,0x97c
c0012a19:	83 ec 0c             	sub    esp,0xc
c0012a1c:	50                   	push   eax
c0012a1d:	e8 9a c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a22:	83 c4 10             	add    esp,0x10
c0012a25:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a2a:	89 c3                	mov    ebx,eax
c0012a2c:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0012a31:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012a37:	05 7c 09 00 00       	add    eax,0x97c
c0012a3c:	83 ec 0c             	sub    esp,0xc
c0012a3f:	50                   	push   eax
c0012a40:	e8 77 c8 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c0012a45:	83 c4 10             	add    esp,0x10
c0012a48:	83 ec 08             	sub    esp,0x8
c0012a4b:	50                   	push   eax
c0012a4c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a50:	e8 91 f5 ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012a55:	83 c4 10             	add    esp,0x10
c0012a58:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a5a:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012a5f:	6a 11                	push   0x11
c0012a61:	53                   	push   ebx
c0012a62:	50                   	push   eax
c0012a63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012a67:	e8 00 f9 ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012a6c:	83 c4 10             	add    esp,0x10
c0012a6f:	e8 0f b4 00 00       	call   c001de83 <enableIRQs()>
c0012a74:	90                   	nop
c0012a75:	83 c4 28             	add    esp,0x28
c0012a78:	5b                   	pop    ebx
c0012a79:	c3                   	ret    

c0012a7a <VAS::evict(unsigned long)>:
c0012a7a:	55                   	push   ebp
c0012a7b:	57                   	push   edi
c0012a7c:	56                   	push   esi
c0012a7d:	53                   	push   ebx
c0012a7e:	83 ec 0c             	sub    esp,0xc
c0012a81:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0012a85:	e8 36 f2 ff ff       	call   c0011cc0 <Virt::allocateSwapfilePage()>
c0012a8a:	89 c7                	mov    edi,eax
c0012a8c:	a1 cc d4 02 c0       	mov    eax,ds:0xc002d4cc
c0012a91:	85 c0                	test   eax,eax
c0012a93:	7e 3d                	jle    c0012ad2 <VAS::evict(unsigned long)+0x58>
c0012a95:	89 ee                	mov    esi,ebp
c0012a97:	31 db                	xor    ebx,ebx
c0012a99:	83 ec 0c             	sub    esp,0xc
c0012a9c:	57                   	push   edi
c0012a9d:	e8 0c f2 ff ff       	call   c0011cae <Virt::swapIDToSector(unsigned long)>
c0012aa2:	89 34 24             	mov    DWORD PTR [esp],esi
c0012aa5:	01 d8                	add    eax,ebx
c0012aa7:	6a 01                	push   0x1
c0012aa9:	31 d2                	xor    edx,edx
c0012aab:	43                   	inc    ebx
c0012aac:	52                   	push   edx
c0012aad:	81 c6 00 02 00 00    	add    esi,0x200
c0012ab3:	50                   	push   eax
c0012ab4:	0f be 05 d8 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d4d8
c0012abb:	ff 34 85 3c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd15c4]
c0012ac2:	e8 b1 3d 00 00       	call   c0016878 <LogicalDisk::write(unsigned long long, int, void*)>
c0012ac7:	83 c4 20             	add    esp,0x20
c0012aca:	39 1d cc d4 02 c0    	cmp    DWORD PTR ds:0xc002d4cc,ebx
c0012ad0:	7f c7                	jg     c0012a99 <VAS::evict(unsigned long)+0x1f>
c0012ad2:	83 ec 08             	sub    esp,0x8
c0012ad5:	c1 e7 0b             	shl    edi,0xb
c0012ad8:	55                   	push   ebp
c0012ad9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012add:	e8 04 f5 ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012ae2:	83 c4 0c             	add    esp,0xc
c0012ae5:	8b 10                	mov    edx,DWORD PTR [eax]
c0012ae7:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012aed:	09 d7                	or     edi,edx
c0012aef:	89 38                	mov    DWORD PTR [eax],edi
c0012af1:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0012af6:	40                   	inc    eax
c0012af7:	a3 a4 e6 02 c0       	mov    ds:0xc002e6a4,eax
c0012afc:	0f 20 da             	mov    edx,cr3
c0012aff:	0f 22 da             	mov    cr3,edx
c0012b02:	50                   	push   eax
c0012b03:	55                   	push   ebp
c0012b04:	68 f9 a8 02 c0       	push   0xc002a8f9
c0012b09:	e8 e1 04 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012b0e:	83 c4 1c             	add    esp,0x1c
c0012b11:	5b                   	pop    ebx
c0012b12:	5e                   	pop    esi
c0012b13:	5f                   	pop    edi
c0012b14:	5d                   	pop    ebp
c0012b15:	c3                   	ret    

c0012b16 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012b16:	55                   	push   ebp
c0012b17:	57                   	push   edi
c0012b18:	56                   	push   esi
c0012b19:	53                   	push   ebx
c0012b1a:	83 ec 14             	sub    esp,0x14
c0012b1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b21:	68 0e a9 02 c0       	push   0xc002a90e
c0012b26:	e8 c4 04 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012b2b:	c7 04 24 25 a9 02 c0 	mov    DWORD PTR [esp],0xc002a925
c0012b32:	e8 b8 04 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012b37:	c7 04 24 29 a9 02 c0 	mov    DWORD PTR [esp],0xc002a929
c0012b3e:	e8 ac 04 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012b43:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0012b47:	c7 04 24 2d a9 02 c0 	mov    DWORD PTR [esp],0xc002a92d
c0012b4e:	81 e7 00 f0 ff ff    	and    edi,0xfffff000
c0012b54:	e8 96 04 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012b59:	c7 04 24 31 a9 02 c0 	mov    DWORD PTR [esp],0xc002a931
c0012b60:	e8 8a 04 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012b65:	83 c4 10             	add    esp,0x10
c0012b68:	85 ff                	test   edi,edi
c0012b6a:	74 4d                	je     c0012bb9 <VAS::tryLoadBackOffDisk(unsigned long)+0xa3>
c0012b6c:	83 ec 08             	sub    esp,0x8
c0012b6f:	57                   	push   edi
c0012b70:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012b74:	e8 6d f4 ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012b79:	c7 04 24 46 a9 02 c0 	mov    DWORD PTR [esp],0xc002a946
c0012b80:	89 c3                	mov    ebx,eax
c0012b82:	e8 68 04 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012b87:	83 c4 10             	add    esp,0x10
c0012b8a:	85 db                	test   ebx,ebx
c0012b8c:	74 05                	je     c0012b93 <VAS::tryLoadBackOffDisk(unsigned long)+0x7d>
c0012b8e:	f6 03 01             	test   BYTE PTR [ebx],0x1
c0012b91:	74 40                	je     c0012bd3 <VAS::tryLoadBackOffDisk(unsigned long)+0xbd>
c0012b93:	83 ec 0c             	sub    esp,0xc
c0012b96:	68 8b a9 02 c0       	push   0xc002a98b
c0012b9b:	e8 4f 04 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012ba0:	c7 04 24 8f a9 02 c0 	mov    DWORD PTR [esp],0xc002a98f
c0012ba7:	e8 43 04 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012bac:	83 c4 10             	add    esp,0x10
c0012baf:	31 c0                	xor    eax,eax
c0012bb1:	83 c4 0c             	add    esp,0xc
c0012bb4:	5b                   	pop    ebx
c0012bb5:	5e                   	pop    esi
c0012bb6:	5f                   	pop    edi
c0012bb7:	5d                   	pop    ebp
c0012bb8:	c3                   	ret    
c0012bb9:	83 ec 0c             	sub    esp,0xc
c0012bbc:	68 35 a9 02 c0       	push   0xc002a935
c0012bc1:	e8 29 04 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012bc6:	83 c4 10             	add    esp,0x10
c0012bc9:	31 c0                	xor    eax,eax
c0012bcb:	83 c4 0c             	add    esp,0xc
c0012bce:	5b                   	pop    ebx
c0012bcf:	5e                   	pop    esi
c0012bd0:	5f                   	pop    edi
c0012bd1:	5d                   	pop    ebp
c0012bd2:	c3                   	ret    
c0012bd3:	83 ec 0c             	sub    esp,0xc
c0012bd6:	68 4a a9 02 c0       	push   0xc002a94a
c0012bdb:	e8 0f 04 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012be0:	8b 2b                	mov    ebp,DWORD PTR [ebx]
c0012be2:	e8 fe d2 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012be7:	c1 ed 0b             	shr    ebp,0xb
c0012bea:	89 c6                	mov    esi,eax
c0012bec:	c7 04 24 4e a9 02 c0 	mov    DWORD PTR [esp],0xc002a94e
c0012bf3:	e8 f7 03 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012bf8:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012bfa:	25 ff 0f 00 00       	and    eax,0xfff
c0012bff:	09 f0                	or     eax,esi
c0012c01:	0d 01 08 00 00       	or     eax,0x801
c0012c06:	89 03                	mov    DWORD PTR [ebx],eax
c0012c08:	c7 04 24 52 a9 02 c0 	mov    DWORD PTR [esp],0xc002a952
c0012c0f:	e8 db 03 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012c14:	0f 20 d8             	mov    eax,cr3
c0012c17:	0f 22 d8             	mov    cr3,eax
c0012c1a:	a1 cc d4 02 c0       	mov    eax,ds:0xc002d4cc
c0012c1f:	83 c4 10             	add    esp,0x10
c0012c22:	85 c0                	test   eax,eax
c0012c24:	7e 56                	jle    c0012c7c <VAS::tryLoadBackOffDisk(unsigned long)+0x166>
c0012c26:	89 fe                	mov    esi,edi
c0012c28:	31 db                	xor    ebx,ebx
c0012c2a:	83 ec 0c             	sub    esp,0xc
c0012c2d:	55                   	push   ebp
c0012c2e:	e8 7b f0 ff ff       	call   c0011cae <Virt::swapIDToSector(unsigned long)>
c0012c33:	83 c4 0c             	add    esp,0xc
c0012c36:	01 d8                	add    eax,ebx
c0012c38:	50                   	push   eax
c0012c39:	56                   	push   esi
c0012c3a:	68 b8 a7 02 c0       	push   0xc002a7b8
c0012c3f:	e8 ab 03 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012c44:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c47:	e8 62 f0 ff ff       	call   c0011cae <Virt::swapIDToSector(unsigned long)>
c0012c4c:	89 34 24             	mov    DWORD PTR [esp],esi
c0012c4f:	01 d8                	add    eax,ebx
c0012c51:	6a 01                	push   0x1
c0012c53:	31 d2                	xor    edx,edx
c0012c55:	43                   	inc    ebx
c0012c56:	52                   	push   edx
c0012c57:	81 c6 00 02 00 00    	add    esi,0x200
c0012c5d:	50                   	push   eax
c0012c5e:	0f be 05 d8 d4 02 c0 	movsx  eax,BYTE PTR ds:0xc002d4d8
c0012c65:	ff 34 85 3c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd15c4]
c0012c6c:	e8 9b 3b 00 00       	call   c001680c <LogicalDisk::read(unsigned long long, int, void*)>
c0012c71:	83 c4 20             	add    esp,0x20
c0012c74:	39 1d cc d4 02 c0    	cmp    DWORD PTR ds:0xc002d4cc,ebx
c0012c7a:	7f ae                	jg     c0012c2a <VAS::tryLoadBackOffDisk(unsigned long)+0x114>
c0012c7c:	83 ec 0c             	sub    esp,0xc
c0012c7f:	68 56 a9 02 c0       	push   0xc002a956
c0012c84:	e8 66 03 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012c89:	83 c4 0c             	add    esp,0xc
c0012c8c:	a1 a4 e6 02 c0       	mov    eax,ds:0xc002e6a4
c0012c91:	48                   	dec    eax
c0012c92:	50                   	push   eax
c0012c93:	a3 a4 e6 02 c0       	mov    ds:0xc002e6a4,eax
c0012c98:	57                   	push   edi
c0012c99:	68 5a a9 02 c0       	push   0xc002a95a
c0012c9e:	e8 4c 03 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012ca3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ca6:	e8 e5 ef ff ff       	call   c0011c90 <Virt::freeSwapfilePage(unsigned long)>
c0012cab:	c7 04 24 6f a9 02 c0 	mov    DWORD PTR [esp],0xc002a96f
c0012cb2:	e8 38 03 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012cb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012cbb:	83 c4 10             	add    esp,0x10
c0012cbe:	25 ff 0f 00 00       	and    eax,0xfff
c0012cc3:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012cc8:	77 1a                	ja     c0012ce4 <VAS::tryLoadBackOffDisk(unsigned long)+0x1ce>
c0012cca:	83 ec 0c             	sub    esp,0xc
c0012ccd:	68 87 a9 02 c0       	push   0xc002a987
c0012cd2:	e8 18 03 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012cd7:	83 c4 10             	add    esp,0x10
c0012cda:	b0 01                	mov    al,0x1
c0012cdc:	83 c4 0c             	add    esp,0xc
c0012cdf:	5b                   	pop    ebx
c0012ce0:	5e                   	pop    esi
c0012ce1:	5f                   	pop    edi
c0012ce2:	5d                   	pop    ebp
c0012ce3:	c3                   	ret    
c0012ce4:	83 ec 0c             	sub    esp,0xc
c0012ce7:	68 73 a9 02 c0       	push   0xc002a973
c0012cec:	e8 ac 79 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0012cf1:	83 c4 10             	add    esp,0x10
c0012cf4:	eb d4                	jmp    c0012cca <VAS::tryLoadBackOffDisk(unsigned long)+0x1b4>

c0012cf6 <VAS::scanForEviction()>:
c0012cf6:	55                   	push   ebp
c0012cf7:	57                   	push   edi
c0012cf8:	31 ff                	xor    edi,edi
c0012cfa:	56                   	push   esi
c0012cfb:	53                   	push   ebx
c0012cfc:	83 ec 1c             	sub    esp,0x1c
c0012cff:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012d03:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0012d08:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0012d0b:	89 f3                	mov    ebx,esi
c0012d0d:	39 de                	cmp    esi,ebx
c0012d0f:	74 74                	je     c0012d85 <VAS::scanForEviction()+0x8f>
c0012d11:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012d17:	75 0e                	jne    c0012d27 <VAS::scanForEviction()+0x31>
c0012d19:	89 d9                	mov    ecx,ebx
c0012d1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d1e:	c1 e9 16             	shr    ecx,0x16
c0012d21:	f6 04 88 01          	test   BYTE PTR [eax+ecx*4],0x1
c0012d25:	74 51                	je     c0012d78 <VAS::scanForEviction()+0x82>
c0012d27:	53                   	push   ebx
c0012d28:	55                   	push   ebp
c0012d29:	e8 b8 f2 ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c0012d2e:	5a                   	pop    edx
c0012d2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d31:	59                   	pop    ecx
c0012d32:	89 c1                	mov    ecx,eax
c0012d34:	81 e1 00 0c 00 00    	and    ecx,0xc00
c0012d3a:	81 f9 00 0c 00 00    	cmp    ecx,0xc00
c0012d40:	74 57                	je     c0012d99 <VAS::scanForEviction()+0xa3>
c0012d42:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012d48:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012d4e:	76 41                	jbe    c0012d91 <VAS::scanForEviction()+0x9b>
c0012d50:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
c0012d57:	85 f6                	test   esi,esi
c0012d59:	74 6b                	je     c0012dc6 <VAS::scanForEviction()+0xd0>
c0012d5b:	31 db                	xor    ebx,ebx
c0012d5d:	bf 01 00 00 00       	mov    edi,0x1
c0012d62:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012d68:	75 bd                	jne    c0012d27 <VAS::scanForEviction()+0x31>
c0012d6a:	89 d9                	mov    ecx,ebx
c0012d6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0012d6f:	c1 e9 16             	shr    ecx,0x16
c0012d72:	f6 04 88 01          	test   BYTE PTR [eax+ecx*4],0x1
c0012d76:	75 af                	jne    c0012d27 <VAS::scanForEviction()+0x31>
c0012d78:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012d7e:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
c0012d81:	39 de                	cmp    esi,ebx
c0012d83:	75 8c                	jne    c0012d11 <VAS::scanForEviction()+0x1b>
c0012d85:	89 f8                	mov    eax,edi
c0012d87:	84 c0                	test   al,al
c0012d89:	74 86                	je     c0012d11 <VAS::scanForEviction()+0x1b>
c0012d8b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0012d8f:	eb 80                	jmp    c0012d11 <VAS::scanForEviction()+0x1b>
c0012d91:	89 5d 10             	mov    DWORD PTR [ebp+0x10],ebx
c0012d94:	e9 74 ff ff ff       	jmp    c0012d0d <VAS::scanForEviction()+0x17>
c0012d99:	a8 01                	test   al,0x1
c0012d9b:	74 a5                	je     c0012d42 <VAS::scanForEviction()+0x4c>
c0012d9d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012da2:	75 04                	jne    c0012da8 <VAS::scanForEviction()+0xb2>
c0012da4:	a8 40                	test   al,0x40
c0012da6:	75 9a                	jne    c0012d42 <VAS::scanForEviction()+0x4c>
c0012da8:	83 ec 08             	sub    esp,0x8
c0012dab:	53                   	push   ebx
c0012dac:	55                   	push   ebp
c0012dad:	e8 c8 fc ff ff       	call   c0012a7a <VAS::evict(unsigned long)>
c0012db2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0012db5:	8d 88 00 10 00 00    	lea    ecx,[eax+0x1000]
c0012dbb:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
c0012dbe:	83 c4 2c             	add    esp,0x2c
c0012dc1:	5b                   	pop    ebx
c0012dc2:	5e                   	pop    esi
c0012dc3:	5f                   	pop    edi
c0012dc4:	5d                   	pop    ebp
c0012dc5:	c3                   	ret    
c0012dc6:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0012dcb:	eb 8e                	jmp    c0012d5b <VAS::scanForEviction()+0x65>

c0012dcd <mapVASFirstTime>:
c0012dcd:	55                   	push   ebp
c0012dce:	57                   	push   edi
c0012dcf:	56                   	push   esi
c0012dd0:	53                   	push   ebx
c0012dd1:	83 ec 0c             	sub    esp,0xc
c0012dd4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012dd9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012ddc:	4a                   	dec    edx
c0012ddd:	0f 84 8e 00 00 00    	je     c0012e71 <mapVASFirstTime+0xa4>
c0012de3:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012de6:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012de9:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012dee:	c1 e5 15             	shl    ebp,0x15
c0012df1:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012df6:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012dfc:	29 eb                	sub    ebx,ebp
c0012dfe:	29 ee                	sub    esi,ebp
c0012e00:	e8 e0 d0 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012e05:	83 ec 0c             	sub    esp,0xc
c0012e08:	68 03 04 00 00       	push   0x403
c0012e0d:	6a 01                	push   0x1
c0012e0f:	53                   	push   ebx
c0012e10:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012e16:	50                   	push   eax
c0012e17:	57                   	push   edi
c0012e18:	e8 43 f8 ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e1d:	83 c4 20             	add    esp,0x20
c0012e20:	39 f3                	cmp    ebx,esi
c0012e22:	75 dc                	jne    c0012e00 <mapVASFirstTime+0x33>
c0012e24:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012e29:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012e2e:	29 ee                	sub    esi,ebp
c0012e30:	29 e8                	sub    eax,ebp
c0012e32:	89 c5                	mov    ebp,eax
c0012e34:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012e38:	19 db                	sbb    ebx,ebx
c0012e3a:	e8 a6 d0 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0012e3f:	83 e3 04             	and    ebx,0x4
c0012e42:	83 ec 0c             	sub    esp,0xc
c0012e45:	81 c3 03 04 00 00    	add    ebx,0x403
c0012e4b:	53                   	push   ebx
c0012e4c:	6a 01                	push   0x1
c0012e4e:	56                   	push   esi
c0012e4f:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012e55:	50                   	push   eax
c0012e56:	57                   	push   edi
c0012e57:	e8 04 f8 ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012e5c:	83 c4 20             	add    esp,0x20
c0012e5f:	39 f5                	cmp    ebp,esi
c0012e61:	75 d1                	jne    c0012e34 <mapVASFirstTime+0x67>
c0012e63:	0f 20 d8             	mov    eax,cr3
c0012e66:	0f 22 d8             	mov    cr3,eax
c0012e69:	83 c4 0c             	add    esp,0xc
c0012e6c:	5b                   	pop    ebx
c0012e6d:	5e                   	pop    esi
c0012e6e:	5f                   	pop    edi
c0012e6f:	5d                   	pop    ebp
c0012e70:	c3                   	ret    
c0012e71:	83 ec 0c             	sub    esp,0xc
c0012e74:	68 93 a9 02 c0       	push   0xc002a993
c0012e79:	e8 71 01 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012e7e:	83 c4 10             	add    esp,0x10
c0012e81:	83 c4 0c             	add    esp,0xc
c0012e84:	5b                   	pop    ebx
c0012e85:	5e                   	pop    esi
c0012e86:	5f                   	pop    edi
c0012e87:	5d                   	pop    ebp
c0012e88:	c3                   	ret    

c0012e89 <__cxa_atexit>:
c0012e89:	31 c0                	xor    eax,eax
c0012e8b:	c3                   	ret    

c0012e8c <__cxa_finalize>:
c0012e8c:	c3                   	ret    

c0012e8d <__stack_chk_fail>:
c0012e8d:	55                   	push   ebp
c0012e8e:	89 e5                	mov    ebp,esp
c0012e90:	83 ec 14             	sub    esp,0x14
c0012e93:	68 ac a9 02 c0       	push   0xc002a9ac
c0012e98:	e8 52 01 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012e9d:	58                   	pop    eax
c0012e9e:	5a                   	pop    edx
c0012e9f:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012ea2:	68 fc a9 02 c0       	push   0xc002a9fc
c0012ea7:	e8 43 01 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012eac:	59                   	pop    ecx
c0012ead:	58                   	pop    eax
c0012eae:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012eb1:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012eb4:	68 fc a9 02 c0       	push   0xc002a9fc
c0012eb9:	e8 31 01 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012ebe:	5a                   	pop    edx
c0012ebf:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ec2:	59                   	pop    ecx
c0012ec3:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ec5:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ec8:	68 fc a9 02 c0       	push   0xc002a9fc
c0012ecd:	e8 1d 01 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012ed2:	5a                   	pop    edx
c0012ed3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ed6:	59                   	pop    ecx
c0012ed7:	8b 00                	mov    eax,DWORD PTR [eax]
c0012ed9:	8b 00                	mov    eax,DWORD PTR [eax]
c0012edb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012ede:	68 fc a9 02 c0       	push   0xc002a9fc
c0012ee3:	e8 07 01 00 00       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0012ee8:	c7 04 24 04 aa 02 c0 	mov    DWORD PTR [esp],0xc002aa04
c0012eef:	e8 a9 77 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0012ef4:	83 c4 10             	add    esp,0x10
c0012ef7:	c9                   	leave  
c0012ef8:	c3                   	ret    

c0012ef9 <__cxa_pure_virtual>:
c0012ef9:	83 ec 18             	sub    esp,0x18
c0012efc:	68 1c aa 02 c0       	push   0xc002aa1c
c0012f01:	e8 97 77 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0012f06:	83 c4 1c             	add    esp,0x1c
c0012f09:	c3                   	ret    

c0012f0a <operator new[](unsigned long)>:
c0012f0a:	e9 34 c9 ff ff       	jmp    c000f843 <malloc>

c0012f0f <operator delete(void*, unsigned long)>:
c0012f0f:	e9 4f c9 ff ff       	jmp    c000f863 <rfree>

c0012f14 <operator delete[](void*)>:
c0012f14:	e9 4a c9 ff ff       	jmp    c000f863 <rfree>

c0012f19 <operator delete[](void*, unsigned long)>:
c0012f19:	e9 45 c9 ff ff       	jmp    c000f863 <rfree>

c0012f1e <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012f1e:	57                   	push   edi
c0012f1f:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012f24:	56                   	push   esi
c0012f25:	be 30 aa 02 c0       	mov    esi,0xc002aa30
c0012f2a:	53                   	push   ebx
c0012f2b:	83 ec 40             	sub    esp,0x40
c0012f2e:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012f32:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012f36:	fc                   	cld    
c0012f37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012f39:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012f3d:	83 f9 3e             	cmp    ecx,0x3e
c0012f40:	7e 05                	jle    c0012f47 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012f42:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012f47:	89 df                	mov    edi,ebx
c0012f49:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012f4d:	eb 02                	jmp    c0012f51 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012f4f:	89 c7                	mov    edi,eax
c0012f51:	31 d2                	xor    edx,edx
c0012f53:	46                   	inc    esi
c0012f54:	89 f8                	mov    eax,edi
c0012f56:	f7 f1                	div    ecx
c0012f58:	39 cf                	cmp    edi,ecx
c0012f5a:	73 f3                	jae    c0012f4f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012f5c:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012f5f:	eb 02                	jmp    c0012f63 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012f61:	89 c3                	mov    ebx,eax
c0012f63:	31 d2                	xor    edx,edx
c0012f65:	4e                   	dec    esi
c0012f66:	89 d8                	mov    eax,ebx
c0012f68:	f7 f1                	div    ecx
c0012f6a:	39 cb                	cmp    ebx,ecx
c0012f6c:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012f70:	88 16                	mov    BYTE PTR [esi],dl
c0012f72:	73 ed                	jae    c0012f61 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012f74:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012f78:	83 c4 40             	add    esp,0x40
c0012f7b:	5b                   	pop    ebx
c0012f7c:	5e                   	pop    esi
c0012f7d:	5f                   	pop    edi
c0012f7e:	c3                   	ret    

c0012f7f <Dbg::logc(char)>:
c0012f7f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012f83:	ba fd 03 00 00       	mov    edx,0x3fd
c0012f88:	ec                   	in     al,dx
c0012f89:	a8 20                	test   al,0x20
c0012f8b:	74 fb                	je     c0012f88 <Dbg::logc(char)+0x9>
c0012f8d:	ba f8 03 00 00       	mov    edx,0x3f8
c0012f92:	88 c8                	mov    al,cl
c0012f94:	ee                   	out    dx,al
c0012f95:	c3                   	ret    

c0012f96 <Dbg::logs(char*)>:
c0012f96:	53                   	push   ebx
c0012f97:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012f9b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012f9e:	84 c0                	test   al,al
c0012fa0:	74 0f                	je     c0012fb1 <Dbg::logs(char*)+0x1b>
c0012fa2:	50                   	push   eax
c0012fa3:	43                   	inc    ebx
c0012fa4:	e8 d6 ff ff ff       	call   c0012f7f <Dbg::logc(char)>
c0012fa9:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012fac:	5a                   	pop    edx
c0012fad:	84 c0                	test   al,al
c0012faf:	75 f1                	jne    c0012fa2 <Dbg::logs(char*)+0xc>
c0012fb1:	5b                   	pop    ebx
c0012fb2:	c3                   	ret    

c0012fb3 <Dbg::logWriteInt(unsigned int)>:
c0012fb3:	83 ec 10             	sub    esp,0x10
c0012fb6:	6a 0a                	push   0xa
c0012fb8:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fbc:	50                   	push   eax
c0012fbd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fc1:	e8 58 ff ff ff       	call   c0012f1e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fc6:	50                   	push   eax
c0012fc7:	e8 ca ff ff ff       	call   c0012f96 <Dbg::logs(char*)>
c0012fcc:	83 c4 20             	add    esp,0x20
c0012fcf:	c3                   	ret    

c0012fd0 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012fd0:	83 ec 10             	sub    esp,0x10
c0012fd3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012fd7:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012fdb:	50                   	push   eax
c0012fdc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012fe0:	e8 39 ff ff ff       	call   c0012f1e <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012fe5:	50                   	push   eax
c0012fe6:	e8 ab ff ff ff       	call   c0012f96 <Dbg::logs(char*)>
c0012feb:	83 c4 20             	add    esp,0x20
c0012fee:	c3                   	ret    

c0012fef <Dbg::kprintf(char const*, ...)>:
c0012fef:	55                   	push   ebp
c0012ff0:	57                   	push   edi
c0012ff1:	56                   	push   esi
c0012ff2:	53                   	push   ebx
c0012ff3:	83 ec 0c             	sub    esp,0xc
c0012ff6:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012ffa:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012ffe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013002:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0013005:	84 c0                	test   al,al
c0013007:	74 4a                	je     c0013053 <Dbg::kprintf(char const*, ...)+0x64>
c0013009:	31 db                	xor    ebx,ebx
c001300b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c001300e:	3c 25                	cmp    al,0x25
c0013010:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0013013:	0f 85 e4 00 00 00    	jne    c00130fd <Dbg::kprintf(char const*, ...)+0x10e>
c0013019:	83 c3 02             	add    ebx,0x2
c001301c:	8a 07                	mov    al,BYTE PTR [edi]
c001301e:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0013021:	83 e8 25             	sub    eax,0x25
c0013024:	3c 53                	cmp    al,0x53
c0013026:	0f 87 ba 00 00 00    	ja     c00130e6 <Dbg::kprintf(char const*, ...)+0xf7>
c001302c:	0f b6 c0             	movzx  eax,al
c001302f:	ff 24 85 70 aa 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5590]
c0013036:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001303a:	89 c8                	mov    eax,ecx
c001303c:	83 c1 04             	add    ecx,0x4
c001303f:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013043:	ff 30                	push   DWORD PTR [eax]
c0013045:	e8 4c ff ff ff       	call   c0012f96 <Dbg::logs(char*)>
c001304a:	58                   	pop    eax
c001304b:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c001304f:	84 c0                	test   al,al
c0013051:	75 b8                	jne    c001300b <Dbg::kprintf(char const*, ...)+0x1c>
c0013053:	83 c4 0c             	add    esp,0xc
c0013056:	5b                   	pop    ebx
c0013057:	5e                   	pop    esi
c0013058:	5f                   	pop    edi
c0013059:	5d                   	pop    ebp
c001305a:	c3                   	ret    
c001305b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001305f:	89 d0                	mov    eax,edx
c0013061:	83 c2 04             	add    edx,0x4
c0013064:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013068:	ff 30                	push   DWORD PTR [eax]
c001306a:	e8 44 ff ff ff       	call   c0012fb3 <Dbg::logWriteInt(unsigned int)>
c001306f:	58                   	pop    eax
c0013070:	eb d9                	jmp    c001304b <Dbg::kprintf(char const*, ...)+0x5c>
c0013072:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0013076:	89 d0                	mov    eax,edx
c0013078:	83 c2 04             	add    edx,0x4
c001307b:	0f be 00             	movsx  eax,BYTE PTR [eax]
c001307e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0013082:	50                   	push   eax
c0013083:	e8 f7 fe ff ff       	call   c0012f7f <Dbg::logc(char)>
c0013088:	58                   	pop    eax
c0013089:	eb c0                	jmp    c001304b <Dbg::kprintf(char const*, ...)+0x5c>
c001308b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001308f:	89 c8                	mov    eax,ecx
c0013091:	83 c1 04             	add    ecx,0x4
c0013094:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0013098:	ff 30                	push   DWORD PTR [eax]
c001309a:	e8 14 ff ff ff       	call   c0012fb3 <Dbg::logWriteInt(unsigned int)>
c001309f:	5f                   	pop    edi
c00130a0:	eb a9                	jmp    c001304b <Dbg::kprintf(char const*, ...)+0x5c>
c00130a2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00130a6:	89 c8                	mov    eax,ecx
c00130a8:	83 c1 04             	add    ecx,0x4
c00130ab:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c00130af:	6a 10                	push   0x10
c00130b1:	ff 30                	push   DWORD PTR [eax]
c00130b3:	e8 18 ff ff ff       	call   c0012fd0 <Dbg::logWriteIntBase(unsigned int, int)>
c00130b8:	59                   	pop    ecx
c00130b9:	5f                   	pop    edi
c00130ba:	eb 8f                	jmp    c001304b <Dbg::kprintf(char const*, ...)+0x5c>
c00130bc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00130c0:	89 d0                	mov    eax,edx
c00130c2:	83 c2 08             	add    edx,0x8
c00130c5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00130c9:	6a 10                	push   0x10
c00130cb:	ff 30                	push   DWORD PTR [eax]
c00130cd:	e8 fe fe ff ff       	call   c0012fd0 <Dbg::logWriteIntBase(unsigned int, int)>
c00130d2:	58                   	pop    eax
c00130d3:	5a                   	pop    edx
c00130d4:	e9 72 ff ff ff       	jmp    c001304b <Dbg::kprintf(char const*, ...)+0x5c>
c00130d9:	6a 25                	push   0x25
c00130db:	e8 9f fe ff ff       	call   c0012f7f <Dbg::logc(char)>
c00130e0:	58                   	pop    eax
c00130e1:	e9 65 ff ff ff       	jmp    c001304b <Dbg::kprintf(char const*, ...)+0x5c>
c00130e6:	6a 25                	push   0x25
c00130e8:	e8 92 fe ff ff       	call   c0012f7f <Dbg::logc(char)>
c00130ed:	0f be 07             	movsx  eax,BYTE PTR [edi]
c00130f0:	50                   	push   eax
c00130f1:	e8 89 fe ff ff       	call   c0012f7f <Dbg::logc(char)>
c00130f6:	5a                   	pop    edx
c00130f7:	59                   	pop    ecx
c00130f8:	e9 4e ff ff ff       	jmp    c001304b <Dbg::kprintf(char const*, ...)+0x5c>
c00130fd:	50                   	push   eax
c00130fe:	89 eb                	mov    ebx,ebp
c0013100:	e8 7a fe ff ff       	call   c0012f7f <Dbg::logc(char)>
c0013105:	89 fd                	mov    ebp,edi
c0013107:	58                   	pop    eax
c0013108:	e9 3e ff ff ff       	jmp    c001304b <Dbg::kprintf(char const*, ...)+0x5c>
c001310d:	90                   	nop

c001310e <File::read(unsigned long long, void*, int*)>:
c001310e:	53                   	push   ebx
c001310f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013113:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013117:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c001311e:	3c 19                	cmp    al,0x19
c0013120:	77 35                	ja     c0013157 <File::read(unsigned long long, void*, int*)+0x49>
c0013122:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0013129:	85 c0                	test   eax,eax
c001312b:	74 2a                	je     c0013157 <File::read(unsigned long long, void*, int*)+0x49>
c001312d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013133:	85 c0                	test   eax,eax
c0013135:	74 20                	je     c0013157 <File::read(unsigned long long, void*, int*)+0x49>
c0013137:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001313b:	74 21                	je     c001315e <File::read(unsigned long long, void*, int*)+0x50>
c001313d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001313f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013143:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013149:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001314d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013151:	5b                   	pop    ebx
c0013152:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0013155:	ff e0                	jmp    eax
c0013157:	b8 0b 00 00 00       	mov    eax,0xb
c001315c:	eb 05                	jmp    c0013163 <File::read(unsigned long long, void*, int*)+0x55>
c001315e:	b8 05 00 00 00       	mov    eax,0x5
c0013163:	5b                   	pop    ebx
c0013164:	c3                   	ret    
c0013165:	90                   	nop

c0013166 <File::write(unsigned long long, void*, int*)>:
c0013166:	53                   	push   ebx
c0013167:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001316b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001316f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013176:	3c 19                	cmp    al,0x19
c0013178:	77 35                	ja     c00131af <File::write(unsigned long long, void*, int*)+0x49>
c001317a:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0013181:	85 c0                	test   eax,eax
c0013183:	74 2a                	je     c00131af <File::write(unsigned long long, void*, int*)+0x49>
c0013185:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001318b:	85 c0                	test   eax,eax
c001318d:	74 20                	je     c00131af <File::write(unsigned long long, void*, int*)+0x49>
c001318f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013193:	74 21                	je     c00131b6 <File::write(unsigned long long, void*, int*)+0x50>
c0013195:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013197:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001319b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131a5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00131a9:	5b                   	pop    ebx
c00131aa:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c00131ad:	ff e0                	jmp    eax
c00131af:	b8 0b 00 00 00       	mov    eax,0xb
c00131b4:	eb 05                	jmp    c00131bb <File::write(unsigned long long, void*, int*)+0x55>
c00131b6:	b8 05 00 00 00       	mov    eax,0x5
c00131bb:	5b                   	pop    ebx
c00131bc:	c3                   	ret    
c00131bd:	90                   	nop

c00131be <Directory::read(unsigned long long, void*, int*)>:
c00131be:	53                   	push   ebx
c00131bf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131c3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00131c7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c00131ce:	3c 19                	cmp    al,0x19
c00131d0:	77 35                	ja     c0013207 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131d2:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c00131d9:	85 c0                	test   eax,eax
c00131db:	74 2a                	je     c0013207 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131dd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131e3:	85 c0                	test   eax,eax
c00131e5:	74 20                	je     c0013207 <Directory::read(unsigned long long, void*, int*)+0x49>
c00131e7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00131eb:	74 21                	je     c001320e <Directory::read(unsigned long long, void*, int*)+0x50>
c00131ed:	8b 08                	mov    ecx,DWORD PTR [eax]
c00131ef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00131f3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c00131f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00131fd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013201:	5b                   	pop    ebx
c0013202:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0013205:	ff e0                	jmp    eax
c0013207:	b8 0b 00 00 00       	mov    eax,0xb
c001320c:	eb 05                	jmp    c0013213 <Directory::read(unsigned long long, void*, int*)+0x55>
c001320e:	b8 05 00 00 00       	mov    eax,0x5
c0013213:	5b                   	pop    ebx
c0013214:	c3                   	ret    
c0013215:	90                   	nop

c0013216 <Directory::write(unsigned long long, void*, int*)>:
c0013216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001321a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013221:	b8 0b 00 00 00       	mov    eax,0xb
c0013226:	80 fa 19             	cmp    dl,0x19
c0013229:	77 18                	ja     c0013243 <Directory::write(unsigned long long, void*, int*)+0x2d>
c001322b:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c0013232:	85 d2                	test   edx,edx
c0013234:	74 0d                	je     c0013243 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013236:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c001323d:	19 c0                	sbb    eax,eax
c001323f:	83 e0 0a             	and    eax,0xa
c0013242:	40                   	inc    eax
c0013243:	c3                   	ret    

c0013244 <File::isAtty()>:
c0013244:	31 c0                	xor    eax,eax
c0013246:	c3                   	ret    
c0013247:	90                   	nop

c0013248 <Directory::isAtty()>:
c0013248:	31 c0                	xor    eax,eax
c001324a:	c3                   	ret    
c001324b:	90                   	nop

c001324c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001324c:	b8 0a 00 00 00       	mov    eax,0xa
c0013251:	c3                   	ret    

c0013252 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0013252:	b8 0a 00 00 00       	mov    eax,0xa
c0013257:	c3                   	ret    

c0013258 <File::~File()>:
c0013258:	83 ec 0c             	sub    esp,0xc
c001325b:	ba 2c ac 02 c0       	mov    edx,0xc002ac2c
c0013260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013264:	89 10                	mov    DWORD PTR [eax],edx
c0013266:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001326a:	83 ec 0c             	sub    esp,0xc
c001326d:	50                   	push   eax
c001326e:	e8 ab e6 ff ff       	call   c001191e <UnixFile::~UnixFile()>
c0013273:	83 c4 10             	add    esp,0x10
c0013276:	90                   	nop
c0013277:	83 c4 0c             	add    esp,0xc
c001327a:	c3                   	ret    
c001327b:	90                   	nop

c001327c <File::~File()>:
c001327c:	83 ec 0c             	sub    esp,0xc
c001327f:	83 ec 0c             	sub    esp,0xc
c0013282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013286:	e8 cd ff ff ff       	call   c0013258 <File::~File()>
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	83 ec 08             	sub    esp,0x8
c0013291:	68 14 01 00 00       	push   0x114
c0013296:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001329a:	e8 70 fc ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c001329f:	83 c4 10             	add    esp,0x10
c00132a2:	83 c4 0c             	add    esp,0xc
c00132a5:	c3                   	ret    

c00132a6 <Directory::~Directory()>:
c00132a6:	83 ec 0c             	sub    esp,0xc
c00132a9:	ba 48 ac 02 c0       	mov    edx,0xc002ac48
c00132ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b2:	89 10                	mov    DWORD PTR [eax],edx
c00132b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00132b8:	83 ec 0c             	sub    esp,0xc
c00132bb:	50                   	push   eax
c00132bc:	e8 5d e6 ff ff       	call   c001191e <UnixFile::~UnixFile()>
c00132c1:	83 c4 10             	add    esp,0x10
c00132c4:	90                   	nop
c00132c5:	83 c4 0c             	add    esp,0xc
c00132c8:	c3                   	ret    
c00132c9:	90                   	nop

c00132ca <Directory::~Directory()>:
c00132ca:	83 ec 0c             	sub    esp,0xc
c00132cd:	83 ec 0c             	sub    esp,0xc
c00132d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132d4:	e8 cd ff ff ff       	call   c00132a6 <Directory::~Directory()>
c00132d9:	83 c4 10             	add    esp,0x10
c00132dc:	83 ec 08             	sub    esp,0x8
c00132df:	68 14 01 00 00       	push   0x114
c00132e4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00132e8:	e8 22 fc ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c00132ed:	83 c4 10             	add    esp,0x10
c00132f0:	83 c4 0c             	add    esp,0xc
c00132f3:	c3                   	ret    

c00132f4 <Filesystem::Filesystem()>:
c00132f4:	ba c8 ab 02 c0       	mov    edx,0xc002abc8
c00132f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00132fd:	89 10                	mov    DWORD PTR [eax],edx
c00132ff:	8b 15 b0 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e6b0
c0013305:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013309:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001330c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013310:	a3 b0 e6 02 c0       	mov    ds:0xc002e6b0,eax
c0013315:	90                   	nop
c0013316:	c3                   	ret    
c0013317:	90                   	nop

c0013318 <Filesystem::~Filesystem()>:
c0013318:	ba c8 ab 02 c0       	mov    edx,0xc002abc8
c001331d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013321:	89 10                	mov    DWORD PTR [eax],edx
c0013323:	90                   	nop
c0013324:	c3                   	ret    
c0013325:	90                   	nop

c0013326 <Filesystem::~Filesystem()>:
c0013326:	83 ec 0c             	sub    esp,0xc
c0013329:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001332d:	e8 e6 ff ff ff       	call   c0013318 <Filesystem::~Filesystem()>
c0013332:	83 c4 04             	add    esp,0x4
c0013335:	83 ec 08             	sub    esp,0x8
c0013338:	6a 08                	push   0x8
c001333a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001333e:	e8 cc fb ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0013343:	83 c4 10             	add    esp,0x10
c0013346:	83 c4 0c             	add    esp,0xc
c0013349:	c3                   	ret    

c001334a <Fs::getcwd(Process*, char*, int)>:
c001334a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001334e:	31 c0                	xor    eax,eax
c0013350:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0013353:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0013357:	7d 15                	jge    c001336e <Fs::getcwd(Process*, char*, int)+0x24>
c0013359:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001335d:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0013364:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0013367:	84 c9                	test   cl,cl
c0013369:	74 06                	je     c0013371 <Fs::getcwd(Process*, char*, int)+0x27>
c001336b:	40                   	inc    eax
c001336c:	eb e2                	jmp    c0013350 <Fs::getcwd(Process*, char*, int)+0x6>
c001336e:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0013371:	31 c0                	xor    eax,eax
c0013373:	c3                   	ret    

c0013374 <Fs::initVFS()>:
c0013374:	83 ec 18             	sub    esp,0x18
c0013377:	6a 08                	push   0x8
c0013379:	e8 c5 c4 ff ff       	call   c000f843 <malloc>
c001337e:	89 04 24             	mov    DWORD PTR [esp],eax
c0013381:	e8 80 dc 00 00       	call   c0021006 <FAT::FAT()>
c0013386:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001338d:	e8 b1 c4 ff ff       	call   c000f843 <malloc>
c0013392:	89 04 24             	mov    DWORD PTR [esp],eax
c0013395:	e8 c4 ee 00 00       	call   c002225e <ISO9660::ISO9660()>
c001339a:	83 c4 1c             	add    esp,0x1c
c001339d:	c3                   	ret    

c001339e <Fs::standardiseFiles(char*, char const*, char const*)>:
c001339e:	55                   	push   ebp
c001339f:	57                   	push   edi
c00133a0:	56                   	push   esi
c00133a1:	53                   	push   ebx
c00133a2:	81 ec 10 04 00 00    	sub    esp,0x410
c00133a8:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c00133af:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c00133b6:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c00133bd:	68 00 04 00 00       	push   0x400
c00133c2:	6a 00                	push   0x0
c00133c4:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00133c8:	56                   	push   esi
c00133c9:	e8 aa d3 fe ff       	call   c0000778 <memset>
c00133ce:	83 c4 10             	add    esp,0x10
c00133d1:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c00133d5:	75 0b                	jne    c00133e2 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c00133d7:	50                   	push   eax
c00133d8:	50                   	push   eax
c00133d9:	57                   	push   edi
c00133da:	56                   	push   esi
c00133db:	e8 54 d4 fe ff       	call   c0000834 <strcpy>
c00133e0:	eb 41                	jmp    c0013423 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c00133e2:	8a 07                	mov    al,BYTE PTR [edi]
c00133e4:	3c 5c                	cmp    al,0x5c
c00133e6:	74 04                	je     c00133ec <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c00133e8:	3c 2f                	cmp    al,0x2f
c00133ea:	75 18                	jne    c0013404 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c00133ec:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c00133ef:	3c 60                	cmp    al,0x60
c00133f1:	7e 03                	jle    c00133f6 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c00133f3:	83 e8 20             	sub    eax,0x20
c00133f6:	88 04 24             	mov    BYTE PTR [esp],al
c00133f9:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0013400:	50                   	push   eax
c0013401:	50                   	push   eax
c0013402:	eb 18                	jmp    c001341c <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013404:	50                   	push   eax
c0013405:	50                   	push   eax
c0013406:	55                   	push   ebp
c0013407:	56                   	push   esi
c0013408:	e8 27 d4 fe ff       	call   c0000834 <strcpy>
c001340d:	5a                   	pop    edx
c001340e:	59                   	pop    ecx
c001340f:	68 14 c3 02 c0       	push   0xc002c314
c0013414:	56                   	push   esi
c0013415:	e8 5a d5 fe ff       	call   c0000974 <strcat>
c001341a:	5d                   	pop    ebp
c001341b:	58                   	pop    eax
c001341c:	57                   	push   edi
c001341d:	56                   	push   esi
c001341e:	e8 51 d5 fe ff       	call   c0000974 <strcat>
c0013423:	83 c4 10             	add    esp,0x10
c0013426:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013429:	3c 60                	cmp    al,0x60
c001342b:	7e 03                	jle    c0013430 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001342d:	83 e8 20             	sub    eax,0x20
c0013430:	88 04 24             	mov    BYTE PTR [esp],al
c0013433:	88 03                	mov    BYTE PTR [ebx],al
c0013435:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001343c:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0013442:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0013446:	bf 03 00 00 00       	mov    edi,0x3
c001344b:	b8 03 00 00 00       	mov    eax,0x3
c0013450:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0013453:	84 d2                	test   dl,dl
c0013455:	0f 84 91 00 00 00    	je     c00134ec <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c001345b:	8d 4f 01             	lea    ecx,[edi+0x1]
c001345e:	80 fa 5c             	cmp    dl,0x5c
c0013461:	74 05                	je     c0013468 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0013463:	80 fa 2f             	cmp    dl,0x2f
c0013466:	75 12                	jne    c001347a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013468:	89 c5                	mov    ebp,eax
c001346a:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001346f:	74 09                	je     c001347a <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0013471:	40                   	inc    eax
c0013472:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0013476:	89 cf                	mov    edi,ecx
c0013478:	eb d6                	jmp    c0013450 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c001347a:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c001347f:	75 5b                	jne    c00134dc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013481:	80 fa 2e             	cmp    dl,0x2e
c0013484:	75 56                	jne    c00134dc <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013486:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001348a:	74 19                	je     c00134a5 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001348c:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013491:	74 53                	je     c00134e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013493:	89 f9                	mov    ecx,edi
c0013495:	41                   	inc    ecx
c0013496:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013499:	80 fa 2f             	cmp    dl,0x2f
c001349c:	74 f7                	je     c0013495 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c001349e:	80 fa 5c             	cmp    dl,0x5c
c00134a1:	74 f2                	je     c0013495 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00134a3:	eb d1                	jmp    c0013476 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134a5:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00134aa:	74 3a                	je     c00134e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00134ac:	83 f8 03             	cmp    eax,0x3
c00134af:	74 c5                	je     c0013476 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134b1:	41                   	inc    ecx
c00134b2:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00134b5:	80 fa 2f             	cmp    dl,0x2f
c00134b8:	74 f7                	je     c00134b1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00134ba:	80 fa 5c             	cmp    dl,0x5c
c00134bd:	74 f2                	je     c00134b1 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c00134bf:	48                   	dec    eax
c00134c0:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134c4:	75 06                	jne    c00134cc <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134c6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134ca:	eb f3                	jmp    c00134bf <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c00134cc:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c00134d0:	74 07                	je     c00134d9 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c00134d2:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134d6:	48                   	dec    eax
c00134d7:	eb f3                	jmp    c00134cc <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c00134d9:	40                   	inc    eax
c00134da:	eb 9a                	jmp    c0013476 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134dc:	80 fa 2f             	cmp    dl,0x2f
c00134df:	74 95                	je     c0013476 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134e1:	80 fa 5c             	cmp    dl,0x5c
c00134e4:	74 90                	je     c0013476 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134e6:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c00134e9:	40                   	inc    eax
c00134ea:	eb 8a                	jmp    c0013476 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c00134ec:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c00134f0:	83 ec 0c             	sub    esp,0xc
c00134f3:	53                   	push   ebx
c00134f4:	e8 9b d2 fe ff       	call   c0000794 <strlen>
c00134f9:	83 c4 10             	add    esp,0x10
c00134fc:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013501:	75 26                	jne    c0013529 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013503:	83 ec 0c             	sub    esp,0xc
c0013506:	53                   	push   ebx
c0013507:	e8 88 d2 fe ff       	call   c0000794 <strlen>
c001350c:	83 c4 10             	add    esp,0x10
c001350f:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013514:	74 26                	je     c001353c <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013516:	83 ec 0c             	sub    esp,0xc
c0013519:	53                   	push   ebx
c001351a:	e8 75 d2 fe ff       	call   c0000794 <strlen>
c001351f:	83 c4 10             	add    esp,0x10
c0013522:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013527:	eb c7                	jmp    c00134f0 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013529:	83 ec 0c             	sub    esp,0xc
c001352c:	53                   	push   ebx
c001352d:	e8 62 d2 fe ff       	call   c0000794 <strlen>
c0013532:	83 c4 10             	add    esp,0x10
c0013535:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c001353a:	74 c7                	je     c0013503 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001353c:	81 c4 0c 04 00 00    	add    esp,0x40c
c0013542:	5b                   	pop    ebx
c0013543:	5e                   	pop    esi
c0013544:	5f                   	pop    edi
c0013545:	5d                   	pop    ebp
c0013546:	c3                   	ret    
c0013547:	90                   	nop

c0013548 <File::File(char const*, Process*)>:
c0013548:	83 ec 0c             	sub    esp,0xc
c001354b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001354f:	83 ec 08             	sub    esp,0x8
c0013552:	6a 00                	push   0x0
c0013554:	50                   	push   eax
c0013555:	e8 e2 e1 ff ff       	call   c001173c <UnixFile::UnixFile(int)>
c001355a:	83 c4 10             	add    esp,0x10
c001355d:	ba 2c ac 02 c0       	mov    edx,0xc002ac2c
c0013562:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013566:	89 10                	mov    DWORD PTR [eax],edx
c0013568:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001356c:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013572:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013576:	83 c0 0d             	add    eax,0xd
c0013579:	83 ec 04             	sub    esp,0x4
c001357c:	52                   	push   edx
c001357d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013581:	50                   	push   eax
c0013582:	e8 17 fe ff ff       	call   c001339e <Fs::standardiseFiles(char*, char const*, char const*)>
c0013587:	83 c4 10             	add    esp,0x10
c001358a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001358e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013591:	8d 50 bf             	lea    edx,[eax-0x41]
c0013594:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013598:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c001359e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a2:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00135a6:	90                   	nop
c00135a7:	83 c4 0c             	add    esp,0xc
c00135aa:	c3                   	ret    
c00135ab:	90                   	nop

c00135ac <File::open(FileOpenMode)>:
c00135ac:	53                   	push   ebx
c00135ad:	b8 0b 00 00 00       	mov    eax,0xb
c00135b2:	83 ec 08             	sub    esp,0x8
c00135b5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135b9:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00135c0:	80 fa 19             	cmp    dl,0x19
c00135c3:	77 40                	ja     c0013605 <File::open(FileOpenMode)+0x59>
c00135c5:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c00135cc:	85 d2                	test   edx,edx
c00135ce:	74 35                	je     c0013605 <File::open(FileOpenMode)+0x59>
c00135d0:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00135d6:	85 d2                	test   edx,edx
c00135d8:	74 2b                	je     c0013605 <File::open(FileOpenMode)+0x59>
c00135da:	b8 06 00 00 00       	mov    eax,0x6
c00135df:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00135e3:	75 20                	jne    c0013605 <File::open(FileOpenMode)+0x59>
c00135e5:	8b 02                	mov    eax,DWORD PTR [edx]
c00135e7:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00135ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00135f1:	51                   	push   ecx
c00135f2:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00135f5:	51                   	push   ecx
c00135f6:	52                   	push   edx
c00135f7:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00135fa:	83 c4 10             	add    esp,0x10
c00135fd:	85 c0                	test   eax,eax
c00135ff:	75 04                	jne    c0013605 <File::open(FileOpenMode)+0x59>
c0013601:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013605:	83 c4 08             	add    esp,0x8
c0013608:	5b                   	pop    ebx
c0013609:	c3                   	ret    

c001360a <File::close()>:
c001360a:	53                   	push   ebx
c001360b:	b8 0b 00 00 00       	mov    eax,0xb
c0013610:	83 ec 08             	sub    esp,0x8
c0013613:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013617:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001361e:	80 fa 19             	cmp    dl,0x19
c0013621:	77 41                	ja     c0013664 <File::close()+0x5a>
c0013623:	8b 1c 95 40 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd14c0]
c001362a:	85 db                	test   ebx,ebx
c001362c:	74 36                	je     c0013664 <File::close()+0x5a>
c001362e:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013635:	74 2d                	je     c0013664 <File::close()+0x5a>
c0013637:	b8 05 00 00 00       	mov    eax,0x5
c001363c:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013640:	74 22                	je     c0013664 <File::close()+0x5a>
c0013642:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013646:	8b 04 95 40 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd14c0]
c001364d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013653:	53                   	push   ebx
c0013654:	53                   	push   ebx
c0013655:	8b 10                	mov    edx,DWORD PTR [eax]
c0013657:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c001365d:	50                   	push   eax
c001365e:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c0013661:	83 c4 10             	add    esp,0x10
c0013664:	83 c4 08             	add    esp,0x8
c0013667:	5b                   	pop    ebx
c0013668:	c3                   	ret    
c0013669:	90                   	nop

c001366a <File::seek(unsigned long long)>:
c001366a:	56                   	push   esi
c001366b:	53                   	push   ebx
c001366c:	b8 0b 00 00 00       	mov    eax,0xb
c0013671:	51                   	push   ecx
c0013672:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013676:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001367a:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013681:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013685:	80 fa 19             	cmp    dl,0x19
c0013688:	77 31                	ja     c00136bb <File::seek(unsigned long long)+0x51>
c001368a:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c0013691:	85 d2                	test   edx,edx
c0013693:	74 26                	je     c00136bb <File::seek(unsigned long long)+0x51>
c0013695:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001369b:	85 d2                	test   edx,edx
c001369d:	74 1c                	je     c00136bb <File::seek(unsigned long long)+0x51>
c001369f:	b8 05 00 00 00       	mov    eax,0x5
c00136a4:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c00136a8:	74 11                	je     c00136bb <File::seek(unsigned long long)+0x51>
c00136aa:	8b 02                	mov    eax,DWORD PTR [edx]
c00136ac:	53                   	push   ebx
c00136ad:	51                   	push   ecx
c00136ae:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c00136b4:	52                   	push   edx
c00136b5:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00136b8:	83 c4 10             	add    esp,0x10
c00136bb:	5a                   	pop    edx
c00136bc:	5b                   	pop    ebx
c00136bd:	5e                   	pop    esi
c00136be:	c3                   	ret    
c00136bf:	90                   	nop

c00136c0 <File::tell(unsigned long long*)>:
c00136c0:	83 ec 0c             	sub    esp,0xc
c00136c3:	b8 0b 00 00 00       	mov    eax,0xb
c00136c8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00136cc:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00136d3:	80 fa 19             	cmp    dl,0x19
c00136d6:	77 34                	ja     c001370c <File::tell(unsigned long long*)+0x4c>
c00136d8:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c00136df:	85 d2                	test   edx,edx
c00136e1:	74 29                	je     c001370c <File::tell(unsigned long long*)+0x4c>
c00136e3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00136e9:	85 d2                	test   edx,edx
c00136eb:	74 1f                	je     c001370c <File::tell(unsigned long long*)+0x4c>
c00136ed:	b8 05 00 00 00       	mov    eax,0x5
c00136f2:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00136f6:	74 14                	je     c001370c <File::tell(unsigned long long*)+0x4c>
c00136f8:	50                   	push   eax
c00136f9:	8b 02                	mov    eax,DWORD PTR [edx]
c00136fb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00136ff:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013705:	52                   	push   edx
c0013706:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013709:	83 c4 10             	add    esp,0x10
c001370c:	83 c4 0c             	add    esp,0xc
c001370f:	c3                   	ret    

c0013710 <File::rewind()>:
c0013710:	83 ec 10             	sub    esp,0x10
c0013713:	6a 00                	push   0x0
c0013715:	6a 00                	push   0x0
c0013717:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001371b:	e8 4a ff ff ff       	call   c001366a <File::seek(unsigned long long)>
c0013720:	83 c4 1c             	add    esp,0x1c
c0013723:	c3                   	ret    

c0013724 <File::unlink()>:
c0013724:	83 ec 0c             	sub    esp,0xc
c0013727:	b8 0b 00 00 00       	mov    eax,0xb
c001372c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013730:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013737:	80 f9 19             	cmp    cl,0x19
c001373a:	77 2f                	ja     c001376b <File::unlink()+0x47>
c001373c:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013743:	85 c9                	test   ecx,ecx
c0013745:	74 24                	je     c001376b <File::unlink()+0x47>
c0013747:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001374d:	85 c9                	test   ecx,ecx
c001374f:	74 1a                	je     c001376b <File::unlink()+0x47>
c0013751:	b8 06 00 00 00       	mov    eax,0x6
c0013756:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001375a:	75 0f                	jne    c001376b <File::unlink()+0x47>
c001375c:	83 c2 0d             	add    edx,0xd
c001375f:	50                   	push   eax
c0013760:	50                   	push   eax
c0013761:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013763:	52                   	push   edx
c0013764:	51                   	push   ecx
c0013765:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013768:	83 c4 10             	add    esp,0x10
c001376b:	83 c4 0c             	add    esp,0xc
c001376e:	c3                   	ret    
c001376f:	90                   	nop

c0013770 <File::rename(char const*)>:
c0013770:	83 ec 0c             	sub    esp,0xc
c0013773:	b8 0b 00 00 00       	mov    eax,0xb
c0013778:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001377c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013783:	80 f9 19             	cmp    cl,0x19
c0013786:	77 32                	ja     c00137ba <File::rename(char const*)+0x4a>
c0013788:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c001378f:	85 c9                	test   ecx,ecx
c0013791:	74 27                	je     c00137ba <File::rename(char const*)+0x4a>
c0013793:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013799:	85 c9                	test   ecx,ecx
c001379b:	74 1d                	je     c00137ba <File::rename(char const*)+0x4a>
c001379d:	b8 06 00 00 00       	mov    eax,0x6
c00137a2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137a6:	75 12                	jne    c00137ba <File::rename(char const*)+0x4a>
c00137a8:	83 c2 0d             	add    edx,0xd
c00137ab:	50                   	push   eax
c00137ac:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00137b2:	52                   	push   edx
c00137b3:	51                   	push   ecx
c00137b4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c00137b7:	83 c4 10             	add    esp,0x10
c00137ba:	83 c4 0c             	add    esp,0xc
c00137bd:	c3                   	ret    

c00137be <File::chfatattr(unsigned char, unsigned char)>:
c00137be:	57                   	push   edi
c00137bf:	b8 0b 00 00 00       	mov    eax,0xb
c00137c4:	56                   	push   esi
c00137c5:	53                   	push   ebx
c00137c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137ca:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00137ce:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137d5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00137d9:	80 f9 19             	cmp    cl,0x19
c00137dc:	77 37                	ja     c0013815 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137de:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c00137e5:	85 c9                	test   ecx,ecx
c00137e7:	74 2c                	je     c0013815 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137e9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137ef:	85 c9                	test   ecx,ecx
c00137f1:	74 22                	je     c0013815 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137f3:	b8 06 00 00 00       	mov    eax,0x6
c00137f8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137fc:	75 17                	jne    c0013815 <File::chfatattr(unsigned char, unsigned char)+0x57>
c00137fe:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013800:	89 f0                	mov    eax,esi
c0013802:	83 c2 0d             	add    edx,0xd
c0013805:	0f b6 f0             	movzx  esi,al
c0013808:	0f b6 db             	movzx  ebx,bl
c001380b:	56                   	push   esi
c001380c:	53                   	push   ebx
c001380d:	52                   	push   edx
c001380e:	51                   	push   ecx
c001380f:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013812:	83 c4 10             	add    esp,0x10
c0013815:	5b                   	pop    ebx
c0013816:	5e                   	pop    esi
c0013817:	5f                   	pop    edi
c0013818:	c3                   	ret    
c0013819:	90                   	nop

c001381a <File::exists()>:
c001381a:	83 ec 0c             	sub    esp,0xc
c001381d:	31 c0                	xor    eax,eax
c001381f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013823:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001382a:	80 f9 19             	cmp    cl,0x19
c001382d:	77 24                	ja     c0013853 <File::exists()+0x39>
c001382f:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013836:	85 c9                	test   ecx,ecx
c0013838:	74 19                	je     c0013853 <File::exists()+0x39>
c001383a:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013840:	85 c9                	test   ecx,ecx
c0013842:	74 0f                	je     c0013853 <File::exists()+0x39>
c0013844:	83 c2 0d             	add    edx,0xd
c0013847:	50                   	push   eax
c0013848:	50                   	push   eax
c0013849:	8b 01                	mov    eax,DWORD PTR [ecx]
c001384b:	52                   	push   edx
c001384c:	51                   	push   ecx
c001384d:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013850:	83 c4 10             	add    esp,0x10
c0013853:	83 c4 0c             	add    esp,0xc
c0013856:	c3                   	ret    
c0013857:	90                   	nop

c0013858 <File::stat(unsigned long long*, bool*)>:
c0013858:	56                   	push   esi
c0013859:	53                   	push   ebx
c001385a:	50                   	push   eax
c001385b:	b8 0b 00 00 00       	mov    eax,0xb
c0013860:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013864:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013868:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c001386f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013873:	80 f9 19             	cmp    cl,0x19
c0013876:	77 3d                	ja     c00138b5 <File::stat(unsigned long long*, bool*)+0x5d>
c0013878:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c001387f:	85 c9                	test   ecx,ecx
c0013881:	74 32                	je     c00138b5 <File::stat(unsigned long long*, bool*)+0x5d>
c0013883:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013889:	85 c9                	test   ecx,ecx
c001388b:	74 28                	je     c00138b5 <File::stat(unsigned long long*, bool*)+0x5d>
c001388d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001388f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013893:	74 13                	je     c00138a8 <File::stat(unsigned long long*, bool*)+0x50>
c0013895:	83 ec 04             	sub    esp,0x4
c0013898:	56                   	push   esi
c0013899:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c001389f:	51                   	push   ecx
c00138a0:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c00138a3:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00138a6:	eb 0a                	jmp    c00138b2 <File::stat(unsigned long long*, bool*)+0x5a>
c00138a8:	53                   	push   ebx
c00138a9:	83 c2 0d             	add    edx,0xd
c00138ac:	56                   	push   esi
c00138ad:	52                   	push   edx
c00138ae:	51                   	push   ecx
c00138af:	ff 50 30             	call   DWORD PTR [eax+0x30]
c00138b2:	83 c4 10             	add    esp,0x10
c00138b5:	5a                   	pop    edx
c00138b6:	5b                   	pop    ebx
c00138b7:	5e                   	pop    esi
c00138b8:	c3                   	ret    

c00138b9 <Fs::setcwd(Process*, char*)>:
c00138b9:	55                   	push   ebp
c00138ba:	57                   	push   edi
c00138bb:	56                   	push   esi
c00138bc:	53                   	push   ebx
c00138bd:	81 ec 20 02 00 00    	sub    esp,0x220
c00138c3:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c00138ca:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c00138d0:	57                   	push   edi
c00138d1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00138d8:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c00138dc:	56                   	push   esi
c00138dd:	e8 bc fa ff ff       	call   c001339e <Fs::standardiseFiles(char*, char const*, char const*)>
c00138e2:	89 34 24             	mov    DWORD PTR [esp],esi
c00138e5:	e8 aa ce fe ff       	call   c0000794 <strlen>
c00138ea:	83 c4 10             	add    esp,0x10
c00138ed:	83 f8 02             	cmp    eax,0x2
c00138f0:	77 17                	ja     c0013909 <Fs::setcwd(Process*, char*)+0x50>
c00138f2:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c00138f7:	83 e8 41             	sub    eax,0x41
c00138fa:	83 f8 19             	cmp    eax,0x19
c00138fd:	76 24                	jbe    c0013923 <Fs::setcwd(Process*, char*)+0x6a>
c00138ff:	b8 03 00 00 00       	mov    eax,0x3
c0013904:	e9 e0 00 00 00       	jmp    c00139e9 <Fs::setcwd(Process*, char*)+0x130>
c0013909:	83 ec 0c             	sub    esp,0xc
c001390c:	56                   	push   esi
c001390d:	e8 82 ce fe ff       	call   c0000794 <strlen>
c0013912:	83 c4 10             	add    esp,0x10
c0013915:	83 f8 03             	cmp    eax,0x3
c0013918:	75 34                	jne    c001394e <Fs::setcwd(Process*, char*)+0x95>
c001391a:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001391f:	75 2d                	jne    c001394e <Fs::setcwd(Process*, char*)+0x95>
c0013921:	eb cf                	jmp    c00138f2 <Fs::setcwd(Process*, char*)+0x39>
c0013923:	8b 14 85 40 eb 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd14c0]
c001392a:	b8 05 00 00 00       	mov    eax,0x5
c001392f:	85 d2                	test   edx,edx
c0013931:	0f 84 b2 00 00 00    	je     c00139e9 <Fs::setcwd(Process*, char*)+0x130>
c0013937:	b8 06 00 00 00       	mov    eax,0x6
c001393c:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013943:	0f 85 92 00 00 00    	jne    c00139db <Fs::setcwd(Process*, char*)+0x122>
c0013949:	e9 9b 00 00 00       	jmp    c00139e9 <Fs::setcwd(Process*, char*)+0x130>
c001394e:	83 ec 0c             	sub    esp,0xc
c0013951:	68 14 01 00 00       	push   0x114
c0013956:	e8 e8 be ff ff       	call   c000f843 <malloc>
c001395b:	83 c4 0c             	add    esp,0xc
c001395e:	89 c3                	mov    ebx,eax
c0013960:	55                   	push   ebp
c0013961:	56                   	push   esi
c0013962:	50                   	push   eax
c0013963:	e8 e0 fb ff ff       	call   c0013548 <File::File(char const*, Process*)>
c0013968:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c001396d:	83 c4 0c             	add    esp,0xc
c0013970:	8d 44 24 0b          	lea    eax,[esp+0xb]
c0013974:	50                   	push   eax
c0013975:	8d 44 24 10          	lea    eax,[esp+0x10]
c0013979:	50                   	push   eax
c001397a:	53                   	push   ebx
c001397b:	e8 d8 fe ff ff       	call   c0013858 <File::stat(unsigned long long*, bool*)>
c0013980:	83 c4 10             	add    esp,0x10
c0013983:	83 f8 02             	cmp    eax,0x2
c0013986:	74 04                	je     c001398c <Fs::setcwd(Process*, char*)+0xd3>
c0013988:	85 c0                	test   eax,eax
c001398a:	74 1c                	je     c00139a8 <Fs::setcwd(Process*, char*)+0xef>
c001398c:	b8 01 00 00 00       	mov    eax,0x1
c0013991:	85 db                	test   ebx,ebx
c0013993:	74 54                	je     c00139e9 <Fs::setcwd(Process*, char*)+0x130>
c0013995:	83 ec 0c             	sub    esp,0xc
c0013998:	8b 03                	mov    eax,DWORD PTR [ebx]
c001399a:	53                   	push   ebx
c001399b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001399e:	83 c4 10             	add    esp,0x10
c00139a1:	b8 01 00 00 00       	mov    eax,0x1
c00139a6:	eb 41                	jmp    c00139e9 <Fs::setcwd(Process*, char*)+0x130>
c00139a8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c00139ad:	75 1c                	jne    c00139cb <Fs::setcwd(Process*, char*)+0x112>
c00139af:	b8 02 00 00 00       	mov    eax,0x2
c00139b4:	85 db                	test   ebx,ebx
c00139b6:	74 31                	je     c00139e9 <Fs::setcwd(Process*, char*)+0x130>
c00139b8:	83 ec 0c             	sub    esp,0xc
c00139bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139bd:	53                   	push   ebx
c00139be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	b8 02 00 00 00       	mov    eax,0x2
c00139c9:	eb 1e                	jmp    c00139e9 <Fs::setcwd(Process*, char*)+0x130>
c00139cb:	85 db                	test   ebx,ebx
c00139cd:	74 0c                	je     c00139db <Fs::setcwd(Process*, char*)+0x122>
c00139cf:	83 ec 0c             	sub    esp,0xc
c00139d2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00139d4:	53                   	push   ebx
c00139d5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00139d8:	83 c4 10             	add    esp,0x10
c00139db:	50                   	push   eax
c00139dc:	50                   	push   eax
c00139dd:	56                   	push   esi
c00139de:	57                   	push   edi
c00139df:	e8 50 ce fe ff       	call   c0000834 <strcpy>
c00139e4:	83 c4 10             	add    esp,0x10
c00139e7:	31 c0                	xor    eax,eax
c00139e9:	81 c4 1c 02 00 00    	add    esp,0x21c
c00139ef:	5b                   	pop    ebx
c00139f0:	5e                   	pop    esi
c00139f1:	5f                   	pop    edi
c00139f2:	5d                   	pop    ebp
c00139f3:	c3                   	ret    

c00139f4 <Directory::Directory(char const*, Process*)>:
c00139f4:	83 ec 0c             	sub    esp,0xc
c00139f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00139fb:	83 ec 08             	sub    esp,0x8
c00139fe:	6a 00                	push   0x0
c0013a00:	50                   	push   eax
c0013a01:	e8 36 dd ff ff       	call   c001173c <UnixFile::UnixFile(int)>
c0013a06:	83 c4 10             	add    esp,0x10
c0013a09:	ba 48 ac 02 c0       	mov    edx,0xc002ac48
c0013a0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a12:	89 10                	mov    DWORD PTR [eax],edx
c0013a14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013a18:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c0013a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a22:	83 c0 0d             	add    eax,0xd
c0013a25:	83 ec 04             	sub    esp,0x4
c0013a28:	52                   	push   edx
c0013a29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a2d:	50                   	push   eax
c0013a2e:	e8 6b f9 ff ff       	call   c001339e <Fs::standardiseFiles(char*, char const*, char const*)>
c0013a33:	83 c4 10             	add    esp,0x10
c0013a36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a3a:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013a3d:	8d 50 bf             	lea    edx,[eax-0x41]
c0013a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a44:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013a4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a4e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013a52:	90                   	nop
c0013a53:	83 c4 0c             	add    esp,0xc
c0013a56:	c3                   	ret    
c0013a57:	90                   	nop

c0013a58 <Directory::open()>:
c0013a58:	53                   	push   ebx
c0013a59:	b8 0b 00 00 00       	mov    eax,0xb
c0013a5e:	83 ec 08             	sub    esp,0x8
c0013a61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a65:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013a6c:	80 fa 19             	cmp    dl,0x19
c0013a6f:	77 3d                	ja     c0013aae <Directory::open()+0x56>
c0013a71:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c0013a78:	85 d2                	test   edx,edx
c0013a7a:	74 32                	je     c0013aae <Directory::open()+0x56>
c0013a7c:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013a82:	85 d2                	test   edx,edx
c0013a84:	74 28                	je     c0013aae <Directory::open()+0x56>
c0013a86:	b8 06 00 00 00       	mov    eax,0x6
c0013a8b:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013a8f:	75 1d                	jne    c0013aae <Directory::open()+0x56>
c0013a91:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013a97:	50                   	push   eax
c0013a98:	8b 02                	mov    eax,DWORD PTR [edx]
c0013a9a:	51                   	push   ecx
c0013a9b:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013a9e:	51                   	push   ecx
c0013a9f:	52                   	push   edx
c0013aa0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013aa3:	83 c4 10             	add    esp,0x10
c0013aa6:	85 c0                	test   eax,eax
c0013aa8:	75 04                	jne    c0013aae <Directory::open()+0x56>
c0013aaa:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013aae:	83 c4 08             	add    esp,0x8
c0013ab1:	5b                   	pop    ebx
c0013ab2:	c3                   	ret    
c0013ab3:	90                   	nop

c0013ab4 <Directory::close()>:
c0013ab4:	53                   	push   ebx
c0013ab5:	b8 0b 00 00 00       	mov    eax,0xb
c0013aba:	83 ec 08             	sub    esp,0x8
c0013abd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013ac1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013ac8:	80 fa 19             	cmp    dl,0x19
c0013acb:	77 41                	ja     c0013b0e <Directory::close()+0x5a>
c0013acd:	8b 1c 95 40 eb 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd14c0]
c0013ad4:	85 db                	test   ebx,ebx
c0013ad6:	74 36                	je     c0013b0e <Directory::close()+0x5a>
c0013ad8:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013adf:	74 2d                	je     c0013b0e <Directory::close()+0x5a>
c0013ae1:	b8 05 00 00 00       	mov    eax,0x5
c0013ae6:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013aea:	74 22                	je     c0013b0e <Directory::close()+0x5a>
c0013aec:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013af0:	8b 04 95 40 eb 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd14c0]
c0013af7:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0013afd:	53                   	push   ebx
c0013afe:	53                   	push   ebx
c0013aff:	8b 10                	mov    edx,DWORD PTR [eax]
c0013b01:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013b07:	50                   	push   eax
c0013b08:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013b0b:	83 c4 10             	add    esp,0x10
c0013b0e:	83 c4 08             	add    esp,0x8
c0013b11:	5b                   	pop    ebx
c0013b12:	c3                   	ret    
c0013b13:	90                   	nop

c0013b14 <Directory::unlink()>:
c0013b14:	83 ec 0c             	sub    esp,0xc
c0013b17:	b8 0b 00 00 00       	mov    eax,0xb
c0013b1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b20:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b27:	80 f9 19             	cmp    cl,0x19
c0013b2a:	77 2f                	ja     c0013b5b <Directory::unlink()+0x47>
c0013b2c:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013b33:	85 c9                	test   ecx,ecx
c0013b35:	74 24                	je     c0013b5b <Directory::unlink()+0x47>
c0013b37:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b3d:	85 c9                	test   ecx,ecx
c0013b3f:	74 1a                	je     c0013b5b <Directory::unlink()+0x47>
c0013b41:	b8 06 00 00 00       	mov    eax,0x6
c0013b46:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b4a:	75 0f                	jne    c0013b5b <Directory::unlink()+0x47>
c0013b4c:	83 c2 0d             	add    edx,0xd
c0013b4f:	50                   	push   eax
c0013b50:	50                   	push   eax
c0013b51:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b53:	52                   	push   edx
c0013b54:	51                   	push   ecx
c0013b55:	ff 50 38             	call   DWORD PTR [eax+0x38]
c0013b58:	83 c4 10             	add    esp,0x10
c0013b5b:	83 c4 0c             	add    esp,0xc
c0013b5e:	c3                   	ret    
c0013b5f:	90                   	nop

c0013b60 <Directory::rename(char const*)>:
c0013b60:	83 ec 0c             	sub    esp,0xc
c0013b63:	b8 0b 00 00 00       	mov    eax,0xb
c0013b68:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013b6c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013b73:	80 f9 19             	cmp    cl,0x19
c0013b76:	77 32                	ja     c0013baa <Directory::rename(char const*)+0x4a>
c0013b78:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013b7f:	85 c9                	test   ecx,ecx
c0013b81:	74 27                	je     c0013baa <Directory::rename(char const*)+0x4a>
c0013b83:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013b89:	85 c9                	test   ecx,ecx
c0013b8b:	74 1d                	je     c0013baa <Directory::rename(char const*)+0x4a>
c0013b8d:	b8 06 00 00 00       	mov    eax,0x6
c0013b92:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013b96:	75 12                	jne    c0013baa <Directory::rename(char const*)+0x4a>
c0013b98:	83 c2 0d             	add    edx,0xd
c0013b9b:	50                   	push   eax
c0013b9c:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b9e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013ba2:	52                   	push   edx
c0013ba3:	51                   	push   ecx
c0013ba4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013ba7:	83 c4 10             	add    esp,0x10
c0013baa:	83 c4 0c             	add    esp,0xc
c0013bad:	c3                   	ret    

c0013bae <Directory::exists()>:
c0013bae:	83 ec 0c             	sub    esp,0xc
c0013bb1:	31 c0                	xor    eax,eax
c0013bb3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013bb7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013bbe:	80 f9 19             	cmp    cl,0x19
c0013bc1:	77 24                	ja     c0013be7 <Directory::exists()+0x39>
c0013bc3:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013bca:	85 c9                	test   ecx,ecx
c0013bcc:	74 19                	je     c0013be7 <Directory::exists()+0x39>
c0013bce:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013bd4:	85 c9                	test   ecx,ecx
c0013bd6:	74 0f                	je     c0013be7 <Directory::exists()+0x39>
c0013bd8:	83 c2 0d             	add    edx,0xd
c0013bdb:	50                   	push   eax
c0013bdc:	50                   	push   eax
c0013bdd:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013bdf:	52                   	push   edx
c0013be0:	51                   	push   ecx
c0013be1:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013be4:	83 c4 10             	add    esp,0x10
c0013be7:	83 c4 0c             	add    esp,0xc
c0013bea:	c3                   	ret    
c0013beb:	90                   	nop

c0013bec <Directory::read(dirent*)>:
c0013bec:	83 ec 1c             	sub    esp,0x1c
c0013bef:	b8 0b 00 00 00       	mov    eax,0xb
c0013bf4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013bf8:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013bff:	80 fa 19             	cmp    dl,0x19
c0013c02:	77 30                	ja     c0013c34 <Directory::read(dirent*)+0x48>
c0013c04:	8b 14 95 40 eb 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd14c0]
c0013c0b:	85 d2                	test   edx,edx
c0013c0d:	74 25                	je     c0013c34 <Directory::read(dirent*)+0x48>
c0013c0f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013c16:	74 1c                	je     c0013c34 <Directory::read(dirent*)+0x48>
c0013c18:	83 ec 0c             	sub    esp,0xc
c0013c1b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c1d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c21:	52                   	push   edx
c0013c22:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013c26:	6a 00                	push   0x0
c0013c28:	68 10 01 00 00       	push   0x110
c0013c2d:	51                   	push   ecx
c0013c2e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c31:	83 c4 20             	add    esp,0x20
c0013c34:	83 c4 1c             	add    esp,0x1c
c0013c37:	c3                   	ret    

c0013c38 <Directory::create()>:
c0013c38:	83 ec 0c             	sub    esp,0xc
c0013c3b:	b8 0b 00 00 00       	mov    eax,0xb
c0013c40:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013c44:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013c4b:	80 f9 19             	cmp    cl,0x19
c0013c4e:	77 2f                	ja     c0013c7f <Directory::create()+0x47>
c0013c50:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0013c57:	85 c9                	test   ecx,ecx
c0013c59:	74 24                	je     c0013c7f <Directory::create()+0x47>
c0013c5b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013c61:	85 c9                	test   ecx,ecx
c0013c63:	74 1a                	je     c0013c7f <Directory::create()+0x47>
c0013c65:	b8 06 00 00 00       	mov    eax,0x6
c0013c6a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013c6e:	75 0f                	jne    c0013c7f <Directory::create()+0x47>
c0013c70:	83 c2 0d             	add    edx,0xd
c0013c73:	50                   	push   eax
c0013c74:	50                   	push   eax
c0013c75:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c77:	52                   	push   edx
c0013c78:	51                   	push   ecx
c0013c79:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013c7c:	83 c4 10             	add    esp,0x10
c0013c7f:	83 c4 0c             	add    esp,0xc
c0013c82:	c3                   	ret    
c0013c83:	90                   	nop

c0013c84 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013c84:	b8 0a 00 00 00       	mov    eax,0xa
c0013c89:	c3                   	ret    

c0013c8a <Bus::Bus(char const*)>:
c0013c8a:	83 ec 0c             	sub    esp,0xc
c0013c8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013c91:	83 ec 08             	sub    esp,0x8
c0013c94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c98:	50                   	push   eax
c0013c99:	e8 68 09 00 00       	call   c0014606 <Device::Device(char const*)>
c0013c9e:	83 c4 10             	add    esp,0x10
c0013ca1:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c0013ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013caa:	89 10                	mov    DWORD PTR [eax],edx
c0013cac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cb0:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013cba:	90                   	nop
c0013cbb:	83 c4 0c             	add    esp,0xc
c0013cbe:	c3                   	ret    
c0013cbf:	90                   	nop

c0013cc0 <Bus::~Bus()>:
c0013cc0:	83 ec 0c             	sub    esp,0xc
c0013cc3:	ba 64 ac 02 c0       	mov    edx,0xc002ac64
c0013cc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ccc:	89 10                	mov    DWORD PTR [eax],edx
c0013cce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013cd2:	83 ec 0c             	sub    esp,0xc
c0013cd5:	50                   	push   eax
c0013cd6:	e8 0d 06 00 00       	call   c00142e8 <Device::~Device()>
c0013cdb:	83 c4 10             	add    esp,0x10
c0013cde:	90                   	nop
c0013cdf:	83 c4 0c             	add    esp,0xc
c0013ce2:	c3                   	ret    
c0013ce3:	90                   	nop

c0013ce4 <Bus::~Bus()>:
c0013ce4:	83 ec 0c             	sub    esp,0xc
c0013ce7:	83 ec 0c             	sub    esp,0xc
c0013cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013cee:	e8 cd ff ff ff       	call   c0013cc0 <Bus::~Bus()>
c0013cf3:	83 c4 10             	add    esp,0x10
c0013cf6:	83 ec 08             	sub    esp,0x8
c0013cf9:	68 58 01 00 00       	push   0x158
c0013cfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d02:	e8 08 f2 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0013d07:	83 c4 10             	add    esp,0x10
c0013d0a:	83 c4 0c             	add    esp,0xc
c0013d0d:	c3                   	ret    

c0013d0e <Buzzer::Buzzer(char const*)>:
c0013d0e:	83 ec 0c             	sub    esp,0xc
c0013d11:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d15:	83 ec 08             	sub    esp,0x8
c0013d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d1c:	50                   	push   eax
c0013d1d:	e8 e4 08 00 00       	call   c0014606 <Device::Device(char const*)>
c0013d22:	83 c4 10             	add    esp,0x10
c0013d25:	ba 90 ac 02 c0       	mov    edx,0xc002ac90
c0013d2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d2e:	89 10                	mov    DWORD PTR [eax],edx
c0013d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d34:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d42:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013d4c:	90                   	nop
c0013d4d:	83 c4 0c             	add    esp,0xc
c0013d50:	c3                   	ret    
c0013d51:	90                   	nop

c0013d52 <Buzzer::~Buzzer()>:
c0013d52:	83 ec 0c             	sub    esp,0xc
c0013d55:	ba 90 ac 02 c0       	mov    edx,0xc002ac90
c0013d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5e:	89 10                	mov    DWORD PTR [eax],edx
c0013d60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d64:	83 ec 0c             	sub    esp,0xc
c0013d67:	50                   	push   eax
c0013d68:	e8 7b 05 00 00       	call   c00142e8 <Device::~Device()>
c0013d6d:	83 c4 10             	add    esp,0x10
c0013d70:	90                   	nop
c0013d71:	83 c4 0c             	add    esp,0xc
c0013d74:	c3                   	ret    
c0013d75:	90                   	nop

c0013d76 <Buzzer::~Buzzer()>:
c0013d76:	83 ec 0c             	sub    esp,0xc
c0013d79:	83 ec 0c             	sub    esp,0xc
c0013d7c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d80:	e8 cd ff ff ff       	call   c0013d52 <Buzzer::~Buzzer()>
c0013d85:	83 c4 10             	add    esp,0x10
c0013d88:	83 ec 08             	sub    esp,0x8
c0013d8b:	68 5c 01 00 00       	push   0x15c
c0013d90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d94:	e8 76 f1 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0013d99:	83 c4 10             	add    esp,0x10
c0013d9c:	83 c4 0c             	add    esp,0xc
c0013d9f:	c3                   	ret    

c0013da0 <Buzzer::stop()>:
c0013da0:	83 ec 14             	sub    esp,0x14
c0013da3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013da7:	8b 10                	mov    edx,DWORD PTR [eax]
c0013da9:	6a 00                	push   0x0
c0013dab:	50                   	push   eax
c0013dac:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013daf:	83 c4 1c             	add    esp,0x1c
c0013db2:	c3                   	ret    

c0013db3 <beepThread(void*)>:
c0013db3:	53                   	push   ebx
c0013db4:	83 ec 08             	sub    esp,0x8
c0013db7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013dbb:	e8 d4 a0 00 00       	call   c001de94 <unlockScheduler()>
c0013dc0:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013dc5:	52                   	push   edx
c0013dc6:	52                   	push   edx
c0013dc7:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013dcd:	52                   	push   edx
c0013dce:	50                   	push   eax
c0013dcf:	e8 0e a6 00 00       	call   c001e3e2 <nanoSleep(unsigned long long)>
c0013dd4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013dd7:	e8 c4 ff ff ff       	call   c0013da0 <Buzzer::stop()>
c0013ddc:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013de4:	83 c4 18             	add    esp,0x18
c0013de7:	5b                   	pop    ebx
c0013de8:	e9 3b a5 00 00       	jmp    c001e328 <blockTask(TaskState)>
c0013ded:	90                   	nop

c0013dee <Buzzer::beep(int, int, bool)>:
c0013dee:	57                   	push   edi
c0013def:	56                   	push   esi
c0013df0:	53                   	push   ebx
c0013df1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013df5:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013df9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013dfd:	52                   	push   edx
c0013dfe:	52                   	push   edx
c0013dff:	8b 06                	mov    eax,DWORD PTR [esi]
c0013e01:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e05:	56                   	push   esi
c0013e06:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013e09:	83 c4 10             	add    esp,0x10
c0013e0c:	89 f8                	mov    eax,edi
c0013e0e:	84 c0                	test   al,al
c0013e10:	74 1f                	je     c0013e31 <Buzzer::beep(int, int, bool)+0x43>
c0013e12:	50                   	push   eax
c0013e13:	50                   	push   eax
c0013e14:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013e1a:	99                   	cdq    
c0013e1b:	52                   	push   edx
c0013e1c:	50                   	push   eax
c0013e1d:	e8 c0 a5 00 00       	call   c001e3e2 <nanoSleep(unsigned long long)>
c0013e22:	83 c4 10             	add    esp,0x10
c0013e25:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013e29:	5b                   	pop    ebx
c0013e2a:	5e                   	pop    esi
c0013e2b:	5f                   	pop    edi
c0013e2c:	e9 6f ff ff ff       	jmp    c0013da0 <Buzzer::stop()>
c0013e31:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013e37:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0013e3c:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013e44:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013e48:	c7 44 24 14 b3 3d 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013db3
c0013e50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013e54:	5b                   	pop    ebx
c0013e55:	5e                   	pop    esi
c0013e56:	5f                   	pop    edi
c0013e57:	e9 68 a1 00 00       	jmp    c001dfc4 <Process::createThread(void (*)(void*), void*, int)>

c0013e5c <User::loadClockSettings(int)>:
c0013e5c:	53                   	push   ebx
c0013e5d:	83 ec 14             	sub    esp,0x14
c0013e60:	68 14 01 00 00       	push   0x114
c0013e65:	e8 d9 b9 ff ff       	call   c000f843 <malloc>
c0013e6a:	83 c4 0c             	add    esp,0xc
c0013e6d:	89 c3                	mov    ebx,eax
c0013e6f:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c0013e75:	68 b8 ac 02 c0       	push   0xc002acb8
c0013e7a:	50                   	push   eax
c0013e7b:	e8 c8 f6 ff ff       	call   c0013548 <File::File(char const*, Process*)>
c0013e80:	58                   	pop    eax
c0013e81:	5a                   	pop    edx
c0013e82:	6a 01                	push   0x1
c0013e84:	53                   	push   ebx
c0013e85:	e8 22 f7 ff ff       	call   c00135ac <File::open(FileOpenMode)>
c0013e8a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e8d:	e8 78 f7 ff ff       	call   c001360a <File::close()>
c0013e92:	83 c4 10             	add    esp,0x10
c0013e95:	85 db                	test   ebx,ebx
c0013e97:	74 0f                	je     c0013ea8 <User::loadClockSettings(int)+0x4c>
c0013e99:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013e9b:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013e9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013ea2:	83 c4 08             	add    esp,0x8
c0013ea5:	5b                   	pop    ebx
c0013ea6:	ff e0                	jmp    eax
c0013ea8:	83 c4 08             	add    esp,0x8
c0013eab:	5b                   	pop    ebx
c0013eac:	c3                   	ret    
c0013ead:	90                   	nop

c0013eae <Clock::Clock(char const*)>:
c0013eae:	83 ec 0c             	sub    esp,0xc
c0013eb1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013eb5:	83 ec 08             	sub    esp,0x8
c0013eb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013ebc:	50                   	push   eax
c0013ebd:	e8 44 07 00 00       	call   c0014606 <Device::Device(char const*)>
c0013ec2:	83 c4 10             	add    esp,0x10
c0013ec5:	ba e0 ac 02 c0       	mov    edx,0xc002ace0
c0013eca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ece:	89 10                	mov    DWORD PTR [eax],edx
c0013ed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ed4:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013ede:	90                   	nop
c0013edf:	83 c4 0c             	add    esp,0xc
c0013ee2:	c3                   	ret    
c0013ee3:	90                   	nop

c0013ee4 <Clock::~Clock()>:
c0013ee4:	83 ec 0c             	sub    esp,0xc
c0013ee7:	ba e0 ac 02 c0       	mov    edx,0xc002ace0
c0013eec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef0:	89 10                	mov    DWORD PTR [eax],edx
c0013ef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ef6:	83 ec 0c             	sub    esp,0xc
c0013ef9:	50                   	push   eax
c0013efa:	e8 e9 03 00 00       	call   c00142e8 <Device::~Device()>
c0013eff:	83 c4 10             	add    esp,0x10
c0013f02:	90                   	nop
c0013f03:	83 c4 0c             	add    esp,0xc
c0013f06:	c3                   	ret    
c0013f07:	90                   	nop

c0013f08 <Clock::~Clock()>:
c0013f08:	83 ec 0c             	sub    esp,0xc
c0013f0b:	83 ec 0c             	sub    esp,0xc
c0013f0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f12:	e8 cd ff ff ff       	call   c0013ee4 <Clock::~Clock()>
c0013f17:	83 c4 10             	add    esp,0x10
c0013f1a:	83 ec 08             	sub    esp,0x8
c0013f1d:	68 58 01 00 00       	push   0x158
c0013f22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013f26:	e8 e4 ef ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0013f2b:	83 c4 10             	add    esp,0x10
c0013f2e:	83 c4 0c             	add    esp,0xc
c0013f31:	c3                   	ret    

c0013f32 <Clock::timeInSecondsLocal()>:
c0013f32:	53                   	push   ebx
c0013f33:	83 ec 14             	sub    esp,0x14
c0013f36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013f3a:	8b 10                	mov    edx,DWORD PTR [eax]
c0013f3c:	50                   	push   eax
c0013f3d:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013f40:	0f b6 0d b8 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e6b8
c0013f47:	03 0d bc e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e6bc
c0013f4d:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f53:	89 cb                	mov    ebx,ecx
c0013f55:	c1 fb 1f             	sar    ebx,0x1f
c0013f58:	01 c8                	add    eax,ecx
c0013f5a:	11 da                	adc    edx,ebx
c0013f5c:	83 c4 10             	add    esp,0x10
c0013f5f:	31 c9                	xor    ecx,ecx
c0013f61:	80 3d b9 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6b9,0x0
c0013f68:	74 05                	je     c0013f6f <Clock::timeInSecondsLocal()+0x3d>
c0013f6a:	b9 08 07 00 00       	mov    ecx,0x708
c0013f6f:	31 db                	xor    ebx,ebx
c0013f71:	01 c8                	add    eax,ecx
c0013f73:	11 da                	adc    edx,ebx
c0013f75:	83 c4 08             	add    esp,0x8
c0013f78:	5b                   	pop    ebx
c0013f79:	c3                   	ret    

c0013f7a <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013f7a:	57                   	push   edi
c0013f7b:	56                   	push   esi
c0013f7c:	53                   	push   ebx
c0013f7d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013f81:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013f85:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013f87:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013f8b:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013f8e:	0f b6 05 b8 e6 02 c0 	movzx  eax,BYTE PTR ds:0xc002e6b8
c0013f95:	03 05 bc e6 02 c0    	add    eax,DWORD PTR ds:0xc002e6bc
c0013f9b:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013fa1:	99                   	cdq    
c0013fa2:	29 c6                	sub    esi,eax
c0013fa4:	19 d7                	sbb    edi,edx
c0013fa6:	89 f0                	mov    eax,esi
c0013fa8:	89 fa                	mov    edx,edi
c0013faa:	31 f6                	xor    esi,esi
c0013fac:	80 3d b9 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6b9,0x0
c0013fb3:	74 05                	je     c0013fba <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013fb5:	be 08 07 00 00       	mov    esi,0x708
c0013fba:	31 ff                	xor    edi,edi
c0013fbc:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013fc0:	29 f0                	sub    eax,esi
c0013fc2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fc6:	19 fa                	sbb    edx,edi
c0013fc8:	89 d8                	mov    eax,ebx
c0013fca:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fce:	5b                   	pop    ebx
c0013fcf:	5e                   	pop    esi
c0013fd0:	5f                   	pop    edi
c0013fd1:	ff e0                	jmp    eax

c0013fd3 <datetimeToSeconds(datetime_t)>:
c0013fd3:	55                   	push   ebp
c0013fd4:	57                   	push   edi
c0013fd5:	56                   	push   esi
c0013fd6:	53                   	push   ebx
c0013fd7:	83 ec 14             	sub    esp,0x14
c0013fda:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013fde:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013fe2:	89 d3                	mov    ebx,edx
c0013fe4:	0f b6 c6             	movzx  eax,dh
c0013fe7:	c1 eb 10             	shr    ebx,0x10
c0013fea:	48                   	dec    eax
c0013feb:	66 81 eb 6c 07       	sub    bx,0x76c
c0013ff0:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013ff4:	0f b6 f5             	movzx  esi,ch
c0013ff7:	89 cf                	mov    edi,ecx
c0013ff9:	6b f6 3c             	imul   esi,esi,0x3c
c0013ffc:	c1 ef 10             	shr    edi,0x10
c0013fff:	0f b6 c9             	movzx  ecx,cl
c0014002:	89 f8                	mov    eax,edi
c0014004:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c001400a:	0f b6 f8             	movzx  edi,al
c001400d:	0f b6 d2             	movzx  edx,dl
c0014010:	01 fe                	add    esi,edi
c0014012:	01 f1                	add    ecx,esi
c0014014:	0f b7 f3             	movzx  esi,bx
c0014017:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001401b:	c1 f9 1f             	sar    ecx,0x1f
c001401e:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0014023:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0014027:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c001402c:	8b 0c 8d 20 ad 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd52e0]
c0014033:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0014037:	76 29                	jbe    c0014062 <datetimeToSeconds(datetime_t)+0x8f>
c0014039:	f6 c3 03             	test   bl,0x3
c001403c:	75 24                	jne    c0014062 <datetimeToSeconds(datetime_t)+0x8f>
c001403e:	31 d2                	xor    edx,edx
c0014040:	bf 64 00 00 00       	mov    edi,0x64
c0014045:	89 d8                	mov    eax,ebx
c0014047:	66 f7 f7             	div    di
c001404a:	66 85 d2             	test   dx,dx
c001404d:	75 12                	jne    c0014061 <datetimeToSeconds(datetime_t)+0x8e>
c001404f:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0014055:	bf 90 01 00 00       	mov    edi,0x190
c001405a:	99                   	cdq    
c001405b:	f7 ff                	idiv   edi
c001405d:	85 d2                	test   edx,edx
c001405f:	75 01                	jne    c0014062 <datetimeToSeconds(datetime_t)+0x8f>
c0014061:	41                   	inc    ecx
c0014062:	66 83 fb 46          	cmp    bx,0x46
c0014066:	76 45                	jbe    c00140ad <datetimeToSeconds(datetime_t)+0xda>
c0014068:	bb 46 00 00 00       	mov    ebx,0x46
c001406d:	bf 64 00 00 00       	mov    edi,0x64
c0014072:	bd 90 01 00 00       	mov    ebp,0x190
c0014077:	b8 6d 01 00 00       	mov    eax,0x16d
c001407c:	f6 c3 03             	test   bl,0x3
c001407f:	75 23                	jne    c00140a4 <datetimeToSeconds(datetime_t)+0xd1>
c0014081:	89 d8                	mov    eax,ebx
c0014083:	99                   	cdq    
c0014084:	f7 ff                	idiv   edi
c0014086:	b8 6e 01 00 00       	mov    eax,0x16e
c001408b:	85 d2                	test   edx,edx
c001408d:	75 15                	jne    c00140a4 <datetimeToSeconds(datetime_t)+0xd1>
c001408f:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0014095:	99                   	cdq    
c0014096:	f7 fd                	idiv   ebp
c0014098:	83 fa 01             	cmp    edx,0x1
c001409b:	19 c0                	sbb    eax,eax
c001409d:	f7 d0                	not    eax
c001409f:	05 6e 01 00 00       	add    eax,0x16e
c00140a4:	01 c1                	add    ecx,eax
c00140a6:	43                   	inc    ebx
c00140a7:	39 f3                	cmp    ebx,esi
c00140a9:	7c cc                	jl     c0014077 <datetimeToSeconds(datetime_t)+0xa4>
c00140ab:	eb 35                	jmp    c00140e2 <datetimeToSeconds(datetime_t)+0x10f>
c00140ad:	74 33                	je     c00140e2 <datetimeToSeconds(datetime_t)+0x10f>
c00140af:	b8 45 00 00 00       	mov    eax,0x45
c00140b4:	89 c2                	mov    edx,eax
c00140b6:	83 e2 03             	and    edx,0x3
c00140b9:	39 f0                	cmp    eax,esi
c00140bb:	7e 0f                	jle    c00140cc <datetimeToSeconds(datetime_t)+0xf9>
c00140bd:	83 fa 01             	cmp    edx,0x1
c00140c0:	19 d2                	sbb    edx,edx
c00140c2:	48                   	dec    eax
c00140c3:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c00140ca:	eb e8                	jmp    c00140b4 <datetimeToSeconds(datetime_t)+0xe1>
c00140cc:	b8 6d 01 00 00       	mov    eax,0x16d
c00140d1:	85 d2                	test   edx,edx
c00140d3:	75 0b                	jne    c00140e0 <datetimeToSeconds(datetime_t)+0x10d>
c00140d5:	66 83 fb 01          	cmp    bx,0x1
c00140d9:	19 c0                	sbb    eax,eax
c00140db:	05 6e 01 00 00       	add    eax,0x16e
c00140e0:	29 c1                	sub    ecx,eax
c00140e2:	b8 80 51 01 00       	mov    eax,0x15180
c00140e7:	f7 e9                	imul   ecx
c00140e9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00140ed:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00140f1:	83 c4 14             	add    esp,0x14
c00140f4:	5b                   	pop    ebx
c00140f5:	5e                   	pop    esi
c00140f6:	5f                   	pop    edi
c00140f7:	5d                   	pop    ebp
c00140f8:	c3                   	ret    
c00140f9:	90                   	nop

c00140fa <Clock::setTimeInDatetimeLocal(datetime_t)>:
c00140fa:	57                   	push   edi
c00140fb:	56                   	push   esi
c00140fc:	53                   	push   ebx
c00140fd:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014101:	8b 06                	mov    eax,DWORD PTR [esi]
c0014103:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0014106:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001410a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001410e:	e8 c0 fe ff ff       	call   c0013fd3 <datetimeToSeconds(datetime_t)>
c0014113:	59                   	pop    ecx
c0014114:	0f b6 0d b8 e6 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e6b8
c001411b:	5b                   	pop    ebx
c001411c:	03 0d bc e6 02 c0    	add    ecx,DWORD PTR ds:0xc002e6bc
c0014122:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0014128:	89 cb                	mov    ebx,ecx
c001412a:	c1 fb 1f             	sar    ebx,0x1f
c001412d:	29 c8                	sub    eax,ecx
c001412f:	19 da                	sbb    edx,ebx
c0014131:	31 c9                	xor    ecx,ecx
c0014133:	80 3d b9 e6 02 c0 00 	cmp    BYTE PTR ds:0xc002e6b9,0x0
c001413a:	74 05                	je     c0014141 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c001413c:	b9 08 07 00 00       	mov    ecx,0x708
c0014141:	31 db                	xor    ebx,ebx
c0014143:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0014147:	29 c8                	sub    eax,ecx
c0014149:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001414d:	19 da                	sbb    edx,ebx
c001414f:	89 f8                	mov    eax,edi
c0014151:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0014155:	5b                   	pop    ebx
c0014156:	5e                   	pop    esi
c0014157:	5f                   	pop    edi
c0014158:	ff e0                	jmp    eax

c001415a <secondsToDatetime(unsigned long long)>:
c001415a:	55                   	push   ebp
c001415b:	57                   	push   edi
c001415c:	56                   	push   esi
c001415d:	53                   	push   ebx
c001415e:	83 ec 1c             	sub    esp,0x1c
c0014161:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0014165:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0014169:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001416d:	6a 00                	push   0x0
c001416f:	68 80 51 01 00       	push   0x15180
c0014174:	55                   	push   ebp
c0014175:	57                   	push   edi
c0014176:	e8 f1 28 01 00       	call   c0026a6c <__udivdi3>
c001417b:	83 c4 10             	add    esp,0x10
c001417e:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0014184:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014188:	6a 00                	push   0x0
c001418a:	68 80 51 01 00       	push   0x15180
c001418f:	55                   	push   ebp
c0014190:	57                   	push   edi
c0014191:	bf 10 0e 00 00       	mov    edi,0xe10
c0014196:	e8 d1 29 01 00       	call   c0026b6c <__umoddi3>
c001419b:	83 c4 10             	add    esp,0x10
c001419e:	99                   	cdq    
c001419f:	f7 ff                	idiv   edi
c00141a1:	bf 3c 00 00 00       	mov    edi,0x3c
c00141a6:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c00141a9:	89 d0                	mov    eax,edx
c00141ab:	99                   	cdq    
c00141ac:	f7 ff                	idiv   edi
c00141ae:	85 db                	test   ebx,ebx
c00141b0:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c00141b3:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c00141b6:	79 11                	jns    c00141c9 <secondsToDatetime(unsigned long long)+0x6f>
c00141b8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00141bc:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c00141c2:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141c7:	eb 07                	jmp    c00141d0 <secondsToDatetime(unsigned long long)+0x76>
c00141c9:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c00141ce:	89 d8                	mov    eax,ebx
c00141d0:	bf b4 05 00 00       	mov    edi,0x5b4
c00141d5:	99                   	cdq    
c00141d6:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c00141db:	f7 f9                	idiv   ecx
c00141dd:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c00141e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00141e6:	31 d2                	xor    edx,edx
c00141e8:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c00141f0:	01 c3                	add    ebx,eax
c00141f2:	89 d8                	mov    eax,ebx
c00141f4:	f7 f1                	div    ecx
c00141f6:	31 d2                	xor    edx,edx
c00141f8:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c00141fb:	89 d8                	mov    eax,ebx
c00141fd:	f7 f7                	div    edi
c00141ff:	31 d2                	xor    edx,edx
c0014201:	29 c1                	sub    ecx,eax
c0014203:	89 d8                	mov    eax,ebx
c0014205:	f7 f5                	div    ebp
c0014207:	bd 6d 01 00 00       	mov    ebp,0x16d
c001420c:	29 c1                	sub    ecx,eax
c001420e:	31 d2                	xor    edx,edx
c0014210:	89 c8                	mov    eax,ecx
c0014212:	f7 f5                	div    ebp
c0014214:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0014219:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001421d:	31 d2                	xor    edx,edx
c001421f:	89 c8                	mov    eax,ecx
c0014221:	f7 f5                	div    ebp
c0014223:	31 d2                	xor    edx,edx
c0014225:	01 c3                	add    ebx,eax
c0014227:	89 c8                	mov    eax,ecx
c0014229:	f7 f7                	div    edi
c001422b:	bf 99 00 00 00       	mov    edi,0x99
c0014230:	29 c3                	sub    ebx,eax
c0014232:	31 d2                	xor    edx,edx
c0014234:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c001423c:	29 c3                	sub    ebx,eax
c001423e:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0014241:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0014244:	bb 05 00 00 00       	mov    ebx,0x5
c0014249:	83 c1 02             	add    ecx,0x2
c001424c:	89 c8                	mov    eax,ecx
c001424e:	f7 f7                	div    edi
c0014250:	31 d2                	xor    edx,edx
c0014252:	89 c7                	mov    edi,eax
c0014254:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c001425a:	83 c0 02             	add    eax,0x2
c001425d:	f7 f3                	div    ebx
c001425f:	89 eb                	mov    ebx,ebp
c0014261:	29 c3                	sub    ebx,eax
c0014263:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0014269:	88 1e                	mov    BYTE PTR [esi],bl
c001426b:	19 c0                	sbb    eax,eax
c001426d:	31 d2                	xor    edx,edx
c001426f:	83 e0 0c             	and    eax,0xc
c0014272:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0014276:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c001427e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0014282:	83 f9 01             	cmp    ecx,0x1
c0014285:	0f 96 c2             	setbe  dl
c0014288:	41                   	inc    ecx
c0014289:	01 d0                	add    eax,edx
c001428b:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c001428e:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0014292:	83 c4 1c             	add    esp,0x1c
c0014295:	89 f0                	mov    eax,esi
c0014297:	5b                   	pop    ebx
c0014298:	5e                   	pop    esi
c0014299:	5f                   	pop    edi
c001429a:	5d                   	pop    ebp
c001429b:	c2 04 00             	ret    0x4

c001429e <Clock::timeInDatetimeLocal()>:
c001429e:	53                   	push   ebx
c001429f:	83 ec 14             	sub    esp,0x14
c00142a2:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00142aa:	e8 83 fc ff ff       	call   c0013f32 <Clock::timeInSecondsLocal()>
c00142af:	83 c4 0c             	add    esp,0xc
c00142b2:	52                   	push   edx
c00142b3:	50                   	push   eax
c00142b4:	53                   	push   ebx
c00142b5:	e8 a0 fe ff ff       	call   c001415a <secondsToDatetime(unsigned long long)>
c00142ba:	89 d8                	mov    eax,ebx
c00142bc:	83 c4 14             	add    esp,0x14
c00142bf:	5b                   	pop    ebx
c00142c0:	c2 04 00             	ret    0x4
c00142c3:	90                   	nop

c00142c4 <Device::hibernate()>:
c00142c4:	c3                   	ret    
c00142c5:	90                   	nop

c00142c6 <Device::wake()>:
c00142c6:	c3                   	ret    
c00142c7:	90                   	nop

c00142c8 <Device::detect()>:
c00142c8:	c3                   	ret    
c00142c9:	90                   	nop

c00142ca <Device::disableLegacy()>:
c00142ca:	c3                   	ret    
c00142cb:	90                   	nop

c00142cc <Device::powerSaving(PowerSavingLevel)>:
c00142cc:	c3                   	ret    
c00142cd:	90                   	nop

c00142ce <DriverlessDevice::close(int, int, void*)>:
c00142ce:	31 c0                	xor    eax,eax
c00142d0:	c3                   	ret    
c00142d1:	90                   	nop

c00142d2 <DriverlessDevice::detect()>:
c00142d2:	c3                   	ret    
c00142d3:	90                   	nop

c00142d4 <DriverlessDevice::open(int, int, void*)>:
c00142d4:	83 ec 18             	sub    esp,0x18
c00142d7:	68 50 ad 02 c0       	push   0xc002ad50
c00142dc:	e8 bc 63 00 00       	call   c001a69d <Krnl::panic(char const*)>
c00142e1:	83 c8 ff             	or     eax,0xffffffff
c00142e4:	83 c4 1c             	add    esp,0x1c
c00142e7:	c3                   	ret    

c00142e8 <Device::~Device()>:
c00142e8:	ba 78 ad 02 c0       	mov    edx,0xc002ad78
c00142ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00142f1:	89 10                	mov    DWORD PTR [eax],edx
c00142f3:	90                   	nop
c00142f4:	c3                   	ret    
c00142f5:	90                   	nop

c00142f6 <Device::~Device()>:
c00142f6:	83 ec 0c             	sub    esp,0xc
c00142f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00142fd:	e8 e6 ff ff ff       	call   c00142e8 <Device::~Device()>
c0014302:	83 c4 04             	add    esp,0x4
c0014305:	83 ec 08             	sub    esp,0x8
c0014308:	68 58 01 00 00       	push   0x158
c001430d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014311:	e8 f9 eb ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0014316:	83 c4 10             	add    esp,0x10
c0014319:	83 c4 0c             	add    esp,0xc
c001431c:	c3                   	ret    
c001431d:	90                   	nop

c001431e <Device::findAndLoadDriver()>:
c001431e:	c3                   	ret    
c001431f:	90                   	nop

c0014320 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014320:	57                   	push   edi
c0014321:	b9 09 00 00 00       	mov    ecx,0x9
c0014326:	56                   	push   esi
c0014327:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001432b:	8d 74 24 10          	lea    esi,[esp+0x10]
c001432f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0014339:	81 c7 18 01 00 00    	add    edi,0x118
c001433f:	fc                   	cld    
c0014340:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0014342:	5e                   	pop    esi
c0014343:	5f                   	pop    edi
c0014344:	c3                   	ret    
c0014345:	90                   	nop

c0014346 <Device::preOpenACPI(void*, char*, char*)>:
c0014346:	56                   	push   esi
c0014347:	53                   	push   ebx
c0014348:	83 ec 08             	sub    esp,0x8
c001434b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001434f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014353:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c001435d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014361:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0014367:	6a 1e                	push   0x1e
c0014369:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c001436f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014373:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0014379:	50                   	push   eax
c001437a:	e8 c5 c3 fe ff       	call   c0000744 <memcpy>
c001437f:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0014383:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0014387:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c001438f:	83 c4 14             	add    esp,0x14
c0014392:	5b                   	pop    ebx
c0014393:	5e                   	pop    esi
c0014394:	e9 ab c3 fe ff       	jmp    c0000744 <memcpy>
c0014399:	90                   	nop

c001439a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001439a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001439e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143a3:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143aa:	75 0b                	jne    c00143b7 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c00143ac:	8b 00                	mov    eax,DWORD PTR [eax]
c00143ae:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143b2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00143b5:	eb 1e                	jmp    c00143d5 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c00143b7:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00143bc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00143c2:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c00143c8:	8b 08                	mov    ecx,DWORD PTR [eax]
c00143ca:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00143d2:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c00143d5:	ff e0                	jmp    eax
c00143d7:	90                   	nop

c00143d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c00143d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00143dc:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00143e1:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00143e8:	75 0b                	jne    c00143f5 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c00143ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00143ec:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00143f0:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c00143f3:	eb 1e                	jmp    c0014413 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c00143f5:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00143fa:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014400:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0014406:	8b 08                	mov    ecx,DWORD PTR [eax]
c0014408:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001440c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014410:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014413:	ff e0                	jmp    eax
c0014415:	90                   	nop

c0014416 <Device::addChild(Device*)>:
c0014416:	53                   	push   ebx
c0014417:	83 ec 08             	sub    esp,0x8
c001441a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001441e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014422:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0014428:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c001442e:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014430:	85 d2                	test   edx,edx
c0014432:	74 04                	je     c0014438 <Device::addChild(Device*)+0x22>
c0014434:	89 d3                	mov    ebx,edx
c0014436:	eb f6                	jmp    c001442e <Device::addChild(Device*)+0x18>
c0014438:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001443b:	83 ec 0c             	sub    esp,0xc
c001443e:	6a 08                	push   0x8
c0014440:	e8 fe b3 ff ff       	call   c000f843 <malloc>
c0014445:	89 03                	mov    DWORD PTR [ebx],eax
c0014447:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001444d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014454:	83 c4 18             	add    esp,0x18
c0014457:	5b                   	pop    ebx
c0014458:	c3                   	ret    
c0014459:	90                   	nop

c001445a <Device::removeAllChildren()>:
c001445a:	56                   	push   esi
c001445b:	53                   	push   ebx
c001445c:	52                   	push   edx
c001445d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014461:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0014467:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001446a:	74 17                	je     c0014483 <Device::removeAllChildren()+0x29>
c001446c:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001446f:	85 c0                	test   eax,eax
c0014471:	74 0c                	je     c001447f <Device::removeAllChildren()+0x25>
c0014473:	83 ec 0c             	sub    esp,0xc
c0014476:	8b 10                	mov    edx,DWORD PTR [eax]
c0014478:	50                   	push   eax
c0014479:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001447c:	83 c4 10             	add    esp,0x10
c001447f:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014481:	eb e4                	jmp    c0014467 <Device::removeAllChildren()+0xd>
c0014483:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014489:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001448f:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014495:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001449c:	58                   	pop    eax
c001449d:	5b                   	pop    ebx
c001449e:	5e                   	pop    esi
c001449f:	c3                   	ret    

c00144a0 <Device::hibernateAll()>:
c00144a0:	53                   	push   ebx
c00144a1:	83 ec 14             	sub    esp,0x14
c00144a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144a8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144aa:	53                   	push   ebx
c00144ab:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00144ae:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144b4:	83 c4 10             	add    esp,0x10
c00144b7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144ba:	74 0f                	je     c00144cb <Device::hibernateAll()+0x2b>
c00144bc:	83 ec 0c             	sub    esp,0xc
c00144bf:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144c2:	e8 d9 ff ff ff       	call   c00144a0 <Device::hibernateAll()>
c00144c7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144c9:	eb e9                	jmp    c00144b4 <Device::hibernateAll()+0x14>
c00144cb:	83 c4 08             	add    esp,0x8
c00144ce:	5b                   	pop    ebx
c00144cf:	c3                   	ret    

c00144d0 <Device::wakeAll()>:
c00144d0:	53                   	push   ebx
c00144d1:	83 ec 14             	sub    esp,0x14
c00144d4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00144d8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00144da:	53                   	push   ebx
c00144db:	ff 50 14             	call   DWORD PTR [eax+0x14]
c00144de:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00144e4:	83 c4 10             	add    esp,0x10
c00144e7:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00144ea:	74 0f                	je     c00144fb <Device::wakeAll()+0x2b>
c00144ec:	83 ec 0c             	sub    esp,0xc
c00144ef:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00144f2:	e8 d9 ff ff ff       	call   c00144d0 <Device::wakeAll()>
c00144f7:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00144f9:	eb e9                	jmp    c00144e4 <Device::wakeAll()+0x14>
c00144fb:	83 c4 08             	add    esp,0x8
c00144fe:	5b                   	pop    ebx
c00144ff:	c3                   	ret    

c0014500 <Device::detectAll()>:
c0014500:	53                   	push   ebx
c0014501:	83 ec 14             	sub    esp,0x14
c0014504:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014508:	8b 03                	mov    eax,DWORD PTR [ebx]
c001450a:	53                   	push   ebx
c001450b:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001450e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014514:	83 c4 10             	add    esp,0x10
c0014517:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001451a:	74 0f                	je     c001452b <Device::detectAll()+0x2b>
c001451c:	83 ec 0c             	sub    esp,0xc
c001451f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014522:	e8 d9 ff ff ff       	call   c0014500 <Device::detectAll()>
c0014527:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014529:	eb e9                	jmp    c0014514 <Device::detectAll()+0x14>
c001452b:	83 c4 08             	add    esp,0x8
c001452e:	5b                   	pop    ebx
c001452f:	c3                   	ret    

c0014530 <Device::disableLegacyAll()>:
c0014530:	53                   	push   ebx
c0014531:	83 ec 14             	sub    esp,0x14
c0014534:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014538:	8b 03                	mov    eax,DWORD PTR [ebx]
c001453a:	53                   	push   ebx
c001453b:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c001453e:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014544:	83 c4 10             	add    esp,0x10
c0014547:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001454a:	74 0f                	je     c001455b <Device::disableLegacyAll()+0x2b>
c001454c:	83 ec 0c             	sub    esp,0xc
c001454f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014552:	e8 d9 ff ff ff       	call   c0014530 <Device::disableLegacyAll()>
c0014557:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014559:	eb e9                	jmp    c0014544 <Device::disableLegacyAll()+0x14>
c001455b:	83 c4 08             	add    esp,0x8
c001455e:	5b                   	pop    ebx
c001455f:	c3                   	ret    

c0014560 <Device::loadDriversForAll()>:
c0014560:	53                   	push   ebx
c0014561:	83 ec 08             	sub    esp,0x8
c0014564:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014568:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c001456e:	8b 18                	mov    ebx,DWORD PTR [eax]
c0014570:	85 db                	test   ebx,ebx
c0014572:	74 12                	je     c0014586 <Device::loadDriversForAll()+0x26>
c0014574:	83 ec 0c             	sub    esp,0xc
c0014577:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001457a:	e8 e1 ff ff ff       	call   c0014560 <Device::loadDriversForAll()>
c001457f:	83 c4 10             	add    esp,0x10
c0014582:	89 d8                	mov    eax,ebx
c0014584:	eb e8                	jmp    c001456e <Device::loadDriversForAll()+0xe>
c0014586:	83 c4 08             	add    esp,0x8
c0014589:	5b                   	pop    ebx
c001458a:	c3                   	ret    
c001458b:	90                   	nop

c001458c <Device::closeAll()>:
c001458c:	53                   	push   ebx
c001458d:	83 ec 08             	sub    esp,0x8
c0014590:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014594:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014596:	6a 00                	push   0x0
c0014598:	6a 00                	push   0x0
c001459a:	6a 00                	push   0x0
c001459c:	53                   	push   ebx
c001459d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00145a0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145a6:	83 c4 10             	add    esp,0x10
c00145a9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145ac:	74 0f                	je     c00145bd <Device::closeAll()+0x31>
c00145ae:	83 ec 0c             	sub    esp,0xc
c00145b1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145b4:	e8 d3 ff ff ff       	call   c001458c <Device::closeAll()>
c00145b9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145bb:	eb e9                	jmp    c00145a6 <Device::closeAll()+0x1a>
c00145bd:	83 c4 08             	add    esp,0x8
c00145c0:	5b                   	pop    ebx
c00145c1:	c3                   	ret    

c00145c2 <Device::powerSavingAll(PowerSavingLevel)>:
c00145c2:	56                   	push   esi
c00145c3:	53                   	push   ebx
c00145c4:	83 ec 0c             	sub    esp,0xc
c00145c7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00145cb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00145cf:	8b 03                	mov    eax,DWORD PTR [ebx]
c00145d1:	56                   	push   esi
c00145d2:	53                   	push   ebx
c00145d3:	ff 50 20             	call   DWORD PTR [eax+0x20]
c00145d6:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145dc:	83 c4 10             	add    esp,0x10
c00145df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145e2:	74 0f                	je     c00145f3 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c00145e4:	52                   	push   edx
c00145e5:	52                   	push   edx
c00145e6:	56                   	push   esi
c00145e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145ea:	e8 d3 ff ff ff       	call   c00145c2 <Device::powerSavingAll(PowerSavingLevel)>
c00145ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145f1:	eb e9                	jmp    c00145dc <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c00145f3:	58                   	pop    eax
c00145f4:	5b                   	pop    ebx
c00145f5:	5e                   	pop    esi
c00145f6:	c3                   	ret    
c00145f7:	90                   	nop

c00145f8 <Device::setName(char const*)>:
c00145f8:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014600:	e9 2f c2 fe ff       	jmp    c0000834 <strcpy>
c0014605:	90                   	nop

c0014606 <Device::Device(char const*)>:
c0014606:	83 ec 1c             	sub    esp,0x1c
c0014609:	ba 78 ad 02 c0       	mov    edx,0xc002ad78
c001460e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014612:	89 10                	mov    DWORD PTR [eax],edx
c0014614:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014618:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014622:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014626:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014634:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001463e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014642:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c001464c:	83 ec 08             	sub    esp,0x8
c001464f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014653:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014657:	e8 9c ff ff ff       	call   c00145f8 <Device::setName(char const*)>
c001465c:	83 c4 10             	add    esp,0x10
c001465f:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c0014667:	83 ec 0c             	sub    esp,0xc
c001466a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001466e:	e8 d0 b1 ff ff       	call   c000f843 <malloc>
c0014673:	83 c4 10             	add    esp,0x10
c0014676:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001467c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014683:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014687:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001468d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014691:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014697:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001469d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146a1:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00146a7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00146ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146b2:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00146b9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146bd:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c00146c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146c8:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00146d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146d6:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00146e0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146e4:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00146ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00146f2:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c00146fc:	90                   	nop
c00146fd:	83 c4 1c             	add    esp,0x1c
c0014700:	c3                   	ret    
c0014701:	90                   	nop

c0014702 <Device::getName()>:
c0014702:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014706:	05 d0 00 00 00       	add    eax,0xd0
c001470b:	c3                   	ret    

c001470c <DriverlessDevice::DriverlessDevice(char const*)>:
c001470c:	83 ec 0c             	sub    esp,0xc
c001470f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014713:	83 ec 08             	sub    esp,0x8
c0014716:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001471a:	50                   	push   eax
c001471b:	e8 e6 fe ff ff       	call   c0014606 <Device::Device(char const*)>
c0014720:	83 c4 10             	add    esp,0x10
c0014723:	ba a4 ad 02 c0       	mov    edx,0xc002ada4
c0014728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001472c:	89 10                	mov    DWORD PTR [eax],edx
c001472e:	90                   	nop
c001472f:	83 c4 0c             	add    esp,0xc
c0014732:	c3                   	ret    
c0014733:	90                   	nop

c0014734 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014734:	57                   	push   edi
c0014735:	56                   	push   esi
c0014736:	53                   	push   ebx
c0014737:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001473b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001473f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014743:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c0014749:	75 0c                	jne    c0014757 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c001474b:	52                   	push   edx
c001474c:	52                   	push   edx
c001474d:	53                   	push   ebx
c001474e:	56                   	push   esi
c001474f:	e8 56 42 01 00       	call   c00289aa <LinkedList<Device>::addElement(Device*)>
c0014754:	83 c4 10             	add    esp,0x10
c0014757:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001475d:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014760:	74 12                	je     c0014774 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c0014762:	50                   	push   eax
c0014763:	57                   	push   edi
c0014764:	56                   	push   esi
c0014765:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014768:	e8 c7 ff ff ff       	call   c0014734 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001476d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001476f:	83 c4 10             	add    esp,0x10
c0014772:	eb e9                	jmp    c001475d <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c0014774:	5b                   	pop    ebx
c0014775:	5e                   	pop    esi
c0014776:	5f                   	pop    edi
c0014777:	c3                   	ret    

c0014778 <getDevicesOfType(DeviceType)>:
c0014778:	53                   	push   ebx
c0014779:	83 ec 14             	sub    esp,0x14
c001477c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014780:	53                   	push   ebx
c0014781:	e8 00 43 01 00       	call   c0028a86 <LinkedList<Device>::LinkedList()>
c0014786:	83 c4 0c             	add    esp,0xc
c0014789:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001478d:	53                   	push   ebx
c001478e:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c0014794:	e8 9b ff ff ff       	call   c0014734 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c0014799:	89 d8                	mov    eax,ebx
c001479b:	83 c4 18             	add    esp,0x18
c001479e:	5b                   	pop    ebx
c001479f:	c2 04 00             	ret    0x4

c00147a2 <HardDiskController::HardDiskController(char const*)>:
c00147a2:	83 ec 0c             	sub    esp,0xc
c00147a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a9:	83 ec 08             	sub    esp,0x8
c00147ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147b0:	50                   	push   eax
c00147b1:	e8 50 fe ff ff       	call   c0014606 <Device::Device(char const*)>
c00147b6:	83 c4 10             	add    esp,0x10
c00147b9:	ba d0 ad 02 c0       	mov    edx,0xc002add0
c00147be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c2:	89 10                	mov    DWORD PTR [eax],edx
c00147c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c8:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c00147d2:	90                   	nop
c00147d3:	83 c4 0c             	add    esp,0xc
c00147d6:	c3                   	ret    
c00147d7:	90                   	nop

c00147d8 <HardDiskController::~HardDiskController()>:
c00147d8:	83 ec 0c             	sub    esp,0xc
c00147db:	ba d0 ad 02 c0       	mov    edx,0xc002add0
c00147e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147e4:	89 10                	mov    DWORD PTR [eax],edx
c00147e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147ea:	83 ec 0c             	sub    esp,0xc
c00147ed:	50                   	push   eax
c00147ee:	e8 f5 fa ff ff       	call   c00142e8 <Device::~Device()>
c00147f3:	83 c4 10             	add    esp,0x10
c00147f6:	90                   	nop
c00147f7:	83 c4 0c             	add    esp,0xc
c00147fa:	c3                   	ret    
c00147fb:	90                   	nop

c00147fc <HardDiskController::~HardDiskController()>:
c00147fc:	83 ec 0c             	sub    esp,0xc
c00147ff:	83 ec 0c             	sub    esp,0xc
c0014802:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014806:	e8 cd ff ff ff       	call   c00147d8 <HardDiskController::~HardDiskController()>
c001480b:	83 c4 10             	add    esp,0x10
c001480e:	83 ec 08             	sub    esp,0x8
c0014811:	68 58 01 00 00       	push   0x158
c0014816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001481a:	e8 f0 e6 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c001481f:	83 c4 10             	add    esp,0x10
c0014822:	83 c4 0c             	add    esp,0xc
c0014825:	c3                   	ret    

c0014826 <PhysicalDisk::eject()>:
c0014826:	83 ec 18             	sub    esp,0x18
c0014829:	68 f4 ad 02 c0       	push   0xc002adf4
c001482e:	e8 bc e7 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014833:	83 c8 ff             	or     eax,0xffffffff
c0014836:	83 c4 1c             	add    esp,0x1c
c0014839:	c3                   	ret    

c001483a <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001483a:	83 ec 0c             	sub    esp,0xc
c001483d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014841:	83 ec 08             	sub    esp,0x8
c0014844:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014848:	50                   	push   eax
c0014849:	e8 b8 fd ff ff       	call   c0014606 <Device::Device(char const*)>
c001484e:	83 c4 10             	add    esp,0x10
c0014851:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c0014856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001485a:	89 10                	mov    DWORD PTR [eax],edx
c001485c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014860:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0014867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001486b:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c0014872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014876:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014880:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014884:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014888:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001488e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014892:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001489c:	90                   	nop
c001489d:	83 c4 0c             	add    esp,0xc
c00148a0:	c3                   	ret    
c00148a1:	90                   	nop

c00148a2 <PhysicalDisk::startCache()>:
c00148a2:	56                   	push   esi
c00148a3:	53                   	push   ebx
c00148a4:	83 ec 10             	sub    esp,0x10
c00148a7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00148ab:	6a 44                	push   0x44
c00148ad:	e8 91 af ff ff       	call   c000f843 <malloc>
c00148b2:	89 c6                	mov    esi,eax
c00148b4:	58                   	pop    eax
c00148b5:	5a                   	pop    edx
c00148b6:	53                   	push   ebx
c00148b7:	56                   	push   esi
c00148b8:	e8 35 27 00 00       	call   c0016ff2 <VCache::VCache(PhysicalDisk*)>
c00148bd:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c00148c3:	83 c4 14             	add    esp,0x14
c00148c6:	5b                   	pop    ebx
c00148c7:	5e                   	pop    esi
c00148c8:	c3                   	ret    
c00148c9:	90                   	nop

c00148ca <PhysicalDisk::~PhysicalDisk()>:
c00148ca:	83 ec 0c             	sub    esp,0xc
c00148cd:	ba 24 ae 02 c0       	mov    edx,0xc002ae24
c00148d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148d6:	89 10                	mov    DWORD PTR [eax],edx
c00148d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00148dc:	83 ec 0c             	sub    esp,0xc
c00148df:	50                   	push   eax
c00148e0:	e8 03 fa ff ff       	call   c00142e8 <Device::~Device()>
c00148e5:	83 c4 10             	add    esp,0x10
c00148e8:	90                   	nop
c00148e9:	83 c4 0c             	add    esp,0xc
c00148ec:	c3                   	ret    
c00148ed:	90                   	nop

c00148ee <PhysicalDisk::~PhysicalDisk()>:
c00148ee:	83 ec 0c             	sub    esp,0xc
c00148f1:	83 ec 0c             	sub    esp,0xc
c00148f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148f8:	e8 cd ff ff ff       	call   c00148ca <PhysicalDisk::~PhysicalDisk()>
c00148fd:	83 c4 10             	add    esp,0x10
c0014900:	83 ec 08             	sub    esp,0x8
c0014903:	68 6c 01 00 00       	push   0x16c
c0014908:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001490c:	e8 fe e5 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0014911:	83 c4 10             	add    esp,0x10
c0014914:	83 c4 0c             	add    esp,0xc
c0014917:	c3                   	ret    

c0014918 <FPU::FPU(char const*)>:
c0014918:	83 ec 0c             	sub    esp,0xc
c001491b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001491f:	83 ec 08             	sub    esp,0x8
c0014922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014926:	50                   	push   eax
c0014927:	e8 da fc ff ff       	call   c0014606 <Device::Device(char const*)>
c001492c:	83 c4 10             	add    esp,0x10
c001492f:	ba 68 ae 02 c0       	mov    edx,0xc002ae68
c0014934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014938:	89 10                	mov    DWORD PTR [eax],edx
c001493a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001493e:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c0014948:	90                   	nop
c0014949:	83 c4 0c             	add    esp,0xc
c001494c:	c3                   	ret    
c001494d:	90                   	nop

c001494e <FPU::~FPU()>:
c001494e:	83 ec 0c             	sub    esp,0xc
c0014951:	ba 68 ae 02 c0       	mov    edx,0xc002ae68
c0014956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001495a:	89 10                	mov    DWORD PTR [eax],edx
c001495c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014960:	83 ec 0c             	sub    esp,0xc
c0014963:	50                   	push   eax
c0014964:	e8 7f f9 ff ff       	call   c00142e8 <Device::~Device()>
c0014969:	83 c4 10             	add    esp,0x10
c001496c:	90                   	nop
c001496d:	83 c4 0c             	add    esp,0xc
c0014970:	c3                   	ret    
c0014971:	90                   	nop

c0014972 <FPU::~FPU()>:
c0014972:	83 ec 0c             	sub    esp,0xc
c0014975:	83 ec 0c             	sub    esp,0xc
c0014978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001497c:	e8 cd ff ff ff       	call   c001494e <FPU::~FPU()>
c0014981:	83 c4 10             	add    esp,0x10
c0014984:	83 ec 08             	sub    esp,0x8
c0014987:	68 58 01 00 00       	push   0x158
c001498c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014990:	e8 7a e5 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0014995:	83 c4 10             	add    esp,0x10
c0014998:	83 c4 0c             	add    esp,0xc
c001499b:	c3                   	ret    

c001499c <setupFPU()>:
c001499c:	53                   	push   ebx
c001499d:	83 ec 08             	sub    esp,0x8
c00149a0:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c00149a6:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c00149ad:	74 19                	je     c00149c8 <setupFPU()+0x2c>
c00149af:	83 ec 0c             	sub    esp,0xc
c00149b2:	68 58 01 00 00       	push   0x158
c00149b7:	e8 87 ae ff ff       	call   c000f843 <malloc>
c00149bc:	89 c3                	mov    ebx,eax
c00149be:	89 04 24             	mov    DWORD PTR [esp],eax
c00149c1:	e8 32 0c 01 00       	call   c00255f8 <AVX::AVX()>
c00149c6:	eb 5b                	jmp    c0014a23 <setupFPU()+0x87>
c00149c8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00149ce:	84 c0                	test   al,al
c00149d0:	79 19                	jns    c00149eb <setupFPU()+0x4f>
c00149d2:	83 ec 0c             	sub    esp,0xc
c00149d5:	68 58 01 00 00       	push   0x158
c00149da:	e8 64 ae ff ff       	call   c000f843 <malloc>
c00149df:	89 c3                	mov    ebx,eax
c00149e1:	89 04 24             	mov    DWORD PTR [esp],eax
c00149e4:	e8 35 0d 01 00       	call   c002571e <SSE::SSE()>
c00149e9:	eb 38                	jmp    c0014a23 <setupFPU()+0x87>
c00149eb:	a8 20                	test   al,0x20
c00149ed:	74 19                	je     c0014a08 <setupFPU()+0x6c>
c00149ef:	83 ec 0c             	sub    esp,0xc
c00149f2:	68 58 01 00 00       	push   0x158
c00149f7:	e8 47 ae ff ff       	call   c000f843 <malloc>
c00149fc:	89 c3                	mov    ebx,eax
c00149fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a01:	e8 82 0c 01 00       	call   c0025688 <MMX::MMX()>
c0014a06:	eb 1b                	jmp    c0014a23 <setupFPU()+0x87>
c0014a08:	a8 10                	test   al,0x10
c0014a0a:	74 1c                	je     c0014a28 <setupFPU()+0x8c>
c0014a0c:	83 ec 0c             	sub    esp,0xc
c0014a0f:	68 58 01 00 00       	push   0x158
c0014a14:	e8 2a ae ff ff       	call   c000f843 <malloc>
c0014a19:	89 c3                	mov    ebx,eax
c0014a1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0014a1e:	e8 89 0d 01 00       	call   c00257ac <x87::x87()>
c0014a23:	83 c4 10             	add    esp,0x10
c0014a26:	eb 24                	jmp    c0014a4c <setupFPU()+0xb0>
c0014a28:	83 e0 ef             	and    eax,0xffffffef
c0014a2b:	83 ec 0c             	sub    esp,0xc
c0014a2e:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014a34:	68 54 ae 02 c0       	push   0xc002ae54
c0014a39:	e8 b1 e5 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014a3e:	0f 20 c0             	mov    eax,cr0
c0014a41:	83 c8 04             	or     eax,0x4
c0014a44:	0f 22 c0             	mov    cr0,eax
c0014a47:	31 db                	xor    ebx,ebx
c0014a49:	83 c4 10             	add    esp,0x10
c0014a4c:	89 d8                	mov    eax,ebx
c0014a4e:	83 c4 08             	add    esp,0x8
c0014a51:	5b                   	pop    ebx
c0014a52:	c3                   	ret    
c0014a53:	90                   	nop

c0014a54 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c0014a54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014a58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014a5c:	c1 e0 04             	shl    eax,0x4
c0014a5f:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014a63:	8d 50 10             	lea    edx,[eax+0x10]
c0014a66:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c0014a6c:	74 08                	je     c0014a76 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c0014a6e:	83 c0 04             	add    eax,0x4
c0014a71:	39 d0                	cmp    eax,edx
c0014a73:	75 f1                	jne    c0014a66 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c0014a75:	c3                   	ret    
c0014a76:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014a80:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014a8a:	eb e2                	jmp    c0014a6e <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c0014a8c <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c0014a8c:	57                   	push   edi
c0014a8d:	31 c0                	xor    eax,eax
c0014a8f:	56                   	push   esi
c0014a90:	53                   	push   ebx
c0014a91:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014a95:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014a99:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0014a9d:	89 da                	mov    edx,ebx
c0014a9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014aa3:	c1 e2 04             	shl    edx,0x4
c0014aa6:	01 ca                	add    edx,ecx
c0014aa8:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014ab0:	74 16                	je     c0014ac8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014ab2:	40                   	inc    eax
c0014ab3:	83 f8 04             	cmp    eax,0x4
c0014ab6:	75 f0                	jne    c0014aa8 <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c0014ab8:	c7 44 24 10 98 ae 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ae98
c0014ac0:	5b                   	pop    ebx
c0014ac1:	5e                   	pop    esi
c0014ac2:	5f                   	pop    edi
c0014ac3:	e9 d5 5b 00 00       	jmp    c001a69d <Krnl::panic(char const*)>
c0014ac8:	8d 04 98             	lea    eax,[eax+ebx*4]
c0014acb:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014ace:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014ad4:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c0014ada:	5b                   	pop    ebx
c0014adb:	5e                   	pop    esi
c0014adc:	5f                   	pop    edi
c0014add:	c3                   	ret    

c0014ade <doubleFault(regs*, void*)>:
c0014ade:	55                   	push   ebp
c0014adf:	89 e5                	mov    ebp,esp
c0014ae1:	83 ec 08             	sub    esp,0x8
c0014ae4:	83 ec 0c             	sub    esp,0xc
c0014ae7:	68 d3 ae 02 c0       	push   0xc002aed3
c0014aec:	e8 ac 5b 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0014af1:	83 c4 10             	add    esp,0x10
c0014af4:	90                   	nop
c0014af5:	c9                   	leave  
c0014af6:	c3                   	ret    
c0014af7:	90                   	nop

c0014af8 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0014af8:	56                   	push   esi
c0014af9:	53                   	push   ebx
c0014afa:	50                   	push   eax
c0014afb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014aff:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014b03:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014b08:	75 35                	jne    c0014b3f <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c0014b0a:	8d 43 20             	lea    eax,[ebx+0x20]
c0014b0d:	31 d2                	xor    edx,edx
c0014b0f:	89 c1                	mov    ecx,eax
c0014b11:	c1 e1 04             	shl    ecx,0x4
c0014b14:	01 f1                	add    ecx,esi
c0014b16:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014b1e:	74 3e                	je     c0014b5e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014b20:	42                   	inc    edx
c0014b21:	83 fa 04             	cmp    edx,0x4
c0014b24:	75 f0                	jne    c0014b16 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014b26:	83 ec 0c             	sub    esp,0xc
c0014b29:	68 18 af 02 c0       	push   0xc002af18
c0014b2e:	e8 6a 5b 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0014b33:	83 c4 10             	add    esp,0x10
c0014b36:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0014b3b:	5a                   	pop    edx
c0014b3c:	5b                   	pop    ebx
c0014b3d:	5e                   	pop    esi
c0014b3e:	c3                   	ret    
c0014b3f:	83 ec 0c             	sub    esp,0xc
c0014b42:	56                   	push   esi
c0014b43:	e8 ba fb ff ff       	call   c0014702 <Device::getName()>
c0014b48:	83 c4 10             	add    esp,0x10
c0014b4b:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014b4e:	75 ba                	jne    c0014b0a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b50:	83 fb 0f             	cmp    ebx,0xf
c0014b53:	7f 29                	jg     c0014b7e <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c0014b55:	0f b6 9b 80 d7 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2880]
c0014b5c:	eb ac                	jmp    c0014b0a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b5e:	8d 04 82             	lea    eax,[edx+eax*4]
c0014b61:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0014b65:	8d 04 86             	lea    eax,[esi+eax*4]
c0014b68:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0014b6e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014b72:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c0014b78:	89 d8                	mov    eax,ebx
c0014b7a:	5a                   	pop    edx
c0014b7b:	5b                   	pop    ebx
c0014b7c:	5e                   	pop    esi
c0014b7d:	c3                   	ret    
c0014b7e:	83 ec 0c             	sub    esp,0xc
c0014b81:	68 e0 ae 02 c0       	push   0xc002aee0
c0014b86:	e8 12 5b 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0014b8b:	83 c4 10             	add    esp,0x10
c0014b8e:	e9 77 ff ff ff       	jmp    c0014b0a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014b93:	90                   	nop

c0014b94 <InterruptController::clearAllHandlers(int, bool)>:
c0014b94:	56                   	push   esi
c0014b95:	53                   	push   ebx
c0014b96:	52                   	push   edx
c0014b97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014b9b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014b9f:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014ba4:	75 61                	jne    c0014c07 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014ba6:	8d 46 20             	lea    eax,[esi+0x20]
c0014ba9:	c1 e6 04             	shl    esi,0x4
c0014bac:	c1 e0 04             	shl    eax,0x4
c0014baf:	01 de                	add    esi,ebx
c0014bb1:	01 d8                	add    eax,ebx
c0014bb3:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014bbd:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014bc7:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014bd1:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014bdb:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014be5:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014bef:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014bf9:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014c03:	58                   	pop    eax
c0014c04:	5b                   	pop    ebx
c0014c05:	5e                   	pop    esi
c0014c06:	c3                   	ret    
c0014c07:	83 ec 0c             	sub    esp,0xc
c0014c0a:	53                   	push   ebx
c0014c0b:	e8 f2 fa ff ff       	call   c0014702 <Device::getName()>
c0014c10:	83 c4 10             	add    esp,0x10
c0014c13:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c16:	75 8e                	jne    c0014ba6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c18:	83 fe 0f             	cmp    esi,0xf
c0014c1b:	7f 09                	jg     c0014c26 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014c1d:	0f b6 b6 80 d7 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2880]
c0014c24:	eb 80                	jmp    c0014ba6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c26:	83 ec 0c             	sub    esp,0xc
c0014c29:	68 54 af 02 c0       	push   0xc002af54
c0014c2e:	e8 6a 5a 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0014c33:	83 c4 10             	add    esp,0x10
c0014c36:	e9 6b ff ff ff       	jmp    c0014ba6 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014c3b:	90                   	nop

c0014c3c <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014c3c:	56                   	push   esi
c0014c3d:	53                   	push   ebx
c0014c3e:	52                   	push   edx
c0014c3f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014c43:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014c47:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014c4c:	75 3a                	jne    c0014c88 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014c4e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014c52:	8d 50 20             	lea    edx,[eax+0x20]
c0014c55:	c1 e2 04             	shl    edx,0x4
c0014c58:	8d 04 16             	lea    eax,[esi+edx*1]
c0014c5b:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014c5f:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014c65:	74 0b                	je     c0014c72 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014c67:	83 c0 04             	add    eax,0x4
c0014c6a:	39 d0                	cmp    eax,edx
c0014c6c:	75 f1                	jne    c0014c5f <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014c6e:	58                   	pop    eax
c0014c6f:	5b                   	pop    ebx
c0014c70:	5e                   	pop    esi
c0014c71:	c3                   	ret    
c0014c72:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014c7c:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014c86:	eb df                	jmp    c0014c67 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014c88:	83 ec 0c             	sub    esp,0xc
c0014c8b:	56                   	push   esi
c0014c8c:	e8 71 fa ff ff       	call   c0014702 <Device::getName()>
c0014c91:	83 c4 10             	add    esp,0x10
c0014c94:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014c97:	75 b5                	jne    c0014c4e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014c99:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014c9e:	7f 11                	jg     c0014cb1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014ca0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ca4:	0f b6 80 80 d7 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2880]
c0014cab:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014caf:	eb 9d                	jmp    c0014c4e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014cb1:	83 ec 0c             	sub    esp,0xc
c0014cb4:	68 54 af 02 c0       	push   0xc002af54
c0014cb9:	e8 df 59 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0014cbe:	83 c4 10             	add    esp,0x10
c0014cc1:	eb 8b                	jmp    c0014c4e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014cc3 <nmiHandler(regs*, void*)>:
c0014cc3:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0014cc8:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ccc:	e9 bb a2 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014cd1 <int_handler>:
c0014cd1:	55                   	push   ebp
c0014cd2:	57                   	push   edi
c0014cd3:	56                   	push   esi
c0014cd4:	53                   	push   ebx
c0014cd5:	83 ec 0c             	sub    esp,0xc
c0014cd8:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014cdc:	80 3d 84 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031084,0x0
c0014ce3:	74 0b                	je     c0014cf0 <int_handler+0x1f>
c0014ce5:	fa                   	cli    
c0014ce6:	f4                   	hlt    
c0014ce7:	80 3d 84 10 03 c0 00 	cmp    BYTE PTR ds:0xc0031084,0x0
c0014cee:	75 f5                	jne    c0014ce5 <int_handler+0x14>
c0014cf0:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0014cf5:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014cf8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014cfe:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014d04:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d07:	83 f8 17             	cmp    eax,0x17
c0014d0a:	77 13                	ja     c0014d1f <int_handler+0x4e>
c0014d0c:	83 ec 08             	sub    esp,0x8
c0014d0f:	8b 17                	mov    edx,DWORD PTR [edi]
c0014d11:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014d14:	0f b6 c0             	movzx  eax,al
c0014d17:	50                   	push   eax
c0014d18:	57                   	push   edi
c0014d19:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014d1c:	83 c4 10             	add    esp,0x10
c0014d1f:	83 c3 15             	add    ebx,0x15
c0014d22:	c1 e3 04             	shl    ebx,0x4
c0014d25:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014d29:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014d30:	31 db                	xor    ebx,ebx
c0014d32:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014d36:	85 c0                	test   eax,eax
c0014d38:	74 13                	je     c0014d4d <int_handler+0x7c>
c0014d3a:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014d3d:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014d41:	74 1c                	je     c0014d5f <int_handler+0x8e>
c0014d43:	83 ec 08             	sub    esp,0x8
c0014d46:	52                   	push   edx
c0014d47:	56                   	push   esi
c0014d48:	ff d0                	call   eax
c0014d4a:	83 c4 10             	add    esp,0x10
c0014d4d:	43                   	inc    ebx
c0014d4e:	83 fb 04             	cmp    ebx,0x4
c0014d51:	75 df                	jne    c0014d32 <int_handler+0x61>
c0014d53:	83 c4 0c             	add    esp,0xc
c0014d56:	31 c0                	xor    eax,eax
c0014d58:	5b                   	pop    ebx
c0014d59:	31 d2                	xor    edx,edx
c0014d5b:	5e                   	pop    esi
c0014d5c:	5f                   	pop    edi
c0014d5d:	5d                   	pop    ebp
c0014d5e:	c3                   	ret    
c0014d5f:	83 ec 08             	sub    esp,0x8
c0014d62:	52                   	push   edx
c0014d63:	56                   	push   esi
c0014d64:	ff d0                	call   eax
c0014d66:	83 c4 10             	add    esp,0x10
c0014d69:	83 c4 0c             	add    esp,0xc
c0014d6c:	5b                   	pop    ebx
c0014d6d:	5e                   	pop    esi
c0014d6e:	5f                   	pop    edi
c0014d6f:	5d                   	pop    ebp
c0014d70:	c3                   	ret    
c0014d71:	90                   	nop

c0014d72 <InterruptController::InterruptController(char const*)>:
c0014d72:	83 ec 1c             	sub    esp,0x1c
c0014d75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d79:	83 ec 08             	sub    esp,0x8
c0014d7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014d80:	50                   	push   eax
c0014d81:	e8 80 f8 ff ff       	call   c0014606 <Device::Device(char const*)>
c0014d86:	83 c4 10             	add    esp,0x10
c0014d89:	ba 0c b2 02 c0       	mov    edx,0xc002b20c
c0014d8e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d92:	89 10                	mov    DWORD PTR [eax],edx
c0014d94:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d98:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014da2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014daa:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014db2:	7f 5e                	jg     c0014e12 <InterruptController::InterruptController(char const*)+0xa0>
c0014db4:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014dbc:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014dc1:	7f 49                	jg     c0014e0c <InterruptController::InterruptController(char const*)+0x9a>
c0014dc3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014dc7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014dcb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014dd2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014dd6:	01 ca                	add    edx,ecx
c0014dd8:	83 c2 54             	add    edx,0x54
c0014ddb:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014de3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014de7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014deb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014df2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014df6:	01 ca                	add    edx,ecx
c0014df8:	81 c2 54 04 00 00    	add    edx,0x454
c0014dfe:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014e06:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014e0a:	eb b0                	jmp    c0014dbc <InterruptController::InterruptController(char const*)+0x4a>
c0014e0c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014e10:	eb 98                	jmp    c0014daa <InterruptController::InterruptController(char const*)+0x38>
c0014e12:	90                   	nop
c0014e13:	83 c4 1c             	add    esp,0x1c
c0014e16:	c3                   	ret    
c0014e17:	90                   	nop

c0014e18 <InterruptController::~InterruptController()>:
c0014e18:	83 ec 0c             	sub    esp,0xc
c0014e1b:	ba 0c b2 02 c0       	mov    edx,0xc002b20c
c0014e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e24:	89 10                	mov    DWORD PTR [eax],edx
c0014e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014e2a:	83 ec 0c             	sub    esp,0xc
c0014e2d:	50                   	push   eax
c0014e2e:	e8 b5 f4 ff ff       	call   c00142e8 <Device::~Device()>
c0014e33:	83 c4 10             	add    esp,0x10
c0014e36:	90                   	nop
c0014e37:	83 c4 0c             	add    esp,0xc
c0014e3a:	c3                   	ret    
c0014e3b:	90                   	nop

c0014e3c <InterruptController::~InterruptController()>:
c0014e3c:	83 ec 0c             	sub    esp,0xc
c0014e3f:	83 ec 0c             	sub    esp,0xc
c0014e42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e46:	e8 cd ff ff ff       	call   c0014e18 <InterruptController::~InterruptController()>
c0014e4b:	83 c4 10             	add    esp,0x10
c0014e4e:	83 ec 08             	sub    esp,0x8
c0014e51:	68 58 21 00 00       	push   0x2158
c0014e56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014e5a:	e8 b0 e0 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0014e5f:	83 c4 10             	add    esp,0x10
c0014e62:	83 c4 0c             	add    esp,0xc
c0014e65:	c3                   	ret    

c0014e66 <displayDebugInfo(regs*)>:
c0014e66:	55                   	push   ebp
c0014e67:	57                   	push   edi
c0014e68:	56                   	push   esi
c0014e69:	53                   	push   ebx
c0014e6a:	83 ec 24             	sub    esp,0x24
c0014e6d:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014e71:	0f 20 c2             	mov    edx,cr0
c0014e74:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014e78:	0f 20 d7             	mov    edi,cr2
c0014e7b:	0f 20 de             	mov    esi,cr3
c0014e7e:	0f 20 e5             	mov    ebp,cr4
c0014e81:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014e84:	68 8e af 02 c0       	push   0xc002af8e
c0014e89:	e8 61 e1 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014e8e:	59                   	pop    ecx
c0014e8f:	58                   	pop    eax
c0014e90:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014e93:	68 99 af 02 c0       	push   0xc002af99
c0014e98:	e8 52 e1 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014e9d:	58                   	pop    eax
c0014e9e:	5a                   	pop    edx
c0014e9f:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014ea2:	68 a4 af 02 c0       	push   0xc002afa4
c0014ea7:	e8 43 e1 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014eac:	59                   	pop    ecx
c0014ead:	58                   	pop    eax
c0014eae:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014eb1:	68 af af 02 c0       	push   0xc002afaf
c0014eb6:	e8 34 e1 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014ebb:	58                   	pop    eax
c0014ebc:	5a                   	pop    edx
c0014ebd:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014ec0:	68 ba af 02 c0       	push   0xc002afba
c0014ec5:	e8 25 e1 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014eca:	59                   	pop    ecx
c0014ecb:	58                   	pop    eax
c0014ecc:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014ecf:	68 c5 af 02 c0       	push   0xc002afc5
c0014ed4:	e8 16 e1 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014ed9:	58                   	pop    eax
c0014eda:	5a                   	pop    edx
c0014edb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014ede:	68 d0 af 02 c0       	push   0xc002afd0
c0014ee3:	e8 07 e1 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014ee8:	59                   	pop    ecx
c0014ee9:	58                   	pop    eax
c0014eea:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014eed:	68 db af 02 c0       	push   0xc002afdb
c0014ef2:	e8 f8 e0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014ef7:	58                   	pop    eax
c0014ef8:	5a                   	pop    edx
c0014ef9:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014efc:	68 e6 af 02 c0       	push   0xc002afe6
c0014f01:	e8 e9 e0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014f06:	59                   	pop    ecx
c0014f07:	58                   	pop    eax
c0014f08:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014f0b:	68 f5 af 02 c0       	push   0xc002aff5
c0014f10:	e8 da e0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014f15:	58                   	pop    eax
c0014f16:	5a                   	pop    edx
c0014f17:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014f1a:	68 00 b0 02 c0       	push   0xc002b000
c0014f1f:	e8 cb e0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014f24:	59                   	pop    ecx
c0014f25:	58                   	pop    eax
c0014f26:	57                   	push   edi
c0014f27:	68 0b b0 02 c0       	push   0xc002b00b
c0014f2c:	e8 be e0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014f31:	58                   	pop    eax
c0014f32:	5a                   	pop    edx
c0014f33:	56                   	push   esi
c0014f34:	68 16 b0 02 c0       	push   0xc002b016
c0014f39:	e8 b1 e0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0014f3e:	59                   	pop    ecx
c0014f3f:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014f44:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4a:	e8 e2 bd ff ff       	call   c0010d31 <setActiveTerminal(VgaText*)>
c0014f4f:	58                   	pop    eax
c0014f50:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f53:	5a                   	pop    edx
c0014f54:	c1 e0 05             	shl    eax,0x5
c0014f57:	05 e0 d4 02 c0       	add    eax,0xc002d4e0
c0014f5c:	50                   	push   eax
c0014f5d:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014f62:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f68:	e8 e3 c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0014f6d:	59                   	pop    ecx
c0014f6e:	58                   	pop    eax
c0014f6f:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014f74:	68 21 b0 02 c0       	push   0xc002b021
c0014f79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f7f:	e8 cc c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0014f84:	58                   	pop    eax
c0014f85:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014f8a:	5a                   	pop    edx
c0014f8b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014f8e:	83 c0 0c             	add    eax,0xc
c0014f91:	50                   	push   eax
c0014f92:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014f97:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f9d:	e8 ae c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0014fa2:	59                   	pop    ecx
c0014fa3:	58                   	pop    eax
c0014fa4:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014fa9:	68 2a b0 02 c0       	push   0xc002b02a
c0014fae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb4:	e8 97 c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0014fb9:	58                   	pop    eax
c0014fba:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014fbf:	5a                   	pop    edx
c0014fc0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014fc3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fc9:	e8 a8 c1 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0014fce:	59                   	pop    ecx
c0014fcf:	58                   	pop    eax
c0014fd0:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014fd5:	68 32 b0 02 c0       	push   0xc002b032
c0014fda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe0:	e8 6b c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0014fe5:	58                   	pop    eax
c0014fe6:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0014feb:	5a                   	pop    edx
c0014fec:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014fef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff5:	e8 7c c1 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0014ffa:	59                   	pop    ecx
c0014ffb:	58                   	pop    eax
c0014ffc:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015001:	68 3a b0 02 c0       	push   0xc002b03a
c0015006:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500c:	e8 3f c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015011:	58                   	pop    eax
c0015012:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015017:	5a                   	pop    edx
c0015018:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c001501b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015021:	e8 50 c1 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0015026:	59                   	pop    ecx
c0015027:	58                   	pop    eax
c0015028:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001502d:	68 42 b0 02 c0       	push   0xc002b042
c0015032:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015038:	e8 13 c1 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001503d:	58                   	pop    eax
c001503e:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015043:	5a                   	pop    edx
c0015044:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0015047:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001504d:	e8 24 c1 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0015052:	59                   	pop    ecx
c0015053:	58                   	pop    eax
c0015054:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015059:	68 4a b0 02 c0       	push   0xc002b04a
c001505e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015064:	e8 e7 c0 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015069:	58                   	pop    eax
c001506a:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001506f:	5a                   	pop    edx
c0015070:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0015073:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015079:	e8 f8 c0 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001507e:	59                   	pop    ecx
c001507f:	58                   	pop    eax
c0015080:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015085:	68 52 b0 02 c0       	push   0xc002b052
c001508a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015090:	e8 bb c0 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015095:	58                   	pop    eax
c0015096:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001509b:	5a                   	pop    edx
c001509c:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c001509f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150a5:	e8 cc c0 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c00150aa:	59                   	pop    ecx
c00150ab:	58                   	pop    eax
c00150ac:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00150b1:	68 5a b0 02 c0       	push   0xc002b05a
c00150b6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150bc:	e8 8f c0 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c00150c1:	58                   	pop    eax
c00150c2:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00150c7:	5a                   	pop    edx
c00150c8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00150cc:	52                   	push   edx
c00150cd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150d3:	e8 9e c0 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c00150d8:	59                   	pop    ecx
c00150d9:	58                   	pop    eax
c00150da:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00150df:	68 63 b0 02 c0       	push   0xc002b063
c00150e4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ea:	e8 61 c0 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c00150ef:	58                   	pop    eax
c00150f0:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00150f5:	5a                   	pop    edx
c00150f6:	57                   	push   edi
c00150f7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150fd:	e8 74 c0 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0015102:	59                   	pop    ecx
c0015103:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015108:	5f                   	pop    edi
c0015109:	68 6b b0 02 c0       	push   0xc002b06b
c001510e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015114:	e8 37 c0 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015119:	58                   	pop    eax
c001511a:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001511f:	5a                   	pop    edx
c0015120:	56                   	push   esi
c0015121:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015127:	e8 4a c0 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001512c:	59                   	pop    ecx
c001512d:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015132:	5e                   	pop    esi
c0015133:	68 73 b0 02 c0       	push   0xc002b073
c0015138:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001513e:	e8 0d c0 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015143:	5f                   	pop    edi
c0015144:	58                   	pop    eax
c0015145:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001514a:	55                   	push   ebp
c001514b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015151:	e8 20 c0 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0015156:	58                   	pop    eax
c0015157:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001515c:	5a                   	pop    edx
c001515d:	68 7b b0 02 c0       	push   0xc002b07b
c0015162:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015168:	e8 e3 bf ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001516d:	0f 21 c0             	mov    eax,db0
c0015170:	59                   	pop    ecx
c0015171:	5e                   	pop    esi
c0015172:	50                   	push   eax
c0015173:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015178:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001517e:	e8 f3 bf ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0015183:	5f                   	pop    edi
c0015184:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015189:	5d                   	pop    ebp
c001518a:	68 84 b0 02 c0       	push   0xc002b084
c001518f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015195:	e8 b6 bf ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001519a:	0f 21 c8             	mov    eax,db1
c001519d:	5a                   	pop    edx
c001519e:	59                   	pop    ecx
c001519f:	50                   	push   eax
c00151a0:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ab:	e8 c6 bf ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c00151b0:	5e                   	pop    esi
c00151b1:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151b6:	5f                   	pop    edi
c00151b7:	68 8c b0 02 c0       	push   0xc002b08c
c00151bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151c2:	e8 89 bf ff ff       	call   c0011150 <VgaText::puts(char const*)>
c00151c7:	0f 21 d0             	mov    eax,db2
c00151ca:	5d                   	pop    ebp
c00151cb:	5a                   	pop    edx
c00151cc:	50                   	push   eax
c00151cd:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151d2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151d8:	e8 99 bf ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c00151dd:	59                   	pop    ecx
c00151de:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151e3:	5e                   	pop    esi
c00151e4:	68 94 b0 02 c0       	push   0xc002b094
c00151e9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00151ef:	e8 5c bf ff ff       	call   c0011150 <VgaText::puts(char const*)>
c00151f4:	0f 21 d8             	mov    eax,db3
c00151f7:	5f                   	pop    edi
c00151f8:	5d                   	pop    ebp
c00151f9:	50                   	push   eax
c00151fa:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00151ff:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015205:	e8 6c bf ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001520a:	58                   	pop    eax
c001520b:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015210:	5a                   	pop    edx
c0015211:	68 9c b0 02 c0       	push   0xc002b09c
c0015216:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001521c:	e8 2f bf ff ff       	call   c0011150 <VgaText::puts(char const*)>
c0015221:	0f 21 f0             	mov    eax,db6
c0015224:	59                   	pop    ecx
c0015225:	5e                   	pop    esi
c0015226:	50                   	push   eax
c0015227:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001522c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015232:	e8 3f bf ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0015237:	5f                   	pop    edi
c0015238:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001523d:	5d                   	pop    ebp
c001523e:	68 a4 b0 02 c0       	push   0xc002b0a4
c0015243:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015249:	e8 02 bf ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001524e:	0f 21 f8             	mov    eax,db7
c0015251:	5a                   	pop    edx
c0015252:	59                   	pop    ecx
c0015253:	50                   	push   eax
c0015254:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015259:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001525f:	e8 12 bf ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c0015264:	5e                   	pop    esi
c0015265:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015268:	e8 12 85 00 00       	call   c001d77f <Thr::getDriverNameFromAddress(unsigned long)>
c001526d:	83 c4 10             	add    esp,0x10
c0015270:	85 c0                	test   eax,eax
c0015272:	74 7d                	je     c00152f1 <displayDebugInfo(regs*)+0x48b>
c0015274:	89 c6                	mov    esi,eax
c0015276:	50                   	push   eax
c0015277:	50                   	push   eax
c0015278:	56                   	push   esi
c0015279:	68 ac b0 02 c0       	push   0xc002b0ac
c001527e:	e8 6c dd ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0015283:	5a                   	pop    edx
c0015284:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0015289:	59                   	pop    ecx
c001528a:	68 ba b0 02 c0       	push   0xc002b0ba
c001528f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015295:	e8 b6 be ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001529a:	5f                   	pop    edi
c001529b:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00152a0:	5d                   	pop    ebp
c00152a1:	56                   	push   esi
c00152a2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152a8:	e8 a3 be ff ff       	call   c0011150 <VgaText::puts(char const*)>
c00152ad:	58                   	pop    eax
c00152ae:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00152b3:	5a                   	pop    edx
c00152b4:	68 c6 b0 02 c0       	push   0xc002b0c6
c00152b9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00152bf:	e8 8c be ff ff       	call   c0011150 <VgaText::puts(char const*)>
c00152c4:	59                   	pop    ecx
c00152c5:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c00152ca:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c00152d0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00152d3:	e8 de 84 00 00       	call   c001d7b6 <Thr::getDriverOffsetFromAddress(unsigned long)>
c00152d8:	5b                   	pop    ebx
c00152d9:	5d                   	pop    ebp
c00152da:	50                   	push   eax
c00152db:	57                   	push   edi
c00152dc:	e8 95 be ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c00152e1:	58                   	pop    eax
c00152e2:	5a                   	pop    edx
c00152e3:	56                   	push   esi
c00152e4:	68 d2 b0 02 c0       	push   0xc002b0d2
c00152e9:	e8 01 dd ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00152ee:	83 c4 10             	add    esp,0x10
c00152f1:	fa                   	cli    
c00152f2:	f4                   	hlt    
c00152f3:	eb fe                	jmp    c00152f3 <displayDebugInfo(regs*)+0x48d>

c00152f5 <x87EmulHandler(regs*, void*)>:
c00152f5:	53                   	push   ebx
c00152f6:	83 ec 14             	sub    esp,0x14
c00152f9:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00152fd:	53                   	push   ebx
c00152fe:	e8 23 a8 00 00       	call   c001fb26 <Vm::x87Handler(regs*)>
c0015303:	83 c4 10             	add    esp,0x10
c0015306:	84 c0                	test   al,al
c0015308:	74 05                	je     c001530f <x87EmulHandler(regs*, void*)+0x1a>
c001530a:	83 c4 08             	add    esp,0x8
c001530d:	5b                   	pop    ebx
c001530e:	c3                   	ret    
c001530f:	83 ec 0c             	sub    esp,0xc
c0015312:	68 e2 b0 02 c0       	push   0xc002b0e2
c0015317:	e8 d3 dc ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001531c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001531f:	e8 42 fb ff ff       	call   c0014e66 <displayDebugInfo(regs*)>

c0015324 <gpFault(regs*, void*)>:
c0015324:	53                   	push   ebx
c0015325:	83 ec 14             	sub    esp,0x14
c0015328:	c7 05 d8 e6 02 c0 a3 ee 01 c0 	mov    DWORD PTR ds:0xc002e6d8,0xc001eea3
c0015332:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015336:	53                   	push   ebx
c0015337:	e8 67 9b 00 00       	call   c001eea3 <Vm::faultHandler(regs*)>
c001533c:	83 c4 10             	add    esp,0x10
c001533f:	84 c0                	test   al,al
c0015341:	74 05                	je     c0015348 <gpFault(regs*, void*)+0x24>
c0015343:	83 c4 08             	add    esp,0x8
c0015346:	5b                   	pop    ebx
c0015347:	c3                   	ret    
c0015348:	83 ec 0c             	sub    esp,0xc
c001534b:	68 f8 b0 02 c0       	push   0xc002b0f8
c0015350:	e8 9a dc ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0015355:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015358:	e8 09 fb ff ff       	call   c0014e66 <displayDebugInfo(regs*)>

c001535d <pgFault(regs*, void*)>:
c001535d:	83 ec 18             	sub    esp,0x18
c0015360:	68 13 b1 02 c0       	push   0xc002b113
c0015365:	e8 85 dc ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001536a:	0f 20 d0             	mov    eax,cr2
c001536d:	5a                   	pop    edx
c001536e:	59                   	pop    ecx
c001536f:	50                   	push   eax
c0015370:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015375:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015378:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001537e:	e8 93 d7 ff ff       	call   c0012b16 <VAS::tryLoadBackOffDisk(unsigned long)>
c0015383:	83 c4 10             	add    esp,0x10
c0015386:	84 c0                	test   al,al
c0015388:	74 04                	je     c001538e <pgFault(regs*, void*)+0x31>
c001538a:	83 c4 0c             	add    esp,0xc
c001538d:	c3                   	ret    
c001538e:	83 ec 0c             	sub    esp,0xc
c0015391:	68 20 b1 02 c0       	push   0xc002b120
c0015396:	e8 54 dc ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001539b:	58                   	pop    eax
c001539c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00153a0:	e8 c1 fa ff ff       	call   c0014e66 <displayDebugInfo(regs*)>

c00153a5 <otherISRHandler(regs*, void*)>:
c00153a5:	53                   	push   ebx
c00153a6:	83 ec 0c             	sub    esp,0xc
c00153a9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00153ad:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c00153b0:	50                   	push   eax
c00153b1:	50                   	push   eax
c00153b2:	68 3e b1 02 c0       	push   0xc002b13e
c00153b7:	e8 33 dc ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00153bc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00153bf:	e8 a2 fa ff ff       	call   c0014e66 <displayDebugInfo(regs*)>

c00153c4 <opcodeFault(regs*, void*)>:
c00153c4:	55                   	push   ebp
c00153c5:	89 e5                	mov    ebp,esp
c00153c7:	56                   	push   esi
c00153c8:	53                   	push   ebx
c00153c9:	83 ec 40             	sub    esp,0x40
c00153cc:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00153d1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00153d7:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c00153dd:	84 c0                	test   al,al
c00153df:	74 24                	je     c0015405 <opcodeFault(regs*, void*)+0x41>
c00153e1:	83 ec 0c             	sub    esp,0xc
c00153e4:	68 5c b1 02 c0       	push   0xc002b15c
c00153e9:	e8 01 dc ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00153ee:	83 c4 10             	add    esp,0x10
c00153f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153f7:	8d 50 19             	lea    edx,[eax+0x19]
c00153fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153fd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015400:	e9 be 05 00 00       	jmp    c00159c3 <opcodeFault(regs*, void*)+0x5ff>
c0015405:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015408:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001540b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001540e:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0015412:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0015416:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015419:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001541f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015422:	8a 00                	mov    al,BYTE PTR [eax]
c0015424:	3c f0                	cmp    al,0xf0
c0015426:	75 17                	jne    c001543f <opcodeFault(regs*, void*)+0x7b>
c0015428:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001542b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001542e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015431:	8d 50 01             	lea    edx,[eax+0x1]
c0015434:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015437:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001543a:	e9 da 00 00 00       	jmp    c0015519 <opcodeFault(regs*, void*)+0x155>
c001543f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015442:	8a 00                	mov    al,BYTE PTR [eax]
c0015444:	3c f2                	cmp    al,0xf2
c0015446:	74 09                	je     c0015451 <opcodeFault(regs*, void*)+0x8d>
c0015448:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001544b:	8a 00                	mov    al,BYTE PTR [eax]
c001544d:	3c f3                	cmp    al,0xf3
c001544f:	75 1b                	jne    c001546c <opcodeFault(regs*, void*)+0xa8>
c0015451:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015455:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015458:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001545b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001545e:	8d 50 01             	lea    edx,[eax+0x1]
c0015461:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015464:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015467:	e9 ad 00 00 00       	jmp    c0015519 <opcodeFault(regs*, void*)+0x155>
c001546c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001546f:	8a 00                	mov    al,BYTE PTR [eax]
c0015471:	3c 66                	cmp    al,0x66
c0015473:	75 1f                	jne    c0015494 <opcodeFault(regs*, void*)+0xd0>
c0015475:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015479:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c001547d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015480:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015483:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015486:	8d 50 01             	lea    edx,[eax+0x1]
c0015489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001548f:	e9 85 00 00 00       	jmp    c0015519 <opcodeFault(regs*, void*)+0x155>
c0015494:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015497:	8a 00                	mov    al,BYTE PTR [eax]
c0015499:	3c 67                	cmp    al,0x67
c001549b:	75 18                	jne    c00154b5 <opcodeFault(regs*, void*)+0xf1>
c001549d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154a1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154aa:	8d 50 01             	lea    edx,[eax+0x1]
c00154ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154b0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154b3:	eb 64                	jmp    c0015519 <opcodeFault(regs*, void*)+0x155>
c00154b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154b8:	8a 00                	mov    al,BYTE PTR [eax]
c00154ba:	3c 2e                	cmp    al,0x2e
c00154bc:	74 09                	je     c00154c7 <opcodeFault(regs*, void*)+0x103>
c00154be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154c1:	8a 00                	mov    al,BYTE PTR [eax]
c00154c3:	3c 3e                	cmp    al,0x3e
c00154c5:	75 18                	jne    c00154df <opcodeFault(regs*, void*)+0x11b>
c00154c7:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00154cb:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00154ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154d4:	8d 50 01             	lea    edx,[eax+0x1]
c00154d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154da:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00154dd:	eb 3a                	jmp    c0015519 <opcodeFault(regs*, void*)+0x155>
c00154df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154e2:	8a 00                	mov    al,BYTE PTR [eax]
c00154e4:	3c 36                	cmp    al,0x36
c00154e6:	74 1b                	je     c0015503 <opcodeFault(regs*, void*)+0x13f>
c00154e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154eb:	8a 00                	mov    al,BYTE PTR [eax]
c00154ed:	3c 26                	cmp    al,0x26
c00154ef:	74 12                	je     c0015503 <opcodeFault(regs*, void*)+0x13f>
c00154f1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154f4:	8a 00                	mov    al,BYTE PTR [eax]
c00154f6:	3c 64                	cmp    al,0x64
c00154f8:	74 09                	je     c0015503 <opcodeFault(regs*, void*)+0x13f>
c00154fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00154fd:	8a 00                	mov    al,BYTE PTR [eax]
c00154ff:	3c 65                	cmp    al,0x65
c0015501:	75 16                	jne    c0015519 <opcodeFault(regs*, void*)+0x155>
c0015503:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015507:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001550a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001550d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015510:	8d 50 01             	lea    edx,[eax+0x1]
c0015513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015516:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015519:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001551c:	8a 00                	mov    al,BYTE PTR [eax]
c001551e:	3c 0f                	cmp    al,0xf
c0015520:	0f 85 ad 00 00 00    	jne    c00155d3 <opcodeFault(regs*, void*)+0x20f>
c0015526:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015529:	40                   	inc    eax
c001552a:	8a 00                	mov    al,BYTE PTR [eax]
c001552c:	3c c2                	cmp    al,0xc2
c001552e:	74 0e                	je     c001553e <opcodeFault(regs*, void*)+0x17a>
c0015530:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015533:	40                   	inc    eax
c0015534:	8a 00                	mov    al,BYTE PTR [eax]
c0015536:	3c c3                	cmp    al,0xc3
c0015538:	0f 85 95 00 00 00    	jne    c00155d3 <opcodeFault(regs*, void*)+0x20f>
c001553e:	83 ec 0c             	sub    esp,0xc
c0015541:	68 7f b1 02 c0       	push   0xc002b17f
c0015546:	e8 a4 da ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001554b:	83 c4 10             	add    esp,0x10
c001554e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015551:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015554:	8d 50 01             	lea    edx,[eax+0x1]
c0015557:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001555a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001555d:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015560:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015563:	8a 00                	mov    al,BYTE PTR [eax]
c0015565:	8d 50 fe             	lea    edx,[eax-0x2]
c0015568:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001556b:	88 10                	mov    BYTE PTR [eax],dl
c001556d:	8d 45 c2             	lea    eax,[ebp-0x3e]
c0015570:	50                   	push   eax
c0015571:	8d 45 c3             	lea    eax,[ebp-0x3d]
c0015574:	50                   	push   eax
c0015575:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015578:	50                   	push   eax
c0015579:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001557c:	e8 e3 47 00 00       	call   c0019d64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015581:	83 c4 10             	add    esp,0x10
c0015584:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015587:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001558a:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001558d:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c0015590:	01 d0                	add    eax,edx
c0015592:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0015595:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015598:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001559b:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c001559e:	48                   	dec    eax
c001559f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00155a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a5:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00155a8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155ae:	83 ec 04             	sub    esp,0x4
c00155b1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00155b4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00155b7:	50                   	push   eax
c00155b8:	e8 f7 ab fe ff       	call   c00001b4 <voodooXADD>
c00155bd:	83 c4 10             	add    esp,0x10
c00155c0:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00155c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00155c6:	01 c2                	add    edx,eax
c00155c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155cb:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00155ce:	e9 f0 03 00 00       	jmp    c00159c3 <opcodeFault(regs*, void*)+0x5ff>
c00155d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155d6:	8a 00                	mov    al,BYTE PTR [eax]
c00155d8:	3c 0f                	cmp    al,0xf
c00155da:	0f 85 8b 01 00 00    	jne    c001576b <opcodeFault(regs*, void*)+0x3a7>
c00155e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155e3:	40                   	inc    eax
c00155e4:	8a 00                	mov    al,BYTE PTR [eax]
c00155e6:	3c c7                	cmp    al,0xc7
c00155e8:	0f 86 7d 01 00 00    	jbe    c001576b <opcodeFault(regs*, void*)+0x3a7>
c00155ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f1:	40                   	inc    eax
c00155f2:	8a 00                	mov    al,BYTE PTR [eax]
c00155f4:	3c cf                	cmp    al,0xcf
c00155f6:	0f 87 6f 01 00 00    	ja     c001576b <opcodeFault(regs*, void*)+0x3a7>
c00155fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155ff:	40                   	inc    eax
c0015600:	8a 00                	mov    al,BYTE PTR [eax]
c0015602:	83 c0 38             	add    eax,0x38
c0015605:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015608:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001560c:	75 0b                	jne    c0015619 <opcodeFault(regs*, void*)+0x255>
c001560e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015611:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015614:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015617:	eb 75                	jmp    c001568e <opcodeFault(regs*, void*)+0x2ca>
c0015619:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001561d:	75 0b                	jne    c001562a <opcodeFault(regs*, void*)+0x266>
c001561f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015622:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015625:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015628:	eb 64                	jmp    c001568e <opcodeFault(regs*, void*)+0x2ca>
c001562a:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001562e:	75 0b                	jne    c001563b <opcodeFault(regs*, void*)+0x277>
c0015630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015633:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015636:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015639:	eb 53                	jmp    c001568e <opcodeFault(regs*, void*)+0x2ca>
c001563b:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c001563f:	75 0b                	jne    c001564c <opcodeFault(regs*, void*)+0x288>
c0015641:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015644:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015647:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001564a:	eb 42                	jmp    c001568e <opcodeFault(regs*, void*)+0x2ca>
c001564c:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015650:	75 0b                	jne    c001565d <opcodeFault(regs*, void*)+0x299>
c0015652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015655:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0015658:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001565b:	eb 31                	jmp    c001568e <opcodeFault(regs*, void*)+0x2ca>
c001565d:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c0015661:	75 0b                	jne    c001566e <opcodeFault(regs*, void*)+0x2aa>
c0015663:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015666:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015669:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001566c:	eb 20                	jmp    c001568e <opcodeFault(regs*, void*)+0x2ca>
c001566e:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c0015672:	75 0b                	jne    c001567f <opcodeFault(regs*, void*)+0x2bb>
c0015674:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015677:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001567a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001567d:	eb 0f                	jmp    c001568e <opcodeFault(regs*, void*)+0x2ca>
c001567f:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c0015683:	75 09                	jne    c001568e <opcodeFault(regs*, void*)+0x2ca>
c0015685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015688:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001568b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001568e:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c0015692:	74 10                	je     c00156a4 <opcodeFault(regs*, void*)+0x2e0>
c0015694:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c001569b:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00156a2:	eb 2d                	jmp    c00156d1 <opcodeFault(regs*, void*)+0x30d>
c00156a4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156a7:	c1 e0 18             	shl    eax,0x18
c00156aa:	89 c2                	mov    edx,eax
c00156ac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156af:	c1 e0 08             	shl    eax,0x8
c00156b2:	25 00 00 ff 00       	and    eax,0xff0000
c00156b7:	09 c2                	or     edx,eax
c00156b9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156bc:	c1 e8 08             	shr    eax,0x8
c00156bf:	25 00 ff 00 00       	and    eax,0xff00
c00156c4:	09 c2                	or     edx,eax
c00156c6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00156c9:	c1 e8 18             	shr    eax,0x18
c00156cc:	09 d0                	or     eax,edx
c00156ce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00156d1:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00156d5:	75 0b                	jne    c00156e2 <opcodeFault(regs*, void*)+0x31e>
c00156d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156dd:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00156e0:	eb 75                	jmp    c0015757 <opcodeFault(regs*, void*)+0x393>
c00156e2:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00156e6:	75 0b                	jne    c00156f3 <opcodeFault(regs*, void*)+0x32f>
c00156e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156ee:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00156f1:	eb 64                	jmp    c0015757 <opcodeFault(regs*, void*)+0x393>
c00156f3:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00156f7:	75 0b                	jne    c0015704 <opcodeFault(regs*, void*)+0x340>
c00156f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156fc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00156ff:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015702:	eb 53                	jmp    c0015757 <opcodeFault(regs*, void*)+0x393>
c0015704:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015708:	75 0b                	jne    c0015715 <opcodeFault(regs*, void*)+0x351>
c001570a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001570d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015710:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015713:	eb 42                	jmp    c0015757 <opcodeFault(regs*, void*)+0x393>
c0015715:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c0015719:	75 0b                	jne    c0015726 <opcodeFault(regs*, void*)+0x362>
c001571b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001571e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015721:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015724:	eb 31                	jmp    c0015757 <opcodeFault(regs*, void*)+0x393>
c0015726:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001572a:	75 0b                	jne    c0015737 <opcodeFault(regs*, void*)+0x373>
c001572c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001572f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015732:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015735:	eb 20                	jmp    c0015757 <opcodeFault(regs*, void*)+0x393>
c0015737:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001573b:	75 0b                	jne    c0015748 <opcodeFault(regs*, void*)+0x384>
c001573d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015740:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015743:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015746:	eb 0f                	jmp    c0015757 <opcodeFault(regs*, void*)+0x393>
c0015748:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001574c:	75 09                	jne    c0015757 <opcodeFault(regs*, void*)+0x393>
c001574e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015751:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015754:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0015757:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001575a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001575d:	8d 50 02             	lea    edx,[eax+0x2]
c0015760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015763:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015766:	e9 58 02 00 00       	jmp    c00159c3 <opcodeFault(regs*, void*)+0x5ff>
c001576b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001576e:	8a 00                	mov    al,BYTE PTR [eax]
c0015770:	3c 0f                	cmp    al,0xf
c0015772:	0f 85 76 01 00 00    	jne    c00158ee <opcodeFault(regs*, void*)+0x52a>
c0015778:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001577b:	40                   	inc    eax
c001577c:	8a 00                	mov    al,BYTE PTR [eax]
c001577e:	3c c7                	cmp    al,0xc7
c0015780:	0f 85 68 01 00 00    	jne    c00158ee <opcodeFault(regs*, void*)+0x52a>
c0015786:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001578c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001578f:	8d 50 01             	lea    edx,[eax+0x1]
c0015792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015795:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015798:	8d 45 ba             	lea    eax,[ebp-0x46]
c001579b:	50                   	push   eax
c001579c:	8d 45 bb             	lea    eax,[ebp-0x45]
c001579f:	50                   	push   eax
c00157a0:	8d 45 bc             	lea    eax,[ebp-0x44]
c00157a3:	50                   	push   eax
c00157a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00157a7:	e8 b8 45 00 00       	call   c0019d64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00157ac:	83 c4 10             	add    esp,0x10
c00157af:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00157b2:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c00157b5:	83 f0 01             	xor    eax,0x1
c00157b8:	84 c0                	test   al,al
c00157ba:	0f 84 2e 01 00 00    	je     c00158ee <opcodeFault(regs*, void*)+0x52a>
c00157c0:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c00157c3:	3c 01                	cmp    al,0x1
c00157c5:	0f 85 23 01 00 00    	jne    c00158ee <opcodeFault(regs*, void*)+0x52a>
c00157cb:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c00157ce:	83 f0 01             	xor    eax,0x1
c00157d1:	84 c0                	test   al,al
c00157d3:	0f 84 15 01 00 00    	je     c00158ee <opcodeFault(regs*, void*)+0x52a>
c00157d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157dc:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00157df:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157e2:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c00157e9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00157ec:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00157ef:	89 c2                	mov    edx,eax
c00157f1:	b8 00 00 00 00       	mov    eax,0x0
c00157f6:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00157f9:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00157fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ff:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015802:	ba 00 00 00 00       	mov    edx,0x0
c0015807:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001580a:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001580d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015810:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015813:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015816:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001581d:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015820:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015823:	89 c2                	mov    edx,eax
c0015825:	b8 00 00 00 00       	mov    eax,0x0
c001582a:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001582d:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015833:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015836:	ba 00 00 00 00       	mov    edx,0x0
c001583b:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001583e:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015841:	e8 4c 86 00 00       	call   c001de92 <lockScheduler()>
c0015846:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015849:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001584c:	8b 00                	mov    eax,DWORD PTR [eax]
c001584e:	89 c1                	mov    ecx,eax
c0015850:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c0015853:	89 cb                	mov    ebx,ecx
c0015855:	89 d0                	mov    eax,edx
c0015857:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c001585a:	89 c6                	mov    esi,eax
c001585c:	89 f0                	mov    eax,esi
c001585e:	09 d8                	or     eax,ebx
c0015860:	85 c0                	test   eax,eax
c0015862:	75 21                	jne    c0015885 <opcodeFault(regs*, void*)+0x4c1>
c0015864:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015867:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001586a:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001586d:	89 01                	mov    DWORD PTR [ecx],eax
c001586f:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015872:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015875:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015878:	83 c8 40             	or     eax,0x40
c001587b:	89 c2                	mov    edx,eax
c001587d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015880:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015883:	eb 3e                	jmp    c00158c3 <opcodeFault(regs*, void*)+0x4ff>
c0015885:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015888:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001588b:	8b 00                	mov    eax,DWORD PTR [eax]
c001588d:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015890:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015893:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015896:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015899:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001589c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001589f:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00158a2:	89 d0                	mov    eax,edx
c00158a4:	31 d2                	xor    edx,edx
c00158a6:	89 c3                	mov    ebx,eax
c00158a8:	89 d6                	mov    esi,edx
c00158aa:	89 da                	mov    edx,ebx
c00158ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158af:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c00158b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158b5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00158b8:	83 e0 bf             	and    eax,0xffffffbf
c00158bb:	89 c2                	mov    edx,eax
c00158bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158c0:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00158c3:	e8 cc 85 00 00       	call   c001de94 <unlockScheduler()>
c00158c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158cb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00158ce:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c00158d1:	01 c2                	add    edx,eax
c00158d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00158d6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00158d9:	83 ec 0c             	sub    esp,0xc
c00158dc:	68 8e b1 02 c0       	push   0xc002b18e
c00158e1:	e8 09 d7 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00158e6:	83 c4 10             	add    esp,0x10
c00158e9:	e9 d5 00 00 00       	jmp    c00159c3 <opcodeFault(regs*, void*)+0x5ff>
c00158ee:	83 ec 0c             	sub    esp,0xc
c00158f1:	68 a1 b1 02 c0       	push   0xc002b1a1
c00158f6:	e8 f4 d6 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00158fb:	83 c4 10             	add    esp,0x10
c00158fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015901:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015904:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015907:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001590a:	c1 e0 04             	shl    eax,0x4
c001590d:	01 d0                	add    eax,edx
c001590f:	83 c0 03             	add    eax,0x3
c0015912:	8a 00                	mov    al,BYTE PTR [eax]
c0015914:	0f b6 d8             	movzx  ebx,al
c0015917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001591a:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001591d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015920:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015923:	c1 e0 04             	shl    eax,0x4
c0015926:	01 d0                	add    eax,edx
c0015928:	83 c0 02             	add    eax,0x2
c001592b:	8a 00                	mov    al,BYTE PTR [eax]
c001592d:	0f b6 c8             	movzx  ecx,al
c0015930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015933:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015939:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001593c:	c1 e0 04             	shl    eax,0x4
c001593f:	01 d0                	add    eax,edx
c0015941:	40                   	inc    eax
c0015942:	8a 00                	mov    al,BYTE PTR [eax]
c0015944:	0f b6 d0             	movzx  edx,al
c0015947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001594a:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001594d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015950:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015953:	c1 e0 04             	shl    eax,0x4
c0015956:	01 f0                	add    eax,esi
c0015958:	8a 00                	mov    al,BYTE PTR [eax]
c001595a:	0f b6 c0             	movzx  eax,al
c001595d:	83 ec 0c             	sub    esp,0xc
c0015960:	53                   	push   ebx
c0015961:	51                   	push   ecx
c0015962:	52                   	push   edx
c0015963:	50                   	push   eax
c0015964:	68 b4 b1 02 c0       	push   0xc002b1b4
c0015969:	e8 81 d6 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001596e:	83 c4 20             	add    esp,0x20
c0015971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015974:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015977:	83 c0 03             	add    eax,0x3
c001597a:	8a 00                	mov    al,BYTE PTR [eax]
c001597c:	0f b6 d8             	movzx  ebx,al
c001597f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015982:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015985:	83 c0 02             	add    eax,0x2
c0015988:	8a 00                	mov    al,BYTE PTR [eax]
c001598a:	0f b6 c8             	movzx  ecx,al
c001598d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015990:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015993:	40                   	inc    eax
c0015994:	8a 00                	mov    al,BYTE PTR [eax]
c0015996:	0f b6 d0             	movzx  edx,al
c0015999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001599c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001599f:	8a 00                	mov    al,BYTE PTR [eax]
c00159a1:	0f b6 c0             	movzx  eax,al
c00159a4:	83 ec 0c             	sub    esp,0xc
c00159a7:	53                   	push   ebx
c00159a8:	51                   	push   ecx
c00159a9:	52                   	push   edx
c00159aa:	50                   	push   eax
c00159ab:	68 dc b1 02 c0       	push   0xc002b1dc
c00159b0:	e8 3a d6 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00159b5:	83 c4 20             	add    esp,0x20
c00159b8:	83 ec 0c             	sub    esp,0xc
c00159bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00159be:	e8 a3 f4 ff ff       	call   c0014e66 <displayDebugInfo(regs*)>
c00159c3:	8d 65 f8             	lea    esp,[ebp-0x8]
c00159c6:	5b                   	pop    ebx
c00159c7:	5e                   	pop    esi
c00159c8:	5d                   	pop    ebp
c00159c9:	c3                   	ret    

c00159ca <displayProgramFault(char const*)>:
c00159ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00159cf:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00159d2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00159d8:	85 c0                	test   eax,eax
c00159da:	74 15                	je     c00159f1 <displayProgramFault(char const*)+0x27>
c00159dc:	83 ec 0c             	sub    esp,0xc
c00159df:	6a 04                	push   0x4
c00159e1:	6a 0f                	push   0xf
c00159e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00159e7:	50                   	push   eax
c00159e8:	e8 25 b4 ff ff       	call   c0010e12 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00159ed:	83 c4 1c             	add    esp,0x1c
c00159f0:	c3                   	ret    
c00159f1:	c3                   	ret    

c00159f2 <setupInterruptController()>:
c00159f2:	55                   	push   ebp
c00159f3:	89 e5                	mov    ebp,esp
c00159f5:	53                   	push   ebx
c00159f6:	83 ec 24             	sub    esp,0x24
c00159f9:	b8 00 00 00 00       	mov    eax,0x0
c00159fe:	85 c0                	test   eax,eax
c0015a00:	0f 95 c0             	setne  al
c0015a03:	84 c0                	test   al,al
c0015a05:	74 5b                	je     c0015a62 <setupInterruptController()+0x70>
c0015a07:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c0015a0e:	83 ec 0c             	sub    esp,0xc
c0015a11:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015a14:	e8 2a 9e ff ff       	call   c000f843 <malloc>
c0015a19:	83 c4 10             	add    esp,0x10
c0015a1c:	89 c3                	mov    ebx,eax
c0015a1e:	83 ec 0c             	sub    esp,0xc
c0015a21:	53                   	push   ebx
c0015a22:	e8 c3 ff 00 00       	call   c00259ea <APIC::APIC()>
c0015a27:	83 c4 10             	add    esp,0x10
c0015a2a:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c0015a2d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015a30:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a33:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a35:	83 c0 08             	add    eax,0x8
c0015a38:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a3a:	6a 00                	push   0x0
c0015a3c:	6a 00                	push   0x0
c0015a3e:	6a 00                	push   0x0
c0015a40:	52                   	push   edx
c0015a41:	ff d0                	call   eax
c0015a43:	83 c4 10             	add    esp,0x10
c0015a46:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0015a4b:	83 ec 08             	sub    esp,0x8
c0015a4e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a51:	50                   	push   eax
c0015a52:	e8 bf e9 ff ff       	call   c0014416 <Device::addChild(Device*)>
c0015a57:	83 c4 10             	add    esp,0x10
c0015a5a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a5d:	e9 52 03 00 00       	jmp    c0015db4 <setupInterruptController()+0x3c2>
c0015a62:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0015a67:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0015a6d:	83 e0 01             	and    eax,0x1
c0015a70:	84 c0                	test   al,al
c0015a72:	0f 95 c0             	setne  al
c0015a75:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015a78:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c0015a7f:	83 ec 0c             	sub    esp,0xc
c0015a82:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015a85:	e8 b9 9d ff ff       	call   c000f843 <malloc>
c0015a8a:	83 c4 10             	add    esp,0x10
c0015a8d:	89 c3                	mov    ebx,eax
c0015a8f:	83 ec 0c             	sub    esp,0xc
c0015a92:	53                   	push   ebx
c0015a93:	e8 aa 04 01 00       	call   c0025f42 <PIC::PIC()>
c0015a98:	83 c4 10             	add    esp,0x10
c0015a9b:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015a9e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015aa1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aa4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa6:	83 c0 08             	add    eax,0x8
c0015aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aab:	6a 00                	push   0x0
c0015aad:	6a 00                	push   0x0
c0015aaf:	6a 00                	push   0x0
c0015ab1:	52                   	push   edx
c0015ab2:	ff d0                	call   eax
c0015ab4:	83 c4 10             	add    esp,0x10
c0015ab7:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015abb:	74 73                	je     c0015b30 <setupInterruptController()+0x13e>
c0015abd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015ac0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ac3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ac5:	83 c0 0c             	add    eax,0xc
c0015ac8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aca:	6a 00                	push   0x0
c0015acc:	6a 00                	push   0x0
c0015ace:	6a 00                	push   0x0
c0015ad0:	52                   	push   edx
c0015ad1:	ff d0                	call   eax
c0015ad3:	83 c4 10             	add    esp,0x10
c0015ad6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015ada:	74 15                	je     c0015af1 <setupInterruptController()+0xff>
c0015adc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015adf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae1:	83 c0 04             	add    eax,0x4
c0015ae4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ae6:	83 ec 0c             	sub    esp,0xc
c0015ae9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aec:	ff d0                	call   eax
c0015aee:	83 c4 10             	add    esp,0x10
c0015af1:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015af8:	83 ec 0c             	sub    esp,0xc
c0015afb:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015afe:	e8 40 9d ff ff       	call   c000f843 <malloc>
c0015b03:	83 c4 10             	add    esp,0x10
c0015b06:	89 c3                	mov    ebx,eax
c0015b08:	83 ec 0c             	sub    esp,0xc
c0015b0b:	53                   	push   ebx
c0015b0c:	e8 d9 fe 00 00       	call   c00259ea <APIC::APIC()>
c0015b11:	83 c4 10             	add    esp,0x10
c0015b14:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015b17:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015b1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b1d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b1f:	83 c0 08             	add    eax,0x8
c0015b22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b24:	6a 00                	push   0x0
c0015b26:	6a 00                	push   0x0
c0015b28:	6a 00                	push   0x0
c0015b2a:	52                   	push   edx
c0015b2b:	ff d0                	call   eax
c0015b2d:	83 c4 10             	add    esp,0x10
c0015b30:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0015b35:	83 ec 08             	sub    esp,0x8
c0015b38:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b3b:	50                   	push   eax
c0015b3c:	e8 d5 e8 ff ff       	call   c0014416 <Device::addChild(Device*)>
c0015b41:	83 c4 10             	add    esp,0x10
c0015b44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b47:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b49:	83 c0 24             	add    eax,0x24
c0015b4c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b4e:	6a 00                	push   0x0
c0015b50:	68 a5 53 01 c0       	push   0xc00153a5
c0015b55:	6a 00                	push   0x0
c0015b57:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b5a:	ff d0                	call   eax
c0015b5c:	83 c4 10             	add    esp,0x10
c0015b5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b62:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b64:	83 c0 24             	add    eax,0x24
c0015b67:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b69:	6a 00                	push   0x0
c0015b6b:	68 a5 53 01 c0       	push   0xc00153a5
c0015b70:	6a 01                	push   0x1
c0015b72:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b75:	ff d0                	call   eax
c0015b77:	83 c4 10             	add    esp,0x10
c0015b7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b7d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7f:	83 c0 24             	add    eax,0x24
c0015b82:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b84:	6a 00                	push   0x0
c0015b86:	68 c3 4c 01 c0       	push   0xc0014cc3
c0015b8b:	6a 02                	push   0x2
c0015b8d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b90:	ff d0                	call   eax
c0015b92:	83 c4 10             	add    esp,0x10
c0015b95:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b98:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9a:	83 c0 24             	add    eax,0x24
c0015b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b9f:	6a 00                	push   0x0
c0015ba1:	68 a5 53 01 c0       	push   0xc00153a5
c0015ba6:	6a 03                	push   0x3
c0015ba8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bab:	ff d0                	call   eax
c0015bad:	83 c4 10             	add    esp,0x10
c0015bb0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bb3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb5:	83 c0 24             	add    eax,0x24
c0015bb8:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bba:	6a 00                	push   0x0
c0015bbc:	68 a5 53 01 c0       	push   0xc00153a5
c0015bc1:	6a 04                	push   0x4
c0015bc3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bc6:	ff d0                	call   eax
c0015bc8:	83 c4 10             	add    esp,0x10
c0015bcb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd0:	83 c0 24             	add    eax,0x24
c0015bd3:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bd5:	6a 00                	push   0x0
c0015bd7:	68 a5 53 01 c0       	push   0xc00153a5
c0015bdc:	6a 05                	push   0x5
c0015bde:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015be1:	ff d0                	call   eax
c0015be3:	83 c4 10             	add    esp,0x10
c0015be6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015be9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015beb:	83 c0 24             	add    eax,0x24
c0015bee:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bf0:	6a 00                	push   0x0
c0015bf2:	68 c4 53 01 c0       	push   0xc00153c4
c0015bf7:	6a 06                	push   0x6
c0015bf9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bfc:	ff d0                	call   eax
c0015bfe:	83 c4 10             	add    esp,0x10
c0015c01:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c04:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c06:	83 c0 24             	add    eax,0x24
c0015c09:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c0b:	6a 00                	push   0x0
c0015c0d:	68 f5 52 01 c0       	push   0xc00152f5
c0015c12:	6a 07                	push   0x7
c0015c14:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c17:	ff d0                	call   eax
c0015c19:	83 c4 10             	add    esp,0x10
c0015c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c1f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c21:	83 c0 24             	add    eax,0x24
c0015c24:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c26:	6a 00                	push   0x0
c0015c28:	68 de 4a 01 c0       	push   0xc0014ade
c0015c2d:	6a 08                	push   0x8
c0015c2f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c32:	ff d0                	call   eax
c0015c34:	83 c4 10             	add    esp,0x10
c0015c37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c3a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c3c:	83 c0 24             	add    eax,0x24
c0015c3f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c41:	6a 00                	push   0x0
c0015c43:	68 a5 53 01 c0       	push   0xc00153a5
c0015c48:	6a 09                	push   0x9
c0015c4a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c4d:	ff d0                	call   eax
c0015c4f:	83 c4 10             	add    esp,0x10
c0015c52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c55:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c57:	83 c0 24             	add    eax,0x24
c0015c5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c5c:	6a 00                	push   0x0
c0015c5e:	68 a5 53 01 c0       	push   0xc00153a5
c0015c63:	6a 0a                	push   0xa
c0015c65:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c68:	ff d0                	call   eax
c0015c6a:	83 c4 10             	add    esp,0x10
c0015c6d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c70:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c72:	83 c0 24             	add    eax,0x24
c0015c75:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c77:	6a 00                	push   0x0
c0015c79:	68 a5 53 01 c0       	push   0xc00153a5
c0015c7e:	6a 0b                	push   0xb
c0015c80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c83:	ff d0                	call   eax
c0015c85:	83 c4 10             	add    esp,0x10
c0015c88:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c8b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c8d:	83 c0 24             	add    eax,0x24
c0015c90:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c92:	6a 00                	push   0x0
c0015c94:	68 a5 53 01 c0       	push   0xc00153a5
c0015c99:	6a 0c                	push   0xc
c0015c9b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c9e:	ff d0                	call   eax
c0015ca0:	83 c4 10             	add    esp,0x10
c0015ca3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ca6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ca8:	83 c0 24             	add    eax,0x24
c0015cab:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cad:	6a 00                	push   0x0
c0015caf:	68 24 53 01 c0       	push   0xc0015324
c0015cb4:	6a 0d                	push   0xd
c0015cb6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cb9:	ff d0                	call   eax
c0015cbb:	83 c4 10             	add    esp,0x10
c0015cbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cc1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc3:	83 c0 24             	add    eax,0x24
c0015cc6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cc8:	6a 00                	push   0x0
c0015cca:	68 5d 53 01 c0       	push   0xc001535d
c0015ccf:	6a 0e                	push   0xe
c0015cd1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cd4:	ff d0                	call   eax
c0015cd6:	83 c4 10             	add    esp,0x10
c0015cd9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cdc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cde:	83 c0 24             	add    eax,0x24
c0015ce1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ce3:	6a 00                	push   0x0
c0015ce5:	68 a5 53 01 c0       	push   0xc00153a5
c0015cea:	6a 0f                	push   0xf
c0015cec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015cef:	ff d0                	call   eax
c0015cf1:	83 c4 10             	add    esp,0x10
c0015cf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015cf7:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cf9:	83 c0 24             	add    eax,0x24
c0015cfc:	8b 00                	mov    eax,DWORD PTR [eax]
c0015cfe:	6a 00                	push   0x0
c0015d00:	68 a5 53 01 c0       	push   0xc00153a5
c0015d05:	6a 10                	push   0x10
c0015d07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d0a:	ff d0                	call   eax
c0015d0c:	83 c4 10             	add    esp,0x10
c0015d0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d12:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d14:	83 c0 24             	add    eax,0x24
c0015d17:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d19:	6a 00                	push   0x0
c0015d1b:	68 a5 53 01 c0       	push   0xc00153a5
c0015d20:	6a 11                	push   0x11
c0015d22:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d25:	ff d0                	call   eax
c0015d27:	83 c4 10             	add    esp,0x10
c0015d2a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d2d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d2f:	83 c0 24             	add    eax,0x24
c0015d32:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d34:	6a 00                	push   0x0
c0015d36:	68 a5 53 01 c0       	push   0xc00153a5
c0015d3b:	6a 12                	push   0x12
c0015d3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d40:	ff d0                	call   eax
c0015d42:	83 c4 10             	add    esp,0x10
c0015d45:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d48:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d4a:	83 c0 24             	add    eax,0x24
c0015d4d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d4f:	6a 00                	push   0x0
c0015d51:	68 a5 53 01 c0       	push   0xc00153a5
c0015d56:	6a 13                	push   0x13
c0015d58:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d5b:	ff d0                	call   eax
c0015d5d:	83 c4 10             	add    esp,0x10
c0015d60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d63:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d65:	83 c0 24             	add    eax,0x24
c0015d68:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d6a:	6a 00                	push   0x0
c0015d6c:	68 a5 53 01 c0       	push   0xc00153a5
c0015d71:	6a 14                	push   0x14
c0015d73:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d76:	ff d0                	call   eax
c0015d78:	83 c4 10             	add    esp,0x10
c0015d7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d80:	83 c0 24             	add    eax,0x24
c0015d83:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d85:	6a 00                	push   0x0
c0015d87:	68 a5 53 01 c0       	push   0xc00153a5
c0015d8c:	6a 1e                	push   0x1e
c0015d8e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015d91:	ff d0                	call   eax
c0015d93:	83 c4 10             	add    esp,0x10
c0015d96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015d99:	8b 00                	mov    eax,DWORD PTR [eax]
c0015d9b:	83 c0 24             	add    eax,0x24
c0015d9e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015da0:	6a 00                	push   0x0
c0015da2:	68 27 c8 01 c0       	push   0xc001c827
c0015da7:	6a 60                	push   0x60
c0015da9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015dac:	ff d0                	call   eax
c0015dae:	83 c4 10             	add    esp,0x10
c0015db1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015db4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015db7:	c9                   	leave  
c0015db8:	c3                   	ret    
c0015db9:	90                   	nop

c0015dba <InterruptController::convertLegacyIRQNumber(int)>:
c0015dba:	55                   	push   ebp
c0015dbb:	89 e5                	mov    ebp,esp
c0015dbd:	83 ec 08             	sub    esp,0x8
c0015dc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dc3:	83 ec 0c             	sub    esp,0xc
c0015dc6:	50                   	push   eax
c0015dc7:	e8 36 e9 ff ff       	call   c0014702 <Device::getName()>
c0015dcc:	83 c4 10             	add    esp,0x10
c0015dcf:	8a 00                	mov    al,BYTE PTR [eax]
c0015dd1:	3c 41                	cmp    al,0x41
c0015dd3:	0f 94 c0             	sete   al
c0015dd6:	84 c0                	test   al,al
c0015dd8:	74 28                	je     c0015e02 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015dda:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015dde:	7f 12                	jg     c0015df2 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015de0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015de3:	05 80 d7 02 c0       	add    eax,0xc002d780
c0015de8:	8a 00                	mov    al,BYTE PTR [eax]
c0015dea:	0f b6 c0             	movzx  eax,al
c0015ded:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015df0:	eb 10                	jmp    c0015e02 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015df2:	83 ec 0c             	sub    esp,0xc
c0015df5:	68 e0 ae 02 c0       	push   0xc002aee0
c0015dfa:	e8 9e 48 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0015dff:	83 c4 10             	add    esp,0x10
c0015e02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015e05:	c9                   	leave  
c0015e06:	c3                   	ret    
c0015e07:	90                   	nop

c0015e08 <startGUI(void*)>:
c0015e08:	55                   	push   ebp
c0015e09:	89 e5                	mov    ebp,esp
c0015e0b:	53                   	push   ebx
c0015e0c:	83 ec 04             	sub    esp,0x4
c0015e0f:	e8 80 80 00 00       	call   c001de94 <unlockScheduler()>
c0015e14:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c0015e1a:	83 ec 08             	sub    esp,0x8
c0015e1d:	6a 01                	push   0x1
c0015e1f:	68 4c b2 02 c0       	push   0xc002b24c
c0015e24:	e8 a7 79 00 00       	call   c001d7d0 <Thr::loadDLL(char const*, bool)>
c0015e29:	83 c4 10             	add    esp,0x10
c0015e2c:	83 ec 08             	sub    esp,0x8
c0015e2f:	53                   	push   ebx
c0015e30:	50                   	push   eax
c0015e31:	e8 e9 7b 00 00       	call   c001da1f <Thr::executeDLL(unsigned long, void*)>
c0015e36:	83 c4 10             	add    esp,0x10
c0015e39:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c0015e3f:	83 ec 08             	sub    esp,0x8
c0015e42:	6a 01                	push   0x1
c0015e44:	68 66 b2 02 c0       	push   0xc002b266
c0015e49:	e8 82 79 00 00       	call   c001d7d0 <Thr::loadDLL(char const*, bool)>
c0015e4e:	83 c4 10             	add    esp,0x10
c0015e51:	83 ec 08             	sub    esp,0x8
c0015e54:	53                   	push   ebx
c0015e55:	50                   	push   eax
c0015e56:	e8 c4 7b 00 00       	call   c001da1f <Thr::executeDLL(unsigned long, void*)>
c0015e5b:	83 c4 10             	add    esp,0x10
c0015e5e:	90                   	nop
c0015e5f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015e62:	c9                   	leave  
c0015e63:	c3                   	ret    

c0015e64 <startGUIVESA(void*)>:
c0015e64:	55                   	push   ebp
c0015e65:	89 e5                	mov    ebp,esp
c0015e67:	53                   	push   ebx
c0015e68:	83 ec 04             	sub    esp,0x4
c0015e6b:	e8 24 80 00 00       	call   c001de94 <unlockScheduler()>
c0015e70:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c0015e76:	83 ec 08             	sub    esp,0x8
c0015e79:	6a 01                	push   0x1
c0015e7b:	68 80 b2 02 c0       	push   0xc002b280
c0015e80:	e8 4b 79 00 00       	call   c001d7d0 <Thr::loadDLL(char const*, bool)>
c0015e85:	83 c4 10             	add    esp,0x10
c0015e88:	83 ec 08             	sub    esp,0x8
c0015e8b:	53                   	push   ebx
c0015e8c:	50                   	push   eax
c0015e8d:	e8 8d 7b 00 00       	call   c001da1f <Thr::executeDLL(unsigned long, void*)>
c0015e92:	83 c4 10             	add    esp,0x10
c0015e95:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c0015e9b:	83 ec 08             	sub    esp,0x8
c0015e9e:	6a 01                	push   0x1
c0015ea0:	68 66 b2 02 c0       	push   0xc002b266
c0015ea5:	e8 26 79 00 00       	call   c001d7d0 <Thr::loadDLL(char const*, bool)>
c0015eaa:	83 c4 10             	add    esp,0x10
c0015ead:	83 ec 08             	sub    esp,0x8
c0015eb0:	53                   	push   ebx
c0015eb1:	50                   	push   eax
c0015eb2:	e8 68 7b 00 00       	call   c001da1f <Thr::executeDLL(unsigned long, void*)>
c0015eb7:	83 c4 10             	add    esp,0x10
c0015eba:	90                   	nop
c0015ebb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015ebe:	c9                   	leave  
c0015ebf:	c3                   	ret    

c0015ec0 <sendKeyToTerminal(unsigned char)>:
c0015ec0:	55                   	push   ebp
c0015ec1:	89 e5                	mov    ebp,esp
c0015ec3:	83 ec 28             	sub    esp,0x28
c0015ec6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec9:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015ecc:	a1 04 e6 02 c0       	mov    eax,ds:0xc002e604
c0015ed1:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ed5:	83 ec 08             	sub    esp,0x8
c0015ed8:	52                   	push   edx
c0015ed9:	50                   	push   eax
c0015eda:	e8 6f b4 ff ff       	call   c001134e <VgaText::receiveKey(unsigned char)>
c0015edf:	83 c4 10             	add    esp,0x10
c0015ee2:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015ee6:	75 41                	jne    c0015f29 <sendKeyToTerminal(unsigned char)+0x69>
c0015ee8:	e8 cc 7f 00 00       	call   c001deb9 <lockStuff()>
c0015eed:	a1 e0 e6 02 c0       	mov    eax,ds:0xc002e6e0
c0015ef2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015ef5:	c7 05 e0 e6 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e6e0,0x0
c0015eff:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015f03:	74 1f                	je     c0015f24 <sendKeyToTerminal(unsigned char)+0x64>
c0015f05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f08:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015f0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015f0e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015f11:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015f14:	83 ec 0c             	sub    esp,0xc
c0015f17:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015f1a:	e8 8b 85 00 00       	call   c001e4aa <unblockTask(ThreadControlBlock*)>
c0015f1f:	83 c4 10             	add    esp,0x10
c0015f22:	eb db                	jmp    c0015eff <sendKeyToTerminal(unsigned char)+0x3f>
c0015f24:	e8 2a 83 00 00       	call   c001e253 <unlockStuff()>
c0015f29:	90                   	nop
c0015f2a:	c9                   	leave  
c0015f2b:	c3                   	ret    

c0015f2c <sendKeyboardToken(KeyboardToken)>:
c0015f2c:	55                   	push   ebp
c0015f2d:	89 e5                	mov    ebp,esp
c0015f2f:	83 ec 18             	sub    esp,0x18
c0015f32:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015f35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f38:	0f b7 c0             	movzx  eax,ax
c0015f3b:	83 f2 01             	xor    edx,0x1
c0015f3e:	88 90 00 e7 02 c0    	mov    BYTE PTR [eax-0x3ffd1900],dl
c0015f44:	a1 e8 e6 02 c0       	mov    eax,ds:0xc002e6e8
c0015f49:	85 c0                	test   eax,eax
c0015f4b:	74 24                	je     c0015f71 <sendKeyboardToken(KeyboardToken)+0x45>
c0015f4d:	8b 0d e8 e6 02 c0    	mov    ecx,DWORD PTR ds:0xc002e6e8
c0015f53:	83 ec 04             	sub    esp,0x4
c0015f56:	68 00 e7 02 c0       	push   0xc002e700
c0015f5b:	83 ec 08             	sub    esp,0x8
c0015f5e:	89 e2                	mov    edx,esp
c0015f60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f63:	89 02                	mov    DWORD PTR [edx],eax
c0015f65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f68:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015f6c:	ff d1                	call   ecx
c0015f6e:	83 c4 10             	add    esp,0x10
c0015f71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f74:	66 3d 03 02          	cmp    ax,0x203
c0015f78:	75 07                	jne    c0015f81 <sendKeyboardToken(KeyboardToken)+0x55>
c0015f7a:	a0 00 e8 02 c0       	mov    al,ds:0xc002e800
c0015f7f:	84 c0                	test   al,al
c0015f81:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015f85:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015f88:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c0015f8d:	38 c2                	cmp    dl,al
c0015f8f:	74 1c                	je     c0015fad <sendKeyboardToken(KeyboardToken)+0x81>
c0015f91:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015f94:	a2 08 eb 02 c0       	mov    ds:0xc002eb08,al
c0015f99:	a0 08 eb 02 c0       	mov    al,ds:0xc002eb08
c0015f9e:	0f b6 c0             	movzx  eax,al
c0015fa1:	83 ec 0c             	sub    esp,0xc
c0015fa4:	50                   	push   eax
c0015fa5:	e8 04 a6 ff ff       	call   c00105ae <setTerminalScrollLock(bool)>
c0015faa:	83 c4 10             	add    esp,0x10
c0015fad:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015fb0:	84 c0                	test   al,al
c0015fb2:	0f 84 ae 00 00 00    	je     c0016066 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015fb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fbb:	66 3d 10 03          	cmp    ax,0x310
c0015fbf:	75 06                	jne    c0015fc7 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015fc1:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015fc7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fca:	66 3d 11 03          	cmp    ax,0x311
c0015fce:	75 06                	jne    c0015fd6 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015fd0:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd9:	66 3d 12 03          	cmp    ax,0x312
c0015fdd:	75 06                	jne    c0015fe5 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015fdf:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe8:	66 3d 13 03          	cmp    ax,0x313
c0015fec:	75 06                	jne    c0015ff4 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015fee:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015ff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ff7:	66 3d 14 03          	cmp    ax,0x314
c0015ffb:	75 06                	jne    c0016003 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015ffd:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0016003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016006:	66 3d 15 03          	cmp    ax,0x315
c001600a:	75 06                	jne    c0016012 <sendKeyboardToken(KeyboardToken)+0xe6>
c001600c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0016012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016015:	66 3d 16 03          	cmp    ax,0x316
c0016019:	75 06                	jne    c0016021 <sendKeyboardToken(KeyboardToken)+0xf5>
c001601b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0016021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016024:	66 3d 17 03          	cmp    ax,0x317
c0016028:	75 06                	jne    c0016030 <sendKeyboardToken(KeyboardToken)+0x104>
c001602a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0016030:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016033:	66 3d 18 03          	cmp    ax,0x318
c0016037:	75 06                	jne    c001603f <sendKeyboardToken(KeyboardToken)+0x113>
c0016039:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c001603f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016042:	66 3d 19 03          	cmp    ax,0x319
c0016046:	75 06                	jne    c001604e <sendKeyboardToken(KeyboardToken)+0x122>
c0016048:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c001604e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016051:	66 3d 1a 03          	cmp    ax,0x31a
c0016055:	0f 85 c9 00 00 00    	jne    c0016124 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001605b:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0016061:	e9 be 00 00 00       	jmp    c0016124 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016069:	66 3d 10 03          	cmp    ax,0x310
c001606d:	75 0a                	jne    c0016079 <sendKeyboardToken(KeyboardToken)+0x14d>
c001606f:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0016075:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001607c:	66 3d 11 03          	cmp    ax,0x311
c0016080:	75 0a                	jne    c001608c <sendKeyboardToken(KeyboardToken)+0x160>
c0016082:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0016088:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001608c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001608f:	66 3d 12 03          	cmp    ax,0x312
c0016093:	75 0a                	jne    c001609f <sendKeyboardToken(KeyboardToken)+0x173>
c0016095:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c001609b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001609f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160a2:	66 3d 13 03          	cmp    ax,0x313
c00160a6:	75 0a                	jne    c00160b2 <sendKeyboardToken(KeyboardToken)+0x186>
c00160a8:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c00160ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b5:	66 3d 14 03          	cmp    ax,0x314
c00160b9:	75 0a                	jne    c00160c5 <sendKeyboardToken(KeyboardToken)+0x199>
c00160bb:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c00160c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160c8:	66 3d 15 03          	cmp    ax,0x315
c00160cc:	75 0a                	jne    c00160d8 <sendKeyboardToken(KeyboardToken)+0x1ac>
c00160ce:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c00160d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160db:	66 3d 16 03          	cmp    ax,0x316
c00160df:	75 0a                	jne    c00160eb <sendKeyboardToken(KeyboardToken)+0x1bf>
c00160e1:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c00160e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160ee:	66 3d 17 03          	cmp    ax,0x317
c00160f2:	75 0a                	jne    c00160fe <sendKeyboardToken(KeyboardToken)+0x1d2>
c00160f4:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c00160fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c00160fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016101:	66 3d 18 03          	cmp    ax,0x318
c0016105:	75 0a                	jne    c0016111 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016107:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c001610d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016114:	66 3d 19 03          	cmp    ax,0x319
c0016118:	75 0a                	jne    c0016124 <sendKeyboardToken(KeyboardToken)+0x1f8>
c001611a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0016120:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016124:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016127:	66 3d 00 02          	cmp    ax,0x200
c001612b:	75 2c                	jne    c0016159 <sendKeyboardToken(KeyboardToken)+0x22d>
c001612d:	a0 00 eb 02 c0       	mov    al,ds:0xc002eb00
c0016132:	83 f0 01             	xor    eax,0x1
c0016135:	84 c0                	test   al,al
c0016137:	74 20                	je     c0016159 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016139:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001613e:	6a 01                	push   0x1
c0016140:	6a 00                	push   0x0
c0016142:	68 08 5e 01 c0       	push   0xc0015e08
c0016147:	50                   	push   eax
c0016148:	e8 77 7e 00 00       	call   c001dfc4 <Process::createThread(void (*)(void*), void*, int)>
c001614d:	83 c4 10             	add    esp,0x10
c0016150:	c6 05 00 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb00,0x1
c0016157:	eb 33                	jmp    c001618c <sendKeyboardToken(KeyboardToken)+0x260>
c0016159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001615c:	66 3d 01 02          	cmp    ax,0x201
c0016160:	75 2a                	jne    c001618c <sendKeyboardToken(KeyboardToken)+0x260>
c0016162:	a0 00 eb 02 c0       	mov    al,ds:0xc002eb00
c0016167:	83 f0 01             	xor    eax,0x1
c001616a:	84 c0                	test   al,al
c001616c:	74 1e                	je     c001618c <sendKeyboardToken(KeyboardToken)+0x260>
c001616e:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0016173:	6a 01                	push   0x1
c0016175:	6a 00                	push   0x0
c0016177:	68 64 5e 01 c0       	push   0xc0015e64
c001617c:	50                   	push   eax
c001617d:	e8 42 7e 00 00       	call   c001dfc4 <Process::createThread(void (*)(void*), void*, int)>
c0016182:	83 c4 10             	add    esp,0x10
c0016185:	c6 05 00 eb 02 c0 01 	mov    BYTE PTR ds:0xc002eb00,0x1
c001618c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001618f:	66 3d 1d 03          	cmp    ax,0x31d
c0016193:	75 06                	jne    c001619b <sendKeyboardToken(KeyboardToken)+0x26f>
c0016195:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c001619b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001619e:	66 3d 1c 03          	cmp    ax,0x31c
c00161a2:	75 06                	jne    c00161aa <sendKeyboardToken(KeyboardToken)+0x27e>
c00161a4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c00161aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161ad:	66 3d 1b 03          	cmp    ax,0x31b
c00161b1:	75 06                	jne    c00161b9 <sendKeyboardToken(KeyboardToken)+0x28d>
c00161b3:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c00161b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161bc:	66 3d 1e 03          	cmp    ax,0x31e
c00161c0:	75 06                	jne    c00161c8 <sendKeyboardToken(KeyboardToken)+0x29c>
c00161c2:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c00161c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161cb:	66 3d 1f 03          	cmp    ax,0x31f
c00161cf:	75 06                	jne    c00161d7 <sendKeyboardToken(KeyboardToken)+0x2ab>
c00161d1:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c00161d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161da:	66 3d 1a 03          	cmp    ax,0x31a
c00161de:	75 06                	jne    c00161e6 <sendKeyboardToken(KeyboardToken)+0x2ba>
c00161e0:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c00161e6:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c00161ea:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00161ed:	83 f0 01             	xor    eax,0x1
c00161f0:	84 c0                	test   al,al
c00161f2:	74 77                	je     c001626b <sendKeyboardToken(KeyboardToken)+0x33f>
c00161f4:	a0 01 e8 02 c0       	mov    al,ds:0xc002e801
c00161f9:	84 c0                	test   al,al
c00161fb:	74 41                	je     c001623e <sendKeyboardToken(KeyboardToken)+0x312>
c00161fd:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016201:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0016205:	74 2b                	je     c0016232 <sendKeyboardToken(KeyboardToken)+0x306>
c0016207:	8b 15 04 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002eb04
c001620d:	89 d0                	mov    eax,edx
c001620f:	c1 e0 02             	shl    eax,0x2
c0016212:	01 d0                	add    eax,edx
c0016214:	01 c0                	add    eax,eax
c0016216:	a3 04 eb 02 c0       	mov    ds:0xc002eb04,eax
c001621b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621e:	0f b7 c0             	movzx  eax,ax
c0016221:	8d 50 d0             	lea    edx,[eax-0x30]
c0016224:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c0016229:	01 d0                	add    eax,edx
c001622b:	a3 04 eb 02 c0       	mov    ds:0xc002eb04,eax
c0016230:	eb 6d                	jmp    c001629f <sendKeyboardToken(KeyboardToken)+0x373>
c0016232:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c001623c:	eb 61                	jmp    c001629f <sendKeyboardToken(KeyboardToken)+0x373>
c001623e:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c0016243:	85 c0                	test   eax,eax
c0016245:	74 18                	je     c001625f <sendKeyboardToken(KeyboardToken)+0x333>
c0016247:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c001624c:	0f b6 c0             	movzx  eax,al
c001624f:	83 ec 0c             	sub    esp,0xc
c0016252:	50                   	push   eax
c0016253:	e8 68 fc ff ff       	call   c0015ec0 <sendKeyToTerminal(unsigned char)>
c0016258:	83 c4 10             	add    esp,0x10
c001625b:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001625f:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c0016269:	eb 34                	jmp    c001629f <sendKeyboardToken(KeyboardToken)+0x373>
c001626b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001626e:	66 3d 01 01          	cmp    ax,0x101
c0016272:	75 2b                	jne    c001629f <sendKeyboardToken(KeyboardToken)+0x373>
c0016274:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c0016279:	85 c0                	test   eax,eax
c001627b:	74 18                	je     c0016295 <sendKeyboardToken(KeyboardToken)+0x369>
c001627d:	a1 04 eb 02 c0       	mov    eax,ds:0xc002eb04
c0016282:	0f b6 c0             	movzx  eax,al
c0016285:	83 ec 0c             	sub    esp,0xc
c0016288:	50                   	push   eax
c0016289:	e8 32 fc ff ff       	call   c0015ec0 <sendKeyToTerminal(unsigned char)>
c001628e:	83 c4 10             	add    esp,0x10
c0016291:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0016295:	c7 05 04 eb 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002eb04,0x0
c001629f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162a2:	83 f0 01             	xor    eax,0x1
c00162a5:	84 c0                	test   al,al
c00162a7:	74 4c                	je     c00162f5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162a9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162ac:	83 f0 01             	xor    eax,0x1
c00162af:	84 c0                	test   al,al
c00162b1:	74 42                	je     c00162f5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162b3:	a0 00 e8 02 c0       	mov    al,ds:0xc002e800
c00162b8:	83 f0 01             	xor    eax,0x1
c00162bb:	84 c0                	test   al,al
c00162bd:	74 36                	je     c00162f5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162c2:	66 83 f8 1f          	cmp    ax,0x1f
c00162c6:	76 09                	jbe    c00162d1 <sendKeyboardToken(KeyboardToken)+0x3a5>
c00162c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162cb:	66 83 f8 7e          	cmp    ax,0x7e
c00162cf:	76 12                	jbe    c00162e3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162d4:	66 83 f8 0a          	cmp    ax,0xa
c00162d8:	74 09                	je     c00162e3 <sendKeyboardToken(KeyboardToken)+0x3b7>
c00162da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162dd:	66 83 f8 08          	cmp    ax,0x8
c00162e1:	75 12                	jne    c00162f5 <sendKeyboardToken(KeyboardToken)+0x3c9>
c00162e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162e6:	0f b6 c0             	movzx  eax,al
c00162e9:	83 ec 0c             	sub    esp,0xc
c00162ec:	50                   	push   eax
c00162ed:	e8 ce fb ff ff       	call   c0015ec0 <sendKeyToTerminal(unsigned char)>
c00162f2:	83 c4 10             	add    esp,0x10
c00162f5:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00162f8:	83 f0 01             	xor    eax,0x1
c00162fb:	84 c0                	test   al,al
c00162fd:	74 4f                	je     c001634e <sendKeyboardToken(KeyboardToken)+0x422>
c00162ff:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016302:	83 f0 01             	xor    eax,0x1
c0016305:	84 c0                	test   al,al
c0016307:	74 45                	je     c001634e <sendKeyboardToken(KeyboardToken)+0x422>
c0016309:	a0 00 e8 02 c0       	mov    al,ds:0xc002e800
c001630e:	84 c0                	test   al,al
c0016310:	74 3c                	je     c001634e <sendKeyboardToken(KeyboardToken)+0x422>
c0016312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016315:	66 83 f8 3f          	cmp    ax,0x3f
c0016319:	76 33                	jbe    c001634e <sendKeyboardToken(KeyboardToken)+0x422>
c001631b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001631e:	66 83 f8 7f          	cmp    ax,0x7f
c0016322:	77 2a                	ja     c001634e <sendKeyboardToken(KeyboardToken)+0x422>
c0016324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016327:	88 c2                	mov    dl,al
c0016329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001632c:	66 83 f8 5f          	cmp    ax,0x5f
c0016330:	76 04                	jbe    c0016336 <sendKeyboardToken(KeyboardToken)+0x40a>
c0016332:	b0 20                	mov    al,0x20
c0016334:	eb 02                	jmp    c0016338 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016336:	b0 00                	mov    al,0x0
c0016338:	29 c2                	sub    edx,eax
c001633a:	88 d0                	mov    al,dl
c001633c:	83 e8 40             	sub    eax,0x40
c001633f:	0f b6 c0             	movzx  eax,al
c0016342:	83 ec 0c             	sub    esp,0xc
c0016345:	50                   	push   eax
c0016346:	e8 75 fb ff ff       	call   c0015ec0 <sendKeyToTerminal(unsigned char)>
c001634b:	83 c4 10             	add    esp,0x10
c001634e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016351:	66 3d 00 03          	cmp    ax,0x300
c0016355:	75 0f                	jne    c0016366 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016357:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001635a:	83 f0 01             	xor    eax,0x1
c001635d:	84 c0                	test   al,al
c001635f:	74 05                	je     c0016366 <sendKeyboardToken(KeyboardToken)+0x43a>
c0016361:	e8 7d aa ff ff       	call   c0010de3 <doTerminalCycle()>
c0016366:	90                   	nop
c0016367:	c9                   	leave  
c0016368:	c3                   	ret    

c0016369 <clearInternalKeybuffer(VgaText*)>:
c0016369:	55                   	push   ebp
c001636a:	89 e5                	mov    ebp,esp
c001636c:	83 ec 08             	sub    esp,0x8
c001636f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016372:	05 34 11 00 00       	add    eax,0x1134
c0016377:	83 ec 0c             	sub    esp,0xc
c001637a:	50                   	push   eax
c001637b:	e8 14 a4 fe ff       	call   c0000794 <strlen>
c0016380:	83 c4 10             	add    esp,0x10
c0016383:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016386:	81 c2 34 11 00 00    	add    edx,0x1134
c001638c:	83 ec 04             	sub    esp,0x4
c001638f:	50                   	push   eax
c0016390:	6a 00                	push   0x0
c0016392:	52                   	push   edx
c0016393:	e8 e0 a3 fe ff       	call   c0000778 <memset>
c0016398:	83 c4 10             	add    esp,0x10
c001639b:	90                   	nop
c001639c:	c9                   	leave  
c001639d:	c3                   	ret    

c001639e <readKeyboard(VgaText*, char*, unsigned long)>:
c001639e:	55                   	push   ebp
c001639f:	89 e5                	mov    ebp,esp
c00163a1:	83 ec 18             	sub    esp,0x18
c00163a4:	fb                   	sti    
c00163a5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c00163ac:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c00163b0:	0f 84 8a 00 00 00    	je     c0016440 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c00163b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163b9:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163bf:	84 c0                	test   al,al
c00163c1:	75 11                	jne    c00163d4 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c00163c3:	e8 ca 7a 00 00       	call   c001de92 <lockScheduler()>
c00163c8:	e8 01 7e 00 00       	call   c001e1ce <schedule()>
c00163cd:	e8 c2 7a 00 00       	call   c001de94 <unlockScheduler()>
c00163d2:	eb e2                	jmp    c00163b6 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c00163d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00163d7:	8d 50 01             	lea    edx,[eax+0x1]
c00163da:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00163dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163e0:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c00163e6:	88 10                	mov    BYTE PTR [eax],dl
c00163e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163eb:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c00163f1:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163f7:	05 34 11 00 00       	add    eax,0x1134
c00163fc:	83 ec 0c             	sub    esp,0xc
c00163ff:	50                   	push   eax
c0016400:	e8 8f a3 fe ff       	call   c0000794 <strlen>
c0016405:	83 c4 10             	add    esp,0x10
c0016408:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001640b:	81 c2 34 11 00 00    	add    edx,0x1134
c0016411:	8d 4a 01             	lea    ecx,[edx+0x1]
c0016414:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016417:	81 c2 34 11 00 00    	add    edx,0x1134
c001641d:	83 ec 04             	sub    esp,0x4
c0016420:	50                   	push   eax
c0016421:	51                   	push   ecx
c0016422:	52                   	push   edx
c0016423:	e8 54 a2 fe ff       	call   c000067c <memmove>
c0016428:	83 c4 10             	add    esp,0x10
c001642b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c001642e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0016431:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0016435:	0f 85 71 ff ff ff    	jne    c00163ac <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c001643b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001643e:	eb 03                	jmp    c0016443 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0016440:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0016443:	c9                   	leave  
c0016444:	c3                   	ret    
c0016445:	90                   	nop

c0016446 <Keyboard::Keyboard(char const*)>:
c0016446:	83 ec 0c             	sub    esp,0xc
c0016449:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001644d:	83 ec 08             	sub    esp,0x8
c0016450:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016454:	50                   	push   eax
c0016455:	e8 ac e1 ff ff       	call   c0014606 <Device::Device(char const*)>
c001645a:	83 c4 10             	add    esp,0x10
c001645d:	ba a4 b2 02 c0       	mov    edx,0xc002b2a4
c0016462:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016466:	89 10                	mov    DWORD PTR [eax],edx
c0016468:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001646c:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0016476:	c6 05 e4 e6 02 c0 01 	mov    BYTE PTR ds:0xc002e6e4,0x1
c001647d:	90                   	nop
c001647e:	83 c4 0c             	add    esp,0xc
c0016481:	c3                   	ret    

c0016482 <Keyboard::~Keyboard()>:
c0016482:	83 ec 0c             	sub    esp,0xc
c0016485:	ba a4 b2 02 c0       	mov    edx,0xc002b2a4
c001648a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001648e:	89 10                	mov    DWORD PTR [eax],edx
c0016490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016494:	83 ec 0c             	sub    esp,0xc
c0016497:	50                   	push   eax
c0016498:	e8 4b de ff ff       	call   c00142e8 <Device::~Device()>
c001649d:	83 c4 10             	add    esp,0x10
c00164a0:	90                   	nop
c00164a1:	83 c4 0c             	add    esp,0xc
c00164a4:	c3                   	ret    
c00164a5:	90                   	nop

c00164a6 <Keyboard::~Keyboard()>:
c00164a6:	83 ec 0c             	sub    esp,0xc
c00164a9:	83 ec 0c             	sub    esp,0xc
c00164ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b0:	e8 cd ff ff ff       	call   c0016482 <Keyboard::~Keyboard()>
c00164b5:	83 c4 10             	add    esp,0x10
c00164b8:	83 ec 08             	sub    esp,0x8
c00164bb:	68 5c 01 00 00       	push   0x15c
c00164c0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164c4:	e8 46 ca ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c00164c9:	83 c4 10             	add    esp,0x10
c00164cc:	83 c4 0c             	add    esp,0xc
c00164cf:	c3                   	ret    

c00164d0 <LogicalDisk::close(int, int, void*)>:
c00164d0:	83 c8 ff             	or     eax,0xffffffff
c00164d3:	c3                   	ret    

c00164d4 <LogicalDisk::~LogicalDisk()>:
c00164d4:	83 ec 0c             	sub    esp,0xc
c00164d7:	ba 54 b3 02 c0       	mov    edx,0xc002b354
c00164dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e0:	89 10                	mov    DWORD PTR [eax],edx
c00164e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00164e6:	83 ec 0c             	sub    esp,0xc
c00164e9:	50                   	push   eax
c00164ea:	e8 f9 dd ff ff       	call   c00142e8 <Device::~Device()>
c00164ef:	83 c4 10             	add    esp,0x10
c00164f2:	90                   	nop
c00164f3:	83 c4 0c             	add    esp,0xc
c00164f6:	c3                   	ret    
c00164f7:	90                   	nop

c00164f8 <LogicalDisk::~LogicalDisk()>:
c00164f8:	83 ec 0c             	sub    esp,0xc
c00164fb:	83 ec 0c             	sub    esp,0xc
c00164fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016502:	e8 cd ff ff ff       	call   c00164d4 <LogicalDisk::~LogicalDisk()>
c0016507:	83 c4 10             	add    esp,0x10
c001650a:	83 ec 08             	sub    esp,0x8
c001650d:	68 74 01 00 00       	push   0x174
c0016512:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016516:	e8 f4 c9 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c001651b:	83 c4 10             	add    esp,0x10
c001651e:	83 c4 0c             	add    esp,0xc
c0016521:	c3                   	ret    

c0016522 <LogicalDisk::open(int, int, void*)>:
c0016522:	83 ec 18             	sub    esp,0x18
c0016525:	68 d0 b2 02 c0       	push   0xc002b2d0
c001652a:	e8 6e 41 00 00       	call   c001a69d <Krnl::panic(char const*)>
c001652f:	83 c8 ff             	or     eax,0xffffffff
c0016532:	83 c4 1c             	add    esp,0x1c
c0016535:	c3                   	ret    

c0016536 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016536:	53                   	push   ebx
c0016537:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001653b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001653f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016543:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016549:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001654f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016555:	77 10                	ja     c0016567 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c0016557:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c001655d:	89 d3                	mov    ebx,edx
c001655f:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016565:	72 05                	jb     c001656c <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c0016567:	83 c8 ff             	or     eax,0xffffffff
c001656a:	89 c2                	mov    edx,eax
c001656c:	5b                   	pop    ebx
c001656d:	c3                   	ret    

c001656e <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c001656e:	56                   	push   esi
c001656f:	83 c8 ff             	or     eax,0xffffffff
c0016572:	53                   	push   ebx
c0016573:	89 c2                	mov    edx,eax
c0016575:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0016579:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001657d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016581:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016587:	77 27                	ja     c00165b0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016589:	89 d8                	mov    eax,ebx
c001658b:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016591:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c0016597:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001659c:	89 c2                	mov    edx,eax
c001659e:	73 10                	jae    c00165b0 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00165a0:	89 c8                	mov    eax,ecx
c00165a2:	89 da                	mov    edx,ebx
c00165a4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00165aa:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c00165b0:	5b                   	pop    ebx
c00165b1:	5e                   	pop    esi
c00165b2:	c3                   	ret    
c00165b3:	90                   	nop

c00165b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c00165b4:	83 ec 1c             	sub    esp,0x1c
c00165b7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00165bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00165bf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00165c3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00165c7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00165cb:	89 04 24             	mov    DWORD PTR [esp],eax
c00165ce:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00165d2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00165d6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165da:	83 ec 08             	sub    esp,0x8
c00165dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00165e1:	50                   	push   eax
c00165e2:	e8 1f e0 ff ff       	call   c0014606 <Device::Device(char const*)>
c00165e7:	83 c4 10             	add    esp,0x10
c00165ea:	ba 54 b3 02 c0       	mov    edx,0xc002b354
c00165ef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f3:	89 10                	mov    DWORD PTR [eax],edx
c00165f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165f9:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016600:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016604:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001660b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001660f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016619:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001661d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016621:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016625:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001662b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016631:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016635:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016638:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001663c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016642:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016648:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001664c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016650:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c0016656:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001665a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016664:	90                   	nop
c0016665:	83 c4 1c             	add    esp,0x1c
c0016668:	c3                   	ret    
c0016669:	90                   	nop

c001666a <LogicalDisk::assignDriveLetter()>:
c001666a:	55                   	push   ebp
c001666b:	57                   	push   edi
c001666c:	56                   	push   esi
c001666d:	53                   	push   ebx
c001666e:	83 ec 14             	sub    esp,0x14
c0016671:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016675:	8b 3d 20 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb20
c001667b:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016681:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016685:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001668b:	8b 3d 24 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002eb24
c0016691:	3c 01                	cmp    al,0x1
c0016693:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0016697:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001669b:	19 c0                	sbb    eax,eax
c001669d:	83 e0 02             	and    eax,0x2
c00166a0:	83 c0 41             	add    eax,0x41
c00166a3:	0f be e8             	movsx  ebp,al
c00166a6:	3c 43                	cmp    al,0x43
c00166a8:	75 10                	jne    c00166ba <LogicalDisk::assignDriveLetter()+0x50>
c00166aa:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c00166b1:	75 5d                	jne    c0016710 <LogicalDisk::assignDriveLetter()+0xa6>
c00166b3:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c00166b8:	75 56                	jne    c0016710 <LogicalDisk::assignDriveLetter()+0xa6>
c00166ba:	8d 75 bf             	lea    esi,[ebp-0x41]
c00166bd:	ba 01 00 00 00       	mov    edx,0x1
c00166c2:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00166c6:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00166ca:	d3 e2                	shl    edx,cl
c00166cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00166d0:	89 d7                	mov    edi,edx
c00166d2:	89 d6                	mov    esi,edx
c00166d4:	c1 ff 1f             	sar    edi,0x1f
c00166d7:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c00166db:	21 f9                	and    ecx,edi
c00166dd:	09 d1                	or     ecx,edx
c00166df:	75 2f                	jne    c0016710 <LogicalDisk::assignDriveLetter()+0xa6>
c00166e1:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c00166e5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00166e9:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166ef:	09 f2                	or     edx,esi
c00166f1:	89 15 20 eb 02 c0    	mov    DWORD PTR ds:0xc002eb20,edx
c00166f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166fb:	09 fa                	or     edx,edi
c00166fd:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016701:	89 15 24 eb 02 c0    	mov    DWORD PTR ds:0xc002eb24,edx
c0016707:	89 1c bd 40 eb 02 c0 	mov    DWORD PTR [edi*4-0x3ffd14c0],ebx
c001670e:	eb 08                	jmp    c0016718 <LogicalDisk::assignDriveLetter()+0xae>
c0016710:	45                   	inc    ebp
c0016711:	40                   	inc    eax
c0016712:	3c 5b                	cmp    al,0x5b
c0016714:	75 90                	jne    c00166a6 <LogicalDisk::assignDriveLetter()+0x3c>
c0016716:	31 c0                	xor    eax,eax
c0016718:	83 c4 14             	add    esp,0x14
c001671b:	5b                   	pop    ebx
c001671c:	5e                   	pop    esi
c001671d:	5f                   	pop    edi
c001671e:	5d                   	pop    ebp
c001671f:	c3                   	ret    

c0016720 <LogicalDisk::mount()>:
c0016720:	56                   	push   esi
c0016721:	53                   	push   ebx
c0016722:	51                   	push   ecx
c0016723:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016727:	8b 1d b0 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6b0
c001672d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016737:	85 db                	test   ebx,ebx
c0016739:	74 50                	je     c001678b <LogicalDisk::mount()+0x6b>
c001673b:	e8 3d 77 00 00       	call   c001de7d <getIRQNestingLevel()>
c0016740:	52                   	push   edx
c0016741:	52                   	push   edx
c0016742:	50                   	push   eax
c0016743:	68 f4 b2 02 c0       	push   0xc002b2f4
c0016748:	e8 a2 c8 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001674d:	83 c4 0c             	add    esp,0xc
c0016750:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c0016757:	8b 13                	mov    edx,DWORD PTR [ebx]
c0016759:	83 e8 41             	sub    eax,0x41
c001675c:	50                   	push   eax
c001675d:	56                   	push   esi
c001675e:	53                   	push   ebx
c001675f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016762:	83 c4 10             	add    esp,0x10
c0016765:	84 c0                	test   al,al
c0016767:	74 08                	je     c0016771 <LogicalDisk::mount()+0x51>
c0016769:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c001676f:	eb 1c                	jmp    c001678d <LogicalDisk::mount()+0x6d>
c0016771:	e8 07 77 00 00       	call   c001de7d <getIRQNestingLevel()>
c0016776:	51                   	push   ecx
c0016777:	51                   	push   ecx
c0016778:	50                   	push   eax
c0016779:	68 0f b3 02 c0       	push   0xc002b30f
c001677e:	e8 6c c8 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0016783:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0016786:	83 c4 10             	add    esp,0x10
c0016789:	eb ac                	jmp    c0016737 <LogicalDisk::mount()+0x17>
c001678b:	31 c0                	xor    eax,eax
c001678d:	5a                   	pop    edx
c001678e:	5b                   	pop    ebx
c001678f:	5e                   	pop    esi
c0016790:	c3                   	ret    
c0016791:	90                   	nop

c0016792 <LogicalDisk::unmount()>:
c0016792:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016796:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00167a0:	c3                   	ret    
c00167a1:	90                   	nop

c00167a2 <LogicalDisk::eject()>:
c00167a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00167a6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00167ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00167ae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00167b2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c00167b5:	90                   	nop

c00167b6 <LogicalDisk::unassignDriveLetter()>:
c00167b6:	57                   	push   edi
c00167b7:	56                   	push   esi
c00167b8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167bc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c00167c3:	84 c9                	test   cl,cl
c00167c5:	75 0f                	jne    c00167d6 <LogicalDisk::unassignDriveLetter()+0x20>
c00167c7:	c7 44 24 0c 2a b3 02 c0 	mov    DWORD PTR [esp+0xc],0xc002b32a
c00167cf:	5e                   	pop    esi
c00167d0:	5f                   	pop    edi
c00167d1:	e9 c7 3e 00 00       	jmp    c001a69d <Krnl::panic(char const*)>
c00167d6:	83 e9 41             	sub    ecx,0x41
c00167d9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c00167e0:	b8 01 00 00 00       	mov    eax,0x1
c00167e5:	c7 04 8d 40 eb 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd14c0],0x0
c00167f0:	d3 e0                	shl    eax,cl
c00167f2:	89 c7                	mov    edi,eax
c00167f4:	f7 d0                	not    eax
c00167f6:	c1 ff 1f             	sar    edi,0x1f
c00167f9:	21 05 20 eb 02 c0    	and    DWORD PTR ds:0xc002eb20,eax
c00167ff:	89 fe                	mov    esi,edi
c0016801:	f7 d6                	not    esi
c0016803:	21 35 24 eb 02 c0    	and    DWORD PTR ds:0xc002eb24,esi
c0016809:	5e                   	pop    esi
c001680a:	5f                   	pop    edi
c001680b:	c3                   	ret    

c001680c <LogicalDisk::read(unsigned long long, int, void*)>:
c001680c:	57                   	push   edi
c001680d:	56                   	push   esi
c001680e:	53                   	push   ebx
c001680f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016813:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016817:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001681b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001681f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016825:	77 41                	ja     c0016868 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016827:	99                   	cdq    
c0016828:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001682e:	01 c8                	add    eax,ecx
c0016830:	11 da                	adc    edx,ebx
c0016832:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016838:	19 d7                	sbb    edi,edx
c001683a:	72 33                	jb     c001686f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001683c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016842:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016848:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001684c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016850:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016856:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001685c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016860:	5b                   	pop    ebx
c0016861:	5e                   	pop    esi
c0016862:	5f                   	pop    edi
c0016863:	e9 b0 0a 00 00       	jmp    c0017318 <VCache::read(unsigned long long, int, void*)>
c0016868:	b8 05 00 00 00       	mov    eax,0x5
c001686d:	eb 05                	jmp    c0016874 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c001686f:	b8 07 00 00 00       	mov    eax,0x7
c0016874:	5b                   	pop    ebx
c0016875:	5e                   	pop    esi
c0016876:	5f                   	pop    edi
c0016877:	c3                   	ret    

c0016878 <LogicalDisk::write(unsigned long long, int, void*)>:
c0016878:	57                   	push   edi
c0016879:	56                   	push   esi
c001687a:	53                   	push   ebx
c001687b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001687f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016883:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0016887:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001688b:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016891:	77 41                	ja     c00168d4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016893:	99                   	cdq    
c0016894:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001689a:	01 c8                	add    eax,ecx
c001689c:	11 da                	adc    edx,ebx
c001689e:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00168a4:	19 d7                	sbb    edi,edx
c00168a6:	72 33                	jb     c00168db <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00168a8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00168ae:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00168b4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00168b8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00168bc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00168c2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00168c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00168cc:	5b                   	pop    ebx
c00168cd:	5e                   	pop    esi
c00168ce:	5f                   	pop    edi
c00168cf:	e9 4e 09 00 00       	jmp    c0017222 <VCache::write(unsigned long long, int, void*)>
c00168d4:	b8 05 00 00 00       	mov    eax,0x5
c00168d9:	eb 05                	jmp    c00168e0 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c00168db:	b8 07 00 00 00       	mov    eax,0x7
c00168e0:	5b                   	pop    ebx
c00168e1:	5e                   	pop    esi
c00168e2:	5f                   	pop    edi
c00168e3:	c3                   	ret    

c00168e4 <Mouse::Mouse(char const*)>:
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168eb:	83 ec 08             	sub    esp,0x8
c00168ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168f2:	50                   	push   eax
c00168f3:	e8 0e dd ff ff       	call   c0014606 <Device::Device(char const*)>
c00168f8:	83 c4 10             	add    esp,0x10
c00168fb:	ba 80 b3 02 c0       	mov    edx,0xc002b380
c0016900:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016904:	89 10                	mov    DWORD PTR [eax],edx
c0016906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001690a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016914:	90                   	nop
c0016915:	83 c4 0c             	add    esp,0xc
c0016918:	c3                   	ret    
c0016919:	90                   	nop

c001691a <Mouse::~Mouse()>:
c001691a:	83 ec 0c             	sub    esp,0xc
c001691d:	ba 80 b3 02 c0       	mov    edx,0xc002b380
c0016922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016926:	89 10                	mov    DWORD PTR [eax],edx
c0016928:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001692c:	83 ec 0c             	sub    esp,0xc
c001692f:	50                   	push   eax
c0016930:	e8 b3 d9 ff ff       	call   c00142e8 <Device::~Device()>
c0016935:	83 c4 10             	add    esp,0x10
c0016938:	90                   	nop
c0016939:	83 c4 0c             	add    esp,0xc
c001693c:	c3                   	ret    
c001693d:	90                   	nop

c001693e <Mouse::~Mouse()>:
c001693e:	83 ec 0c             	sub    esp,0xc
c0016941:	83 ec 0c             	sub    esp,0xc
c0016944:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016948:	e8 cd ff ff ff       	call   c001691a <Mouse::~Mouse()>
c001694d:	83 c4 10             	add    esp,0x10
c0016950:	83 ec 08             	sub    esp,0x8
c0016953:	68 58 01 00 00       	push   0x158
c0016958:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001695c:	e8 ae c5 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0016961:	83 c4 10             	add    esp,0x10
c0016964:	83 c4 0c             	add    esp,0xc
c0016967:	c3                   	ret    

c0016968 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016968:	55                   	push   ebp
c0016969:	57                   	push   edi
c001696a:	56                   	push   esi
c001696b:	53                   	push   ebx
c001696c:	81 ec 28 01 00 00    	sub    esp,0x128
c0016972:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0016979:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0016980:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016987:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001698e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016992:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0016996:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c001699d:	e8 60 dd ff ff       	call   c0014702 <Device::getName()>
c00169a2:	5a                   	pop    edx
c00169a3:	59                   	pop    ecx
c00169a4:	50                   	push   eax
c00169a5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00169a9:	55                   	push   ebp
c00169aa:	e8 85 9e fe ff       	call   c0000834 <strcpy>
c00169af:	5b                   	pop    ebx
c00169b0:	58                   	pop    eax
c00169b1:	68 a4 b3 02 c0       	push   0xc002b3a4
c00169b6:	55                   	push   ebp
c00169b7:	e8 b8 9f fe ff       	call   c0000974 <strcat>
c00169bc:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c00169c3:	e8 7b 8e ff ff       	call   c000f843 <malloc>
c00169c8:	83 c4 0c             	add    esp,0xc
c00169cb:	89 c3                	mov    ebx,eax
c00169cd:	57                   	push   edi
c00169ce:	56                   	push   esi
c00169cf:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169d3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00169d7:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169de:	55                   	push   ebp
c00169df:	50                   	push   eax
c00169e0:	e8 cf fb ff ff       	call   c00165b4 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169e5:	83 c4 14             	add    esp,0x14
c00169e8:	53                   	push   ebx
c00169e9:	e8 7c fc ff ff       	call   c001666a <LogicalDisk::assignDriveLetter()>
c00169ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00169f1:	89 c6                	mov    esi,eax
c00169f3:	e8 28 fd ff ff       	call   c0016720 <LogicalDisk::mount()>
c00169f8:	58                   	pop    eax
c00169f9:	5a                   	pop    edx
c00169fa:	53                   	push   ebx
c00169fb:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016a02:	e8 0f da ff ff       	call   c0014416 <Device::addChild(Device*)>
c0016a07:	59                   	pop    ecx
c0016a08:	89 f0                	mov    eax,esi
c0016a0a:	5b                   	pop    ebx
c0016a0b:	0f be f0             	movsx  esi,al
c0016a0e:	56                   	push   esi
c0016a0f:	68 af b3 02 c0       	push   0xc002b3af
c0016a14:	e8 d6 c5 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0016a19:	81 c4 2c 01 00 00    	add    esp,0x12c
c0016a1f:	5b                   	pop    ebx
c0016a20:	5e                   	pop    esi
c0016a21:	5f                   	pop    edi
c0016a22:	5d                   	pop    ebp
c0016a23:	c3                   	ret    

c0016a24 <createPartitionsForDisk(PhysicalDisk*)>:
c0016a24:	55                   	push   ebp
c0016a25:	57                   	push   edi
c0016a26:	56                   	push   esi
c0016a27:	53                   	push   ebx
c0016a28:	81 ec 5c 02 00 00    	sub    esp,0x25c
c0016a2e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016a35:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0016a3b:	3d 00 02 00 00       	cmp    eax,0x200
c0016a40:	74 27                	je     c0016a69 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a42:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a48:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a4e:	83 ec 10             	sub    esp,0x10
c0016a51:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a55:	99                   	cdq    
c0016a56:	c1 e6 0a             	shl    esi,0xa
c0016a59:	52                   	push   edx
c0016a5a:	89 fd                	mov    ebp,edi
c0016a5c:	50                   	push   eax
c0016a5d:	55                   	push   ebp
c0016a5e:	56                   	push   esi
c0016a5f:	e8 08 00 01 00       	call   c0026a6c <__udivdi3>
c0016a64:	e9 b1 00 00 00       	jmp    c0016b1a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a69:	83 ec 0c             	sub    esp,0xc
c0016a6c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a6e:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a72:	56                   	push   esi
c0016a73:	6a 01                	push   0x1
c0016a75:	6a 00                	push   0x0
c0016a77:	6a 00                	push   0x0
c0016a79:	53                   	push   ebx
c0016a7a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a7d:	83 c4 20             	add    esp,0x20
c0016a80:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a88:	75 0a                	jne    c0016a94 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a8a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a92:	74 2c                	je     c0016ac0 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a94:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a9a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016aa0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016aa6:	83 ec 10             	sub    esp,0x10
c0016aa9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016aad:	89 f7                	mov    edi,esi
c0016aaf:	c1 e0 0a             	shl    eax,0xa
c0016ab2:	c1 ff 1f             	sar    edi,0x1f
c0016ab5:	57                   	push   edi
c0016ab6:	56                   	push   esi
c0016ab7:	52                   	push   edx
c0016ab8:	50                   	push   eax
c0016ab9:	e8 ae ff 00 00       	call   c0026a6c <__udivdi3>
c0016abe:	eb 5a                	jmp    c0016b1a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016ac0:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016ac7:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016ace:	83 e1 7f             	and    ecx,0x7f
c0016ad1:	83 e0 7f             	and    eax,0x7f
c0016ad4:	01 c1                	add    ecx,eax
c0016ad6:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016add:	83 e0 7f             	and    eax,0x7f
c0016ae0:	01 c1                	add    ecx,eax
c0016ae2:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016ae9:	83 e0 7f             	and    eax,0x7f
c0016aec:	00 c1                	add    cl,al
c0016aee:	74 41                	je     c0016b31 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016af0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016af6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016afc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016b02:	83 ec 10             	sub    esp,0x10
c0016b05:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016b09:	89 f7                	mov    edi,esi
c0016b0b:	c1 e0 0a             	shl    eax,0xa
c0016b0e:	c1 ff 1f             	sar    edi,0x1f
c0016b11:	57                   	push   edi
c0016b12:	56                   	push   esi
c0016b13:	52                   	push   edx
c0016b14:	50                   	push   eax
c0016b15:	e8 52 ff 00 00       	call   c0026a6c <__udivdi3>
c0016b1a:	83 c4 14             	add    esp,0x14
c0016b1d:	52                   	push   edx
c0016b1e:	50                   	push   eax
c0016b1f:	6a 00                	push   0x0
c0016b21:	6a 00                	push   0x0
c0016b23:	53                   	push   ebx
c0016b24:	e8 3f fe ff ff       	call   c0016968 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016b29:	83 c4 20             	add    esp,0x20
c0016b2c:	e9 79 01 00 00       	jmp    c0016caa <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016b31:	89 f0                	mov    eax,esi
c0016b33:	31 f6                	xor    esi,esi
c0016b35:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016b3c:	75 02                	jne    c0016b40 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016b3e:	89 f1                	mov    ecx,esi
c0016b40:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b47:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b4e:	c1 e2 08             	shl    edx,0x8
c0016b51:	c1 e7 10             	shl    edi,0x10
c0016b54:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b5c:	09 fa                	or     edx,edi
c0016b5e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b66:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b6d:	83 c0 10             	add    eax,0x10
c0016b70:	09 fa                	or     edx,edi
c0016b72:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b79:	c1 e7 18             	shl    edi,0x18
c0016b7c:	09 fa                	or     edx,edi
c0016b7e:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b85:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b89:	c1 e7 10             	shl    edi,0x10
c0016b8c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b93:	c1 e2 08             	shl    edx,0x8
c0016b96:	09 fa                	or     edx,edi
c0016b98:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b9f:	09 fa                	or     edx,edi
c0016ba1:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016ba8:	c1 e7 18             	shl    edi,0x18
c0016bab:	09 fa                	or     edx,edi
c0016bad:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016bb1:	46                   	inc    esi
c0016bb2:	83 fe 04             	cmp    esi,0x4
c0016bb5:	0f 85 7a ff ff ff    	jne    c0016b35 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016bbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bbf:	83 f0 01             	xor    eax,0x1
c0016bc2:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016bc6:	75 57                	jne    c0016c1f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bc8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016bcc:	83 f0 01             	xor    eax,0x1
c0016bcf:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016bd3:	75 4a                	jne    c0016c1f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016bd5:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016bd9:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016be1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016be9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016bef:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bf5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bfb:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bff:	89 f7                	mov    edi,esi
c0016c01:	c1 e0 0a             	shl    eax,0xa
c0016c04:	c1 ff 1f             	sar    edi,0x1f
c0016c07:	57                   	push   edi
c0016c08:	56                   	push   esi
c0016c09:	52                   	push   edx
c0016c0a:	50                   	push   eax
c0016c0b:	e8 5c fe 00 00       	call   c0026a6c <__udivdi3>
c0016c10:	83 c4 10             	add    esp,0x10
c0016c13:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c17:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c1b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016c1f:	84 c9                	test   cl,cl
c0016c21:	74 53                	je     c0016c76 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016c23:	0f b6 c9             	movzx  ecx,cl
c0016c26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c2a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016c2e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016c32:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016c36:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016c3a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016c3e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c42:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c4a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c52:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c56:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c5a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c5e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c62:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c66:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c6a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c6e:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c72:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c76:	31 ed                	xor    ebp,ebp
c0016c78:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c7c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c80:	89 f8                	mov    eax,edi
c0016c82:	09 f0                	or     eax,esi
c0016c84:	74 1e                	je     c0016ca4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c86:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c8a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c8e:	89 d1                	mov    ecx,edx
c0016c90:	09 c1                	or     ecx,eax
c0016c92:	74 10                	je     c0016ca4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c94:	83 ec 0c             	sub    esp,0xc
c0016c97:	57                   	push   edi
c0016c98:	56                   	push   esi
c0016c99:	52                   	push   edx
c0016c9a:	50                   	push   eax
c0016c9b:	53                   	push   ebx
c0016c9c:	e8 c7 fc ff ff       	call   c0016968 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ca1:	83 c4 20             	add    esp,0x20
c0016ca4:	45                   	inc    ebp
c0016ca5:	83 fd 04             	cmp    ebp,0x4
c0016ca8:	75 ce                	jne    c0016c78 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016caa:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016cb0:	5b                   	pop    ebx
c0016cb1:	5e                   	pop    esi
c0016cb2:	5f                   	pop    edi
c0016cb3:	5d                   	pop    ebp
c0016cb4:	c3                   	ret    
c0016cb5:	90                   	nop

c0016cb6 <Serial::Serial(char const*)>:
c0016cb6:	83 ec 0c             	sub    esp,0xc
c0016cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cbd:	83 ec 08             	sub    esp,0x8
c0016cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cc4:	50                   	push   eax
c0016cc5:	e8 3c d9 ff ff       	call   c0014606 <Device::Device(char const*)>
c0016cca:	83 c4 10             	add    esp,0x10
c0016ccd:	ba dc b3 02 c0       	mov    edx,0xc002b3dc
c0016cd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cd6:	89 10                	mov    DWORD PTR [eax],edx
c0016cd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cdc:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016ce6:	90                   	nop
c0016ce7:	83 c4 0c             	add    esp,0xc
c0016cea:	c3                   	ret    
c0016ceb:	90                   	nop

c0016cec <Serial::~Serial()>:
c0016cec:	83 ec 0c             	sub    esp,0xc
c0016cef:	ba dc b3 02 c0       	mov    edx,0xc002b3dc
c0016cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cf8:	89 10                	mov    DWORD PTR [eax],edx
c0016cfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cfe:	83 ec 0c             	sub    esp,0xc
c0016d01:	50                   	push   eax
c0016d02:	e8 e1 d5 ff ff       	call   c00142e8 <Device::~Device()>
c0016d07:	83 c4 10             	add    esp,0x10
c0016d0a:	90                   	nop
c0016d0b:	83 c4 0c             	add    esp,0xc
c0016d0e:	c3                   	ret    
c0016d0f:	90                   	nop

c0016d10 <Serial::~Serial()>:
c0016d10:	83 ec 0c             	sub    esp,0xc
c0016d13:	83 ec 0c             	sub    esp,0xc
c0016d16:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d1a:	e8 cd ff ff ff       	call   c0016cec <Serial::~Serial()>
c0016d1f:	83 c4 10             	add    esp,0x10
c0016d22:	83 ec 08             	sub    esp,0x8
c0016d25:	68 58 01 00 00       	push   0x158
c0016d2a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d2e:	e8 dc c1 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0016d33:	83 c4 10             	add    esp,0x10
c0016d36:	83 c4 0c             	add    esp,0xc
c0016d39:	c3                   	ret    

c0016d3a <Timer::Timer(char const*)>:
c0016d3a:	83 ec 0c             	sub    esp,0xc
c0016d3d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d41:	83 ec 08             	sub    esp,0x8
c0016d44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d48:	50                   	push   eax
c0016d49:	e8 b8 d8 ff ff       	call   c0014606 <Device::Device(char const*)>
c0016d4e:	83 c4 10             	add    esp,0x10
c0016d51:	ba 20 b4 02 c0       	mov    edx,0xc002b420
c0016d56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d5a:	89 10                	mov    DWORD PTR [eax],edx
c0016d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d60:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d6a:	90                   	nop
c0016d6b:	83 c4 0c             	add    esp,0xc
c0016d6e:	c3                   	ret    
c0016d6f:	90                   	nop

c0016d70 <Timer::~Timer()>:
c0016d70:	83 ec 0c             	sub    esp,0xc
c0016d73:	ba 20 b4 02 c0       	mov    edx,0xc002b420
c0016d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d7c:	89 10                	mov    DWORD PTR [eax],edx
c0016d7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d82:	83 ec 0c             	sub    esp,0xc
c0016d85:	50                   	push   eax
c0016d86:	e8 5d d5 ff ff       	call   c00142e8 <Device::~Device()>
c0016d8b:	83 c4 10             	add    esp,0x10
c0016d8e:	90                   	nop
c0016d8f:	83 c4 0c             	add    esp,0xc
c0016d92:	c3                   	ret    
c0016d93:	90                   	nop

c0016d94 <Timer::~Timer()>:
c0016d94:	83 ec 0c             	sub    esp,0xc
c0016d97:	83 ec 0c             	sub    esp,0xc
c0016d9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d9e:	e8 cd ff ff ff       	call   c0016d70 <Timer::~Timer()>
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	83 ec 08             	sub    esp,0x8
c0016da9:	68 5c 01 00 00       	push   0x15c
c0016dae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016db2:	e8 58 c1 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0016db7:	83 c4 10             	add    esp,0x10
c0016dba:	83 c4 0c             	add    esp,0xc
c0016dbd:	c3                   	ret    

c0016dbe <Timer::read()>:
c0016dbe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016dc2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016dc8:	c3                   	ret    

c0016dc9 <timerHandler(unsigned long long)>:
c0016dc9:	55                   	push   ebp
c0016dca:	57                   	push   edi
c0016dcb:	56                   	push   esi
c0016dcc:	53                   	push   ebx
c0016dcd:	83 ec 0c             	sub    esp,0xc
c0016dd0:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016dd4:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016dd8:	01 35 b0 eb 02 c0    	add    DWORD PTR ds:0xc002ebb0,esi
c0016dde:	11 3d b4 eb 02 c0    	adc    DWORD PTR ds:0xc002ebb4,edi
c0016de4:	80 3d 2d e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e52d,0x0
c0016deb:	0f 84 07 01 00 00    	je     c0016ef8 <timerHandler(unsigned long long)+0x12f>
c0016df1:	e8 c3 70 00 00       	call   c001deb9 <lockStuff()>
c0016df6:	83 ec 0c             	sub    esp,0xc
c0016df9:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016dfe:	e8 db 1c 01 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e03:	c7 04 24 7c 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a7c
c0016e0a:	89 c3                	mov    ebx,eax
c0016e0c:	e8 d5 1c 01 00       	call   c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e11:	83 c4 10             	add    esp,0x10
c0016e14:	84 c0                	test   al,al
c0016e16:	74 60                	je     c0016e78 <timerHandler(unsigned long long)+0xaf>
c0016e18:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016e1e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016e21:	85 c0                	test   eax,eax
c0016e23:	0f 85 91 00 00 00    	jne    c0016eba <timerHandler(unsigned long long)+0xf1>
c0016e29:	e9 be 00 00 00       	jmp    c0016eec <timerHandler(unsigned long long)+0x123>
c0016e2e:	83 ec 0c             	sub    esp,0xc
c0016e31:	55                   	push   ebp
c0016e32:	e8 73 76 00 00       	call   c001e4aa <unblockTask(ThreadControlBlock*)>
c0016e37:	83 c4 10             	add    esp,0x10
c0016e3a:	39 eb                	cmp    ebx,ebp
c0016e3c:	75 12                	jne    c0016e50 <timerHandler(unsigned long long)+0x87>
c0016e3e:	83 ec 0c             	sub    esp,0xc
c0016e41:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016e46:	e8 93 1c 01 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e4b:	89 c3                	mov    ebx,eax
c0016e4d:	83 c4 10             	add    esp,0x10
c0016e50:	83 ec 0c             	sub    esp,0xc
c0016e53:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016e58:	e8 89 1c 01 00       	call   c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e5d:	83 c4 10             	add    esp,0x10
c0016e60:	84 c0                	test   al,al
c0016e62:	75 b4                	jne    c0016e18 <timerHandler(unsigned long long)+0x4f>
c0016e64:	83 ec 0c             	sub    esp,0xc
c0016e67:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016e6c:	e8 6d 1c 01 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e71:	83 c4 10             	add    esp,0x10
c0016e74:	39 d8                	cmp    eax,ebx
c0016e76:	74 a0                	je     c0016e18 <timerHandler(unsigned long long)+0x4f>
c0016e78:	83 ec 0c             	sub    esp,0xc
c0016e7b:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016e80:	e8 59 1c 01 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e85:	c7 04 24 7c 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a7c
c0016e8c:	89 c5                	mov    ebp,eax
c0016e8e:	e8 6f 1c 01 00       	call   c0028b02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e93:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e96:	83 c4 10             	add    esp,0x10
c0016e99:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e9c:	39 15 b0 eb 02 c0    	cmp    DWORD PTR ds:0xc002ebb0,edx
c0016ea2:	a1 b4 eb 02 c0       	mov    eax,ds:0xc002ebb4
c0016ea7:	19 c8                	sbb    eax,ecx
c0016ea9:	73 83                	jae    c0016e2e <timerHandler(unsigned long long)+0x65>
c0016eab:	50                   	push   eax
c0016eac:	50                   	push   eax
c0016ead:	55                   	push   ebp
c0016eae:	68 7c 1a 03 c0       	push   0xc0031a7c
c0016eb3:	e8 f8 1c 01 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016eb8:	eb 93                	jmp    c0016e4d <timerHandler(unsigned long long)+0x84>
c0016eba:	80 3d 2c e5 02 c0 00 	cmp    BYTE PTR ds:0xc002e52c,0x0
c0016ec1:	74 29                	je     c0016eec <timerHandler(unsigned long long)+0x123>
c0016ec3:	39 c6                	cmp    esi,eax
c0016ec5:	bb 00 00 00 00       	mov    ebx,0x0
c0016eca:	19 df                	sbb    edi,ebx
c0016ecc:	72 19                	jb     c0016ee7 <timerHandler(unsigned long long)+0x11e>
c0016ece:	e8 bf 6f 00 00       	call   c001de92 <lockScheduler()>
c0016ed3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ed8:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016edb:	e8 ee 72 00 00       	call   c001e1ce <schedule()>
c0016ee0:	e8 af 6f 00 00       	call   c001de94 <unlockScheduler()>
c0016ee5:	eb 05                	jmp    c0016eec <timerHandler(unsigned long long)+0x123>
c0016ee7:	29 f0                	sub    eax,esi
c0016ee9:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016eec:	83 c4 0c             	add    esp,0xc
c0016eef:	5b                   	pop    ebx
c0016ef0:	5e                   	pop    esi
c0016ef1:	5f                   	pop    edi
c0016ef2:	5d                   	pop    ebp
c0016ef3:	e9 5b 73 00 00       	jmp    c001e253 <unlockStuff()>
c0016ef8:	83 c4 0c             	add    esp,0xc
c0016efb:	5b                   	pop    ebx
c0016efc:	5e                   	pop    esi
c0016efd:	5f                   	pop    edi
c0016efe:	5d                   	pop    ebp
c0016eff:	c3                   	ret    

c0016f00 <setupTimer(int)>:
c0016f00:	57                   	push   edi
c0016f01:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0016f06:	56                   	push   esi
c0016f07:	53                   	push   ebx
c0016f08:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f0c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f12:	83 ec 0c             	sub    esp,0xc
c0016f15:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f1b:	e8 e2 d7 ff ff       	call   c0014702 <Device::getName()>
c0016f20:	83 c4 10             	add    esp,0x10
c0016f23:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f26:	0f 85 8d 00 00 00    	jne    c0016fb9 <setupTimer(int)+0xb9>
c0016f2c:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0016f31:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f38:	74 7f                	je     c0016fb9 <setupTimer(int)+0xb9>
c0016f3a:	83 ec 0c             	sub    esp,0xc
c0016f3d:	68 5c 01 00 00       	push   0x15c
c0016f42:	e8 fc 88 ff ff       	call   c000f843 <malloc>
c0016f47:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f4a:	89 c3                	mov    ebx,eax
c0016f4c:	e8 fb f6 00 00       	call   c002664c <PIT::PIT()>
c0016f51:	59                   	pop    ecx
c0016f52:	5f                   	pop    edi
c0016f53:	53                   	push   ebx
c0016f54:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c0016f5a:	e8 b7 d4 ff ff       	call   c0014416 <Device::addChild(Device*)>
c0016f5f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f61:	6a 00                	push   0x0
c0016f63:	6a 00                	push   0x0
c0016f65:	56                   	push   esi
c0016f66:	53                   	push   ebx
c0016f67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f6a:	83 c4 14             	add    esp,0x14
c0016f6d:	68 60 01 00 00       	push   0x160
c0016f72:	e8 cc 88 ff ff       	call   c000f843 <malloc>
c0016f77:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f7a:	89 c7                	mov    edi,eax
c0016f7c:	e8 7b f5 00 00       	call   c00264fc <APICTimer::APICTimer()>
c0016f81:	6a 00                	push   0x0
c0016f83:	6a 00                	push   0x0
c0016f85:	56                   	push   esi
c0016f86:	57                   	push   edi
c0016f87:	e8 72 f4 00 00       	call   c00263fe <APICTimer::open(int, int, void*)>
c0016f8c:	83 c4 20             	add    esp,0x20
c0016f8f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f91:	6a 00                	push   0x0
c0016f93:	6a 00                	push   0x0
c0016f95:	6a 00                	push   0x0
c0016f97:	53                   	push   ebx
c0016f98:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f9b:	58                   	pop    eax
c0016f9c:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0016fa1:	5a                   	pop    edx
c0016fa2:	57                   	push   edi
c0016fa3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fa9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016faf:	e8 62 d4 ff ff       	call   c0014416 <Device::addChild(Device*)>
c0016fb4:	83 c4 10             	add    esp,0x10
c0016fb7:	eb 33                	jmp    c0016fec <setupTimer(int)+0xec>
c0016fb9:	83 ec 0c             	sub    esp,0xc
c0016fbc:	68 5c 01 00 00       	push   0x15c
c0016fc1:	e8 7d 88 ff ff       	call   c000f843 <malloc>
c0016fc6:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fc9:	89 c3                	mov    ebx,eax
c0016fcb:	e8 7c f6 00 00       	call   c002664c <PIT::PIT()>
c0016fd0:	58                   	pop    eax
c0016fd1:	5a                   	pop    edx
c0016fd2:	53                   	push   ebx
c0016fd3:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c0016fd9:	e8 38 d4 ff ff       	call   c0014416 <Device::addChild(Device*)>
c0016fde:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fe0:	6a 00                	push   0x0
c0016fe2:	6a 00                	push   0x0
c0016fe4:	56                   	push   esi
c0016fe5:	53                   	push   ebx
c0016fe6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fe9:	83 c4 20             	add    esp,0x20
c0016fec:	89 d8                	mov    eax,ebx
c0016fee:	5b                   	pop    ebx
c0016fef:	5e                   	pop    esi
c0016ff0:	5f                   	pop    edi
c0016ff1:	c3                   	ret    

c0016ff2 <VCache::VCache(PhysicalDisk*)>:
c0016ff2:	53                   	push   ebx
c0016ff3:	83 ec 18             	sub    esp,0x18
c0016ff6:	ba 50 b4 02 c0       	mov    edx,0xc002b450
c0016ffb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016fff:	89 10                	mov    DWORD PTR [eax],edx
c0017001:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017005:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c001700c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017010:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017017:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001701b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0017022:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017029:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001702d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017034:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001703b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017046:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001704e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017052:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017059:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0017060:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017064:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017068:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001706c:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0017070:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017074:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017078:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001707c:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017083:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c001708b:	83 ec 0c             	sub    esp,0xc
c001708e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017092:	e8 ac 87 ff ff       	call   c000f843 <malloc>
c0017097:	83 c4 10             	add    esp,0x10
c001709a:	89 c3                	mov    ebx,eax
c001709c:	83 ec 0c             	sub    esp,0xc
c001709f:	53                   	push   ebx
c00170a0:	e8 0d 6f 00 00       	call   c001dfb2 <Mutex::Mutex()>
c00170a5:	83 c4 10             	add    esp,0x10
c00170a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ac:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170b3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170b7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170be:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170c5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170c9:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170cf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170d3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170d6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170da:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170ea:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170ed:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f4:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170fc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017102:	05 00 01 00 00       	add    eax,0x100
c0017107:	c1 e0 04             	shl    eax,0x4
c001710a:	83 ec 0c             	sub    esp,0xc
c001710d:	50                   	push   eax
c001710e:	e8 30 87 ff ff       	call   c000f843 <malloc>
c0017113:	83 c4 10             	add    esp,0x10
c0017116:	89 c2                	mov    edx,eax
c0017118:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001711f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017123:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001712a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001712e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0017132:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017136:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001713c:	c1 e0 07             	shl    eax,0x7
c001713f:	83 ec 0c             	sub    esp,0xc
c0017142:	50                   	push   eax
c0017143:	e8 fb 86 ff ff       	call   c000f843 <malloc>
c0017148:	83 c4 10             	add    esp,0x10
c001714b:	89 c2                	mov    edx,eax
c001714d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017151:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017154:	90                   	nop
c0017155:	83 c4 18             	add    esp,0x18
c0017158:	5b                   	pop    ebx
c0017159:	c3                   	ret    

c001715a <VCache::invalidateReadBuffer()>:
c001715a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001715e:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017164:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017168:	c3                   	ret    
c0017169:	90                   	nop

c001716a <VCache::writeWriteBuffer()>:
c001716a:	53                   	push   ebx
c001716b:	83 ec 14             	sub    esp,0x14
c001716e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0017172:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017175:	8b 10                	mov    edx,DWORD PTR [eax]
c0017177:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001717a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001717d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0017180:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0017183:	50                   	push   eax
c0017184:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017187:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001718e:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017195:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017199:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c00171a0:	83 c4 28             	add    esp,0x28
c00171a3:	5b                   	pop    ebx
c00171a4:	c3                   	ret    
c00171a5:	90                   	nop

c00171a6 <VCache::~VCache()>:
c00171a6:	83 ec 0c             	sub    esp,0xc
c00171a9:	ba 50 b4 02 c0       	mov    edx,0xc002b450
c00171ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171b2:	89 10                	mov    DWORD PTR [eax],edx
c00171b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171b8:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171bb:	84 c0                	test   al,al
c00171bd:	74 0f                	je     c00171ce <VCache::~VCache()+0x28>
c00171bf:	83 ec 0c             	sub    esp,0xc
c00171c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171c6:	e8 9f ff ff ff       	call   c001716a <VCache::writeWriteBuffer()>
c00171cb:	83 c4 10             	add    esp,0x10
c00171ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171d2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171d5:	83 ec 0c             	sub    esp,0xc
c00171d8:	50                   	push   eax
c00171d9:	e8 75 86 ff ff       	call   c000f853 <free>
c00171de:	83 c4 10             	add    esp,0x10
c00171e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171e5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171e8:	83 ec 0c             	sub    esp,0xc
c00171eb:	50                   	push   eax
c00171ec:	e8 62 86 ff ff       	call   c000f853 <free>
c00171f1:	83 c4 10             	add    esp,0x10
c00171f4:	90                   	nop
c00171f5:	83 c4 0c             	add    esp,0xc
c00171f8:	c3                   	ret    
c00171f9:	90                   	nop

c00171fa <VCache::~VCache()>:
c00171fa:	83 ec 0c             	sub    esp,0xc
c00171fd:	83 ec 0c             	sub    esp,0xc
c0017200:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017204:	e8 9d ff ff ff       	call   c00171a6 <VCache::~VCache()>
c0017209:	83 c4 10             	add    esp,0x10
c001720c:	83 ec 08             	sub    esp,0x8
c001720f:	6a 44                	push   0x44
c0017211:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017215:	e8 f5 bc ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c001721a:	83 c4 10             	add    esp,0x10
c001721d:	83 c4 0c             	add    esp,0xc
c0017220:	c3                   	ret    
c0017221:	90                   	nop

c0017222 <VCache::write(unsigned long long, int, void*)>:
c0017222:	55                   	push   ebp
c0017223:	57                   	push   edi
c0017224:	56                   	push   esi
c0017225:	53                   	push   ebx
c0017226:	83 ec 28             	sub    esp,0x28
c0017229:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001722d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017231:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017235:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017239:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001723c:	e8 d3 71 00 00       	call   c001e414 <Semaphore::acquire()>
c0017241:	83 c4 10             	add    esp,0x10
c0017244:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017248:	74 0c                	je     c0017256 <VCache::write(unsigned long long, int, void*)+0x34>
c001724a:	83 ec 0c             	sub    esp,0xc
c001724d:	53                   	push   ebx
c001724e:	e8 07 ff ff ff       	call   c001715a <VCache::invalidateReadBuffer()>
c0017253:	83 c4 10             	add    esp,0x10
c0017256:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001725a:	74 66                	je     c00172c2 <VCache::write(unsigned long long, int, void*)+0xa0>
c001725c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001725f:	99                   	cdq    
c0017260:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017264:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0017267:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c001726a:	89 c1                	mov    ecx,eax
c001726c:	89 d0                	mov    eax,edx
c001726e:	31 f1                	xor    ecx,esi
c0017270:	31 f8                	xor    eax,edi
c0017272:	89 ca                	mov    edx,ecx
c0017274:	09 c2                	or     edx,eax
c0017276:	75 3e                	jne    c00172b6 <VCache::write(unsigned long long, int, void*)+0x94>
c0017278:	83 fd 01             	cmp    ebp,0x1
c001727b:	75 39                	jne    c00172b6 <VCache::write(unsigned long long, int, void*)+0x94>
c001727d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017280:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017286:	51                   	push   ecx
c0017287:	50                   	push   eax
c0017288:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001728c:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0017290:	0f af c8             	imul   ecx,eax
c0017293:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0017296:	51                   	push   ecx
c0017297:	e8 a8 94 fe ff       	call   c0000744 <memcpy>
c001729c:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001729f:	83 c4 10             	add    esp,0x10
c00172a2:	40                   	inc    eax
c00172a3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c00172a6:	83 c0 80             	add    eax,0xffffff80
c00172a9:	75 57                	jne    c0017302 <VCache::write(unsigned long long, int, void*)+0xe0>
c00172ab:	83 ec 0c             	sub    esp,0xc
c00172ae:	53                   	push   ebx
c00172af:	e8 b6 fe ff ff       	call   c001716a <VCache::writeWriteBuffer()>
c00172b4:	eb 34                	jmp    c00172ea <VCache::write(unsigned long long, int, void*)+0xc8>
c00172b6:	83 ec 0c             	sub    esp,0xc
c00172b9:	53                   	push   ebx
c00172ba:	e8 ab fe ff ff       	call   c001716a <VCache::writeWriteBuffer()>
c00172bf:	83 c4 10             	add    esp,0x10
c00172c2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172c5:	83 fd 7f             	cmp    ebp,0x7f
c00172c8:	7f 25                	jg     c00172ef <VCache::write(unsigned long long, int, void*)+0xcd>
c00172ca:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172cd:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172d0:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c00172d3:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172d7:	52                   	push   edx
c00172d8:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c00172de:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00172e2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00172e5:	e8 5a 94 fe ff       	call   c0000744 <memcpy>
c00172ea:	83 c4 10             	add    esp,0x10
c00172ed:	eb 13                	jmp    c0017302 <VCache::write(unsigned long long, int, void*)+0xe0>
c00172ef:	83 ec 0c             	sub    esp,0xc
c00172f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00172f4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00172f8:	55                   	push   ebp
c00172f9:	57                   	push   edi
c00172fa:	56                   	push   esi
c00172fb:	50                   	push   eax
c00172fc:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172ff:	83 c4 20             	add    esp,0x20
c0017302:	83 ec 0c             	sub    esp,0xc
c0017305:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017308:	e8 b5 76 00 00       	call   c001e9c2 <Semaphore::release()>
c001730d:	83 c4 2c             	add    esp,0x2c
c0017310:	31 c0                	xor    eax,eax
c0017312:	5b                   	pop    ebx
c0017313:	5e                   	pop    esi
c0017314:	5f                   	pop    edi
c0017315:	5d                   	pop    ebp
c0017316:	c3                   	ret    
c0017317:	90                   	nop

c0017318 <VCache::read(unsigned long long, int, void*)>:
c0017318:	55                   	push   ebp
c0017319:	57                   	push   edi
c001731a:	56                   	push   esi
c001731b:	53                   	push   ebx
c001731c:	83 ec 28             	sub    esp,0x28
c001731f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017323:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017327:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001732b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001732f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0017333:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0017337:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001733b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001733e:	e8 d1 70 00 00       	call   c001e414 <Semaphore::acquire()>
c0017343:	83 c4 10             	add    esp,0x10
c0017346:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c001734a:	74 0c                	je     c0017358 <VCache::read(unsigned long long, int, void*)+0x40>
c001734c:	83 ec 0c             	sub    esp,0xc
c001734f:	53                   	push   ebx
c0017350:	e8 15 fe ff ff       	call   c001716a <VCache::writeWriteBuffer()>
c0017355:	83 c4 10             	add    esp,0x10
c0017358:	83 fe 01             	cmp    esi,0x1
c001735b:	0f 85 80 00 00 00    	jne    c00173e1 <VCache::read(unsigned long long, int, void*)+0xc9>
c0017361:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017364:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c001736b:	75 74                	jne    c00173e1 <VCache::read(unsigned long long, int, void*)+0xc9>
c001736d:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0017370:	89 d1                	mov    ecx,edx
c0017372:	f7 d9                	neg    ecx
c0017374:	89 cf                	mov    edi,ecx
c0017376:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001737a:	c1 ff 1f             	sar    edi,0x1f
c001737d:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0017380:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0017384:	89 ce                	mov    esi,ecx
c0017386:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001738a:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c001738e:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017392:	89 cf                	mov    edi,ecx
c0017394:	74 0a                	je     c00173a0 <VCache::read(unsigned long long, int, void*)+0x88>
c0017396:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017399:	75 05                	jne    c00173a0 <VCache::read(unsigned long long, int, void*)+0x88>
c001739b:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c001739e:	74 1c                	je     c00173bc <VCache::read(unsigned long long, int, void*)+0xa4>
c00173a0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c00173a4:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c00173a7:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c00173aa:	83 ec 0c             	sub    esp,0xc
c00173ad:	8b 08                	mov    ecx,DWORD PTR [eax]
c00173af:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00173b2:	52                   	push   edx
c00173b3:	57                   	push   edi
c00173b4:	56                   	push   esi
c00173b5:	50                   	push   eax
c00173b6:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173b9:	83 c4 20             	add    esp,0x20
c00173bc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173bf:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00173c5:	50                   	push   eax
c00173c6:	52                   	push   edx
c00173c7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173ca:	48                   	dec    eax
c00173cb:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c00173cf:	0f af c2             	imul   eax,edx
c00173d2:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c00173d5:	50                   	push   eax
c00173d6:	55                   	push   ebp
c00173d7:	e8 68 93 fe ff       	call   c0000744 <memcpy>
c00173dc:	83 c4 10             	add    esp,0x10
c00173df:	eb 21                	jmp    c0017402 <VCache::read(unsigned long long, int, void*)+0xea>
c00173e1:	83 ec 0c             	sub    esp,0xc
c00173e4:	53                   	push   ebx
c00173e5:	e8 70 fd ff ff       	call   c001715a <VCache::invalidateReadBuffer()>
c00173ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173ed:	8b 10                	mov    edx,DWORD PTR [eax]
c00173ef:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173f2:	56                   	push   esi
c00173f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173f7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00173fb:	50                   	push   eax
c00173fc:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173ff:	83 c4 20             	add    esp,0x20
c0017402:	83 ec 0c             	sub    esp,0xc
c0017405:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017408:	e8 b5 75 00 00       	call   c001e9c2 <Semaphore::release()>
c001740d:	83 c4 2c             	add    esp,0x2c
c0017410:	31 c0                	xor    eax,eax
c0017412:	5b                   	pop    ebx
c0017413:	5e                   	pop    esi
c0017414:	5f                   	pop    edi
c0017415:	5d                   	pop    ebp
c0017416:	c3                   	ret    
c0017417:	90                   	nop

c0017418 <Video::putrect(int, int, int, int, unsigned int)>:
c0017418:	55                   	push   ebp
c0017419:	57                   	push   edi
c001741a:	56                   	push   esi
c001741b:	53                   	push   ebx
c001741c:	83 ec 1c             	sub    esp,0x1c
c001741f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017423:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017427:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001742b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c001742f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017433:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017437:	01 df                	add    edi,ebx
c0017439:	39 fb                	cmp    ebx,edi
c001743b:	7d 1f                	jge    c001745c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001743d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017441:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017445:	7d 12                	jge    c0017459 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017447:	8b 16                	mov    edx,DWORD PTR [esi]
c0017449:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001744d:	53                   	push   ebx
c001744e:	55                   	push   ebp
c001744f:	45                   	inc    ebp
c0017450:	56                   	push   esi
c0017451:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017454:	83 c4 10             	add    esp,0x10
c0017457:	eb e8                	jmp    c0017441 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0017459:	43                   	inc    ebx
c001745a:	eb dd                	jmp    c0017439 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001745c:	83 c4 1c             	add    esp,0x1c
c001745f:	5b                   	pop    ebx
c0017460:	5e                   	pop    esi
c0017461:	5f                   	pop    edi
c0017462:	5d                   	pop    ebp
c0017463:	c3                   	ret    

c0017464 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017464:	55                   	push   ebp
c0017465:	57                   	push   edi
c0017466:	31 ff                	xor    edi,edi
c0017468:	56                   	push   esi
c0017469:	53                   	push   ebx
c001746a:	83 ec 1c             	sub    esp,0x1c
c001746d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017471:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017475:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001747c:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017481:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017485:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0017489:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001748d:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017490:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017494:	01 f9                	add    ecx,edi
c0017496:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001749a:	7d 2f                	jge    c00174cb <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001749c:	31 f6                	xor    esi,esi
c001749e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00174a2:	01 f2                	add    edx,esi
c00174a4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c00174a8:	7d 1a                	jge    c00174c4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c00174aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00174ad:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c00174b0:	46                   	inc    esi
c00174b1:	51                   	push   ecx
c00174b2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00174b6:	52                   	push   edx
c00174b7:	55                   	push   ebp
c00174b8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00174bb:	83 c4 10             	add    esp,0x10
c00174be:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174c2:	eb da                	jmp    c001749e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174c4:	47                   	inc    edi
c00174c5:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174c9:	eb c5                	jmp    c0017490 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174cb:	83 c4 1c             	add    esp,0x1c
c00174ce:	5b                   	pop    ebx
c00174cf:	5e                   	pop    esi
c00174d0:	5f                   	pop    edi
c00174d1:	5d                   	pop    ebp
c00174d2:	c3                   	ret    
c00174d3:	90                   	nop

c00174d4 <Video::blit(unsigned int*, int, int, int, int)>:
c00174d4:	55                   	push   ebp
c00174d5:	57                   	push   edi
c00174d6:	56                   	push   esi
c00174d7:	53                   	push   ebx
c00174d8:	83 ec 1c             	sub    esp,0x1c
c00174db:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174df:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174e3:	85 c0                	test   eax,eax
c00174e5:	79 02                	jns    c00174e9 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174e7:	31 c0                	xor    eax,eax
c00174e9:	c1 e0 02             	shl    eax,0x2
c00174ec:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174f0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174f8:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174fc:	39 d8                	cmp    eax,ebx
c00174fe:	7e 49                	jle    c0017549 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017500:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017506:	7c 41                	jl     c0017549 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017508:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001750c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017510:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017514:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017518:	39 f9                	cmp    ecx,edi
c001751a:	7e 22                	jle    c001753e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001751c:	83 c5 04             	add    ebp,0x4
c001751f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017525:	7c 14                	jl     c001753b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017527:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017529:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001752c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017530:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017534:	56                   	push   esi
c0017535:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017538:	83 c4 10             	add    esp,0x10
c001753b:	47                   	inc    edi
c001753c:	eb d2                	jmp    c0017510 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001753e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017542:	43                   	inc    ebx
c0017543:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017547:	eb ab                	jmp    c00174f4 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017549:	83 c4 1c             	add    esp,0x1c
c001754c:	5b                   	pop    ebx
c001754d:	5e                   	pop    esi
c001754e:	5f                   	pop    edi
c001754f:	5d                   	pop    ebp
c0017550:	c3                   	ret    
c0017551:	90                   	nop

c0017552 <Video::clearScreen(unsigned int)>:
c0017552:	57                   	push   edi
c0017553:	56                   	push   esi
c0017554:	53                   	push   ebx
c0017555:	31 db                	xor    ebx,ebx
c0017557:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001755b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017561:	7e 1f                	jle    c0017582 <Video::clearScreen(unsigned int)+0x30>
c0017563:	31 ff                	xor    edi,edi
c0017565:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001756b:	7e 12                	jle    c001757f <Video::clearScreen(unsigned int)+0x2d>
c001756d:	8b 06                	mov    eax,DWORD PTR [esi]
c001756f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017573:	53                   	push   ebx
c0017574:	57                   	push   edi
c0017575:	47                   	inc    edi
c0017576:	56                   	push   esi
c0017577:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001757a:	83 c4 10             	add    esp,0x10
c001757d:	eb e6                	jmp    c0017565 <Video::clearScreen(unsigned int)+0x13>
c001757f:	43                   	inc    ebx
c0017580:	eb d9                	jmp    c001755b <Video::clearScreen(unsigned int)+0x9>
c0017582:	5b                   	pop    ebx
c0017583:	5e                   	pop    esi
c0017584:	5f                   	pop    edi
c0017585:	c3                   	ret    

c0017586 <Video::putpixel(int, int, unsigned int)>:
c0017586:	c7 44 24 04 58 b4 02 c0 	mov    DWORD PTR [esp+0x4],0xc002b458
c001758e:	e9 0a 31 00 00       	jmp    c001a69d <Krnl::panic(char const*)>
c0017593:	90                   	nop

c0017594 <Video::Video(char const*)>:
c0017594:	83 ec 0c             	sub    esp,0xc
c0017597:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001759b:	83 ec 08             	sub    esp,0x8
c001759e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175a2:	50                   	push   eax
c00175a3:	e8 5e d0 ff ff       	call   c0014606 <Device::Device(char const*)>
c00175a8:	83 c4 10             	add    esp,0x10
c00175ab:	ba dc b4 02 c0       	mov    edx,0xc002b4dc
c00175b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b4:	89 10                	mov    DWORD PTR [eax],edx
c00175b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175ba:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175c4:	90                   	nop
c00175c5:	83 c4 0c             	add    esp,0xc
c00175c8:	c3                   	ret    
c00175c9:	90                   	nop

c00175ca <Video::~Video()>:
c00175ca:	83 ec 0c             	sub    esp,0xc
c00175cd:	ba dc b4 02 c0       	mov    edx,0xc002b4dc
c00175d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175d6:	89 10                	mov    DWORD PTR [eax],edx
c00175d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175dc:	83 ec 0c             	sub    esp,0xc
c00175df:	50                   	push   eax
c00175e0:	e8 03 cd ff ff       	call   c00142e8 <Device::~Device()>
c00175e5:	83 c4 10             	add    esp,0x10
c00175e8:	90                   	nop
c00175e9:	83 c4 0c             	add    esp,0xc
c00175ec:	c3                   	ret    
c00175ed:	90                   	nop

c00175ee <Video::~Video()>:
c00175ee:	83 ec 0c             	sub    esp,0xc
c00175f1:	83 ec 0c             	sub    esp,0xc
c00175f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175f8:	e8 cd ff ff ff       	call   c00175ca <Video::~Video()>
c00175fd:	83 c4 10             	add    esp,0x10
c0017600:	83 ec 08             	sub    esp,0x8
c0017603:	68 64 01 00 00       	push   0x164
c0017608:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001760c:	e8 fe b8 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0017611:	83 c4 10             	add    esp,0x10
c0017614:	83 c4 0c             	add    esp,0xc
c0017617:	c3                   	ret    

c0017618 <Video::isMonochrome()>:
c0017618:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001761c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017622:	c3                   	ret    
c0017623:	90                   	nop

c0017624 <Video::getWidth()>:
c0017624:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017628:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001762e:	c3                   	ret    
c001762f:	90                   	nop

c0017630 <Video::getHeight()>:
c0017630:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017634:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001763a:	c3                   	ret    
c001763b:	90                   	nop

c001763c <Video::drawCursor(int, int, unsigned char*, int)>:
c001763c:	55                   	push   ebp
c001763d:	57                   	push   edi
c001763e:	56                   	push   esi
c001763f:	53                   	push   ebx
c0017640:	83 ec 2c             	sub    esp,0x2c
c0017643:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017647:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001764b:	83 f8 01             	cmp    eax,0x1
c001764e:	19 c9                	sbb    ecx,ecx
c0017650:	31 db                	xor    ebx,ebx
c0017652:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017656:	89 cd                	mov    ebp,ecx
c0017658:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017660:	f7 d5                	not    ebp
c0017662:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c0017668:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001766c:	01 d8                	add    eax,ebx
c001766e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017672:	56                   	push   esi
c0017673:	e8 b8 ff ff ff       	call   c0017630 <Video::getHeight()>
c0017678:	59                   	pop    ecx
c0017679:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001767d:	7e 70                	jle    c00176ef <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c001767f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017683:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017687:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001768a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001768e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017692:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c0017699:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001769d:	89 f8                	mov    eax,edi
c001769f:	83 c0 20             	add    eax,0x20
c00176a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00176a6:	56                   	push   esi
c00176a7:	e8 78 ff ff ff       	call   c0017624 <Video::getWidth()>
c00176ac:	5a                   	pop    edx
c00176ad:	39 c7                	cmp    edi,eax
c00176af:	7d 34                	jge    c00176e5 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c00176b1:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c00176b6:	74 05                	je     c00176bd <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c00176b8:	8b 06                	mov    eax,DWORD PTR [esi]
c00176ba:	55                   	push   ebp
c00176bb:	eb 0d                	jmp    c00176ca <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c00176bd:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176c2:	74 12                	je     c00176d6 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176c4:	8b 06                	mov    eax,DWORD PTR [esi]
c00176c6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176ca:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176ce:	57                   	push   edi
c00176cf:	56                   	push   esi
c00176d0:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176d3:	83 c4 10             	add    esp,0x10
c00176d6:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176da:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176de:	47                   	inc    edi
c00176df:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176e3:	75 c1                	jne    c00176a6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176e5:	43                   	inc    ebx
c00176e6:	83 fb 20             	cmp    ebx,0x20
c00176e9:	0f 85 79 ff ff ff    	jne    c0017668 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176ef:	83 c4 2c             	add    esp,0x2c
c00176f2:	5b                   	pop    ebx
c00176f3:	5e                   	pop    esi
c00176f4:	5f                   	pop    edi
c00176f5:	5d                   	pop    ebp
c00176f6:	c3                   	ret    
c00176f7:	90                   	nop

c00176f8 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176f8:	55                   	push   ebp
c00176f9:	57                   	push   edi
c00176fa:	56                   	push   esi
c00176fb:	53                   	push   ebx
c00176fc:	83 ec 28             	sub    esp,0x28
c00176ff:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017703:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017707:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001770b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001770f:	c1 e7 08             	shl    edi,0x8
c0017712:	01 c7                	add    edi,eax
c0017714:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017718:	c1 e0 08             	shl    eax,0x8
c001771b:	01 d0                	add    eax,edx
c001771d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017721:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017725:	0f af c7             	imul   eax,edi
c0017728:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001772f:	50                   	push   eax
c0017730:	e8 0e 81 ff ff       	call   c000f843 <malloc>
c0017735:	83 c4 10             	add    esp,0x10
c0017738:	89 c5                	mov    ebp,eax
c001773a:	85 c0                	test   eax,eax
c001773c:	75 15                	jne    c0017753 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001773e:	83 ec 0c             	sub    esp,0xc
c0017741:	68 79 b4 02 c0       	push   0xc002b479
c0017746:	e8 a4 b8 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001774b:	83 c4 10             	add    esp,0x10
c001774e:	e9 1c 01 00 00       	jmp    c001786f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017753:	be 12 00 00 00       	mov    esi,0x12
c0017758:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001775c:	74 11                	je     c001776f <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c001775e:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017762:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017766:	c1 fe 03             	sar    esi,0x3
c0017769:	0f af f0             	imul   esi,eax
c001776c:	83 c6 12             	add    esi,0x12
c001776f:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017773:	74 04                	je     c0017779 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017775:	85 ff                	test   edi,edi
c0017777:	75 12                	jne    c001778b <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c0017779:	83 ec 0c             	sub    esp,0xc
c001777c:	68 90 b4 02 c0       	push   0xc002b490
c0017781:	e8 69 b8 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0017786:	e9 ce 00 00 00       	jmp    c0017859 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001778b:	52                   	push   edx
c001778c:	52                   	push   edx
c001778d:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017791:	50                   	push   eax
c0017792:	68 a5 b4 02 c0       	push   0xc002b4a5
c0017797:	e8 53 b8 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001779c:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00177a0:	83 c4 10             	add    esp,0x10
c00177a3:	80 fa 02             	cmp    dl,0x2
c00177a6:	0f 85 98 00 00 00    	jne    c0017844 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00177ac:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c00177b1:	75 10                	jne    c00177c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177b3:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00177b7:	75 0a                	jne    c00177c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c00177b9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00177bc:	83 e8 18             	sub    eax,0x18
c00177bf:	a8 f7                	test   al,0xf7
c00177c1:	74 0a                	je     c00177cd <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177c3:	83 ec 0c             	sub    esp,0xc
c00177c6:	68 b2 b4 02 c0       	push   0xc002b4b2
c00177cb:	eb 7f                	jmp    c001784c <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177cd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177d5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177e1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177e9:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177ed:	75 0c                	jne    c00177fb <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177ef:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177f4:	c1 e0 18             	shl    eax,0x18
c00177f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177fb:	41                   	inc    ecx
c00177fc:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017801:	c1 e2 10             	shl    edx,0x10
c0017804:	89 d0                	mov    eax,edx
c0017806:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001780b:	c1 e2 08             	shl    edx,0x8
c001780e:	09 c2                	or     edx,eax
c0017810:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017814:	09 c2                	or     edx,eax
c0017816:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001781a:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001781e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017822:	c1 f8 03             	sar    eax,0x3
c0017825:	01 c6                	add    esi,eax
c0017827:	89 c8                	mov    eax,ecx
c0017829:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001782d:	39 c7                	cmp    edi,eax
c001782f:	7f b0                	jg     c00177e1 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017831:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017835:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017839:	39 14 24             	cmp    DWORD PTR [esp],edx
c001783c:	7e 22                	jle    c0017860 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001783e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017842:	eb 99                	jmp    c00177dd <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017844:	50                   	push   eax
c0017845:	50                   	push   eax
c0017846:	52                   	push   edx
c0017847:	68 c0 b4 02 c0       	push   0xc002b4c0
c001784c:	e8 9e b7 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0017851:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017854:	e8 fa 7f ff ff       	call   c000f853 <free>
c0017859:	83 c4 10             	add    esp,0x10
c001785c:	31 ed                	xor    ebp,ebp
c001785e:	eb 0f                	jmp    c001786f <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017860:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017864:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017867:	89 38                	mov    DWORD PTR [eax],edi
c0017869:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001786d:	89 08                	mov    DWORD PTR [eax],ecx
c001786f:	83 c4 1c             	add    esp,0x1c
c0017872:	89 e8                	mov    eax,ebp
c0017874:	5b                   	pop    ebx
c0017875:	5e                   	pop    esi
c0017876:	5f                   	pop    edi
c0017877:	5d                   	pop    ebp
c0017878:	c3                   	ret    
c0017879:	90                   	nop

c001787a <Video::putTGA(int, int, unsigned char*, int)>:
c001787a:	55                   	push   ebp
c001787b:	57                   	push   edi
c001787c:	56                   	push   esi
c001787d:	53                   	push   ebx
c001787e:	83 ec 28             	sub    esp,0x28
c0017881:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017885:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017889:	50                   	push   eax
c001788a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001788e:	50                   	push   eax
c001788f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017893:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017897:	56                   	push   esi
c0017898:	e8 5b fe ff ff       	call   c00176f8 <Video::tgaParse(unsigned char*, int, int*, int*)>
c001789d:	83 c4 20             	add    esp,0x20
c00178a0:	85 c0                	test   eax,eax
c00178a2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00178a6:	74 35                	je     c00178dd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178a8:	89 c7                	mov    edi,eax
c00178aa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00178ae:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00178b2:	39 d8                	cmp    eax,ebx
c00178b4:	7e 27                	jle    c00178dd <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00178b6:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00178ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178be:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178c2:	39 e8                	cmp    eax,ebp
c00178c4:	7e 14                	jle    c00178da <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178c6:	8b 06                	mov    eax,DWORD PTR [esi]
c00178c8:	83 c7 04             	add    edi,0x4
c00178cb:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178ce:	53                   	push   ebx
c00178cf:	55                   	push   ebp
c00178d0:	45                   	inc    ebp
c00178d1:	56                   	push   esi
c00178d2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178d5:	83 c4 10             	add    esp,0x10
c00178d8:	eb e0                	jmp    c00178ba <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178da:	43                   	inc    ebx
c00178db:	eb cd                	jmp    c00178aa <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178dd:	83 c4 1c             	add    esp,0x1c
c00178e0:	5b                   	pop    ebx
c00178e1:	5e                   	pop    esi
c00178e2:	5f                   	pop    edi
c00178e3:	5d                   	pop    ebp
c00178e4:	c3                   	ret    
c00178e5:	90                   	nop

c00178e6 <ACPI::close(int, int, void*)>:
c00178e6:	83 ec 1c             	sub    esp,0x1c
c00178e9:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178f1:	74 0a                	je     c00178fd <ACPI::close(int, int, void*)+0x17>
c00178f3:	b8 00 00 00 00       	mov    eax,0x0
c00178f8:	e9 9a 00 00 00       	jmp    c0017997 <ACPI::close(int, int, void*)+0xb1>
c00178fd:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017902:	75 37                	jne    c001793b <ACPI::close(int, int, void*)+0x55>
c0017904:	83 ec 0c             	sub    esp,0xc
c0017907:	68 1c b5 02 c0       	push   0xc002b51c
c001790c:	e8 de b6 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0017911:	83 c4 10             	add    esp,0x10
c0017914:	a1 e8 0b 03 c0       	mov    eax,ds:0xc0030be8
c0017919:	85 c0                	test   eax,eax
c001791b:	74 07                	je     c0017924 <ACPI::close(int, int, void*)+0x3e>
c001791d:	a1 e8 0b 03 c0       	mov    eax,ds:0xc0030be8
c0017922:	ff d0                	call   eax
c0017924:	83 ec 0c             	sub    esp,0xc
c0017927:	68 40 b6 02 c0       	push   0xc002b640
c001792c:	e8 6c 2d 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0017931:	83 c4 10             	add    esp,0x10
c0017934:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017939:	eb 5c                	jmp    c0017997 <ACPI::close(int, int, void*)+0xb1>
c001793b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017940:	75 50                	jne    c0017992 <ACPI::close(int, int, void*)+0xac>
c0017942:	a1 e4 0b 03 c0       	mov    eax,ds:0xc0030be4
c0017947:	85 c0                	test   eax,eax
c0017949:	74 07                	je     c0017952 <ACPI::close(int, int, void*)+0x6c>
c001794b:	a1 e4 0b 03 c0       	mov    eax,ds:0xc0030be4
c0017950:	ff d0                	call   eax
c0017952:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017957:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001795c:	83 e0 02             	and    eax,0x2
c001795f:	74 1c                	je     c001797d <ACPI::close(int, int, void*)+0x97>
c0017961:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c0017968:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001796c:	89 c2                	mov    edx,eax
c001796e:	ec                   	in     al,dx
c001796f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017973:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017977:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001797b:	eb da                	jmp    c0017957 <ACPI::close(int, int, void*)+0x71>
c001797d:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017984:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c0017989:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001798d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017991:	ee                   	out    dx,al
c0017992:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017997:	83 c4 1c             	add    esp,0x1c
c001799a:	c3                   	ret    

c001799b <findRSDP()>:
c001799b:	83 ec 1c             	sub    esp,0x1c
c001799e:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00179a3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00179a9:	83 e0 04             	and    eax,0x4
c00179ac:	84 c0                	test   al,al
c00179ae:	75 07                	jne    c00179b7 <findRSDP()+0x1c>
c00179b0:	b8 00 00 00 00       	mov    eax,0x0
c00179b5:	eb 6a                	jmp    c0017a21 <findRSDP()+0x86>
c00179b7:	a1 74 e5 02 c0       	mov    eax,ds:0xc002e574
c00179bc:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179c1:	7f 1b                	jg     c00179de <findRSDP()+0x43>
c00179c3:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00179c8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179ce:	83 e2 fb             	and    edx,0xfffffffb
c00179d1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179d7:	b8 00 00 00 00       	mov    eax,0x0
c00179dc:	eb 43                	jmp    c0017a21 <findRSDP()+0x86>
c00179de:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179e6:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179ee:	77 2c                	ja     c0017a1c <findRSDP()+0x81>
c00179f0:	83 ec 04             	sub    esp,0x4
c00179f3:	6a 08                	push   0x8
c00179f5:	68 29 b5 02 c0       	push   0xc002b529
c00179fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179fe:	e8 3d 8c fe ff       	call   c0000640 <memcmp>
c0017a03:	83 c4 10             	add    esp,0x10
c0017a06:	85 c0                	test   eax,eax
c0017a08:	0f 94 c0             	sete   al
c0017a0b:	84 c0                	test   al,al
c0017a0d:	74 06                	je     c0017a15 <findRSDP()+0x7a>
c0017a0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a13:	eb 0c                	jmp    c0017a21 <findRSDP()+0x86>
c0017a15:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a1a:	eb ca                	jmp    c00179e6 <findRSDP()+0x4b>
c0017a1c:	b8 00 00 00 00       	mov    eax,0x0
c0017a21:	83 c4 1c             	add    esp,0x1c
c0017a24:	c3                   	ret    

c0017a25 <loadACPITables(unsigned char*)>:
c0017a25:	56                   	push   esi
c0017a26:	53                   	push   ebx
c0017a27:	83 ec 44             	sub    esp,0x44
c0017a2a:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017a2f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a35:	83 e0 04             	and    eax,0x4
c0017a38:	84 c0                	test   al,al
c0017a3a:	0f 84 05 02 00 00    	je     c0017c45 <loadACPITables(unsigned char*)+0x220>
c0017a40:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0017a45:	84 c0                	test   al,al
c0017a47:	74 75                	je     c0017abe <loadACPITables(unsigned char*)+0x99>
c0017a49:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a4d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017a51:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017a55:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a58:	83 e8 24             	sub    eax,0x24
c0017a5b:	c1 e8 03             	shr    eax,0x3
c0017a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017a62:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017a6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a6e:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017a72:	0f 8d b2 00 00 00    	jge    c0017b2a <loadACPITables(unsigned char*)+0x105>
c0017a78:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017a7c:	83 c0 24             	add    eax,0x24
c0017a7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017a83:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a87:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a8b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017a8f:	c1 e0 03             	shl    eax,0x3
c0017a92:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017a96:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017a9a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a9f:	89 c1                	mov    ecx,eax
c0017aa1:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c0017aa6:	8d 50 01             	lea    edx,[eax+0x1]
c0017aa9:	89 15 ec 0b 03 c0    	mov    DWORD PTR ds:0xc0030bec,edx
c0017aaf:	89 ca                	mov    edx,ecx
c0017ab1:	89 14 c5 04 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3fc],edx
c0017ab8:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c0017abc:	eb ac                	jmp    c0017a6a <loadACPITables(unsigned char*)+0x45>
c0017abe:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017ac2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017ac6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017aca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017acd:	83 e8 24             	sub    eax,0x24
c0017ad0:	c1 e8 02             	shr    eax,0x2
c0017ad3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017ad7:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c0017adf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ae3:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017ae7:	7d 41                	jge    c0017b2a <loadACPITables(unsigned char*)+0x105>
c0017ae9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017aed:	83 c0 24             	add    eax,0x24
c0017af0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017af4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017af8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017afc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017b00:	c1 e0 02             	shl    eax,0x2
c0017b03:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017b07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017b0b:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b0d:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c0017b12:	8d 50 01             	lea    edx,[eax+0x1]
c0017b15:	89 15 ec 0b 03 c0    	mov    DWORD PTR ds:0xc0030bec,edx
c0017b1b:	89 ca                	mov    edx,ecx
c0017b1d:	89 14 c5 04 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3fc],edx
c0017b24:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017b28:	eb b5                	jmp    c0017adf <loadACPITables(unsigned char*)+0xba>
c0017b2a:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017b32:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c0017b37:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c0017b3b:	0f 8d 05 01 00 00    	jge    c0017c46 <loadACPITables(unsigned char*)+0x221>
c0017b41:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b45:	8b 04 c5 04 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf3fc]
c0017b4c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b54:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017b5c:	25 ff 0f 00 00       	and    eax,0xfff
c0017b61:	89 c6                	mov    esi,eax
c0017b63:	e8 b2 a2 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0017b68:	89 c3                	mov    ebx,eax
c0017b6a:	83 ec 0c             	sub    esp,0xc
c0017b6d:	6a 01                	push   0x1
c0017b6f:	e8 0b a0 ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0017b74:	83 c4 10             	add    esp,0x10
c0017b77:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017b7b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b81:	83 ec 0c             	sub    esp,0xc
c0017b84:	6a 01                	push   0x1
c0017b86:	6a 01                	push   0x1
c0017b88:	50                   	push   eax
c0017b89:	52                   	push   edx
c0017b8a:	53                   	push   ebx
c0017b8b:	e8 d0 aa ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b90:	83 c4 20             	add    esp,0x20
c0017b93:	09 f0                	or     eax,esi
c0017b95:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017b99:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017b9d:	c1 e0 03             	shl    eax,0x3
c0017ba0:	05 00 0c 03 c0       	add    eax,0xc0030c00
c0017ba5:	83 ec 04             	sub    esp,0x4
c0017ba8:	6a 04                	push   0x4
c0017baa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0017bae:	50                   	push   eax
c0017baf:	e8 90 8b fe ff       	call   c0000744 <memcpy>
c0017bb4:	83 c4 10             	add    esp,0x10
c0017bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bbb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bbe:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017bc2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bc6:	05 00 10 00 00       	add    eax,0x1000
c0017bcb:	c1 e8 0c             	shr    eax,0xc
c0017bce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017bd2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bdd:	25 ff 0f 00 00       	and    eax,0xfff
c0017be2:	89 c6                	mov    esi,eax
c0017be4:	e8 31 a2 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0017be9:	89 c3                	mov    ebx,eax
c0017beb:	83 ec 0c             	sub    esp,0xc
c0017bee:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017bf2:	e8 88 9f ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0017bf7:	83 c4 10             	add    esp,0x10
c0017bfa:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bfe:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c04:	83 ec 0c             	sub    esp,0xc
c0017c07:	6a 01                	push   0x1
c0017c09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017c0d:	50                   	push   eax
c0017c0e:	52                   	push   edx
c0017c0f:	53                   	push   ebx
c0017c10:	e8 4b aa ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c15:	83 c4 20             	add    esp,0x20
c0017c18:	09 f0                	or     eax,esi
c0017c1a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017c1e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017c21:	83 ec 0c             	sub    esp,0xc
c0017c24:	50                   	push   eax
c0017c25:	e8 db a3 ff ff       	call   c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c2a:	83 c4 10             	add    esp,0x10
c0017c2d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017c31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017c35:	89 14 c5 04 0c 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf3fc],edx
c0017c3c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017c40:	e9 ed fe ff ff       	jmp    c0017b32 <loadACPITables(unsigned char*)+0x10d>
c0017c45:	90                   	nop
c0017c46:	83 c4 44             	add    esp,0x44
c0017c49:	5b                   	pop    ebx
c0017c4a:	5e                   	pop    esi
c0017c4b:	c3                   	ret    

c0017c4c <findRSDT(unsigned char*)>:
c0017c4c:	56                   	push   esi
c0017c4d:	53                   	push   ebx
c0017c4e:	83 ec 44             	sub    esp,0x44
c0017c51:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017c56:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c5c:	83 e0 04             	and    eax,0x4
c0017c5f:	84 c0                	test   al,al
c0017c61:	75 0a                	jne    c0017c6d <findRSDT(unsigned char*)+0x21>
c0017c63:	b8 00 00 00 00       	mov    eax,0x0
c0017c68:	e9 f7 00 00 00       	jmp    c0017d64 <findRSDT(unsigned char*)+0x118>
c0017c6d:	83 ec 04             	sub    esp,0x4
c0017c70:	6a 24                	push   0x24
c0017c72:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0017c76:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017c7a:	50                   	push   eax
c0017c7b:	e8 c4 8a fe ff       	call   c0000744 <memcpy>
c0017c80:	83 c4 10             	add    esp,0x10
c0017c83:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017c87:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0017c8b:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c0017c93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017c97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c9b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017c9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ca3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ca7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017cab:	25 ff 0f 00 00       	and    eax,0xfff
c0017cb0:	89 c6                	mov    esi,eax
c0017cb2:	e8 63 a1 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0017cb7:	89 c3                	mov    ebx,eax
c0017cb9:	83 ec 0c             	sub    esp,0xc
c0017cbc:	6a 02                	push   0x2
c0017cbe:	e8 bc 9e ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0017cc3:	83 c4 10             	add    esp,0x10
c0017cc6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017cca:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cd0:	83 ec 0c             	sub    esp,0xc
c0017cd3:	6a 01                	push   0x1
c0017cd5:	6a 02                	push   0x2
c0017cd7:	50                   	push   eax
c0017cd8:	52                   	push   edx
c0017cd9:	53                   	push   ebx
c0017cda:	e8 81 a9 ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017cdf:	83 c4 20             	add    esp,0x20
c0017ce2:	09 f0                	or     eax,esi
c0017ce4:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017ce8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017cec:	25 ff 0f 00 00       	and    eax,0xfff
c0017cf1:	89 c6                	mov    esi,eax
c0017cf3:	e8 22 a1 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0017cf8:	89 c3                	mov    ebx,eax
c0017cfa:	83 ec 0c             	sub    esp,0xc
c0017cfd:	6a 02                	push   0x2
c0017cff:	e8 7b 9e ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0017d04:	83 c4 10             	add    esp,0x10
c0017d07:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017d0b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d11:	83 ec 0c             	sub    esp,0xc
c0017d14:	6a 01                	push   0x1
c0017d16:	6a 02                	push   0x2
c0017d18:	50                   	push   eax
c0017d19:	52                   	push   edx
c0017d1a:	53                   	push   ebx
c0017d1b:	e8 40 a9 ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d20:	83 c4 20             	add    esp,0x20
c0017d23:	09 f0                	or     eax,esi
c0017d25:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017d29:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c0017d2e:	75 11                	jne    c0017d41 <findRSDT(unsigned char*)+0xf5>
c0017d30:	c6 05 00 0e 03 c0 00 	mov    BYTE PTR ds:0xc0030e00,0x0
c0017d37:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017d3b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d3f:	eb 1f                	jmp    c0017d60 <findRSDT(unsigned char*)+0x114>
c0017d41:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017d46:	75 11                	jne    c0017d59 <findRSDT(unsigned char*)+0x10d>
c0017d48:	c6 05 00 0e 03 c0 01 	mov    BYTE PTR ds:0xc0030e00,0x1
c0017d4f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017d53:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017d57:	eb 07                	jmp    c0017d60 <findRSDT(unsigned char*)+0x114>
c0017d59:	b8 00 00 00 00       	mov    eax,0x0
c0017d5e:	eb 04                	jmp    c0017d64 <findRSDT(unsigned char*)+0x118>
c0017d60:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017d64:	83 c4 44             	add    esp,0x44
c0017d67:	5b                   	pop    ebx
c0017d68:	5e                   	pop    esi
c0017d69:	c3                   	ret    

c0017d6a <findDataTable(unsigned char*, char*)>:
c0017d6a:	83 ec 1c             	sub    esp,0x1c
c0017d6d:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017d72:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017d78:	83 e0 04             	and    eax,0x4
c0017d7b:	84 c0                	test   al,al
c0017d7d:	75 07                	jne    c0017d86 <findDataTable(unsigned char*, char*)+0x1c>
c0017d7f:	b8 00 00 00 00       	mov    eax,0x0
c0017d84:	eb 7c                	jmp    c0017e02 <findDataTable(unsigned char*, char*)+0x98>
c0017d86:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017d8e:	a1 ec 0b 03 c0       	mov    eax,ds:0xc0030bec
c0017d93:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017d97:	7d 3a                	jge    c0017dd3 <findDataTable(unsigned char*, char*)+0x69>
c0017d99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d9d:	c1 e0 03             	shl    eax,0x3
c0017da0:	05 00 0c 03 c0       	add    eax,0xc0030c00
c0017da5:	83 ec 04             	sub    esp,0x4
c0017da8:	6a 04                	push   0x4
c0017daa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017dae:	50                   	push   eax
c0017daf:	e8 8c 88 fe ff       	call   c0000640 <memcmp>
c0017db4:	83 c4 10             	add    esp,0x10
c0017db7:	85 c0                	test   eax,eax
c0017db9:	0f 94 c0             	sete   al
c0017dbc:	84 c0                	test   al,al
c0017dbe:	74 0d                	je     c0017dcd <findDataTable(unsigned char*, char*)+0x63>
c0017dc0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dc4:	8b 04 c5 04 0c 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf3fc]
c0017dcb:	eb 35                	jmp    c0017e02 <findDataTable(unsigned char*, char*)+0x98>
c0017dcd:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017dd1:	eb bb                	jmp    c0017d8e <findDataTable(unsigned char*, char*)+0x24>
c0017dd3:	a0 00 0e 03 c0       	mov    al,ds:0xc0030e00
c0017dd8:	84 c0                	test   al,al
c0017dda:	74 07                	je     c0017de3 <findDataTable(unsigned char*, char*)+0x79>
c0017ddc:	b8 58 00 00 00       	mov    eax,0x58
c0017de1:	eb 05                	jmp    c0017de8 <findDataTable(unsigned char*, char*)+0x7e>
c0017de3:	b8 52 00 00 00       	mov    eax,0x52
c0017de8:	83 ec 04             	sub    esp,0x4
c0017deb:	50                   	push   eax
c0017dec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017df0:	68 64 b6 02 c0       	push   0xc002b664
c0017df5:	e8 f5 b1 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0017dfa:	83 c4 10             	add    esp,0x10
c0017dfd:	b8 00 00 00 00       	mov    eax,0x0
c0017e02:	83 c4 1c             	add    esp,0x1c
c0017e05:	c3                   	ret    

c0017e06 <scanMADT()>:
c0017e06:	53                   	push   ebx
c0017e07:	83 ec 38             	sub    esp,0x38
c0017e0a:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017e0f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e15:	83 e0 04             	and    eax,0x4
c0017e18:	84 c0                	test   al,al
c0017e1a:	0f 84 63 04 00 00    	je     c0018283 <scanMADT()+0x47d>
c0017e20:	e8 76 fb ff ff       	call   c001799b <findRSDP()>
c0017e25:	a3 0c 0e 03 c0       	mov    ds:0xc0030e0c,eax
c0017e2a:	a1 0c 0e 03 c0       	mov    eax,ds:0xc0030e0c
c0017e2f:	85 c0                	test   eax,eax
c0017e31:	75 19                	jne    c0017e4c <scanMADT()+0x46>
c0017e33:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017e38:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e3e:	83 e2 fb             	and    edx,0xfffffffb
c0017e41:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e47:	e9 3b 04 00 00       	jmp    c0018287 <scanMADT()+0x481>
c0017e4c:	a1 0c 0e 03 c0       	mov    eax,ds:0xc0030e0c
c0017e51:	83 ec 0c             	sub    esp,0xc
c0017e54:	50                   	push   eax
c0017e55:	e8 f2 fd ff ff       	call   c0017c4c <findRSDT(unsigned char*)>
c0017e5a:	83 c4 10             	add    esp,0x10
c0017e5d:	a3 08 0e 03 c0       	mov    ds:0xc0030e08,eax
c0017e62:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0017e67:	85 c0                	test   eax,eax
c0017e69:	75 19                	jne    c0017e84 <scanMADT()+0x7e>
c0017e6b:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017e70:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e76:	83 e2 fb             	and    edx,0xfffffffb
c0017e79:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e7f:	e9 03 04 00 00       	jmp    c0018287 <scanMADT()+0x481>
c0017e84:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0017e89:	83 ec 0c             	sub    esp,0xc
c0017e8c:	50                   	push   eax
c0017e8d:	e8 93 fb ff ff       	call   c0017a25 <loadACPITables(unsigned char*)>
c0017e92:	83 c4 10             	add    esp,0x10
c0017e95:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c0017e9a:	83 ec 08             	sub    esp,0x8
c0017e9d:	68 32 b5 02 c0       	push   0xc002b532
c0017ea2:	50                   	push   eax
c0017ea3:	e8 c2 fe ff ff       	call   c0017d6a <findDataTable(unsigned char*, char*)>
c0017ea8:	83 c4 10             	add    esp,0x10
c0017eab:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017eaf:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017eb4:	75 19                	jne    c0017ecf <scanMADT()+0xc9>
c0017eb6:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0017ebb:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ec1:	83 e2 fe             	and    edx,0xfffffffe
c0017ec4:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017eca:	e9 b8 03 00 00       	jmp    c0018287 <scanMADT()+0x481>
c0017ecf:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017ed7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017edb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ede:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017ee2:	0f 87 9f 03 00 00    	ja     c0018287 <scanMADT()+0x481>
c0017ee8:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017ef0:	0f 87 91 03 00 00    	ja     c0018287 <scanMADT()+0x481>
c0017ef6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017efa:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017efe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f02:	8d 50 01             	lea    edx,[eax+0x1]
c0017f05:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f09:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f0d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f11:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f15:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f19:	8d 50 01             	lea    edx,[eax+0x1]
c0017f1c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f20:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f24:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f28:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f2c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f31:	0f 86 4f 03 00 00    	jbe    c0018286 <scanMADT()+0x480>
c0017f37:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f3c:	75 57                	jne    c0017f95 <scanMADT()+0x18f>
c0017f3e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f42:	8d 50 01             	lea    edx,[eax+0x1]
c0017f45:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f49:	8a 15 00 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031000
c0017f4f:	0f b6 d2             	movzx  edx,dl
c0017f52:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f56:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f5a:	88 82 40 10 03 c0    	mov    BYTE PTR [edx-0x3ffcefc0],al
c0017f60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f64:	8d 50 01             	lea    edx,[eax+0x1]
c0017f67:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f6b:	8a 15 00 10 03 c0    	mov    dl,BYTE PTR ds:0xc0031000
c0017f71:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017f74:	88 0d 00 10 03 c0    	mov    BYTE PTR ds:0xc0031000,cl
c0017f7a:	0f b6 d2             	movzx  edx,dl
c0017f7d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f81:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f85:	88 82 20 10 03 c0    	mov    BYTE PTR [edx-0x3ffcefe0],al
c0017f8b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017f90:	e9 da 02 00 00       	jmp    c001826f <scanMADT()+0x469>
c0017f95:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017f9a:	0f 85 14 01 00 00    	jne    c00180b4 <scanMADT()+0x2ae>
c0017fa0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fa4:	8d 50 01             	lea    edx,[eax+0x1]
c0017fa7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fab:	8a 15 c0 0e 03 c0    	mov    dl,BYTE PTR ds:0xc0030ec0
c0017fb1:	0f b6 d2             	movzx  edx,dl
c0017fb4:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fb8:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fbc:	88 82 e0 0e 03 c0    	mov    BYTE PTR [edx-0x3ffcf120],al
c0017fc2:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017fc6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fca:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fce:	01 d0                	add    eax,edx
c0017fd0:	83 c0 2c             	add    eax,0x2c
c0017fd3:	8a 00                	mov    al,BYTE PTR [eax]
c0017fd5:	0f b6 d0             	movzx  edx,al
c0017fd8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fdc:	8d 48 01             	lea    ecx,[eax+0x1]
c0017fdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017fe3:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017fe7:	0f b6 c0             	movzx  eax,al
c0017fea:	c1 e0 08             	shl    eax,0x8
c0017fed:	89 d1                	mov    ecx,edx
c0017fef:	09 c1                	or     ecx,eax
c0017ff1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ff5:	8d 50 02             	lea    edx,[eax+0x2]
c0017ff8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ffc:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018000:	0f b6 c0             	movzx  eax,al
c0018003:	c1 e0 10             	shl    eax,0x10
c0018006:	09 c1                	or     ecx,eax
c0018008:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001800c:	8d 50 03             	lea    edx,[eax+0x3]
c001800f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018013:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018017:	0f b6 c0             	movzx  eax,al
c001801a:	c1 e0 18             	shl    eax,0x18
c001801d:	09 c1                	or     ecx,eax
c001801f:	89 ca                	mov    edx,ecx
c0018021:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c0018026:	0f b6 c0             	movzx  eax,al
c0018029:	89 14 85 00 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf100],edx
c0018030:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018035:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018039:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001803d:	01 d0                	add    eax,edx
c001803f:	83 c0 2c             	add    eax,0x2c
c0018042:	8a 00                	mov    al,BYTE PTR [eax]
c0018044:	0f b6 d0             	movzx  edx,al
c0018047:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001804b:	8d 48 01             	lea    ecx,[eax+0x1]
c001804e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018052:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018056:	0f b6 c0             	movzx  eax,al
c0018059:	c1 e0 08             	shl    eax,0x8
c001805c:	89 d1                	mov    ecx,edx
c001805e:	09 c1                	or     ecx,eax
c0018060:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018064:	8d 50 02             	lea    edx,[eax+0x2]
c0018067:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001806b:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001806f:	0f b6 c0             	movzx  eax,al
c0018072:	c1 e0 10             	shl    eax,0x10
c0018075:	09 c1                	or     ecx,eax
c0018077:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001807b:	8d 50 03             	lea    edx,[eax+0x3]
c001807e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018082:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018086:	0f b6 c0             	movzx  eax,al
c0018089:	c1 e0 18             	shl    eax,0x18
c001808c:	09 c1                	or     ecx,eax
c001808e:	89 ca                	mov    edx,ecx
c0018090:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c0018095:	0f b6 c0             	movzx  eax,al
c0018098:	89 14 85 80 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf080],edx
c001809f:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180a4:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c00180a9:	40                   	inc    eax
c00180aa:	a2 c0 0e 03 c0       	mov    ds:0xc0030ec0,al
c00180af:	e9 bb 01 00 00       	jmp    c001826f <scanMADT()+0x469>
c00180b4:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00180b9:	0f 85 e9 00 00 00    	jne    c00181a8 <scanMADT()+0x3a2>
c00180bf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180c3:	8d 50 01             	lea    edx,[eax+0x1]
c00180c6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180ca:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180ce:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180d2:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c00180d6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180da:	8d 50 01             	lea    edx,[eax+0x1]
c00180dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180e1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180e5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180e9:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c00180ed:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180f1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f5:	01 d0                	add    eax,edx
c00180f7:	83 c0 2c             	add    eax,0x2c
c00180fa:	8a 00                	mov    al,BYTE PTR [eax]
c00180fc:	0f b6 d0             	movzx  edx,al
c00180ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018103:	8d 48 01             	lea    ecx,[eax+0x1]
c0018106:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001810a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001810e:	0f b6 c0             	movzx  eax,al
c0018111:	c1 e0 08             	shl    eax,0x8
c0018114:	89 d1                	mov    ecx,edx
c0018116:	09 c1                	or     ecx,eax
c0018118:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001811c:	8d 50 02             	lea    edx,[eax+0x2]
c001811f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018123:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018127:	0f b6 c0             	movzx  eax,al
c001812a:	c1 e0 10             	shl    eax,0x10
c001812d:	09 c1                	or     ecx,eax
c001812f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018133:	8d 50 03             	lea    edx,[eax+0x3]
c0018136:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001813a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001813e:	0f b6 c0             	movzx  eax,al
c0018141:	c1 e0 18             	shl    eax,0x18
c0018144:	09 c8                	or     eax,ecx
c0018146:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001814a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001814f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018153:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018157:	01 d0                	add    eax,edx
c0018159:	83 c0 2c             	add    eax,0x2c
c001815c:	8a 00                	mov    al,BYTE PTR [eax]
c001815e:	0f b6 c0             	movzx  eax,al
c0018161:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018165:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018168:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001816c:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0018170:	0f b6 d2             	movzx  edx,dl
c0018173:	c1 e2 08             	shl    edx,0x8
c0018176:	09 d0                	or     eax,edx
c0018178:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001817d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0018182:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0018187:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001818b:	88 90 80 d7 02 c0    	mov    BYTE PTR [eax-0x3ffd2880],dl
c0018191:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0018196:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c001819b:	66 89 84 12 a0 0e 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf160],ax
c00181a3:	e9 c7 00 00 00       	jmp    c001826f <scanMADT()+0x469>
c00181a8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00181ad:	0f 85 b0 00 00 00    	jne    c0018263 <scanMADT()+0x45d>
c00181b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181b7:	8d 50 01             	lea    edx,[eax+0x1]
c00181ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181be:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181c2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181c6:	0f b6 c0             	movzx  eax,al
c00181c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181cd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181d1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181d5:	01 d0                	add    eax,edx
c00181d7:	83 c0 2c             	add    eax,0x2c
c00181da:	8a 00                	mov    al,BYTE PTR [eax]
c00181dc:	0f b6 d0             	movzx  edx,al
c00181df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e3:	8d 48 01             	lea    ecx,[eax+0x1]
c00181e6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00181ea:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c00181ee:	0f b6 c0             	movzx  eax,al
c00181f1:	c1 e0 08             	shl    eax,0x8
c00181f4:	09 d0                	or     eax,edx
c00181f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00181fa:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018203:	8d 50 01             	lea    edx,[eax+0x1]
c0018206:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001820a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001820e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018212:	0f b6 c0             	movzx  eax,al
c0018215:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018219:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001821d:	c1 e0 08             	shl    eax,0x8
c0018220:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018224:	89 c1                	mov    ecx,eax
c0018226:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001822a:	c1 e0 18             	shl    eax,0x18
c001822d:	89 c3                	mov    ebx,eax
c001822f:	a1 10 0e 03 c0       	mov    eax,ds:0xc0030e10
c0018234:	8d 50 01             	lea    edx,[eax+0x1]
c0018237:	89 15 10 0e 03 c0    	mov    DWORD PTR ds:0xc0030e10,edx
c001823d:	09 d9                	or     ecx,ebx
c001823f:	89 ca                	mov    edx,ecx
c0018241:	89 14 85 20 0e 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf1e0],edx
c0018248:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001824c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0018250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018254:	68 94 b6 02 c0       	push   0xc002b694
c0018259:	e8 91 ad ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001825e:	83 c4 10             	add    esp,0x10
c0018261:	eb 0c                	jmp    c001826f <scanMADT()+0x469>
c0018263:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018268:	75 05                	jne    c001826f <scanMADT()+0x469>
c001826a:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001826f:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0018274:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018278:	01 d0                	add    eax,edx
c001827a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001827e:	e9 54 fc ff ff       	jmp    c0017ed7 <scanMADT()+0xd1>
c0018283:	90                   	nop
c0018284:	eb 01                	jmp    c0018287 <scanMADT()+0x481>
c0018286:	90                   	nop
c0018287:	83 c4 38             	add    esp,0x38
c001828a:	5b                   	pop    ebx
c001828b:	c3                   	ret    

c001828c <ACPI::ACPI()>:
c001828c:	83 ec 0c             	sub    esp,0xc
c001828f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018293:	83 ec 08             	sub    esp,0x8
c0018296:	68 37 b5 02 c0       	push   0xc002b537
c001829b:	50                   	push   eax
c001829c:	e8 65 c3 ff ff       	call   c0014606 <Device::Device(char const*)>
c00182a1:	83 c4 10             	add    esp,0x10
c00182a4:	ba 08 b7 02 c0       	mov    edx,0xc002b708
c00182a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ad:	89 10                	mov    DWORD PTR [eax],edx
c00182af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182b3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00182ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182be:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00182c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182cc:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c00182d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182da:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00182e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e5:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c00182ec:	e8 15 fb ff ff       	call   c0017e06 <scanMADT()>
c00182f1:	90                   	nop
c00182f2:	83 c4 0c             	add    esp,0xc
c00182f5:	c3                   	ret    

c00182f6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c00182f6:	83 ec 2c             	sub    esp,0x2c
c00182f9:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00182fd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018301:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018305:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018309:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001830e:	88 d0                	mov    al,dl
c0018310:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018314:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018319:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0018321:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018325:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001832b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001832f:	0f 8d 97 00 00 00    	jge    c00183cc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018335:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018339:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001833d:	83 c2 2a             	add    edx,0x2a
c0018340:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018344:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018349:	75 78                	jne    c00183c3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001834b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001834f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018353:	83 c2 2a             	add    edx,0x2a
c0018356:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c001835a:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001835e:	75 63                	jne    c00183c3 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018360:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018365:	74 3a                	je     c00183a1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018367:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001836b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001836f:	83 c2 2a             	add    edx,0x2a
c0018372:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0018376:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001837a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001837d:	39 c2                	cmp    edx,eax
c001837f:	74 10                	je     c0018391 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0018381:	83 ec 0c             	sub    esp,0xc
c0018384:	68 d0 b6 02 c0       	push   0xc002b6d0
c0018389:	e8 0f 23 00 00       	call   c001a69d <Krnl::panic(char const*)>
c001838e:	83 c4 10             	add    esp,0x10
c0018391:	83 ec 0c             	sub    esp,0xc
c0018394:	68 3c b5 02 c0       	push   0xc002b53c
c0018399:	e8 ff 22 00 00       	call   c001a69d <Krnl::panic(char const*)>
c001839e:	83 c4 10             	add    esp,0x10
c00183a1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183a9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183ad:	83 c2 2a             	add    edx,0x2a
c00183b0:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183b4:	8b 02                	mov    eax,DWORD PTR [edx]
c00183b6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00183b9:	89 01                	mov    DWORD PTR [ecx],eax
c00183bb:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183be:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183c3:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00183c7:	e9 55 ff ff ff       	jmp    c0018321 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00183cc:	90                   	nop
c00183cd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183d1:	83 c4 2c             	add    esp,0x2c
c00183d4:	c2 04 00             	ret    0x4
c00183d7:	90                   	nop

c00183d8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c00183d8:	83 ec 1c             	sub    esp,0x1c
c00183db:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00183df:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c00183e3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00183e7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00183ec:	88 c8                	mov    al,cl
c00183ee:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00183f2:	88 d0                	mov    al,dl
c00183f4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00183f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00183fc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018402:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018406:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018409:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001840d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0018411:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018415:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001841b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001841f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018422:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018426:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c001842b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001842f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018435:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018439:	8d 48 01             	lea    ecx,[eax+0x1]
c001843c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018440:	83 c2 2a             	add    edx,0x2a
c0018443:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018447:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001844b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018451:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018455:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018458:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001845c:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0018460:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018464:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c001846a:	8d 50 01             	lea    edx,[eax+0x1]
c001846d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018471:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0018477:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001847b:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018481:	3d 00 02 00 00       	cmp    eax,0x200
c0018486:	75 10                	jne    c0018498 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0018488:	83 ec 0c             	sub    esp,0xc
c001848b:	68 4b b5 02 c0       	push   0xc002b54b
c0018490:	e8 08 22 00 00       	call   c001a69d <Krnl::panic(char const*)>
c0018495:	83 c4 10             	add    esp,0x10
c0018498:	90                   	nop
c0018499:	83 c4 1c             	add    esp,0x1c
c001849c:	c3                   	ret    
c001849d:	90                   	nop

c001849e <ACPI::setScreenBrightnessLevel(void*, int)>:
c001849e:	b8 00 00 00 00       	mov    eax,0x0
c00184a3:	c3                   	ret    

c00184a4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184a4:	83 ec 1c             	sub    esp,0x1c
c00184a7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184ab:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00184ae:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184b2:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00184b7:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184bc:	83 ec 08             	sub    esp,0x8
c00184bf:	52                   	push   edx
c00184c0:	50                   	push   eax
c00184c1:	e8 92 69 ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c00184c6:	83 c4 10             	add    esp,0x10
c00184c9:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184cd:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00184d2:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184d7:	83 ec 04             	sub    esp,0x4
c00184da:	6a 01                	push   0x1
c00184dc:	52                   	push   edx
c00184dd:	50                   	push   eax
c00184de:	e8 8b 6a ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c00184e3:	83 c4 10             	add    esp,0x10
c00184e6:	90                   	nop
c00184e7:	83 c4 1c             	add    esp,0x1c
c00184ea:	c3                   	ret    
c00184eb:	90                   	nop

c00184ec <ACPI::open(int, int, void*)>:
c00184ec:	53                   	push   ebx
c00184ed:	83 ec 28             	sub    esp,0x28
c00184f0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184f4:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c00184fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ff:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018506:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001850b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018511:	83 e0 04             	and    eax,0x4
c0018514:	84 c0                	test   al,al
c0018516:	74 47                	je     c001855f <ACPI::open(int, int, void*)+0x73>
c0018518:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c001851d:	83 ec 08             	sub    esp,0x8
c0018520:	68 68 b5 02 c0       	push   0xc002b568
c0018525:	50                   	push   eax
c0018526:	e8 3f f8 ff ff       	call   c0017d6a <findDataTable(unsigned char*, char*)>
c001852b:	83 c4 10             	add    esp,0x10
c001852e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018532:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018537:	74 26                	je     c001855f <ACPI::open(int, int, void*)+0x73>
c0018539:	83 ec 0c             	sub    esp,0xc
c001853c:	68 6d b5 02 c0       	push   0xc002b56d
c0018541:	e8 a9 aa ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018546:	83 c4 10             	add    esp,0x10
c0018549:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001854d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018554:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018558:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001855f:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c0018567:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001856b:	8a 00                	mov    al,BYTE PTR [eax]
c001856d:	3c 01                	cmp    al,0x1
c001856f:	75 28                	jne    c0018599 <ACPI::open(int, int, void*)+0xad>
c0018571:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018575:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001857c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018580:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018587:	83 ec 0c             	sub    esp,0xc
c001858a:	68 7e b5 02 c0       	push   0xc002b57e
c001858f:	e8 5b aa ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018594:	83 c4 10             	add    esp,0x10
c0018597:	eb 25                	jmp    c00185be <ACPI::open(int, int, void*)+0xd2>
c0018599:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001859d:	8a 00                	mov    al,BYTE PTR [eax]
c001859f:	3c 02                	cmp    al,0x2
c00185a1:	75 1b                	jne    c00185be <ACPI::open(int, int, void*)+0xd2>
c00185a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185a7:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185ae:	83 ec 0c             	sub    esp,0xc
c00185b1:	68 86 b5 02 c0       	push   0xc002b586
c00185b6:	e8 34 aa ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00185bb:	83 c4 10             	add    esp,0x10
c00185be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185c2:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00185c8:	83 f0 01             	xor    eax,0x1
c00185cb:	84 c0                	test   al,al
c00185cd:	74 6a                	je     c0018639 <ACPI::open(int, int, void*)+0x14d>
c00185cf:	83 ec 0c             	sub    esp,0xc
c00185d2:	68 8e b5 02 c0       	push   0xc002b58e
c00185d7:	e8 13 aa ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00185dc:	83 c4 10             	add    esp,0x10
c00185df:	e8 6c 7b fe ff       	call   c0000150 <manualPCIProbe>
c00185e4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185e8:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c00185ed:	75 28                	jne    c0018617 <ACPI::open(int, int, void*)+0x12b>
c00185ef:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185f3:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185fa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00185fe:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018605:	83 ec 0c             	sub    esp,0xc
c0018608:	68 9c b5 02 c0       	push   0xc002b59c
c001860d:	e8 dd a9 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018612:	83 c4 10             	add    esp,0x10
c0018615:	eb 22                	jmp    c0018639 <ACPI::open(int, int, void*)+0x14d>
c0018617:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001861c:	75 1b                	jne    c0018639 <ACPI::open(int, int, void*)+0x14d>
c001861e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018622:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018629:	83 ec 0c             	sub    esp,0xc
c001862c:	68 a6 b5 02 c0       	push   0xc002b5a6
c0018631:	e8 b9 a9 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018636:	83 c4 10             	add    esp,0x10
c0018639:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001863d:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018643:	84 c0                	test   al,al
c0018645:	74 13                	je     c001865a <ACPI::open(int, int, void*)+0x16e>
c0018647:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001864b:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018651:	83 f0 01             	xor    eax,0x1
c0018654:	0f b6 c0             	movzx  eax,al
c0018657:	40                   	inc    eax
c0018658:	eb 05                	jmp    c001865f <ACPI::open(int, int, void*)+0x173>
c001865a:	b8 00 00 00 00       	mov    eax,0x0
c001865f:	83 ec 08             	sub    esp,0x8
c0018662:	50                   	push   eax
c0018663:	68 b0 b5 02 c0       	push   0xc002b5b0
c0018668:	e8 82 a9 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001866d:	83 c4 10             	add    esp,0x10
c0018670:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018674:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001867a:	84 c0                	test   al,al
c001867c:	74 67                	je     c00186e5 <ACPI::open(int, int, void*)+0x1f9>
c001867e:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c0018686:	83 ec 0c             	sub    esp,0xc
c0018689:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001868d:	e8 b1 71 ff ff       	call   c000f843 <malloc>
c0018692:	83 c4 10             	add    esp,0x10
c0018695:	89 c3                	mov    ebx,eax
c0018697:	83 ec 0c             	sub    esp,0xc
c001869a:	53                   	push   ebx
c001869b:	e8 f6 a2 00 00       	call   c0022996 <PCI::PCI()>
c00186a0:	83 c4 10             	add    esp,0x10
c00186a3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00186a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00186ab:	83 ec 08             	sub    esp,0x8
c00186ae:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00186b2:	50                   	push   eax
c00186b3:	e8 5e bd ff ff       	call   c0014416 <Device::addChild(Device*)>
c00186b8:	83 c4 10             	add    esp,0x10
c00186bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00186bf:	8b 00                	mov    eax,DWORD PTR [eax]
c00186c1:	83 c0 08             	add    eax,0x8
c00186c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00186c6:	6a 00                	push   0x0
c00186c8:	6a 00                	push   0x0
c00186ca:	6a 00                	push   0x0
c00186cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186d0:	ff d0                	call   eax
c00186d2:	83 c4 10             	add    esp,0x10
c00186d5:	83 ec 0c             	sub    esp,0xc
c00186d8:	68 b9 b5 02 c0       	push   0xc002b5b9
c00186dd:	e8 0d a9 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00186e2:	83 c4 10             	add    esp,0x10
c00186e5:	83 ec 0c             	sub    esp,0xc
c00186e8:	68 c4 b5 02 c0       	push   0xc002b5c4
c00186ed:	e8 81 46 00 00       	call   c001cd73 <Thr::loadKernelSymbolTable(char const*)>
c00186f2:	83 c4 10             	add    esp,0x10
c00186f5:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c00186fb:	83 ec 08             	sub    esp,0x8
c00186fe:	6a 01                	push   0x1
c0018700:	68 e2 b5 02 c0       	push   0xc002b5e2
c0018705:	e8 c6 50 00 00       	call   c001d7d0 <Thr::loadDLL(char const*, bool)>
c001870a:	83 c4 10             	add    esp,0x10
c001870d:	83 ec 08             	sub    esp,0x8
c0018710:	53                   	push   ebx
c0018711:	50                   	push   eax
c0018712:	e8 08 53 00 00       	call   c001da1f <Thr::executeDLL(unsigned long, void*)>
c0018717:	83 c4 10             	add    esp,0x10
c001871a:	8b 1d 28 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e528
c0018720:	83 ec 08             	sub    esp,0x8
c0018723:	6a 01                	push   0x1
c0018725:	68 ff b5 02 c0       	push   0xc002b5ff
c001872a:	e8 a1 50 00 00       	call   c001d7d0 <Thr::loadDLL(char const*, bool)>
c001872f:	83 c4 10             	add    esp,0x10
c0018732:	83 ec 08             	sub    esp,0x8
c0018735:	53                   	push   ebx
c0018736:	50                   	push   eax
c0018737:	e8 e3 52 00 00       	call   c001da1f <Thr::executeDLL(unsigned long, void*)>
c001873c:	83 c4 10             	add    esp,0x10
c001873f:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0018744:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001874a:	83 e0 04             	and    eax,0x4
c001874d:	84 c0                	test   al,al
c001874f:	0f 84 d2 00 00 00    	je     c0018827 <ACPI::open(int, int, void*)+0x33b>
c0018755:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001875c:	83 ec 0c             	sub    esp,0xc
c001875f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018763:	e8 db 70 ff ff       	call   c000f843 <malloc>
c0018768:	83 c4 10             	add    esp,0x10
c001876b:	89 c3                	mov    ebx,eax
c001876d:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c0018772:	83 ec 04             	sub    esp,0x4
c0018775:	50                   	push   eax
c0018776:	68 1c b6 02 c0       	push   0xc002b61c
c001877b:	53                   	push   ebx
c001877c:	e8 c7 ad ff ff       	call   c0013548 <File::File(char const*, Process*)>
c0018781:	83 c4 10             	add    esp,0x10
c0018784:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0018788:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001878d:	74 17                	je     c00187a6 <ACPI::open(int, int, void*)+0x2ba>
c001878f:	83 ec 0c             	sub    esp,0xc
c0018792:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018796:	e8 7f b0 ff ff       	call   c001381a <File::exists()>
c001879b:	83 c4 10             	add    esp,0x10
c001879e:	84 c0                	test   al,al
c00187a0:	74 04                	je     c00187a6 <ACPI::open(int, int, void*)+0x2ba>
c00187a2:	b0 01                	mov    al,0x1
c00187a4:	eb 02                	jmp    c00187a8 <ACPI::open(int, int, void*)+0x2bc>
c00187a6:	b0 00                	mov    al,0x0
c00187a8:	84 c0                	test   al,al
c00187aa:	74 22                	je     c00187ce <ACPI::open(int, int, void*)+0x2e2>
c00187ac:	83 ec 08             	sub    esp,0x8
c00187af:	6a 01                	push   0x1
c00187b1:	68 1c b6 02 c0       	push   0xc002b61c
c00187b6:	e8 15 50 00 00       	call   c001d7d0 <Thr::loadDLL(char const*, bool)>
c00187bb:	83 c4 10             	add    esp,0x10
c00187be:	83 ec 08             	sub    esp,0x8
c00187c1:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00187c5:	50                   	push   eax
c00187c6:	e8 54 52 00 00       	call   c001da1f <Thr::executeDLL(unsigned long, void*)>
c00187cb:	83 c4 10             	add    esp,0x10
c00187ce:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187d3:	74 1e                	je     c00187f3 <ACPI::open(int, int, void*)+0x307>
c00187d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00187da:	74 17                	je     c00187f3 <ACPI::open(int, int, void*)+0x307>
c00187dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00187e0:	8b 00                	mov    eax,DWORD PTR [eax]
c00187e2:	83 c0 08             	add    eax,0x8
c00187e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00187e7:	83 ec 0c             	sub    esp,0xc
c00187ea:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00187ee:	ff d0                	call   eax
c00187f0:	83 c4 10             	add    esp,0x10
c00187f3:	a1 08 0e 03 c0       	mov    eax,ds:0xc0030e08
c00187f8:	83 ec 08             	sub    esp,0x8
c00187fb:	68 39 b6 02 c0       	push   0xc002b639
c0018800:	50                   	push   eax
c0018801:	e8 64 f5 ff ff       	call   c0017d6a <findDataTable(unsigned char*, char*)>
c0018806:	83 c4 10             	add    esp,0x10
c0018809:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001880d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018812:	74 13                	je     c0018827 <ACPI::open(int, int, void*)+0x33b>
c0018814:	83 ec 08             	sub    esp,0x8
c0018817:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001881b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001881f:	e8 80 fc ff ff       	call   c00184a4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018824:	83 c4 10             	add    esp,0x10
c0018827:	b8 00 00 00 00       	mov    eax,0x0
c001882c:	83 c4 28             	add    esp,0x28
c001882f:	5b                   	pop    ebx
c0018830:	c3                   	ret    
c0018831:	90                   	nop

c0018832 <ACPI::sleep()>:
c0018832:	83 ec 0c             	sub    esp,0xc
c0018835:	a1 e0 0b 03 c0       	mov    eax,ds:0xc0030be0
c001883a:	85 c0                	test   eax,eax
c001883c:	74 07                	je     c0018845 <ACPI::sleep()+0x13>
c001883e:	a1 e0 0b 03 c0       	mov    eax,ds:0xc0030be0
c0018843:	ff d0                	call   eax
c0018845:	90                   	nop
c0018846:	83 c4 0c             	add    esp,0xc
c0018849:	c3                   	ret    

c001884a <CPU::close(int, int, void*)>:
c001884a:	31 c0                	xor    eax,eax
c001884c:	c3                   	ret    
c001884d:	90                   	nop

c001884e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001884e:	55                   	push   ebp
c001884f:	57                   	push   edi
c0018850:	56                   	push   esi
c0018851:	53                   	push   ebx
c0018852:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0018856:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001885a:	89 ce                	mov    esi,ecx
c001885c:	89 d5                	mov    ebp,edx
c001885e:	80 f9 04             	cmp    cl,0x4
c0018861:	75 28                	jne    c001888b <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c0018863:	8d 42 f9             	lea    eax,[edx-0x7]
c0018866:	3c 03                	cmp    al,0x3
c0018868:	0f 86 63 01 00 00    	jbe    c00189d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c001886e:	80 fa 03             	cmp    dl,0x3
c0018871:	0f 84 5a 01 00 00    	je     c00189d1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c0018877:	8d 7a f2             	lea    edi,[edx-0xe]
c001887a:	b8 50 d9 02 c0       	mov    eax,0xc002d950
c001887f:	89 fb                	mov    ebx,edi
c0018881:	80 fb 01             	cmp    bl,0x1
c0018884:	77 4e                	ja     c00188d4 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018886:	e9 52 01 00 00       	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001888b:	80 f9 05             	cmp    cl,0x5
c001888e:	75 4d                	jne    c00188dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018890:	b8 60 d9 02 c0       	mov    eax,0xc002d960
c0018895:	80 fa 03             	cmp    dl,0x3
c0018898:	0f 86 3f 01 00 00    	jbe    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001889e:	8d 7a fa             	lea    edi,[edx-0x6]
c00188a1:	b8 70 d9 02 c0       	mov    eax,0xc002d970
c00188a6:	89 fb                	mov    ebx,edi
c00188a8:	80 fb 01             	cmp    bl,0x1
c00188ab:	0f 86 2c 01 00 00    	jbe    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188b1:	b8 80 d9 02 c0       	mov    eax,0xc002d980
c00188b6:	80 fa 08             	cmp    dl,0x8
c00188b9:	0f 84 1e 01 00 00    	je     c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188bf:	89 d7                	mov    edi,edx
c00188c1:	b8 90 d9 02 c0       	mov    eax,0xc002d990
c00188c6:	83 e7 fb             	and    edi,0xfffffffb
c00188c9:	89 fb                	mov    ebx,edi
c00188cb:	80 fb 09             	cmp    bl,0x9
c00188ce:	0f 84 09 01 00 00    	je     c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188d4:	31 c0                	xor    eax,eax
c00188d6:	89 eb                	mov    ebx,ebp
c00188d8:	0f b6 fb             	movzx  edi,bl
c00188db:	eb 30                	jmp    c001890d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c00188dd:	31 c0                	xor    eax,eax
c00188df:	80 f9 06             	cmp    cl,0x6
c00188e2:	75 f2                	jne    c00188d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188e4:	80 fa 0a             	cmp    dl,0xa
c00188e7:	77 ed                	ja     c00188d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188e9:	bf de 05 00 00       	mov    edi,0x5de
c00188ee:	0f a3 d7             	bt     edi,edx
c00188f1:	73 e3                	jae    c00188d6 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c00188f3:	b8 a0 d9 02 c0       	mov    eax,0xc002d9a0
c00188f8:	e9 e0 00 00 00       	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00188fd:	39 c7                	cmp    edi,eax
c00188ff:	0f 84 d3 00 00 00    	je     c00189d8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018905:	40                   	inc    eax
c0018906:	3d d0 00 00 00       	cmp    eax,0xd0
c001890b:	74 09                	je     c0018916 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001890d:	89 f3                	mov    ebx,esi
c001890f:	80 fb 0f             	cmp    bl,0xf
c0018912:	75 f1                	jne    c0018905 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018914:	eb e7                	jmp    c00188fd <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018916:	80 f9 10             	cmp    cl,0x10
c0018919:	75 14                	jne    c001892f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001891b:	8d 42 fc             	lea    eax,[edx-0x4]
c001891e:	83 e0 fb             	and    eax,0xfffffffb
c0018921:	3c 02                	cmp    al,0x2
c0018923:	76 34                	jbe    c0018959 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018925:	b8 1e ba 02 c0       	mov    eax,0xc002ba1e
c001892a:	80 fa 02             	cmp    dl,0x2
c001892d:	eb 24                	jmp    c0018953 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001892f:	80 f9 11             	cmp    cl,0x11
c0018932:	75 13                	jne    c0018947 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018934:	b8 1e ba 02 c0       	mov    eax,0xc002ba1e
c0018939:	80 fa 03             	cmp    dl,0x3
c001893c:	0f 85 9b 00 00 00    	jne    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018942:	e9 91 00 00 00       	jmp    c00189d8 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018947:	80 f9 12             	cmp    cl,0x12
c001894a:	75 14                	jne    c0018960 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001894c:	b8 1e ba 02 c0       	mov    eax,0xc002ba1e
c0018951:	fe ca                	dec    dl
c0018953:	0f 85 84 00 00 00    	jne    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018959:	b8 c0 d9 02 c0       	mov    eax,0xc002d9c0
c001895e:	eb 7d                	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018960:	80 f9 14             	cmp    cl,0x14
c0018963:	75 12                	jne    c0018977 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018965:	4a                   	dec    edx
c0018966:	b8 1e ba 02 c0       	mov    eax,0xc002ba1e
c001896b:	80 fa 01             	cmp    dl,0x1
c001896e:	77 6d                	ja     c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018970:	b8 d0 d9 02 c0       	mov    eax,0xc002d9d0
c0018975:	eb 66                	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018977:	80 f9 15             	cmp    cl,0x15
c001897a:	75 31                	jne    c00189ad <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c001897c:	b8 e0 d9 02 c0       	mov    eax,0xc002d9e0
c0018981:	80 fa 01             	cmp    dl,0x1
c0018984:	74 57                	je     c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018986:	b8 1e ba 02 c0       	mov    eax,0xc002ba1e
c001898b:	80 fa 13             	cmp    dl,0x13
c001898e:	76 0c                	jbe    c001899c <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018990:	80 fa 30             	cmp    dl,0x30
c0018993:	75 48                	jne    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018995:	b8 00 da 02 c0       	mov    eax,0xc002da00
c001899a:	eb 41                	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001899c:	b9 04 00 09 00       	mov    ecx,0x90004
c00189a1:	0f a3 d1             	bt     ecx,edx
c00189a4:	73 37                	jae    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189a6:	b8 f0 d9 02 c0       	mov    eax,0xc002d9f0
c00189ab:	eb 30                	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ad:	b8 1e ba 02 c0       	mov    eax,0xc002ba1e
c00189b2:	80 f9 16             	cmp    cl,0x16
c00189b5:	75 26                	jne    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189b7:	b8 10 da 02 c0       	mov    eax,0xc002da10
c00189bc:	84 d2                	test   dl,dl
c00189be:	74 1d                	je     c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189c0:	b8 1e ba 02 c0       	mov    eax,0xc002ba1e
c00189c5:	80 fa 30             	cmp    dl,0x30
c00189c8:	75 13                	jne    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189ca:	b8 20 da 02 c0       	mov    eax,0xc002da20
c00189cf:	eb 0c                	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189d1:	b8 40 d9 02 c0       	mov    eax,0xc002d940
c00189d6:	eb 05                	jmp    c00189dd <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00189d8:	b8 b0 d9 02 c0       	mov    eax,0xc002d9b0
c00189dd:	5b                   	pop    ebx
c00189de:	5e                   	pop    esi
c00189df:	5f                   	pop    edi
c00189e0:	5d                   	pop    ebp
c00189e1:	c3                   	ret    

c00189e2 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c00189e2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00189e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00189ea:	80 f9 04             	cmp    cl,0x4
c00189ed:	75 6b                	jne    c0018a5a <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c00189ef:	b8 a0 d7 02 c0       	mov    eax,0xc002d7a0
c00189f4:	80 fa 01             	cmp    dl,0x1
c00189f7:	0f 86 92 02 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00189fd:	b8 b0 d7 02 c0       	mov    eax,0xc002d7b0
c0018a02:	80 fa 02             	cmp    dl,0x2
c0018a05:	0f 84 84 02 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a0b:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018a10:	80 fa 03             	cmp    dl,0x3
c0018a13:	0f 84 76 02 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a19:	b8 d0 d7 02 c0       	mov    eax,0xc002d7d0
c0018a1e:	80 fa 04             	cmp    dl,0x4
c0018a21:	0f 84 68 02 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a27:	b8 e0 d7 02 c0       	mov    eax,0xc002d7e0
c0018a2c:	80 fa 05             	cmp    dl,0x5
c0018a2f:	0f 84 5a 02 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a35:	b8 c0 d7 02 c0       	mov    eax,0xc002d7c0
c0018a3a:	80 fa 07             	cmp    dl,0x7
c0018a3d:	0f 84 4c 02 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a43:	83 ea 08             	sub    edx,0x8
c0018a46:	b8 1e ba 02 c0       	mov    eax,0xc002ba1e
c0018a4b:	80 fa 01             	cmp    dl,0x1
c0018a4e:	0f 87 3b 02 00 00    	ja     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a54:	b8 f0 d7 02 c0       	mov    eax,0xc002d7f0
c0018a59:	c3                   	ret    
c0018a5a:	80 f9 05             	cmp    cl,0x5
c0018a5d:	75 45                	jne    c0018aa4 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018a5f:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018a62:	b8 00 d8 02 c0       	mov    eax,0xc002d800
c0018a67:	80 f9 02             	cmp    cl,0x2
c0018a6a:	0f 86 1f 02 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a70:	80 fa 04             	cmp    dl,0x4
c0018a73:	0f 84 f3 01 00 00    	je     c0018c6c <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018a79:	80 fa 07             	cmp    dl,0x7
c0018a7c:	0f 84 0d 02 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a82:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018a87:	80 fa 08             	cmp    dl,0x8
c0018a8a:	0f 84 ff 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a90:	b8 1e ba 02 c0       	mov    eax,0xc002ba1e
c0018a95:	80 fa 09             	cmp    dl,0x9
c0018a98:	0f 85 f1 01 00 00    	jne    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018a9e:	b8 20 d8 02 c0       	mov    eax,0xc002d820
c0018aa3:	c3                   	ret    
c0018aa4:	80 f9 06             	cmp    cl,0x6
c0018aa7:	0f 85 85 01 00 00    	jne    c0018c32 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018aad:	b8 30 d8 02 c0       	mov    eax,0xc002d830
c0018ab2:	80 fa 01             	cmp    dl,0x1
c0018ab5:	0f 84 d4 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018abb:	8d 42 fb             	lea    eax,[edx-0x5]
c0018abe:	3c 01                	cmp    al,0x1
c0018ac0:	0f 86 ac 01 00 00    	jbe    c0018c72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018ac6:	80 fa 03             	cmp    dl,0x3
c0018ac9:	0f 84 a3 01 00 00    	je     c0018c72 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018acf:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018ad2:	b8 50 d8 02 c0       	mov    eax,0xc002d850
c0018ad7:	80 f9 01             	cmp    cl,0x1
c0018ada:	0f 86 af 01 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ae0:	80 fa 09             	cmp    dl,0x9
c0018ae3:	0f 84 8f 01 00 00    	je     c0018c78 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018ae9:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018aec:	80 f9 01             	cmp    cl,0x1
c0018aef:	0f 86 9a 01 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018af5:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018afa:	80 fa 0d             	cmp    dl,0xd
c0018afd:	0f 84 8c 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b03:	b8 70 d8 02 c0       	mov    eax,0xc002d870
c0018b08:	80 fa 0e             	cmp    dl,0xe
c0018b0b:	0f 84 7e 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b11:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018b16:	80 fa 0f             	cmp    dl,0xf
c0018b19:	0f 84 70 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b1f:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018b24:	80 fa 15             	cmp    dl,0x15
c0018b27:	0f 84 62 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b2d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018b30:	b8 80 d8 02 c0       	mov    eax,0xc002d880
c0018b35:	80 f9 01             	cmp    cl,0x1
c0018b38:	0f 86 51 01 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b3e:	80 fa 1a             	cmp    dl,0x1a
c0018b41:	0f 84 37 01 00 00    	je     c0018c7e <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018b47:	80 fa 1c             	cmp    dl,0x1c
c0018b4a:	0f 84 34 01 00 00    	je     c0018c84 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018b50:	80 fa 1d             	cmp    dl,0x1d
c0018b53:	0f 84 36 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b59:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018b5e:	80 fa 25             	cmp    dl,0x25
c0018b61:	0f 84 28 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b67:	8d 4a da             	lea    ecx,[edx-0x26]
c0018b6a:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018b6f:	80 f9 01             	cmp    cl,0x1
c0018b72:	0f 86 17 01 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b78:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018b7d:	80 fa 2a             	cmp    dl,0x2a
c0018b80:	0f 84 09 01 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b86:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018b8b:	80 fa 2c             	cmp    dl,0x2c
c0018b8e:	0f 84 fb 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b94:	b8 c0 d8 02 c0       	mov    eax,0xc002d8c0
c0018b99:	80 fa 2d             	cmp    dl,0x2d
c0018b9c:	0f 84 ed 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba2:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018ba7:	80 fa 2e             	cmp    dl,0x2e
c0018baa:	0f 84 df 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bb0:	b8 b0 d8 02 c0       	mov    eax,0xc002d8b0
c0018bb5:	80 fa 2f             	cmp    dl,0x2f
c0018bb8:	0f 84 d1 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbe:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018bc1:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018bc6:	80 f9 01             	cmp    cl,0x1
c0018bc9:	0f 86 c0 00 00 00    	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bcf:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018bd4:	80 fa 37             	cmp    dl,0x37
c0018bd7:	0f 84 b2 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bdd:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018be2:	80 fa 3a             	cmp    dl,0x3a
c0018be5:	0f 84 a4 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018beb:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018bf0:	80 fa 3c             	cmp    dl,0x3c
c0018bf3:	0f 84 96 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bf9:	b8 00 d9 02 c0       	mov    eax,0xc002d900
c0018bfe:	80 fa 3d             	cmp    dl,0x3d
c0018c01:	0f 84 88 00 00 00    	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c07:	b8 e0 d8 02 c0       	mov    eax,0xc002d8e0
c0018c0c:	80 fa 3e             	cmp    dl,0x3e
c0018c0f:	74 7e                	je     c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c11:	8d 42 bb             	lea    eax,[edx-0x45]
c0018c14:	3c 01                	cmp    al,0x1
c0018c16:	76 72                	jbe    c0018c8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c18:	80 fa 3f             	cmp    dl,0x3f
c0018c1b:	74 6d                	je     c0018c8a <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018c1d:	80 fa 4a             	cmp    dl,0x4a
c0018c20:	74 0a                	je     c0018c2c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018c22:	b8 1e ba 02 c0       	mov    eax,0xc002ba1e
c0018c27:	80 fa 4d             	cmp    dl,0x4d
c0018c2a:	75 63                	jne    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c2c:	b8 d0 d8 02 c0       	mov    eax,0xc002d8d0
c0018c31:	c3                   	ret    
c0018c32:	b8 1e ba 02 c0       	mov    eax,0xc002ba1e
c0018c37:	80 f9 0b             	cmp    cl,0xb
c0018c3a:	75 0a                	jne    c0018c46 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018c3c:	fe ca                	dec    dl
c0018c3e:	75 4f                	jne    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c40:	b8 10 d9 02 c0       	mov    eax,0xc002d910
c0018c45:	c3                   	ret    
c0018c46:	80 f9 0f             	cmp    cl,0xf
c0018c49:	75 44                	jne    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c4b:	b8 20 d9 02 c0       	mov    eax,0xc002d920
c0018c50:	80 fa 02             	cmp    dl,0x2
c0018c53:	76 3a                	jbe    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c55:	8d 42 fd             	lea    eax,[edx-0x3]
c0018c58:	3c 01                	cmp    al,0x1
c0018c5a:	76 0a                	jbe    c0018c66 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018c5c:	b8 1e ba 02 c0       	mov    eax,0xc002ba1e
c0018c61:	80 fa 06             	cmp    dl,0x6
c0018c64:	75 29                	jne    c0018c8f <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c66:	b8 30 d9 02 c0       	mov    eax,0xc002d930
c0018c6b:	c3                   	ret    
c0018c6c:	b8 10 d8 02 c0       	mov    eax,0xc002d810
c0018c71:	c3                   	ret    
c0018c72:	b8 40 d8 02 c0       	mov    eax,0xc002d840
c0018c77:	c3                   	ret    
c0018c78:	b8 60 d8 02 c0       	mov    eax,0xc002d860
c0018c7d:	c3                   	ret    
c0018c7e:	b8 90 d8 02 c0       	mov    eax,0xc002d890
c0018c83:	c3                   	ret    
c0018c84:	b8 a0 d8 02 c0       	mov    eax,0xc002d8a0
c0018c89:	c3                   	ret    
c0018c8a:	b8 f0 d8 02 c0       	mov    eax,0xc002d8f0
c0018c8f:	c3                   	ret    

c0018c90 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018c90:	60                   	pusha  
c0018c91:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018c95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018c99:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018c9d:	9c                   	pushf  
c0018c9e:	fa                   	cli    
c0018c9f:	0f 09                	wbinvd 
c0018ca1:	0f 30                	wrmsr  
c0018ca3:	9d                   	popf   
c0018ca4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018ca8:	89 02                	mov    DWORD PTR [edx],eax
c0018caa:	61                   	popa   
c0018cab:	c3                   	ret    

c0018cac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018cac:	60                   	pusha  
c0018cad:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018cb1:	9c                   	pushf  
c0018cb2:	fa                   	cli    
c0018cb3:	0f 09                	wbinvd 
c0018cb5:	31 c0                	xor    eax,eax
c0018cb7:	31 d2                	xor    edx,edx
c0018cb9:	0f 32                	rdmsr  
c0018cbb:	9d                   	popf   
c0018cbc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018cc0:	89 02                	mov    DWORD PTR [edx],eax
c0018cc2:	61                   	popa   
c0018cc3:	c3                   	ret    

c0018cc4 <CPU::AMD_K6_writeback(int, int, int)>:
c0018cc4:	56                   	push   esi
c0018cc5:	53                   	push   ebx
c0018cc6:	83 ec 10             	sub    esp,0x10
c0018cc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018ccd:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018cd2:	75 5d                	jne    c0018d31 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cd4:	83 f8 08             	cmp    eax,0x8
c0018cd7:	75 09                	jne    c0018ce2 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018cd9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018cde:	7e 13                	jle    c0018cf3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018ce0:	eb 30                	jmp    c0018d12 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018ce2:	83 f8 06             	cmp    eax,0x6
c0018ce5:	7c 4a                	jl     c0018d31 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018ce7:	83 f8 07             	cmp    eax,0x7
c0018cea:	7e 07                	jle    c0018cf3 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018cec:	83 f8 09             	cmp    eax,0x9
c0018cef:	74 21                	je     c0018d12 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018cf1:	eb 3e                	jmp    c0018d31 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018cf3:	89 e6                	mov    esi,esp
c0018cf5:	8b 1d 68 e5 02 c0    	mov    ebx,DWORD PTR ds:0xc002e568
c0018cfb:	56                   	push   esi
c0018cfc:	c1 eb 15             	shr    ebx,0x15
c0018cff:	68 82 00 00 c0       	push   0xc0000082
c0018d04:	83 e3 7e             	and    ebx,0x7e
c0018d07:	e8 a0 ff ff ff       	call   c0018cac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d0c:	56                   	push   esi
c0018d0d:	6a 00                	push   0x0
c0018d0f:	53                   	push   ebx
c0018d10:	eb 12                	jmp    c0018d24 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018d12:	89 e3                	mov    ebx,esp
c0018d14:	53                   	push   ebx
c0018d15:	68 82 00 00 c0       	push   0xc0000082
c0018d1a:	e8 8d ff ff ff       	call   c0018cac <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018d1f:	53                   	push   ebx
c0018d20:	6a 00                	push   0x0
c0018d22:	6a 00                	push   0x0
c0018d24:	68 82 00 00 c0       	push   0xc0000082
c0018d29:	e8 62 ff ff ff       	call   c0018c90 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018d2e:	83 c4 18             	add    esp,0x18
c0018d31:	83 c4 10             	add    esp,0x10
c0018d34:	5b                   	pop    ebx
c0018d35:	5e                   	pop    esi
c0018d36:	c3                   	ret    
c0018d37:	90                   	nop

c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018d38:	55                   	push   ebp
c0018d39:	57                   	push   edi
c0018d3a:	56                   	push   esi
c0018d3b:	53                   	push   ebx
c0018d3c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d40:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018d44:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018d48:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018d4c:	39 05 40 da 02 c0    	cmp    DWORD PTR ds:0xc002da40,eax
c0018d52:	75 23                	jne    c0018d77 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018d54:	a1 6c 10 03 c0       	mov    eax,ds:0xc003106c
c0018d59:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018d5d:	89 06                	mov    DWORD PTR [esi],eax
c0018d5f:	a1 68 10 03 c0       	mov    eax,ds:0xc0031068
c0018d64:	89 07                	mov    DWORD PTR [edi],eax
c0018d66:	a1 64 10 03 c0       	mov    eax,ds:0xc0031064
c0018d6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018d6e:	a1 60 10 03 c0       	mov    eax,ds:0xc0031060
c0018d73:	89 02                	mov    DWORD PTR [edx],eax
c0018d75:	eb 3f                	jmp    c0018db6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018d77:	31 c9                	xor    ecx,ecx
c0018d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d7d:	0f a2                	cpuid  
c0018d7f:	89 06                	mov    DWORD PTR [esi],eax
c0018d81:	89 1f                	mov    DWORD PTR [edi],ebx
c0018d83:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018d87:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018d8a:	89 10                	mov    DWORD PTR [eax],edx
c0018d8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018d90:	a3 40 da 02 c0       	mov    ds:0xc002da40,eax
c0018d95:	8b 06                	mov    eax,DWORD PTR [esi]
c0018d97:	a3 6c 10 03 c0       	mov    ds:0xc003106c,eax
c0018d9c:	8b 07                	mov    eax,DWORD PTR [edi]
c0018d9e:	a3 68 10 03 c0       	mov    ds:0xc0031068,eax
c0018da3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018da6:	a3 64 10 03 c0       	mov    ds:0xc0031064,eax
c0018dab:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018daf:	8b 00                	mov    eax,DWORD PTR [eax]
c0018db1:	a3 60 10 03 c0       	mov    ds:0xc0031060,eax
c0018db6:	5b                   	pop    ebx
c0018db7:	5e                   	pop    esi
c0018db8:	5f                   	pop    edi
c0018db9:	5d                   	pop    ebp
c0018dba:	c3                   	ret    
c0018dbb:	90                   	nop

c0018dbc <CPU::cpuidCheckEDX(unsigned int)>:
c0018dbc:	83 ec 10             	sub    esp,0x10
c0018dbf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc3:	50                   	push   eax
c0018dc4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dc8:	50                   	push   eax
c0018dc9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dcd:	50                   	push   eax
c0018dce:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dd2:	50                   	push   eax
c0018dd3:	6a 01                	push   0x1
c0018dd5:	e8 5e ff ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018dda:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018dde:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018de2:	0f 95 c0             	setne  al
c0018de5:	83 c4 24             	add    esp,0x24
c0018de8:	c3                   	ret    
c0018de9:	90                   	nop

c0018dea <CPU::cpuidCheckECX(unsigned int)>:
c0018dea:	83 ec 10             	sub    esp,0x10
c0018ded:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df1:	50                   	push   eax
c0018df2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018df6:	50                   	push   eax
c0018df7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018dfb:	50                   	push   eax
c0018dfc:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e00:	50                   	push   eax
c0018e01:	6a 01                	push   0x1
c0018e03:	e8 30 ff ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e08:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e0c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e10:	0f 95 c0             	setne  al
c0018e13:	83 c4 24             	add    esp,0x24
c0018e16:	c3                   	ret    
c0018e17:	90                   	nop

c0018e18 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018e18:	83 ec 10             	sub    esp,0x10
c0018e1b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e1f:	50                   	push   eax
c0018e20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e24:	50                   	push   eax
c0018e25:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e29:	50                   	push   eax
c0018e2a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e2e:	50                   	push   eax
c0018e2f:	6a 07                	push   0x7
c0018e31:	e8 02 ff ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e3a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018e3e:	0f 95 c0             	setne  al
c0018e41:	83 c4 24             	add    esp,0x24
c0018e44:	c3                   	ret    
c0018e45:	90                   	nop

c0018e46 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018e46:	83 ec 10             	sub    esp,0x10
c0018e49:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e4d:	50                   	push   eax
c0018e4e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e52:	50                   	push   eax
c0018e53:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e57:	50                   	push   eax
c0018e58:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018e5c:	50                   	push   eax
c0018e5d:	6a 07                	push   0x7
c0018e5f:	e8 d4 fe ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e64:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018e68:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018e6c:	0f 95 c0             	setne  al
c0018e6f:	83 c4 24             	add    esp,0x24
c0018e72:	c3                   	ret    
c0018e73:	90                   	nop

c0018e74 <CPU::CPU()>:
c0018e74:	83 ec 0c             	sub    esp,0xc
c0018e77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e7b:	83 ec 08             	sub    esp,0x8
c0018e7e:	68 1e ba 02 c0       	push   0xc002ba1e
c0018e83:	50                   	push   eax
c0018e84:	e8 7d b7 ff ff       	call   c0014606 <Device::Device(char const*)>
c0018e89:	83 c4 10             	add    esp,0x10
c0018e8c:	ba f8 ba 02 c0       	mov    edx,0xc002baf8
c0018e91:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e95:	89 10                	mov    DWORD PTR [eax],edx
c0018e97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018e9b:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c0018ea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ea9:	05 78 01 00 00       	add    eax,0x178
c0018eae:	83 ec 0c             	sub    esp,0xc
c0018eb1:	50                   	push   eax
c0018eb2:	e8 a1 61 ff ff       	call   c000f058 <GDT::GDT()>
c0018eb7:	83 c4 10             	add    esp,0x10
c0018eba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ebe:	05 7c 09 00 00       	add    eax,0x97c
c0018ec3:	83 ec 0c             	sub    esp,0xc
c0018ec6:	50                   	push   eax
c0018ec7:	e8 ee 63 ff ff       	call   c000f2ba <IDT::IDT()>
c0018ecc:	83 c4 10             	add    esp,0x10
c0018ecf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ed3:	05 7c 11 00 00       	add    eax,0x117c
c0018ed8:	83 ec 0c             	sub    esp,0xc
c0018edb:	50                   	push   eax
c0018edc:	e8 cf 85 ff ff       	call   c00114b0 <TSS::TSS()>
c0018ee1:	83 c4 10             	add    esp,0x10
c0018ee4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ee8:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018eef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ef3:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018efd:	90                   	nop
c0018efe:	83 c4 0c             	add    esp,0xc
c0018f01:	c3                   	ret    

c0018f02 <CPU::displayFeatures()>:
c0018f02:	53                   	push   ebx
c0018f03:	83 ec 10             	sub    esp,0x10
c0018f06:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018f0a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018f10:	68 2c b7 02 c0       	push   0xc002b72c
c0018f15:	e8 d5 a0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018f1a:	59                   	pop    ecx
c0018f1b:	58                   	pop    eax
c0018f1c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018f22:	50                   	push   eax
c0018f23:	68 3d b7 02 c0       	push   0xc002b73d
c0018f28:	e8 c2 a0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018f2d:	58                   	pop    eax
c0018f2e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f34:	5a                   	pop    edx
c0018f35:	c1 e8 0e             	shr    eax,0xe
c0018f38:	0f b6 c0             	movzx  eax,al
c0018f3b:	50                   	push   eax
c0018f3c:	68 4e b7 02 c0       	push   0xc002b74e
c0018f41:	e8 a9 a0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018f46:	59                   	pop    ecx
c0018f47:	58                   	pop    eax
c0018f48:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f4e:	66 c1 e8 06          	shr    ax,0x6
c0018f52:	0f b6 c0             	movzx  eax,al
c0018f55:	50                   	push   eax
c0018f56:	68 5f b7 02 c0       	push   0xc002b75f
c0018f5b:	e8 8f a0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018f60:	c7 04 24 0c bc 02 c0 	mov    DWORD PTR [esp],0xc002bc0c
c0018f67:	e8 83 a0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018f6c:	83 c4 10             	add    esp,0x10
c0018f6f:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0018f74:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018f7b:	74 05                	je     c0018f82 <CPU::displayFeatures()+0x80>
c0018f7d:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0018f82:	52                   	push   edx
c0018f83:	52                   	push   edx
c0018f84:	50                   	push   eax
c0018f85:	68 70 b7 02 c0       	push   0xc002b770
c0018f8a:	e8 60 a0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018f8f:	83 c4 10             	add    esp,0x10
c0018f92:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0018f97:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018f9e:	78 05                	js     c0018fa5 <CPU::displayFeatures()+0xa3>
c0018fa0:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0018fa5:	51                   	push   ecx
c0018fa6:	51                   	push   ecx
c0018fa7:	50                   	push   eax
c0018fa8:	68 87 b7 02 c0       	push   0xc002b787
c0018fad:	e8 3d a0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018fb2:	83 c4 10             	add    esp,0x10
c0018fb5:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0018fba:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018fc1:	75 05                	jne    c0018fc8 <CPU::displayFeatures()+0xc6>
c0018fc3:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0018fc8:	52                   	push   edx
c0018fc9:	52                   	push   edx
c0018fca:	50                   	push   eax
c0018fcb:	68 9e b7 02 c0       	push   0xc002b79e
c0018fd0:	e8 1a a0 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018fd5:	83 c4 10             	add    esp,0x10
c0018fd8:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0018fdd:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018fe4:	75 05                	jne    c0018feb <CPU::displayFeatures()+0xe9>
c0018fe6:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0018feb:	51                   	push   ecx
c0018fec:	51                   	push   ecx
c0018fed:	50                   	push   eax
c0018fee:	68 b5 b7 02 c0       	push   0xc002b7b5
c0018ff3:	e8 f7 9f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0018ff8:	83 c4 10             	add    esp,0x10
c0018ffb:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0019000:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019007:	75 05                	jne    c001900e <CPU::displayFeatures()+0x10c>
c0019009:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c001900e:	52                   	push   edx
c001900f:	52                   	push   edx
c0019010:	50                   	push   eax
c0019011:	68 cc b7 02 c0       	push   0xc002b7cc
c0019016:	e8 d4 9f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001901b:	83 c4 10             	add    esp,0x10
c001901e:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0019023:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c001902a:	75 05                	jne    c0019031 <CPU::displayFeatures()+0x12f>
c001902c:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0019031:	51                   	push   ecx
c0019032:	51                   	push   ecx
c0019033:	50                   	push   eax
c0019034:	68 e3 b7 02 c0       	push   0xc002b7e3
c0019039:	e8 b1 9f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001903e:	83 c4 10             	add    esp,0x10
c0019041:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0019046:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c001904d:	75 05                	jne    c0019054 <CPU::displayFeatures()+0x152>
c001904f:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0019054:	52                   	push   edx
c0019055:	52                   	push   edx
c0019056:	50                   	push   eax
c0019057:	68 fa b7 02 c0       	push   0xc002b7fa
c001905c:	e8 8e 9f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0019061:	83 c4 10             	add    esp,0x10
c0019064:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0019069:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0019070:	75 05                	jne    c0019077 <CPU::displayFeatures()+0x175>
c0019072:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0019077:	51                   	push   ecx
c0019078:	51                   	push   ecx
c0019079:	50                   	push   eax
c001907a:	68 11 b8 02 c0       	push   0xc002b811
c001907f:	e8 6b 9f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0019084:	83 c4 10             	add    esp,0x10
c0019087:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c001908c:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0019093:	75 05                	jne    c001909a <CPU::displayFeatures()+0x198>
c0019095:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c001909a:	52                   	push   edx
c001909b:	52                   	push   edx
c001909c:	50                   	push   eax
c001909d:	68 28 b8 02 c0       	push   0xc002b828
c00190a2:	e8 48 9f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00190a7:	83 c4 10             	add    esp,0x10
c00190aa:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c00190af:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c00190b6:	75 05                	jne    c00190bd <CPU::displayFeatures()+0x1bb>
c00190b8:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c00190bd:	51                   	push   ecx
c00190be:	51                   	push   ecx
c00190bf:	50                   	push   eax
c00190c0:	68 3f b8 02 c0       	push   0xc002b83f
c00190c5:	e8 25 9f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00190ca:	83 c4 10             	add    esp,0x10
c00190cd:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c00190d2:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c00190d9:	75 05                	jne    c00190e0 <CPU::displayFeatures()+0x1de>
c00190db:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c00190e0:	52                   	push   edx
c00190e1:	52                   	push   edx
c00190e2:	50                   	push   eax
c00190e3:	68 56 b8 02 c0       	push   0xc002b856
c00190e8:	e8 02 9f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00190ed:	83 c4 10             	add    esp,0x10
c00190f0:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c00190f5:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c00190fc:	75 05                	jne    c0019103 <CPU::displayFeatures()+0x201>
c00190fe:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0019103:	51                   	push   ecx
c0019104:	51                   	push   ecx
c0019105:	50                   	push   eax
c0019106:	68 6d b8 02 c0       	push   0xc002b86d
c001910b:	e8 df 9e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0019110:	83 c4 10             	add    esp,0x10
c0019113:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c0019118:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c001911f:	75 05                	jne    c0019126 <CPU::displayFeatures()+0x224>
c0019121:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0019126:	52                   	push   edx
c0019127:	52                   	push   edx
c0019128:	50                   	push   eax
c0019129:	68 84 b8 02 c0       	push   0xc002b884
c001912e:	e8 bc 9e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0019133:	83 c4 10             	add    esp,0x10
c0019136:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c001913b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0019142:	78 05                	js     c0019149 <CPU::displayFeatures()+0x247>
c0019144:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c0019149:	51                   	push   ecx
c001914a:	51                   	push   ecx
c001914b:	50                   	push   eax
c001914c:	68 9b b8 02 c0       	push   0xc002b89b
c0019151:	e8 99 9e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0019156:	83 c4 10             	add    esp,0x10
c0019159:	b8 d2 a0 02 c0       	mov    eax,0xc002a0d2
c001915e:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0019165:	75 05                	jne    c001916c <CPU::displayFeatures()+0x26a>
c0019167:	b8 d6 a0 02 c0       	mov    eax,0xc002a0d6
c001916c:	52                   	push   edx
c001916d:	52                   	push   edx
c001916e:	50                   	push   eax
c001916f:	68 b2 b8 02 c0       	push   0xc002b8b2
c0019174:	e8 76 9e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0019179:	83 c4 18             	add    esp,0x18
c001917c:	5b                   	pop    ebx
c001917d:	c3                   	ret    

c001917e <CPU::detectFeatures()>:
c001917e:	55                   	push   ebp
c001917f:	57                   	push   edi
c0019180:	56                   	push   esi
c0019181:	53                   	push   ebx
c0019182:	83 ec 50             	sub    esp,0x50
c0019185:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0019189:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0019193:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c001919a:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c00191a0:	6a 0d                	push   0xd
c00191a2:	6a 00                	push   0x0
c00191a4:	57                   	push   edi
c00191a5:	e8 ce 75 fe ff       	call   c0000778 <memset>
c00191aa:	83 c4 10             	add    esp,0x10
c00191ad:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c00191b2:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c00191b9:	0f 84 20 09 00 00    	je     c0019adf <CPU::detectFeatures()+0x961>
c00191bf:	83 ec 0c             	sub    esp,0xc
c00191c2:	6a 10                	push   0x10
c00191c4:	e8 f3 fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c00191c9:	83 e0 01             	and    eax,0x1
c00191cc:	8d 14 00             	lea    edx,[eax+eax*1]
c00191cf:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191d5:	83 e0 fd             	and    eax,0xfffffffd
c00191d8:	09 d0                	or     eax,edx
c00191da:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00191e0:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c00191e7:	e8 d0 fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c00191ec:	83 e0 01             	and    eax,0x1
c00191ef:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00191f6:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00191fc:	83 e0 fb             	and    eax,0xfffffffb
c00191ff:	09 d0                	or     eax,edx
c0019201:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019207:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001920e:	e8 a9 fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c0019213:	83 e0 01             	and    eax,0x1
c0019216:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001921d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019223:	83 e0 f7             	and    eax,0xfffffff7
c0019226:	09 d0                	or     eax,edx
c0019228:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001922e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0019235:	e8 82 fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c001923a:	83 e0 01             	and    eax,0x1
c001923d:	c1 e0 04             	shl    eax,0x4
c0019240:	88 c2                	mov    dl,al
c0019242:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019248:	83 e0 ef             	and    eax,0xffffffef
c001924b:	09 d0                	or     eax,edx
c001924d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019253:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c001925a:	e8 5d fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c001925f:	83 e0 01             	and    eax,0x1
c0019262:	c1 e0 05             	shl    eax,0x5
c0019265:	88 c2                	mov    dl,al
c0019267:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001926d:	83 e0 df             	and    eax,0xffffffdf
c0019270:	09 d0                	or     eax,edx
c0019272:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019278:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c001927f:	e8 38 fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c0019284:	83 e0 01             	and    eax,0x1
c0019287:	8d 14 00             	lea    edx,[eax+eax*1]
c001928a:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019290:	83 e0 fd             	and    eax,0xfffffffd
c0019293:	09 d0                	or     eax,edx
c0019295:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001929b:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c00192a2:	e8 15 fb ff ff       	call   c0018dbc <CPU::cpuidCheckEDX(unsigned int)>
c00192a7:	83 e0 01             	and    eax,0x1
c00192aa:	c1 e0 06             	shl    eax,0x6
c00192ad:	88 c2                	mov    dl,al
c00192af:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00192b5:	83 e0 bf             	and    eax,0xffffffbf
c00192b8:	09 d0                	or     eax,edx
c00192ba:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00192c0:	58                   	pop    eax
c00192c1:	8d 74 24 28          	lea    esi,[esp+0x28]
c00192c5:	56                   	push   esi
c00192c6:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00192ca:	55                   	push   ebp
c00192cb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00192cf:	50                   	push   eax
c00192d0:	8d 54 24 28          	lea    edx,[esp+0x28]
c00192d4:	52                   	push   edx
c00192d5:	6a 00                	push   0x0
c00192d7:	e8 5c fa ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192dc:	83 c4 1c             	add    esp,0x1c
c00192df:	6a 04                	push   0x4
c00192e1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00192e5:	50                   	push   eax
c00192e6:	57                   	push   edi
c00192e7:	e8 58 74 fe ff       	call   c0000744 <memcpy>
c00192ec:	83 c4 0c             	add    esp,0xc
c00192ef:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c00192f5:	6a 04                	push   0x4
c00192f7:	56                   	push   esi
c00192f8:	50                   	push   eax
c00192f9:	e8 46 74 fe ff       	call   c0000744 <memcpy>
c00192fe:	83 c4 0c             	add    esp,0xc
c0019301:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0019307:	6a 04                	push   0x4
c0019309:	55                   	push   ebp
c001930a:	50                   	push   eax
c001930b:	e8 34 74 fe ff       	call   c0000744 <memcpy>
c0019310:	58                   	pop    eax
c0019311:	5a                   	pop    edx
c0019312:	68 c9 b8 02 c0       	push   0xc002b8c9
c0019317:	57                   	push   edi
c0019318:	e8 a3 75 fe ff       	call   c00008c0 <strcmp>
c001931d:	83 c4 10             	add    esp,0x10
c0019320:	85 c0                	test   eax,eax
c0019322:	75 0f                	jne    c0019333 <CPU::detectFeatures()+0x1b5>
c0019324:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c001932e:	e9 22 02 00 00       	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c0019333:	50                   	push   eax
c0019334:	50                   	push   eax
c0019335:	68 d6 b8 02 c0       	push   0xc002b8d6
c001933a:	57                   	push   edi
c001933b:	e8 80 75 fe ff       	call   c00008c0 <strcmp>
c0019340:	83 c4 10             	add    esp,0x10
c0019343:	85 c0                	test   eax,eax
c0019345:	74 dd                	je     c0019324 <CPU::detectFeatures()+0x1a6>
c0019347:	51                   	push   ecx
c0019348:	51                   	push   ecx
c0019349:	68 e3 b8 02 c0       	push   0xc002b8e3
c001934e:	57                   	push   edi
c001934f:	e8 6c 75 fe ff       	call   c00008c0 <strcmp>
c0019354:	83 c4 10             	add    esp,0x10
c0019357:	85 c0                	test   eax,eax
c0019359:	74 2a                	je     c0019385 <CPU::detectFeatures()+0x207>
c001935b:	52                   	push   edx
c001935c:	52                   	push   edx
c001935d:	68 f0 b8 02 c0       	push   0xc002b8f0
c0019362:	57                   	push   edi
c0019363:	e8 58 75 fe ff       	call   c00008c0 <strcmp>
c0019368:	83 c4 10             	add    esp,0x10
c001936b:	85 c0                	test   eax,eax
c001936d:	74 16                	je     c0019385 <CPU::detectFeatures()+0x207>
c001936f:	50                   	push   eax
c0019370:	50                   	push   eax
c0019371:	68 fd b8 02 c0       	push   0xc002b8fd
c0019376:	57                   	push   edi
c0019377:	e8 44 75 fe ff       	call   c00008c0 <strcmp>
c001937c:	83 c4 10             	add    esp,0x10
c001937f:	85 c0                	test   eax,eax
c0019381:	74 48                	je     c00193cb <CPU::detectFeatures()+0x24d>
c0019383:	eb 0f                	jmp    c0019394 <CPU::detectFeatures()+0x216>
c0019385:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c001938f:	e9 c1 01 00 00       	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c0019394:	50                   	push   eax
c0019395:	50                   	push   eax
c0019396:	68 0a b9 02 c0       	push   0xc002b90a
c001939b:	57                   	push   edi
c001939c:	e8 1f 75 fe ff       	call   c00008c0 <strcmp>
c00193a1:	83 c4 10             	add    esp,0x10
c00193a4:	85 c0                	test   eax,eax
c00193a6:	74 23                	je     c00193cb <CPU::detectFeatures()+0x24d>
c00193a8:	50                   	push   eax
c00193a9:	50                   	push   eax
c00193aa:	68 17 b9 02 c0       	push   0xc002b917
c00193af:	57                   	push   edi
c00193b0:	e8 0b 75 fe ff       	call   c00008c0 <strcmp>
c00193b5:	83 c4 10             	add    esp,0x10
c00193b8:	85 c0                	test   eax,eax
c00193ba:	75 1e                	jne    c00193da <CPU::detectFeatures()+0x25c>
c00193bc:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c00193c6:	e9 8a 01 00 00       	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c00193cb:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c00193d5:	e9 7b 01 00 00       	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c00193da:	50                   	push   eax
c00193db:	50                   	push   eax
c00193dc:	68 24 b9 02 c0       	push   0xc002b924
c00193e1:	57                   	push   edi
c00193e2:	e8 d9 74 fe ff       	call   c00008c0 <strcmp>
c00193e7:	83 c4 10             	add    esp,0x10
c00193ea:	85 c0                	test   eax,eax
c00193ec:	75 0f                	jne    c00193fd <CPU::detectFeatures()+0x27f>
c00193ee:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c00193f8:	e9 58 01 00 00       	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c00193fd:	50                   	push   eax
c00193fe:	50                   	push   eax
c00193ff:	68 e3 b8 02 c0       	push   0xc002b8e3
c0019404:	57                   	push   edi
c0019405:	e8 b6 74 fe ff       	call   c00008c0 <strcmp>
c001940a:	83 c4 10             	add    esp,0x10
c001940d:	85 c0                	test   eax,eax
c001940f:	75 0f                	jne    c0019420 <CPU::detectFeatures()+0x2a2>
c0019411:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c001941b:	e9 35 01 00 00       	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c0019420:	50                   	push   eax
c0019421:	50                   	push   eax
c0019422:	68 31 b9 02 c0       	push   0xc002b931
c0019427:	57                   	push   edi
c0019428:	e8 93 74 fe ff       	call   c00008c0 <strcmp>
c001942d:	83 c4 10             	add    esp,0x10
c0019430:	85 c0                	test   eax,eax
c0019432:	75 0f                	jne    c0019443 <CPU::detectFeatures()+0x2c5>
c0019434:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c001943e:	e9 12 01 00 00       	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c0019443:	51                   	push   ecx
c0019444:	51                   	push   ecx
c0019445:	68 3e b9 02 c0       	push   0xc002b93e
c001944a:	57                   	push   edi
c001944b:	e8 70 74 fe ff       	call   c00008c0 <strcmp>
c0019450:	83 c4 10             	add    esp,0x10
c0019453:	85 c0                	test   eax,eax
c0019455:	75 0f                	jne    c0019466 <CPU::detectFeatures()+0x2e8>
c0019457:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0019461:	e9 ef 00 00 00       	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c0019466:	52                   	push   edx
c0019467:	52                   	push   edx
c0019468:	68 4b b9 02 c0       	push   0xc002b94b
c001946d:	57                   	push   edi
c001946e:	e8 4d 74 fe ff       	call   c00008c0 <strcmp>
c0019473:	83 c4 10             	add    esp,0x10
c0019476:	85 c0                	test   eax,eax
c0019478:	75 0f                	jne    c0019489 <CPU::detectFeatures()+0x30b>
c001947a:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0019484:	e9 cc 00 00 00       	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c0019489:	50                   	push   eax
c001948a:	50                   	push   eax
c001948b:	68 58 b9 02 c0       	push   0xc002b958
c0019490:	57                   	push   edi
c0019491:	e8 2a 74 fe ff       	call   c00008c0 <strcmp>
c0019496:	83 c4 10             	add    esp,0x10
c0019499:	85 c0                	test   eax,eax
c001949b:	75 0f                	jne    c00194ac <CPU::detectFeatures()+0x32e>
c001949d:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c00194a7:	e9 a9 00 00 00       	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c00194ac:	50                   	push   eax
c00194ad:	50                   	push   eax
c00194ae:	68 65 b9 02 c0       	push   0xc002b965
c00194b3:	57                   	push   edi
c00194b4:	e8 07 74 fe ff       	call   c00008c0 <strcmp>
c00194b9:	83 c4 10             	add    esp,0x10
c00194bc:	85 c0                	test   eax,eax
c00194be:	75 0f                	jne    c00194cf <CPU::detectFeatures()+0x351>
c00194c0:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c00194ca:	e9 86 00 00 00       	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c00194cf:	50                   	push   eax
c00194d0:	50                   	push   eax
c00194d1:	68 72 b9 02 c0       	push   0xc002b972
c00194d6:	57                   	push   edi
c00194d7:	e8 e4 73 fe ff       	call   c00008c0 <strcmp>
c00194dc:	83 c4 10             	add    esp,0x10
c00194df:	85 c0                	test   eax,eax
c00194e1:	75 0c                	jne    c00194ef <CPU::detectFeatures()+0x371>
c00194e3:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c00194ed:	eb 66                	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c00194ef:	50                   	push   eax
c00194f0:	50                   	push   eax
c00194f1:	68 7f b9 02 c0       	push   0xc002b97f
c00194f6:	57                   	push   edi
c00194f7:	e8 c4 73 fe ff       	call   c00008c0 <strcmp>
c00194fc:	83 c4 10             	add    esp,0x10
c00194ff:	85 c0                	test   eax,eax
c0019501:	75 0c                	jne    c001950f <CPU::detectFeatures()+0x391>
c0019503:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001950d:	eb 46                	jmp    c0019555 <CPU::detectFeatures()+0x3d7>
c001950f:	50                   	push   eax
c0019510:	50                   	push   eax
c0019511:	68 8c b9 02 c0       	push   0xc002b98c
c0019516:	57                   	push   edi
c0019517:	e8 a4 73 fe ff       	call   c00008c0 <strcmp>
c001951c:	83 c4 10             	add    esp,0x10
c001951f:	85 c0                	test   eax,eax
c0019521:	74 e0                	je     c0019503 <CPU::detectFeatures()+0x385>
c0019523:	50                   	push   eax
c0019524:	50                   	push   eax
c0019525:	68 99 b9 02 c0       	push   0xc002b999
c001952a:	57                   	push   edi
c001952b:	e8 90 73 fe ff       	call   c00008c0 <strcmp>
c0019530:	83 c4 10             	add    esp,0x10
c0019533:	85 c0                	test   eax,eax
c0019535:	74 cc                	je     c0019503 <CPU::detectFeatures()+0x385>
c0019537:	51                   	push   ecx
c0019538:	51                   	push   ecx
c0019539:	68 a6 b9 02 c0       	push   0xc002b9a6
c001953e:	57                   	push   edi
c001953f:	e8 7c 73 fe ff       	call   c00008c0 <strcmp>
c0019544:	83 c4 10             	add    esp,0x10
c0019547:	85 c0                	test   eax,eax
c0019549:	74 b8                	je     c0019503 <CPU::detectFeatures()+0x385>
c001954b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c0019555:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c001955a:	0f 86 be 00 00 00    	jbe    c001961e <CPU::detectFeatures()+0x4a0>
c0019560:	83 ec 0c             	sub    esp,0xc
c0019563:	68 80 00 00 00       	push   0x80
c0019568:	e8 ab f8 ff ff       	call   c0018e18 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001956d:	83 e0 01             	and    eax,0x1
c0019570:	c1 e0 06             	shl    eax,0x6
c0019573:	88 c2                	mov    dl,al
c0019575:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c001957b:	83 e0 bf             	and    eax,0xffffffbf
c001957e:	09 d0                	or     eax,edx
c0019580:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0019586:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c001958d:	e8 86 f8 ff ff       	call   c0018e18 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019592:	83 e0 01             	and    eax,0x1
c0019595:	c1 e0 04             	shl    eax,0x4
c0019598:	88 c2                	mov    dl,al
c001959a:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195a0:	83 e0 ef             	and    eax,0xffffffef
c00195a3:	09 d0                	or     eax,edx
c00195a5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195ab:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c00195b2:	e8 61 f8 ff ff       	call   c0018e18 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00195b7:	c1 e0 07             	shl    eax,0x7
c00195ba:	88 c2                	mov    dl,al
c00195bc:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00195c2:	83 e0 7f             	and    eax,0x7f
c00195c5:	09 d0                	or     eax,edx
c00195c7:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00195cd:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00195d4:	e8 6d f8 ff ff       	call   c0018e46 <CPU::cpuidCheckExtendedECX(unsigned int)>
c00195d9:	83 e0 01             	and    eax,0x1
c00195dc:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00195e3:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00195e9:	83 e0 f7             	and    eax,0xfffffff7
c00195ec:	09 d0                	or     eax,edx
c00195ee:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00195f4:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c00195fb:	e8 46 f8 ff ff       	call   c0018e46 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019600:	83 c4 10             	add    esp,0x10
c0019603:	83 e0 01             	and    eax,0x1
c0019606:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001960d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019613:	83 e0 fb             	and    eax,0xfffffffb
c0019616:	09 d0                	or     eax,edx
c0019618:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001961e:	83 ec 0c             	sub    esp,0xc
c0019621:	56                   	push   esi
c0019622:	55                   	push   ebp
c0019623:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019627:	57                   	push   edi
c0019628:	8d 44 24 28          	lea    eax,[esp+0x28]
c001962c:	50                   	push   eax
c001962d:	6a 01                	push   0x1
c001962f:	e8 04 f7 ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019634:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019638:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001963e:	88 ca                	mov    dl,cl
c0019640:	83 e0 f0             	and    eax,0xfffffff0
c0019643:	83 e2 0f             	and    edx,0xf
c0019646:	09 d0                	or     eax,edx
c0019648:	88 ca                	mov    dl,cl
c001964a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c0019650:	c0 ea 04             	shr    dl,0x4
c0019653:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c0019657:	0f b6 c2             	movzx  eax,dl
c001965a:	83 c4 20             	add    esp,0x20
c001965d:	c1 e0 06             	shl    eax,0x6
c0019660:	89 c5                	mov    ebp,eax
c0019662:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019668:	66 25 3f c0          	and    ax,0xc03f
c001966c:	09 e8                	or     eax,ebp
c001966e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019675:	89 c8                	mov    eax,ecx
c0019677:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c001967d:	c1 e8 08             	shr    eax,0x8
c0019680:	83 e2 3f             	and    edx,0x3f
c0019683:	83 e0 0f             	and    eax,0xf
c0019686:	89 c5                	mov    ebp,eax
c0019688:	c1 e5 06             	shl    ebp,0x6
c001968b:	09 d5                	or     ebp,edx
c001968d:	89 ea                	mov    edx,ebp
c001968f:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c0019695:	88 c2                	mov    dl,al
c0019697:	c0 ea 02             	shr    dl,0x2
c001969a:	89 d5                	mov    ebp,edx
c001969c:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00196a2:	83 e2 c0             	and    edx,0xffffffc0
c00196a5:	09 d5                	or     ebp,edx
c00196a7:	89 ea                	mov    edx,ebp
c00196a9:	89 cd                	mov    ebp,ecx
c00196ab:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c00196b1:	c1 ed 0c             	shr    ebp,0xc
c00196b4:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00196ba:	83 e5 03             	and    ebp,0x3
c00196bd:	83 e2 cf             	and    edx,0xffffffcf
c00196c0:	c1 e5 04             	shl    ebp,0x4
c00196c3:	09 d5                	or     ebp,edx
c00196c5:	3c 06                	cmp    al,0x6
c00196c7:	89 ea                	mov    edx,ebp
c00196c9:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00196cf:	74 04                	je     c00196d5 <CPU::detectFeatures()+0x557>
c00196d1:	3c 0f                	cmp    al,0xf
c00196d3:	75 5c                	jne    c0019731 <CPU::detectFeatures()+0x5b3>
c00196d5:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00196d9:	89 cd                	mov    ebp,ecx
c00196db:	c1 ed 10             	shr    ebp,0x10
c00196de:	c1 e5 04             	shl    ebp,0x4
c00196e1:	09 ea                	or     edx,ebp
c00196e3:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c00196e9:	0f b6 d2             	movzx  edx,dl
c00196ec:	66 81 e5 3f c0       	and    bp,0xc03f
c00196f1:	c1 e2 06             	shl    edx,0x6
c00196f4:	09 ea                	or     edx,ebp
c00196f6:	3c 0f                	cmp    al,0xf
c00196f8:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c00196ff:	75 30                	jne    c0019731 <CPU::detectFeatures()+0x5b3>
c0019701:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019707:	c1 e9 14             	shr    ecx,0x14
c001970a:	83 e0 3f             	and    eax,0x3f
c001970d:	83 c1 0f             	add    ecx,0xf
c0019710:	88 ca                	mov    dl,cl
c0019712:	c0 e9 02             	shr    cl,0x2
c0019715:	c1 e2 06             	shl    edx,0x6
c0019718:	09 d0                	or     eax,edx
c001971a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019720:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019726:	83 e0 c0             	and    eax,0xffffffc0
c0019729:	09 c1                	or     ecx,eax
c001972b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019731:	83 ec 0c             	sub    esp,0xc
c0019734:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001973b:	56                   	push   esi
c001973c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019740:	50                   	push   eax
c0019741:	57                   	push   edi
c0019742:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019746:	55                   	push   ebp
c0019747:	68 00 00 00 80       	push   0x80000000
c001974c:	e8 e7 f5 ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019751:	83 c4 20             	add    esp,0x20
c0019754:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001975c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019760:	76 1e                	jbe    c0019780 <CPU::detectFeatures()+0x602>
c0019762:	83 ec 0c             	sub    esp,0xc
c0019765:	56                   	push   esi
c0019766:	50                   	push   eax
c0019767:	57                   	push   edi
c0019768:	55                   	push   ebp
c0019769:	68 01 00 00 80       	push   0x80000001
c001976e:	e8 c5 f5 ff ff       	call   c0018d38 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019773:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c001977d:	83 c4 20             	add    esp,0x20
c0019780:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c0019786:	83 f8 01             	cmp    eax,0x1
c0019789:	75 6f                	jne    c00197fa <CPU::detectFeatures()+0x67c>
c001978b:	51                   	push   ecx
c001978c:	51                   	push   ecx
c001978d:	68 b2 b9 02 c0       	push   0xc002b9b2
c0019792:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0019796:	56                   	push   esi
c0019797:	e8 98 70 fe ff       	call   c0000834 <strcpy>
c001979c:	5f                   	pop    edi
c001979d:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197a3:	5d                   	pop    ebp
c00197a4:	66 c1 e8 06          	shr    ax,0x6
c00197a8:	0f b6 c0             	movzx  eax,al
c00197ab:	50                   	push   eax
c00197ac:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00197b2:	c1 e8 0e             	shr    eax,0xe
c00197b5:	0f b6 c0             	movzx  eax,al
c00197b8:	50                   	push   eax
c00197b9:	e8 24 f2 ff ff       	call   c00189e2 <CPU::lookupIntelName(unsigned char, unsigned char)>
c00197be:	5a                   	pop    edx
c00197bf:	59                   	pop    ecx
c00197c0:	50                   	push   eax
c00197c1:	56                   	push   esi
c00197c2:	e8 ad 71 fe ff       	call   c0000974 <strcat>
c00197c7:	5f                   	pop    edi
c00197c8:	5d                   	pop    ebp
c00197c9:	56                   	push   esi
c00197ca:	53                   	push   ebx
c00197cb:	e8 28 ae ff ff       	call   c00145f8 <Device::setName(char const*)>
c00197d0:	58                   	pop    eax
c00197d1:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c00197d7:	5a                   	pop    edx
c00197d8:	68 b9 b9 02 c0       	push   0xc002b9b9
c00197dd:	50                   	push   eax
c00197de:	e8 dd 70 fe ff       	call   c00008c0 <strcmp>
c00197e3:	83 c4 10             	add    esp,0x10
c00197e6:	85 c0                	test   eax,eax
c00197e8:	0f 85 71 03 00 00    	jne    c0019b5f <CPU::detectFeatures()+0x9e1>
c00197ee:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c00197f5:	e9 65 03 00 00       	jmp    c0019b5f <CPU::detectFeatures()+0x9e1>
c00197fa:	83 f8 02             	cmp    eax,0x2
c00197fd:	0f 85 b5 00 00 00    	jne    c00198b8 <CPU::detectFeatures()+0x73a>
c0019803:	57                   	push   edi
c0019804:	57                   	push   edi
c0019805:	68 cb b9 02 c0       	push   0xc002b9cb
c001980a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001980e:	56                   	push   esi
c001980f:	e8 20 70 fe ff       	call   c0000834 <strcpy>
c0019814:	5d                   	pop    ebp
c0019815:	58                   	pop    eax
c0019816:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001981c:	66 c1 e8 06          	shr    ax,0x6
c0019820:	0f b6 c0             	movzx  eax,al
c0019823:	50                   	push   eax
c0019824:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001982a:	c1 e8 0e             	shr    eax,0xe
c001982d:	0f b6 c0             	movzx  eax,al
c0019830:	50                   	push   eax
c0019831:	e8 18 f0 ff ff       	call   c001884e <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019836:	5a                   	pop    edx
c0019837:	59                   	pop    ecx
c0019838:	50                   	push   eax
c0019839:	56                   	push   esi
c001983a:	e8 35 71 fe ff       	call   c0000974 <strcat>
c001983f:	5f                   	pop    edi
c0019840:	5d                   	pop    ebp
c0019841:	56                   	push   esi
c0019842:	53                   	push   ebx
c0019843:	e8 b0 ad ff ff       	call   c00145f8 <Device::setName(char const*)>
c0019848:	58                   	pop    eax
c0019849:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001984f:	5a                   	pop    edx
c0019850:	68 d0 b9 02 c0       	push   0xc002b9d0
c0019855:	50                   	push   eax
c0019856:	e8 65 70 fe ff       	call   c00008c0 <strcmp>
c001985b:	83 c4 10             	add    esp,0x10
c001985e:	85 c0                	test   eax,eax
c0019860:	75 20                	jne    c0019882 <CPU::detectFeatures()+0x704>
c0019862:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c0019868:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c001986e:	a8 01                	test   al,0x1
c0019870:	74 10                	je     c0019882 <CPU::detectFeatures()+0x704>
c0019872:	83 e0 fe             	and    eax,0xfffffffe
c0019875:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c001987b:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c0019882:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019888:	c1 e8 0e             	shr    eax,0xe
c001988b:	3c 05                	cmp    al,0x5
c001988d:	0f 85 cc 02 00 00    	jne    c0019b5f <CPU::detectFeatures()+0x9e1>
c0019893:	56                   	push   esi
c0019894:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001989a:	83 e0 0f             	and    eax,0xf
c001989d:	50                   	push   eax
c001989e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00198a4:	66 c1 e8 06          	shr    ax,0x6
c00198a8:	0f b6 c0             	movzx  eax,al
c00198ab:	50                   	push   eax
c00198ac:	6a 05                	push   0x5
c00198ae:	e8 11 f4 ff ff       	call   c0018cc4 <CPU::AMD_K6_writeback(int, int, int)>
c00198b3:	e9 1f 02 00 00       	jmp    c0019ad7 <CPU::detectFeatures()+0x959>
c00198b8:	8d 50 fd             	lea    edx,[eax-0x3]
c00198bb:	83 fa 01             	cmp    edx,0x1
c00198be:	76 09                	jbe    c00198c9 <CPU::detectFeatures()+0x74b>
c00198c0:	83 f8 06             	cmp    eax,0x6
c00198c3:	0f 85 91 01 00 00    	jne    c0019a5a <CPU::detectFeatures()+0x8dc>
c00198c9:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198cf:	c1 ea 0e             	shr    edx,0xe
c00198d2:	80 fa 05             	cmp    dl,0x5
c00198d5:	75 7b                	jne    c0019952 <CPU::detectFeatures()+0x7d4>
c00198d7:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00198dd:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00198e2:	66 81 fa 00 01       	cmp    dx,0x100
c00198e7:	75 0c                	jne    c00198f5 <CPU::detectFeatures()+0x777>
c00198e9:	51                   	push   ecx
c00198ea:	51                   	push   ecx
c00198eb:	68 d7 b9 02 c0       	push   0xc002b9d7
c00198f0:	e9 dc 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c00198f5:	66 81 fa 00 02       	cmp    dx,0x200
c00198fa:	75 0c                	jne    c0019908 <CPU::detectFeatures()+0x78a>
c00198fc:	52                   	push   edx
c00198fd:	52                   	push   edx
c00198fe:	68 ea b9 02 c0       	push   0xc002b9ea
c0019903:	e9 c9 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019908:	66 81 fa 40 02       	cmp    dx,0x240
c001990d:	75 0c                	jne    c001991b <CPU::detectFeatures()+0x79d>
c001990f:	50                   	push   eax
c0019910:	50                   	push   eax
c0019911:	68 fc b9 02 c0       	push   0xc002b9fc
c0019916:	e9 b6 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c001991b:	83 f8 06             	cmp    eax,0x6
c001991e:	75 0c                	jne    c001992c <CPU::detectFeatures()+0x7ae>
c0019920:	50                   	push   eax
c0019921:	50                   	push   eax
c0019922:	68 0e ba 02 c0       	push   0xc002ba0e
c0019927:	e9 a5 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c001992c:	83 f8 04             	cmp    eax,0x4
c001992f:	75 0c                	jne    c001993d <CPU::detectFeatures()+0x7bf>
c0019931:	50                   	push   eax
c0019932:	50                   	push   eax
c0019933:	68 1a ba 02 c0       	push   0xc002ba1a
c0019938:	e9 94 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c001993d:	83 f8 03             	cmp    eax,0x3
c0019940:	0f 85 19 02 00 00    	jne    c0019b5f <CPU::detectFeatures()+0x9e1>
c0019946:	50                   	push   eax
c0019947:	50                   	push   eax
c0019948:	68 22 ba 02 c0       	push   0xc002ba22
c001994d:	e9 7f 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019952:	80 fa 06             	cmp    dl,0x6
c0019955:	0f 85 db 00 00 00    	jne    c0019a36 <CPU::detectFeatures()+0x8b8>
c001995b:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0019961:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019966:	66 81 fa 80 01       	cmp    dx,0x180
c001996b:	75 0c                	jne    c0019979 <CPU::detectFeatures()+0x7fb>
c001996d:	50                   	push   eax
c001996e:	50                   	push   eax
c001996f:	68 2d ba 02 c0       	push   0xc002ba2d
c0019974:	e9 58 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019979:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c001997f:	66 f7 c1 80 ff       	test   cx,0xff80
c0019984:	75 0c                	jne    c0019992 <CPU::detectFeatures()+0x814>
c0019986:	50                   	push   eax
c0019987:	50                   	push   eax
c0019988:	68 3d ba 02 c0       	push   0xc002ba3d
c001998d:	e9 3f 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019992:	66 81 fa 40 02       	cmp    dx,0x240
c0019997:	75 0c                	jne    c00199a5 <CPU::detectFeatures()+0x827>
c0019999:	55                   	push   ebp
c001999a:	55                   	push   ebp
c001999b:	68 44 ba 02 c0       	push   0xc002ba44
c00199a0:	e9 2c 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c00199a5:	66 81 fa 80 02       	cmp    dx,0x280
c00199aa:	75 0c                	jne    c00199b8 <CPU::detectFeatures()+0x83a>
c00199ac:	57                   	push   edi
c00199ad:	57                   	push   edi
c00199ae:	68 4d ba 02 c0       	push   0xc002ba4d
c00199b3:	e9 19 01 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c00199b8:	66 81 fa 40 03       	cmp    dx,0x340
c00199bd:	74 ed                	je     c00199ac <CPU::detectFeatures()+0x82e>
c00199bf:	66 81 fa c0 03       	cmp    dx,0x3c0
c00199c4:	75 0c                	jne    c00199d2 <CPU::detectFeatures()+0x854>
c00199c6:	56                   	push   esi
c00199c7:	56                   	push   esi
c00199c8:	68 54 ba 02 c0       	push   0xc002ba54
c00199cd:	e9 ff 00 00 00       	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c00199d2:	83 f8 06             	cmp    eax,0x6
c00199d5:	0f 84 45 ff ff ff    	je     c0019920 <CPU::detectFeatures()+0x7a2>
c00199db:	83 f8 04             	cmp    eax,0x4
c00199de:	0f 84 4d ff ff ff    	je     c0019931 <CPU::detectFeatures()+0x7b3>
c00199e4:	83 f8 03             	cmp    eax,0x3
c00199e7:	0f 85 72 01 00 00    	jne    c0019b5f <CPU::detectFeatures()+0x9e1>
c00199ed:	51                   	push   ecx
c00199ee:	51                   	push   ecx
c00199ef:	68 5d ba 02 c0       	push   0xc002ba5d
c00199f4:	53                   	push   ebx
c00199f5:	e8 fe ab ff ff       	call   c00145f8 <Device::setName(char const*)>
c00199fa:	b1 c1                	mov    cl,0xc1
c00199fc:	88 c8                	mov    al,cl
c00199fe:	e6 22                	out    0x22,al
c0019a00:	e4 23                	in     al,0x23
c0019a02:	88 c2                	mov    dl,al
c0019a04:	88 c8                	mov    al,cl
c0019a06:	e6 22                	out    0x22,al
c0019a08:	88 d0                	mov    al,dl
c0019a0a:	83 c8 10             	or     eax,0x10
c0019a0d:	e6 23                	out    0x23,al
c0019a0f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019a16:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019a19:	89 d0                	mov    eax,edx
c0019a1b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019a21:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019a25:	40                   	inc    eax
c0019a26:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0019a2c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019a31:	e9 a1 00 00 00       	jmp    c0019ad7 <CPU::detectFeatures()+0x959>
c0019a36:	83 f8 06             	cmp    eax,0x6
c0019a39:	0f 84 e1 fe ff ff    	je     c0019920 <CPU::detectFeatures()+0x7a2>
c0019a3f:	83 f8 04             	cmp    eax,0x4
c0019a42:	0f 84 e9 fe ff ff    	je     c0019931 <CPU::detectFeatures()+0x7b3>
c0019a48:	83 f8 03             	cmp    eax,0x3
c0019a4b:	0f 85 0e 01 00 00    	jne    c0019b5f <CPU::detectFeatures()+0x9e1>
c0019a51:	52                   	push   edx
c0019a52:	52                   	push   edx
c0019a53:	68 68 ba 02 c0       	push   0xc002ba68
c0019a58:	eb 77                	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019a5a:	83 f8 07             	cmp    eax,0x7
c0019a5d:	75 09                	jne    c0019a68 <CPU::detectFeatures()+0x8ea>
c0019a5f:	50                   	push   eax
c0019a60:	50                   	push   eax
c0019a61:	68 72 ba 02 c0       	push   0xc002ba72
c0019a66:	eb 69                	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019a68:	83 f8 0a             	cmp    eax,0xa
c0019a6b:	75 09                	jne    c0019a76 <CPU::detectFeatures()+0x8f8>
c0019a6d:	50                   	push   eax
c0019a6e:	50                   	push   eax
c0019a6f:	68 7d ba 02 c0       	push   0xc002ba7d
c0019a74:	eb 5b                	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019a76:	83 f8 0b             	cmp    eax,0xb
c0019a79:	75 09                	jne    c0019a84 <CPU::detectFeatures()+0x906>
c0019a7b:	50                   	push   eax
c0019a7c:	50                   	push   eax
c0019a7d:	68 85 ba 02 c0       	push   0xc002ba85
c0019a82:	eb 4d                	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019a84:	83 f8 08             	cmp    eax,0x8
c0019a87:	75 09                	jne    c0019a92 <CPU::detectFeatures()+0x914>
c0019a89:	50                   	push   eax
c0019a8a:	50                   	push   eax
c0019a8b:	68 8e ba 02 c0       	push   0xc002ba8e
c0019a90:	eb 3f                	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019a92:	83 f8 09             	cmp    eax,0x9
c0019a95:	75 09                	jne    c0019aa0 <CPU::detectFeatures()+0x922>
c0019a97:	50                   	push   eax
c0019a98:	50                   	push   eax
c0019a99:	68 96 ba 02 c0       	push   0xc002ba96
c0019a9e:	eb 31                	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019aa0:	83 f8 05             	cmp    eax,0x5
c0019aa3:	75 09                	jne    c0019aae <CPU::detectFeatures()+0x930>
c0019aa5:	50                   	push   eax
c0019aa6:	50                   	push   eax
c0019aa7:	68 9e ba 02 c0       	push   0xc002ba9e
c0019aac:	eb 23                	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019aae:	83 f8 0c             	cmp    eax,0xc
c0019ab1:	75 09                	jne    c0019abc <CPU::detectFeatures()+0x93e>
c0019ab3:	55                   	push   ebp
c0019ab4:	55                   	push   ebp
c0019ab5:	68 ac ba 02 c0       	push   0xc002baac
c0019aba:	eb 15                	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019abc:	83 f8 0d             	cmp    eax,0xd
c0019abf:	75 09                	jne    c0019aca <CPU::detectFeatures()+0x94c>
c0019ac1:	57                   	push   edi
c0019ac2:	57                   	push   edi
c0019ac3:	68 b7 ba 02 c0       	push   0xc002bab7
c0019ac8:	eb 07                	jmp    c0019ad1 <CPU::detectFeatures()+0x953>
c0019aca:	56                   	push   esi
c0019acb:	56                   	push   esi
c0019acc:	68 cb ba 02 c0       	push   0xc002bacb
c0019ad1:	53                   	push   ebx
c0019ad2:	e8 21 ab ff ff       	call   c00145f8 <Device::setName(char const*)>
c0019ad7:	83 c4 10             	add    esp,0x10
c0019ada:	e9 80 00 00 00       	jmp    c0019b5f <CPU::detectFeatures()+0x9e1>
c0019adf:	51                   	push   ecx
c0019ae0:	51                   	push   ecx
c0019ae1:	68 17 b9 02 c0       	push   0xc002b917
c0019ae6:	57                   	push   edi
c0019ae7:	e8 48 6d fe ff       	call   c0000834 <strcpy>
c0019aec:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019af6:	e8 b3 67 fe ff       	call   c00002ae <is486>
c0019afb:	83 c4 10             	add    esp,0x10
c0019afe:	85 c0                	test   eax,eax
c0019b00:	74 2b                	je     c0019b2d <CPU::detectFeatures()+0x9af>
c0019b02:	52                   	push   edx
c0019b03:	52                   	push   edx
c0019b04:	68 d7 ba 02 c0       	push   0xc002bad7
c0019b09:	53                   	push   ebx
c0019b0a:	e8 e9 aa ff ff       	call   c00145f8 <Device::setName(char const*)>
c0019b0f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019b16:	0f 20 c0             	mov    eax,cr0
c0019b19:	83 e0 14             	and    eax,0x14
c0019b1c:	83 c4 10             	add    esp,0x10
c0019b1f:	83 f8 04             	cmp    eax,0x4
c0019b22:	75 1f                	jne    c0019b43 <CPU::detectFeatures()+0x9c5>
c0019b24:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c0019b2b:	eb 32                	jmp    c0019b5f <CPU::detectFeatures()+0x9e1>
c0019b2d:	50                   	push   eax
c0019b2e:	50                   	push   eax
c0019b2f:	68 e2 ba 02 c0       	push   0xc002bae2
c0019b34:	53                   	push   ebx
c0019b35:	e8 be aa ff ff       	call   c00145f8 <Device::setName(char const*)>
c0019b3a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019b41:	eb d3                	jmp    c0019b16 <CPU::detectFeatures()+0x998>
c0019b43:	e8 41 67 fe ff       	call   c0000289 <hasLegacyFPU>
c0019b48:	83 e0 01             	and    eax,0x1
c0019b4b:	8d 14 00             	lea    edx,[eax+eax*1]
c0019b4e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019b54:	83 e0 fd             	and    eax,0xfffffffd
c0019b57:	09 d0                	or     eax,edx
c0019b59:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0019b5f:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c0019b66:	83 c4 4c             	add    esp,0x4c
c0019b69:	5b                   	pop    ebx
c0019b6a:	5e                   	pop    esi
c0019b6b:	5f                   	pop    edi
c0019b6c:	5d                   	pop    ebp
c0019b6d:	c3                   	ret    

c0019b6e <CPU::setupSMEP()>:
c0019b6e:	0f 20 e0             	mov    eax,cr4
c0019b71:	0d 00 00 10 00       	or     eax,0x100000
c0019b76:	0f 22 e0             	mov    cr4,eax
c0019b79:	c3                   	ret    

c0019b7a <CPU::setupUMIP()>:
c0019b7a:	0f 20 e0             	mov    eax,cr4
c0019b7d:	80 cc 08             	or     ah,0x8
c0019b80:	0f 22 e0             	mov    cr4,eax
c0019b83:	c3                   	ret    

c0019b84 <CPU::setupTSC()>:
c0019b84:	0f 20 e0             	mov    eax,cr4
c0019b87:	83 c8 04             	or     eax,0x4
c0019b8a:	0f 22 e0             	mov    cr4,eax
c0019b8d:	c3                   	ret    

c0019b8e <CPU::setupLargePages()>:
c0019b8e:	0f 20 e0             	mov    eax,cr4
c0019b91:	83 c8 10             	or     eax,0x10
c0019b94:	0f 22 e0             	mov    cr4,eax
c0019b97:	c3                   	ret    

c0019b98 <CPU::setupPAT()>:
c0019b98:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0019b9d:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019ba4:	74 2c                	je     c0019bd2 <CPU::setupPAT()+0x3a>
c0019ba6:	53                   	push   ebx
c0019ba7:	83 ec 10             	sub    esp,0x10
c0019baa:	68 77 02 00 00       	push   0x277
c0019baf:	50                   	push   eax
c0019bb0:	e8 33 52 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019bb5:	83 e2 f8             	and    edx,0xfffffff8
c0019bb8:	83 ca 01             	or     edx,0x1
c0019bbb:	52                   	push   edx
c0019bbc:	50                   	push   eax
c0019bbd:	68 77 02 00 00       	push   0x277
c0019bc2:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c0019bc8:	e8 47 52 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c0019bcd:	83 c4 28             	add    esp,0x28
c0019bd0:	5b                   	pop    ebx
c0019bd1:	c3                   	ret    
c0019bd2:	c3                   	ret    
c0019bd3:	90                   	nop

c0019bd4 <CPU::setupMTRR()>:
c0019bd4:	c3                   	ret    
c0019bd5:	90                   	nop

c0019bd6 <CPU::setupGlobalPages()>:
c0019bd6:	0f 20 e0             	mov    eax,cr4
c0019bd9:	0c 80                	or     al,0x80
c0019bdb:	0f 22 e0             	mov    cr4,eax
c0019bde:	c3                   	ret    
c0019bdf:	90                   	nop

c0019be0 <CPU::allowUsermodeDataAccess()>:
c0019be0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019be4:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019beb:	74 03                	je     c0019bf0 <CPU::allowUsermodeDataAccess()+0x10>
c0019bed:	0f 01 cb             	stac   
c0019bf0:	c3                   	ret    
c0019bf1:	90                   	nop

c0019bf2 <CPU::prohibitUsermodeDataAccess()>:
c0019bf2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019bf6:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019bfd:	74 03                	je     c0019c02 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019bff:	0f 01 ca             	clac   
c0019c02:	c3                   	ret    
c0019c03:	90                   	nop

c0019c04 <CPU::setupSMAP()>:
c0019c04:	0f 20 e0             	mov    eax,cr4
c0019c07:	0d 00 00 20 00       	or     eax,0x200000
c0019c0c:	0f 22 e0             	mov    cr4,eax
c0019c0f:	eb e1                	jmp    c0019bf2 <CPU::prohibitUsermodeDataAccess()>
c0019c11:	90                   	nop

c0019c12 <CPU::setupFeatures()>:
c0019c12:	83 ec 0c             	sub    esp,0xc
c0019c15:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019c19:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019c20:	74 07                	je     c0019c29 <CPU::setupFeatures()+0x17>
c0019c22:	52                   	push   edx
c0019c23:	e8 46 ff ff ff       	call   c0019b6e <CPU::setupSMEP()>
c0019c28:	58                   	pop    eax
c0019c29:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019c30:	74 07                	je     c0019c39 <CPU::setupFeatures()+0x27>
c0019c32:	52                   	push   edx
c0019c33:	e8 cc ff ff ff       	call   c0019c04 <CPU::setupSMAP()>
c0019c38:	58                   	pop    eax
c0019c39:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019c40:	74 07                	je     c0019c49 <CPU::setupFeatures()+0x37>
c0019c42:	52                   	push   edx
c0019c43:	e8 32 ff ff ff       	call   c0019b7a <CPU::setupUMIP()>
c0019c48:	58                   	pop    eax
c0019c49:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019c50:	74 07                	je     c0019c59 <CPU::setupFeatures()+0x47>
c0019c52:	52                   	push   edx
c0019c53:	e8 2c ff ff ff       	call   c0019b84 <CPU::setupTSC()>
c0019c58:	58                   	pop    eax
c0019c59:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019c60:	74 07                	je     c0019c69 <CPU::setupFeatures()+0x57>
c0019c62:	52                   	push   edx
c0019c63:	e8 26 ff ff ff       	call   c0019b8e <CPU::setupLargePages()>
c0019c68:	59                   	pop    ecx
c0019c69:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019c70:	74 07                	je     c0019c79 <CPU::setupFeatures()+0x67>
c0019c72:	52                   	push   edx
c0019c73:	e8 5e ff ff ff       	call   c0019bd6 <CPU::setupGlobalPages()>
c0019c78:	58                   	pop    eax
c0019c79:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019c80:	74 0c                	je     c0019c8e <CPU::setupFeatures()+0x7c>
c0019c82:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019c86:	83 c4 0c             	add    esp,0xc
c0019c89:	e9 0a ff ff ff       	jmp    c0019b98 <CPU::setupPAT()>
c0019c8e:	83 c4 0c             	add    esp,0xc
c0019c91:	c3                   	ret    

c0019c92 <CPU::open(int, int, void*)>:
c0019c92:	57                   	push   edi
c0019c93:	56                   	push   esi
c0019c94:	53                   	push   ebx
c0019c95:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019c99:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019c9d:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019ca3:	83 ec 0c             	sub    esp,0xc
c0019ca6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019cac:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019cb2:	50                   	push   eax
c0019cb3:	e8 1c 54 ff ff       	call   c000f0d4 <GDT::setup()>
c0019cb8:	83 c4 0c             	add    esp,0xc
c0019cbb:	6a 00                	push   0x0
c0019cbd:	68 ef be ad de       	push   0xdeadbeef
c0019cc2:	57                   	push   edi
c0019cc3:	e8 28 78 ff ff       	call   c00114f0 <TSS::setup(unsigned long, unsigned long)>
c0019cc8:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019ccb:	e8 00 78 ff ff       	call   c00114d0 <TSS::flush()>
c0019cd0:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019cd6:	89 04 24             	mov    DWORD PTR [esp],eax
c0019cd9:	e8 52 56 ff ff       	call   c000f330 <IDT::setup()>
c0019cde:	b8 00 04 00 00       	mov    eax,0x400
c0019ce3:	0f 23 f8             	mov    db7,eax
c0019ce6:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019cf0:	e8 f0 61 ff ff       	call   c000fee5 <Phys::allocatePage()>
c0019cf5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019cfb:	89 30                	mov    DWORD PTR [eax],esi
c0019cfd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019d03:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019d06:	58                   	pop    eax
c0019d07:	5a                   	pop    edx
c0019d08:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019d0e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019d12:	e8 2d 89 ff ff       	call   c0012644 <VAS::setCPUSpecific(unsigned long)>
c0019d17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d1a:	e8 5f f4 ff ff       	call   c001917e <CPU::detectFeatures()>
c0019d1f:	e8 ce bc ff ff       	call   c00159f2 <setupInterruptController()>
c0019d24:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019d2a:	a1 40 e5 02 c0       	mov    eax,ds:0xc002e540
c0019d2f:	83 e0 10             	and    eax,0x10
c0019d32:	83 f8 01             	cmp    eax,0x1
c0019d35:	19 c0                	sbb    eax,eax
c0019d37:	83 e0 46             	and    eax,0x46
c0019d3a:	83 c0 1e             	add    eax,0x1e
c0019d3d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019d40:	e8 bb d1 ff ff       	call   c0016f00 <setupTimer(int)>
c0019d45:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019d4b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d4e:	e8 bf fe ff ff       	call   c0019c12 <CPU::setupFeatures()>
c0019d53:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019d56:	e8 a7 f1 ff ff       	call   c0018f02 <CPU::displayFeatures()>
c0019d5b:	83 c4 10             	add    esp,0x10
c0019d5e:	31 c0                	xor    eax,eax
c0019d60:	5b                   	pop    ebx
c0019d61:	5e                   	pop    esi
c0019d62:	5f                   	pop    edi
c0019d63:	c3                   	ret    

c0019d64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019d64:	57                   	push   edi
c0019d65:	56                   	push   esi
c0019d66:	53                   	push   ebx
c0019d67:	51                   	push   ecx
c0019d68:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019d6c:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019d6f:	0f 02 c0             	lar    eax,ax
c0019d72:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019d75:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019d79:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019d7c:	88 ca                	mov    dl,cl
c0019d7e:	c0 ea 06             	shr    dl,0x6
c0019d81:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019d85:	89 ca                	mov    edx,ecx
c0019d87:	66 c1 ea 03          	shr    dx,0x3
c0019d8b:	83 e2 07             	and    edx,0x7
c0019d8e:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019d93:	88 17                	mov    BYTE PTR [edi],dl
c0019d95:	0f 84 a6 01 00 00    	je     c0019f41 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019d9b:	83 e1 07             	and    ecx,0x7
c0019d9e:	80 f9 04             	cmp    cl,0x4
c0019da1:	0f 84 98 00 00 00    	je     c0019e3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019da7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019dac:	0f 95 c0             	setne  al
c0019daf:	80 f9 05             	cmp    cl,0x5
c0019db2:	0f 95 c2             	setne  dl
c0019db5:	08 c2                	or     dl,al
c0019db7:	74 79                	je     c0019e32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019db9:	84 c9                	test   cl,cl
c0019dbb:	75 05                	jne    c0019dc2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019dbd:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019dc0:	eb 3c                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dc2:	80 f9 01             	cmp    cl,0x1
c0019dc5:	75 05                	jne    c0019dcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019dc7:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019dca:	eb 32                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dcc:	80 f9 02             	cmp    cl,0x2
c0019dcf:	75 05                	jne    c0019dd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019dd1:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019dd4:	eb 28                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dd6:	31 c0                	xor    eax,eax
c0019dd8:	80 f9 03             	cmp    cl,0x3
c0019ddb:	75 05                	jne    c0019de2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019ddd:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019de0:	eb 1c                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019de2:	80 f9 05             	cmp    cl,0x5
c0019de5:	75 05                	jne    c0019dec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019de7:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019dea:	eb 12                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dec:	80 f9 06             	cmp    cl,0x6
c0019def:	75 05                	jne    c0019df6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019df1:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019df4:	eb 08                	jmp    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019df6:	80 f9 07             	cmp    cl,0x7
c0019df9:	75 03                	jne    c0019dfe <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019dfb:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019dfe:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019e03:	75 10                	jne    c0019e15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019e05:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019e09:	b9 03 00 00 00       	mov    ecx,0x3
c0019e0e:	01 d0                	add    eax,edx
c0019e10:	e9 37 01 00 00       	jmp    c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e15:	b9 02 00 00 00       	mov    ecx,0x2
c0019e1a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019e1f:	0f 85 27 01 00 00    	jne    c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e25:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019e28:	b9 06 00 00 00       	mov    ecx,0x6
c0019e2d:	e9 1a 01 00 00       	jmp    c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019e32:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019e35:	b9 06 00 00 00       	mov    ecx,0x6
c0019e3a:	e9 0f 01 00 00       	jmp    c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019e3f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019e42:	88 ca                	mov    dl,cl
c0019e44:	c0 ea 06             	shr    dl,0x6
c0019e47:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019e4b:	89 ca                	mov    edx,ecx
c0019e4d:	66 c1 ea 03          	shr    dx,0x3
c0019e51:	83 e2 07             	and    edx,0x7
c0019e54:	80 e1 07             	and    cl,0x7
c0019e57:	75 05                	jne    c0019e5e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019e59:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019e5c:	eb 4c                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e5e:	80 f9 01             	cmp    cl,0x1
c0019e61:	75 05                	jne    c0019e68 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019e63:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019e66:	eb 42                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e68:	80 f9 02             	cmp    cl,0x2
c0019e6b:	75 05                	jne    c0019e72 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019e6d:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019e70:	eb 38                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e72:	80 f9 03             	cmp    cl,0x3
c0019e75:	75 05                	jne    c0019e7c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019e77:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019e7a:	eb 2e                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e7c:	80 f9 04             	cmp    cl,0x4
c0019e7f:	75 12                	jne    c0019e93 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019e81:	f6 c4 60             	test   ah,0x60
c0019e84:	75 08                	jne    c0019e8e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019e86:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019e89:	8d 78 14             	lea    edi,[eax+0x14]
c0019e8c:	eb 1c                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e8e:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019e91:	eb 17                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e93:	80 f9 05             	cmp    cl,0x5
c0019e96:	75 05                	jne    c0019e9d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c0019e98:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c0019e9b:	eb 0d                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019e9d:	80 f9 06             	cmp    cl,0x6
c0019ea0:	75 05                	jne    c0019ea7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c0019ea2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0019ea5:	eb 03                	jmp    c0019eaa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ea7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0019eaa:	84 d2                	test   dl,dl
c0019eac:	75 05                	jne    c0019eb3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c0019eae:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019eb1:	eb 3c                	jmp    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eb3:	80 fa 01             	cmp    dl,0x1
c0019eb6:	75 05                	jne    c0019ebd <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019eb8:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019ebb:	eb 32                	jmp    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ebd:	80 fa 02             	cmp    dl,0x2
c0019ec0:	75 05                	jne    c0019ec7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019ec2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019ec5:	eb 28                	jmp    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ec7:	80 fa 03             	cmp    dl,0x3
c0019eca:	75 05                	jne    c0019ed1 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019ecc:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019ecf:	eb 1e                	jmp    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ed1:	31 c0                	xor    eax,eax
c0019ed3:	80 fa 04             	cmp    dl,0x4
c0019ed6:	74 17                	je     c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ed8:	80 fa 05             	cmp    dl,0x5
c0019edb:	75 05                	jne    c0019ee2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019edd:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019ee0:	eb 0d                	jmp    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019ee2:	80 fa 06             	cmp    dl,0x6
c0019ee5:	75 05                	jne    c0019eec <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019ee7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019eea:	eb 03                	jmp    c0019eef <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019eec:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019eef:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019ef4:	0f 94 c2             	sete   dl
c0019ef7:	80 f9 05             	cmp    cl,0x5
c0019efa:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019efe:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019f03:	d3 e0                	shl    eax,cl
c0019f05:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019f09:	74 0a                	je     c0019f15 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019f0b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f0e:	b9 07 00 00 00       	mov    ecx,0x7
c0019f13:	eb 37                	jmp    c0019f4c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f15:	01 f8                	add    eax,edi
c0019f17:	b9 03 00 00 00       	mov    ecx,0x3
c0019f1c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f21:	74 2b                	je     c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f23:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f28:	75 0d                	jne    c0019f37 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019f2a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019f2e:	01 c8                	add    eax,ecx
c0019f30:	b9 04 00 00 00       	mov    ecx,0x4
c0019f35:	eb 17                	jmp    c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f37:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019f3a:	b9 07 00 00 00       	mov    ecx,0x7
c0019f3f:	eb 0d                	jmp    c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f41:	b9 02 00 00 00       	mov    ecx,0x2
c0019f46:	b2 01                	mov    dl,0x1
c0019f48:	31 c0                	xor    eax,eax
c0019f4a:	eb 02                	jmp    c0019f4e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019f4c:	31 d2                	xor    edx,edx
c0019f4e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019f52:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019f54:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019f58:	88 11                	mov    BYTE PTR [ecx],dl
c0019f5a:	5a                   	pop    edx
c0019f5b:	5b                   	pop    ebx
c0019f5c:	5e                   	pop    esi
c0019f5d:	5f                   	pop    edi
c0019f5e:	c3                   	ret    

c0019f5f <Krnl::smpEntry()>:
c0019f5f:	eb fe                	jmp    c0019f5f <Krnl::smpEntry()>

c0019f61 <Krnl::startCPU(int)>:
c0019f61:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0019f66:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019f6d:	0f 84 36 01 00 00    	je     c001a0a9 <Krnl::startCPU(int)+0x148>
c0019f73:	53                   	push   ebx
c0019f74:	83 ec 08             	sub    esp,0x8
c0019f77:	e8 16 3f 00 00       	call   c001de92 <lockScheduler()>
c0019f7c:	52                   	push   edx
c0019f7d:	52                   	push   edx
c0019f7e:	6a 1b                	push   0x1b
c0019f80:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c0019f86:	e8 5d 4e ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019f8b:	59                   	pop    ecx
c0019f8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019f91:	89 c3                	mov    ebx,eax
c0019f93:	58                   	pop    eax
c0019f94:	53                   	push   ebx
c0019f95:	68 1c bb 02 c0       	push   0xc002bb1c
c0019f9a:	e8 50 90 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0019f9f:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fa9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019fad:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019fb7:	c1 e0 18             	shl    eax,0x18
c0019fba:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019fc0:	83 c4 10             	add    esp,0x10
c0019fc3:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019fc9:	09 c2                	or     edx,eax
c0019fcb:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019fd1:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019fd7:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019fdd:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019fe3:	80 cd c5             	or     ch,0xc5
c0019fe6:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019fec:	f3 90                	pause  
c0019fee:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019ff0:	0f ba e1 0c          	bt     ecx,0xc
c0019ff4:	72 f6                	jb     c0019fec <Krnl::startCPU(int)+0x8b>
c0019ff6:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019ffc:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a002:	09 c1                	or     ecx,eax
c001a004:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a00a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a010:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a016:	80 cd 85             	or     ch,0x85
c001a019:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a01f:	f3 90                	pause  
c001a021:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a023:	0f ba e1 0c          	bt     ecx,0xc
c001a027:	72 f6                	jb     c001a01f <Krnl::startCPU(int)+0xbe>
c001a029:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a033:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a039:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a03f:	09 c1                	or     ecx,eax
c001a041:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a047:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a04d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a053:	81 c9 02 06 00 00    	or     ecx,0x602
c001a059:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a05f:	f3 90                	pause  
c001a061:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a063:	0f ba e1 0c          	bt     ecx,0xc
c001a067:	72 f6                	jb     c001a05f <Krnl::startCPU(int)+0xfe>
c001a069:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a073:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a079:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a07f:	09 c8                	or     eax,ecx
c001a081:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a087:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a08d:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a092:	0d 02 06 00 00       	or     eax,0x602
c001a097:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a09d:	f3 90                	pause  
c001a09f:	8b 02                	mov    eax,DWORD PTR [edx]
c001a0a1:	0f ba e0 0c          	bt     eax,0xc
c001a0a5:	72 f6                	jb     c001a09d <Krnl::startCPU(int)+0x13c>
c001a0a7:	eb fe                	jmp    c001a0a7 <Krnl::startCPU(int)+0x146>
c001a0a9:	c3                   	ret    

c001a0aa <Krnl::startCPUs()>:
c001a0aa:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001a0af:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a0b5:	88 c2                	mov    dl,al
c001a0b7:	83 e2 0a             	and    edx,0xa
c001a0ba:	80 fa 0a             	cmp    dl,0xa
c001a0bd:	75 09                	jne    c001a0c8 <Krnl::startCPUs()+0x1e>
c001a0bf:	a8 01                	test   al,0x1
c001a0c1:	74 05                	je     c001a0c8 <Krnl::startCPUs()+0x1e>
c001a0c3:	e9 d3 60 fe ff       	jmp    c000019b <prepareTramp>
c001a0c8:	c3                   	ret    
c001a0c9:	90                   	nop

c001a0ca <EnvVarContainer::getEnv(char const*)>:
c001a0ca:	57                   	push   edi
c001a0cb:	56                   	push   esi
c001a0cc:	53                   	push   ebx
c001a0cd:	31 db                	xor    ebx,ebx
c001a0cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a0d3:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a0d5:	7e 2b                	jle    c001a102 <EnvVarContainer::getEnv(char const*)+0x38>
c001a0d7:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a0de:	50                   	push   eax
c001a0df:	50                   	push   eax
c001a0e0:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0e3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a0e6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a0ea:	e8 d1 67 fe ff       	call   c00008c0 <strcmp>
c001a0ef:	83 c4 10             	add    esp,0x10
c001a0f2:	85 c0                	test   eax,eax
c001a0f4:	75 09                	jne    c001a0ff <EnvVarContainer::getEnv(char const*)+0x35>
c001a0f6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a0f9:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a0fd:	eb 05                	jmp    c001a104 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a0ff:	43                   	inc    ebx
c001a100:	eb d1                	jmp    c001a0d3 <EnvVarContainer::getEnv(char const*)+0x9>
c001a102:	31 c0                	xor    eax,eax
c001a104:	5b                   	pop    ebx
c001a105:	5e                   	pop    esi
c001a106:	5f                   	pop    edi
c001a107:	c3                   	ret    

c001a108 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a108:	57                   	push   edi
c001a109:	56                   	push   esi
c001a10a:	53                   	push   ebx
c001a10b:	83 ec 1c             	sub    esp,0x1c
c001a10e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a112:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a116:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001a11a:	57                   	push   edi
c001a11b:	e8 74 66 fe ff       	call   c0000794 <strlen>
c001a120:	40                   	inc    eax
c001a121:	89 04 24             	mov    DWORD PTR [esp],eax
c001a124:	e8 1a 57 ff ff       	call   c000f843 <malloc>
c001a129:	89 34 24             	mov    DWORD PTR [esp],esi
c001a12c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a130:	e8 5f 66 fe ff       	call   c0000794 <strlen>
c001a135:	40                   	inc    eax
c001a136:	89 04 24             	mov    DWORD PTR [esp],eax
c001a139:	e8 05 57 ff ff       	call   c000f843 <malloc>
c001a13e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a141:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a145:	e8 4a 66 fe ff       	call   c0000794 <strlen>
c001a14a:	83 c4 0c             	add    esp,0xc
c001a14d:	40                   	inc    eax
c001a14e:	50                   	push   eax
c001a14f:	6a 00                	push   0x0
c001a151:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a155:	e8 1e 66 fe ff       	call   c0000778 <memset>
c001a15a:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a15d:	e8 32 66 fe ff       	call   c0000794 <strlen>
c001a162:	83 c4 0c             	add    esp,0xc
c001a165:	40                   	inc    eax
c001a166:	50                   	push   eax
c001a167:	57                   	push   edi
c001a168:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a16c:	e8 d3 65 fe ff       	call   c0000744 <memcpy>
c001a171:	89 34 24             	mov    DWORD PTR [esp],esi
c001a174:	e8 1b 66 fe ff       	call   c0000794 <strlen>
c001a179:	83 c4 0c             	add    esp,0xc
c001a17c:	40                   	inc    eax
c001a17d:	50                   	push   eax
c001a17e:	6a 00                	push   0x0
c001a180:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a184:	e8 ef 65 fe ff       	call   c0000778 <memset>
c001a189:	89 34 24             	mov    DWORD PTR [esp],esi
c001a18c:	e8 03 66 fe ff       	call   c0000794 <strlen>
c001a191:	83 c4 0c             	add    esp,0xc
c001a194:	40                   	inc    eax
c001a195:	50                   	push   eax
c001a196:	56                   	push   esi
c001a197:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a19b:	e8 a4 65 fe ff       	call   c0000744 <memcpy>
c001a1a0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a1a2:	40                   	inc    eax
c001a1a3:	89 03                	mov    DWORD PTR [ebx],eax
c001a1a5:	c1 e0 03             	shl    eax,0x3
c001a1a8:	5a                   	pop    edx
c001a1a9:	59                   	pop    ecx
c001a1aa:	50                   	push   eax
c001a1ab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a1ae:	e8 7c 56 ff ff       	call   c000f82f <realloc>
c001a1b3:	83 c4 0c             	add    esp,0xc
c001a1b6:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a1b9:	6a 08                	push   0x8
c001a1bb:	8d 54 24 10          	lea    edx,[esp+0x10]
c001a1bf:	52                   	push   edx
c001a1c0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a1c2:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a1c6:	50                   	push   eax
c001a1c7:	e8 78 65 fe ff       	call   c0000744 <memcpy>
c001a1cc:	83 c4 20             	add    esp,0x20
c001a1cf:	5b                   	pop    ebx
c001a1d0:	5e                   	pop    esi
c001a1d1:	5f                   	pop    edi
c001a1d2:	c3                   	ret    
c001a1d3:	90                   	nop

c001a1d4 <EnvVarContainer::deleteEnv(char const*)>:
c001a1d4:	c3                   	ret    
c001a1d5:	90                   	nop

c001a1d6 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a1d6:	55                   	push   ebp
c001a1d7:	57                   	push   edi
c001a1d8:	56                   	push   esi
c001a1d9:	53                   	push   ebx
c001a1da:	81 ec 38 01 00 00    	sub    esp,0x138
c001a1e0:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c001a1e7:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c001a1ee:	68 14 01 00 00       	push   0x114
c001a1f3:	e8 4b 56 ff ff       	call   c000f843 <malloc>
c001a1f8:	83 c4 0c             	add    esp,0xc
c001a1fb:	89 c7                	mov    edi,eax
c001a1fd:	ff 76 08             	push   DWORD PTR [esi+0x8]
c001a200:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a207:	50                   	push   eax
c001a208:	e8 3b 93 ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001a20d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001a210:	e8 05 96 ff ff       	call   c001381a <File::exists()>
c001a215:	83 c4 10             	add    esp,0x10
c001a218:	84 c0                	test   al,al
c001a21a:	75 31                	jne    c001a24d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c001a21c:	51                   	push   ecx
c001a21d:	51                   	push   ecx
c001a21e:	6a 12                	push   0x12
c001a220:	57                   	push   edi
c001a221:	e8 86 93 ff ff       	call   c00135ac <File::open(FileOpenMode)>
c001a226:	8b 07                	mov    eax,DWORD PTR [edi]
c001a228:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001a22b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a22e:	e8 61 65 fe ff       	call   c0000794 <strlen>
c001a233:	5a                   	pop    edx
c001a234:	31 d2                	xor    edx,edx
c001a236:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a23a:	51                   	push   ecx
c001a23b:	55                   	push   ebp
c001a23c:	52                   	push   edx
c001a23d:	50                   	push   eax
c001a23e:	57                   	push   edi
c001a23f:	ff d3                	call   ebx
c001a241:	83 c4 14             	add    esp,0x14
c001a244:	57                   	push   edi
c001a245:	e8 c0 93 ff ff       	call   c001360a <File::close()>
c001a24a:	83 c4 10             	add    esp,0x10
c001a24d:	31 db                	xor    ebx,ebx
c001a24f:	50                   	push   eax
c001a250:	31 ed                	xor    ebp,ebp
c001a252:	68 00 01 00 00       	push   0x100
c001a257:	6a 00                	push   0x0
c001a259:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a25d:	50                   	push   eax
c001a25e:	e8 15 65 fe ff       	call   c0000778 <memset>
c001a263:	58                   	pop    eax
c001a264:	5a                   	pop    edx
c001a265:	6a 01                	push   0x1
c001a267:	57                   	push   edi
c001a268:	e8 3f 93 ff ff       	call   c00135ac <File::open(FileOpenMode)>
c001a26d:	83 c4 10             	add    esp,0x10
c001a270:	83 ec 0c             	sub    esp,0xc
c001a273:	8b 07                	mov    eax,DWORD PTR [edi]
c001a275:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a279:	51                   	push   ecx
c001a27a:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a27e:	52                   	push   edx
c001a27f:	6a 00                	push   0x0
c001a281:	6a 01                	push   0x1
c001a283:	57                   	push   edi
c001a284:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a287:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a28b:	83 c4 20             	add    esp,0x20
c001a28e:	3c 0d                	cmp    al,0xd
c001a290:	0f 84 12 01 00 00    	je     c001a3a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a296:	85 db                	test   ebx,ebx
c001a298:	0f 84 fd 00 00 00    	je     c001a39b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a29e:	3c 0a                	cmp    al,0xa
c001a2a0:	74 13                	je     c001a2b5 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2a2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a2a7:	74 0c                	je     c001a2b5 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c001a2a9:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c001a2af:	0f 8e e6 00 00 00    	jle    c001a39b <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c001a2b5:	83 ec 0c             	sub    esp,0xc
c001a2b8:	8d 53 01             	lea    edx,[ebx+0x1]
c001a2bb:	29 dd                	sub    ebp,ebx
c001a2bd:	52                   	push   edx
c001a2be:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a2c2:	e8 7c 55 ff ff       	call   c000f843 <malloc>
c001a2c7:	8d 4d 04             	lea    ecx,[ebp+0x4]
c001a2ca:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a2ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001a2d1:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c001a2d5:	e8 69 55 ff ff       	call   c000f843 <malloc>
c001a2da:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a2de:	83 c4 0c             	add    esp,0xc
c001a2e1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a2e5:	52                   	push   edx
c001a2e6:	6a 00                	push   0x0
c001a2e8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a2ec:	e8 87 64 fe ff       	call   c0000778 <memset>
c001a2f1:	83 c4 0c             	add    esp,0xc
c001a2f4:	53                   	push   ebx
c001a2f5:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c001a2f9:	55                   	push   ebp
c001a2fa:	01 eb                	add    ebx,ebp
c001a2fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a300:	e8 3f 64 fe ff       	call   c0000744 <memcpy>
c001a305:	83 c4 0c             	add    esp,0xc
c001a308:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001a30c:	51                   	push   ecx
c001a30d:	6a 00                	push   0x0
c001a30f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a313:	e8 60 64 fe ff       	call   c0000778 <memset>
c001a318:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a31b:	e8 74 64 fe ff       	call   c0000794 <strlen>
c001a320:	83 c4 0c             	add    esp,0xc
c001a323:	50                   	push   eax
c001a324:	53                   	push   ebx
c001a325:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a329:	e8 16 64 fe ff       	call   c0000744 <memcpy>
c001a32e:	5b                   	pop    ebx
c001a32f:	58                   	pop    eax
c001a330:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a334:	68 2d bb 02 c0       	push   0xc002bb2d
c001a339:	e8 b1 8c ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001a33e:	8b 06                	mov    eax,DWORD PTR [esi]
c001a340:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001a343:	40                   	inc    eax
c001a344:	83 c4 10             	add    esp,0x10
c001a347:	89 06                	mov    DWORD PTR [esi],eax
c001a349:	85 d2                	test   edx,edx
c001a34b:	75 0c                	jne    c001a359 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c001a34d:	83 ec 0c             	sub    esp,0xc
c001a350:	6a 08                	push   0x8
c001a352:	e8 ec 54 ff ff       	call   c000f843 <malloc>
c001a357:	eb 0c                	jmp    c001a365 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c001a359:	c1 e0 03             	shl    eax,0x3
c001a35c:	51                   	push   ecx
c001a35d:	51                   	push   ecx
c001a35e:	50                   	push   eax
c001a35f:	52                   	push   edx
c001a360:	e8 ca 54 ff ff       	call   c000f82f <realloc>
c001a365:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c001a368:	83 c4 10             	add    esp,0x10
c001a36b:	31 db                	xor    ebx,ebx
c001a36d:	52                   	push   edx
c001a36e:	6a 08                	push   0x8
c001a370:	8d 44 24 20          	lea    eax,[esp+0x20]
c001a374:	50                   	push   eax
c001a375:	8b 16                	mov    edx,DWORD PTR [esi]
c001a377:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a37a:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c001a37e:	50                   	push   eax
c001a37f:	e8 c0 63 fe ff       	call   c0000744 <memcpy>
c001a384:	83 c4 0c             	add    esp,0xc
c001a387:	68 00 01 00 00       	push   0x100
c001a38c:	6a 00                	push   0x0
c001a38e:	55                   	push   ebp
c001a38f:	31 ed                	xor    ebp,ebp
c001a391:	e8 e2 63 fe ff       	call   c0000778 <memset>
c001a396:	83 c4 10             	add    esp,0x10
c001a399:	eb 0d                	jmp    c001a3a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a39b:	3c 3d                	cmp    al,0x3d
c001a39d:	74 07                	je     c001a3a6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c001a39f:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c001a3a3:	45                   	inc    ebp
c001a3a4:	eb 02                	jmp    c001a3a8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c001a3a6:	89 eb                	mov    ebx,ebp
c001a3a8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a3ad:	0f 85 bd fe ff ff    	jne    c001a270 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c001a3b3:	50                   	push   eax
c001a3b4:	50                   	push   eax
c001a3b5:	ff 36                	push   DWORD PTR [esi]
c001a3b7:	68 3b bb 02 c0       	push   0xc002bb3b
c001a3bc:	e8 2e 8c ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001a3c1:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a3c7:	5b                   	pop    ebx
c001a3c8:	5e                   	pop    esi
c001a3c9:	5f                   	pop    edi
c001a3ca:	5d                   	pop    ebp
c001a3cb:	c3                   	ret    

c001a3cc <EnvVarContainer::__loadSystem()>:
c001a3cc:	83 ec 10             	sub    esp,0x10
c001a3cf:	68 60 da 02 c0       	push   0xc002da60
c001a3d4:	68 66 bb 02 c0       	push   0xc002bb66
c001a3d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a3dd:	e8 f4 fd ff ff       	call   c001a1d6 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a3e2:	83 c4 1c             	add    esp,0x1c
c001a3e5:	c3                   	ret    

c001a3e6 <EnvVarContainer::__loadUser()>:
c001a3e6:	c3                   	ret    
c001a3e7:	90                   	nop

c001a3e8 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a3e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3ec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a3f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a3f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a3fa:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a3fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a401:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a408:	90                   	nop
c001a409:	c3                   	ret    

c001a40a <EnvVarContainer::~EnvVarContainer()>:
c001a40a:	83 ec 0c             	sub    esp,0xc
c001a40d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a411:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a414:	85 c0                	test   eax,eax
c001a416:	74 1d                	je     c001a435 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a418:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a41c:	8b 00                	mov    eax,DWORD PTR [eax]
c001a41e:	85 c0                	test   eax,eax
c001a420:	74 13                	je     c001a435 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a422:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a426:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a429:	83 ec 0c             	sub    esp,0xc
c001a42c:	50                   	push   eax
c001a42d:	e8 21 54 ff ff       	call   c000f853 <free>
c001a432:	83 c4 10             	add    esp,0x10
c001a435:	90                   	nop
c001a436:	83 c4 0c             	add    esp,0xc
c001a439:	c3                   	ret    

c001a43a <Krnl::getEnv(Process*, char const*)>:
c001a43a:	53                   	push   ebx
c001a43b:	83 ec 08             	sub    esp,0x8
c001a43e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a442:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a446:	39 05 94 1a 03 c0    	cmp    DWORD PTR ds:0xc0031a94,eax
c001a44c:	74 04                	je     c001a452 <Krnl::getEnv(Process*, char const*)+0x18>
c001a44e:	85 c0                	test   eax,eax
c001a450:	75 0b                	jne    c001a45d <Krnl::getEnv(Process*, char const*)+0x23>
c001a452:	a1 74 10 03 c0       	mov    eax,ds:0xc0031074
c001a457:	85 c0                	test   eax,eax
c001a459:	75 19                	jne    c001a474 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a45b:	eb 27                	jmp    c001a484 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a45d:	52                   	push   edx
c001a45e:	52                   	push   edx
c001a45f:	53                   	push   ebx
c001a460:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a466:	e8 5f fc ff ff       	call   c001a0ca <EnvVarContainer::getEnv(char const*)>
c001a46b:	83 c4 10             	add    esp,0x10
c001a46e:	85 c0                	test   eax,eax
c001a470:	75 28                	jne    c001a49a <Krnl::getEnv(Process*, char const*)+0x60>
c001a472:	eb de                	jmp    c001a452 <Krnl::getEnv(Process*, char const*)+0x18>
c001a474:	52                   	push   edx
c001a475:	52                   	push   edx
c001a476:	53                   	push   ebx
c001a477:	50                   	push   eax
c001a478:	e8 4d fc ff ff       	call   c001a0ca <EnvVarContainer::getEnv(char const*)>
c001a47d:	83 c4 10             	add    esp,0x10
c001a480:	85 c0                	test   eax,eax
c001a482:	75 16                	jne    c001a49a <Krnl::getEnv(Process*, char const*)+0x60>
c001a484:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a488:	a1 78 10 03 c0       	mov    eax,ds:0xc0031078
c001a48d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a491:	83 c4 08             	add    esp,0x8
c001a494:	5b                   	pop    ebx
c001a495:	e9 30 fc ff ff       	jmp    c001a0ca <EnvVarContainer::getEnv(char const*)>
c001a49a:	83 c4 08             	add    esp,0x8
c001a49d:	5b                   	pop    ebx
c001a49e:	c3                   	ret    

c001a49f <Krnl::setEnvSystem(char const*, char const*)>:
c001a49f:	83 ec 10             	sub    esp,0x10
c001a4a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4aa:	ff 35 78 10 03 c0    	push   DWORD PTR ds:0xc0031078
c001a4b0:	e8 53 fc ff ff       	call   c001a108 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4b5:	83 c4 1c             	add    esp,0x1c
c001a4b8:	c3                   	ret    

c001a4b9 <Krnl::setEnvUser(char const*, char const*)>:
c001a4b9:	a1 74 10 03 c0       	mov    eax,ds:0xc0031074
c001a4be:	85 c0                	test   eax,eax
c001a4c0:	74 15                	je     c001a4d7 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a4c2:	83 ec 10             	sub    esp,0x10
c001a4c5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4c9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a4cd:	50                   	push   eax
c001a4ce:	e8 35 fc ff ff       	call   c001a108 <EnvVarContainer::setEnv(char const*, char const*)>
c001a4d3:	83 c4 1c             	add    esp,0x1c
c001a4d6:	c3                   	ret    
c001a4d7:	c3                   	ret    

c001a4d8 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a4d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a4dc:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a4e2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a4e6:	e9 1d fc ff ff       	jmp    c001a108 <EnvVarContainer::setEnv(char const*, char const*)>

c001a4eb <Krnl::deleteEnvSystem(char const*)>:
c001a4eb:	c3                   	ret    

c001a4ec <Krnl::deleteEnvUser(char const*)>:
c001a4ec:	c3                   	ret    

c001a4ed <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a4ed:	c3                   	ret    

c001a4ee <Krnl::newProcessEnv(Process*)>:
c001a4ee:	83 ec 28             	sub    esp,0x28
c001a4f1:	6a 0c                	push   0xc
c001a4f3:	e8 4b 53 ff ff       	call   c000f843 <malloc>
c001a4f8:	5a                   	pop    edx
c001a4f9:	59                   	pop    ecx
c001a4fa:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a4fe:	50                   	push   eax
c001a4ff:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a503:	e8 e0 fe ff ff       	call   c001a3e8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a508:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a50c:	83 c4 2c             	add    esp,0x2c
c001a50f:	c3                   	ret    

c001a510 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a510:	56                   	push   esi
c001a511:	53                   	push   ebx
c001a512:	83 ec 10             	sub    esp,0x10
c001a515:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a519:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a51f:	6a 0c                	push   0xc
c001a521:	e8 1d 53 ff ff       	call   c000f843 <malloc>
c001a526:	89 c3                	mov    ebx,eax
c001a528:	58                   	pop    eax
c001a529:	5a                   	pop    edx
c001a52a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a52e:	53                   	push   ebx
c001a52f:	e8 b4 fe ff ff       	call   c001a3e8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a534:	8b 06                	mov    eax,DWORD PTR [esi]
c001a536:	89 03                	mov    DWORD PTR [ebx],eax
c001a538:	c1 e0 03             	shl    eax,0x3
c001a53b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a53e:	e8 00 53 ff ff       	call   c000f843 <malloc>
c001a543:	83 c4 0c             	add    esp,0xc
c001a546:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a549:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a54b:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a552:	52                   	push   edx
c001a553:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a556:	50                   	push   eax
c001a557:	e8 e8 61 fe ff       	call   c0000744 <memcpy>
c001a55c:	89 d8                	mov    eax,ebx
c001a55e:	83 c4 14             	add    esp,0x14
c001a561:	5b                   	pop    ebx
c001a562:	5e                   	pop    esi
c001a563:	c3                   	ret    

c001a564 <Krnl::loadSystemEnv()>:
c001a564:	53                   	push   ebx
c001a565:	83 ec 14             	sub    esp,0x14
c001a568:	6a 0c                	push   0xc
c001a56a:	e8 d4 52 ff ff       	call   c000f843 <malloc>
c001a56f:	89 c3                	mov    ebx,eax
c001a571:	58                   	pop    eax
c001a572:	5a                   	pop    edx
c001a573:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001a579:	53                   	push   ebx
c001a57a:	e8 69 fe ff ff       	call   c001a3e8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a57f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a582:	89 1d 78 10 03 c0    	mov    DWORD PTR ds:0xc0031078,ebx
c001a588:	e8 3f fe ff ff       	call   c001a3cc <EnvVarContainer::__loadSystem()>
c001a58d:	83 c4 18             	add    esp,0x18
c001a590:	5b                   	pop    ebx
c001a591:	c3                   	ret    

c001a592 <Krnl::loadUserEnv()>:
c001a592:	53                   	push   ebx
c001a593:	83 ec 14             	sub    esp,0x14
c001a596:	6a 0c                	push   0xc
c001a598:	e8 a6 52 ff ff       	call   c000f843 <malloc>
c001a59d:	89 c3                	mov    ebx,eax
c001a59f:	58                   	pop    eax
c001a5a0:	5a                   	pop    edx
c001a5a1:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001a5a7:	53                   	push   ebx
c001a5a8:	e8 3b fe ff ff       	call   c001a3e8 <EnvVarContainer::EnvVarContainer(Process*)>
c001a5ad:	89 1d 74 10 03 c0    	mov    DWORD PTR ds:0xc0031074,ebx
c001a5b3:	83 c4 18             	add    esp,0x18
c001a5b6:	5b                   	pop    ebx
c001a5b7:	c3                   	ret    

c001a5b8 <Krnl::flushEnv()>:
c001a5b8:	c3                   	ret    

c001a5b9 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a5b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5bd:	8b 15 74 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031074
c001a5c3:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a5c9:	a1 78 10 03 c0       	mov    eax,ds:0xc0031078
c001a5ce:	8b 00                	mov    eax,DWORD PTR [eax]
c001a5d0:	03 01                	add    eax,DWORD PTR [ecx]
c001a5d2:	85 d2                	test   edx,edx
c001a5d4:	74 02                	je     c001a5d8 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a5d6:	03 02                	add    eax,DWORD PTR [edx]
c001a5d8:	c3                   	ret    

c001a5d9 <Krnl::getProcessEnvPair(Process*, int)>:
c001a5d9:	57                   	push   edi
c001a5da:	8b 0d 74 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031074
c001a5e0:	56                   	push   esi
c001a5e1:	85 c9                	test   ecx,ecx
c001a5e3:	53                   	push   ebx
c001a5e4:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a5e8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a5ec:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a5f2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a5f6:	8b 02                	mov    eax,DWORD PTR [edx]
c001a5f8:	75 47                	jne    c001a641 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a5fa:	39 c3                	cmp    ebx,eax
c001a5fc:	7c 47                	jl     c001a645 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a5fe:	8b 15 78 10 03 c0    	mov    edx,DWORD PTR ds:0xc0031078
c001a604:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a606:	01 c1                	add    ecx,eax
c001a608:	39 d9                	cmp    ecx,ebx
c001a60a:	7e 6c                	jle    c001a678 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a60c:	51                   	push   ecx
c001a60d:	89 d9                	mov    ecx,ebx
c001a60f:	29 c1                	sub    ecx,eax
c001a611:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a614:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a618:	53                   	push   ebx
c001a619:	68 88 bb 02 c0       	push   0xc002bb88
c001a61e:	e8 cc 89 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001a623:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a629:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a62b:	a1 78 10 03 c0       	mov    eax,ds:0xc0031078
c001a630:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a633:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a637:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a63a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a63d:	89 06                	mov    DWORD PTR [esi],eax
c001a63f:	eb 51                	jmp    c001a692 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a641:	39 c3                	cmp    ebx,eax
c001a643:	7d 05                	jge    c001a64a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a645:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a648:	eb 20                	jmp    c001a66a <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a64a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a64c:	8d 14 07             	lea    edx,[edi+eax*1]
c001a64f:	39 da                	cmp    edx,ebx
c001a651:	7e 04                	jle    c001a657 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a653:	29 c3                	sub    ebx,eax
c001a655:	eb 10                	jmp    c001a667 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a657:	8b 0d 78 10 03 c0    	mov    ecx,DWORD PTR ds:0xc0031078
c001a65d:	03 11                	add    edx,DWORD PTR [ecx]
c001a65f:	39 da                	cmp    edx,ebx
c001a661:	7e 15                	jle    c001a678 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a663:	29 c3                	sub    ebx,eax
c001a665:	29 fb                	sub    ebx,edi
c001a667:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a66a:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a66e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a671:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a674:	89 06                	mov    DWORD PTR [esi],eax
c001a676:	eb 1d                	jmp    c001a695 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a678:	83 ec 0c             	sub    esp,0xc
c001a67b:	68 9c bb 02 c0       	push   0xc002bb9c
c001a680:	e8 18 00 00 00       	call   c001a69d <Krnl::panic(char const*)>
c001a685:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a68b:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a692:	83 c4 10             	add    esp,0x10
c001a695:	89 f0                	mov    eax,esi
c001a697:	5b                   	pop    ebx
c001a698:	5e                   	pop    esi
c001a699:	5f                   	pop    edi
c001a69a:	c2 04 00             	ret    0x4

c001a69d <Krnl::panic(char const*)>:
c001a69d:	55                   	push   ebp
c001a69e:	89 e5                	mov    ebp,esp
c001a6a0:	53                   	push   ebx
c001a6a1:	83 ec 0c             	sub    esp,0xc
c001a6a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a6a7:	fa                   	cli    
c001a6a8:	c6 05 84 10 03 c0 01 	mov    BYTE PTR ds:0xc0031084,0x1
c001a6af:	53                   	push   ebx
c001a6b0:	c6 05 64 d4 02 c0 00 	mov    BYTE PTR ds:0xc002d464,0x0
c001a6b7:	68 b6 bb 02 c0       	push   0xc002bbb6
c001a6bc:	e8 2e 89 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001a6c1:	58                   	pop    eax
c001a6c2:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a6c7:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6cd:	e8 5f 66 ff ff       	call   c0010d31 <setActiveTerminal(VgaText*)>
c001a6d2:	83 c4 0c             	add    esp,0xc
c001a6d5:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a6da:	6a 01                	push   0x1
c001a6dc:	6a 0f                	push   0xf
c001a6de:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6e4:	e8 79 60 ff ff       	call   c0010762 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a6e9:	58                   	pop    eax
c001a6ea:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a6ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a6f5:	e8 d8 68 ff ff       	call   c0010fd2 <VgaText::clearScreen()>
c001a6fa:	58                   	pop    eax
c001a6fb:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a700:	5a                   	pop    edx
c001a701:	68 cf bb 02 c0       	push   0xc002bbcf
c001a706:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a70c:	e8 3f 6a ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a711:	59                   	pop    ecx
c001a712:	58                   	pop    eax
c001a713:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a718:	68 74 bc 02 c0       	push   0xc002bc74
c001a71d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a723:	e8 28 6a ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a728:	58                   	pop    eax
c001a729:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a72e:	5a                   	pop    edx
c001a72f:	68 eb bb 02 c0       	push   0xc002bbeb
c001a734:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a73a:	e8 11 6a ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a73f:	59                   	pop    ecx
c001a740:	58                   	pop    eax
c001a741:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a746:	53                   	push   ebx
c001a747:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a74d:	e8 fe 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a752:	58                   	pop    eax
c001a753:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a758:	5a                   	pop    edx
c001a759:	68 0b bc 02 c0       	push   0xc002bc0b
c001a75e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a764:	e8 e7 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a769:	a1 80 10 03 c0       	mov    eax,ds:0xc0031080
c001a76e:	83 c4 10             	add    esp,0x10
c001a771:	85 c0                	test   eax,eax
c001a773:	74 02                	je     c001a777 <Krnl::panic(char const*)+0xda>
c001a775:	ff d0                	call   eax
c001a777:	83 ec 0c             	sub    esp,0xc
c001a77a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a77d:	e8 fd 2f 00 00       	call   c001d77f <Thr::getDriverNameFromAddress(unsigned long)>
c001a782:	83 c4 10             	add    esp,0x10
c001a785:	89 c3                	mov    ebx,eax
c001a787:	85 c0                	test   eax,eax
c001a789:	0f 84 50 02 00 00    	je     c001a9df <Krnl::panic(char const*)+0x342>
c001a78f:	83 ec 08             	sub    esp,0x8
c001a792:	8b 15 94 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a94
c001a798:	68 b0 bc 02 c0       	push   0xc002bcb0
c001a79d:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7a3:	e8 a8 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a7a8:	58                   	pop    eax
c001a7a9:	5a                   	pop    edx
c001a7aa:	8b 15 94 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a94
c001a7b0:	68 eb bb 02 c0       	push   0xc002bbeb
c001a7b5:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a7bb:	e8 90 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a7c0:	59                   	pop    ecx
c001a7c1:	58                   	pop    eax
c001a7c2:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a7c7:	53                   	push   ebx
c001a7c8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7ce:	e8 7d 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a7d3:	83 c4 10             	add    esp,0x10
c001a7d6:	83 ec 08             	sub    esp,0x8
c001a7d9:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a7de:	68 0a bc 02 c0       	push   0xc002bc0a
c001a7e3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a7e9:	e8 62 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a7ee:	58                   	pop    eax
c001a7ef:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a7f4:	5a                   	pop    edx
c001a7f5:	68 08 bd 02 c0       	push   0xc002bd08
c001a7fa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a800:	e8 4b 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a805:	59                   	pop    ecx
c001a806:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a80b:	5b                   	pop    ebx
c001a80c:	68 48 bd 02 c0       	push   0xc002bd48
c001a811:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a817:	e8 34 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a81c:	58                   	pop    eax
c001a81d:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a822:	5a                   	pop    edx
c001a823:	68 f6 bb 02 c0       	push   0xc002bbf6
c001a828:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a82e:	e8 1d 69 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a833:	59                   	pop    ecx
c001a834:	5b                   	pop    ebx
c001a835:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a838:	68 0e bc 02 c0       	push   0xc002bc0e
c001a83d:	e8 ad 87 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001a842:	58                   	pop    eax
c001a843:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a846:	5a                   	pop    edx
c001a847:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a84a:	68 17 bc 02 c0       	push   0xc002bc17
c001a84f:	e8 9b 87 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001a854:	59                   	pop    ecx
c001a855:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a858:	5b                   	pop    ebx
c001a859:	8b 00                	mov    eax,DWORD PTR [eax]
c001a85b:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a85e:	68 20 bc 02 c0       	push   0xc002bc20
c001a863:	e8 87 87 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001a868:	58                   	pop    eax
c001a869:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a86e:	5a                   	pop    edx
c001a86f:	68 8c bd 02 c0       	push   0xc002bd8c
c001a874:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a87a:	e8 d1 68 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a87f:	59                   	pop    ecx
c001a880:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a885:	5b                   	pop    ebx
c001a886:	68 29 bc 02 c0       	push   0xc002bc29
c001a88b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a891:	e8 ba 68 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a896:	0f 20 c0             	mov    eax,cr0
c001a899:	5a                   	pop    edx
c001a89a:	59                   	pop    ecx
c001a89b:	50                   	push   eax
c001a89c:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8a1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8a7:	e8 ca 68 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a8ac:	5b                   	pop    ebx
c001a8ad:	58                   	pop    eax
c001a8ae:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8b3:	68 33 bc 02 c0       	push   0xc002bc33
c001a8b8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8be:	e8 8d 68 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a8c3:	0f 20 d0             	mov    eax,cr2
c001a8c6:	5a                   	pop    edx
c001a8c7:	59                   	pop    ecx
c001a8c8:	50                   	push   eax
c001a8c9:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8ce:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8d4:	e8 9d 68 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a8d9:	5b                   	pop    ebx
c001a8da:	58                   	pop    eax
c001a8db:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8e0:	68 3d bc 02 c0       	push   0xc002bc3d
c001a8e5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8eb:	e8 60 68 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a8f0:	0f 20 d8             	mov    eax,cr3
c001a8f3:	5a                   	pop    edx
c001a8f4:	59                   	pop    ecx
c001a8f5:	50                   	push   eax
c001a8f6:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a8fb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a901:	e8 70 68 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a906:	5b                   	pop    ebx
c001a907:	58                   	pop    eax
c001a908:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a90d:	68 50 bc 02 c0       	push   0xc002bc50
c001a912:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a918:	e8 33 68 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a91d:	0f 20 e0             	mov    eax,cr4
c001a920:	5a                   	pop    edx
c001a921:	59                   	pop    ecx
c001a922:	50                   	push   eax
c001a923:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a928:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a92e:	e8 43 68 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a933:	5b                   	pop    ebx
c001a934:	58                   	pop    eax
c001a935:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a93a:	68 5a bc 02 c0       	push   0xc002bc5a
c001a93f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a945:	e8 06 68 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a94a:	5a                   	pop    edx
c001a94b:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a950:	59                   	pop    ecx
c001a951:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a957:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a95a:	50                   	push   eax
c001a95b:	e8 16 68 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a960:	5b                   	pop    ebx
c001a961:	58                   	pop    eax
c001a962:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a967:	68 71 bc 02 c0       	push   0xc002bc71
c001a96c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a972:	e8 d9 67 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a977:	5a                   	pop    edx
c001a978:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a97d:	59                   	pop    ecx
c001a97e:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a984:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a987:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a98a:	50                   	push   eax
c001a98b:	e8 e6 67 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a990:	5b                   	pop    ebx
c001a991:	58                   	pop    eax
c001a992:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a997:	68 71 bc 02 c0       	push   0xc002bc71
c001a99c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9a2:	e8 a9 67 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a9a7:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a9ac:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a9af:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a9b5:	8b 12                	mov    edx,DWORD PTR [edx]
c001a9b7:	59                   	pop    ecx
c001a9b8:	5b                   	pop    ebx
c001a9b9:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a9bc:	50                   	push   eax
c001a9bd:	e8 b4 67 ff ff       	call   c0011176 <VgaText::putx(unsigned int)>
c001a9c2:	83 c4 10             	add    esp,0x10
c001a9c5:	b2 fe                	mov    dl,0xfe
c001a9c7:	e4 60                	in     al,0x60
c001a9c9:	3c 1c                	cmp    al,0x1c
c001a9cb:	74 04                	je     c001a9d1 <Krnl::panic(char const*)+0x334>
c001a9cd:	3c 5a                	cmp    al,0x5a
c001a9cf:	75 f6                	jne    c001a9c7 <Krnl::panic(char const*)+0x32a>
c001a9d1:	e4 64                	in     al,0x64
c001a9d3:	a8 02                	test   al,0x2
c001a9d5:	75 fa                	jne    c001a9d1 <Krnl::panic(char const*)+0x334>
c001a9d7:	88 d0                	mov    al,dl
c001a9d9:	e6 64                	out    0x64,al
c001a9db:	fa                   	cli    
c001a9dc:	f4                   	hlt    
c001a9dd:	eb e8                	jmp    c001a9c7 <Krnl::panic(char const*)+0x32a>
c001a9df:	50                   	push   eax
c001a9e0:	50                   	push   eax
c001a9e1:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a9e6:	68 dc bc 02 c0       	push   0xc002bcdc
c001a9eb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9f1:	e8 5a 67 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001a9f6:	58                   	pop    eax
c001a9f7:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001a9fc:	5a                   	pop    edx
c001a9fd:	68 eb bb 02 c0       	push   0xc002bbeb
c001aa02:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa08:	e8 43 67 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001aa0d:	59                   	pop    ecx
c001aa0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aa13:	5b                   	pop    ebx
c001aa14:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aa17:	83 c0 0c             	add    eax,0xc
c001aa1a:	50                   	push   eax
c001aa1b:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001aa20:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa26:	e8 25 67 ff ff       	call   c0011150 <VgaText::puts(char const*)>
c001aa2b:	83 c4 10             	add    esp,0x10
c001aa2e:	e9 a3 fd ff ff       	jmp    c001a7d6 <Krnl::panic(char const*)+0x139>

c001aa33 <Net::switchEndian16(unsigned short)>:
c001aa33:	83 ec 04             	sub    esp,0x4
c001aa36:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aa3a:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aa3e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa42:	c1 f8 08             	sar    eax,0x8
c001aa45:	89 c2                	mov    edx,eax
c001aa47:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aa4b:	c1 e0 08             	shl    eax,0x8
c001aa4e:	09 d0                	or     eax,edx
c001aa50:	83 c4 04             	add    esp,0x4
c001aa53:	c3                   	ret    

c001aa54 <Net::switchEndian32(unsigned int)>:
c001aa54:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa58:	c1 e8 18             	shr    eax,0x18
c001aa5b:	89 c2                	mov    edx,eax
c001aa5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa61:	c1 e0 08             	shl    eax,0x8
c001aa64:	25 00 00 ff 00       	and    eax,0xff0000
c001aa69:	09 c2                	or     edx,eax
c001aa6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa6f:	c1 e8 08             	shr    eax,0x8
c001aa72:	25 00 ff 00 00       	and    eax,0xff00
c001aa77:	09 c2                	or     edx,eax
c001aa79:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aa7d:	c1 e0 18             	shl    eax,0x18
c001aa80:	09 d0                	or     eax,edx
c001aa82:	c3                   	ret    

c001aa83 <Net::crc32Calc(unsigned char*, int)>:
c001aa83:	83 ec 10             	sub    esp,0x10
c001aa86:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001aa8b:	75 07                	jne    c001aa94 <Net::crc32Calc(unsigned char*, int)+0x11>
c001aa8d:	b8 00 00 00 00       	mov    eax,0x0
c001aa92:	eb 7c                	jmp    c001ab10 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aa94:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001aa99:	7f 07                	jg     c001aaa2 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001aa9b:	b8 00 00 00 00       	mov    eax,0x0
c001aaa0:	eb 6e                	jmp    c001ab10 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001aaa2:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001aaaa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001aab2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001aab6:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001aaba:	7d 4e                	jge    c001ab0a <Net::crc32Calc(unsigned char*, int)+0x87>
c001aabc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001aac0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aac4:	01 d0                	add    eax,edx
c001aac6:	8a 00                	mov    al,BYTE PTR [eax]
c001aac8:	0f b6 c0             	movzx  eax,al
c001aacb:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001aacf:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001aad7:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001aadc:	7f 26                	jg     c001ab04 <Net::crc32Calc(unsigned char*, int)+0x81>
c001aade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aae2:	83 e0 01             	and    eax,0x1
c001aae5:	74 0d                	je     c001aaf4 <Net::crc32Calc(unsigned char*, int)+0x71>
c001aae7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaeb:	d1 e8                	shr    eax,1
c001aaed:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001aaf2:	eb 06                	jmp    c001aafa <Net::crc32Calc(unsigned char*, int)+0x77>
c001aaf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001aaf8:	d1 e8                	shr    eax,1
c001aafa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001aafe:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab02:	eb d3                	jmp    c001aad7 <Net::crc32Calc(unsigned char*, int)+0x54>
c001ab04:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ab08:	eb a8                	jmp    c001aab2 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ab0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ab0e:	f7 d0                	not    eax
c001ab10:	83 c4 10             	add    esp,0x10
c001ab13:	c3                   	ret    

c001ab14 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ab14:	83 ec 1c             	sub    esp,0x1c
c001ab17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab1b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ab1f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ab27:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001ab2c:	7f 14                	jg     c001ab42 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001ab2e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab32:	8d 50 01             	lea    edx,[eax+0x1]
c001ab35:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab39:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001ab3c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ab40:	eb e5                	jmp    c001ab27 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001ab42:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab46:	8d 50 01             	lea    edx,[eax+0x1]
c001ab49:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab4d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001ab50:	83 ec 04             	sub    esp,0x4
c001ab53:	6a 06                	push   0x6
c001ab55:	8d 44 24 36          	lea    eax,[esp+0x36]
c001ab59:	50                   	push   eax
c001ab5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab5e:	e8 e1 5b fe ff       	call   c0000744 <memcpy>
c001ab63:	83 c4 10             	add    esp,0x10
c001ab66:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab6b:	83 ec 04             	sub    esp,0x4
c001ab6e:	6a 06                	push   0x6
c001ab70:	8d 44 24 30          	lea    eax,[esp+0x30]
c001ab74:	50                   	push   eax
c001ab75:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001ab79:	e8 c6 5b fe ff       	call   c0000744 <memcpy>
c001ab7e:	83 c4 10             	add    esp,0x10
c001ab81:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001ab86:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ab8a:	0f b7 c0             	movzx  eax,ax
c001ab8d:	c1 f8 08             	sar    eax,0x8
c001ab90:	89 c1                	mov    ecx,eax
c001ab92:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ab96:	8d 50 01             	lea    edx,[eax+0x1]
c001ab99:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ab9d:	88 ca                	mov    dl,cl
c001ab9f:	88 10                	mov    BYTE PTR [eax],dl
c001aba1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001aba5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001aba9:	8d 48 01             	lea    ecx,[eax+0x1]
c001abac:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001abb0:	88 10                	mov    BYTE PTR [eax],dl
c001abb2:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001abb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001abba:	83 ec 04             	sub    esp,0x4
c001abbd:	52                   	push   edx
c001abbe:	50                   	push   eax
c001abbf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001abc3:	e8 7c 5b fe ff       	call   c0000744 <memcpy>
c001abc8:	83 c4 10             	add    esp,0x10
c001abcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001abcf:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001abd3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abd7:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001abdb:	83 ec 08             	sub    esp,0x8
c001abde:	50                   	push   eax
c001abdf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001abe3:	e8 9b fe ff ff       	call   c001aa83 <Net::crc32Calc(unsigned char*, int)>
c001abe8:	83 c4 10             	add    esp,0x10
c001abeb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001abef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abf3:	c1 e8 18             	shr    eax,0x18
c001abf6:	89 c1                	mov    ecx,eax
c001abf8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001abfc:	8d 50 01             	lea    edx,[eax+0x1]
c001abff:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac03:	88 ca                	mov    dl,cl
c001ac05:	88 10                	mov    BYTE PTR [eax],dl
c001ac07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac0b:	c1 e8 10             	shr    eax,0x10
c001ac0e:	89 c1                	mov    ecx,eax
c001ac10:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac14:	8d 50 01             	lea    edx,[eax+0x1]
c001ac17:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac1b:	88 ca                	mov    dl,cl
c001ac1d:	88 10                	mov    BYTE PTR [eax],dl
c001ac1f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac23:	c1 e8 08             	shr    eax,0x8
c001ac26:	89 c1                	mov    ecx,eax
c001ac28:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac2c:	8d 50 01             	lea    edx,[eax+0x1]
c001ac2f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac33:	88 ca                	mov    dl,cl
c001ac35:	88 10                	mov    BYTE PTR [eax],dl
c001ac37:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ac3b:	8d 50 01             	lea    edx,[eax+0x1]
c001ac3e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001ac42:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ac46:	88 10                	mov    BYTE PTR [eax],dl
c001ac48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001ac4c:	83 c4 1c             	add    esp,0x1c
c001ac4f:	c3                   	ret    

c001ac50 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ac50:	83 ec 2c             	sub    esp,0x2c
c001ac53:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ac57:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ac5b:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001ac60:	83 ec 04             	sub    esp,0x4
c001ac63:	6a 06                	push   0x6
c001ac65:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac69:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac6d:	83 c0 0e             	add    eax,0xe
c001ac70:	50                   	push   eax
c001ac71:	e8 ce 5a fe ff       	call   c0000744 <memcpy>
c001ac76:	83 c4 10             	add    esp,0x10
c001ac79:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac7e:	83 ec 04             	sub    esp,0x4
c001ac81:	6a 06                	push   0x6
c001ac83:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ac87:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001ac8b:	83 c0 08             	add    eax,0x8
c001ac8e:	50                   	push   eax
c001ac8f:	e8 b0 5a fe ff       	call   c0000744 <memcpy>
c001ac94:	83 c4 10             	add    esp,0x10
c001ac97:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001ac9c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001aca0:	8d 50 01             	lea    edx,[eax+0x1]
c001aca3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001aca7:	8a 00                	mov    al,BYTE PTR [eax]
c001aca9:	0f b6 c0             	movzx  eax,al
c001acac:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001acb1:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001acb5:	8d 50 01             	lea    edx,[eax+0x1]
c001acb8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001acbc:	8a 00                	mov    al,BYTE PTR [eax]
c001acbe:	0f b6 c0             	movzx  eax,al
c001acc1:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001acc6:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001accb:	c1 e0 08             	shl    eax,0x8
c001acce:	89 c2                	mov    edx,eax
c001acd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001acd4:	09 d0                	or     eax,edx
c001acd6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001acda:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001acde:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001ace3:	75 3a                	jne    c001ad1f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ace5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ace9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acec:	66 3d dc 05          	cmp    ax,0x5dc
c001acf0:	77 10                	ja     c001ad02 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001acf2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001acf6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001acf9:	0f b7 c0             	movzx  eax,ax
c001acfc:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ad00:	eb 1d                	jmp    c001ad1f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001ad02:	83 ec 0c             	sub    esp,0xc
c001ad05:	68 b4 bd 02 c0       	push   0xc002bdb4
c001ad0a:	e8 e0 82 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001ad0f:	83 c4 10             	add    esp,0x10
c001ad12:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad16:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001ad1a:	e9 c0 00 00 00       	jmp    c001addf <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001ad1f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ad23:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad27:	8b 00                	mov    eax,DWORD PTR [eax]
c001ad29:	83 ec 04             	sub    esp,0x4
c001ad2c:	52                   	push   edx
c001ad2d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad31:	50                   	push   eax
c001ad32:	e8 0d 5a fe ff       	call   c0000744 <memcpy>
c001ad37:	83 c4 10             	add    esp,0x10
c001ad3a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001ad3e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001ad42:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad46:	8d 50 01             	lea    edx,[eax+0x1]
c001ad49:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad4d:	8a 00                	mov    al,BYTE PTR [eax]
c001ad4f:	0f b6 c0             	movzx  eax,al
c001ad52:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad56:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad5a:	8d 50 01             	lea    edx,[eax+0x1]
c001ad5d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad61:	8a 00                	mov    al,BYTE PTR [eax]
c001ad63:	0f b6 c0             	movzx  eax,al
c001ad66:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001ad6a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad6e:	8d 50 01             	lea    edx,[eax+0x1]
c001ad71:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad75:	8a 00                	mov    al,BYTE PTR [eax]
c001ad77:	0f b6 c0             	movzx  eax,al
c001ad7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ad7e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ad82:	8d 50 01             	lea    edx,[eax+0x1]
c001ad85:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001ad89:	8a 00                	mov    al,BYTE PTR [eax]
c001ad8b:	0f b6 c0             	movzx  eax,al
c001ad8e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ad92:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ad96:	c1 e0 18             	shl    eax,0x18
c001ad99:	89 c2                	mov    edx,eax
c001ad9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ad9f:	c1 e0 10             	shl    eax,0x10
c001ada2:	09 c2                	or     edx,eax
c001ada4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ada8:	c1 e0 08             	shl    eax,0x8
c001adab:	09 d0                	or     eax,edx
c001adad:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001adb1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001adb5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adb9:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001adbd:	83 e8 04             	sub    eax,0x4
c001adc0:	83 ec 08             	sub    esp,0x8
c001adc3:	50                   	push   eax
c001adc4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001adc8:	e8 b6 fc ff ff       	call   c001aa83 <Net::crc32Calc(unsigned char*, int)>
c001adcd:	83 c4 10             	add    esp,0x10
c001add0:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001add4:	0f 94 c2             	sete   dl
c001add7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001addb:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001adde:	90                   	nop
c001addf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ade3:	83 c4 2c             	add    esp,0x2c
c001ade6:	c2 04 00             	ret    0x4

c001ade9 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001ade9:	55                   	push   ebp
c001adea:	57                   	push   edi
c001adeb:	56                   	push   esi
c001adec:	53                   	push   ebx
c001aded:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001adf3:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001adfa:	8a 1e                	mov    bl,BYTE PTR [esi]
c001adfc:	8d 6e 01             	lea    ebp,[esi+0x1]
c001adff:	80 fb 40             	cmp    bl,0x40
c001ae02:	75 1b                	jne    c001ae1f <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001ae04:	8a 16                	mov    dl,BYTE PTR [esi]
c001ae06:	84 d2                	test   dl,dl
c001ae08:	0f 84 f1 00 00 00    	je     c001aeff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae0e:	8d 46 01             	lea    eax,[esi+0x1]
c001ae11:	80 fa 3a             	cmp    dl,0x3a
c001ae14:	74 04                	je     c001ae1a <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001ae16:	89 c6                	mov    esi,eax
c001ae18:	eb ea                	jmp    c001ae04 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001ae1a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001ae1d:	89 c6                	mov    esi,eax
c001ae1f:	50                   	push   eax
c001ae20:	6a 40                	push   0x40
c001ae22:	6a 00                	push   0x0
c001ae24:	8d 44 24 24          	lea    eax,[esp+0x24]
c001ae28:	50                   	push   eax
c001ae29:	e8 4a 59 fe ff       	call   c0000778 <memset>
c001ae2e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001ae35:	31 c0                	xor    eax,eax
c001ae37:	83 c4 10             	add    esp,0x10
c001ae3a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001ae3c:	84 c9                	test   cl,cl
c001ae3e:	0f 84 bb 00 00 00    	je     c001aeff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae44:	3d c7 00 00 00       	cmp    eax,0xc7
c001ae49:	0f 8f b0 00 00 00    	jg     c001aeff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae4f:	80 f9 0a             	cmp    cl,0xa
c001ae52:	0f 85 98 00 00 00    	jne    c001aef0 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001ae58:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001ae5d:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001ae61:	a8 df                	test   al,0xdf
c001ae63:	0f 94 c1             	sete   cl
c001ae66:	3c 23                	cmp    al,0x23
c001ae68:	0f 94 c2             	sete   dl
c001ae6b:	08 d1                	or     cl,dl
c001ae6d:	75 4a                	jne    c001aeb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae6f:	8d 50 f7             	lea    edx,[eax-0x9]
c001ae72:	80 fa 01             	cmp    dl,0x1
c001ae75:	76 42                	jbe    c001aeb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae77:	3c 5b                	cmp    al,0x5b
c001ae79:	75 42                	jne    c001aebd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001ae7b:	80 fb 40             	cmp    bl,0x40
c001ae7e:	75 39                	jne    c001aeb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001ae80:	83 ec 0c             	sub    esp,0xc
c001ae83:	8d 54 24 65          	lea    edx,[esp+0x65]
c001ae87:	52                   	push   edx
c001ae88:	e8 07 59 fe ff       	call   c0000794 <strlen>
c001ae8d:	83 c4 10             	add    esp,0x10
c001ae90:	83 f8 3f             	cmp    eax,0x3f
c001ae93:	77 6a                	ja     c001aeff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001ae95:	50                   	push   eax
c001ae96:	50                   	push   eax
c001ae97:	8d 54 24 61          	lea    edx,[esp+0x61]
c001ae9b:	52                   	push   edx
c001ae9c:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aea0:	52                   	push   edx
c001aea1:	e8 8e 59 fe ff       	call   c0000834 <strcpy>
c001aea6:	58                   	pop    eax
c001aea7:	8d 54 24 24          	lea    edx,[esp+0x24]
c001aeab:	52                   	push   edx
c001aeac:	e8 e3 58 fe ff       	call   c0000794 <strlen>
c001aeb1:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aeb6:	83 c4 10             	add    esp,0x10
c001aeb9:	31 d2                	xor    edx,edx
c001aebb:	eb 3a                	jmp    c001aef7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aebd:	80 fb 40             	cmp    bl,0x40
c001aec0:	74 06                	je     c001aec8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aec2:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aec6:	eb 20                	jmp    c001aee8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aec8:	50                   	push   eax
c001aec9:	50                   	push   eax
c001aeca:	55                   	push   ebp
c001aecb:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aecf:	50                   	push   eax
c001aed0:	e8 eb 59 fe ff       	call   c00008c0 <strcmp>
c001aed5:	83 c4 10             	add    esp,0x10
c001aed8:	85 c0                	test   eax,eax
c001aeda:	75 dd                	jne    c001aeb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aedc:	eb e4                	jmp    c001aec2 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aede:	8d 50 01             	lea    edx,[eax+0x1]
c001aee1:	80 f9 3d             	cmp    cl,0x3d
c001aee4:	74 1d                	je     c001af03 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aee6:	89 d0                	mov    eax,edx
c001aee8:	8a 08                	mov    cl,BYTE PTR [eax]
c001aeea:	84 c9                	test   cl,cl
c001aeec:	75 f0                	jne    c001aede <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aeee:	eb 0f                	jmp    c001aeff <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aef0:	8d 50 01             	lea    edx,[eax+0x1]
c001aef3:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aef7:	47                   	inc    edi
c001aef8:	89 d0                	mov    eax,edx
c001aefa:	e9 3b ff ff ff       	jmp    c001ae3a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aeff:	31 c0                	xor    eax,eax
c001af01:	eb 33                	jmp    c001af36 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001af03:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001af07:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001af0a:	50                   	push   eax
c001af0b:	50                   	push   eax
c001af0c:	8d 44 24 60          	lea    eax,[esp+0x60]
c001af10:	50                   	push   eax
c001af11:	56                   	push   esi
c001af12:	e8 a9 59 fe ff       	call   c00008c0 <strcmp>
c001af17:	83 c4 10             	add    esp,0x10
c001af1a:	85 c0                	test   eax,eax
c001af1c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001af20:	75 97                	jne    c001aeb9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001af22:	51                   	push   ecx
c001af23:	51                   	push   ecx
c001af24:	52                   	push   edx
c001af25:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001af2c:	e8 03 59 fe ff       	call   c0000834 <strcpy>
c001af31:	83 c4 10             	add    esp,0x10
c001af34:	b0 01                	mov    al,0x1
c001af36:	81 c4 2c 01 00 00    	add    esp,0x12c
c001af3c:	5b                   	pop    ebx
c001af3d:	5e                   	pop    esi
c001af3e:	5f                   	pop    edi
c001af3f:	5d                   	pop    ebp
c001af40:	c3                   	ret    

c001af41 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001af41:	57                   	push   edi
c001af42:	56                   	push   esi
c001af43:	53                   	push   ebx
c001af44:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001af4a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001af51:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001af58:	53                   	push   ebx
c001af59:	e8 36 58 fe ff       	call   c0000794 <strlen>
c001af5e:	89 34 24             	mov    DWORD PTR [esp],esi
c001af61:	89 c7                	mov    edi,eax
c001af63:	e8 2c 58 fe ff       	call   c0000794 <strlen>
c001af68:	83 c4 10             	add    esp,0x10
c001af6b:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001af6f:	3d ff 00 00 00       	cmp    eax,0xff
c001af74:	0f 87 d3 00 00 00    	ja     c001b04d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001af7a:	57                   	push   edi
c001af7b:	57                   	push   edi
c001af7c:	56                   	push   esi
c001af7d:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001af81:	56                   	push   esi
c001af82:	e8 ad 58 fe ff       	call   c0000834 <strcpy>
c001af87:	58                   	pop    eax
c001af88:	5a                   	pop    edx
c001af89:	68 14 c3 02 c0       	push   0xc002c314
c001af8e:	56                   	push   esi
c001af8f:	e8 e0 59 fe ff       	call   c0000974 <strcat>
c001af94:	59                   	pop    ecx
c001af95:	5f                   	pop    edi
c001af96:	53                   	push   ebx
c001af97:	56                   	push   esi
c001af98:	e8 d7 59 fe ff       	call   c0000974 <strcat>
c001af9d:	58                   	pop    eax
c001af9e:	5a                   	pop    edx
c001af9f:	68 00 be 02 c0       	push   0xc002be00
c001afa4:	56                   	push   esi
c001afa5:	e8 ca 59 fe ff       	call   c0000974 <strcat>
c001afaa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001afb1:	e8 8d 48 ff ff       	call   c000f843 <malloc>
c001afb6:	83 c4 0c             	add    esp,0xc
c001afb9:	89 c3                	mov    ebx,eax
c001afbb:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001afc1:	56                   	push   esi
c001afc2:	50                   	push   eax
c001afc3:	e8 80 85 ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001afc8:	83 c4 10             	add    esp,0x10
c001afcb:	85 db                	test   ebx,ebx
c001afcd:	74 7e                	je     c001b04d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001afcf:	51                   	push   ecx
c001afd0:	51                   	push   ecx
c001afd1:	6a 01                	push   0x1
c001afd3:	53                   	push   ebx
c001afd4:	e8 d3 85 ff ff       	call   c00135ac <File::open(FileOpenMode)>
c001afd9:	83 c4 10             	add    esp,0x10
c001afdc:	85 c0                	test   eax,eax
c001afde:	74 08                	je     c001afe8 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001afe0:	83 ec 0c             	sub    esp,0xc
c001afe3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001afe5:	53                   	push   ebx
c001afe6:	eb 5f                	jmp    c001b047 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001afe8:	52                   	push   edx
c001afe9:	8d 44 24 17          	lea    eax,[esp+0x17]
c001afed:	50                   	push   eax
c001afee:	8d 44 24 20          	lea    eax,[esp+0x20]
c001aff2:	50                   	push   eax
c001aff3:	53                   	push   ebx
c001aff4:	e8 5f 88 ff ff       	call   c0013858 <File::stat(unsigned long long*, bool*)>
c001aff9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001affd:	83 c4 10             	add    esp,0x10
c001b000:	89 c1                	mov    ecx,eax
c001b002:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b006:	74 31                	je     c001b039 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b008:	83 ec 0c             	sub    esp,0xc
c001b00b:	50                   	push   eax
c001b00c:	e8 32 48 ff ff       	call   c000f843 <malloc>
c001b011:	89 c6                	mov    esi,eax
c001b013:	58                   	pop    eax
c001b014:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b016:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b01a:	52                   	push   edx
c001b01b:	56                   	push   esi
c001b01c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b020:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b024:	53                   	push   ebx
c001b025:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b028:	83 c4 20             	add    esp,0x20
c001b02b:	85 c0                	test   eax,eax
c001b02d:	75 0a                	jne    c001b039 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b02f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b033:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b037:	74 18                	je     c001b051 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b039:	83 ec 0c             	sub    esp,0xc
c001b03c:	53                   	push   ebx
c001b03d:	e8 c8 85 ff ff       	call   c001360a <File::close()>
c001b042:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b044:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b047:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b04a:	83 c4 10             	add    esp,0x10
c001b04d:	31 c0                	xor    eax,eax
c001b04f:	eb 3b                	jmp    c001b08c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b051:	83 ec 0c             	sub    esp,0xc
c001b054:	53                   	push   ebx
c001b055:	e8 b0 85 ff ff       	call   c001360a <File::close()>
c001b05a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b05c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b05f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b062:	83 c4 0c             	add    esp,0xc
c001b065:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b06c:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b073:	56                   	push   esi
c001b074:	e8 70 fd ff ff       	call   c001ade9 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b079:	89 34 24             	mov    DWORD PTR [esp],esi
c001b07c:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b080:	e8 ce 47 ff ff       	call   c000f853 <free>
c001b085:	83 c4 10             	add    esp,0x10
c001b088:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b08c:	81 c4 20 01 00 00    	add    esp,0x120
c001b092:	5b                   	pop    ebx
c001b093:	5e                   	pop    esi
c001b094:	5f                   	pop    edi
c001b095:	c3                   	ret    

c001b096 <Reg::getLine(char*, char*, char*)>:
c001b096:	57                   	push   edi
c001b097:	56                   	push   esi
c001b098:	53                   	push   ebx
c001b099:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b09d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b0a1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b0a5:	57                   	push   edi
c001b0a6:	56                   	push   esi
c001b0a7:	53                   	push   ebx
c001b0a8:	68 05 be 02 c0       	push   0xc002be05
c001b0ad:	e8 8f fe ff ff       	call   c001af41 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0b2:	83 c4 10             	add    esp,0x10
c001b0b5:	84 c0                	test   al,al
c001b0b7:	75 10                	jne    c001b0c9 <Reg::getLine(char*, char*, char*)+0x33>
c001b0b9:	57                   	push   edi
c001b0ba:	56                   	push   esi
c001b0bb:	53                   	push   ebx
c001b0bc:	68 2a be 02 c0       	push   0xc002be2a
c001b0c1:	e8 7b fe ff ff       	call   c001af41 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b0c6:	83 c4 10             	add    esp,0x10
c001b0c9:	5b                   	pop    ebx
c001b0ca:	5e                   	pop    esi
c001b0cb:	5f                   	pop    edi
c001b0cc:	c3                   	ret    

c001b0cd <Reg::readInt(char*, char*, int*)>:
c001b0cd:	55                   	push   ebp
c001b0ce:	57                   	push   edi
c001b0cf:	56                   	push   esi
c001b0d0:	53                   	push   ebx
c001b0d1:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b0d7:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b0db:	57                   	push   edi
c001b0dc:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0e3:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b0ea:	e8 a7 ff ff ff       	call   c001b096 <Reg::getLine(char*, char*, char*)>
c001b0ef:	83 c4 10             	add    esp,0x10
c001b0f2:	84 c0                	test   al,al
c001b0f4:	0f 84 b3 00 00 00    	je     c001b1ad <Reg::readInt(char*, char*, int*)+0xe0>
c001b0fa:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b0fe:	80 fa 2b             	cmp    dl,0x2b
c001b101:	74 0c                	je     c001b10f <Reg::readInt(char*, char*, int*)+0x42>
c001b103:	80 fa 2d             	cmp    dl,0x2d
c001b106:	75 0e                	jne    c001b116 <Reg::readInt(char*, char*, int*)+0x49>
c001b108:	ba 01 00 00 00       	mov    edx,0x1
c001b10d:	eb 0b                	jmp    c001b11a <Reg::readInt(char*, char*, int*)+0x4d>
c001b10f:	ba 01 00 00 00       	mov    edx,0x1
c001b114:	eb 02                	jmp    c001b118 <Reg::readInt(char*, char*, int*)+0x4b>
c001b116:	31 d2                	xor    edx,edx
c001b118:	31 c0                	xor    eax,eax
c001b11a:	be 0a 00 00 00       	mov    esi,0xa
c001b11f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b124:	75 20                	jne    c001b146 <Reg::readInt(char*, char*, int*)+0x79>
c001b126:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b12a:	80 f9 78             	cmp    cl,0x78
c001b12d:	75 0a                	jne    c001b139 <Reg::readInt(char*, char*, int*)+0x6c>
c001b12f:	83 c2 02             	add    edx,0x2
c001b132:	be 10 00 00 00       	mov    esi,0x10
c001b137:	eb 0d                	jmp    c001b146 <Reg::readInt(char*, char*, int*)+0x79>
c001b139:	80 f9 62             	cmp    cl,0x62
c001b13c:	75 08                	jne    c001b146 <Reg::readInt(char*, char*, int*)+0x79>
c001b13e:	83 c2 02             	add    edx,0x2
c001b141:	be 02 00 00 00       	mov    esi,0x2
c001b146:	01 d7                	add    edi,edx
c001b148:	31 d2                	xor    edx,edx
c001b14a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b14c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b150:	80 fb 0d             	cmp    bl,0xd
c001b153:	0f 94 c3             	sete   bl
c001b156:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b15b:	0f 94 c1             	sete   cl
c001b15e:	08 cb                	or     bl,cl
c001b160:	75 3a                	jne    c001b19c <Reg::readInt(char*, char*, int*)+0xcf>
c001b162:	0f af d6             	imul   edx,esi
c001b165:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b16a:	83 fe 10             	cmp    esi,0x10
c001b16d:	75 26                	jne    c001b195 <Reg::readInt(char*, char*, int*)+0xc8>
c001b16f:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b173:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b176:	89 e9                	mov    ecx,ebp
c001b178:	80 f9 05             	cmp    cl,0x5
c001b17b:	77 06                	ja     c001b183 <Reg::readInt(char*, char*, int*)+0xb6>
c001b17d:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b181:	eb 16                	jmp    c001b199 <Reg::readInt(char*, char*, int*)+0xcc>
c001b183:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b187:	83 e9 61             	sub    ecx,0x61
c001b18a:	80 f9 05             	cmp    cl,0x5
c001b18d:	77 06                	ja     c001b195 <Reg::readInt(char*, char*, int*)+0xc8>
c001b18f:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b193:	eb 04                	jmp    c001b199 <Reg::readInt(char*, char*, int*)+0xcc>
c001b195:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b199:	47                   	inc    edi
c001b19a:	eb ae                	jmp    c001b14a <Reg::readInt(char*, char*, int*)+0x7d>
c001b19c:	84 c0                	test   al,al
c001b19e:	74 02                	je     c001b1a2 <Reg::readInt(char*, char*, int*)+0xd5>
c001b1a0:	f7 da                	neg    edx
c001b1a2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b1a9:	89 10                	mov    DWORD PTR [eax],edx
c001b1ab:	88 d8                	mov    al,bl
c001b1ad:	81 c4 ec 00 00 00    	add    esp,0xec
c001b1b3:	5b                   	pop    ebx
c001b1b4:	5e                   	pop    esi
c001b1b5:	5f                   	pop    edi
c001b1b6:	5d                   	pop    ebp
c001b1b7:	c3                   	ret    

c001b1b8 <Reg::readString(char*, char*, char*, int)>:
c001b1b8:	57                   	push   edi
c001b1b9:	56                   	push   esi
c001b1ba:	53                   	push   ebx
c001b1bb:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b1c1:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b1c8:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b1cc:	57                   	push   edi
c001b1cd:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1d4:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b1db:	e8 b6 fe ff ff       	call   c001b096 <Reg::getLine(char*, char*, char*)>
c001b1e0:	83 c4 10             	add    esp,0x10
c001b1e3:	89 c6                	mov    esi,eax
c001b1e5:	84 c0                	test   al,al
c001b1e7:	74 44                	je     c001b22d <Reg::readString(char*, char*, char*, int)+0x75>
c001b1e9:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b1f0:	31 c0                	xor    eax,eax
c001b1f2:	4a                   	dec    edx
c001b1f3:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b1f6:	84 c9                	test   cl,cl
c001b1f8:	74 0f                	je     c001b209 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1fa:	39 c2                	cmp    edx,eax
c001b1fc:	7e 0b                	jle    c001b209 <Reg::readString(char*, char*, char*, int)+0x51>
c001b1fe:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b201:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b206:	40                   	inc    eax
c001b207:	eb ea                	jmp    c001b1f3 <Reg::readString(char*, char*, char*, int)+0x3b>
c001b209:	83 ec 0c             	sub    esp,0xc
c001b20c:	53                   	push   ebx
c001b20d:	e8 82 55 fe ff       	call   c0000794 <strlen>
c001b212:	83 c4 10             	add    esp,0x10
c001b215:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b21a:	75 11                	jne    c001b22d <Reg::readString(char*, char*, char*, int)+0x75>
c001b21c:	83 ec 0c             	sub    esp,0xc
c001b21f:	53                   	push   ebx
c001b220:	e8 6f 55 fe ff       	call   c0000794 <strlen>
c001b225:	83 c4 10             	add    esp,0x10
c001b228:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b22d:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b233:	89 f0                	mov    eax,esi
c001b235:	5b                   	pop    ebx
c001b236:	5e                   	pop    esi
c001b237:	5f                   	pop    edi
c001b238:	c3                   	ret    

c001b239 <Reg::readBool(char*, char*, bool*)>:
c001b239:	83 ec 20             	sub    esp,0x20
c001b23c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b240:	50                   	push   eax
c001b241:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b245:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b249:	e8 7f fe ff ff       	call   c001b0cd <Reg::readInt(char*, char*, int*)>
c001b24e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b253:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b257:	0f 95 02             	setne  BYTE PTR [edx]
c001b25a:	83 c4 2c             	add    esp,0x2c
c001b25d:	c3                   	ret    

c001b25e <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b25e:	53                   	push   ebx
c001b25f:	83 ec 1c             	sub    esp,0x1c
c001b262:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b266:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b26a:	50                   	push   eax
c001b26b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b26f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b273:	e8 c1 ff ff ff       	call   c001b239 <Reg::readBool(char*, char*, bool*)>
c001b278:	83 c4 10             	add    esp,0x10
c001b27b:	84 c0                	test   al,al
c001b27d:	74 04                	je     c001b283 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b27f:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b283:	88 d8                	mov    al,bl
c001b285:	83 c4 18             	add    esp,0x18
c001b288:	5b                   	pop    ebx
c001b289:	c3                   	ret    

c001b28a <Reg::readIntWithDefault(char*, char*, int)>:
c001b28a:	53                   	push   ebx
c001b28b:	83 ec 1c             	sub    esp,0x1c
c001b28e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b292:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b296:	50                   	push   eax
c001b297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b29b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b29f:	e8 29 fe ff ff       	call   c001b0cd <Reg::readInt(char*, char*, int*)>
c001b2a4:	83 c4 10             	add    esp,0x10
c001b2a7:	84 c0                	test   al,al
c001b2a9:	74 04                	je     c001b2af <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b2ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b2af:	89 d8                	mov    eax,ebx
c001b2b1:	83 c4 18             	add    esp,0x18
c001b2b4:	5b                   	pop    ebx
c001b2b5:	c3                   	ret    

c001b2b6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b2b6:	57                   	push   edi
c001b2b7:	56                   	push   esi
c001b2b8:	53                   	push   ebx
c001b2b9:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001b2bd:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001b2c1:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b2c5:	56                   	push   esi
c001b2c6:	53                   	push   ebx
c001b2c7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b2cf:	e8 e4 fe ff ff       	call   c001b1b8 <Reg::readString(char*, char*, char*, int)>
c001b2d4:	83 c4 10             	add    esp,0x10
c001b2d7:	84 c0                	test   al,al
c001b2d9:	75 1b                	jne    c001b2f6 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001b2db:	50                   	push   eax
c001b2dc:	56                   	push   esi
c001b2dd:	4e                   	dec    esi
c001b2de:	6a 00                	push   0x0
c001b2e0:	53                   	push   ebx
c001b2e1:	e8 92 54 fe ff       	call   c0000778 <memset>
c001b2e6:	83 c4 0c             	add    esp,0xc
c001b2e9:	56                   	push   esi
c001b2ea:	57                   	push   edi
c001b2eb:	53                   	push   ebx
c001b2ec:	89 fb                	mov    ebx,edi
c001b2ee:	e8 51 54 fe ff       	call   c0000744 <memcpy>
c001b2f3:	83 c4 10             	add    esp,0x10
c001b2f6:	89 d8                	mov    eax,ebx
c001b2f8:	5b                   	pop    ebx
c001b2f9:	5e                   	pop    esi
c001b2fa:	5f                   	pop    edi
c001b2fb:	c3                   	ret    

c001b2fc <Sys::eject(regs*)>:
c001b2fc:	83 ec 0c             	sub    esp,0xc
c001b2ff:	83 ca ff             	or     edx,0xffffffff
c001b302:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b306:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b309:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b30e:	83 e9 41             	sub    ecx,0x41
c001b311:	83 f9 19             	cmp    ecx,0x19
c001b314:	77 18                	ja     c001b32e <Sys::eject(regs*)+0x32>
c001b316:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c001b31d:	85 c9                	test   ecx,ecx
c001b31f:	74 0d                	je     c001b32e <Sys::eject(regs*)+0x32>
c001b321:	83 ec 0c             	sub    esp,0xc
c001b324:	51                   	push   ecx
c001b325:	e8 78 b4 ff ff       	call   c00167a2 <LogicalDisk::eject()>
c001b32a:	83 c4 10             	add    esp,0x10
c001b32d:	99                   	cdq    
c001b32e:	83 c4 0c             	add    esp,0xc
c001b331:	c3                   	ret    

c001b332 <Sys::exit(regs*)>:
c001b332:	83 ec 18             	sub    esp,0x18
c001b335:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b339:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b33c:	e8 94 35 00 00       	call   c001e8d5 <terminateTask(int)>
c001b341:	83 c8 ff             	or     eax,0xffffffff
c001b344:	83 c4 1c             	add    esp,0x1c
c001b347:	89 c2                	mov    edx,eax
c001b349:	c3                   	ret    

c001b34a <Sys::getCwd(regs*)>:
c001b34a:	83 ec 10             	sub    esp,0x10
c001b34d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b351:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b354:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b357:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b35c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b35f:	e8 e6 7f ff ff       	call   c001334a <Fs::getcwd(Process*, char*, int)>
c001b364:	83 c4 1c             	add    esp,0x1c
c001b367:	99                   	cdq    
c001b368:	c3                   	ret    

c001b369 <Sys::getPID(regs*)>:
c001b369:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b36e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b371:	8b 00                	mov    eax,DWORD PTR [eax]
c001b373:	99                   	cdq    
c001b374:	c3                   	ret    

c001b375 <Sys::getRAMData(regs*)>:
c001b375:	8b 0d 74 e5 02 c0    	mov    ecx,DWORD PTR ds:0xc002e574
c001b37b:	6b 05 70 e5 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e570,0x64
c001b382:	99                   	cdq    
c001b383:	f7 f9                	idiv   ecx
c001b385:	c1 e0 18             	shl    eax,0x18
c001b388:	09 c8                	or     eax,ecx
c001b38a:	99                   	cdq    
c001b38b:	c3                   	ret    

c001b38c <Sys::loadDLL(regs*)>:
c001b38c:	56                   	push   esi
c001b38d:	53                   	push   ebx
c001b38e:	31 d2                	xor    edx,edx
c001b390:	51                   	push   ecx
c001b391:	b8 01 00 00 00       	mov    eax,0x1
c001b396:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b39a:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b39e:	0f 84 8c 00 00 00    	je     c001b430 <Sys::loadDLL(regs*)+0xa4>
c001b3a4:	83 ec 0c             	sub    esp,0xc
c001b3a7:	68 14 01 00 00       	push   0x114
c001b3ac:	e8 92 44 ff ff       	call   c000f843 <malloc>
c001b3b1:	83 c4 0c             	add    esp,0xc
c001b3b4:	89 c3                	mov    ebx,eax
c001b3b6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b3bb:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b3be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b3c1:	53                   	push   ebx
c001b3c2:	e8 81 81 ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001b3c7:	83 c4 10             	add    esp,0x10
c001b3ca:	31 d2                	xor    edx,edx
c001b3cc:	b8 02 00 00 00       	mov    eax,0x2
c001b3d1:	85 db                	test   ebx,ebx
c001b3d3:	74 5b                	je     c001b430 <Sys::loadDLL(regs*)+0xa4>
c001b3d5:	83 ec 0c             	sub    esp,0xc
c001b3d8:	53                   	push   ebx
c001b3d9:	e8 3c 84 ff ff       	call   c001381a <File::exists()>
c001b3de:	83 c4 10             	add    esp,0x10
c001b3e1:	84 c0                	test   al,al
c001b3e3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b3e5:	75 11                	jne    c001b3f8 <Sys::loadDLL(regs*)+0x6c>
c001b3e7:	83 ec 0c             	sub    esp,0xc
c001b3ea:	53                   	push   ebx
c001b3eb:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3ee:	83 c4 10             	add    esp,0x10
c001b3f1:	b8 03 00 00 00       	mov    eax,0x3
c001b3f6:	eb 36                	jmp    c001b42e <Sys::loadDLL(regs*)+0xa2>
c001b3f8:	83 ec 0c             	sub    esp,0xc
c001b3fb:	53                   	push   ebx
c001b3fc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b3ff:	58                   	pop    eax
c001b400:	5a                   	pop    edx
c001b401:	6a 00                	push   0x0
c001b403:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b406:	e8 c5 23 00 00       	call   c001d7d0 <Thr::loadDLL(char const*, bool)>
c001b40b:	83 c4 10             	add    esp,0x10
c001b40e:	89 c1                	mov    ecx,eax
c001b410:	31 d2                	xor    edx,edx
c001b412:	b8 04 00 00 00       	mov    eax,0x4
c001b417:	85 c9                	test   ecx,ecx
c001b419:	74 15                	je     c001b430 <Sys::loadDLL(regs*)+0xa4>
c001b41b:	53                   	push   ebx
c001b41c:	53                   	push   ebx
c001b41d:	ff 35 28 e5 02 c0    	push   DWORD PTR ds:0xc002e528
c001b423:	51                   	push   ecx
c001b424:	e8 f6 25 00 00       	call   c001da1f <Thr::executeDLL(unsigned long, void*)>
c001b429:	83 c4 10             	add    esp,0x10
c001b42c:	31 c0                	xor    eax,eax
c001b42e:	31 d2                	xor    edx,edx
c001b430:	59                   	pop    ecx
c001b431:	5b                   	pop    ebx
c001b432:	5e                   	pop    esi
c001b433:	c3                   	ret    

c001b434 <Sys::read(regs*)>:
c001b434:	57                   	push   edi
c001b435:	56                   	push   esi
c001b436:	53                   	push   ebx
c001b437:	83 ec 10             	sub    esp,0x10
c001b43a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b43e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b441:	83 f8 02             	cmp    eax,0x2
c001b444:	77 10                	ja     c001b456 <Sys::read(regs*)+0x22>
c001b446:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b44b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b44e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b454:	eb 0e                	jmp    c001b464 <Sys::read(regs*)+0x30>
c001b456:	83 ec 0c             	sub    esp,0xc
c001b459:	50                   	push   eax
c001b45a:	e8 ca 65 ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001b45f:	83 c4 10             	add    esp,0x10
c001b462:	89 c1                	mov    ecx,eax
c001b464:	83 c8 ff             	or     eax,0xffffffff
c001b467:	85 c9                	test   ecx,ecx
c001b469:	89 c2                	mov    edx,eax
c001b46b:	74 28                	je     c001b495 <Sys::read(regs*)+0x61>
c001b46d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b475:	31 ff                	xor    edi,edi
c001b477:	83 ec 0c             	sub    esp,0xc
c001b47a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b47c:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b480:	52                   	push   edx
c001b481:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b484:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b487:	57                   	push   edi
c001b488:	56                   	push   esi
c001b489:	51                   	push   ecx
c001b48a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b48d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b491:	83 c4 20             	add    esp,0x20
c001b494:	99                   	cdq    
c001b495:	83 c4 10             	add    esp,0x10
c001b498:	5b                   	pop    ebx
c001b499:	5e                   	pop    esi
c001b49a:	5f                   	pop    edi
c001b49b:	c3                   	ret    

c001b49c <Sys::sbrk(regs*)>:
c001b49c:	56                   	push   esi
c001b49d:	53                   	push   ebx
c001b49e:	50                   	push   eax
c001b49f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4a4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b4a8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4ab:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b4ae:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b4b4:	85 db                	test   ebx,ebx
c001b4b6:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b4b9:	74 02                	je     c001b4bd <Sys::sbrk(regs*)+0x21>
c001b4bb:	79 06                	jns    c001b4c3 <Sys::sbrk(regs*)+0x27>
c001b4bd:	89 f0                	mov    eax,esi
c001b4bf:	31 d2                	xor    edx,edx
c001b4c1:	eb 2a                	jmp    c001b4ed <Sys::sbrk(regs*)+0x51>
c001b4c3:	83 c8 ff             	or     eax,0xffffffff
c001b4c6:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b4cc:	89 c2                	mov    edx,eax
c001b4ce:	77 1d                	ja     c001b4ed <Sys::sbrk(regs*)+0x51>
c001b4d0:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b4d6:	50                   	push   eax
c001b4d7:	c1 ea 0c             	shr    edx,0xc
c001b4da:	68 07 0c 00 00       	push   0xc07
c001b4df:	52                   	push   edx
c001b4e0:	51                   	push   ecx
c001b4e1:	e8 86 6f ff ff       	call   c001246c <VAS::allocatePages(int, int)>
c001b4e6:	89 f0                	mov    eax,esi
c001b4e8:	31 d2                	xor    edx,edx
c001b4ea:	83 c4 10             	add    esp,0x10
c001b4ed:	59                   	pop    ecx
c001b4ee:	5b                   	pop    ebx
c001b4ef:	5e                   	pop    esi
c001b4f0:	c3                   	ret    

c001b4f1 <Sys::setCwd(regs*)>:
c001b4f1:	83 ec 14             	sub    esp,0x14
c001b4f4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b4f8:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b4fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b500:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b503:	e8 b1 83 ff ff       	call   c00138b9 <Fs::setcwd(Process*, char*)>
c001b508:	83 c4 1c             	add    esp,0x1c
c001b50b:	99                   	cdq    
c001b50c:	c3                   	ret    

c001b50d <Sys::setTime(regs*)>:
c001b50d:	55                   	push   ebp
c001b50e:	31 d2                	xor    edx,edx
c001b510:	57                   	push   edi
c001b511:	bf 18 00 00 00       	mov    edi,0x18
c001b516:	56                   	push   esi
c001b517:	53                   	push   ebx
c001b518:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b51d:	83 ec 30             	sub    esp,0x30
c001b520:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b524:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b527:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b52a:	f7 f3                	div    ebx
c001b52c:	89 d6                	mov    esi,edx
c001b52e:	31 d2                	xor    edx,edx
c001b530:	f7 f3                	div    ebx
c001b532:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b535:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b539:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b53e:	31 d2                	xor    edx,edx
c001b540:	f7 f3                	div    ebx
c001b542:	31 d2                	xor    edx,edx
c001b544:	bb 0c 00 00 00       	mov    ebx,0xc
c001b549:	f7 f7                	div    edi
c001b54b:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b54e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b552:	0f b7 cd             	movzx  ecx,bp
c001b555:	56                   	push   esi
c001b556:	89 c7                	mov    edi,eax
c001b558:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b55c:	c1 e6 10             	shl    esi,0x10
c001b55f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b563:	83 e7 1f             	and    edi,0x1f
c001b566:	51                   	push   ecx
c001b567:	47                   	inc    edi
c001b568:	c1 e8 05             	shr    eax,0x5
c001b56b:	31 d2                	xor    edx,edx
c001b56d:	f7 f3                	div    ebx
c001b56f:	31 db                	xor    ebx,ebx
c001b571:	52                   	push   edx
c001b572:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b576:	57                   	push   edi
c001b577:	68 45 be 02 c0       	push   0xc002be45
c001b57c:	e8 6e 7a ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001b581:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b585:	89 f8                	mov    eax,edi
c001b587:	31 c9                	xor    ecx,ecx
c001b589:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b58d:	88 c1                	mov    cl,al
c001b58f:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b595:	88 d5                	mov    ch,dl
c001b597:	c1 e0 10             	shl    eax,0x10
c001b59a:	0f b7 d1             	movzx  edx,cx
c001b59d:	09 c2                	or     edx,eax
c001b59f:	89 d8                	mov    eax,ebx
c001b5a1:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b5a6:	09 f0                	or     eax,esi
c001b5a8:	89 c3                	mov    ebx,eax
c001b5aa:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b5ae:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b5b2:	83 c4 18             	add    esp,0x18
c001b5b5:	53                   	push   ebx
c001b5b6:	52                   	push   edx
c001b5b7:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b5bb:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b5bf:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b5c3:	e8 0b 8a ff ff       	call   c0013fd3 <datetimeToSeconds(datetime_t)>
c001b5c8:	83 c4 0c             	add    esp,0xc
c001b5cb:	52                   	push   edx
c001b5cc:	50                   	push   eax
c001b5cd:	56                   	push   esi
c001b5ce:	e8 87 8b ff ff       	call   c001415a <secondsToDatetime(unsigned long long)>
c001b5d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b5d7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b5db:	51                   	push   ecx
c001b5dc:	89 d6                	mov    esi,edx
c001b5de:	51                   	push   ecx
c001b5df:	c1 ee 10             	shr    esi,0x10
c001b5e2:	89 f3                	mov    ebx,esi
c001b5e4:	0f b6 f3             	movzx  esi,bl
c001b5e7:	56                   	push   esi
c001b5e8:	0f b6 f6             	movzx  esi,dh
c001b5eb:	0f b6 d2             	movzx  edx,dl
c001b5ee:	56                   	push   esi
c001b5ef:	52                   	push   edx
c001b5f0:	89 c2                	mov    edx,eax
c001b5f2:	c1 ea 10             	shr    edx,0x10
c001b5f5:	52                   	push   edx
c001b5f6:	0f b6 d4             	movzx  edx,ah
c001b5f9:	0f b6 c0             	movzx  eax,al
c001b5fc:	52                   	push   edx
c001b5fd:	50                   	push   eax
c001b5fe:	68 61 be 02 c0       	push   0xc002be61
c001b603:	e8 e7 79 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001b608:	83 c4 2c             	add    esp,0x2c
c001b60b:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001b610:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b614:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b618:	53                   	push   ebx
c001b619:	51                   	push   ecx
c001b61a:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b620:	e8 d5 8a ff ff       	call   c00140fa <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b625:	83 f0 01             	xor    eax,0x1
c001b628:	31 d2                	xor    edx,edx
c001b62a:	0f b6 c0             	movzx  eax,al
c001b62d:	83 c4 3c             	add    esp,0x3c
c001b630:	5b                   	pop    ebx
c001b631:	5e                   	pop    esi
c001b632:	5f                   	pop    edi
c001b633:	5d                   	pop    ebp
c001b634:	c3                   	ret    

c001b635 <Sys::timezone(regs*)>:
c001b635:	53                   	push   ebx
c001b636:	83 ec 08             	sub    esp,0x8
c001b639:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b63d:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b641:	75 17                	jne    c001b65a <Sys::timezone(regs*)+0x25>
c001b643:	83 ec 0c             	sub    esp,0xc
c001b646:	68 7d be 02 c0       	push   0xc002be7d
c001b64b:	e8 9f 79 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001b650:	83 c8 ff             	or     eax,0xffffffff
c001b653:	83 c4 10             	add    esp,0x10
c001b656:	89 c2                	mov    edx,eax
c001b658:	eb 20                	jmp    c001b67a <Sys::timezone(regs*)+0x45>
c001b65a:	83 ec 0c             	sub    esp,0xc
c001b65d:	68 b5 be 02 c0       	push   0xc002beb5
c001b662:	e8 88 79 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001b667:	58                   	pop    eax
c001b668:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b66b:	e8 ec 87 ff ff       	call   c0013e5c <User::loadClockSettings(int)>
c001b670:	83 c4 10             	add    esp,0x10
c001b673:	b8 01 00 00 00       	mov    eax,0x1
c001b678:	31 d2                	xor    edx,edx
c001b67a:	83 c4 08             	add    esp,0x8
c001b67d:	5b                   	pop    ebx
c001b67e:	c3                   	ret    

c001b67f <Sys::write(regs*)>:
c001b67f:	57                   	push   edi
c001b680:	56                   	push   esi
c001b681:	53                   	push   ebx
c001b682:	83 ec 10             	sub    esp,0x10
c001b685:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b689:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b68c:	83 f8 02             	cmp    eax,0x2
c001b68f:	77 10                	ja     c001b6a1 <Sys::write(regs*)+0x22>
c001b691:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b696:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b699:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b69f:	eb 0e                	jmp    c001b6af <Sys::write(regs*)+0x30>
c001b6a1:	83 ec 0c             	sub    esp,0xc
c001b6a4:	50                   	push   eax
c001b6a5:	e8 7f 63 ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001b6aa:	83 c4 10             	add    esp,0x10
c001b6ad:	89 c1                	mov    ecx,eax
c001b6af:	83 c8 ff             	or     eax,0xffffffff
c001b6b2:	85 c9                	test   ecx,ecx
c001b6b4:	89 c2                	mov    edx,eax
c001b6b6:	74 28                	je     c001b6e0 <Sys::write(regs*)+0x61>
c001b6b8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6c0:	31 ff                	xor    edi,edi
c001b6c2:	83 ec 0c             	sub    esp,0xc
c001b6c5:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b6c7:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b6cb:	52                   	push   edx
c001b6cc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b6cf:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b6d2:	57                   	push   edi
c001b6d3:	56                   	push   esi
c001b6d4:	51                   	push   ecx
c001b6d5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b6d8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b6dc:	83 c4 20             	add    esp,0x20
c001b6df:	99                   	cdq    
c001b6e0:	83 c4 10             	add    esp,0x10
c001b6e3:	5b                   	pop    ebx
c001b6e4:	5e                   	pop    esi
c001b6e5:	5f                   	pop    edi
c001b6e6:	c3                   	ret    

c001b6e7 <Sys::wsbe(regs*)>:
c001b6e7:	57                   	push   edi
c001b6e8:	b9 0b 00 00 00       	mov    ecx,0xb
c001b6ed:	56                   	push   esi
c001b6ee:	be f4 be 02 c0       	mov    esi,0xc002bef4
c001b6f3:	53                   	push   ebx
c001b6f4:	83 ec 30             	sub    esp,0x30
c001b6f7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b6fb:	fc                   	cld    
c001b6fc:	83 ec 0c             	sub    esp,0xc
c001b6ff:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b701:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b705:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b70a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b70d:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b713:	8b 06                	mov    eax,DWORD PTR [esi]
c001b715:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b718:	57                   	push   edi
c001b719:	e8 76 50 fe ff       	call   c0000794 <strlen>
c001b71e:	5a                   	pop    edx
c001b71f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b723:	52                   	push   edx
c001b724:	31 d2                	xor    edx,edx
c001b726:	57                   	push   edi
c001b727:	52                   	push   edx
c001b728:	50                   	push   eax
c001b729:	56                   	push   esi
c001b72a:	ff d3                	call   ebx
c001b72c:	83 c4 14             	add    esp,0x14
c001b72f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b733:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b736:	e8 9a 31 00 00       	call   c001e8d5 <terminateTask(int)>
c001b73b:	83 c4 40             	add    esp,0x40
c001b73e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b743:	5b                   	pop    ebx
c001b744:	31 d2                	xor    edx,edx
c001b746:	5e                   	pop    esi
c001b747:	5f                   	pop    edi
c001b748:	c3                   	ret    

c001b749 <Sys::yield(regs*)>:
c001b749:	57                   	push   edi
c001b74a:	56                   	push   esi
c001b74b:	53                   	push   ebx
c001b74c:	e8 41 27 00 00       	call   c001de92 <lockScheduler()>
c001b751:	e8 78 2a 00 00       	call   c001e1ce <schedule()>
c001b756:	e8 39 27 00 00       	call   c001de94 <unlockScheduler()>
c001b75b:	8b 35 b0 eb 02 c0    	mov    esi,DWORD PTR ds:0xc002ebb0
c001b761:	8b 3d b4 eb 02 c0    	mov    edi,DWORD PTR ds:0xc002ebb4
c001b767:	89 f0                	mov    eax,esi
c001b769:	89 fb                	mov    ebx,edi
c001b76b:	89 f1                	mov    ecx,esi
c001b76d:	c1 e0 07             	shl    eax,0x7
c001b770:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b774:	25 80 30 0f 00       	and    eax,0xf3080
c001b779:	c1 eb 17             	shr    ebx,0x17
c001b77c:	31 c8                	xor    eax,ecx
c001b77e:	89 da                	mov    edx,ebx
c001b780:	5b                   	pop    ebx
c001b781:	5e                   	pop    esi
c001b782:	5f                   	pop    edi
c001b783:	c3                   	ret    

c001b784 <sysCallSeekDir(regs*)>:
c001b784:	31 c0                	xor    eax,eax
c001b786:	31 d2                	xor    edx,edx
c001b788:	c3                   	ret    

c001b789 <sysCallTellDir(regs*)>:
c001b789:	31 c0                	xor    eax,eax
c001b78b:	31 d2                	xor    edx,edx
c001b78d:	c3                   	ret    

c001b78e <sysCallVerify(regs*)>:
c001b78e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b792:	31 d2                	xor    edx,edx
c001b794:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b797:	c3                   	ret    

c001b798 <sysFormatDisk(regs*)>:
c001b798:	56                   	push   esi
c001b799:	53                   	push   ebx
c001b79a:	53                   	push   ebx
c001b79b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b79f:	8b 1d b0 e6 02 c0    	mov    ebx,DWORD PTR ds:0xc002e6b0
c001b7a5:	eb 25                	jmp    c001b7cc <sysFormatDisk(regs*)+0x34>
c001b7a7:	83 ec 0c             	sub    esp,0xc
c001b7aa:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b7ad:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b7af:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b7b2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b7b5:	50                   	push   eax
c001b7b6:	ff 34 85 40 eb 02 c0 	push   DWORD PTR [eax*4-0x3ffd14c0]
c001b7bd:	53                   	push   ebx
c001b7be:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b7c1:	83 c4 20             	add    esp,0x20
c001b7c4:	83 f8 08             	cmp    eax,0x8
c001b7c7:	75 12                	jne    c001b7db <sysFormatDisk(regs*)+0x43>
c001b7c9:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b7cc:	85 db                	test   ebx,ebx
c001b7ce:	75 d7                	jne    c001b7a7 <sysFormatDisk(regs*)+0xf>
c001b7d0:	59                   	pop    ecx
c001b7d1:	b8 03 00 00 00       	mov    eax,0x3
c001b7d6:	31 d2                	xor    edx,edx
c001b7d8:	5b                   	pop    ebx
c001b7d9:	5e                   	pop    esi
c001b7da:	c3                   	ret    
c001b7db:	85 c0                	test   eax,eax
c001b7dd:	74 1b                	je     c001b7fa <sysFormatDisk(regs*)+0x62>
c001b7df:	83 f8 09             	cmp    eax,0x9
c001b7e2:	74 0b                	je     c001b7ef <sysFormatDisk(regs*)+0x57>
c001b7e4:	59                   	pop    ecx
c001b7e5:	b8 02 00 00 00       	mov    eax,0x2
c001b7ea:	31 d2                	xor    edx,edx
c001b7ec:	5b                   	pop    ebx
c001b7ed:	5e                   	pop    esi
c001b7ee:	c3                   	ret    
c001b7ef:	59                   	pop    ecx
c001b7f0:	b8 01 00 00 00       	mov    eax,0x1
c001b7f5:	31 d2                	xor    edx,edx
c001b7f7:	5b                   	pop    ebx
c001b7f8:	5e                   	pop    esi
c001b7f9:	c3                   	ret    
c001b7fa:	59                   	pop    ecx
c001b7fb:	31 c0                	xor    eax,eax
c001b7fd:	31 d2                	xor    edx,edx
c001b7ff:	5b                   	pop    ebx
c001b800:	5e                   	pop    esi
c001b801:	c3                   	ret    

c001b802 <sysSetDiskVolumeLabel(regs*)>:
c001b802:	56                   	push   esi
c001b803:	53                   	push   ebx
c001b804:	53                   	push   ebx
c001b805:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b809:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b80c:	83 f8 19             	cmp    eax,0x19
c001b80f:	77 29                	ja     c001b83a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b811:	8b 0c 85 40 eb 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd14c0]
c001b818:	85 c9                	test   ecx,ecx
c001b81a:	74 1e                	je     c001b83a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b81c:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b81f:	85 d2                	test   edx,edx
c001b821:	74 17                	je     c001b83a <sysSetDiskVolumeLabel(regs*)+0x38>
c001b823:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b829:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b82b:	52                   	push   edx
c001b82c:	50                   	push   eax
c001b82d:	51                   	push   ecx
c001b82e:	53                   	push   ebx
c001b82f:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b832:	83 c4 10             	add    esp,0x10
c001b835:	99                   	cdq    
c001b836:	59                   	pop    ecx
c001b837:	5b                   	pop    ebx
c001b838:	5e                   	pop    esi
c001b839:	c3                   	ret    
c001b83a:	59                   	pop    ecx
c001b83b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b840:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b845:	5b                   	pop    ebx
c001b846:	5e                   	pop    esi
c001b847:	c3                   	ret    

c001b848 <sysGetDiskVolumeLabel(regs*)>:
c001b848:	57                   	push   edi
c001b849:	56                   	push   esi
c001b84a:	53                   	push   ebx
c001b84b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b84f:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b852:	83 fa 19             	cmp    edx,0x19
c001b855:	77 34                	ja     c001b88b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b857:	8b 0c 95 40 eb 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd14c0]
c001b85e:	85 c9                	test   ecx,ecx
c001b860:	74 29                	je     c001b88b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b862:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b865:	85 db                	test   ebx,ebx
c001b867:	74 22                	je     c001b88b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b869:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b86c:	85 c0                	test   eax,eax
c001b86e:	74 1b                	je     c001b88b <sysGetDiskVolumeLabel(regs*)+0x43>
c001b870:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b876:	83 ec 0c             	sub    esp,0xc
c001b879:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b87b:	50                   	push   eax
c001b87c:	53                   	push   ebx
c001b87d:	52                   	push   edx
c001b87e:	51                   	push   ecx
c001b87f:	56                   	push   esi
c001b880:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b883:	83 c4 20             	add    esp,0x20
c001b886:	99                   	cdq    
c001b887:	5b                   	pop    ebx
c001b888:	5e                   	pop    esi
c001b889:	5f                   	pop    edi
c001b88a:	c3                   	ret    
c001b88b:	5b                   	pop    ebx
c001b88c:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b891:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b896:	5e                   	pop    esi
c001b897:	5f                   	pop    edi
c001b898:	c3                   	ret    

c001b899 <sysShutdown(regs*)>:
c001b899:	83 ec 0c             	sub    esp,0xc
c001b89c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8a0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b8a3:	85 c0                	test   eax,eax
c001b8a5:	74 18                	je     c001b8bf <sysShutdown(regs*)+0x26>
c001b8a7:	83 f8 01             	cmp    eax,0x1
c001b8aa:	74 38                	je     c001b8e4 <sysShutdown(regs*)+0x4b>
c001b8ac:	83 f8 02             	cmp    eax,0x2
c001b8af:	74 24                	je     c001b8d5 <sysShutdown(regs*)+0x3c>
c001b8b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b8b6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b8bb:	83 c4 0c             	add    esp,0xc
c001b8be:	c3                   	ret    
c001b8bf:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001b8c4:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8c6:	6a 00                	push   0x0
c001b8c8:	6a 00                	push   0x0
c001b8ca:	6a 00                	push   0x0
c001b8cc:	50                   	push   eax
c001b8cd:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b8d0:	83 c4 10             	add    esp,0x10
c001b8d3:	eb dc                	jmp    c001b8b1 <sysShutdown(regs*)+0x18>
c001b8d5:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001b8da:	8b 10                	mov    edx,DWORD PTR [eax]
c001b8dc:	6a 00                	push   0x0
c001b8de:	6a 00                	push   0x0
c001b8e0:	6a 01                	push   0x1
c001b8e2:	eb e8                	jmp    c001b8cc <sysShutdown(regs*)+0x33>
c001b8e4:	a1 e0 0b 03 c0       	mov    eax,ds:0xc0030be0
c001b8e9:	85 c0                	test   eax,eax
c001b8eb:	74 02                	je     c001b8ef <sysShutdown(regs*)+0x56>
c001b8ed:	ff d0                	call   eax
c001b8ef:	31 c0                	xor    eax,eax
c001b8f1:	31 d2                	xor    edx,edx
c001b8f3:	83 c4 0c             	add    esp,0xc
c001b8f6:	c3                   	ret    

c001b8f7 <sysCallRealpath(regs*)>:
c001b8f7:	83 ec 0c             	sub    esp,0xc
c001b8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b8fe:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b901:	85 d2                	test   edx,edx
c001b903:	74 07                	je     c001b90c <sysCallRealpath(regs*)+0x15>
c001b905:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b908:	85 c0                	test   eax,eax
c001b90a:	75 0b                	jne    c001b917 <sysCallRealpath(regs*)+0x20>
c001b90c:	b8 01 00 00 00       	mov    eax,0x1
c001b911:	31 d2                	xor    edx,edx
c001b913:	83 c4 0c             	add    esp,0xc
c001b916:	c3                   	ret    
c001b917:	51                   	push   ecx
c001b918:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b91e:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b921:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b927:	51                   	push   ecx
c001b928:	52                   	push   edx
c001b929:	50                   	push   eax
c001b92a:	e8 6f 7a ff ff       	call   c001339e <Fs::standardiseFiles(char*, char const*, char const*)>
c001b92f:	83 c4 10             	add    esp,0x10
c001b932:	31 c0                	xor    eax,eax
c001b934:	31 d2                	xor    edx,edx
c001b936:	83 c4 0c             	add    esp,0xc
c001b939:	c3                   	ret    

c001b93a <sysCallGetArgc(regs*)>:
c001b93a:	83 ec 14             	sub    esp,0x14
c001b93d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b942:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b945:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b94b:	68 20 bf 02 c0       	push   0xc002bf20
c001b950:	e8 9a 76 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001b955:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b95a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b95d:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b963:	83 c4 1c             	add    esp,0x1c
c001b966:	99                   	cdq    
c001b967:	c3                   	ret    

c001b968 <sysCallReadDir(regs*)>:
c001b968:	53                   	push   ebx
c001b969:	83 ec 18             	sub    esp,0x18
c001b96c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b970:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b973:	83 f8 02             	cmp    eax,0x2
c001b976:	76 53                	jbe    c001b9cb <sysCallReadDir(regs*)+0x63>
c001b978:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b97b:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b981:	77 4f                	ja     c001b9d2 <sysCallReadDir(regs*)+0x6a>
c001b983:	83 ec 0c             	sub    esp,0xc
c001b986:	50                   	push   eax
c001b987:	e8 9d 60 ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001b98c:	83 c4 10             	add    esp,0x10
c001b98f:	85 c0                	test   eax,eax
c001b991:	74 50                	je     c001b9e3 <sysCallReadDir(regs*)+0x7b>
c001b993:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b99b:	83 ec 0c             	sub    esp,0xc
c001b99e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b9a0:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b9a4:	51                   	push   ecx
c001b9a5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b9a8:	6a 00                	push   0x0
c001b9aa:	68 10 01 00 00       	push   0x110
c001b9af:	50                   	push   eax
c001b9b0:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b9b3:	83 c4 20             	add    esp,0x20
c001b9b6:	85 c0                	test   eax,eax
c001b9b8:	74 38                	je     c001b9f2 <sysCallReadDir(regs*)+0x8a>
c001b9ba:	83 f8 07             	cmp    eax,0x7
c001b9bd:	74 0c                	je     c001b9cb <sysCallReadDir(regs*)+0x63>
c001b9bf:	b8 02 00 00 00       	mov    eax,0x2
c001b9c4:	31 d2                	xor    edx,edx
c001b9c6:	83 c4 18             	add    esp,0x18
c001b9c9:	5b                   	pop    ebx
c001b9ca:	c3                   	ret    
c001b9cb:	b8 01 00 00 00       	mov    eax,0x1
c001b9d0:	eb f2                	jmp    c001b9c4 <sysCallReadDir(regs*)+0x5c>
c001b9d2:	83 ec 08             	sub    esp,0x8
c001b9d5:	52                   	push   edx
c001b9d6:	68 38 c0 02 c0       	push   0xc002c038
c001b9db:	e8 0f 76 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001b9e0:	83 c4 10             	add    esp,0x10
c001b9e3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9e8:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9ed:	83 c4 18             	add    esp,0x18
c001b9f0:	5b                   	pop    ebx
c001b9f1:	c3                   	ret    
c001b9f2:	31 c0                	xor    eax,eax
c001b9f4:	eb ce                	jmp    c001b9c4 <sysCallReadDir(regs*)+0x5c>

c001b9f6 <sysCallIsATTY(regs*)>:
c001b9f6:	83 ec 0c             	sub    esp,0xc
c001b9f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b9fd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba00:	83 f8 02             	cmp    eax,0x2
c001ba03:	76 07                	jbe    c001ba0c <sysCallIsATTY(regs*)+0x16>
c001ba05:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001ba0a:	75 26                	jne    c001ba32 <sysCallIsATTY(regs*)+0x3c>
c001ba0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba11:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ba14:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ba1a:	85 c0                	test   eax,eax
c001ba1c:	74 24                	je     c001ba42 <sysCallIsATTY(regs*)+0x4c>
c001ba1e:	83 ec 0c             	sub    esp,0xc
c001ba21:	8b 10                	mov    edx,DWORD PTR [eax]
c001ba23:	50                   	push   eax
c001ba24:	ff 12                	call   DWORD PTR [edx]
c001ba26:	31 d2                	xor    edx,edx
c001ba28:	0f b6 c0             	movzx  eax,al
c001ba2b:	83 c4 10             	add    esp,0x10
c001ba2e:	83 c4 0c             	add    esp,0xc
c001ba31:	c3                   	ret    
c001ba32:	83 ec 0c             	sub    esp,0xc
c001ba35:	50                   	push   eax
c001ba36:	e8 ee 5f ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001ba3b:	83 c4 10             	add    esp,0x10
c001ba3e:	85 c0                	test   eax,eax
c001ba40:	75 dc                	jne    c001ba1e <sysCallIsATTY(regs*)+0x28>
c001ba42:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba47:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba4c:	83 c4 0c             	add    esp,0xc
c001ba4f:	c3                   	ret    

c001ba50 <sysCallSeek(regs*)>:
c001ba50:	53                   	push   ebx
c001ba51:	83 ec 08             	sub    esp,0x8
c001ba54:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001ba58:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ba5b:	83 f8 02             	cmp    eax,0x2
c001ba5e:	76 4a                	jbe    c001baaa <sysCallSeek(regs*)+0x5a>
c001ba60:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001ba65:	77 32                	ja     c001ba99 <sysCallSeek(regs*)+0x49>
c001ba67:	83 ec 0c             	sub    esp,0xc
c001ba6a:	50                   	push   eax
c001ba6b:	e8 b9 5f ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001ba70:	83 c4 0c             	add    esp,0xc
c001ba73:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001ba76:	31 db                	xor    ebx,ebx
c001ba78:	53                   	push   ebx
c001ba79:	51                   	push   ecx
c001ba7a:	50                   	push   eax
c001ba7b:	e8 ea 7b ff ff       	call   c001366a <File::seek(unsigned long long)>
c001ba80:	83 c4 10             	add    esp,0x10
c001ba83:	85 c0                	test   eax,eax
c001ba85:	0f 95 c0             	setne  al
c001ba88:	31 d2                	xor    edx,edx
c001ba8a:	0f b6 c0             	movzx  eax,al
c001ba8d:	f7 d8                	neg    eax
c001ba8f:	83 d2 00             	adc    edx,0x0
c001ba92:	83 c4 08             	add    esp,0x8
c001ba95:	f7 da                	neg    edx
c001ba97:	5b                   	pop    ebx
c001ba98:	c3                   	ret    
c001ba99:	83 ec 08             	sub    esp,0x8
c001ba9c:	50                   	push   eax
c001ba9d:	68 2b bf 02 c0       	push   0xc002bf2b
c001baa2:	e8 48 75 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001baa7:	83 c4 10             	add    esp,0x10
c001baaa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001baaf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bab4:	83 c4 08             	add    esp,0x8
c001bab7:	5b                   	pop    ebx
c001bab8:	c3                   	ret    

c001bab9 <sysCallTell(regs*)>:
c001bab9:	53                   	push   ebx
c001baba:	83 ec 08             	sub    esp,0x8
c001babd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bac1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bac4:	83 f8 02             	cmp    eax,0x2
c001bac7:	76 5e                	jbe    c001bb27 <sysCallTell(regs*)+0x6e>
c001bac9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bace:	77 2d                	ja     c001bafd <sysCallTell(regs*)+0x44>
c001bad0:	83 ec 0c             	sub    esp,0xc
c001bad3:	50                   	push   eax
c001bad4:	e8 50 5f ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001bad9:	5a                   	pop    edx
c001bada:	59                   	pop    ecx
c001badb:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bade:	50                   	push   eax
c001badf:	e8 dc 7b ff ff       	call   c00136c0 <File::tell(unsigned long long*)>
c001bae4:	83 c4 10             	add    esp,0x10
c001bae7:	85 c0                	test   eax,eax
c001bae9:	0f 95 c0             	setne  al
c001baec:	31 d2                	xor    edx,edx
c001baee:	0f b6 c0             	movzx  eax,al
c001baf1:	f7 d8                	neg    eax
c001baf3:	83 d2 00             	adc    edx,0x0
c001baf6:	83 c4 08             	add    esp,0x8
c001baf9:	f7 da                	neg    edx
c001bafb:	5b                   	pop    ebx
c001bafc:	c3                   	ret    
c001bafd:	83 ec 08             	sub    esp,0x8
c001bb00:	50                   	push   eax
c001bb01:	68 45 bf 02 c0       	push   0xc002bf45
c001bb06:	e8 e4 74 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001bb0b:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb0e:	83 c4 10             	add    esp,0x10
c001bb11:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb17:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bb1e:	31 d2                	xor    edx,edx
c001bb20:	31 c0                	xor    eax,eax
c001bb22:	83 c4 08             	add    esp,0x8
c001bb25:	5b                   	pop    ebx
c001bb26:	c3                   	ret    
c001bb27:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb2c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb31:	83 c4 08             	add    esp,0x8
c001bb34:	5b                   	pop    ebx
c001bb35:	c3                   	ret    

c001bb36 <sysCallSize(regs*)>:
c001bb36:	53                   	push   ebx
c001bb37:	83 ec 18             	sub    esp,0x18
c001bb3a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bb3e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bb41:	83 f8 02             	cmp    eax,0x2
c001bb44:	76 64                	jbe    c001bbaa <sysCallSize(regs*)+0x74>
c001bb46:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bb4b:	77 33                	ja     c001bb80 <sysCallSize(regs*)+0x4a>
c001bb4d:	83 ec 0c             	sub    esp,0xc
c001bb50:	50                   	push   eax
c001bb51:	e8 d3 5e ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001bb56:	83 c4 0c             	add    esp,0xc
c001bb59:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bb5d:	52                   	push   edx
c001bb5e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bb61:	50                   	push   eax
c001bb62:	e8 f1 7c ff ff       	call   c0013858 <File::stat(unsigned long long*, bool*)>
c001bb67:	83 c4 10             	add    esp,0x10
c001bb6a:	85 c0                	test   eax,eax
c001bb6c:	0f 95 c0             	setne  al
c001bb6f:	31 d2                	xor    edx,edx
c001bb71:	0f b6 c0             	movzx  eax,al
c001bb74:	f7 d8                	neg    eax
c001bb76:	83 d2 00             	adc    edx,0x0
c001bb79:	83 c4 18             	add    esp,0x18
c001bb7c:	f7 da                	neg    edx
c001bb7e:	5b                   	pop    ebx
c001bb7f:	c3                   	ret    
c001bb80:	83 ec 08             	sub    esp,0x8
c001bb83:	50                   	push   eax
c001bb84:	68 5f bf 02 c0       	push   0xc002bf5f
c001bb89:	e8 61 74 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001bb8e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bb91:	83 c4 10             	add    esp,0x10
c001bb94:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bb9a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bba1:	31 d2                	xor    edx,edx
c001bba3:	31 c0                	xor    eax,eax
c001bba5:	83 c4 18             	add    esp,0x18
c001bba8:	5b                   	pop    ebx
c001bba9:	c3                   	ret    
c001bbaa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bbaf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bbb4:	83 c4 18             	add    esp,0x18
c001bbb7:	5b                   	pop    ebx
c001bbb8:	c3                   	ret    

c001bbb9 <sysCallSizeFromFilename(regs*)>:
c001bbb9:	57                   	push   edi
c001bbba:	56                   	push   esi
c001bbbb:	53                   	push   ebx
c001bbbc:	83 ec 20             	sub    esp,0x20
c001bbbf:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001bbc3:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001bbc6:	83 fb 02             	cmp    ebx,0x2
c001bbc9:	0f 86 99 00 00 00    	jbe    c001bc68 <sysCallSizeFromFilename(regs*)+0xaf>
c001bbcf:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001bbd5:	77 65                	ja     c001bc3c <sysCallSizeFromFilename(regs*)+0x83>
c001bbd7:	83 ec 0c             	sub    esp,0xc
c001bbda:	68 14 01 00 00       	push   0x114
c001bbdf:	e8 5f 3c ff ff       	call   c000f843 <malloc>
c001bbe4:	83 c4 0c             	add    esp,0xc
c001bbe7:	89 c6                	mov    esi,eax
c001bbe9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbee:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bbf1:	53                   	push   ebx
c001bbf2:	56                   	push   esi
c001bbf3:	e8 50 79 ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001bbf8:	83 c4 0c             	add    esp,0xc
c001bbfb:	8d 44 24 23          	lea    eax,[esp+0x23]
c001bbff:	50                   	push   eax
c001bc00:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001bc03:	56                   	push   esi
c001bc04:	e8 4f 7c ff ff       	call   c0013858 <File::stat(unsigned long long*, bool*)>
c001bc09:	83 c4 10             	add    esp,0x10
c001bc0c:	85 f6                	test   esi,esi
c001bc0e:	74 14                	je     c001bc24 <sysCallSizeFromFilename(regs*)+0x6b>
c001bc10:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bc14:	8b 16                	mov    edx,DWORD PTR [esi]
c001bc16:	83 ec 0c             	sub    esp,0xc
c001bc19:	56                   	push   esi
c001bc1a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bc1d:	83 c4 10             	add    esp,0x10
c001bc20:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bc24:	85 c0                	test   eax,eax
c001bc26:	0f 95 c0             	setne  al
c001bc29:	31 d2                	xor    edx,edx
c001bc2b:	0f b6 c0             	movzx  eax,al
c001bc2e:	f7 d8                	neg    eax
c001bc30:	83 d2 00             	adc    edx,0x0
c001bc33:	83 c4 20             	add    esp,0x20
c001bc36:	f7 da                	neg    edx
c001bc38:	5b                   	pop    ebx
c001bc39:	5e                   	pop    esi
c001bc3a:	5f                   	pop    edi
c001bc3b:	c3                   	ret    
c001bc3c:	83 ec 08             	sub    esp,0x8
c001bc3f:	53                   	push   ebx
c001bc40:	68 5f bf 02 c0       	push   0xc002bf5f
c001bc45:	e8 a5 73 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001bc4a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bc4d:	83 c4 10             	add    esp,0x10
c001bc50:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bc56:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bc5d:	31 d2                	xor    edx,edx
c001bc5f:	83 c4 20             	add    esp,0x20
c001bc62:	31 c0                	xor    eax,eax
c001bc64:	5b                   	pop    ebx
c001bc65:	5e                   	pop    esi
c001bc66:	5f                   	pop    edi
c001bc67:	c3                   	ret    
c001bc68:	83 c4 20             	add    esp,0x20
c001bc6b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc70:	5b                   	pop    ebx
c001bc71:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc76:	5e                   	pop    esi
c001bc77:	5f                   	pop    edi
c001bc78:	c3                   	ret    

c001bc79 <sysCallClose(regs*)>:
c001bc79:	53                   	push   ebx
c001bc7a:	83 ec 08             	sub    esp,0x8
c001bc7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc81:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc84:	83 f8 02             	cmp    eax,0x2
c001bc87:	76 50                	jbe    c001bcd9 <sysCallClose(regs*)+0x60>
c001bc89:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc8e:	74 58                	je     c001bce8 <sysCallClose(regs*)+0x6f>
c001bc90:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bc95:	74 60                	je     c001bcf7 <sysCallClose(regs*)+0x7e>
c001bc97:	77 2f                	ja     c001bcc8 <sysCallClose(regs*)+0x4f>
c001bc99:	83 ec 0c             	sub    esp,0xc
c001bc9c:	50                   	push   eax
c001bc9d:	e8 87 5d ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001bca2:	89 c3                	mov    ebx,eax
c001bca4:	89 04 24             	mov    DWORD PTR [esp],eax
c001bca7:	e8 5e 79 ff ff       	call   c001360a <File::close()>
c001bcac:	83 c4 10             	add    esp,0x10
c001bcaf:	85 db                	test   ebx,ebx
c001bcb1:	74 0c                	je     c001bcbf <sysCallClose(regs*)+0x46>
c001bcb3:	83 ec 0c             	sub    esp,0xc
c001bcb6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bcb8:	53                   	push   ebx
c001bcb9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bcbc:	83 c4 10             	add    esp,0x10
c001bcbf:	31 c0                	xor    eax,eax
c001bcc1:	31 d2                	xor    edx,edx
c001bcc3:	83 c4 08             	add    esp,0x8
c001bcc6:	5b                   	pop    ebx
c001bcc7:	c3                   	ret    
c001bcc8:	83 ec 08             	sub    esp,0x8
c001bccb:	50                   	push   eax
c001bccc:	68 5c c0 02 c0       	push   0xc002c05c
c001bcd1:	e8 19 73 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001bcd6:	83 c4 10             	add    esp,0x10
c001bcd9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcde:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bce3:	83 c4 08             	add    esp,0x8
c001bce6:	5b                   	pop    ebx
c001bce7:	c3                   	ret    
c001bce8:	83 ec 0c             	sub    esp,0xc
c001bceb:	68 7a bf 02 c0       	push   0xc002bf7a
c001bcf0:	e8 fa 72 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001bcf5:	eb c5                	jmp    c001bcbc <sysCallClose(regs*)+0x43>
c001bcf7:	83 ec 0c             	sub    esp,0xc
c001bcfa:	68 88 bf 02 c0       	push   0xc002bf88
c001bcff:	eb ef                	jmp    c001bcf0 <sysCallClose(regs*)+0x77>

c001bd01 <sysCallOpenDir(regs*)>:
c001bd01:	56                   	push   esi
c001bd02:	53                   	push   ebx
c001bd03:	53                   	push   ebx
c001bd04:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd08:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bd0b:	85 f6                	test   esi,esi
c001bd0d:	74 59                	je     c001bd68 <sysCallOpenDir(regs*)+0x67>
c001bd0f:	83 ec 0c             	sub    esp,0xc
c001bd12:	68 14 01 00 00       	push   0x114
c001bd17:	e8 27 3b ff ff       	call   c000f843 <malloc>
c001bd1c:	83 c4 0c             	add    esp,0xc
c001bd1f:	89 c6                	mov    esi,eax
c001bd21:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bd26:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bd29:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bd2c:	56                   	push   esi
c001bd2d:	e8 c2 7c ff ff       	call   c00139f4 <Directory::Directory(char const*, Process*)>
c001bd32:	83 c4 10             	add    esp,0x10
c001bd35:	85 f6                	test   esi,esi
c001bd37:	74 2f                	je     c001bd68 <sysCallOpenDir(regs*)+0x67>
c001bd39:	83 ec 0c             	sub    esp,0xc
c001bd3c:	56                   	push   esi
c001bd3d:	e8 16 7d ff ff       	call   c0013a58 <Directory::open()>
c001bd42:	83 c4 10             	add    esp,0x10
c001bd45:	85 c0                	test   eax,eax
c001bd47:	75 1f                	jne    c001bd68 <sysCallOpenDir(regs*)+0x67>
c001bd49:	83 ec 0c             	sub    esp,0xc
c001bd4c:	56                   	push   esi
c001bd4d:	e8 e2 59 ff ff       	call   c0011734 <UnixFile::getFileDescriptor()>
c001bd52:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bd55:	83 c4 10             	add    esp,0x10
c001bd58:	89 02                	mov    DWORD PTR [edx],eax
c001bd5a:	c1 f8 1f             	sar    eax,0x1f
c001bd5d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bd60:	31 c0                	xor    eax,eax
c001bd62:	59                   	pop    ecx
c001bd63:	31 d2                	xor    edx,edx
c001bd65:	5b                   	pop    ebx
c001bd66:	5e                   	pop    esi
c001bd67:	c3                   	ret    
c001bd68:	59                   	pop    ecx
c001bd69:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd6e:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd73:	5b                   	pop    ebx
c001bd74:	5e                   	pop    esi
c001bd75:	c3                   	ret    

c001bd76 <sysCallCloseDir(regs*)>:
c001bd76:	53                   	push   ebx
c001bd77:	83 ec 08             	sub    esp,0x8
c001bd7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd7e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bd81:	83 f8 02             	cmp    eax,0x2
c001bd84:	76 47                	jbe    c001bdcd <sysCallCloseDir(regs*)+0x57>
c001bd86:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd8b:	77 2f                	ja     c001bdbc <sysCallCloseDir(regs*)+0x46>
c001bd8d:	83 ec 0c             	sub    esp,0xc
c001bd90:	50                   	push   eax
c001bd91:	e8 93 5c ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001bd96:	89 c3                	mov    ebx,eax
c001bd98:	89 04 24             	mov    DWORD PTR [esp],eax
c001bd9b:	e8 14 7d ff ff       	call   c0013ab4 <Directory::close()>
c001bda0:	83 c4 10             	add    esp,0x10
c001bda3:	85 db                	test   ebx,ebx
c001bda5:	74 0c                	je     c001bdb3 <sysCallCloseDir(regs*)+0x3d>
c001bda7:	83 ec 0c             	sub    esp,0xc
c001bdaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bdac:	53                   	push   ebx
c001bdad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bdb0:	83 c4 10             	add    esp,0x10
c001bdb3:	31 c0                	xor    eax,eax
c001bdb5:	31 d2                	xor    edx,edx
c001bdb7:	83 c4 08             	add    esp,0x8
c001bdba:	5b                   	pop    ebx
c001bdbb:	c3                   	ret    
c001bdbc:	83 ec 08             	sub    esp,0x8
c001bdbf:	50                   	push   eax
c001bdc0:	68 84 c0 02 c0       	push   0xc002c084
c001bdc5:	e8 25 72 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001bdca:	83 c4 10             	add    esp,0x10
c001bdcd:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdd2:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdd7:	83 c4 08             	add    esp,0x8
c001bdda:	5b                   	pop    ebx
c001bddb:	c3                   	ret    

c001bddc <sysCallMakeDir(regs*)>:
c001bddc:	56                   	push   esi
c001bddd:	53                   	push   ebx
c001bdde:	83 ec 10             	sub    esp,0x10
c001bde1:	68 14 01 00 00       	push   0x114
c001bde6:	e8 58 3a ff ff       	call   c000f843 <malloc>
c001bdeb:	83 c4 0c             	add    esp,0xc
c001bdee:	89 c3                	mov    ebx,eax
c001bdf0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdf5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bdf8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001bdfc:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001bdff:	53                   	push   ebx
c001be00:	e8 ef 7b ff ff       	call   c00139f4 <Directory::Directory(char const*, Process*)>
c001be05:	83 c4 10             	add    esp,0x10
c001be08:	85 db                	test   ebx,ebx
c001be0a:	74 32                	je     c001be3e <sysCallMakeDir(regs*)+0x62>
c001be0c:	83 ec 0c             	sub    esp,0xc
c001be0f:	53                   	push   ebx
c001be10:	e8 23 7e ff ff       	call   c0013c38 <Directory::create()>
c001be15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be18:	89 c6                	mov    esi,eax
c001be1a:	e8 95 7c ff ff       	call   c0013ab4 <Directory::close()>
c001be1f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be21:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001be24:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001be27:	83 c4 10             	add    esp,0x10
c001be2a:	31 c0                	xor    eax,eax
c001be2c:	59                   	pop    ecx
c001be2d:	85 f6                	test   esi,esi
c001be2f:	5b                   	pop    ebx
c001be30:	0f 95 c0             	setne  al
c001be33:	5e                   	pop    esi
c001be34:	31 d2                	xor    edx,edx
c001be36:	f7 d8                	neg    eax
c001be38:	83 d2 00             	adc    edx,0x0
c001be3b:	f7 da                	neg    edx
c001be3d:	c3                   	ret    
c001be3e:	59                   	pop    ecx
c001be3f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be44:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be49:	5b                   	pop    ebx
c001be4a:	5e                   	pop    esi
c001be4b:	c3                   	ret    

c001be4c <sysCallWait(regs*)>:
c001be4c:	83 ec 10             	sub    esp,0x10
c001be4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001be53:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001be56:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be59:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001be5c:	e8 e8 24 00 00       	call   c001e349 <waitTask(int, int*, int)>
c001be61:	83 c4 1c             	add    esp,0x1c
c001be64:	99                   	cdq    
c001be65:	c3                   	ret    

c001be66 <sysCallNotImpl(regs*)>:
c001be66:	83 ec 18             	sub    esp,0x18
c001be69:	68 96 bf 02 c0       	push   0xc002bf96
c001be6e:	e8 2a e8 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001be73:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be78:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be7d:	83 c4 1c             	add    esp,0x1c
c001be80:	c3                   	ret    

c001be81 <sysPanic(regs*)>:
c001be81:	83 ec 18             	sub    esp,0x18
c001be84:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001be88:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001be8b:	e8 0d e8 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001be90:	c7 04 24 b0 bf 02 c0 	mov    DWORD PTR [esp],0xc002bfb0
c001be97:	e8 01 e8 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001be9c:	b8 01 00 00 00       	mov    eax,0x1
c001bea1:	31 d2                	xor    edx,edx
c001bea3:	83 c4 1c             	add    esp,0x1c
c001bea6:	c3                   	ret    

c001bea7 <sysCallRmdir(regs*)>:
c001bea7:	56                   	push   esi
c001bea8:	53                   	push   ebx
c001bea9:	83 ec 20             	sub    esp,0x20
c001beac:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001beb0:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001beb3:	68 14 01 00 00       	push   0x114
c001beb8:	e8 86 39 ff ff       	call   c000f843 <malloc>
c001bebd:	83 c4 0c             	add    esp,0xc
c001bec0:	89 c3                	mov    ebx,eax
c001bec2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bec7:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001beca:	56                   	push   esi
c001becb:	53                   	push   ebx
c001becc:	e8 77 76 ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001bed1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bed4:	e8 4b 78 ff ff       	call   c0013724 <File::unlink()>
c001bed9:	83 c4 10             	add    esp,0x10
c001bedc:	85 db                	test   ebx,ebx
c001bede:	74 14                	je     c001bef4 <sysCallRmdir(regs*)+0x4d>
c001bee0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bee4:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bee6:	83 ec 0c             	sub    esp,0xc
c001bee9:	53                   	push   ebx
c001beea:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001beed:	83 c4 10             	add    esp,0x10
c001bef0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bef4:	85 c0                	test   eax,eax
c001bef6:	0f 95 c0             	setne  al
c001bef9:	31 d2                	xor    edx,edx
c001befb:	0f b6 c0             	movzx  eax,al
c001befe:	f7 d8                	neg    eax
c001bf00:	83 d2 00             	adc    edx,0x0
c001bf03:	83 c4 14             	add    esp,0x14
c001bf06:	f7 da                	neg    edx
c001bf08:	5b                   	pop    ebx
c001bf09:	5e                   	pop    esi
c001bf0a:	c3                   	ret    

c001bf0b <sysCallUnlink(regs*)>:
c001bf0b:	56                   	push   esi
c001bf0c:	53                   	push   ebx
c001bf0d:	83 ec 20             	sub    esp,0x20
c001bf10:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001bf14:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bf17:	68 14 01 00 00       	push   0x114
c001bf1c:	e8 22 39 ff ff       	call   c000f843 <malloc>
c001bf21:	83 c4 0c             	add    esp,0xc
c001bf24:	89 c3                	mov    ebx,eax
c001bf26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bf2b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bf2e:	56                   	push   esi
c001bf2f:	53                   	push   ebx
c001bf30:	e8 13 76 ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001bf35:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf38:	e8 e7 77 ff ff       	call   c0013724 <File::unlink()>
c001bf3d:	83 c4 10             	add    esp,0x10
c001bf40:	85 db                	test   ebx,ebx
c001bf42:	74 14                	je     c001bf58 <sysCallUnlink(regs*)+0x4d>
c001bf44:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bf48:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bf4a:	83 ec 0c             	sub    esp,0xc
c001bf4d:	53                   	push   ebx
c001bf4e:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf51:	83 c4 10             	add    esp,0x10
c001bf54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf58:	85 c0                	test   eax,eax
c001bf5a:	0f 95 c0             	setne  al
c001bf5d:	31 d2                	xor    edx,edx
c001bf5f:	0f b6 c0             	movzx  eax,al
c001bf62:	f7 d8                	neg    eax
c001bf64:	83 d2 00             	adc    edx,0x0
c001bf67:	83 c4 14             	add    esp,0x14
c001bf6a:	f7 da                	neg    edx
c001bf6c:	5b                   	pop    ebx
c001bf6d:	5e                   	pop    esi
c001bf6e:	c3                   	ret    

c001bf6f <sysCallGetArgv(regs*)>:
c001bf6f:	83 ec 0c             	sub    esp,0xc
c001bf72:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bf76:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bf79:	85 c0                	test   eax,eax
c001bf7b:	78 2b                	js     c001bfa8 <sysCallGetArgv(regs*)+0x39>
c001bf7d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bf83:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bf86:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bf8c:	7d 1a                	jge    c001bfa8 <sysCallGetArgv(regs*)+0x39>
c001bf8e:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bf95:	85 c0                	test   eax,eax
c001bf97:	74 17                	je     c001bfb0 <sysCallGetArgv(regs*)+0x41>
c001bf99:	83 ec 08             	sub    esp,0x8
c001bf9c:	50                   	push   eax
c001bf9d:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bfa0:	e8 8f 48 fe ff       	call   c0000834 <strcpy>
c001bfa5:	83 c4 10             	add    esp,0x10
c001bfa8:	31 c0                	xor    eax,eax
c001bfaa:	31 d2                	xor    edx,edx
c001bfac:	83 c4 0c             	add    esp,0xc
c001bfaf:	c3                   	ret    
c001bfb0:	b8 01 00 00 00       	mov    eax,0x1
c001bfb5:	31 d2                	xor    edx,edx
c001bfb7:	83 c4 0c             	add    esp,0xc
c001bfba:	c3                   	ret    

c001bfbb <sysCallTTYName(regs*)>:
c001bfbb:	56                   	push   esi
c001bfbc:	53                   	push   ebx
c001bfbd:	53                   	push   ebx
c001bfbe:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bfc2:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bfc5:	85 c0                	test   eax,eax
c001bfc7:	74 5f                	je     c001c028 <sysCallTTYName(regs*)+0x6d>
c001bfc9:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bfcc:	83 f8 02             	cmp    eax,0x2
c001bfcf:	77 3e                	ja     c001c00f <sysCallTTYName(regs*)+0x54>
c001bfd1:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfd6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bfd9:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bfdf:	85 db                	test   ebx,ebx
c001bfe1:	74 45                	je     c001c028 <sysCallTTYName(regs*)+0x6d>
c001bfe3:	83 ec 0c             	sub    esp,0xc
c001bfe6:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bfe8:	53                   	push   ebx
c001bfe9:	ff 10                	call   DWORD PTR [eax]
c001bfeb:	83 c4 10             	add    esp,0x10
c001bfee:	84 c0                	test   al,al
c001bff0:	74 41                	je     c001c033 <sysCallTTYName(regs*)+0x78>
c001bff2:	83 ec 08             	sub    esp,0x8
c001bff5:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bffb:	53                   	push   ebx
c001bffc:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bfff:	e8 30 48 fe ff       	call   c0000834 <strcpy>
c001c004:	83 c4 10             	add    esp,0x10
c001c007:	31 c0                	xor    eax,eax
c001c009:	59                   	pop    ecx
c001c00a:	31 d2                	xor    edx,edx
c001c00c:	5b                   	pop    ebx
c001c00d:	5e                   	pop    esi
c001c00e:	c3                   	ret    
c001c00f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c014:	74 bb                	je     c001bfd1 <sysCallTTYName(regs*)+0x16>
c001c016:	83 ec 0c             	sub    esp,0xc
c001c019:	50                   	push   eax
c001c01a:	e8 0a 5a ff ff       	call   c0011a29 <getFromFileDescriptor(int)>
c001c01f:	83 c4 10             	add    esp,0x10
c001c022:	89 c3                	mov    ebx,eax
c001c024:	85 db                	test   ebx,ebx
c001c026:	75 bb                	jne    c001bfe3 <sysCallTTYName(regs*)+0x28>
c001c028:	59                   	pop    ecx
c001c029:	b8 01 00 00 00       	mov    eax,0x1
c001c02e:	31 d2                	xor    edx,edx
c001c030:	5b                   	pop    ebx
c001c031:	5e                   	pop    esi
c001c032:	c3                   	ret    
c001c033:	59                   	pop    ecx
c001c034:	b8 02 00 00 00       	mov    eax,0x2
c001c039:	31 d2                	xor    edx,edx
c001c03b:	5b                   	pop    ebx
c001c03c:	5e                   	pop    esi
c001c03d:	c3                   	ret    

c001c03e <sysCallUSleep(regs*)>:
c001c03e:	83 ec 14             	sub    esp,0x14
c001c041:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c046:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c04a:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c051:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c054:	01 ca                	add    edx,ecx
c001c056:	52                   	push   edx
c001c057:	50                   	push   eax
c001c058:	e8 85 23 00 00       	call   c001e3e2 <nanoSleep(unsigned long long)>
c001c05d:	31 c0                	xor    eax,eax
c001c05f:	31 d2                	xor    edx,edx
c001c061:	83 c4 1c             	add    esp,0x1c
c001c064:	c3                   	ret    

c001c065 <sysCallSpawn(regs*)>:
c001c065:	56                   	push   esi
c001c066:	53                   	push   ebx
c001c067:	53                   	push   ebx
c001c068:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c06c:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001c06f:	85 f6                	test   esi,esi
c001c071:	75 08                	jne    c001c07b <sysCallSpawn(regs*)+0x16>
c001c073:	59                   	pop    ecx
c001c074:	31 c0                	xor    eax,eax
c001c076:	31 d2                	xor    edx,edx
c001c078:	5b                   	pop    ebx
c001c079:	5e                   	pop    esi
c001c07a:	c3                   	ret    
c001c07b:	83 ec 0c             	sub    esp,0xc
c001c07e:	68 3f 07 00 00       	push   0x73f
c001c083:	e8 bb 37 ff ff       	call   c000f843 <malloc>
c001c088:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001c08b:	89 c6                	mov    esi,eax
c001c08d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c092:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c095:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c098:	56                   	push   esi
c001c099:	e8 44 1a 00 00       	call   c001dae2 <Process::Process(char const*, Process*, char**)>
c001c09e:	83 c4 20             	add    esp,0x20
c001c0a1:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c0a8:	75 c9                	jne    c001c073 <sysCallSpawn(regs*)+0xe>
c001c0aa:	83 ec 0c             	sub    esp,0xc
c001c0ad:	56                   	push   esi
c001c0ae:	e8 f5 1f 00 00       	call   c001e0a8 <Process::createUserThread()>
c001c0b3:	8b 06                	mov    eax,DWORD PTR [esi]
c001c0b5:	83 c4 10             	add    esp,0x10
c001c0b8:	99                   	cdq    
c001c0b9:	59                   	pop    ecx
c001c0ba:	5b                   	pop    ebx
c001c0bb:	5e                   	pop    esi
c001c0bc:	c3                   	ret    

c001c0bd <sysCallGetEnv(regs*)>:
c001c0bd:	55                   	push   ebp
c001c0be:	57                   	push   edi
c001c0bf:	56                   	push   esi
c001c0c0:	53                   	push   ebx
c001c0c1:	83 ec 28             	sub    esp,0x28
c001c0c4:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c0c8:	68 bf bf 02 c0       	push   0xc002bfbf
c001c0cd:	e8 1d 6f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c0d2:	5f                   	pop    edi
c001c0d3:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c0d6:	5d                   	pop    ebp
c001c0d7:	53                   	push   ebx
c001c0d8:	68 05 c3 02 c0       	push   0xc002c305
c001c0dd:	e8 0d 6f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c0e2:	58                   	pop    eax
c001c0e3:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c0e6:	5a                   	pop    edx
c001c0e7:	57                   	push   edi
c001c0e8:	68 c8 bf 02 c0       	push   0xc002bfc8
c001c0ed:	e8 fd 6e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c0f2:	59                   	pop    ecx
c001c0f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c0f8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c0fb:	e8 b9 e4 ff ff       	call   c001a5b9 <Krnl::getProcessTotalEnvCount(Process*)>
c001c100:	5a                   	pop    edx
c001c101:	89 c5                	mov    ebp,eax
c001c103:	59                   	pop    ecx
c001c104:	50                   	push   eax
c001c105:	68 d2 bf 02 c0       	push   0xc002bfd2
c001c10a:	e8 e0 6e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c10f:	83 c4 10             	add    esp,0x10
c001c112:	39 ef                	cmp    edi,ebp
c001c114:	7c 15                	jl     c001c12b <sysCallGetEnv(regs*)+0x6e>
c001c116:	85 db                	test   ebx,ebx
c001c118:	75 0c                	jne    c001c126 <sysCallGetEnv(regs*)+0x69>
c001c11a:	83 c4 1c             	add    esp,0x1c
c001c11d:	31 c0                	xor    eax,eax
c001c11f:	5b                   	pop    ebx
c001c120:	31 d2                	xor    edx,edx
c001c122:	5e                   	pop    esi
c001c123:	5f                   	pop    edi
c001c124:	5d                   	pop    ebp
c001c125:	c3                   	ret    
c001c126:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c129:	eb ef                	jmp    c001c11a <sysCallGetEnv(regs*)+0x5d>
c001c12b:	83 ec 0c             	sub    esp,0xc
c001c12e:	68 de bf 02 c0       	push   0xc002bfde
c001c133:	e8 b7 6e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c138:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c13c:	83 c4 0c             	add    esp,0xc
c001c13f:	57                   	push   edi
c001c140:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c146:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c149:	50                   	push   eax
c001c14a:	e8 8a e4 ff ff       	call   c001a5d9 <Krnl::getProcessEnvPair(Process*, int)>
c001c14f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c153:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c157:	68 84 c3 02 c0       	push   0xc002c384
c001c15c:	e8 8e 6e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c161:	83 c4 10             	add    esp,0x10
c001c164:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c167:	85 f6                	test   esi,esi
c001c169:	75 47                	jne    c001c1b2 <sysCallGetEnv(regs*)+0xf5>
c001c16b:	83 ec 0c             	sub    esp,0xc
c001c16e:	55                   	push   ebp
c001c16f:	e8 20 46 fe ff       	call   c0000794 <strlen>
c001c174:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c177:	89 c3                	mov    ebx,eax
c001c179:	e8 16 46 fe ff       	call   c0000794 <strlen>
c001c17e:	5a                   	pop    edx
c001c17f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c183:	59                   	pop    ecx
c001c184:	50                   	push   eax
c001c185:	68 e1 bf 02 c0       	push   0xc002bfe1
c001c18a:	e8 60 6e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c18f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c192:	e8 fd 45 fe ff       	call   c0000794 <strlen>
c001c197:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c19a:	89 c3                	mov    ebx,eax
c001c19c:	e8 f3 45 fe ff       	call   c0000794 <strlen>
c001c1a1:	83 c4 10             	add    esp,0x10
c001c1a4:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c1a8:	83 c4 1c             	add    esp,0x1c
c001c1ab:	31 d2                	xor    edx,edx
c001c1ad:	5b                   	pop    ebx
c001c1ae:	5e                   	pop    esi
c001c1af:	5f                   	pop    edi
c001c1b0:	5d                   	pop    ebp
c001c1b1:	c3                   	ret    
c001c1b2:	83 ec 0c             	sub    esp,0xc
c001c1b5:	68 9e c3 02 c0       	push   0xc002c39e
c001c1ba:	e8 30 6e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c1bf:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c1c2:	58                   	pop    eax
c001c1c3:	5a                   	pop    edx
c001c1c4:	55                   	push   ebp
c001c1c5:	53                   	push   ebx
c001c1c6:	e8 69 46 fe ff       	call   c0000834 <strcpy>
c001c1cb:	59                   	pop    ecx
c001c1cc:	5e                   	pop    esi
c001c1cd:	68 eb bf 02 c0       	push   0xc002bfeb
c001c1d2:	53                   	push   ebx
c001c1d3:	e8 9c 47 fe ff       	call   c0000974 <strcat>
c001c1d8:	5d                   	pop    ebp
c001c1d9:	58                   	pop    eax
c001c1da:	57                   	push   edi
c001c1db:	53                   	push   ebx
c001c1dc:	e8 93 47 fe ff       	call   c0000974 <strcat>
c001c1e1:	c7 04 24 b8 c3 02 c0 	mov    DWORD PTR [esp],0xc002c3b8
c001c1e8:	e8 02 6e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c1ed:	83 c4 10             	add    esp,0x10
c001c1f0:	e9 25 ff ff ff       	jmp    c001c11a <sysCallGetEnv(regs*)+0x5d>

c001c1f5 <sysAppSettings(regs*)>:
c001c1f5:	53                   	push   ebx
c001c1f6:	83 ec 08             	sub    esp,0x8
c001c1f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1fd:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001c200:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001c206:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c20b:	66 3d c0 09          	cmp    ax,0x9c0
c001c20f:	75 2f                	jne    c001c240 <sysAppSettings(regs*)+0x4b>
c001c211:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001c217:	83 e0 1f             	and    eax,0x1f
c001c21a:	3c 01                	cmp    al,0x1
c001c21c:	74 2e                	je     c001c24c <sysAppSettings(regs*)+0x57>
c001c21e:	3c 07                	cmp    al,0x7
c001c220:	0f 84 bd 00 00 00    	je     c001c2e3 <sysAppSettings(regs*)+0xee>
c001c226:	84 c0                	test   al,al
c001c228:	0f 84 dc 00 00 00    	je     c001c30a <sysAppSettings(regs*)+0x115>
c001c22e:	3c 08                	cmp    al,0x8
c001c230:	74 6d                	je     c001c29f <sysAppSettings(regs*)+0xaa>
c001c232:	0f b6 c0             	movzx  eax,al
c001c235:	83 c4 08             	add    esp,0x8
c001c238:	05 e8 03 00 00       	add    eax,0x3e8
c001c23d:	5b                   	pop    ebx
c001c23e:	99                   	cdq    
c001c23f:	c3                   	ret    
c001c240:	b8 01 00 00 00       	mov    eax,0x1
c001c245:	31 d2                	xor    edx,edx
c001c247:	83 c4 08             	add    esp,0x8
c001c24a:	5b                   	pop    ebx
c001c24b:	c3                   	ret    
c001c24c:	51                   	push   ecx
c001c24d:	68 00 01 00 00       	push   0x100
c001c252:	6a 00                	push   0x0
c001c254:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c259:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c25c:	83 c0 0c             	add    eax,0xc
c001c25f:	50                   	push   eax
c001c260:	e8 13 45 fe ff       	call   c0000778 <memset>
c001c265:	83 c4 0c             	add    esp,0xc
c001c268:	68 ff 00 00 00       	push   0xff
c001c26d:	53                   	push   ebx
c001c26e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c273:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c276:	83 c0 0c             	add    eax,0xc
c001c279:	50                   	push   eax
c001c27a:	e8 c5 44 fe ff       	call   c0000744 <memcpy>
c001c27f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c284:	5b                   	pop    ebx
c001c285:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c288:	5a                   	pop    edx
c001c289:	8d 50 0c             	lea    edx,[eax+0xc]
c001c28c:	52                   	push   edx
c001c28d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c293:	e8 0c 49 ff ff       	call   c0010ba4 <VgaText::setTitle(char*)>
c001c298:	83 c4 10             	add    esp,0x10
c001c29b:	31 c0                	xor    eax,eax
c001c29d:	eb a6                	jmp    c001c245 <sysAppSettings(regs*)+0x50>
c001c29f:	83 ec 08             	sub    esp,0x8
c001c2a2:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2a8:	83 e0 0f             	and    eax,0xf
c001c2ab:	50                   	push   eax
c001c2ac:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2b1:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2b4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2ba:	e8 d5 48 ff ff       	call   c0010b94 <VgaText::setTitleColour(VgaColour)>
c001c2bf:	58                   	pop    eax
c001c2c0:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001c2c6:	5a                   	pop    edx
c001c2c7:	c1 e8 04             	shr    eax,0x4
c001c2ca:	83 e0 0f             	and    eax,0xf
c001c2cd:	50                   	push   eax
c001c2ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2d6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c2dc:	e8 a3 48 ff ff       	call   c0010b84 <VgaText::setTitleTextColour(VgaColour)>
c001c2e1:	eb b5                	jmp    c001c298 <sysAppSettings(regs*)+0xa3>
c001c2e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c2e8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c2eb:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c2f1:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001c2f7:	c0 e8 06             	shr    al,0x6
c001c2fa:	83 e0 01             	and    eax,0x1
c001c2fd:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001c303:	31 c0                	xor    eax,eax
c001c305:	e9 3b ff ff ff       	jmp    c001c245 <sysAppSettings(regs*)+0x50>
c001c30a:	b8 02 00 00 00       	mov    eax,0x2
c001c30f:	e9 31 ff ff ff       	jmp    c001c245 <sysAppSettings(regs*)+0x50>

c001c314 <sysSetFatAttrib(regs*)>:
c001c314:	57                   	push   edi
c001c315:	56                   	push   esi
c001c316:	53                   	push   ebx
c001c317:	83 ec 1c             	sub    esp,0x1c
c001c31a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c31e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c321:	68 14 01 00 00       	push   0x114
c001c326:	e8 18 35 ff ff       	call   c000f843 <malloc>
c001c32b:	83 c4 0c             	add    esp,0xc
c001c32e:	89 c3                	mov    ebx,eax
c001c330:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c335:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c338:	57                   	push   edi
c001c339:	53                   	push   ebx
c001c33a:	e8 09 72 ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001c33f:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c342:	83 c4 0c             	add    esp,0xc
c001c345:	0f b6 d4             	movzx  edx,ah
c001c348:	0f b6 c0             	movzx  eax,al
c001c34b:	52                   	push   edx
c001c34c:	50                   	push   eax
c001c34d:	53                   	push   ebx
c001c34e:	e8 6b 74 ff ff       	call   c00137be <File::chfatattr(unsigned char, unsigned char)>
c001c353:	83 c4 10             	add    esp,0x10
c001c356:	85 db                	test   ebx,ebx
c001c358:	74 14                	je     c001c36e <sysSetFatAttrib(regs*)+0x5a>
c001c35a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c35e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c360:	83 ec 0c             	sub    esp,0xc
c001c363:	53                   	push   ebx
c001c364:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c367:	83 c4 10             	add    esp,0x10
c001c36a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c36e:	85 c0                	test   eax,eax
c001c370:	0f 95 c0             	setne  al
c001c373:	31 d2                	xor    edx,edx
c001c375:	0f b6 c0             	movzx  eax,al
c001c378:	f7 d8                	neg    eax
c001c37a:	83 d2 00             	adc    edx,0x0
c001c37d:	83 c4 10             	add    esp,0x10
c001c380:	f7 da                	neg    edx
c001c382:	5b                   	pop    ebx
c001c383:	5e                   	pop    esi
c001c384:	5f                   	pop    edi
c001c385:	c3                   	ret    

c001c386 <sysPipe(regs*)>:
c001c386:	57                   	push   edi
c001c387:	56                   	push   esi
c001c388:	53                   	push   ebx
c001c389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c38d:	83 ec 0c             	sub    esp,0xc
c001c390:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c393:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c396:	6a 20                	push   0x20
c001c398:	e8 a6 34 ff ff       	call   c000f843 <malloc>
c001c39d:	89 c3                	mov    ebx,eax
c001c39f:	58                   	pop    eax
c001c3a0:	5a                   	pop    edx
c001c3a1:	68 00 50 00 00       	push   0x5000
c001c3a6:	53                   	push   ebx
c001c3a7:	e8 28 41 ff ff       	call   c00104d4 <Pipe::Pipe(int)>
c001c3ac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3af:	e8 80 53 ff ff       	call   c0011734 <UnixFile::getFileDescriptor()>
c001c3b4:	89 07                	mov    DWORD PTR [edi],eax
c001c3b6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c3b9:	e8 76 53 ff ff       	call   c0011734 <UnixFile::getFileDescriptor()>
c001c3be:	83 c4 10             	add    esp,0x10
c001c3c1:	89 06                	mov    DWORD PTR [esi],eax
c001c3c3:	31 d2                	xor    edx,edx
c001c3c5:	5b                   	pop    ebx
c001c3c6:	31 c0                	xor    eax,eax
c001c3c8:	5e                   	pop    esi
c001c3c9:	5f                   	pop    edi
c001c3ca:	c3                   	ret    

c001c3cb <sysGetUnixTime(regs*)>:
c001c3cb:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001c3d0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c3d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c3da:	e9 53 7b ff ff       	jmp    c0013f32 <Clock::timeInSecondsLocal()>

c001c3df <string_ends_with(char const*, char const*)>:
c001c3df:	57                   	push   edi
c001c3e0:	56                   	push   esi
c001c3e1:	53                   	push   ebx
c001c3e2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3e6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c3ea:	83 ec 0c             	sub    esp,0xc
c001c3ed:	53                   	push   ebx
c001c3ee:	e8 a1 43 fe ff       	call   c0000794 <strlen>
c001c3f3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c3f6:	89 c6                	mov    esi,eax
c001c3f8:	e8 97 43 fe ff       	call   c0000794 <strlen>
c001c3fd:	83 c4 10             	add    esp,0x10
c001c400:	39 c6                	cmp    esi,eax
c001c402:	7d 06                	jge    c001c40a <string_ends_with(char const*, char const*)+0x2b>
c001c404:	5b                   	pop    ebx
c001c405:	31 c0                	xor    eax,eax
c001c407:	5e                   	pop    esi
c001c408:	5f                   	pop    edi
c001c409:	c3                   	ret    
c001c40a:	83 ec 08             	sub    esp,0x8
c001c40d:	29 c6                	sub    esi,eax
c001c40f:	57                   	push   edi
c001c410:	01 f3                	add    ebx,esi
c001c412:	53                   	push   ebx
c001c413:	e8 a8 44 fe ff       	call   c00008c0 <strcmp>
c001c418:	83 c4 10             	add    esp,0x10
c001c41b:	85 c0                	test   eax,eax
c001c41d:	5b                   	pop    ebx
c001c41e:	0f 94 c0             	sete   al
c001c421:	5e                   	pop    esi
c001c422:	0f b6 c0             	movzx  eax,al
c001c425:	5f                   	pop    edi
c001c426:	c3                   	ret    

c001c427 <sysCallOpen(regs*)>:
c001c427:	56                   	push   esi
c001c428:	53                   	push   ebx
c001c429:	81 ec 04 01 00 00    	sub    esp,0x104
c001c42f:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c436:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c439:	85 c9                	test   ecx,ecx
c001c43b:	0f 84 b3 00 00 00    	je     c001c4f4 <sysCallOpen(regs*)+0xcd>
c001c441:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c444:	85 c0                	test   eax,eax
c001c446:	0f 84 a8 00 00 00    	je     c001c4f4 <sysCallOpen(regs*)+0xcd>
c001c44c:	52                   	push   edx
c001c44d:	68 ed bf 02 c0       	push   0xc002bfed
c001c452:	50                   	push   eax
c001c453:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c457:	56                   	push   esi
c001c458:	e8 41 6f ff ff       	call   c001339e <Fs::standardiseFiles(char*, char const*, char const*)>
c001c45d:	89 34 24             	mov    DWORD PTR [esp],esi
c001c460:	e8 2f 43 fe ff       	call   c0000794 <strlen>
c001c465:	83 c4 10             	add    esp,0x10
c001c468:	48                   	dec    eax
c001c469:	74 1d                	je     c001c488 <sysCallOpen(regs*)+0x61>
c001c46b:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c46e:	eb 0f                	jmp    c001c47f <sysCallOpen(regs*)+0x58>
c001c470:	80 fa 3a             	cmp    dl,0x3a
c001c473:	74 0f                	je     c001c484 <sysCallOpen(regs*)+0x5d>
c001c475:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c479:	48                   	dec    eax
c001c47a:	74 0c                	je     c001c488 <sysCallOpen(regs*)+0x61>
c001c47c:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c47f:	80 fa 2e             	cmp    dl,0x2e
c001c482:	75 ec                	jne    c001c470 <sysCallOpen(regs*)+0x49>
c001c484:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c488:	83 ec 08             	sub    esp,0x8
c001c48b:	68 f1 bf 02 c0       	push   0xc002bff1
c001c490:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c493:	e8 47 ff ff ff       	call   c001c3df <string_ends_with(char const*, char const*)>
c001c498:	83 c4 10             	add    esp,0x10
c001c49b:	85 c0                	test   eax,eax
c001c49d:	75 17                	jne    c001c4b6 <sysCallOpen(regs*)+0x8f>
c001c49f:	83 ec 08             	sub    esp,0x8
c001c4a2:	68 12 c0 02 c0       	push   0xc002c012
c001c4a7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c4aa:	e8 30 ff ff ff       	call   c001c3df <string_ends_with(char const*, char const*)>
c001c4af:	83 c4 10             	add    esp,0x10
c001c4b2:	85 c0                	test   eax,eax
c001c4b4:	74 51                	je     c001c507 <sysCallOpen(regs*)+0xe0>
c001c4b6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4b9:	83 ec 08             	sub    esp,0x8
c001c4bc:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c4c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c4c9:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c4cc:	ff 30                	push   DWORD PTR [eax]
c001c4ce:	68 f6 bf 02 c0       	push   0xc002bff6
c001c4d3:	e8 17 6b ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c4d8:	c7 04 24 05 c0 02 c0 	mov    DWORD PTR [esp],0xc002c005
c001c4df:	e8 0b 6b ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c4e4:	83 c4 10             	add    esp,0x10
c001c4e7:	81 c4 04 01 00 00    	add    esp,0x104
c001c4ed:	31 c0                	xor    eax,eax
c001c4ef:	31 d2                	xor    edx,edx
c001c4f1:	5b                   	pop    ebx
c001c4f2:	5e                   	pop    esi
c001c4f3:	c3                   	ret    
c001c4f4:	81 c4 04 01 00 00    	add    esp,0x104
c001c4fa:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c4ff:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c504:	5b                   	pop    ebx
c001c505:	5e                   	pop    esi
c001c506:	c3                   	ret    
c001c507:	83 ec 08             	sub    esp,0x8
c001c50a:	68 f2 bf 02 c0       	push   0xc002bff2
c001c50f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c512:	e8 a9 43 fe ff       	call   c00008c0 <strcmp>
c001c517:	83 c4 10             	add    esp,0x10
c001c51a:	85 c0                	test   eax,eax
c001c51c:	74 98                	je     c001c4b6 <sysCallOpen(regs*)+0x8f>
c001c51e:	83 ec 08             	sub    esp,0x8
c001c521:	68 f1 bf 02 c0       	push   0xc002bff1
c001c526:	56                   	push   esi
c001c527:	e8 b3 fe ff ff       	call   c001c3df <string_ends_with(char const*, char const*)>
c001c52c:	83 c4 10             	add    esp,0x10
c001c52f:	85 c0                	test   eax,eax
c001c531:	75 83                	jne    c001c4b6 <sysCallOpen(regs*)+0x8f>
c001c533:	83 ec 08             	sub    esp,0x8
c001c536:	68 17 c0 02 c0       	push   0xc002c017
c001c53b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c53e:	e8 9c fe ff ff       	call   c001c3df <string_ends_with(char const*, char const*)>
c001c543:	83 c4 10             	add    esp,0x10
c001c546:	85 c0                	test   eax,eax
c001c548:	0f 85 d9 00 00 00    	jne    c001c627 <sysCallOpen(regs*)+0x200>
c001c54e:	83 ec 08             	sub    esp,0x8
c001c551:	68 1c c0 02 c0       	push   0xc002c01c
c001c556:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c559:	e8 81 fe ff ff       	call   c001c3df <string_ends_with(char const*, char const*)>
c001c55e:	83 c4 10             	add    esp,0x10
c001c561:	85 c0                	test   eax,eax
c001c563:	0f 85 be 00 00 00    	jne    c001c627 <sysCallOpen(regs*)+0x200>
c001c569:	83 ec 08             	sub    esp,0x8
c001c56c:	68 18 c0 02 c0       	push   0xc002c018
c001c571:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c574:	e8 47 43 fe ff       	call   c00008c0 <strcmp>
c001c579:	83 c4 10             	add    esp,0x10
c001c57c:	85 c0                	test   eax,eax
c001c57e:	0f 84 a3 00 00 00    	je     c001c627 <sysCallOpen(regs*)+0x200>
c001c584:	83 ec 08             	sub    esp,0x8
c001c587:	68 17 c0 02 c0       	push   0xc002c017
c001c58c:	56                   	push   esi
c001c58d:	e8 4d fe ff ff       	call   c001c3df <string_ends_with(char const*, char const*)>
c001c592:	83 c4 10             	add    esp,0x10
c001c595:	85 c0                	test   eax,eax
c001c597:	0f 85 8a 00 00 00    	jne    c001c627 <sysCallOpen(regs*)+0x200>
c001c59d:	83 ec 0c             	sub    esp,0xc
c001c5a0:	68 14 01 00 00       	push   0x114
c001c5a5:	e8 99 32 ff ff       	call   c000f843 <malloc>
c001c5aa:	83 c4 0c             	add    esp,0xc
c001c5ad:	89 c6                	mov    esi,eax
c001c5af:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5b4:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5b7:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c5ba:	56                   	push   esi
c001c5bb:	e8 88 6f ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001c5c0:	83 c4 10             	add    esp,0x10
c001c5c3:	85 f6                	test   esi,esi
c001c5c5:	0f 84 29 ff ff ff    	je     c001c4f4 <sysCallOpen(regs*)+0xcd>
c001c5cb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c5ce:	0f b6 c2             	movzx  eax,dl
c001c5d1:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c5d4:	89 d0                	mov    eax,edx
c001c5d6:	83 e0 01             	and    eax,0x1
c001c5d9:	f6 c2 02             	test   dl,0x2
c001c5dc:	74 03                	je     c001c5e1 <sysCallOpen(regs*)+0x1ba>
c001c5de:	83 c8 02             	or     eax,0x2
c001c5e1:	f6 c2 04             	test   dl,0x4
c001c5e4:	74 03                	je     c001c5e9 <sysCallOpen(regs*)+0x1c2>
c001c5e6:	83 c8 04             	or     eax,0x4
c001c5e9:	f6 c2 08             	test   dl,0x8
c001c5ec:	74 03                	je     c001c5f1 <sysCallOpen(regs*)+0x1ca>
c001c5ee:	83 c8 0a             	or     eax,0xa
c001c5f1:	83 e2 10             	and    edx,0x10
c001c5f4:	74 03                	je     c001c5f9 <sysCallOpen(regs*)+0x1d2>
c001c5f6:	83 c8 12             	or     eax,0x12
c001c5f9:	83 ec 08             	sub    esp,0x8
c001c5fc:	50                   	push   eax
c001c5fd:	56                   	push   esi
c001c5fe:	e8 a9 6f ff ff       	call   c00135ac <File::open(FileOpenMode)>
c001c603:	83 c4 10             	add    esp,0x10
c001c606:	85 c0                	test   eax,eax
c001c608:	0f 85 e6 fe ff ff    	jne    c001c4f4 <sysCallOpen(regs*)+0xcd>
c001c60e:	83 ec 0c             	sub    esp,0xc
c001c611:	56                   	push   esi
c001c612:	e8 1d 51 ff ff       	call   c0011734 <UnixFile::getFileDescriptor()>
c001c617:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c61a:	89 02                	mov    DWORD PTR [edx],eax
c001c61c:	c1 f8 1f             	sar    eax,0x1f
c001c61f:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c622:	e9 bd fe ff ff       	jmp    c001c4e4 <sysCallOpen(regs*)+0xbd>
c001c627:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c62a:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c630:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c637:	e9 ab fe ff ff       	jmp    c001c4e7 <sysCallOpen(regs*)+0xc0>

c001c63c <Sys::loadSyscalls()>:
c001c63c:	c7 05 a0 10 03 c0 49 b7 01 c0 	mov    DWORD PTR ds:0xc00310a0,0xc001b749
c001c646:	c7 05 a4 10 03 c0 32 b3 01 c0 	mov    DWORD PTR ds:0xc00310a4,0xc001b332
c001c650:	c7 05 a8 10 03 c0 9c b4 01 c0 	mov    DWORD PTR ds:0xc00310a8,0xc001b49c
c001c65a:	c7 05 ac 10 03 c0 7f b6 01 c0 	mov    DWORD PTR ds:0xc00310ac,0xc001b67f
c001c664:	c7 05 b0 10 03 c0 34 b4 01 c0 	mov    DWORD PTR ds:0xc00310b0,0xc001b434
c001c66e:	c7 05 b4 10 03 c0 69 b3 01 c0 	mov    DWORD PTR ds:0xc00310b4,0xc001b369
c001c678:	c7 05 b8 10 03 c0 4a b3 01 c0 	mov    DWORD PTR ds:0xc00310b8,0xc001b34a
c001c682:	c7 05 bc 10 03 c0 f1 b4 01 c0 	mov    DWORD PTR ds:0xc00310bc,0xc001b4f1
c001c68c:	c7 05 c4 10 03 c0 79 bc 01 c0 	mov    DWORD PTR ds:0xc00310c4,0xc001bc79
c001c696:	c7 05 c0 10 03 c0 27 c4 01 c0 	mov    DWORD PTR ds:0xc00310c0,0xc001c427
c001c6a0:	c7 05 c8 10 03 c0 01 bd 01 c0 	mov    DWORD PTR ds:0xc00310c8,0xc001bd01
c001c6aa:	c7 05 cc 10 03 c0 68 b9 01 c0 	mov    DWORD PTR ds:0xc00310cc,0xc001b968
c001c6b4:	c7 05 d0 10 03 c0 84 b7 01 c0 	mov    DWORD PTR ds:0xc00310d0,0xc001b784
c001c6be:	c7 05 d4 10 03 c0 89 b7 01 c0 	mov    DWORD PTR ds:0xc00310d4,0xc001b789
c001c6c8:	c7 05 d8 10 03 c0 dc bd 01 c0 	mov    DWORD PTR ds:0xc00310d8,0xc001bddc
c001c6d2:	c7 05 dc 10 03 c0 76 bd 01 c0 	mov    DWORD PTR ds:0xc00310dc,0xc001bd76
c001c6dc:	c7 05 e0 10 03 c0 50 ba 01 c0 	mov    DWORD PTR ds:0xc00310e0,0xc001ba50
c001c6e6:	c7 05 e4 10 03 c0 b9 ba 01 c0 	mov    DWORD PTR ds:0xc00310e4,0xc001bab9
c001c6f0:	c7 05 e8 10 03 c0 36 bb 01 c0 	mov    DWORD PTR ds:0xc00310e8,0xc001bb36
c001c6fa:	c7 05 ec 10 03 c0 8e b7 01 c0 	mov    DWORD PTR ds:0xc00310ec,0xc001b78e
c001c704:	c7 05 f0 10 03 c0 4c be 01 c0 	mov    DWORD PTR ds:0xc00310f0,0xc001be4c
c001c70e:	c7 05 f4 10 03 c0 66 be 01 c0 	mov    DWORD PTR ds:0xc00310f4,0xc001be66
c001c718:	c7 05 f8 10 03 c0 66 be 01 c0 	mov    DWORD PTR ds:0xc00310f8,0xc001be66
c001c722:	c7 05 fc 10 03 c0 a7 be 01 c0 	mov    DWORD PTR ds:0xc00310fc,0xc001bea7
c001c72c:	c7 05 00 11 03 c0 0b bf 01 c0 	mov    DWORD PTR ds:0xc0031100,0xc001bf0b
c001c736:	c7 05 04 11 03 c0 3a b9 01 c0 	mov    DWORD PTR ds:0xc0031104,0xc001b93a
c001c740:	c7 05 08 11 03 c0 6f bf 01 c0 	mov    DWORD PTR ds:0xc0031108,0xc001bf6f
c001c74a:	c7 05 0c 11 03 c0 f7 b8 01 c0 	mov    DWORD PTR ds:0xc003110c,0xc001b8f7
c001c754:	c7 05 10 11 03 c0 bb bf 01 c0 	mov    DWORD PTR ds:0xc0031110,0xc001bfbb
c001c75e:	c7 05 14 11 03 c0 f6 b9 01 c0 	mov    DWORD PTR ds:0xc0031114,0xc001b9f6
c001c768:	c7 05 18 11 03 c0 3e c0 01 c0 	mov    DWORD PTR ds:0xc0031118,0xc001c03e
c001c772:	c7 05 1c 11 03 c0 b9 bb 01 c0 	mov    DWORD PTR ds:0xc003111c,0xc001bbb9
c001c77c:	c7 05 20 11 03 c0 65 c0 01 c0 	mov    DWORD PTR ds:0xc0031120,0xc001c065
c001c786:	c7 05 24 11 03 c0 bd c0 01 c0 	mov    DWORD PTR ds:0xc0031124,0xc001c0bd
c001c790:	c7 05 28 11 03 c0 f5 c1 01 c0 	mov    DWORD PTR ds:0xc0031128,0xc001c1f5
c001c79a:	c7 05 2c 11 03 c0 98 b7 01 c0 	mov    DWORD PTR ds:0xc003112c,0xc001b798
c001c7a4:	c7 05 30 11 03 c0 02 b8 01 c0 	mov    DWORD PTR ds:0xc0031130,0xc001b802
c001c7ae:	c7 05 34 11 03 c0 48 b8 01 c0 	mov    DWORD PTR ds:0xc0031134,0xc001b848
c001c7b8:	c7 05 38 11 03 c0 14 c3 01 c0 	mov    DWORD PTR ds:0xc0031138,0xc001c314
c001c7c2:	c7 05 3c 11 03 c0 81 be 01 c0 	mov    DWORD PTR ds:0xc003113c,0xc001be81
c001c7cc:	c7 05 40 11 03 c0 99 b8 01 c0 	mov    DWORD PTR ds:0xc0031140,0xc001b899
c001c7d6:	c7 05 44 11 03 c0 86 c3 01 c0 	mov    DWORD PTR ds:0xc0031144,0xc001c386
c001c7e0:	c7 05 48 11 03 c0 cb c3 01 c0 	mov    DWORD PTR ds:0xc0031148,0xc001c3cb
c001c7ea:	c7 05 4c 11 03 c0 8c b3 01 c0 	mov    DWORD PTR ds:0xc003114c,0xc001b38c
c001c7f4:	c7 05 50 11 03 c0 0d b5 01 c0 	mov    DWORD PTR ds:0xc0031150,0xc001b50d
c001c7fe:	c7 05 54 11 03 c0 35 b6 01 c0 	mov    DWORD PTR ds:0xc0031154,0xc001b635
c001c808:	c7 05 58 11 03 c0 fc b2 01 c0 	mov    DWORD PTR ds:0xc0031158,0xc001b2fc
c001c812:	c7 05 5c 11 03 c0 e7 b6 01 c0 	mov    DWORD PTR ds:0xc003115c,0xc001b6e7
c001c81c:	c7 05 60 11 03 c0 75 b3 01 c0 	mov    DWORD PTR ds:0xc0031160,0xc001b375
c001c826:	c3                   	ret    

c001c827 <Sys::systemCall(regs*, void*)>:
c001c827:	53                   	push   ebx
c001c828:	83 ec 08             	sub    esp,0x8
c001c82b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c82f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c832:	83 f8 7f             	cmp    eax,0x7f
c001c835:	77 16                	ja     c001c84d <Sys::systemCall(regs*, void*)+0x26>
c001c837:	8b 14 85 a0 10 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcef60]
c001c83e:	85 d2                	test   edx,edx
c001c840:	74 0b                	je     c001c84d <Sys::systemCall(regs*, void*)+0x26>
c001c842:	83 ec 0c             	sub    esp,0xc
c001c845:	53                   	push   ebx
c001c846:	ff d2                	call   edx
c001c848:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c84b:	eb 0d                	jmp    c001c85a <Sys::systemCall(regs*, void*)+0x33>
c001c84d:	52                   	push   edx
c001c84e:	52                   	push   edx
c001c84f:	50                   	push   eax
c001c850:	68 21 c0 02 c0       	push   0xc002c021
c001c855:	e8 95 67 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c85a:	83 c4 10             	add    esp,0x10
c001c85d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c862:	31 d2                	xor    edx,edx
c001c864:	83 c4 08             	add    esp,0x8
c001c867:	5b                   	pop    ebx
c001c868:	c3                   	ret    

c001c869 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c869:	55                   	push   ebp
c001c86a:	57                   	push   edi
c001c86b:	56                   	push   esi
c001c86c:	53                   	push   ebx
c001c86d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c873:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c87a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c881:	85 c0                	test   eax,eax
c001c883:	0f 95 c1             	setne  cl
c001c886:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c88e:	0f 94 c2             	sete   dl
c001c891:	84 d1                	test   cl,dl
c001c893:	74 23                	je     c001c8b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c895:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c89b:	74 1b                	je     c001c8b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c89d:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c8a3:	89 da                	mov    edx,ebx
c001c8a5:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c8ab:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c8b1:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c8b8:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c8bf:	05 ff 0f 00 00       	add    eax,0xfff
c001c8c4:	83 ec 0c             	sub    esp,0xc
c001c8c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c8cb:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c8d1:	c1 e8 0c             	shr    eax,0xc
c001c8d4:	89 ef                	mov    edi,ebp
c001c8d6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c8da:	c1 ef 0c             	shr    edi,0xc
c001c8dd:	6a 01                	push   0x1
c001c8df:	e8 9b 52 ff ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c001c8e4:	89 c6                	mov    esi,eax
c001c8e6:	58                   	pop    eax
c001c8e7:	5a                   	pop    edx
c001c8e8:	57                   	push   edi
c001c8e9:	68 a7 c0 02 c0       	push   0xc002c0a7
c001c8ee:	e8 fc 66 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c8f3:	59                   	pop    ecx
c001c8f4:	58                   	pop    eax
c001c8f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c8f9:	68 b9 c0 02 c0       	push   0xc002c0b9
c001c8fe:	e8 ec 66 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c903:	83 c4 10             	add    esp,0x10
c001c906:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c90c:	0f 86 24 01 00 00    	jbe    c001ca36 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c912:	c1 e7 0c             	shl    edi,0xc
c001c915:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c918:	89 df                	mov    edi,ebx
c001c91a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c91e:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c925:	01 dd                	add    ebp,ebx
c001c927:	29 fd                	sub    ebp,edi
c001c929:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c92d:	0f 84 01 01 00 00    	je     c001ca34 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c933:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c939:	76 05                	jbe    c001c940 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c93b:	bd 00 10 00 00       	mov    ebp,0x1000
c001c940:	83 ec 0c             	sub    esp,0xc
c001c943:	31 d2                	xor    edx,edx
c001c945:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c94c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c94e:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c952:	50                   	push   eax
c001c953:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c957:	50                   	push   eax
c001c958:	52                   	push   edx
c001c959:	55                   	push   ebp
c001c95a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c961:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c964:	83 c4 20             	add    esp,0x20
c001c967:	85 c0                	test   eax,eax
c001c969:	74 0a                	je     c001c975 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c96b:	53                   	push   ebx
c001c96c:	53                   	push   ebx
c001c96d:	50                   	push   eax
c001c96e:	68 cb c0 02 c0       	push   0xc002c0cb
c001c973:	eb 0f                	jmp    c001c984 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c975:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c979:	74 20                	je     c001c99b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c97b:	51                   	push   ecx
c001c97c:	51                   	push   ecx
c001c97d:	6a 00                	push   0x0
c001c97f:	68 f6 c0 02 c0       	push   0xc002c0f6
c001c984:	e8 66 66 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001c989:	89 34 24             	mov    DWORD PTR [esp],esi
c001c98c:	e8 74 56 ff ff       	call   c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c001c991:	83 c4 10             	add    esp,0x10
c001c994:	31 c0                	xor    eax,eax
c001c996:	e9 55 01 00 00       	jmp    c001caf0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c99b:	e8 f2 14 00 00       	call   c001de92 <lockScheduler()>
c001c9a0:	e8 40 35 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001c9a5:	6a 07                	push   0x7
c001c9a7:	89 c5                	mov    ebp,eax
c001c9a9:	56                   	push   esi
c001c9aa:	50                   	push   eax
c001c9ab:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9b0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9b3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9b9:	e8 ae 59 ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c9be:	83 c4 0c             	add    esp,0xc
c001c9c1:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c9c8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ce:	6a 00                	push   0x0
c001c9d0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c9d5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c9d8:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9de:	e8 f3 57 ff ff       	call   c00121d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001c9e3:	58                   	pop    eax
c001c9e4:	5a                   	pop    edx
c001c9e5:	68 07 0c 00 00       	push   0xc07
c001c9ea:	57                   	push   edi
c001c9eb:	81 c7 00 10 00 00    	add    edi,0x1000
c001c9f1:	55                   	push   ebp
c001c9f2:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c9f9:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c9ff:	6a 00                	push   0x0
c001ca01:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca06:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca09:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca0f:	e8 12 5d ff ff       	call   c0012726 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ca14:	83 c4 1c             	add    esp,0x1c
c001ca17:	68 00 10 00 00       	push   0x1000
c001ca1c:	8d 44 24 28          	lea    eax,[esp+0x28]
c001ca20:	50                   	push   eax
c001ca21:	56                   	push   esi
c001ca22:	e8 1d 3d fe ff       	call   c0000744 <memcpy>
c001ca27:	e8 68 14 00 00       	call   c001de94 <unlockScheduler()>
c001ca2c:	83 c4 10             	add    esp,0x10
c001ca2f:	e9 ea fe ff ff       	jmp    c001c91e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001ca34:	89 fb                	mov    ebx,edi
c001ca36:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ca3e:	0f 86 9e 00 00 00    	jbe    c001cae2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001ca44:	e8 49 14 00 00       	call   c001de92 <lockScheduler()>
c001ca49:	51                   	push   ecx
c001ca4a:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001ca51:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca57:	6a 00                	push   0x0
c001ca59:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca5e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca61:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca67:	e8 6a 57 ff ff       	call   c00121d6 <VAS::mapOtherVASIn(bool, VAS*)>
c001ca6c:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ca70:	c1 e7 0c             	shl    edi,0xc
c001ca73:	01 df                	add    edi,ebx
c001ca75:	83 c4 10             	add    esp,0x10
c001ca78:	39 fb                	cmp    ebx,edi
c001ca7a:	74 61                	je     c001cadd <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001ca7c:	e8 64 34 ff ff       	call   c000fee5 <Phys::allocatePage()>
c001ca81:	6a 07                	push   0x7
c001ca83:	89 c5                	mov    ebp,eax
c001ca85:	56                   	push   esi
c001ca86:	50                   	push   eax
c001ca87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ca8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ca8f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ca95:	e8 d2 58 ff ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c001ca9a:	58                   	pop    eax
c001ca9b:	5a                   	pop    edx
c001ca9c:	68 07 0c 00 00       	push   0xc07
c001caa1:	53                   	push   ebx
c001caa2:	81 c3 00 10 00 00    	add    ebx,0x1000
c001caa8:	55                   	push   ebp
c001caa9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cab0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cab6:	6a 00                	push   0x0
c001cab8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cabd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cac0:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cac6:	e8 5b 5c ff ff       	call   c0012726 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cacb:	83 c4 1c             	add    esp,0x1c
c001cace:	68 00 10 00 00       	push   0x1000
c001cad3:	6a 00                	push   0x0
c001cad5:	56                   	push   esi
c001cad6:	e8 9d 3c fe ff       	call   c0000778 <memset>
c001cadb:	eb 98                	jmp    c001ca75 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001cadd:	e8 b2 13 00 00       	call   c001de94 <unlockScheduler()>
c001cae2:	83 ec 0c             	sub    esp,0xc
c001cae5:	56                   	push   esi
c001cae6:	e8 1a 55 ff ff       	call   c0012005 <Virt::freeKernelVirtualPages(unsigned long)>
c001caeb:	83 c4 10             	add    esp,0x10
c001caee:	b0 01                	mov    al,0x1
c001caf0:	81 c4 2c 10 00 00    	add    esp,0x102c
c001caf6:	5b                   	pop    ebx
c001caf7:	5e                   	pop    esi
c001caf8:	5f                   	pop    edi
c001caf9:	5d                   	pop    ebp
c001cafa:	c3                   	ret    

c001cafb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cafb:	55                   	push   ebp
c001cafc:	57                   	push   edi
c001cafd:	56                   	push   esi
c001cafe:	53                   	push   ebx
c001caff:	83 ec 48             	sub    esp,0x48
c001cb02:	68 14 01 00 00       	push   0x114
c001cb07:	e8 37 2d ff ff       	call   c000f843 <malloc>
c001cb0c:	83 c4 0c             	add    esp,0xc
c001cb0f:	89 c6                	mov    esi,eax
c001cb11:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cb15:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cb19:	50                   	push   eax
c001cb1a:	e8 29 6a ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001cb1f:	58                   	pop    eax
c001cb20:	5a                   	pop    edx
c001cb21:	6a 01                	push   0x1
c001cb23:	56                   	push   esi
c001cb24:	e8 83 6a ff ff       	call   c00135ac <File::open(FileOpenMode)>
c001cb29:	83 c4 10             	add    esp,0x10
c001cb2c:	85 c0                	test   eax,eax
c001cb2e:	0f 85 47 01 00 00    	jne    c001cc7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb34:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001cb3c:	83 ec 0c             	sub    esp,0xc
c001cb3f:	6a 34                	push   0x34
c001cb41:	e8 fd 2c ff ff       	call   c000f843 <malloc>
c001cb46:	89 c3                	mov    ebx,eax
c001cb48:	58                   	pop    eax
c001cb49:	8b 06                	mov    eax,DWORD PTR [esi]
c001cb4b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001cb4f:	57                   	push   edi
c001cb50:	53                   	push   ebx
c001cb51:	6a 00                	push   0x0
c001cb53:	6a 34                	push   0x34
c001cb55:	56                   	push   esi
c001cb56:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb59:	83 c4 20             	add    esp,0x20
c001cb5c:	85 c0                	test   eax,eax
c001cb5e:	0f 85 17 01 00 00    	jne    c001cc7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb64:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001cb6a:	0f 85 0b 01 00 00    	jne    c001cc7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb70:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001cb73:	85 c0                	test   eax,eax
c001cb75:	0f 84 00 01 00 00    	je     c001cc7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb7b:	31 d2                	xor    edx,edx
c001cb7d:	55                   	push   ebp
c001cb7e:	52                   	push   edx
c001cb7f:	50                   	push   eax
c001cb80:	56                   	push   esi
c001cb81:	e8 e4 6a ff ff       	call   c001366a <File::seek(unsigned long long)>
c001cb86:	83 c4 10             	add    esp,0x10
c001cb89:	85 c0                	test   eax,eax
c001cb8b:	0f 85 ea 00 00 00    	jne    c001cc7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cb91:	83 ec 0c             	sub    esp,0xc
c001cb94:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001cb97:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cb9b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cb9f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cba3:	0f af c2             	imul   eax,edx
c001cba6:	50                   	push   eax
c001cba7:	e8 97 2c ff ff       	call   c000f843 <malloc>
c001cbac:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cbae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cbb2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cbb5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cbb9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001cbbd:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001cbc1:	0f af c2             	imul   eax,edx
c001cbc4:	99                   	cdq    
c001cbc5:	52                   	push   edx
c001cbc6:	50                   	push   eax
c001cbc7:	56                   	push   esi
c001cbc8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cbcb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001cbce:	83 c4 20             	add    esp,0x20
c001cbd1:	85 c0                	test   eax,eax
c001cbd3:	0f 84 a2 00 00 00    	je     c001cc7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbd9:	31 d2                	xor    edx,edx
c001cbdb:	51                   	push   ecx
c001cbdc:	52                   	push   edx
c001cbdd:	50                   	push   eax
c001cbde:	56                   	push   esi
c001cbdf:	e8 86 6a ff ff       	call   c001366a <File::seek(unsigned long long)>
c001cbe4:	83 c4 10             	add    esp,0x10
c001cbe7:	85 c0                	test   eax,eax
c001cbe9:	0f 85 8c 00 00 00    	jne    c001cc7b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cbef:	83 ec 0c             	sub    esp,0xc
c001cbf2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cbf6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cbfa:	31 ed                	xor    ebp,ebp
c001cbfc:	0f af c2             	imul   eax,edx
c001cbff:	50                   	push   eax
c001cc00:	e8 3e 2c ff ff       	call   c000f843 <malloc>
c001cc05:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cc07:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cc0b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cc12:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cc16:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cc1a:	0f af c2             	imul   eax,edx
c001cc1d:	99                   	cdq    
c001cc1e:	52                   	push   edx
c001cc1f:	50                   	push   eax
c001cc20:	56                   	push   esi
c001cc21:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc24:	83 c4 20             	add    esp,0x20
c001cc27:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cc2f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cc33:	0f 86 80 00 00 00    	jbe    c001ccb9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cc39:	0f b7 fd             	movzx  edi,bp
c001cc3c:	c1 e7 05             	shl    edi,0x5
c001cc3f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cc43:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cc46:	75 6b                	jne    c001ccb3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cc48:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cc4b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cc4f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cc52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc56:	52                   	push   edx
c001cc57:	31 d2                	xor    edx,edx
c001cc59:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cc5c:	52                   	push   edx
c001cc5d:	50                   	push   eax
c001cc5e:	56                   	push   esi
c001cc5f:	e8 06 6a ff ff       	call   c001366a <File::seek(unsigned long long)>
c001cc64:	83 c4 10             	add    esp,0x10
c001cc67:	85 c0                	test   eax,eax
c001cc69:	74 17                	je     c001cc82 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cc6b:	83 ec 0c             	sub    esp,0xc
c001cc6e:	68 22 c1 02 c0       	push   0xc002c122
c001cc73:	e8 77 63 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001cc78:	83 c4 10             	add    esp,0x10
c001cc7b:	31 c0                	xor    eax,eax
c001cc7d:	e9 87 00 00 00       	jmp    c001cd09 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cc82:	83 ec 0c             	sub    esp,0xc
c001cc85:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cc88:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cc8b:	50                   	push   eax
c001cc8c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cc90:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cc94:	56                   	push   esi
c001cc95:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cc99:	e8 cb fb ff ff       	call   c001c869 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cc9e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cca2:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cca6:	83 c4 20             	add    esp,0x20
c001cca9:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001ccad:	73 04                	jae    c001ccb3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001ccaf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ccb3:	45                   	inc    ebp
c001ccb4:	e9 76 ff ff ff       	jmp    c001cc2f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001ccb9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001ccbd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ccc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ccc5:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cccb:	83 ec 0c             	sub    esp,0xc
c001ccce:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001ccd4:	25 00 f0 ff ff       	and    eax,0xfffff000
c001ccd9:	05 00 10 00 00       	add    eax,0x1000
c001ccde:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cce1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cce5:	e8 69 2b ff ff       	call   c000f853 <free>
c001ccea:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cced:	e8 61 2b ff ff       	call   c000f853 <free>
c001ccf2:	58                   	pop    eax
c001ccf3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ccf7:	e8 57 2b ff ff       	call   c000f853 <free>
c001ccfc:	89 34 24             	mov    DWORD PTR [esp],esi
c001ccff:	e8 06 69 ff ff       	call   c001360a <File::close()>
c001cd04:	83 c4 10             	add    esp,0x10
c001cd07:	b0 01                	mov    al,0x1
c001cd09:	83 c4 3c             	add    esp,0x3c
c001cd0c:	5b                   	pop    ebx
c001cd0d:	5e                   	pop    esi
c001cd0e:	5f                   	pop    edi
c001cd0f:	5d                   	pop    ebp
c001cd10:	c3                   	ret    

c001cd11 <Thr::runtimeReferenceHelper()>:
c001cd11:	83 ec 18             	sub    esp,0x18
c001cd14:	68 2a c1 02 c0       	push   0xc002c12a
c001cd19:	e8 d1 62 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001cd1e:	fa                   	cli    
c001cd1f:	83 c4 10             	add    esp,0x10
c001cd22:	eb fe                	jmp    c001cd22 <Thr::runtimeReferenceHelper()+0x11>

c001cd24 <Thr::getAddressOfKernelSymbol(char const*)>:
c001cd24:	57                   	push   edi
c001cd25:	56                   	push   esi
c001cd26:	53                   	push   ebx
c001cd27:	31 db                	xor    ebx,ebx
c001cd29:	39 1d 40 1a 03 c0    	cmp    DWORD PTR ds:0xc0031a40,ebx
c001cd2f:	7e 3c                	jle    c001cd6d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cd31:	8b 34 9d c0 19 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffce640]
c001cd38:	31 ff                	xor    edi,edi
c001cd3a:	39 3c 9d c0 18 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffce740],edi
c001cd41:	7e 27                	jle    c001cd6a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001cd43:	50                   	push   eax
c001cd44:	50                   	push   eax
c001cd45:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cd49:	8b 06                	mov    eax,DWORD PTR [esi]
c001cd4b:	03 04 9d 40 19 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffce6c0]
c001cd52:	50                   	push   eax
c001cd53:	e8 68 3b fe ff       	call   c00008c0 <strcmp>
c001cd58:	83 c4 10             	add    esp,0x10
c001cd5b:	85 c0                	test   eax,eax
c001cd5d:	75 05                	jne    c001cd64 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001cd5f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001cd62:	eb 0b                	jmp    c001cd6f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001cd64:	83 c6 10             	add    esi,0x10
c001cd67:	47                   	inc    edi
c001cd68:	eb d0                	jmp    c001cd3a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001cd6a:	43                   	inc    ebx
c001cd6b:	eb bc                	jmp    c001cd29 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001cd6d:	31 c0                	xor    eax,eax
c001cd6f:	5b                   	pop    ebx
c001cd70:	5e                   	pop    esi
c001cd71:	5f                   	pop    edi
c001cd72:	c3                   	ret    

c001cd73 <Thr::loadKernelSymbolTable(char const*)>:
c001cd73:	55                   	push   ebp
c001cd74:	57                   	push   edi
c001cd75:	56                   	push   esi
c001cd76:	53                   	push   ebx
c001cd77:	83 ec 68             	sub    esp,0x68
c001cd7a:	8b 35 94 1a 03 c0    	mov    esi,DWORD PTR ds:0xc0031a94
c001cd80:	68 14 01 00 00       	push   0x114
c001cd85:	e8 b9 2a ff ff       	call   c000f843 <malloc>
c001cd8a:	83 c4 0c             	add    esp,0xc
c001cd8d:	89 c3                	mov    ebx,eax
c001cd8f:	56                   	push   esi
c001cd90:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001cd94:	50                   	push   eax
c001cd95:	e8 ae 67 ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001cd9a:	5e                   	pop    esi
c001cd9b:	5f                   	pop    edi
c001cd9c:	6a 01                	push   0x1
c001cd9e:	53                   	push   ebx
c001cd9f:	e8 08 68 ff ff       	call   c00135ac <File::open(FileOpenMode)>
c001cda4:	83 c4 10             	add    esp,0x10
c001cda7:	85 c0                	test   eax,eax
c001cda9:	74 0a                	je     c001cdb5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001cdab:	83 ec 0c             	sub    esp,0xc
c001cdae:	68 4c c1 02 c0       	push   0xc002c14c
c001cdb3:	eb 34                	jmp    c001cde9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001cdb5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001cdbd:	83 ec 0c             	sub    esp,0xc
c001cdc0:	6a 34                	push   0x34
c001cdc2:	e8 7c 2a ff ff       	call   c000f843 <malloc>
c001cdc7:	59                   	pop    ecx
c001cdc8:	89 c7                	mov    edi,eax
c001cdca:	8d 74 24 34          	lea    esi,[esp+0x34]
c001cdce:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cdd0:	56                   	push   esi
c001cdd1:	57                   	push   edi
c001cdd2:	6a 00                	push   0x0
c001cdd4:	6a 34                	push   0x34
c001cdd6:	53                   	push   ebx
c001cdd7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cdda:	83 c4 20             	add    esp,0x20
c001cddd:	85 c0                	test   eax,eax
c001cddf:	74 17                	je     c001cdf8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001cde1:	83 ec 0c             	sub    esp,0xc
c001cde4:	68 63 c1 02 c0       	push   0xc002c163
c001cde9:	e8 af d8 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001cdee:	83 c4 10             	add    esp,0x10
c001cdf1:	31 c0                	xor    eax,eax
c001cdf3:	e9 31 02 00 00       	jmp    c001d029 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001cdf8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cdfe:	75 e1                	jne    c001cde1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce00:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001ce03:	85 c0                	test   eax,eax
c001ce05:	74 da                	je     c001cde1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce07:	52                   	push   edx
c001ce08:	31 d2                	xor    edx,edx
c001ce0a:	52                   	push   edx
c001ce0b:	50                   	push   eax
c001ce0c:	53                   	push   ebx
c001ce0d:	e8 58 68 ff ff       	call   c001366a <File::seek(unsigned long long)>
c001ce12:	83 c4 10             	add    esp,0x10
c001ce15:	85 c0                	test   eax,eax
c001ce17:	75 c8                	jne    c001cde1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001ce19:	83 ec 0c             	sub    esp,0xc
c001ce1c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce20:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce24:	31 ed                	xor    ebp,ebp
c001ce26:	0f af c2             	imul   eax,edx
c001ce29:	50                   	push   eax
c001ce2a:	e8 14 2a ff ff       	call   c000f843 <malloc>
c001ce2f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001ce31:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce35:	89 34 24             	mov    DWORD PTR [esp],esi
c001ce38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ce3c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001ce40:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001ce44:	0f af c2             	imul   eax,edx
c001ce47:	99                   	cdq    
c001ce48:	52                   	push   edx
c001ce49:	50                   	push   eax
c001ce4a:	53                   	push   ebx
c001ce4b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce4e:	83 c4 20             	add    esp,0x20
c001ce51:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001ce59:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ce61:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ce69:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ce71:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ce75:	0f 86 aa 00 00 00    	jbe    c001cf25 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ce7b:	0f b7 f5             	movzx  esi,bp
c001ce7e:	6b f6 28             	imul   esi,esi,0x28
c001ce81:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce85:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce88:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ce8c:	50                   	push   eax
c001ce8d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce91:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ce95:	8b 16                	mov    edx,DWORD PTR [esi]
c001ce97:	6b c0 28             	imul   eax,eax,0x28
c001ce9a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ce9e:	89 d0                	mov    eax,edx
c001cea0:	31 d2                	xor    edx,edx
c001cea2:	52                   	push   edx
c001cea3:	50                   	push   eax
c001cea4:	53                   	push   ebx
c001cea5:	e8 c0 67 ff ff       	call   c001366a <File::seek(unsigned long long)>
c001ceaa:	83 c4 0c             	add    esp,0xc
c001cead:	6a 20                	push   0x20
c001ceaf:	6a 00                	push   0x0
c001ceb1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ceb5:	52                   	push   edx
c001ceb6:	e8 bd 38 fe ff       	call   c0000778 <memset>
c001cebb:	58                   	pop    eax
c001cebc:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cebe:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001cec2:	51                   	push   ecx
c001cec3:	8d 54 24 40          	lea    edx,[esp+0x40]
c001cec7:	52                   	push   edx
c001cec8:	6a 00                	push   0x0
c001ceca:	6a 1f                	push   0x1f
c001cecc:	53                   	push   ebx
c001cecd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ced0:	83 c4 18             	add    esp,0x18
c001ced3:	68 7a c1 02 c0       	push   0xc002c17a
c001ced8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001cedc:	52                   	push   edx
c001cedd:	e8 de 39 fe ff       	call   c00008c0 <strcmp>
c001cee2:	83 c4 10             	add    esp,0x10
c001cee5:	85 c0                	test   eax,eax
c001cee7:	75 0f                	jne    c001cef8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001cee9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ceec:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cef0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cef8:	50                   	push   eax
c001cef9:	50                   	push   eax
c001cefa:	68 82 c1 02 c0       	push   0xc002c182
c001ceff:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001cf03:	50                   	push   eax
c001cf04:	e8 b7 39 fe ff       	call   c00008c0 <strcmp>
c001cf09:	83 c4 10             	add    esp,0x10
c001cf0c:	85 c0                	test   eax,eax
c001cf0e:	75 0f                	jne    c001cf1f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001cf10:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf17:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cf1b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cf1f:	45                   	inc    ebp
c001cf20:	e9 4c ff ff ff       	jmp    c001ce71 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cf25:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cf2a:	75 10                	jne    c001cf3c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cf2c:	83 ec 0c             	sub    esp,0xc
c001cf2f:	68 8a c1 02 c0       	push   0xc002c18a
c001cf34:	e8 64 d7 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001cf39:	83 c4 10             	add    esp,0x10
c001cf3c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cf41:	75 10                	jne    c001cf53 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cf43:	83 ec 0c             	sub    esp,0xc
c001cf46:	68 8a c1 02 c0       	push   0xc002c18a
c001cf4b:	e8 4d d7 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001cf50:	83 c4 10             	add    esp,0x10
c001cf53:	31 d2                	xor    edx,edx
c001cf55:	50                   	push   eax
c001cf56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cf5a:	52                   	push   edx
c001cf5b:	50                   	push   eax
c001cf5c:	53                   	push   ebx
c001cf5d:	e8 08 67 ff ff       	call   c001366a <File::seek(unsigned long long)>
c001cf62:	5a                   	pop    edx
c001cf63:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cf67:	e8 d7 28 ff ff       	call   c000f843 <malloc>
c001cf6c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cf70:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cf74:	31 c9                	xor    ecx,ecx
c001cf76:	5e                   	pop    esi
c001cf77:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cf79:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cf7d:	55                   	push   ebp
c001cf7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cf82:	51                   	push   ecx
c001cf83:	52                   	push   edx
c001cf84:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cf88:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cf8c:	53                   	push   ebx
c001cf8d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cf90:	83 c4 14             	add    esp,0x14
c001cf93:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf97:	e8 a7 28 ff ff       	call   c000f843 <malloc>
c001cf9c:	89 c6                	mov    esi,eax
c001cf9e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cfa0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfa3:	56                   	push   esi
c001cfa4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cfa8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cfac:	51                   	push   ecx
c001cfad:	52                   	push   edx
c001cfae:	53                   	push   ebx
c001cfaf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cfb2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cfb6:	8b 15 40 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031a40
c001cfbc:	83 c4 1c             	add    esp,0x1c
c001cfbf:	c1 e8 04             	shr    eax,0x4
c001cfc2:	89 04 95 c0 18 03 c0 	mov    DWORD PTR [edx*4-0x3ffce740],eax
c001cfc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cfcd:	31 d2                	xor    edx,edx
c001cfcf:	52                   	push   edx
c001cfd0:	50                   	push   eax
c001cfd1:	53                   	push   ebx
c001cfd2:	e8 93 66 ff ff       	call   c001366a <File::seek(unsigned long long)>
c001cfd7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cfd9:	31 d2                	xor    edx,edx
c001cfdb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cfde:	56                   	push   esi
c001cfdf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cfe3:	52                   	push   edx
c001cfe4:	50                   	push   eax
c001cfe5:	53                   	push   ebx
c001cfe6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cfe9:	83 c4 14             	add    esp,0x14
c001cfec:	53                   	push   ebx
c001cfed:	e8 18 66 ff ff       	call   c001360a <File::close()>
c001cff2:	5d                   	pop    ebp
c001cff3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cff7:	e8 57 28 ff ff       	call   c000f853 <free>
c001cffc:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cfff:	e8 4f 28 ff ff       	call   c000f853 <free>
c001d004:	a1 40 1a 03 c0       	mov    eax,ds:0xc0031a40
c001d009:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d00d:	8d 50 01             	lea    edx,[eax+0x1]
c001d010:	89 0c 85 c0 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce640],ecx
c001d017:	89 34 85 40 19 03 c0 	mov    DWORD PTR [eax*4-0x3ffce6c0],esi
c001d01e:	89 15 40 1a 03 c0    	mov    DWORD PTR ds:0xc0031a40,edx
c001d024:	83 c4 10             	add    esp,0x10
c001d027:	b0 01                	mov    al,0x1
c001d029:	83 c4 5c             	add    esp,0x5c
c001d02c:	5b                   	pop    ebx
c001d02d:	5e                   	pop    esi
c001d02e:	5f                   	pop    edi
c001d02f:	5d                   	pop    ebp
c001d030:	c3                   	ret    

c001d031 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d031:	55                   	push   ebp
c001d032:	57                   	push   edi
c001d033:	56                   	push   esi
c001d034:	53                   	push   ebx
c001d035:	81 ec 68 03 00 00    	sub    esp,0x368
c001d03b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d042:	8b 1d 94 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031a94
c001d048:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d04c:	68 14 01 00 00       	push   0x114
c001d051:	e8 ed 27 ff ff       	call   c000f843 <malloc>
c001d056:	83 c4 0c             	add    esp,0xc
c001d059:	89 c5                	mov    ebp,eax
c001d05b:	53                   	push   ebx
c001d05c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d063:	50                   	push   eax
c001d064:	e8 df 64 ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001d069:	5e                   	pop    esi
c001d06a:	5f                   	pop    edi
c001d06b:	6a 01                	push   0x1
c001d06d:	55                   	push   ebp
c001d06e:	e8 39 65 ff ff       	call   c00135ac <File::open(FileOpenMode)>
c001d073:	83 c4 10             	add    esp,0x10
c001d076:	85 c0                	test   eax,eax
c001d078:	0f 85 8d 06 00 00    	jne    c001d70b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d07e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d086:	83 ec 0c             	sub    esp,0xc
c001d089:	6a 34                	push   0x34
c001d08b:	e8 b3 27 ff ff       	call   c000f843 <malloc>
c001d090:	5b                   	pop    ebx
c001d091:	89 c7                	mov    edi,eax
c001d093:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d097:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d09a:	53                   	push   ebx
c001d09b:	57                   	push   edi
c001d09c:	6a 00                	push   0x0
c001d09e:	6a 34                	push   0x34
c001d0a0:	55                   	push   ebp
c001d0a1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0a4:	83 c4 20             	add    esp,0x20
c001d0a7:	85 c0                	test   eax,eax
c001d0a9:	0f 85 5c 06 00 00    	jne    c001d70b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0af:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0b5:	0f 85 50 06 00 00    	jne    c001d70b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0bb:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0be:	85 c0                	test   eax,eax
c001d0c0:	0f 84 45 06 00 00    	je     c001d70b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0c6:	31 d2                	xor    edx,edx
c001d0c8:	51                   	push   ecx
c001d0c9:	52                   	push   edx
c001d0ca:	50                   	push   eax
c001d0cb:	55                   	push   ebp
c001d0cc:	e8 99 65 ff ff       	call   c001366a <File::seek(unsigned long long)>
c001d0d1:	83 c4 10             	add    esp,0x10
c001d0d4:	85 c0                	test   eax,eax
c001d0d6:	0f 85 2f 06 00 00    	jne    c001d70b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d0dc:	83 ec 0c             	sub    esp,0xc
c001d0df:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d0e2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0e6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d0ea:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0ee:	0f af c2             	imul   eax,edx
c001d0f1:	50                   	push   eax
c001d0f2:	e8 4c 27 ff ff       	call   c000f843 <malloc>
c001d0f7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d0fa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0fe:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d101:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d105:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d109:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d10d:	0f af c2             	imul   eax,edx
c001d110:	99                   	cdq    
c001d111:	52                   	push   edx
c001d112:	50                   	push   eax
c001d113:	55                   	push   ebp
c001d114:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d117:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d11a:	83 c4 20             	add    esp,0x20
c001d11d:	85 c0                	test   eax,eax
c001d11f:	0f 84 e6 05 00 00    	je     c001d70b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d125:	52                   	push   edx
c001d126:	31 d2                	xor    edx,edx
c001d128:	52                   	push   edx
c001d129:	50                   	push   eax
c001d12a:	55                   	push   ebp
c001d12b:	e8 3a 65 ff ff       	call   c001366a <File::seek(unsigned long long)>
c001d130:	83 c4 10             	add    esp,0x10
c001d133:	85 c0                	test   eax,eax
c001d135:	0f 85 d0 05 00 00    	jne    c001d70b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d13b:	83 ec 0c             	sub    esp,0xc
c001d13e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d142:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d146:	31 f6                	xor    esi,esi
c001d148:	0f af c2             	imul   eax,edx
c001d14b:	50                   	push   eax
c001d14c:	e8 f2 26 ff ff       	call   c000f843 <malloc>
c001d151:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d154:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d158:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d15b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d15f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d163:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d167:	0f af c2             	imul   eax,edx
c001d16a:	99                   	cdq    
c001d16b:	52                   	push   edx
c001d16c:	50                   	push   eax
c001d16d:	55                   	push   ebp
c001d16e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d171:	83 c4 20             	add    esp,0x20
c001d174:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d178:	0f 86 8a 00 00 00    	jbe    c001d208 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d17e:	0f b7 de             	movzx  ebx,si
c001d181:	c1 e3 05             	shl    ebx,0x5
c001d184:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d188:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d18b:	75 75                	jne    c001d202 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d18d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d190:	31 d2                	xor    edx,edx
c001d192:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d196:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d199:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d19d:	50                   	push   eax
c001d19e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d1a1:	52                   	push   edx
c001d1a2:	50                   	push   eax
c001d1a3:	55                   	push   ebp
c001d1a4:	e8 c1 64 ff ff       	call   c001366a <File::seek(unsigned long long)>
c001d1a9:	83 c4 10             	add    esp,0x10
c001d1ac:	85 c0                	test   eax,eax
c001d1ae:	0f 85 57 05 00 00    	jne    c001d70b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d1b4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d1bb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d1be:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d1c2:	31 d2                	xor    edx,edx
c001d1c4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d1c8:	83 ec 0c             	sub    esp,0xc
c001d1cb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1cf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d1d6:	50                   	push   eax
c001d1d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d1db:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d1df:	52                   	push   edx
c001d1e0:	50                   	push   eax
c001d1e1:	55                   	push   ebp
c001d1e2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d1e5:	83 c4 1c             	add    esp,0x1c
c001d1e8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d1eb:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d1ee:	50                   	push   eax
c001d1ef:	6a 00                	push   0x0
c001d1f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d1f5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d1f9:	50                   	push   eax
c001d1fa:	e8 79 35 fe ff       	call   c0000778 <memset>
c001d1ff:	83 c4 10             	add    esp,0x10
c001d202:	46                   	inc    esi
c001d203:	e9 6c ff ff ff       	jmp    c001d174 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d208:	53                   	push   ebx
c001d209:	31 db                	xor    ebx,ebx
c001d20b:	68 00 01 00 00       	push   0x100
c001d210:	6a 00                	push   0x0
c001d212:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d216:	50                   	push   eax
c001d217:	e8 5c 35 fe ff       	call   c0000778 <memset>
c001d21c:	83 c4 0c             	add    esp,0xc
c001d21f:	68 00 01 00 00       	push   0x100
c001d224:	6a 00                	push   0x0
c001d226:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d22d:	50                   	push   eax
c001d22e:	e8 45 35 fe ff       	call   c0000778 <memset>
c001d233:	83 c4 10             	add    esp,0x10
c001d236:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d23e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d246:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d24e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d256:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d25e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d262:	0f 86 30 01 00 00    	jbe    c001d398 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d268:	0f b7 f3             	movzx  esi,bx
c001d26b:	6b f6 28             	imul   esi,esi,0x28
c001d26e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d272:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d275:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d279:	52                   	push   edx
c001d27a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d27e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d282:	8b 06                	mov    eax,DWORD PTR [esi]
c001d284:	6b d2 28             	imul   edx,edx,0x28
c001d287:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d28b:	31 d2                	xor    edx,edx
c001d28d:	52                   	push   edx
c001d28e:	50                   	push   eax
c001d28f:	55                   	push   ebp
c001d290:	e8 d5 63 ff ff       	call   c001366a <File::seek(unsigned long long)>
c001d295:	83 c4 0c             	add    esp,0xc
c001d298:	6a 20                	push   0x20
c001d29a:	6a 00                	push   0x0
c001d29c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2a3:	51                   	push   ecx
c001d2a4:	e8 cf 34 fe ff       	call   c0000778 <memset>
c001d2a9:	59                   	pop    ecx
c001d2aa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2ad:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d2b1:	52                   	push   edx
c001d2b2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d2b9:	51                   	push   ecx
c001d2ba:	6a 00                	push   0x0
c001d2bc:	6a 1f                	push   0x1f
c001d2be:	55                   	push   ebp
c001d2bf:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d2c2:	83 c4 1c             	add    esp,0x1c
c001d2c5:	6a 09                	push   0x9
c001d2c7:	68 a4 c1 02 c0       	push   0xc002c1a4
c001d2cc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d2d3:	51                   	push   ecx
c001d2d4:	e8 67 33 fe ff       	call   c0000640 <memcmp>
c001d2d9:	83 c4 10             	add    esp,0x10
c001d2dc:	85 c0                	test   eax,eax
c001d2de:	75 21                	jne    c001d301 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d2e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d2e4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d2e8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d2ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d2f0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d2f3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d2fa:	89 d0                	mov    eax,edx
c001d2fc:	40                   	inc    eax
c001d2fd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d301:	50                   	push   eax
c001d302:	6a 09                	push   0x9
c001d304:	68 ae c1 02 c0       	push   0xc002c1ae
c001d309:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d310:	50                   	push   eax
c001d311:	e8 2a 33 fe ff       	call   c0000640 <memcmp>
c001d316:	83 c4 10             	add    esp,0x10
c001d319:	85 c0                	test   eax,eax
c001d31b:	75 21                	jne    c001d33e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d31d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d321:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d325:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d329:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d32d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d330:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d337:	89 d0                	mov    eax,edx
c001d339:	40                   	inc    eax
c001d33a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d33e:	50                   	push   eax
c001d33f:	50                   	push   eax
c001d340:	68 7a c1 02 c0       	push   0xc002c17a
c001d345:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d34c:	50                   	push   eax
c001d34d:	e8 6e 35 fe ff       	call   c00008c0 <strcmp>
c001d352:	83 c4 10             	add    esp,0x10
c001d355:	85 c0                	test   eax,eax
c001d357:	75 0f                	jne    c001d368 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d359:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d35c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d360:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d364:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d368:	50                   	push   eax
c001d369:	50                   	push   eax
c001d36a:	68 82 c1 02 c0       	push   0xc002c182
c001d36f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d376:	50                   	push   eax
c001d377:	e8 44 35 fe ff       	call   c00008c0 <strcmp>
c001d37c:	83 c4 10             	add    esp,0x10
c001d37f:	85 c0                	test   eax,eax
c001d381:	75 0f                	jne    c001d392 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d383:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d386:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d38a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d38e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d392:	43                   	inc    ebx
c001d393:	e9 c6 fe ff ff       	jmp    c001d25e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d398:	31 d2                	xor    edx,edx
c001d39a:	50                   	push   eax
c001d39b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d39f:	52                   	push   edx
c001d3a0:	50                   	push   eax
c001d3a1:	55                   	push   ebp
c001d3a2:	e8 c3 62 ff ff       	call   c001366a <File::seek(unsigned long long)>
c001d3a7:	58                   	pop    eax
c001d3a8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d3ac:	e8 92 24 ff ff       	call   c000f843 <malloc>
c001d3b1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3b4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d3b8:	31 d2                	xor    edx,edx
c001d3ba:	58                   	pop    eax
c001d3bb:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d3bf:	53                   	push   ebx
c001d3c0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d3c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3c8:	52                   	push   edx
c001d3c9:	50                   	push   eax
c001d3ca:	55                   	push   ebp
c001d3cb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3ce:	83 c4 14             	add    esp,0x14
c001d3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d3d5:	e8 69 24 ff ff       	call   c000f843 <malloc>
c001d3da:	31 d2                	xor    edx,edx
c001d3dc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d3e0:	83 c4 0c             	add    esp,0xc
c001d3e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d3e7:	52                   	push   edx
c001d3e8:	50                   	push   eax
c001d3e9:	55                   	push   ebp
c001d3ea:	e8 7b 62 ff ff       	call   c001366a <File::seek(unsigned long long)>
c001d3ef:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3f2:	31 d2                	xor    edx,edx
c001d3f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3f7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d3fb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d3ff:	52                   	push   edx
c001d400:	50                   	push   eax
c001d401:	55                   	push   ebp
c001d402:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d405:	83 c4 20             	add    esp,0x20
c001d408:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d410:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d414:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d418:	0f 84 f1 02 00 00    	je     c001d70f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001d41e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d425:	31 d2                	xor    edx,edx
c001d427:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d42b:	c1 e8 03             	shr    eax,0x3
c001d42e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d432:	51                   	push   ecx
c001d433:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d437:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d43b:	52                   	push   edx
c001d43c:	50                   	push   eax
c001d43d:	55                   	push   ebp
c001d43e:	e8 27 62 ff ff       	call   c001366a <File::seek(unsigned long long)>
c001d443:	5b                   	pop    ebx
c001d444:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d448:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d44f:	e8 ef 23 ff ff       	call   c000f843 <malloc>
c001d454:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d457:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d45b:	31 d2                	xor    edx,edx
c001d45d:	5e                   	pop    esi
c001d45e:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d462:	50                   	push   eax
c001d463:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d467:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d46b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d472:	52                   	push   edx
c001d473:	50                   	push   eax
c001d474:	55                   	push   ebp
c001d475:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d478:	83 c4 20             	add    esp,0x20
c001d47b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d483:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d487:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d48b:	0f 8d 62 02 00 00    	jge    c001d6f3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d491:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d495:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d499:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d49e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d4a1:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d4a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d4a9:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d4ad:	89 d8                	mov    eax,ebx
c001d4af:	c1 e8 08             	shr    eax,0x8
c001d4b2:	89 c6                	mov    esi,eax
c001d4b4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d4b8:	c1 e6 04             	shl    esi,0x4
c001d4bb:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d4bf:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d4c2:	85 d2                	test   edx,edx
c001d4c4:	0f 85 bf 00 00 00    	jne    c001d589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4ca:	83 ec 0c             	sub    esp,0xc
c001d4cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4d1:	03 06                	add    eax,DWORD PTR [esi]
c001d4d3:	50                   	push   eax
c001d4d4:	e8 4b f8 ff ff       	call   c001cd24 <Thr::getAddressOfKernelSymbol(char const*)>
c001d4d9:	83 c4 10             	add    esp,0x10
c001d4dc:	89 c2                	mov    edx,eax
c001d4de:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d4e3:	85 c0                	test   eax,eax
c001d4e5:	0f 85 9e 00 00 00    	jne    c001d589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d4eb:	83 ec 0c             	sub    esp,0xc
c001d4ee:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d4f2:	03 06                	add    eax,DWORD PTR [esi]
c001d4f4:	50                   	push   eax
c001d4f5:	e8 fb 0f ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d4fa:	83 c4 10             	add    esp,0x10
c001d4fd:	89 c2                	mov    edx,eax
c001d4ff:	85 c0                	test   eax,eax
c001d501:	0f 85 82 00 00 00    	jne    c001d589 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d507:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d50b:	50                   	push   eax
c001d50c:	50                   	push   eax
c001d50d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d511:	03 06                	add    eax,DWORD PTR [esi]
c001d513:	50                   	push   eax
c001d514:	68 b8 c1 02 c0       	push   0xc002c1b8
c001d519:	e8 d1 5a ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001d51e:	58                   	pop    eax
c001d51f:	5a                   	pop    edx
c001d520:	68 d2 c1 02 c0       	push   0xc002c1d2
c001d525:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d52c:	50                   	push   eax
c001d52d:	e8 02 33 fe ff       	call   c0000834 <strcpy>
c001d532:	59                   	pop    ecx
c001d533:	58                   	pop    eax
c001d534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d538:	03 06                	add    eax,DWORD PTR [esi]
c001d53a:	50                   	push   eax
c001d53b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d542:	50                   	push   eax
c001d543:	e8 2c 34 fe ff       	call   c0000974 <strcat>
c001d548:	58                   	pop    eax
c001d549:	5a                   	pop    edx
c001d54a:	68 68 c2 02 c0       	push   0xc002c268
c001d54f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d556:	50                   	push   eax
c001d557:	e8 18 34 fe ff       	call   c0000974 <strcat>
c001d55c:	83 c4 10             	add    esp,0x10
c001d55f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d564:	0f 84 43 01 00 00    	je     c001d6ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d56a:	83 ec 0c             	sub    esp,0xc
c001d56d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d574:	50                   	push   eax
c001d575:	e8 23 d1 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001d57a:	83 c4 10             	add    esp,0x10
c001d57d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d581:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d585:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d589:	80 fb 01             	cmp    bl,0x1
c001d58c:	75 7d                	jne    c001d60b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d58e:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d595:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d599:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d59d:	01 ce                	add    esi,ecx
c001d59f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d5a5:	0f 94 c0             	sete   al
c001d5a8:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d5ae:	0f 94 c3             	sete   bl
c001d5b1:	09 c3                	or     ebx,eax
c001d5b3:	8b 06                	mov    eax,DWORD PTR [esi]
c001d5b5:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d5ba:	74 36                	je     c001d5f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d5bc:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d5bf:	84 db                	test   bl,bl
c001d5c1:	75 0a                	jne    c001d5cd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d5c3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5c7:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d5cb:	76 37                	jbe    c001d604 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5cd:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d5d1:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d5d6:	0f 84 d1 00 00 00    	je     c001d6ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d5dc:	83 ec 0c             	sub    esp,0xc
c001d5df:	68 e9 c1 02 c0       	push   0xc002c1e9
c001d5e4:	e8 b4 d0 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001d5e9:	83 c4 10             	add    esp,0x10
c001d5ec:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d5f0:	eb 12                	jmp    c001d604 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5f2:	01 c1                	add    ecx,eax
c001d5f4:	84 db                	test   bl,bl
c001d5f6:	75 0c                	jne    c001d604 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d5f8:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d5fc:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d600:	77 02                	ja     c001d604 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d602:	01 d1                	add    ecx,edx
c001d604:	89 0e                	mov    DWORD PTR [esi],ecx
c001d606:	e9 df 00 00 00       	jmp    c001d6ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d60b:	80 fb 02             	cmp    bl,0x2
c001d60e:	75 71                	jne    c001d681 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d610:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d617:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d61b:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d61f:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d625:	74 15                	je     c001d63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d627:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d62d:	74 0d                	je     c001d63c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d62f:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d633:	83 e8 04             	sub    eax,0x4
c001d636:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d63a:	76 1f                	jbe    c001d65b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d63c:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d640:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d645:	74 66                	je     c001d6ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d647:	83 ec 0c             	sub    esp,0xc
c001d64a:	68 05 c2 02 c0       	push   0xc002c205
c001d64f:	e8 49 d0 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001d654:	83 c4 10             	add    esp,0x10
c001d657:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d65b:	8b 06                	mov    eax,DWORD PTR [esi]
c001d65d:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d662:	74 13                	je     c001d677 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d664:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d668:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d66f:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d673:	01 c8                	add    eax,ecx
c001d675:	eb 04                	jmp    c001d67b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d677:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d67b:	01 c2                	add    edx,eax
c001d67d:	89 16                	mov    DWORD PTR [esi],edx
c001d67f:	eb 69                	jmp    c001d6ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d681:	0f b6 db             	movzx  ebx,bl
c001d684:	50                   	push   eax
c001d685:	50                   	push   eax
c001d686:	53                   	push   ebx
c001d687:	68 21 c2 02 c0       	push   0xc002c221
c001d68c:	e8 5e 59 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001d691:	83 c4 10             	add    esp,0x10
c001d694:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d699:	74 12                	je     c001d6ad <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d69b:	83 ec 0c             	sub    esp,0xc
c001d69e:	68 2c c2 02 c0       	push   0xc002c22c
c001d6a3:	e8 f5 cf ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001d6a8:	83 c4 10             	add    esp,0x10
c001d6ab:	eb 3d                	jmp    c001d6ea <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d6ad:	83 ec 0c             	sub    esp,0xc
c001d6b0:	55                   	push   ebp
c001d6b1:	e8 54 5f ff ff       	call   c001360a <File::close()>
c001d6b6:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d6b9:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d6bc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d6bf:	59                   	pop    ecx
c001d6c0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6c4:	e8 8a 21 ff ff       	call   c000f853 <free>
c001d6c9:	5b                   	pop    ebx
c001d6ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6ce:	e8 80 21 ff ff       	call   c000f853 <free>
c001d6d3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d6d6:	e8 78 21 ff ff       	call   c000f853 <free>
c001d6db:	5e                   	pop    esi
c001d6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d6e0:	e8 6e 21 ff ff       	call   c000f853 <free>
c001d6e5:	83 c4 10             	add    esp,0x10
c001d6e8:	eb 21                	jmp    c001d70b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d6ea:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d6ee:	e9 90 fd ff ff       	jmp    c001d483 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d6f3:	83 ec 0c             	sub    esp,0xc
c001d6f6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d6fa:	e8 54 21 ff ff       	call   c000f853 <free>
c001d6ff:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d703:	83 c4 10             	add    esp,0x10
c001d706:	e9 05 fd ff ff       	jmp    c001d410 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d70b:	31 c0                	xor    eax,eax
c001d70d:	eb 33                	jmp    c001d742 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d70f:	83 ec 0c             	sub    esp,0xc
c001d712:	55                   	push   ebp
c001d713:	e8 f2 5e ff ff       	call   c001360a <File::close()>
c001d718:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d71b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d71e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d721:	58                   	pop    eax
c001d722:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d726:	e8 28 21 ff ff       	call   c000f853 <free>
c001d72b:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d72e:	e8 20 21 ff ff       	call   c000f853 <free>
c001d733:	5a                   	pop    edx
c001d734:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d738:	e8 16 21 ff ff       	call   c000f853 <free>
c001d73d:	83 c4 10             	add    esp,0x10
c001d740:	b0 01                	mov    al,0x1
c001d742:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d748:	5b                   	pop    ebx
c001d749:	5e                   	pop    esi
c001d74a:	5f                   	pop    edi
c001d74b:	5d                   	pop    ebp
c001d74c:	c3                   	ret    

c001d74d <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d74d:	56                   	push   esi
c001d74e:	31 d2                	xor    edx,edx
c001d750:	53                   	push   ebx
c001d751:	8b 1d a0 12 03 c0    	mov    ebx,DWORD PTR ds:0xc00312a0
c001d757:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d75b:	39 d3                	cmp    ebx,edx
c001d75d:	7e 1b                	jle    c001d77a <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d75f:	8b 04 95 c0 14 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffceb40]
c001d766:	39 c8                	cmp    eax,ecx
c001d768:	77 0d                	ja     c001d777 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d76a:	8b 34 95 c0 12 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffced40]
c001d771:	01 c6                	add    esi,eax
c001d773:	39 ce                	cmp    esi,ecx
c001d775:	77 05                	ja     c001d77c <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d777:	42                   	inc    edx
c001d778:	eb e1                	jmp    c001d75b <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d77a:	31 c0                	xor    eax,eax
c001d77c:	5b                   	pop    ebx
c001d77d:	5e                   	pop    esi
c001d77e:	c3                   	ret    

c001d77f <Thr::getDriverNameFromAddress(unsigned long)>:
c001d77f:	53                   	push   ebx
c001d780:	31 c0                	xor    eax,eax
c001d782:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d786:	8b 1d a0 12 03 c0    	mov    ebx,DWORD PTR ds:0xc00312a0
c001d78c:	39 c3                	cmp    ebx,eax
c001d78e:	7e 22                	jle    c001d7b2 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d790:	8b 14 85 c0 14 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffceb40]
c001d797:	39 ca                	cmp    edx,ecx
c001d799:	77 14                	ja     c001d7af <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d79b:	03 14 85 c0 12 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffced40]
c001d7a2:	39 ca                	cmp    edx,ecx
c001d7a4:	76 09                	jbe    c001d7af <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d7a6:	8b 04 85 c0 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce940]
c001d7ad:	eb 05                	jmp    c001d7b4 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d7af:	40                   	inc    eax
c001d7b0:	eb da                	jmp    c001d78c <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d7b2:	31 c0                	xor    eax,eax
c001d7b4:	5b                   	pop    ebx
c001d7b5:	c3                   	ret    

c001d7b6 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d7b6:	53                   	push   ebx
c001d7b7:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d7bb:	53                   	push   ebx
c001d7bc:	e8 8c ff ff ff       	call   c001d74d <Thr::getDriverBaseFromAddress(unsigned long)>
c001d7c1:	5a                   	pop    edx
c001d7c2:	31 d2                	xor    edx,edx
c001d7c4:	85 c0                	test   eax,eax
c001d7c6:	74 04                	je     c001d7cc <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d7c8:	89 da                	mov    edx,ebx
c001d7ca:	29 c2                	sub    edx,eax
c001d7cc:	89 d0                	mov    eax,edx
c001d7ce:	5b                   	pop    ebx
c001d7cf:	c3                   	ret    

c001d7d0 <Thr::loadDLL(char const*, bool)>:
c001d7d0:	55                   	push   ebp
c001d7d1:	57                   	push   edi
c001d7d2:	56                   	push   esi
c001d7d3:	53                   	push   ebx
c001d7d4:	81 ec 34 01 00 00    	sub    esp,0x134
c001d7da:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d7e1:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d7e8:	56                   	push   esi
c001d7e9:	68 44 c2 02 c0       	push   0xc002c244
c001d7ee:	e8 fc 57 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001d7f3:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d7fa:	e8 44 20 ff ff       	call   c000f843 <malloc>
c001d7ff:	83 c4 0c             	add    esp,0xc
c001d802:	89 c3                	mov    ebx,eax
c001d804:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001d80a:	56                   	push   esi
c001d80b:	50                   	push   eax
c001d80c:	e8 37 5d ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001d811:	83 c4 10             	add    esp,0x10
c001d814:	85 db                	test   ebx,ebx
c001d816:	75 3c                	jne    c001d854 <Thr::loadDLL(char const*, bool)+0x84>
c001d818:	89 e8                	mov    eax,ebp
c001d81a:	84 c0                	test   al,al
c001d81c:	0f 84 f0 01 00 00    	je     c001da12 <Thr::loadDLL(char const*, bool)+0x242>
c001d822:	50                   	push   eax
c001d823:	50                   	push   eax
c001d824:	68 55 c2 02 c0       	push   0xc002c255
c001d829:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d82d:	57                   	push   edi
c001d82e:	e8 01 30 fe ff       	call   c0000834 <strcpy>
c001d833:	58                   	pop    eax
c001d834:	5a                   	pop    edx
c001d835:	56                   	push   esi
c001d836:	57                   	push   edi
c001d837:	e8 38 31 fe ff       	call   c0000974 <strcat>
c001d83c:	59                   	pop    ecx
c001d83d:	58                   	pop    eax
c001d83e:	68 68 c2 02 c0       	push   0xc002c268
c001d843:	57                   	push   edi
c001d844:	e8 2b 31 fe ff       	call   c0000974 <strcat>
c001d849:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d84c:	e8 4c ce ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001d851:	83 c4 10             	add    esp,0x10
c001d854:	50                   	push   eax
c001d855:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d859:	50                   	push   eax
c001d85a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d85e:	50                   	push   eax
c001d85f:	53                   	push   ebx
c001d860:	e8 f3 5f ff ff       	call   c0013858 <File::stat(unsigned long long*, bool*)>
c001d865:	83 c4 10             	add    esp,0x10
c001d868:	85 db                	test   ebx,ebx
c001d86a:	74 0c                	je     c001d878 <Thr::loadDLL(char const*, bool)+0xa8>
c001d86c:	83 ec 0c             	sub    esp,0xc
c001d86f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d871:	53                   	push   ebx
c001d872:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d875:	83 c4 10             	add    esp,0x10
c001d878:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d87d:	75 0a                	jne    c001d889 <Thr::loadDLL(char const*, bool)+0xb9>
c001d87f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d883:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d887:	75 3c                	jne    c001d8c5 <Thr::loadDLL(char const*, bool)+0xf5>
c001d889:	89 e8                	mov    eax,ebp
c001d88b:	84 c0                	test   al,al
c001d88d:	0f 84 67 01 00 00    	je     c001d9fa <Thr::loadDLL(char const*, bool)+0x22a>
c001d893:	50                   	push   eax
c001d894:	50                   	push   eax
c001d895:	68 55 c2 02 c0       	push   0xc002c255
c001d89a:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d89e:	53                   	push   ebx
c001d89f:	e8 90 2f fe ff       	call   c0000834 <strcpy>
c001d8a4:	58                   	pop    eax
c001d8a5:	5a                   	pop    edx
c001d8a6:	56                   	push   esi
c001d8a7:	53                   	push   ebx
c001d8a8:	e8 c7 30 fe ff       	call   c0000974 <strcat>
c001d8ad:	59                   	pop    ecx
c001d8ae:	5f                   	pop    edi
c001d8af:	68 68 c2 02 c0       	push   0xc002c268
c001d8b4:	53                   	push   ebx
c001d8b5:	e8 ba 30 fe ff       	call   c0000974 <strcat>
c001d8ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d8bd:	e8 db cd ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001d8c2:	83 c4 10             	add    esp,0x10
c001d8c5:	e8 50 45 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c001d8ca:	51                   	push   ecx
c001d8cb:	68 03 08 00 00       	push   0x803
c001d8d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d8d4:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d8d8:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d8de:	83 d3 00             	adc    ebx,0x0
c001d8e1:	89 ca                	mov    edx,ecx
c001d8e3:	89 d1                	mov    ecx,edx
c001d8e5:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d8e9:	51                   	push   ecx
c001d8ea:	50                   	push   eax
c001d8eb:	e8 7c 4b ff ff       	call   c001246c <VAS::allocatePages(int, int)>
c001d8f0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d8f4:	89 c3                	mov    ebx,eax
c001d8f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d8fa:	05 ff 0f 00 00       	add    eax,0xfff
c001d8ff:	83 d2 00             	adc    edx,0x0
c001d902:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d906:	c1 ea 0c             	shr    edx,0xc
c001d909:	52                   	push   edx
c001d90a:	50                   	push   eax
c001d90b:	53                   	push   ebx
c001d90c:	68 6a c2 02 c0       	push   0xc002c26a
c001d911:	e8 d9 56 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001d916:	83 c4 14             	add    esp,0x14
c001d919:	56                   	push   esi
c001d91a:	e8 75 2e fe ff       	call   c0000794 <strlen>
c001d91f:	8b 3d a0 12 03 c0    	mov    edi,DWORD PTR ds:0xc00312a0
c001d925:	40                   	inc    eax
c001d926:	89 04 24             	mov    DWORD PTR [esp],eax
c001d929:	e8 15 1f ff ff       	call   c000f843 <malloc>
c001d92e:	89 04 bd c0 16 03 c0 	mov    DWORD PTR [edi*4-0x3ffce940],eax
c001d935:	5f                   	pop    edi
c001d936:	58                   	pop    eax
c001d937:	a1 a0 12 03 c0       	mov    eax,ds:0xc00312a0
c001d93c:	56                   	push   esi
c001d93d:	ff 34 85 c0 16 03 c0 	push   DWORD PTR [eax*4-0x3ffce940]
c001d944:	e8 eb 2e fe ff       	call   c0000834 <strcpy>
c001d949:	a1 a0 12 03 c0       	mov    eax,ds:0xc00312a0
c001d94e:	8d 50 01             	lea    edx,[eax+0x1]
c001d951:	89 1c 85 c0 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb40],ebx
c001d958:	89 15 a0 12 03 c0    	mov    DWORD PTR ds:0xc00312a0,edx
c001d95e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d962:	83 c4 0c             	add    esp,0xc
c001d965:	89 14 85 c0 12 03 c0 	mov    DWORD PTR [eax*4-0x3ffced40],edx
c001d96c:	6a 01                	push   0x1
c001d96e:	53                   	push   ebx
c001d96f:	56                   	push   esi
c001d970:	e8 bc f6 ff ff       	call   c001d031 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d975:	83 c4 10             	add    esp,0x10
c001d978:	89 c7                	mov    edi,eax
c001d97a:	84 c0                	test   al,al
c001d97c:	0f 85 8c 00 00 00    	jne    c001da0e <Thr::loadDLL(char const*, bool)+0x23e>
c001d982:	89 e8                	mov    eax,ebp
c001d984:	84 c0                	test   al,al
c001d986:	74 76                	je     c001d9fe <Thr::loadDLL(char const*, bool)+0x22e>
c001d988:	83 ec 0c             	sub    esp,0xc
c001d98b:	68 8e c2 02 c0       	push   0xc002c28e
c001d990:	e8 08 cd ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001d995:	83 c4 10             	add    esp,0x10
c001d998:	eb 64                	jmp    c001d9fe <Thr::loadDLL(char const*, bool)+0x22e>
c001d99a:	e8 7b 44 ff ff       	call   c0011e1a <Virt::getAKernelVAS()>
c001d99f:	89 f5                	mov    ebp,esi
c001d9a1:	c1 e5 0c             	shl    ebp,0xc
c001d9a4:	52                   	push   edx
c001d9a5:	01 dd                	add    ebp,ebx
c001d9a7:	52                   	push   edx
c001d9a8:	55                   	push   ebp
c001d9a9:	50                   	push   eax
c001d9aa:	e8 37 46 ff ff       	call   c0011fe6 <VAS::getPageTableEntry(unsigned long)>
c001d9af:	83 c4 10             	add    esp,0x10
c001d9b2:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d9b5:	75 0c                	jne    c001d9c3 <Thr::loadDLL(char const*, bool)+0x1f3>
c001d9b7:	83 ec 0c             	sub    esp,0xc
c001d9ba:	55                   	push   ebp
c001d9bb:	e8 9b 24 ff ff       	call   c000fe5b <Phys::freePage(unsigned long)>
c001d9c0:	83 c4 10             	add    esp,0x10
c001d9c3:	46                   	inc    esi
c001d9c4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d9c8:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d9cc:	05 ff 0f 00 00       	add    eax,0xfff
c001d9d1:	83 d2 00             	adc    edx,0x0
c001d9d4:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d9d8:	c1 ea 0c             	shr    edx,0xc
c001d9db:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d9df:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d9e3:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d9e7:	ba 00 00 00 00       	mov    edx,0x0
c001d9ec:	89 d0                	mov    eax,edx
c001d9ee:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d9f2:	72 a6                	jb     c001d99a <Thr::loadDLL(char const*, bool)+0x1ca>
c001d9f4:	89 f8                	mov    eax,edi
c001d9f6:	84 c0                	test   al,al
c001d9f8:	75 18                	jne    c001da12 <Thr::loadDLL(char const*, bool)+0x242>
c001d9fa:	31 db                	xor    ebx,ebx
c001d9fc:	eb 14                	jmp    c001da12 <Thr::loadDLL(char const*, bool)+0x242>
c001d9fe:	83 ec 0c             	sub    esp,0xc
c001da01:	68 ad c2 02 c0       	push   0xc002c2ad
c001da06:	e8 92 cc ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001da0b:	83 c4 10             	add    esp,0x10
c001da0e:	31 f6                	xor    esi,esi
c001da10:	eb b2                	jmp    c001d9c4 <Thr::loadDLL(char const*, bool)+0x1f4>
c001da12:	81 c4 2c 01 00 00    	add    esp,0x12c
c001da18:	89 d8                	mov    eax,ebx
c001da1a:	5b                   	pop    ebx
c001da1b:	5e                   	pop    esi
c001da1c:	5f                   	pop    edi
c001da1d:	5d                   	pop    ebp
c001da1e:	c3                   	ret    

c001da1f <Thr::executeDLL(unsigned long, void*)>:
c001da1f:	56                   	push   esi
c001da20:	53                   	push   ebx
c001da21:	52                   	push   edx
c001da22:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001da26:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001da2a:	85 db                	test   ebx,ebx
c001da2c:	75 10                	jne    c001da3e <Thr::executeDLL(unsigned long, void*)+0x1f>
c001da2e:	83 ec 0c             	sub    esp,0xc
c001da31:	68 c9 c2 02 c0       	push   0xc002c2c9
c001da36:	e8 62 cc ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001da3b:	83 c4 10             	add    esp,0x10
c001da3e:	50                   	push   eax
c001da3f:	50                   	push   eax
c001da40:	53                   	push   ebx
c001da41:	68 f3 c2 02 c0       	push   0xc002c2f3
c001da46:	e8 a4 55 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001da4b:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001da4f:	89 d8                	mov    eax,ebx
c001da51:	83 c4 14             	add    esp,0x14
c001da54:	5b                   	pop    ebx
c001da55:	5e                   	pop    esi
c001da56:	ff e0                	jmp    eax

c001da58 <changeTSS>:
c001da58:	83 ec 14             	sub    esp,0x14
c001da5b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da60:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001da63:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001da68:	c1 e2 15             	shl    edx,0x15
c001da6b:	29 d0                	sub    eax,edx
c001da6d:	50                   	push   eax
c001da6e:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001da73:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da79:	05 7c 11 00 00       	add    eax,0x117c
c001da7e:	50                   	push   eax
c001da7f:	e8 3a 3a ff ff       	call   c00114be <TSS::setESP(unsigned long)>
c001da84:	83 c4 1c             	add    esp,0x1c
c001da87:	c3                   	ret    

c001da88 <Process::addArgs(char**)>:
c001da88:	57                   	push   edi
c001da89:	56                   	push   esi
c001da8a:	53                   	push   ebx
c001da8b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001da8f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001da93:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001da9d:	85 ff                	test   edi,edi
c001da9f:	74 3d                	je     c001dade <Process::addArgs(char**)+0x56>
c001daa1:	8b 07                	mov    eax,DWORD PTR [edi]
c001daa3:	85 c0                	test   eax,eax
c001daa5:	74 37                	je     c001dade <Process::addArgs(char**)+0x56>
c001daa7:	31 db                	xor    ebx,ebx
c001daa9:	83 ec 0c             	sub    esp,0xc
c001daac:	50                   	push   eax
c001daad:	e8 e2 2c fe ff       	call   c0000794 <strlen>
c001dab2:	40                   	inc    eax
c001dab3:	89 04 24             	mov    DWORD PTR [esp],eax
c001dab6:	e8 88 1d ff ff       	call   c000f843 <malloc>
c001dabb:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001dac2:	5a                   	pop    edx
c001dac3:	59                   	pop    ecx
c001dac4:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001dac7:	43                   	inc    ebx
c001dac8:	50                   	push   eax
c001dac9:	e8 66 2d fe ff       	call   c0000834 <strcpy>
c001dace:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001dad4:	83 c4 10             	add    esp,0x10
c001dad7:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001dada:	85 c0                	test   eax,eax
c001dadc:	75 cb                	jne    c001daa9 <Process::addArgs(char**)+0x21>
c001dade:	5b                   	pop    ebx
c001dadf:	5e                   	pop    esi
c001dae0:	5f                   	pop    edi
c001dae1:	c3                   	ret    

c001dae2 <Process::Process(char const*, Process*, char**)>:
c001dae2:	56                   	push   esi
c001dae3:	53                   	push   ebx
c001dae4:	83 ec 14             	sub    esp,0x14
c001dae7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001daeb:	05 0c 02 00 00       	add    eax,0x20c
c001daf0:	bb 07 00 00 00       	mov    ebx,0x7
c001daf5:	89 c6                	mov    esi,eax
c001daf7:	85 db                	test   ebx,ebx
c001daf9:	78 12                	js     c001db0d <Process::Process(char const*, Process*, char**)+0x2b>
c001dafb:	83 ec 0c             	sub    esp,0xc
c001dafe:	56                   	push   esi
c001daff:	e8 1e b2 00 00       	call   c0028d22 <ThreadControlBlock::ThreadControlBlock()>
c001db04:	83 c4 10             	add    esp,0x10
c001db07:	83 c6 63             	add    esi,0x63
c001db0a:	4b                   	dec    ebx
c001db0b:	eb ea                	jmp    c001daf7 <Process::Process(char const*, Process*, char**)+0x15>
c001db0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db11:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001db18:	83 ec 0c             	sub    esp,0xc
c001db1b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001db1f:	e8 ca c9 ff ff       	call   c001a4ee <Krnl::newProcessEnv(Process*)>
c001db24:	83 c4 10             	add    esp,0x10
c001db27:	89 c2                	mov    edx,eax
c001db29:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db2d:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001db33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db37:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001db40:	a1 b0 da 02 c0       	mov    eax,ds:0xc002dab0
c001db45:	8d 50 01             	lea    edx,[eax+0x1]
c001db48:	89 15 b0 da 02 c0    	mov    DWORD PTR ds:0xc002dab0,edx
c001db4e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001db52:	89 02                	mov    DWORD PTR [edx],eax
c001db54:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001db5c:	83 ec 0c             	sub    esp,0xc
c001db5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001db63:	e8 db 1c ff ff       	call   c000f843 <malloc>
c001db68:	83 c4 10             	add    esp,0x10
c001db6b:	89 c3                	mov    ebx,eax
c001db6d:	83 ec 08             	sub    esp,0x8
c001db70:	6a 00                	push   0x0
c001db72:	53                   	push   ebx
c001db73:	e8 9c 4c ff ff       	call   c0012814 <VAS::VAS(bool)>
c001db78:	83 c4 10             	add    esp,0x10
c001db7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db7f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001db85:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db89:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001db93:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001db97:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001db9b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dba1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dba5:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbab:	85 c0                	test   eax,eax
c001dbad:	74 42                	je     c001dbf1 <Process::Process(char const*, Process*, char**)+0x10f>
c001dbaf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbb3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbb9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001dbbf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbc3:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001dbc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbcd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dbd3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001dbd9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbdd:	05 0c 01 00 00       	add    eax,0x10c
c001dbe2:	83 ec 08             	sub    esp,0x8
c001dbe5:	52                   	push   edx
c001dbe6:	50                   	push   eax
c001dbe7:	e8 48 2c fe ff       	call   c0000834 <strcpy>
c001dbec:	83 c4 10             	add    esp,0x10
c001dbef:	eb 63                	jmp    c001dc54 <Process::Process(char const*, Process*, char**)+0x172>
c001dbf1:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001dbf9:	83 ec 0c             	sub    esp,0xc
c001dbfc:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001dc00:	e8 3e 1c ff ff       	call   c000f843 <malloc>
c001dc05:	83 c4 10             	add    esp,0x10
c001dc08:	89 c3                	mov    ebx,eax
c001dc0a:	83 ec 08             	sub    esp,0x8
c001dc0d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc11:	53                   	push   ebx
c001dc12:	e8 a5 35 ff ff       	call   c00111bc <VgaText::VgaText(char const*)>
c001dc17:	83 c4 10             	add    esp,0x10
c001dc1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc1e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dc24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc28:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dc2e:	83 ec 0c             	sub    esp,0xc
c001dc31:	50                   	push   eax
c001dc32:	e8 78 29 ff ff       	call   c00105af <addToTerminalCycle(VgaText*)>
c001dc37:	83 c4 10             	add    esp,0x10
c001dc3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc3e:	05 0c 01 00 00       	add    eax,0x10c
c001dc43:	83 ec 08             	sub    esp,0x8
c001dc46:	68 12 c3 02 c0       	push   0xc002c312
c001dc4b:	50                   	push   eax
c001dc4c:	e8 e3 2b fe ff       	call   c0000834 <strcpy>
c001dc51:	83 c4 10             	add    esp,0x10
c001dc54:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dc58:	83 c0 0c             	add    eax,0xc
c001dc5b:	83 ec 08             	sub    esp,0x8
c001dc5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc62:	50                   	push   eax
c001dc63:	e8 cc 2b fe ff       	call   c0000834 <strcpy>
c001dc68:	83 c4 10             	add    esp,0x10
c001dc6b:	83 ec 08             	sub    esp,0x8
c001dc6e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001dc72:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc76:	e8 0d fe ff ff       	call   c001da88 <Process::addArgs(char**)>
c001dc7b:	83 c4 10             	add    esp,0x10
c001dc7e:	83 ec 08             	sub    esp,0x8
c001dc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dc89:	e8 6d ee ff ff       	call   c001cafb <Thr::loadProgramIntoMemory(Process*, char const*)>
c001dc8e:	83 c4 10             	add    esp,0x10
c001dc91:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001dc95:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001dc99:	83 f0 01             	xor    eax,0x1
c001dc9c:	88 c2                	mov    dl,al
c001dc9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dca2:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001dca8:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001dcad:	83 ec 08             	sub    esp,0x8
c001dcb0:	50                   	push   eax
c001dcb1:	68 10 c4 02 c0       	push   0xc002c410
c001dcb6:	e8 34 53 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001dcbb:	83 c4 10             	add    esp,0x10
c001dcbe:	90                   	nop
c001dcbf:	83 c4 14             	add    esp,0x14
c001dcc2:	5b                   	pop    ebx
c001dcc3:	5e                   	pop    esi
c001dcc4:	c3                   	ret    
c001dcc5:	90                   	nop

c001dcc6 <Process::Process(bool, char const*, Process*, char**)>:
c001dcc6:	56                   	push   esi
c001dcc7:	53                   	push   ebx
c001dcc8:	83 ec 24             	sub    esp,0x24
c001dccb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001dccf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001dcd3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcd7:	05 0c 02 00 00       	add    eax,0x20c
c001dcdc:	bb 07 00 00 00       	mov    ebx,0x7
c001dce1:	89 c6                	mov    esi,eax
c001dce3:	85 db                	test   ebx,ebx
c001dce5:	78 12                	js     c001dcf9 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001dce7:	83 ec 0c             	sub    esp,0xc
c001dcea:	56                   	push   esi
c001dceb:	e8 32 b0 00 00       	call   c0028d22 <ThreadControlBlock::ThreadControlBlock()>
c001dcf0:	83 c4 10             	add    esp,0x10
c001dcf3:	83 c6 63             	add    esi,0x63
c001dcf6:	4b                   	dec    ebx
c001dcf7:	eb ea                	jmp    c001dce3 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001dcf9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dcfd:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dd04:	83 ec 0c             	sub    esp,0xc
c001dd07:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001dd0b:	e8 de c7 ff ff       	call   c001a4ee <Krnl::newProcessEnv(Process*)>
c001dd10:	83 c4 10             	add    esp,0x10
c001dd13:	89 c2                	mov    edx,eax
c001dd15:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd19:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dd1f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd23:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dd2c:	a1 b0 da 02 c0       	mov    eax,ds:0xc002dab0
c001dd31:	8d 50 01             	lea    edx,[eax+0x1]
c001dd34:	89 15 b0 da 02 c0    	mov    DWORD PTR ds:0xc002dab0,edx
c001dd3a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001dd3e:	89 02                	mov    DWORD PTR [edx],eax
c001dd40:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001dd48:	83 ec 0c             	sub    esp,0xc
c001dd4b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001dd4f:	e8 ef 1a ff ff       	call   c000f843 <malloc>
c001dd54:	83 c4 10             	add    esp,0x10
c001dd57:	89 c3                	mov    ebx,eax
c001dd59:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001dd5e:	83 ec 08             	sub    esp,0x8
c001dd61:	50                   	push   eax
c001dd62:	53                   	push   ebx
c001dd63:	e8 ac 4a ff ff       	call   c0012814 <VAS::VAS(bool)>
c001dd68:	83 c4 10             	add    esp,0x10
c001dd6b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd6f:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001dd75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd79:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001dd83:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd87:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dd8b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001dd91:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dd95:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dd9b:	85 c0                	test   eax,eax
c001dd9d:	74 42                	je     c001dde1 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001dd9f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001dda3:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001dda9:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001ddaf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddb3:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001ddb9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddbd:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001ddc3:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001ddc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ddcd:	05 0c 01 00 00       	add    eax,0x10c
c001ddd2:	83 ec 08             	sub    esp,0x8
c001ddd5:	52                   	push   edx
c001ddd6:	50                   	push   eax
c001ddd7:	e8 58 2a fe ff       	call   c0000834 <strcpy>
c001dddc:	83 c4 10             	add    esp,0x10
c001dddf:	eb 63                	jmp    c001de44 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001dde1:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001dde9:	83 ec 0c             	sub    esp,0xc
c001ddec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001ddf0:	e8 4e 1a ff ff       	call   c000f843 <malloc>
c001ddf5:	83 c4 10             	add    esp,0x10
c001ddf8:	89 c3                	mov    ebx,eax
c001ddfa:	83 ec 08             	sub    esp,0x8
c001ddfd:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de01:	53                   	push   ebx
c001de02:	e8 b5 33 ff ff       	call   c00111bc <VgaText::VgaText(char const*)>
c001de07:	83 c4 10             	add    esp,0x10
c001de0a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de0e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001de14:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de18:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001de1e:	83 ec 0c             	sub    esp,0xc
c001de21:	50                   	push   eax
c001de22:	e8 88 27 ff ff       	call   c00105af <addToTerminalCycle(VgaText*)>
c001de27:	83 c4 10             	add    esp,0x10
c001de2a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de2e:	05 0c 01 00 00       	add    eax,0x10c
c001de33:	83 ec 08             	sub    esp,0x8
c001de36:	68 12 c3 02 c0       	push   0xc002c312
c001de3b:	50                   	push   eax
c001de3c:	e8 f3 29 fe ff       	call   c0000834 <strcpy>
c001de41:	83 c4 10             	add    esp,0x10
c001de44:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001de48:	83 c0 0c             	add    eax,0xc
c001de4b:	83 ec 08             	sub    esp,0x8
c001de4e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001de52:	50                   	push   eax
c001de53:	e8 dc 29 fe ff       	call   c0000834 <strcpy>
c001de58:	83 c4 10             	add    esp,0x10
c001de5b:	83 ec 08             	sub    esp,0x8
c001de5e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001de62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001de66:	e8 1d fc ff ff       	call   c001da88 <Process::addArgs(char**)>
c001de6b:	83 c4 10             	add    esp,0x10
c001de6e:	90                   	nop
c001de6f:	83 c4 24             	add    esp,0x24
c001de72:	5b                   	pop    ebx
c001de73:	5e                   	pop    esi
c001de74:	c3                   	ret    

c001de75 <disableIRQs()>:
c001de75:	fa                   	cli    
c001de76:	ff 05 6c 1a 03 c0    	inc    DWORD PTR ds:0xc0031a6c
c001de7c:	c3                   	ret    

c001de7d <getIRQNestingLevel()>:
c001de7d:	a1 6c 1a 03 c0       	mov    eax,ds:0xc0031a6c
c001de82:	c3                   	ret    

c001de83 <enableIRQs()>:
c001de83:	a1 6c 1a 03 c0       	mov    eax,ds:0xc0031a6c
c001de88:	48                   	dec    eax
c001de89:	a3 6c 1a 03 c0       	mov    ds:0xc0031a6c,eax
c001de8e:	75 01                	jne    c001de91 <enableIRQs()+0xe>
c001de90:	fb                   	sti    
c001de91:	c3                   	ret    

c001de92 <lockScheduler()>:
c001de92:	eb e1                	jmp    c001de75 <disableIRQs()>

c001de94 <unlockScheduler()>:
c001de94:	eb ed                	jmp    c001de83 <enableIRQs()>

c001de96 <userModeEntryPoint(void*)>:
c001de96:	83 ec 0c             	sub    esp,0xc
c001de99:	e8 f6 ff ff ff       	call   c001de94 <unlockScheduler()>
c001de9e:	fb                   	sti    
c001de9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dea4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dea7:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dead:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001deb1:	83 c4 0c             	add    esp,0xc
c001deb4:	e9 71 24 fe ff       	jmp    c000032a <goToUsermode>

c001deb9 <lockStuff()>:
c001deb9:	e8 b7 ff ff ff       	call   c001de75 <disableIRQs()>
c001debe:	ff 05 68 1a 03 c0    	inc    DWORD PTR ds:0xc0031a68
c001dec4:	c3                   	ret    

c001dec5 <taskStartupFunction>:
c001dec5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deca:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001decd:	c3                   	ret    

c001dece <updateTimeUsed()>:
c001dece:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c001ded3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001ded9:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001dee0:	74 50                	je     c001df32 <updateTimeUsed()+0x64>
c001dee2:	57                   	push   edi
c001dee3:	56                   	push   esi
c001dee4:	53                   	push   ebx
c001dee5:	0f 31                	rdtsc  
c001dee7:	89 c1                	mov    ecx,eax
c001dee9:	a3 a8 1a 03 c0       	mov    ds:0xc0031aa8,eax
c001deee:	2b 0d 98 1a 03 c0    	sub    ecx,DWORD PTR ds:0xc0031a98
c001def4:	89 d3                	mov    ebx,edx
c001def6:	89 0d a0 1a 03 c0    	mov    DWORD PTR ds:0xc0031aa0,ecx
c001defc:	1b 1d 9c 1a 03 c0    	sbb    ebx,DWORD PTR ds:0xc0031a9c
c001df02:	a3 98 1a 03 c0       	mov    ds:0xc0031a98,eax
c001df07:	89 1d a4 1a 03 c0    	mov    DWORD PTR ds:0xc0031aa4,ebx
c001df0d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df12:	89 15 ac 1a 03 c0    	mov    DWORD PTR ds:0xc0031aac,edx
c001df18:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001df1b:	89 15 9c 1a 03 c0    	mov    DWORD PTR ds:0xc0031a9c,edx
c001df21:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001df24:	01 f1                	add    ecx,esi
c001df26:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001df29:	11 fb                	adc    ebx,edi
c001df2b:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001df2e:	5b                   	pop    ebx
c001df2f:	5e                   	pop    esi
c001df30:	5f                   	pop    edi
c001df31:	c3                   	ret    
c001df32:	c3                   	ret    

c001df33 <switchToThread(ThreadControlBlock*)>:
c001df33:	53                   	push   ebx
c001df34:	83 ec 08             	sub    esp,0x8
c001df37:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c001df3c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001df40:	85 c0                	test   eax,eax
c001df42:	75 30                	jne    c001df74 <switchToThread(ThreadControlBlock*)+0x41>
c001df44:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001df47:	3c ff                	cmp    al,0xff
c001df49:	74 25                	je     c001df70 <switchToThread(ThreadControlBlock*)+0x3d>
c001df4b:	0f b6 d0             	movzx  edx,al
c001df4e:	b8 84 03 00 00       	mov    eax,0x384
c001df53:	29 d0                	sub    eax,edx
c001df55:	c1 e0 10             	shl    eax,0x10
c001df58:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001df5b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001df5e:	e8 6b ff ff ff       	call   c001dece <updateTimeUsed()>
c001df63:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001df67:	83 c4 08             	add    esp,0x8
c001df6a:	5b                   	pop    ebx
c001df6b:	e9 f2 23 fe ff       	jmp    c0000362 <switchToThreadASM>
c001df70:	31 c0                	xor    eax,eax
c001df72:	eb e7                	jmp    c001df5b <switchToThread(ThreadControlBlock*)+0x28>
c001df74:	c7 05 64 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031a64,0x1
c001df7e:	83 c4 08             	add    esp,0x8
c001df81:	5b                   	pop    ebx
c001df82:	c3                   	ret    
c001df83:	90                   	nop

c001df84 <Semaphore::Semaphore(int)>:
c001df84:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df88:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001df8c:	89 10                	mov    DWORD PTR [eax],edx
c001df8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df92:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001df99:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001df9d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001dfa4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfa8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001dfaf:	90                   	nop
c001dfb0:	c3                   	ret    
c001dfb1:	90                   	nop

c001dfb2 <Mutex::Mutex()>:
c001dfb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001dfb6:	6a 01                	push   0x1
c001dfb8:	50                   	push   eax
c001dfb9:	e8 c6 ff ff ff       	call   c001df84 <Semaphore::Semaphore(int)>
c001dfbe:	83 c4 08             	add    esp,0x8
c001dfc1:	90                   	nop
c001dfc2:	c3                   	ret    
c001dfc3:	90                   	nop

c001dfc4 <Process::createThread(void (*)(void*), void*, int)>:
c001dfc4:	55                   	push   ebp
c001dfc5:	31 c9                	xor    ecx,ecx
c001dfc7:	57                   	push   edi
c001dfc8:	56                   	push   esi
c001dfc9:	53                   	push   ebx
c001dfca:	83 ec 1c             	sub    esp,0x1c
c001dfcd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001dfd1:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001dfd8:	89 f2                	mov    edx,esi
c001dfda:	0f b7 c2             	movzx  eax,dx
c001dfdd:	83 e2 01             	and    edx,0x1
c001dfe0:	74 14                	je     c001dff6 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001dfe2:	d1 f8                	sar    eax,1
c001dfe4:	41                   	inc    ecx
c001dfe5:	89 c2                	mov    edx,eax
c001dfe7:	83 f9 10             	cmp    ecx,0x10
c001dfea:	75 ee                	jne    c001dfda <Process::createThread(void (*)(void*), void*, int)+0x16>
c001dfec:	83 c4 1c             	add    esp,0x1c
c001dfef:	31 c0                	xor    eax,eax
c001dff1:	5b                   	pop    ebx
c001dff2:	5e                   	pop    esi
c001dff3:	5f                   	pop    edi
c001dff4:	5d                   	pop    ebp
c001dff5:	c3                   	ret    
c001dff6:	83 ec 08             	sub    esp,0x8
c001dff9:	b8 01 00 00 00       	mov    eax,0x1
c001dffe:	d3 e0                	shl    eax,cl
c001e000:	09 c6                	or     esi,eax
c001e002:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e008:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e00f:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001e012:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e015:	01 ce                	add    esi,ecx
c001e017:	89 f0                	mov    eax,esi
c001e019:	c1 e0 05             	shl    eax,0x5
c001e01c:	01 c6                	add    esi,eax
c001e01e:	8d 04 33             	lea    eax,[ebx+esi*1]
c001e021:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001e027:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e02d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001e031:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e037:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001e03d:	89 ca                	mov    edx,ecx
c001e03f:	f7 da                	neg    edx
c001e041:	c1 e2 15             	shl    edx,0x15
c001e044:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001e04a:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001e050:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001e054:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e05e:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e064:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e068:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001e06e:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e078:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e082:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001e089:	50                   	push   eax
c001e08a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001e08e:	68 88 1a 03 c0       	push   0xc0031a88
c001e093:	e8 18 ab 00 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e098:	83 c4 10             	add    esp,0x10
c001e09b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e09f:	83 c4 1c             	add    esp,0x1c
c001e0a2:	5b                   	pop    ebx
c001e0a3:	5e                   	pop    esi
c001e0a4:	5f                   	pop    edi
c001e0a5:	5d                   	pop    ebp
c001e0a6:	c3                   	ret    
c001e0a7:	90                   	nop

c001e0a8 <Process::createUserThread()>:
c001e0a8:	83 ec 0c             	sub    esp,0xc
c001e0ab:	68 80 00 00 00       	push   0x80
c001e0b0:	6a 00                	push   0x0
c001e0b2:	68 96 de 01 c0       	push   0xc001de96
c001e0b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e0bb:	e8 04 ff ff ff       	call   c001dfc4 <Process::createThread(void (*)(void*), void*, int)>
c001e0c0:	83 c4 1c             	add    esp,0x1c
c001e0c3:	c3                   	ret    

c001e0c4 <setupMultitasking(void (*)())>:
c001e0c4:	56                   	push   esi
c001e0c5:	53                   	push   ebx
c001e0c6:	53                   	push   ebx
c001e0c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e0cb:	eb 10                	jmp    c001e0dd <setupMultitasking(void (*)())+0x19>
c001e0cd:	83 ec 0c             	sub    esp,0xc
c001e0d0:	68 88 1a 03 c0       	push   0xc0031a88
c001e0d5:	e8 28 aa 00 00       	call   c0028b02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e0da:	83 c4 10             	add    esp,0x10
c001e0dd:	83 ec 0c             	sub    esp,0xc
c001e0e0:	68 88 1a 03 c0       	push   0xc0031a88
c001e0e5:	e8 fc a9 00 00       	call   c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e0ea:	83 c4 10             	add    esp,0x10
c001e0ed:	84 c0                	test   al,al
c001e0ef:	74 dc                	je     c001e0cd <setupMultitasking(void (*)())+0x9>
c001e0f1:	83 ec 0c             	sub    esp,0xc
c001e0f4:	68 3f 07 00 00       	push   0x73f
c001e0f9:	e8 45 17 ff ff       	call   c000f843 <malloc>
c001e0fe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e105:	89 c3                	mov    ebx,eax
c001e107:	6a 00                	push   0x0
c001e109:	68 16 c3 02 c0       	push   0xc002c316
c001e10e:	6a 01                	push   0x1
c001e110:	50                   	push   eax
c001e111:	e8 b0 fb ff ff       	call   c001dcc6 <Process::Process(bool, char const*, Process*, char**)>
c001e116:	83 c4 18             	add    esp,0x18
c001e119:	89 1d 94 1a 03 c0    	mov    DWORD PTR ds:0xc0031a94,ebx
c001e11f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e125:	68 38 c4 02 c0       	push   0xc002c438
c001e12a:	e8 c0 4e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e12f:	58                   	pop    eax
c001e130:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e136:	e8 f6 2b ff ff       	call   c0010d31 <setActiveTerminal(VgaText*)>
c001e13b:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e143:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e149:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001e14c:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e156:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e15c:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e162:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e16c:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e176:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e180:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e186:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e18c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e196:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e19c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e1a6:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e1ac:	5a                   	pop    edx
c001e1ad:	59                   	pop    ecx
c001e1ae:	68 12 c3 02 c0       	push   0xc002c312
c001e1b3:	50                   	push   eax
c001e1b4:	e8 7b 26 fe ff       	call   c0000834 <strcpy>
c001e1b9:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e1c0:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e1c4:	83 c4 14             	add    esp,0x14
c001e1c7:	5b                   	pop    ebx
c001e1c8:	5e                   	pop    esi
c001e1c9:	e9 86 21 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e1ce <schedule()>:
c001e1ce:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c001e1d3:	85 c0                	test   eax,eax
c001e1d5:	74 0b                	je     c001e1e2 <schedule()+0x14>
c001e1d7:	c7 05 64 1a 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031a64,0x1
c001e1e1:	c3                   	ret    
c001e1e2:	53                   	push   ebx
c001e1e3:	83 ec 14             	sub    esp,0x14
c001e1e6:	68 88 1a 03 c0       	push   0xc0031a88
c001e1eb:	e8 f6 a8 00 00       	call   c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e1f0:	83 c4 10             	add    esp,0x10
c001e1f3:	84 c0                	test   al,al
c001e1f5:	75 38                	jne    c001e22f <schedule()+0x61>
c001e1f7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e1fc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e1ff:	4a                   	dec    edx
c001e200:	74 32                	je     c001e234 <schedule()+0x66>
c001e202:	83 ec 0c             	sub    esp,0xc
c001e205:	68 88 1a 03 c0       	push   0xc0031a88
c001e20a:	e8 cf a8 00 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e20f:	c7 04 24 88 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a88
c001e216:	89 c3                	mov    ebx,eax
c001e218:	e8 e5 a8 00 00       	call   c0028b02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e21d:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e224:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e227:	e8 07 fd ff ff       	call   c001df33 <switchToThread(ThreadControlBlock*)>
c001e22c:	83 c4 10             	add    esp,0x10
c001e22f:	83 c4 08             	add    esp,0x8
c001e232:	5b                   	pop    ebx
c001e233:	c3                   	ret    
c001e234:	83 ec 08             	sub    esp,0x8
c001e237:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e23e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e244:	68 88 1a 03 c0       	push   0xc0031a88
c001e249:	e8 62 a9 00 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e24e:	83 c4 10             	add    esp,0x10
c001e251:	eb af                	jmp    c001e202 <schedule()+0x34>

c001e253 <unlockStuff()>:
c001e253:	a1 68 1a 03 c0       	mov    eax,ds:0xc0031a68
c001e258:	48                   	dec    eax
c001e259:	a3 68 1a 03 c0       	mov    ds:0xc0031a68,eax
c001e25e:	75 09                	jne    c001e269 <unlockStuff()+0x16>
c001e260:	a1 64 1a 03 c0       	mov    eax,ds:0xc0031a64
c001e265:	85 c0                	test   eax,eax
c001e267:	75 05                	jne    c001e26e <unlockStuff()+0x1b>
c001e269:	e9 15 fc ff ff       	jmp    c001de83 <enableIRQs()>
c001e26e:	83 ec 0c             	sub    esp,0xc
c001e271:	c7 05 64 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031a64,0x0
c001e27b:	e8 4e ff ff ff       	call   c001e1ce <schedule()>
c001e280:	83 c4 0c             	add    esp,0xc
c001e283:	e9 fb fb ff ff       	jmp    c001de83 <enableIRQs()>

c001e288 <Semaphore::tryAcquire()>:
c001e288:	83 ec 0c             	sub    esp,0xc
c001e28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e28f:	e8 25 fc ff ff       	call   c001deb9 <lockStuff()>
c001e294:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e297:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e299:	7c 0b                	jl     c001e2a6 <Semaphore::tryAcquire()+0x1e>
c001e29b:	e8 b3 ff ff ff       	call   c001e253 <unlockStuff()>
c001e2a0:	31 c0                	xor    eax,eax
c001e2a2:	83 c4 0c             	add    esp,0xc
c001e2a5:	c3                   	ret    
c001e2a6:	42                   	inc    edx
c001e2a7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e2aa:	e8 a4 ff ff ff       	call   c001e253 <unlockStuff()>
c001e2af:	b0 01                	mov    al,0x1
c001e2b1:	83 c4 0c             	add    esp,0xc
c001e2b4:	c3                   	ret    
c001e2b5:	90                   	nop

c001e2b6 <Semaphore::assertLocked(char const*)>:
c001e2b6:	83 ec 0c             	sub    esp,0xc
c001e2b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e2bd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e2c1:	e8 f3 fb ff ff       	call   c001deb9 <lockStuff()>
c001e2c6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e2c8:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001e2cb:	7c 05                	jl     c001e2d2 <Semaphore::assertLocked(char const*)+0x1c>
c001e2cd:	83 c4 0c             	add    esp,0xc
c001e2d0:	eb 81                	jmp    c001e253 <unlockStuff()>
c001e2d2:	83 ec 0c             	sub    esp,0xc
c001e2d5:	52                   	push   edx
c001e2d6:	e8 c2 c3 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001e2db:	83 c4 10             	add    esp,0x10
c001e2de:	83 c4 0c             	add    esp,0xc
c001e2e1:	e9 6d ff ff ff       	jmp    c001e253 <unlockStuff()>

c001e2e6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e2e6:	83 ec 0c             	sub    esp,0xc
c001e2e9:	e8 8f fb ff ff       	call   c001de7d <getIRQNestingLevel()>
c001e2ee:	83 ec 08             	sub    esp,0x8
c001e2f1:	50                   	push   eax
c001e2f2:	68 6c c4 02 c0       	push   0xc002c46c
c001e2f7:	e8 f3 4c ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e2fc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e300:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e305:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e308:	e8 c1 fe ff ff       	call   c001e1ce <schedule()>
c001e30d:	e8 82 fb ff ff       	call   c001de94 <unlockScheduler()>
c001e312:	e8 66 fb ff ff       	call   c001de7d <getIRQNestingLevel()>
c001e317:	5a                   	pop    edx
c001e318:	59                   	pop    ecx
c001e319:	50                   	push   eax
c001e31a:	68 a0 c4 02 c0       	push   0xc002c4a0
c001e31f:	e8 cb 4c ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e324:	83 c4 1c             	add    esp,0x1c
c001e327:	c3                   	ret    

c001e328 <blockTask(TaskState)>:
c001e328:	83 ec 0c             	sub    esp,0xc
c001e32b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e32f:	e8 5e fb ff ff       	call   c001de92 <lockScheduler()>
c001e334:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e339:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e33c:	e8 8d fe ff ff       	call   c001e1ce <schedule()>
c001e341:	83 c4 0c             	add    esp,0xc
c001e344:	e9 4b fb ff ff       	jmp    c001de94 <unlockScheduler()>

c001e349 <waitTask(int, int*, int)>:
c001e349:	83 ec 18             	sub    esp,0x18
c001e34c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e351:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e355:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e358:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e35c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e361:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e364:	6a 07                	push   0x7
c001e366:	e8 bd ff ff ff       	call   c001e328 <blockTask(TaskState)>
c001e36b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e370:	83 c4 10             	add    esp,0x10
c001e373:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e376:	85 d2                	test   edx,edx
c001e378:	74 0a                	je     c001e384 <waitTask(int, int*, int)+0x3b>
c001e37a:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e37d:	89 02                	mov    DWORD PTR [edx],eax
c001e37f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e384:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e387:	83 c4 0c             	add    esp,0xc
c001e38a:	c3                   	ret    

c001e38b <nanoSleepUntil(unsigned long long)>:
c001e38b:	83 ec 0c             	sub    esp,0xc
c001e38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e392:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e396:	3b 05 b0 eb 02 c0    	cmp    eax,DWORD PTR ds:0xc002ebb0
c001e39c:	89 d1                	mov    ecx,edx
c001e39e:	1b 0d b4 eb 02 c0    	sbb    ecx,DWORD PTR ds:0xc002ebb4
c001e3a4:	73 04                	jae    c001e3aa <nanoSleepUntil(unsigned long long)+0x1f>
c001e3a6:	83 c4 0c             	add    esp,0xc
c001e3a9:	c3                   	ret    
c001e3aa:	e8 0a fb ff ff       	call   c001deb9 <lockStuff()>
c001e3af:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e3b5:	83 ec 08             	sub    esp,0x8
c001e3b8:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e3bb:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e3be:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e3c4:	68 7c 1a 03 c0       	push   0xc0031a7c
c001e3c9:	e8 e2 a7 00 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e3ce:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e3d5:	e8 4e ff ff ff       	call   c001e328 <blockTask(TaskState)>
c001e3da:	83 c4 1c             	add    esp,0x1c
c001e3dd:	e9 71 fe ff ff       	jmp    c001e253 <unlockStuff()>

c001e3e2 <nanoSleep(unsigned long long)>:
c001e3e2:	a1 b0 eb 02 c0       	mov    eax,ds:0xc002ebb0
c001e3e7:	8b 15 b4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebb4
c001e3ed:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e3f1:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e3f5:	eb 94                	jmp    c001e38b <nanoSleepUntil(unsigned long long)>

c001e3f7 <sleep(unsigned long long)>:
c001e3f7:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e3ff:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e404:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e408:	01 ca                	add    edx,ecx
c001e40a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e40e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e412:	eb ce                	jmp    c001e3e2 <nanoSleep(unsigned long long)>

c001e414 <Semaphore::acquire()>:
c001e414:	83 ec 0c             	sub    esp,0xc
c001e417:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e41b:	e8 99 fa ff ff       	call   c001deb9 <lockStuff()>
c001e420:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001e423:	3b 10                	cmp    edx,DWORD PTR [eax]
c001e425:	7d 0c                	jge    c001e433 <Semaphore::acquire()+0x1f>
c001e427:	42                   	inc    edx
c001e428:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001e42b:	83 c4 0c             	add    esp,0xc
c001e42e:	e9 20 fe ff ff       	jmp    c001e253 <unlockStuff()>
c001e433:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e439:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001e440:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e443:	85 d2                	test   edx,edx
c001e445:	74 2a                	je     c001e471 <Semaphore::acquire()+0x5d>
c001e447:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001e44a:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e450:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001e453:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e459:	83 ec 0c             	sub    esp,0xc
c001e45c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001e45f:	6a 05                	push   0x5
c001e461:	e8 c2 fe ff ff       	call   c001e328 <blockTask(TaskState)>
c001e466:	83 c4 10             	add    esp,0x10
c001e469:	83 c4 0c             	add    esp,0xc
c001e46c:	e9 e2 fd ff ff       	jmp    c001e253 <unlockStuff()>
c001e471:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001e477:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001e47a:	eb d7                	jmp    c001e453 <Semaphore::acquire()+0x3f>

c001e47c <taskReturned>:
c001e47c:	83 ec 18             	sub    esp,0x18
c001e47f:	68 d4 c4 02 c0       	push   0xc002c4d4
c001e484:	e8 14 c2 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001e489:	83 c4 10             	add    esp,0x10
c001e48c:	83 ec 0c             	sub    esp,0xc
c001e48f:	6a 02                	push   0x2
c001e491:	e8 92 fe ff ff       	call   c001e328 <blockTask(TaskState)>
c001e496:	e8 f7 f9 ff ff       	call   c001de92 <lockScheduler()>
c001e49b:	e8 2e fd ff ff       	call   c001e1ce <schedule()>
c001e4a0:	e8 ef f9 ff ff       	call   c001de94 <unlockScheduler()>
c001e4a5:	83 c4 10             	add    esp,0x10
c001e4a8:	eb e2                	jmp    c001e48c <taskReturned+0x10>

c001e4aa <unblockTask(ThreadControlBlock*)>:
c001e4aa:	53                   	push   ebx
c001e4ab:	83 ec 08             	sub    esp,0x8
c001e4ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e4b2:	e8 db f9 ff ff       	call   c001de92 <lockScheduler()>
c001e4b7:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4ba:	85 c0                	test   eax,eax
c001e4bc:	74 5c                	je     c001e51a <unblockTask(ThreadControlBlock*)+0x70>
c001e4be:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e4c1:	48                   	dec    eax
c001e4c2:	74 31                	je     c001e4f5 <unblockTask(ThreadControlBlock*)+0x4b>
c001e4c4:	83 ec 0c             	sub    esp,0xc
c001e4c7:	68 88 1a 03 c0       	push   0xc0031a88
c001e4cc:	e8 0d a6 00 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4d1:	83 c4 10             	add    esp,0x10
c001e4d4:	85 c0                	test   eax,eax
c001e4d6:	75 17                	jne    c001e4ef <unblockTask(ThreadControlBlock*)+0x45>
c001e4d8:	eb 65                	jmp    c001e53f <unblockTask(ThreadControlBlock*)+0x95>
c001e4da:	83 ec 08             	sub    esp,0x8
c001e4dd:	50                   	push   eax
c001e4de:	68 88 1a 03 c0       	push   0xc0031a88
c001e4e3:	e8 d0 a8 00 00       	call   c0028db8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e4e8:	83 c4 10             	add    esp,0x10
c001e4eb:	85 c0                	test   eax,eax
c001e4ed:	74 50                	je     c001e53f <unblockTask(ThreadControlBlock*)+0x95>
c001e4ef:	39 c3                	cmp    ebx,eax
c001e4f1:	75 e7                	jne    c001e4da <unblockTask(ThreadControlBlock*)+0x30>
c001e4f3:	eb 1c                	jmp    c001e511 <unblockTask(ThreadControlBlock*)+0x67>
c001e4f5:	83 ec 0c             	sub    esp,0xc
c001e4f8:	68 c4 c5 02 c0       	push   0xc002c5c4
c001e4fd:	e8 ed 4a ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e502:	c7 04 24 50 c5 02 c0 	mov    DWORD PTR [esp],0xc002c550
c001e509:	e8 e1 4a ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e50e:	83 c4 10             	add    esp,0x10
c001e511:	83 c4 08             	add    esp,0x8
c001e514:	5b                   	pop    ebx
c001e515:	e9 7a f9 ff ff       	jmp    c001de94 <unlockScheduler()>
c001e51a:	83 ec 0c             	sub    esp,0xc
c001e51d:	68 08 c5 02 c0       	push   0xc002c508
c001e522:	e8 c8 4a ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e527:	c7 04 24 50 c5 02 c0 	mov    DWORD PTR [esp],0xc002c550
c001e52e:	e8 bc 4a ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e533:	83 c4 10             	add    esp,0x10
c001e536:	83 c4 08             	add    esp,0x8
c001e539:	5b                   	pop    ebx
c001e53a:	e9 55 f9 ff ff       	jmp    c001de94 <unlockScheduler()>
c001e53f:	83 ec 08             	sub    esp,0x8
c001e542:	53                   	push   ebx
c001e543:	68 88 1a 03 c0       	push   0xc0031a88
c001e548:	e8 63 a6 00 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e54d:	83 c4 10             	add    esp,0x10
c001e550:	83 c4 08             	add    esp,0x8
c001e553:	5b                   	pop    ebx
c001e554:	e9 3b f9 ff ff       	jmp    c001de94 <unlockScheduler()>

c001e559 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e559:	55                   	push   ebp
c001e55a:	57                   	push   edi
c001e55b:	56                   	push   esi
c001e55c:	53                   	push   ebx
c001e55d:	83 ec 1c             	sub    esp,0x1c
c001e560:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e564:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e567:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e56d:	85 ff                	test   edi,edi
c001e56f:	7e 20                	jle    c001e591 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e571:	31 f6                	xor    esi,esi
c001e573:	83 ec 0c             	sub    esp,0xc
c001e576:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e57d:	46                   	inc    esi
c001e57e:	e8 d0 12 ff ff       	call   c000f853 <free>
c001e583:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e586:	83 c4 10             	add    esp,0x10
c001e589:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e58f:	7f e2                	jg     c001e573 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e591:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e59b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e5a0:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e5a3:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e5a6:	d3 c0                	rol    eax,cl
c001e5a8:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e5af:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5b2:	89 f7                	mov    edi,esi
c001e5b4:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e5bc:	0f 85 74 01 00 00    	jne    c001e736 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e5c2:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e5c8:	85 ed                	test   ebp,ebp
c001e5ca:	74 1b                	je     c001e5e7 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e5cc:	83 ec 0c             	sub    esp,0xc
c001e5cf:	55                   	push   ebp
c001e5d0:	e8 35 be ff ff       	call   c001a40a <EnvVarContainer::~EnvVarContainer()>
c001e5d5:	59                   	pop    ecx
c001e5d6:	5e                   	pop    esi
c001e5d7:	6a 0c                	push   0xc
c001e5d9:	55                   	push   ebp
c001e5da:	e8 30 49 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c001e5df:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e5e2:	83 c4 10             	add    esp,0x10
c001e5e5:	89 f7                	mov    edi,esi
c001e5e7:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e5ed:	85 c0                	test   eax,eax
c001e5ef:	0f 84 aa 00 00 00    	je     c001e69f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e5f5:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e5f8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e5fc:	31 c9                	xor    ecx,ecx
c001e5fe:	eb 10                	jmp    c001e610 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e600:	41                   	inc    ecx
c001e601:	83 f9 10             	cmp    ecx,0x10
c001e604:	0f 84 95 00 00 00    	je     c001e69f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e60a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e610:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e617:	d3 fa                	sar    edx,cl
c001e619:	83 e2 01             	and    edx,0x1
c001e61c:	74 e2                	je     c001e600 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e61e:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e621:	01 ca                	add    edx,ecx
c001e623:	89 d5                	mov    ebp,edx
c001e625:	c1 e5 05             	shl    ebp,0x5
c001e628:	01 ea                	add    edx,ebp
c001e62a:	01 d0                	add    eax,edx
c001e62c:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e632:	83 fd 07             	cmp    ebp,0x7
c001e635:	75 c9                	jne    c001e600 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e637:	05 40 02 00 00       	add    eax,0x240
c001e63c:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e63f:	83 fd ff             	cmp    ebp,0xffffffff
c001e642:	0f 8c 08 01 00 00    	jl     c001e750 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e648:	0f 84 b9 01 00 00    	je     c001e807 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e64e:	85 ed                	test   ebp,ebp
c001e650:	0f 84 a0 01 00 00    	je     c001e7f6 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e656:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e658:	75 a6                	jne    c001e600 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e65a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e660:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e664:	01 d0                	add    eax,edx
c001e666:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e66a:	83 ec 0c             	sub    esp,0xc
c001e66d:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e673:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e676:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e67c:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e683:	50                   	push   eax
c001e684:	e8 21 fe ff ff       	call   c001e4aa <unblockTask(ThreadControlBlock*)>
c001e689:	83 c4 10             	add    esp,0x10
c001e68c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e68f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e693:	89 f7                	mov    edi,esi
c001e695:	41                   	inc    ecx
c001e696:	83 f9 10             	cmp    ecx,0x10
c001e699:	0f 85 6b ff ff ff    	jne    c001e60a <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e69f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e6a5:	85 c0                	test   eax,eax
c001e6a7:	74 5d                	je     c001e706 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6a9:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e6af:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e6b5:	74 4f                	je     c001e706 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e6b7:	83 ec 0c             	sub    esp,0xc
c001e6ba:	68 88 1a 03 c0       	push   0xc0031a88
c001e6bf:	e8 1a a4 00 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e6c4:	c7 04 24 88 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a88
c001e6cb:	89 c7                	mov    edi,eax
c001e6cd:	e8 14 a4 00 00       	call   c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e6d2:	83 c4 10             	add    esp,0x10
c001e6d5:	84 c0                	test   al,al
c001e6d7:	0f 84 e4 00 00 00    	je     c001e7c1 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e6dd:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6e0:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e6e6:	85 d2                	test   edx,edx
c001e6e8:	74 0f                	je     c001e6f9 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e6ea:	83 ec 0c             	sub    esp,0xc
c001e6ed:	8b 02                	mov    eax,DWORD PTR [edx]
c001e6ef:	52                   	push   edx
c001e6f0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e6f3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e6f6:	83 c4 10             	add    esp,0x10
c001e6f9:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e703:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e706:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e70c:	85 db                	test   ebx,ebx
c001e70e:	74 16                	je     c001e726 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e710:	83 ec 0c             	sub    esp,0xc
c001e713:	53                   	push   ebx
c001e714:	e8 e7 3a ff ff       	call   c0012200 <VAS::~VAS()>
c001e719:	58                   	pop    eax
c001e71a:	5a                   	pop    edx
c001e71b:	6a 14                	push   0x14
c001e71d:	53                   	push   ebx
c001e71e:	e8 ec 47 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c001e723:	83 c4 10             	add    esp,0x10
c001e726:	83 ec 0c             	sub    esp,0xc
c001e729:	68 1d c3 02 c0       	push   0xc002c31d
c001e72e:	e8 bc 48 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e733:	83 c4 10             	add    esp,0x10
c001e736:	83 ec 08             	sub    esp,0x8
c001e739:	68 3f 07 00 00       	push   0x73f
c001e73e:	68 2b c3 02 c0       	push   0xc002c32b
c001e743:	e8 a7 48 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e748:	83 c4 2c             	add    esp,0x2c
c001e74b:	5b                   	pop    ebx
c001e74c:	5e                   	pop    esi
c001e74d:	5f                   	pop    edi
c001e74e:	5d                   	pop    ebp
c001e74f:	c3                   	ret    
c001e750:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e754:	83 ec 0c             	sub    esp,0xc
c001e757:	68 08 c6 02 c0       	push   0xc002c608
c001e75c:	e8 3c bf ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001e761:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e764:	83 c4 10             	add    esp,0x10
c001e767:	89 f7                	mov    edi,esi
c001e769:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e76d:	e9 8e fe ff ff       	jmp    c001e600 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e772:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e778:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e77e:	75 1c                	jne    c001e79c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e780:	83 ec 0c             	sub    esp,0xc
c001e783:	68 70 c6 02 c0       	push   0xc002c670
c001e788:	e8 62 48 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e78d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e794:	e8 8f fb ff ff       	call   c001e328 <blockTask(TaskState)>
c001e799:	83 c4 10             	add    esp,0x10
c001e79c:	83 ec 08             	sub    esp,0x8
c001e79f:	56                   	push   esi
c001e7a0:	68 88 1a 03 c0       	push   0xc0031a88
c001e7a5:	e8 06 a4 00 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e7aa:	c7 04 24 88 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a88
c001e7b1:	e8 28 a3 00 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7b6:	83 c4 10             	add    esp,0x10
c001e7b9:	39 f8                	cmp    eax,edi
c001e7bb:	0f 84 1c ff ff ff    	je     c001e6dd <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e7c1:	83 ec 0c             	sub    esp,0xc
c001e7c4:	68 88 1a 03 c0       	push   0xc0031a88
c001e7c9:	e8 10 a3 00 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e7ce:	c7 04 24 88 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a88
c001e7d5:	89 c6                	mov    esi,eax
c001e7d7:	e8 26 a3 00 00       	call   c0028b02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e7dc:	83 c4 10             	add    esp,0x10
c001e7df:	39 f3                	cmp    ebx,esi
c001e7e1:	74 b9                	je     c001e79c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7e3:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e7e6:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e7e9:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e7ef:	75 ab                	jne    c001e79c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e7f1:	e9 7c ff ff ff       	jmp    c001e772 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e7f6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e7fa:	83 ec 0c             	sub    esp,0xc
c001e7fd:	68 3c c6 02 c0       	push   0xc002c63c
c001e802:	e9 55 ff ff ff       	jmp    c001e75c <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e807:	8b 36                	mov    esi,DWORD PTR [esi]
c001e809:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e80d:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e810:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e813:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e819:	01 d7                	add    edi,edx
c001e81b:	89 f8                	mov    eax,edi
c001e81d:	e9 44 fe ff ff       	jmp    c001e666 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e822 <cleanerTaskFunction(void*)>:
c001e822:	53                   	push   ebx
c001e823:	83 ec 08             	sub    esp,0x8
c001e826:	e8 69 f6 ff ff       	call   c001de94 <unlockScheduler()>
c001e82b:	e8 62 f6 ff ff       	call   c001de92 <lockScheduler()>
c001e830:	80 3d 4c 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a4c,0x0
c001e837:	0f 85 8e 00 00 00    	jne    c001e8cb <cleanerTaskFunction(void*)+0xa9>
c001e83d:	83 ec 0c             	sub    esp,0xc
c001e840:	6a 02                	push   0x2
c001e842:	e8 9f fa ff ff       	call   c001e2e6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e847:	83 c4 10             	add    esp,0x10
c001e84a:	c6 05 4c 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031a4c,0x0
c001e851:	e8 63 f6 ff ff       	call   c001deb9 <lockStuff()>
c001e856:	e8 37 f6 ff ff       	call   c001de92 <lockScheduler()>
c001e85b:	83 ec 0c             	sub    esp,0xc
c001e85e:	68 70 1a 03 c0       	push   0xc0031a70
c001e863:	e8 7e a2 00 00       	call   c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e868:	83 c4 10             	add    esp,0x10
c001e86b:	84 c0                	test   al,al
c001e86d:	75 40                	jne    c001e8af <cleanerTaskFunction(void*)+0x8d>
c001e86f:	83 ec 0c             	sub    esp,0xc
c001e872:	68 70 1a 03 c0       	push   0xc0031a70
c001e877:	e8 62 a2 00 00       	call   c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e87c:	c7 04 24 70 1a 03 c0 	mov    DWORD PTR [esp],0xc0031a70
c001e883:	89 c3                	mov    ebx,eax
c001e885:	e8 78 a2 00 00       	call   c0028b02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e88a:	c7 04 24 41 c3 02 c0 	mov    DWORD PTR [esp],0xc002c341
c001e891:	e8 59 47 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e896:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e899:	e8 bb fc ff ff       	call   c001e559 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e89e:	c7 04 24 5a c3 02 c0 	mov    DWORD PTR [esp],0xc002c35a
c001e8a5:	e8 45 47 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e8aa:	83 c4 10             	add    esp,0x10
c001e8ad:	eb ac                	jmp    c001e85b <cleanerTaskFunction(void*)+0x39>
c001e8af:	e8 e0 f5 ff ff       	call   c001de94 <unlockScheduler()>
c001e8b4:	e8 9a f9 ff ff       	call   c001e253 <unlockStuff()>
c001e8b9:	e8 d4 f5 ff ff       	call   c001de92 <lockScheduler()>
c001e8be:	80 3d 4c 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031a4c,0x0
c001e8c5:	0f 84 72 ff ff ff    	je     c001e83d <cleanerTaskFunction(void*)+0x1b>
c001e8cb:	e8 c4 f5 ff ff       	call   c001de94 <unlockScheduler()>
c001e8d0:	e9 75 ff ff ff       	jmp    c001e84a <cleanerTaskFunction(void*)+0x28>

c001e8d5 <terminateTask(int)>:
c001e8d5:	83 ec 14             	sub    esp,0x14
c001e8d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e8dd:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e8e0:	83 c0 0c             	add    eax,0xc
c001e8e3:	50                   	push   eax
c001e8e4:	68 98 c6 02 c0       	push   0xc002c698
c001e8e9:	e8 01 47 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e8ee:	e8 c6 f5 ff ff       	call   c001deb9 <lockStuff()>
c001e8f3:	e8 9a f5 ff ff       	call   c001de92 <lockScheduler()>
c001e8f8:	c7 04 24 6d c3 02 c0 	mov    DWORD PTR [esp],0xc002c36d
c001e8ff:	e8 eb 46 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e904:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e908:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e90d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e910:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e915:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e918:	5a                   	pop    edx
c001e919:	59                   	pop    ecx
c001e91a:	50                   	push   eax
c001e91b:	68 70 1a 03 c0       	push   0xc0031a70
c001e920:	e8 8b a2 00 00       	call   c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e925:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e92a:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e931:	c7 04 24 87 c3 02 c0 	mov    DWORD PTR [esp],0xc002c387
c001e938:	e8 b2 46 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e93d:	83 c4 10             	add    esp,0x10
c001e940:	a1 48 1a 03 c0       	mov    eax,ds:0xc0031a48
c001e945:	85 c0                	test   eax,eax
c001e947:	74 5a                	je     c001e9a3 <terminateTask(int)+0xce>
c001e949:	83 ec 0c             	sub    esp,0xc
c001e94c:	68 a1 c3 02 c0       	push   0xc002c3a1
c001e951:	e8 99 46 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e956:	58                   	pop    eax
c001e957:	c6 05 4c 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031a4c,0x1
c001e95e:	ff 35 48 1a 03 c0    	push   DWORD PTR ds:0xc0031a48
c001e964:	e8 41 fb ff ff       	call   c001e4aa <unblockTask(ThreadControlBlock*)>
c001e969:	c7 04 24 bb c3 02 c0 	mov    DWORD PTR [esp],0xc002c3bb
c001e970:	e8 7a 46 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e975:	83 c4 10             	add    esp,0x10
c001e978:	e8 17 f5 ff ff       	call   c001de94 <unlockScheduler()>
c001e97d:	e8 d1 f8 ff ff       	call   c001e253 <unlockStuff()>
c001e982:	83 ec 0c             	sub    esp,0xc
c001e985:	68 f3 c3 02 c0       	push   0xc002c3f3
c001e98a:	e8 60 46 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e98f:	83 c4 10             	add    esp,0x10
c001e992:	e8 fb f4 ff ff       	call   c001de92 <lockScheduler()>
c001e997:	e8 32 f8 ff ff       	call   c001e1ce <schedule()>
c001e99c:	e8 f3 f4 ff ff       	call   c001de94 <unlockScheduler()>
c001e9a1:	eb ef                	jmp    c001e992 <terminateTask(int)+0xbd>
c001e9a3:	83 ec 0c             	sub    esp,0xc
c001e9a6:	68 d5 c3 02 c0       	push   0xc002c3d5
c001e9ab:	e8 3f 46 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001e9b0:	83 c4 10             	add    esp,0x10
c001e9b3:	eb c3                	jmp    c001e978 <terminateTask(int)+0xa3>

c001e9b5 <Thr::terminateFromIRQ(int)>:
c001e9b5:	83 ec 18             	sub    esp,0x18
c001e9b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9bc:	e8 14 ff ff ff       	call   c001e8d5 <terminateTask(int)>
c001e9c1:	90                   	nop

c001e9c2 <Semaphore::release()>:
c001e9c2:	83 ec 0c             	sub    esp,0xc
c001e9c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9c9:	e8 eb f4 ff ff       	call   c001deb9 <lockStuff()>
c001e9ce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e9d1:	85 d2                	test   edx,edx
c001e9d3:	74 1a                	je     c001e9ef <Semaphore::release()+0x2d>
c001e9d5:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e9d8:	83 ec 0c             	sub    esp,0xc
c001e9db:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e9de:	52                   	push   edx
c001e9df:	e8 c6 fa ff ff       	call   c001e4aa <unblockTask(ThreadControlBlock*)>
c001e9e4:	83 c4 10             	add    esp,0x10
c001e9e7:	83 c4 0c             	add    esp,0xc
c001e9ea:	e9 64 f8 ff ff       	jmp    c001e253 <unlockStuff()>
c001e9ef:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e9f2:	83 c4 0c             	add    esp,0xc
c001e9f5:	e9 59 f8 ff ff       	jmp    c001e253 <unlockStuff()>

c001e9fa <__static_initialization_and_destruction_0(int, int)>:
c001e9fa:	83 ec 0c             	sub    esp,0xc
c001e9fd:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ea02:	0f 85 88 00 00 00    	jne    c001ea90 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea08:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ea10:	75 7e                	jne    c001ea90 <__static_initialization_and_destruction_0(int, int)+0x96>
c001ea12:	83 ec 0c             	sub    esp,0xc
c001ea15:	68 88 1a 03 c0       	push   0xc0031a88
c001ea1a:	e8 41 a3 00 00       	call   c0028d60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea1f:	83 c4 10             	add    esp,0x10
c001ea22:	83 ec 04             	sub    esp,0x4
c001ea25:	68 50 d4 02 c0       	push   0xc002d450
c001ea2a:	68 88 1a 03 c0       	push   0xc0031a88
c001ea2f:	68 20 8d 02 c0       	push   0xc0028d20
c001ea34:	e8 50 44 ff ff       	call   c0012e89 <__cxa_atexit>
c001ea39:	83 c4 10             	add    esp,0x10
c001ea3c:	83 ec 0c             	sub    esp,0xc
c001ea3f:	68 7c 1a 03 c0       	push   0xc0031a7c
c001ea44:	e8 17 a3 00 00       	call   c0028d60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea49:	83 c4 10             	add    esp,0x10
c001ea4c:	83 ec 04             	sub    esp,0x4
c001ea4f:	68 50 d4 02 c0       	push   0xc002d450
c001ea54:	68 7c 1a 03 c0       	push   0xc0031a7c
c001ea59:	68 20 8d 02 c0       	push   0xc0028d20
c001ea5e:	e8 26 44 ff ff       	call   c0012e89 <__cxa_atexit>
c001ea63:	83 c4 10             	add    esp,0x10
c001ea66:	83 ec 0c             	sub    esp,0xc
c001ea69:	68 70 1a 03 c0       	push   0xc0031a70
c001ea6e:	e8 ed a2 00 00       	call   c0028d60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ea73:	83 c4 10             	add    esp,0x10
c001ea76:	83 ec 04             	sub    esp,0x4
c001ea79:	68 50 d4 02 c0       	push   0xc002d450
c001ea7e:	68 70 1a 03 c0       	push   0xc0031a70
c001ea83:	68 20 8d 02 c0       	push   0xc0028d20
c001ea88:	e8 fc 43 ff ff       	call   c0012e89 <__cxa_atexit>
c001ea8d:	83 c4 10             	add    esp,0x10
c001ea90:	90                   	nop
c001ea91:	83 c4 0c             	add    esp,0xc
c001ea94:	c3                   	ret    

c001ea95 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001ea95:	83 ec 0c             	sub    esp,0xc
c001ea98:	83 ec 08             	sub    esp,0x8
c001ea9b:	68 ff ff 00 00       	push   0xffff
c001eaa0:	6a 01                	push   0x1
c001eaa2:	e8 53 ff ff ff       	call   c001e9fa <__static_initialization_and_destruction_0(int, int)>
c001eaa7:	83 c4 10             	add    esp,0x10
c001eaaa:	83 c4 0c             	add    esp,0xc
c001eaad:	c3                   	ret    

c001eaae <Vm::inbv(unsigned short)>:
c001eaae:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001eab2:	66 81 fa fe fe       	cmp    dx,0xfefe
c001eab7:	75 06                	jne    c001eabf <Vm::inbv(unsigned short)+0x11>
c001eab9:	a0 cc 1a 03 c0       	mov    al,ds:0xc0031acc
c001eabe:	c3                   	ret    
c001eabf:	ec                   	in     al,dx
c001eac0:	c3                   	ret    

c001eac1 <Vm::outbv(unsigned short, unsigned char)>:
c001eac1:	53                   	push   ebx
c001eac2:	83 ec 08             	sub    esp,0x8
c001eac5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001eac9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001eacd:	66 81 fa fe fe       	cmp    dx,0xfefe
c001ead2:	75 38                	jne    c001eb0c <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001ead4:	0f b6 c3             	movzx  eax,bl
c001ead7:	51                   	push   ecx
c001ead8:	51                   	push   ecx
c001ead9:	50                   	push   eax
c001eada:	68 b7 c6 02 c0       	push   0xc002c6b7
c001eadf:	e8 0b 45 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001eae4:	8b 15 cc 1a 03 c0    	mov    edx,DWORD PTR ds:0xc0031acc
c001eaea:	83 c4 10             	add    esp,0x10
c001eaed:	8d 42 01             	lea    eax,[edx+0x1]
c001eaf0:	88 9a e0 1a 03 c0    	mov    BYTE PTR [edx-0x3ffce520],bl
c001eaf6:	a3 cc 1a 03 c0       	mov    ds:0xc0031acc,eax
c001eafb:	83 f8 20             	cmp    eax,0x20
c001eafe:	75 0f                	jne    c001eb0f <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb00:	c7 05 cc 1a 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc0031acc,0x1f
c001eb0a:	eb 03                	jmp    c001eb0f <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001eb0c:	88 d8                	mov    al,bl
c001eb0e:	ee                   	out    dx,al
c001eb0f:	83 c4 08             	add    esp,0x8
c001eb12:	5b                   	pop    ebx
c001eb13:	c3                   	ret    

c001eb14 <Vm::realToLinear(unsigned short, unsigned short)>:
c001eb14:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001eb19:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001eb1e:	c1 e0 04             	shl    eax,0x4
c001eb21:	01 d0                	add    eax,edx
c001eb23:	c3                   	ret    

c001eb24 <Vm::getSegment(unsigned int)>:
c001eb24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb28:	c1 e8 10             	shr    eax,0x10
c001eb2b:	c3                   	ret    

c001eb2c <Vm::getOffset(unsigned int)>:
c001eb2c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001eb30:	c3                   	ret    

c001eb31 <Vm::mainloop2()>:
c001eb31:	83 ec 0c             	sub    esp,0xc
c001eb34:	e8 59 f3 ff ff       	call   c001de92 <lockScheduler()>
c001eb39:	83 ec 0c             	sub    esp,0xc
c001eb3c:	c6 05 c5 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031ac5,0x1
c001eb43:	6a 02                	push   0x2
c001eb45:	e8 9c f7 ff ff       	call   c001e2e6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb4a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001eb4f:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001eb53:	52                   	push   edx
c001eb54:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001eb58:	52                   	push   edx
c001eb59:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001eb5d:	52                   	push   edx
c001eb5e:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001eb62:	50                   	push   eax
c001eb63:	e8 92 17 fe ff       	call   c00002fa <goToVM86>
c001eb68:	83 c4 2c             	add    esp,0x2c
c001eb6b:	c3                   	ret    

c001eb6c <Vm::mainVm8086Loop(void*)>:
c001eb6c:	83 ec 0c             	sub    esp,0xc
c001eb6f:	e8 20 f3 ff ff       	call   c001de94 <unlockScheduler()>
c001eb74:	83 c4 0c             	add    esp,0xc
c001eb77:	eb b8                	jmp    c001eb31 <Vm::mainloop2()>

c001eb79 <Vm::mainloop3(unsigned long)>:
c001eb79:	53                   	push   ebx
c001eb7a:	83 ec 08             	sub    esp,0x8
c001eb7d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001eb81:	e8 0c f3 ff ff       	call   c001de92 <lockScheduler()>
c001eb86:	83 ec 0c             	sub    esp,0xc
c001eb89:	89 1d c0 1a 03 c0    	mov    DWORD PTR ds:0xc0031ac0,ebx
c001eb8f:	6a 02                	push   0x2
c001eb91:	c6 05 c4 1a 03 c0 01 	mov    BYTE PTR ds:0xc0031ac4,0x1
c001eb98:	e8 49 f7 ff ff       	call   c001e2e6 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001eb9d:	83 c4 18             	add    esp,0x18
c001eba0:	5b                   	pop    ebx
c001eba1:	eb 8e                	jmp    c001eb31 <Vm::mainloop2()>

c001eba3 <Vm::initialise8086()>:
c001eba3:	83 ec 0c             	sub    esp,0xc
c001eba6:	68 80 00 00 00       	push   0x80
c001ebab:	6a 00                	push   0x0
c001ebad:	68 6c eb 01 c0       	push   0xc001eb6c
c001ebb2:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001ebb8:	e8 07 f4 ff ff       	call   c001dfc4 <Process::createThread(void (*)(void*), void*, int)>
c001ebbd:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001ebc4:	a3 c8 1a 03 c0       	mov    ds:0xc0031ac8,eax
c001ebc9:	68 00 01 00 00       	push   0x100
c001ebce:	a1 94 1a 03 c0       	mov    eax,ds:0xc0031a94
c001ebd3:	6a 00                	push   0x0
c001ebd5:	6a 00                	push   0x0
c001ebd7:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ebdd:	e8 7e 3a ff ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001ebe2:	83 c4 2c             	add    esp,0x2c
c001ebe5:	c3                   	ret    

c001ebe6 <Vm::finish8086()>:
c001ebe6:	53                   	push   ebx
c001ebe7:	83 ec 08             	sub    esp,0x8
c001ebea:	e8 a3 f2 ff ff       	call   c001de92 <lockScheduler()>
c001ebef:	80 3d c4 1a 03 c0 00 	cmp    BYTE PTR ds:0xc0031ac4,0x0
c001ebf6:	75 0c                	jne    c001ec04 <Vm::finish8086()+0x1e>
c001ebf8:	e8 d1 f5 ff ff       	call   c001e1ce <schedule()>
c001ebfd:	e8 92 f2 ff ff       	call   c001de94 <unlockScheduler()>
c001ec02:	eb e6                	jmp    c001ebea <Vm::finish8086()+0x4>
c001ec04:	83 ec 0c             	sub    esp,0xc
c001ec07:	8b 1d c0 1a 03 c0    	mov    ebx,DWORD PTR ds:0xc0031ac0
c001ec0d:	ff 35 c8 1a 03 c0    	push   DWORD PTR ds:0xc0031ac8
c001ec13:	c6 05 c4 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031ac4,0x0
c001ec1a:	e8 8b f8 ff ff       	call   c001e4aa <unblockTask(ThreadControlBlock*)>
c001ec1f:	e8 70 f2 ff ff       	call   c001de94 <unlockScheduler()>
c001ec24:	89 d8                	mov    eax,ebx
c001ec26:	83 c4 18             	add    esp,0x18
c001ec29:	5b                   	pop    ebx
c001ec2a:	c3                   	ret    

c001ec2b <Vm::getOutput8086(unsigned char*)>:
c001ec2b:	83 ec 10             	sub    esp,0x10
c001ec2e:	ff 35 cc 1a 03 c0    	push   DWORD PTR ds:0xc0031acc
c001ec34:	68 e0 1a 03 c0       	push   0xc0031ae0
c001ec39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ec3d:	e8 02 1b fe ff       	call   c0000744 <memcpy>
c001ec42:	a1 cc 1a 03 c0       	mov    eax,ds:0xc0031acc
c001ec47:	c7 05 cc 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031acc,0x0
c001ec51:	83 c4 1c             	add    esp,0x1c
c001ec54:	c3                   	ret    

c001ec55 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001ec55:	55                   	push   ebp
c001ec56:	57                   	push   edi
c001ec57:	56                   	push   esi
c001ec58:	53                   	push   ebx
c001ec59:	83 ec 2c             	sub    esp,0x2c
c001ec5c:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001ec60:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001ec64:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001ec68:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001ec6c:	e8 21 f2 ff ff       	call   c001de92 <lockScheduler()>
c001ec71:	a0 c5 1a 03 c0       	mov    al,ds:0xc0031ac5
c001ec76:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001ec7a:	84 c0                	test   al,al
c001ec7c:	75 0c                	jne    c001ec8a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001ec7e:	e8 4b f5 ff ff       	call   c001e1ce <schedule()>
c001ec83:	e8 0c f2 ff ff       	call   c001de94 <unlockScheduler()>
c001ec88:	eb e2                	jmp    c001ec6c <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001ec8a:	a1 c8 1a 03 c0       	mov    eax,ds:0xc0031ac8
c001ec8f:	c7 05 cc 1a 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031acc,0x0
c001ec99:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001ec9d:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001eca1:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001eca5:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001eca9:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001ecad:	50                   	push   eax
c001ecae:	6a 20                	push   0x20
c001ecb0:	6a 00                	push   0x0
c001ecb2:	68 e0 1a 03 c0       	push   0xc0031ae0
c001ecb7:	e8 bc 1a fe ff       	call   c0000778 <memset>
c001ecbc:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ecc3:	e8 7b 0b ff ff       	call   c000f843 <malloc>
c001ecc8:	83 c4 0c             	add    esp,0xc
c001eccb:	89 c7                	mov    edi,eax
c001eccd:	ff 35 94 1a 03 c0    	push   DWORD PTR ds:0xc0031a94
c001ecd3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001ecd7:	50                   	push   eax
c001ecd8:	e8 6b 48 ff ff       	call   c0013548 <File::File(char const*, Process*)>
c001ecdd:	83 c4 10             	add    esp,0x10
c001ece0:	85 ff                	test   edi,edi
c001ece2:	75 0a                	jne    c001ecee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001ece4:	83 ec 0c             	sub    esp,0xc
c001ece7:	68 d3 c6 02 c0       	push   0xc002c6d3
c001ecec:	eb 27                	jmp    c001ed15 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001ecee:	50                   	push   eax
c001ecef:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ecf3:	50                   	push   eax
c001ecf4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ecf8:	50                   	push   eax
c001ecf9:	57                   	push   edi
c001ecfa:	e8 59 4b ff ff       	call   c0013858 <File::stat(unsigned long long*, bool*)>
c001ecff:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001ed04:	83 c4 10             	add    esp,0x10
c001ed07:	89 e8                	mov    eax,ebp
c001ed09:	84 c0                	test   al,al
c001ed0b:	74 19                	je     c001ed26 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001ed0d:	83 ec 0c             	sub    esp,0xc
c001ed10:	68 e7 c6 02 c0       	push   0xc002c6e7
c001ed15:	e8 83 b9 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001ed1a:	31 ed                	xor    ebp,ebp
c001ed1c:	e8 73 f1 ff ff       	call   c001de94 <unlockScheduler()>
c001ed21:	83 c4 10             	add    esp,0x10
c001ed24:	eb 75                	jmp    c001ed9b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed26:	50                   	push   eax
c001ed27:	50                   	push   eax
c001ed28:	6a 01                	push   0x1
c001ed2a:	57                   	push   edi
c001ed2b:	e8 7c 48 ff ff       	call   c00135ac <File::open(FileOpenMode)>
c001ed30:	83 c4 10             	add    esp,0x10
c001ed33:	85 c0                	test   eax,eax
c001ed35:	74 17                	je     c001ed4e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001ed37:	83 ec 0c             	sub    esp,0xc
c001ed3a:	68 00 c7 02 c0       	push   0xc002c700
c001ed3f:	e8 59 b9 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001ed44:	e8 4b f1 ff ff       	call   c001de94 <unlockScheduler()>
c001ed49:	83 c4 10             	add    esp,0x10
c001ed4c:	eb 4d                	jmp    c001ed9b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001ed4e:	0f b7 f6             	movzx  esi,si
c001ed51:	50                   	push   eax
c001ed52:	0f b7 db             	movzx  ebx,bx
c001ed55:	50                   	push   eax
c001ed56:	56                   	push   esi
c001ed57:	53                   	push   ebx
c001ed58:	e8 b7 fd ff ff       	call   c001eb14 <Vm::realToLinear(unsigned short, unsigned short)>
c001ed5d:	5a                   	pop    edx
c001ed5e:	8b 17                	mov    edx,DWORD PTR [edi]
c001ed60:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001ed64:	51                   	push   ecx
c001ed65:	50                   	push   eax
c001ed66:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed6a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ed6e:	57                   	push   edi
c001ed6f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001ed72:	83 c4 14             	add    esp,0x14
c001ed75:	57                   	push   edi
c001ed76:	e8 8f 48 ff ff       	call   c001360a <File::close()>
c001ed7b:	c6 05 c5 1a 03 c0 00 	mov    BYTE PTR ds:0xc0031ac5,0x0
c001ed82:	e8 0d f1 ff ff       	call   c001de94 <unlockScheduler()>
c001ed87:	59                   	pop    ecx
c001ed88:	ff 35 c8 1a 03 c0    	push   DWORD PTR ds:0xc0031ac8
c001ed8e:	e8 17 f7 ff ff       	call   c001e4aa <unblockTask(ThreadControlBlock*)>
c001ed93:	83 c4 10             	add    esp,0x10
c001ed96:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ed9b:	83 c4 2c             	add    esp,0x2c
c001ed9e:	89 e8                	mov    eax,ebp
c001eda0:	5b                   	pop    ebx
c001eda1:	5e                   	pop    esi
c001eda2:	5f                   	pop    edi
c001eda3:	5d                   	pop    ebp
c001eda4:	c3                   	ret    

c001eda5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001eda5:	57                   	push   edi
c001eda6:	56                   	push   esi
c001eda7:	53                   	push   ebx
c001eda8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001edac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001edb0:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001edb4:	83 e8 06             	sub    eax,0x6
c001edb7:	0f b7 c0             	movzx  eax,ax
c001edba:	50                   	push   eax
c001edbb:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001edc0:	50                   	push   eax
c001edc1:	e8 4e fd ff ff       	call   c001eb14 <Vm::realToLinear(unsigned short, unsigned short)>
c001edc6:	5a                   	pop    edx
c001edc7:	5e                   	pop    esi
c001edc8:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001edcb:	8d 56 fa             	lea    edx,[esi-0x6]
c001edce:	81 e2 ff ff 00 00    	and    edx,0xffff
c001edd4:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001edd7:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001edda:	83 c2 02             	add    edx,0x2
c001eddd:	66 89 10             	mov    WORD PTR [eax],dx
c001ede0:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001ede3:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001ede7:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001edea:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001edee:	89 d6                	mov    esi,edx
c001edf0:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001edf6:	66 81 e6 ff fd       	and    si,0xfdff
c001edfb:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001edff:	74 07                	je     c001ee08 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001ee01:	89 d6                	mov    esi,edx
c001ee03:	66 81 ce 00 02       	or     si,0x200
c001ee08:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001ee0c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee11:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee15:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001ee1d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001ee20:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001ee28:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001ee2b:	5b                   	pop    ebx
c001ee2c:	5e                   	pop    esi
c001ee2d:	5f                   	pop    edi
c001ee2e:	c3                   	ret    

c001ee2f <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001ee2f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee34:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee39:	c1 e0 04             	shl    eax,0x4
c001ee3c:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001ee3f:	c3                   	ret    

c001ee40 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001ee40:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee45:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee4a:	c1 e0 04             	shl    eax,0x4
c001ee4d:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001ee51:	c3                   	ret    

c001ee52 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001ee52:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee57:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee5c:	c1 e0 04             	shl    eax,0x4
c001ee5f:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001ee62:	c3                   	ret    

c001ee63 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001ee63:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee68:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee6d:	c1 e0 04             	shl    eax,0x4
c001ee70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee74:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001ee77:	c3                   	ret    

c001ee78 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001ee78:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee7d:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee82:	c1 e0 04             	shl    eax,0x4
c001ee85:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee89:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ee8d:	c3                   	ret    

c001ee8e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ee8e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ee93:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ee98:	c1 e0 04             	shl    eax,0x4
c001ee9b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ee9f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001eea2:	c3                   	ret    

c001eea3 <Vm::faultHandler(regs*)>:
c001eea3:	55                   	push   ebp
c001eea4:	57                   	push   edi
c001eea5:	56                   	push   esi
c001eea6:	53                   	push   ebx
c001eea7:	83 ec 1c             	sub    esp,0x1c
c001eeaa:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001eeae:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001eeb1:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001eeb4:	0f b7 c1             	movzx  eax,cx
c001eeb7:	50                   	push   eax
c001eeb8:	0f b7 c3             	movzx  eax,bx
c001eebb:	c1 e3 04             	shl    ebx,0x4
c001eebe:	50                   	push   eax
c001eebf:	e8 50 fc ff ff       	call   c001eb14 <Vm::realToLinear(unsigned short, unsigned short)>
c001eec4:	5a                   	pop    edx
c001eec5:	89 c5                	mov    ebp,eax
c001eec7:	5e                   	pop    esi
c001eec8:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001eecc:	50                   	push   eax
c001eecd:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001eed1:	50                   	push   eax
c001eed2:	e8 3d fc ff ff       	call   c001eb14 <Vm::realToLinear(unsigned short, unsigned short)>
c001eed7:	01 cb                	add    ebx,ecx
c001eed9:	89 c6                	mov    esi,eax
c001eedb:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001eedf:	50                   	push   eax
c001eee0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eee4:	50                   	push   eax
c001eee5:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001eee9:	50                   	push   eax
c001eeea:	55                   	push   ebp
c001eeeb:	53                   	push   ebx
c001eeec:	b3 06                	mov    bl,0x6
c001eeee:	68 19 c7 02 c0       	push   0xc002c719
c001eef3:	e8 f7 40 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001eef8:	83 c4 20             	add    esp,0x20
c001eefb:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ef00:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ef05:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ef09:	3c 9d                	cmp    al,0x9d
c001ef0b:	0f 84 d7 02 00 00    	je     c001f1e8 <Vm::faultHandler(regs*)+0x345>
c001ef11:	0f 87 a3 00 00 00    	ja     c001efba <Vm::faultHandler(regs*)+0x117>
c001ef17:	3c 66                	cmp    al,0x66
c001ef19:	0f 84 15 02 00 00    	je     c001f134 <Vm::faultHandler(regs*)+0x291>
c001ef1f:	77 5f                	ja     c001ef80 <Vm::faultHandler(regs*)+0xdd>
c001ef21:	3c 36                	cmp    al,0x36
c001ef23:	0f 84 f1 01 00 00    	je     c001f11a <Vm::faultHandler(regs*)+0x277>
c001ef29:	77 28                	ja     c001ef53 <Vm::faultHandler(regs*)+0xb0>
c001ef2b:	3c 26                	cmp    al,0x26
c001ef2d:	0f 84 99 01 00 00    	je     c001f0cc <Vm::faultHandler(regs*)+0x229>
c001ef33:	3c 2e                	cmp    al,0x2e
c001ef35:	0f 85 3b 07 00 00    	jne    c001f676 <Vm::faultHandler(regs*)+0x7d3>
c001ef3b:	83 ec 0c             	sub    esp,0xc
c001ef3e:	31 db                	xor    ebx,ebx
c001ef40:	68 2e c7 02 c0       	push   0xc002c72e
c001ef45:	e8 a5 40 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001ef4a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef4d:	83 c4 10             	add    esp,0x10
c001ef50:	45                   	inc    ebp
c001ef51:	eb b2                	jmp    c001ef05 <Vm::faultHandler(regs*)+0x62>
c001ef53:	3c 64                	cmp    al,0x64
c001ef55:	0f 84 8b 01 00 00    	je     c001f0e6 <Vm::faultHandler(regs*)+0x243>
c001ef5b:	0f 87 9f 01 00 00    	ja     c001f100 <Vm::faultHandler(regs*)+0x25d>
c001ef61:	3c 3e                	cmp    al,0x3e
c001ef63:	0f 85 0d 07 00 00    	jne    c001f676 <Vm::faultHandler(regs*)+0x7d3>
c001ef69:	83 ec 0c             	sub    esp,0xc
c001ef6c:	b3 01                	mov    bl,0x1
c001ef6e:	68 32 c7 02 c0       	push   0xc002c732
c001ef73:	e8 77 40 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001ef78:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ef7b:	83 c4 10             	add    esp,0x10
c001ef7e:	eb d0                	jmp    c001ef50 <Vm::faultHandler(regs*)+0xad>
c001ef80:	3c 6d                	cmp    al,0x6d
c001ef82:	0f 84 af 03 00 00    	je     c001f337 <Vm::faultHandler(regs*)+0x494>
c001ef88:	77 15                	ja     c001ef9f <Vm::faultHandler(regs*)+0xfc>
c001ef8a:	3c 67                	cmp    al,0x67
c001ef8c:	0f 84 bf 01 00 00    	je     c001f151 <Vm::faultHandler(regs*)+0x2ae>
c001ef92:	3c 6c                	cmp    al,0x6c
c001ef94:	0f 84 3f 03 00 00    	je     c001f2d9 <Vm::faultHandler(regs*)+0x436>
c001ef9a:	e9 d7 06 00 00       	jmp    c001f676 <Vm::faultHandler(regs*)+0x7d3>
c001ef9f:	3c 6f                	cmp    al,0x6f
c001efa1:	0f 84 a4 04 00 00    	je     c001f44b <Vm::faultHandler(regs*)+0x5a8>
c001efa7:	0f 82 11 04 00 00    	jb     c001f3be <Vm::faultHandler(regs*)+0x51b>
c001efad:	3c 9c                	cmp    al,0x9c
c001efaf:	0f 84 ba 01 00 00    	je     c001f16f <Vm::faultHandler(regs*)+0x2cc>
c001efb5:	e9 bc 06 00 00       	jmp    c001f676 <Vm::faultHandler(regs*)+0x7d3>
c001efba:	3c ec                	cmp    al,0xec
c001efbc:	0f 84 24 06 00 00    	je     c001f5e6 <Vm::faultHandler(regs*)+0x743>
c001efc2:	0f 87 93 00 00 00    	ja     c001f05b <Vm::faultHandler(regs*)+0x1b8>
c001efc8:	3c e4                	cmp    al,0xe4
c001efca:	0f 84 5c 05 00 00    	je     c001f52c <Vm::faultHandler(regs*)+0x689>
c001efd0:	77 6a                	ja     c001f03c <Vm::faultHandler(regs*)+0x199>
c001efd2:	3c cd                	cmp    al,0xcd
c001efd4:	0f 84 7e 02 00 00    	je     c001f258 <Vm::faultHandler(regs*)+0x3b5>
c001efda:	3c cf                	cmp    al,0xcf
c001efdc:	0f 85 94 06 00 00    	jne    c001f676 <Vm::faultHandler(regs*)+0x7d3>
c001efe2:	83 ec 0c             	sub    esp,0xc
c001efe5:	68 76 c7 02 c0       	push   0xc002c776
c001efea:	e8 00 40 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001efef:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001eff2:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001eff5:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001eff9:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001effc:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f000:	0d 00 02 02 00       	or     eax,0x20200
c001f005:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f008:	56                   	push   esi
c001f009:	53                   	push   ebx
c001f00a:	52                   	push   edx
c001f00b:	68 7c c7 02 c0       	push   0xc002c77c
c001f010:	e8 da 3f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f015:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f019:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f01f:	66 c1 e8 09          	shr    ax,0x9
c001f023:	83 e0 01             	and    eax,0x1
c001f026:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f029:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f02c:	83 c0 06             	add    eax,0x6
c001f02f:	25 ff ff 00 00       	and    eax,0xffff
c001f034:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f037:	e9 95 02 00 00       	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x42e>
c001f03c:	3c e6                	cmp    al,0xe6
c001f03e:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f042:	0f 84 4e 05 00 00    	je     c001f596 <Vm::faultHandler(regs*)+0x6f3>
c001f048:	0f 82 0a 05 00 00    	jb     c001f558 <Vm::faultHandler(regs*)+0x6b5>
c001f04e:	3c e7                	cmp    al,0xe7
c001f050:	0f 84 69 05 00 00    	je     c001f5bf <Vm::faultHandler(regs*)+0x71c>
c001f056:	e9 1b 06 00 00       	jmp    c001f676 <Vm::faultHandler(regs*)+0x7d3>
c001f05b:	3c ef                	cmp    al,0xef
c001f05d:	0f 84 e6 05 00 00    	je     c001f649 <Vm::faultHandler(regs*)+0x7a6>
c001f063:	77 37                	ja     c001f09c <Vm::faultHandler(regs*)+0x1f9>
c001f065:	3c ed                	cmp    al,0xed
c001f067:	0f 84 a3 05 00 00    	je     c001f610 <Vm::faultHandler(regs*)+0x76d>
c001f06d:	3c ee                	cmp    al,0xee
c001f06f:	0f 85 01 06 00 00    	jne    c001f676 <Vm::faultHandler(regs*)+0x7d3>
c001f075:	52                   	push   edx
c001f076:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f079:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f07c:	68 17 c8 02 c0       	push   0xc002c817
c001f081:	e8 69 3f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f086:	59                   	pop    ecx
c001f087:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f08b:	5b                   	pop    ebx
c001f08c:	50                   	push   eax
c001f08d:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f091:	50                   	push   eax
c001f092:	e8 2a fa ff ff       	call   c001eac1 <Vm::outbv(unsigned short, unsigned char)>
c001f097:	e9 a5 05 00 00       	jmp    c001f641 <Vm::faultHandler(regs*)+0x79e>
c001f09c:	3c fa                	cmp    al,0xfa
c001f09e:	0f 84 f7 01 00 00    	je     c001f29b <Vm::faultHandler(regs*)+0x3f8>
c001f0a4:	3c fb                	cmp    al,0xfb
c001f0a6:	0f 84 0a 02 00 00    	je     c001f2b6 <Vm::faultHandler(regs*)+0x413>
c001f0ac:	3c f3                	cmp    al,0xf3
c001f0ae:	0f 85 c2 05 00 00    	jne    c001f676 <Vm::faultHandler(regs*)+0x7d3>
c001f0b4:	83 ec 0c             	sub    esp,0xc
c001f0b7:	68 4f c7 02 c0       	push   0xc002c74f
c001f0bc:	e8 2e 3f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f0c1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0c4:	83 c4 10             	add    esp,0x10
c001f0c7:	e9 84 fe ff ff       	jmp    c001ef50 <Vm::faultHandler(regs*)+0xad>
c001f0cc:	83 ec 0c             	sub    esp,0xc
c001f0cf:	b3 02                	mov    bl,0x2
c001f0d1:	68 2a c7 02 c0       	push   0xc002c72a
c001f0d6:	e8 14 3f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f0db:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0de:	83 c4 10             	add    esp,0x10
c001f0e1:	e9 6a fe ff ff       	jmp    c001ef50 <Vm::faultHandler(regs*)+0xad>
c001f0e6:	83 ec 0c             	sub    esp,0xc
c001f0e9:	b3 03                	mov    bl,0x3
c001f0eb:	68 36 c7 02 c0       	push   0xc002c736
c001f0f0:	e8 fa 3e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f0f5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f0f8:	83 c4 10             	add    esp,0x10
c001f0fb:	e9 50 fe ff ff       	jmp    c001ef50 <Vm::faultHandler(regs*)+0xad>
c001f100:	83 ec 0c             	sub    esp,0xc
c001f103:	b3 04                	mov    bl,0x4
c001f105:	68 3a c7 02 c0       	push   0xc002c73a
c001f10a:	e8 e0 3e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f10f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f112:	83 c4 10             	add    esp,0x10
c001f115:	e9 36 fe ff ff       	jmp    c001ef50 <Vm::faultHandler(regs*)+0xad>
c001f11a:	83 ec 0c             	sub    esp,0xc
c001f11d:	b3 05                	mov    bl,0x5
c001f11f:	68 3e c7 02 c0       	push   0xc002c73e
c001f124:	e8 c6 3e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f129:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f12c:	83 c4 10             	add    esp,0x10
c001f12f:	e9 1c fe ff ff       	jmp    c001ef50 <Vm::faultHandler(regs*)+0xad>
c001f134:	83 ec 0c             	sub    esp,0xc
c001f137:	68 42 c7 02 c0       	push   0xc002c742
c001f13c:	e8 ae 3e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f141:	83 c4 10             	add    esp,0x10
c001f144:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f147:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f14c:	e9 ff fd ff ff       	jmp    c001ef50 <Vm::faultHandler(regs*)+0xad>
c001f151:	50                   	push   eax
c001f152:	50                   	push   eax
c001f153:	6a 01                	push   0x1
c001f155:	68 47 c7 02 c0       	push   0xc002c747
c001f15a:	e8 90 3e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f15f:	83 c4 10             	add    esp,0x10
c001f162:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f165:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f16a:	e9 e1 fd ff ff       	jmp    c001ef50 <Vm::faultHandler(regs*)+0xad>
c001f16f:	83 ec 0c             	sub    esp,0xc
c001f172:	68 55 c7 02 c0       	push   0xc002c755
c001f177:	e8 73 3e ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f17c:	83 c4 10             	add    esp,0x10
c001f17f:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f182:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f187:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f18a:	74 2f                	je     c001f1bb <Vm::faultHandler(regs*)+0x318>
c001f18c:	83 ea 04             	sub    edx,0x4
c001f18f:	25 ff 0d 00 00       	and    eax,0xdff
c001f194:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f19a:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f19d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1a0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1a6:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1aa:	0f 84 bf 04 00 00    	je     c001f66f <Vm::faultHandler(regs*)+0x7cc>
c001f1b0:	80 cc 02             	or     ah,0x2
c001f1b3:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f1b6:	e9 b4 04 00 00       	jmp    c001f66f <Vm::faultHandler(regs*)+0x7cc>
c001f1bb:	83 ea 02             	sub    edx,0x2
c001f1be:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f1c4:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f1c7:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1cb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f1d1:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f1d5:	74 05                	je     c001f1dc <Vm::faultHandler(regs*)+0x339>
c001f1d7:	80 cc 02             	or     ah,0x2
c001f1da:	eb 03                	jmp    c001f1df <Vm::faultHandler(regs*)+0x33c>
c001f1dc:	80 e4 fd             	and    ah,0xfd
c001f1df:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f1e3:	e9 87 04 00 00       	jmp    c001f66f <Vm::faultHandler(regs*)+0x7cc>
c001f1e8:	83 ec 0c             	sub    esp,0xc
c001f1eb:	68 5c c7 02 c0       	push   0xc002c75c
c001f1f0:	e8 fa 3d ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f1f5:	83 c4 10             	add    esp,0x10
c001f1f8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1fd:	74 28                	je     c001f227 <Vm::faultHandler(regs*)+0x384>
c001f1ff:	8b 06                	mov    eax,DWORD PTR [esi]
c001f201:	25 ff 0d 00 00       	and    eax,0xdff
c001f206:	0d 00 02 02 00       	or     eax,0x20200
c001f20b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f20e:	8b 06                	mov    eax,DWORD PTR [esi]
c001f210:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f216:	c1 e8 09             	shr    eax,0x9
c001f219:	83 e0 01             	and    eax,0x1
c001f21c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f21f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f222:	83 c0 04             	add    eax,0x4
c001f225:	eb 24                	jmp    c001f24b <Vm::faultHandler(regs*)+0x3a8>
c001f227:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f22a:	0d 00 02 02 00       	or     eax,0x20200
c001f22f:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f232:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f235:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f23b:	66 c1 e8 09          	shr    ax,0x9
c001f23f:	83 e0 01             	and    eax,0x1
c001f242:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f245:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f248:	83 c0 02             	add    eax,0x2
c001f24b:	25 ff ff 00 00       	and    eax,0xffff
c001f250:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f253:	e9 17 04 00 00       	jmp    c001f66f <Vm::faultHandler(regs*)+0x7cc>
c001f258:	53                   	push   ebx
c001f259:	53                   	push   ebx
c001f25a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f25e:	50                   	push   eax
c001f25f:	68 62 c7 02 c0       	push   0xc002c762
c001f264:	e8 86 3d ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f269:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f26d:	83 c4 10             	add    esp,0x10
c001f270:	3c ee                	cmp    al,0xee
c001f272:	75 10                	jne    c001f284 <Vm::faultHandler(regs*)+0x3e1>
c001f274:	83 ec 0c             	sub    esp,0xc
c001f277:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f27a:	e8 fa f8 ff ff       	call   c001eb79 <Vm::mainloop3(unsigned long)>
c001f27f:	e9 c0 03 00 00       	jmp    c001f644 <Vm::faultHandler(regs*)+0x7a1>
c001f284:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f288:	83 ec 0c             	sub    esp,0xc
c001f28b:	53                   	push   ebx
c001f28c:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f290:	53                   	push   ebx
c001f291:	55                   	push   ebp
c001f292:	50                   	push   eax
c001f293:	57                   	push   edi
c001f294:	e8 0c fb ff ff       	call   c001eda5 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f299:	eb 36                	jmp    c001f2d1 <Vm::faultHandler(regs*)+0x42e>
c001f29b:	83 ec 0c             	sub    esp,0xc
c001f29e:	68 6c c7 02 c0       	push   0xc002c76c
c001f2a3:	e8 47 3d ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f2a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2ad:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f2b1:	e9 8b 03 00 00       	jmp    c001f641 <Vm::faultHandler(regs*)+0x79e>
c001f2b6:	83 ec 0c             	sub    esp,0xc
c001f2b9:	68 71 c7 02 c0       	push   0xc002c771
c001f2be:	e8 2c 3d ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f2c3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f2c8:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f2cc:	e9 70 03 00 00       	jmp    c001f641 <Vm::faultHandler(regs*)+0x79e>
c001f2d1:	83 c4 20             	add    esp,0x20
c001f2d4:	e9 99 03 00 00       	jmp    c001f672 <Vm::faultHandler(regs*)+0x7cf>
c001f2d9:	83 ec 0c             	sub    esp,0xc
c001f2dc:	68 af c7 02 c0       	push   0xc002c7af
c001f2e1:	e8 09 3d ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f2e6:	83 c4 10             	add    esp,0x10
c001f2e9:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f2ec:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f2f1:	74 0d                	je     c001f300 <Vm::faultHandler(regs*)+0x45d>
c001f2f3:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f2fa:	0f 87 9e 01 00 00    	ja     c001f49e <Vm::faultHandler(regs*)+0x5fb>
c001f300:	83 ec 0c             	sub    esp,0xc
c001f303:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f307:	0f b7 db             	movzx  ebx,bx
c001f30a:	50                   	push   eax
c001f30b:	e8 9e f7 ff ff       	call   c001eaae <Vm::inbv(unsigned short)>
c001f310:	83 c4 0c             	add    esp,0xc
c001f313:	0f b6 c0             	movzx  eax,al
c001f316:	50                   	push   eax
c001f317:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f31b:	50                   	push   eax
c001f31c:	53                   	push   ebx
c001f31d:	e8 41 fb ff ff       	call   c001ee63 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f322:	83 c4 10             	add    esp,0x10
c001f325:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f328:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f32c:	74 03                	je     c001f331 <Vm::faultHandler(regs*)+0x48e>
c001f32e:	48                   	dec    eax
c001f32f:	eb 01                	jmp    c001f332 <Vm::faultHandler(regs*)+0x48f>
c001f331:	40                   	inc    eax
c001f332:	0f b7 c0             	movzx  eax,ax
c001f335:	eb 7f                	jmp    c001f3b6 <Vm::faultHandler(regs*)+0x513>
c001f337:	83 ec 0c             	sub    esp,0xc
c001f33a:	68 e1 c7 02 c0       	push   0xc002c7e1
c001f33f:	e8 ab 3c ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f344:	83 c4 10             	add    esp,0x10
c001f347:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f34a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f34f:	74 0d                	je     c001f35e <Vm::faultHandler(regs*)+0x4bb>
c001f351:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f358:	0f 87 40 01 00 00    	ja     c001f49e <Vm::faultHandler(regs*)+0x5fb>
c001f35e:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f361:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f365:	0f b7 db             	movzx  ebx,bx
c001f368:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f36d:	74 20                	je     c001f38f <Vm::faultHandler(regs*)+0x4ec>
c001f36f:	ed                   	in     eax,dx
c001f370:	51                   	push   ecx
c001f371:	50                   	push   eax
c001f372:	56                   	push   esi
c001f373:	53                   	push   ebx
c001f374:	e8 15 fb ff ff       	call   c001ee8e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f379:	83 c4 10             	add    esp,0x10
c001f37c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f37f:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f383:	74 05                	je     c001f38a <Vm::faultHandler(regs*)+0x4e7>
c001f385:	83 e8 04             	sub    eax,0x4
c001f388:	eb 27                	jmp    c001f3b1 <Vm::faultHandler(regs*)+0x50e>
c001f38a:	83 c0 04             	add    eax,0x4
c001f38d:	eb 22                	jmp    c001f3b1 <Vm::faultHandler(regs*)+0x50e>
c001f38f:	66 ed                	in     ax,dx
c001f391:	0f b7 c0             	movzx  eax,ax
c001f394:	52                   	push   edx
c001f395:	50                   	push   eax
c001f396:	56                   	push   esi
c001f397:	53                   	push   ebx
c001f398:	e8 db fa ff ff       	call   c001ee78 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f39d:	83 c4 10             	add    esp,0x10
c001f3a0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f3a3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f3a7:	74 05                	je     c001f3ae <Vm::faultHandler(regs*)+0x50b>
c001f3a9:	83 e8 02             	sub    eax,0x2
c001f3ac:	eb 03                	jmp    c001f3b1 <Vm::faultHandler(regs*)+0x50e>
c001f3ae:	83 c0 02             	add    eax,0x2
c001f3b1:	25 ff ff 00 00       	and    eax,0xffff
c001f3b6:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f3b9:	e9 b1 02 00 00       	jmp    c001f66f <Vm::faultHandler(regs*)+0x7cc>
c001f3be:	83 ec 0c             	sub    esp,0xc
c001f3c1:	4b                   	dec    ebx
c001f3c2:	68 e7 c7 02 c0       	push   0xc002c7e7
c001f3c7:	e8 23 3c ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f3cc:	83 c4 10             	add    esp,0x10
c001f3cf:	80 fb 05             	cmp    bl,0x5
c001f3d2:	77 0a                	ja     c001f3de <Vm::faultHandler(regs*)+0x53b>
c001f3d4:	0f b6 db             	movzx  ebx,bl
c001f3d7:	ff 24 9d 58 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd37a8]
c001f3de:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f3e2:	eb 1b                	jmp    c001f3ff <Vm::faultHandler(regs*)+0x55c>
c001f3e4:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f3e8:	eb 15                	jmp    c001f3ff <Vm::faultHandler(regs*)+0x55c>
c001f3ea:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f3ee:	eb 0f                	jmp    c001f3ff <Vm::faultHandler(regs*)+0x55c>
c001f3f0:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f3f4:	eb 09                	jmp    c001f3ff <Vm::faultHandler(regs*)+0x55c>
c001f3f6:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f3f9:	eb 04                	jmp    c001f3ff <Vm::faultHandler(regs*)+0x55c>
c001f3fb:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f3ff:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f404:	74 0d                	je     c001f413 <Vm::faultHandler(regs*)+0x570>
c001f406:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f40d:	0f 87 8b 00 00 00    	ja     c001f49e <Vm::faultHandler(regs*)+0x5fb>
c001f413:	53                   	push   ebx
c001f414:	53                   	push   ebx
c001f415:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f419:	52                   	push   edx
c001f41a:	50                   	push   eax
c001f41b:	e8 0f fa ff ff       	call   c001ee2f <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f420:	5e                   	pop    esi
c001f421:	0f b6 c0             	movzx  eax,al
c001f424:	5d                   	pop    ebp
c001f425:	50                   	push   eax
c001f426:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f42a:	50                   	push   eax
c001f42b:	e8 91 f6 ff ff       	call   c001eac1 <Vm::outbv(unsigned short, unsigned char)>
c001f430:	83 c4 10             	add    esp,0x10
c001f433:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f436:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f43a:	74 03                	je     c001f43f <Vm::faultHandler(regs*)+0x59c>
c001f43c:	48                   	dec    eax
c001f43d:	eb 01                	jmp    c001f440 <Vm::faultHandler(regs*)+0x59d>
c001f43f:	40                   	inc    eax
c001f440:	0f b7 c0             	movzx  eax,ax
c001f443:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f446:	e9 24 02 00 00       	jmp    c001f66f <Vm::faultHandler(regs*)+0x7cc>
c001f44b:	83 ec 0c             	sub    esp,0xc
c001f44e:	4b                   	dec    ebx
c001f44f:	68 e7 c7 02 c0       	push   0xc002c7e7
c001f454:	e8 96 3b ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f459:	83 c4 10             	add    esp,0x10
c001f45c:	80 fb 05             	cmp    bl,0x5
c001f45f:	77 0a                	ja     c001f46b <Vm::faultHandler(regs*)+0x5c8>
c001f461:	0f b6 db             	movzx  ebx,bl
c001f464:	ff 24 9d 70 c8 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3790]
c001f46b:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f46f:	eb 1b                	jmp    c001f48c <Vm::faultHandler(regs*)+0x5e9>
c001f471:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f475:	eb 15                	jmp    c001f48c <Vm::faultHandler(regs*)+0x5e9>
c001f477:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f47b:	eb 0f                	jmp    c001f48c <Vm::faultHandler(regs*)+0x5e9>
c001f47d:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f481:	eb 09                	jmp    c001f48c <Vm::faultHandler(regs*)+0x5e9>
c001f483:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f486:	eb 04                	jmp    c001f48c <Vm::faultHandler(regs*)+0x5e9>
c001f488:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f48c:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f48f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f494:	74 39                	je     c001f4cf <Vm::faultHandler(regs*)+0x62c>
c001f496:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f49c:	76 31                	jbe    c001f4cf <Vm::faultHandler(regs*)+0x62c>
c001f49e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f4a2:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4a6:	51                   	push   ecx
c001f4a7:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f4ab:	51                   	push   ecx
c001f4ac:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f4b0:	51                   	push   ecx
c001f4b1:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f4b5:	51                   	push   ecx
c001f4b6:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f4ba:	52                   	push   edx
c001f4bb:	50                   	push   eax
c001f4bc:	50                   	push   eax
c001f4bd:	68 b4 c7 02 c0       	push   0xc002c7b4
c001f4c2:	e8 28 3b ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f4c7:	83 c4 20             	add    esp,0x20
c001f4ca:	e9 fb 01 00 00       	jmp    c001f6ca <Vm::faultHandler(regs*)+0x827>
c001f4cf:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f4d2:	0f b7 d3             	movzx  edx,bx
c001f4d5:	81 e6 00 04 00 00    	and    esi,0x400
c001f4db:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f4de:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f4e3:	74 1d                	je     c001f502 <Vm::faultHandler(regs*)+0x65f>
c001f4e5:	51                   	push   ecx
c001f4e6:	51                   	push   ecx
c001f4e7:	52                   	push   edx
c001f4e8:	50                   	push   eax
c001f4e9:	e8 64 f9 ff ff       	call   c001ee52 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f4ee:	83 c4 10             	add    esp,0x10
c001f4f1:	89 ea                	mov    edx,ebp
c001f4f3:	ef                   	out    dx,eax
c001f4f4:	85 f6                	test   esi,esi
c001f4f6:	74 05                	je     c001f4fd <Vm::faultHandler(regs*)+0x65a>
c001f4f8:	83 eb 04             	sub    ebx,0x4
c001f4fb:	eb 21                	jmp    c001f51e <Vm::faultHandler(regs*)+0x67b>
c001f4fd:	83 c3 04             	add    ebx,0x4
c001f500:	eb 1c                	jmp    c001f51e <Vm::faultHandler(regs*)+0x67b>
c001f502:	51                   	push   ecx
c001f503:	51                   	push   ecx
c001f504:	52                   	push   edx
c001f505:	50                   	push   eax
c001f506:	e8 35 f9 ff ff       	call   c001ee40 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f50b:	83 c4 10             	add    esp,0x10
c001f50e:	89 ea                	mov    edx,ebp
c001f510:	66 ef                	out    dx,ax
c001f512:	85 f6                	test   esi,esi
c001f514:	74 05                	je     c001f51b <Vm::faultHandler(regs*)+0x678>
c001f516:	83 eb 02             	sub    ebx,0x2
c001f519:	eb 03                	jmp    c001f51e <Vm::faultHandler(regs*)+0x67b>
c001f51b:	83 c3 02             	add    ebx,0x2
c001f51e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f524:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f527:	e9 43 01 00 00       	jmp    c001f66f <Vm::faultHandler(regs*)+0x7cc>
c001f52c:	53                   	push   ebx
c001f52d:	53                   	push   ebx
c001f52e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f532:	50                   	push   eax
c001f533:	68 ed c7 02 c0       	push   0xc002c7ed
c001f538:	e8 b2 3a ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f53d:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f544:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f548:	89 04 24             	mov    DWORD PTR [esp],eax
c001f54b:	e8 5e f5 ff ff       	call   c001eaae <Vm::inbv(unsigned short)>
c001f550:	0f b6 c0             	movzx  eax,al
c001f553:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f556:	eb 5e                	jmp    c001f5b6 <Vm::faultHandler(regs*)+0x713>
c001f558:	51                   	push   ecx
c001f559:	51                   	push   ecx
c001f55a:	53                   	push   ebx
c001f55b:	68 f3 c7 02 c0       	push   0xc002c7f3
c001f560:	e8 8a 3a ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f565:	83 c4 10             	add    esp,0x10
c001f568:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f56d:	74 07                	je     c001f576 <Vm::faultHandler(regs*)+0x6d3>
c001f56f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f573:	ed                   	in     eax,dx
c001f574:	eb 14                	jmp    c001f58a <Vm::faultHandler(regs*)+0x6e7>
c001f576:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f579:	66 31 db             	xor    bx,bx
c001f57c:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f57f:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f583:	66 ed                	in     ax,dx
c001f585:	0f b7 c0             	movzx  eax,ax
c001f588:	09 d8                	or     eax,ebx
c001f58a:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f58d:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f591:	e9 dc 00 00 00       	jmp    c001f672 <Vm::faultHandler(regs*)+0x7cf>
c001f596:	50                   	push   eax
c001f597:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f59a:	53                   	push   ebx
c001f59b:	68 f9 c7 02 c0       	push   0xc002c7f9
c001f5a0:	e8 4a 3a ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f5a5:	58                   	pop    eax
c001f5a6:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f5aa:	5a                   	pop    edx
c001f5ab:	50                   	push   eax
c001f5ac:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f5b0:	50                   	push   eax
c001f5b1:	e8 0b f5 ff ff       	call   c001eac1 <Vm::outbv(unsigned short, unsigned char)>
c001f5b6:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f5ba:	e9 85 00 00 00       	jmp    c001f644 <Vm::faultHandler(regs*)+0x7a1>
c001f5bf:	50                   	push   eax
c001f5c0:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f5c3:	53                   	push   ebx
c001f5c4:	68 02 c8 02 c0       	push   0xc002c802
c001f5c9:	e8 21 3a ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f5ce:	83 c4 10             	add    esp,0x10
c001f5d1:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f5d5:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f5da:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f5dd:	74 03                	je     c001f5e2 <Vm::faultHandler(regs*)+0x73f>
c001f5df:	ef                   	out    dx,eax
c001f5e0:	eb ab                	jmp    c001f58d <Vm::faultHandler(regs*)+0x6ea>
c001f5e2:	66 ef                	out    dx,ax
c001f5e4:	eb a7                	jmp    c001f58d <Vm::faultHandler(regs*)+0x6ea>
c001f5e6:	55                   	push   ebp
c001f5e7:	55                   	push   ebp
c001f5e8:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f5eb:	68 0b c8 02 c0       	push   0xc002c80b
c001f5f0:	e8 fa 39 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f5f5:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f5fc:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f600:	89 04 24             	mov    DWORD PTR [esp],eax
c001f603:	e8 a6 f4 ff ff       	call   c001eaae <Vm::inbv(unsigned short)>
c001f608:	0f b6 c0             	movzx  eax,al
c001f60b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f60e:	eb 31                	jmp    c001f641 <Vm::faultHandler(regs*)+0x79e>
c001f610:	56                   	push   esi
c001f611:	56                   	push   esi
c001f612:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f615:	68 11 c8 02 c0       	push   0xc002c811
c001f61a:	e8 d0 39 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f61f:	83 c4 10             	add    esp,0x10
c001f622:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f625:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f62a:	74 03                	je     c001f62f <Vm::faultHandler(regs*)+0x78c>
c001f62c:	ed                   	in     eax,dx
c001f62d:	eb 0d                	jmp    c001f63c <Vm::faultHandler(regs*)+0x799>
c001f62f:	66 ed                	in     ax,dx
c001f631:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f634:	0f b7 c0             	movzx  eax,ax
c001f637:	66 31 d2             	xor    dx,dx
c001f63a:	09 d0                	or     eax,edx
c001f63c:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f63f:	eb 2e                	jmp    c001f66f <Vm::faultHandler(regs*)+0x7cc>
c001f641:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f644:	83 c4 10             	add    esp,0x10
c001f647:	eb 29                	jmp    c001f672 <Vm::faultHandler(regs*)+0x7cf>
c001f649:	50                   	push   eax
c001f64a:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f64d:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f650:	68 20 c8 02 c0       	push   0xc002c820
c001f655:	e8 95 39 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f65a:	83 c4 10             	add    esp,0x10
c001f65d:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f660:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f665:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f668:	74 03                	je     c001f66d <Vm::faultHandler(regs*)+0x7ca>
c001f66a:	ef                   	out    dx,eax
c001f66b:	eb 02                	jmp    c001f66f <Vm::faultHandler(regs*)+0x7cc>
c001f66d:	66 ef                	out    dx,ax
c001f66f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f672:	b0 01                	mov    al,0x1
c001f674:	eb 56                	jmp    c001f6cc <Vm::faultHandler(regs*)+0x829>
c001f676:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f67a:	51                   	push   ecx
c001f67b:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f67f:	51                   	push   ecx
c001f680:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f684:	51                   	push   ecx
c001f685:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f689:	51                   	push   ecx
c001f68a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f68e:	52                   	push   edx
c001f68f:	50                   	push   eax
c001f690:	50                   	push   eax
c001f691:	68 29 c8 02 c0       	push   0xc002c829
c001f696:	e8 54 39 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c001f69b:	83 c4 20             	add    esp,0x20
c001f69e:	83 ec 0c             	sub    esp,0xc
c001f6a1:	6a 60                	push   0x60
c001f6a3:	e8 06 f4 ff ff       	call   c001eaae <Vm::inbv(unsigned short)>
c001f6a8:	83 c4 10             	add    esp,0x10
c001f6ab:	3c 1c                	cmp    al,0x1c
c001f6ad:	74 04                	je     c001f6b3 <Vm::faultHandler(regs*)+0x810>
c001f6af:	3c 5a                	cmp    al,0x5a
c001f6b1:	75 eb                	jne    c001f69e <Vm::faultHandler(regs*)+0x7fb>
c001f6b3:	3c 1c                	cmp    al,0x1c
c001f6b5:	74 04                	je     c001f6bb <Vm::faultHandler(regs*)+0x818>
c001f6b7:	3c 5a                	cmp    al,0x5a
c001f6b9:	75 0f                	jne    c001f6ca <Vm::faultHandler(regs*)+0x827>
c001f6bb:	83 ec 0c             	sub    esp,0xc
c001f6be:	6a 60                	push   0x60
c001f6c0:	e8 e9 f3 ff ff       	call   c001eaae <Vm::inbv(unsigned short)>
c001f6c5:	83 c4 10             	add    esp,0x10
c001f6c8:	eb e9                	jmp    c001f6b3 <Vm::faultHandler(regs*)+0x810>
c001f6ca:	31 c0                	xor    eax,eax
c001f6cc:	83 c4 1c             	add    esp,0x1c
c001f6cf:	5b                   	pop    ebx
c001f6d0:	5e                   	pop    esi
c001f6d1:	5f                   	pop    edi
c001f6d2:	5d                   	pop    ebp
c001f6d3:	c3                   	ret    

c001f6d4 <Vm::fpuInternalTo32(unsigned long long)>:
c001f6d4:	57                   	push   edi
c001f6d5:	56                   	push   esi
c001f6d6:	53                   	push   ebx
c001f6d7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6df:	89 d6                	mov    esi,edx
c001f6e1:	89 d7                	mov    edi,edx
c001f6e3:	89 c1                	mov    ecx,eax
c001f6e5:	c1 ef 14             	shr    edi,0x14
c001f6e8:	89 d3                	mov    ebx,edx
c001f6ea:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f6f0:	31 d2                	xor    edx,edx
c001f6f2:	89 f8                	mov    eax,edi
c001f6f4:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f6fa:	bf ff 00 00 00       	mov    edi,0xff
c001f6ff:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f704:	83 d2 ff             	adc    edx,0xffffffff
c001f707:	39 c7                	cmp    edi,eax
c001f709:	bf 00 00 00 00       	mov    edi,0x0
c001f70e:	19 d7                	sbb    edi,edx
c001f710:	72 15                	jb     c001f727 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f712:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f716:	c1 e0 17             	shl    eax,0x17
c001f719:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f71f:	09 f1                	or     ecx,esi
c001f721:	09 c1                	or     ecx,eax
c001f723:	89 cf                	mov    edi,ecx
c001f725:	eb 02                	jmp    c001f729 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f727:	31 ff                	xor    edi,edi
c001f729:	89 f8                	mov    eax,edi
c001f72b:	5b                   	pop    ebx
c001f72c:	5e                   	pop    esi
c001f72d:	5f                   	pop    edi
c001f72e:	c3                   	ret    

c001f72f <Vm::fpuInternalTo64(unsigned long long)>:
c001f72f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f733:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f737:	c3                   	ret    

c001f738 <Vm::fpu32ToInternal(unsigned int)>:
c001f738:	57                   	push   edi
c001f739:	31 ff                	xor    edi,edi
c001f73b:	56                   	push   esi
c001f73c:	53                   	push   ebx
c001f73d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f741:	89 cb                	mov    ebx,ecx
c001f743:	89 ce                	mov    esi,ecx
c001f745:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f74b:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f751:	c1 e9 17             	shr    ecx,0x17
c001f754:	89 f0                	mov    eax,esi
c001f756:	0f b6 d1             	movzx  edx,cl
c001f759:	81 c2 80 03 00 00    	add    edx,0x380
c001f75f:	89 d1                	mov    ecx,edx
c001f761:	89 fa                	mov    edx,edi
c001f763:	c1 e1 14             	shl    ecx,0x14
c001f766:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f76a:	c1 e0 1d             	shl    eax,0x1d
c001f76d:	89 d7                	mov    edi,edx
c001f76f:	89 c6                	mov    esi,eax
c001f771:	89 ca                	mov    edx,ecx
c001f773:	89 f0                	mov    eax,esi
c001f775:	09 fa                	or     edx,edi
c001f777:	09 da                	or     edx,ebx
c001f779:	5b                   	pop    ebx
c001f77a:	5e                   	pop    esi
c001f77b:	5f                   	pop    edi
c001f77c:	c3                   	ret    

c001f77d <Vm::fpu64ToInternal(unsigned long long)>:
c001f77d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f781:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f785:	c3                   	ret    

c001f786 <Vm::fpuFloatToLong(unsigned long long)>:
c001f786:	57                   	push   edi
c001f787:	31 c0                	xor    eax,eax
c001f789:	56                   	push   esi
c001f78a:	31 d2                	xor    edx,edx
c001f78c:	53                   	push   ebx
c001f78d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f791:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f795:	89 d9                	mov    ecx,ebx
c001f797:	c1 e9 14             	shr    ecx,0x14
c001f79a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f7a0:	89 cf                	mov    edi,ecx
c001f7a2:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f7a8:	78 33                	js     c001f7dd <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7aa:	89 d9                	mov    ecx,ebx
c001f7ac:	89 f0                	mov    eax,esi
c001f7ae:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f7b4:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f7ba:	89 ca                	mov    edx,ecx
c001f7bc:	b9 34 00 00 00       	mov    ecx,0x34
c001f7c1:	29 f9                	sub    ecx,edi
c001f7c3:	0f ad d0             	shrd   eax,edx,cl
c001f7c6:	d3 fa                	sar    edx,cl
c001f7c8:	f6 c1 20             	test   cl,0x20
c001f7cb:	74 05                	je     c001f7d2 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f7cd:	89 d0                	mov    eax,edx
c001f7cf:	c1 fa 1f             	sar    edx,0x1f
c001f7d2:	85 db                	test   ebx,ebx
c001f7d4:	79 07                	jns    c001f7dd <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f7d6:	f7 d8                	neg    eax
c001f7d8:	83 d2 00             	adc    edx,0x0
c001f7db:	f7 da                	neg    edx
c001f7dd:	5b                   	pop    ebx
c001f7de:	5e                   	pop    esi
c001f7df:	5f                   	pop    edi
c001f7e0:	c3                   	ret    

c001f7e1 <Vm::fpuULongToFloat(unsigned long long)>:
c001f7e1:	57                   	push   edi
c001f7e2:	31 c9                	xor    ecx,ecx
c001f7e4:	56                   	push   esi
c001f7e5:	53                   	push   ebx
c001f7e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f7ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f7ee:	0f ba e7 14          	bt     edi,0x14
c001f7f2:	72 07                	jb     c001f7fb <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f7f4:	01 f6                	add    esi,esi
c001f7f6:	11 ff                	adc    edi,edi
c001f7f8:	41                   	inc    ecx
c001f7f9:	eb f3                	jmp    c001f7ee <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f7fb:	89 fa                	mov    edx,edi
c001f7fd:	89 f0                	mov    eax,esi
c001f7ff:	bb 33 04 00 00       	mov    ebx,0x433
c001f804:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f80a:	29 cb                	sub    ebx,ecx
c001f80c:	89 d9                	mov    ecx,ebx
c001f80e:	5b                   	pop    ebx
c001f80f:	c1 e1 14             	shl    ecx,0x14
c001f812:	5e                   	pop    esi
c001f813:	09 ca                	or     edx,ecx
c001f815:	5f                   	pop    edi
c001f816:	c3                   	ret    

c001f817 <Vm::fpuLongToFloat(long long)>:
c001f817:	56                   	push   esi
c001f818:	31 c0                	xor    eax,eax
c001f81a:	53                   	push   ebx
c001f81b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f81f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f823:	39 c8                	cmp    eax,ecx
c001f825:	19 d8                	sbb    eax,ebx
c001f827:	7d 04                	jge    c001f82d <Vm::fpuLongToFloat(long long)+0x16>
c001f829:	31 f6                	xor    esi,esi
c001f82b:	eb 0c                	jmp    c001f839 <Vm::fpuLongToFloat(long long)+0x22>
c001f82d:	f7 d9                	neg    ecx
c001f82f:	be 01 00 00 00       	mov    esi,0x1
c001f834:	83 d3 00             	adc    ebx,0x0
c001f837:	f7 db                	neg    ebx
c001f839:	31 c0                	xor    eax,eax
c001f83b:	0f ba e3 14          	bt     ebx,0x14
c001f83f:	72 07                	jb     c001f848 <Vm::fpuLongToFloat(long long)+0x31>
c001f841:	01 c9                	add    ecx,ecx
c001f843:	11 db                	adc    ebx,ebx
c001f845:	40                   	inc    eax
c001f846:	eb f3                	jmp    c001f83b <Vm::fpuLongToFloat(long long)+0x24>
c001f848:	ba 33 04 00 00       	mov    edx,0x433
c001f84d:	29 c2                	sub    edx,eax
c001f84f:	89 c8                	mov    eax,ecx
c001f851:	c1 e2 14             	shl    edx,0x14
c001f854:	89 d9                	mov    ecx,ebx
c001f856:	89 f3                	mov    ebx,esi
c001f858:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f85e:	09 ca                	or     edx,ecx
c001f860:	84 db                	test   bl,bl
c001f862:	74 06                	je     c001f86a <Vm::fpuLongToFloat(long long)+0x53>
c001f864:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f86a:	5b                   	pop    ebx
c001f86b:	5e                   	pop    esi
c001f86c:	c3                   	ret    

c001f86d <Vm::fpuGet0()>:
c001f86d:	31 c0                	xor    eax,eax
c001f86f:	31 d2                	xor    edx,edx
c001f871:	c3                   	ret    

c001f872 <Vm::fpuGet1()>:
c001f872:	b8 01 00 00 00       	mov    eax,0x1
c001f877:	31 d2                	xor    edx,edx
c001f879:	c3                   	ret    

c001f87a <Vm::fpuGetPi()>:
c001f87a:	b8 03 00 00 00       	mov    eax,0x3
c001f87f:	31 d2                	xor    edx,edx
c001f881:	c3                   	ret    

c001f882 <Vm::fpuGetLog2E()>:
c001f882:	83 ec 18             	sub    esp,0x18
c001f885:	68 88 c8 02 c0       	push   0xc002c888
c001f88a:	e8 0e ae ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001f88f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f894:	31 d2                	xor    edx,edx
c001f896:	83 c4 1c             	add    esp,0x1c
c001f899:	c3                   	ret    

c001f89a <Vm::fpuGetLogE2()>:
c001f89a:	83 ec 18             	sub    esp,0x18
c001f89d:	68 94 c8 02 c0       	push   0xc002c894
c001f8a2:	e8 f6 ad ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001f8a7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8ac:	31 d2                	xor    edx,edx
c001f8ae:	83 c4 1c             	add    esp,0x1c
c001f8b1:	c3                   	ret    

c001f8b2 <Vm::fpuGetLog210()>:
c001f8b2:	83 ec 18             	sub    esp,0x18
c001f8b5:	68 a0 c8 02 c0       	push   0xc002c8a0
c001f8ba:	e8 de ad ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001f8bf:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8c4:	31 d2                	xor    edx,edx
c001f8c6:	83 c4 1c             	add    esp,0x1c
c001f8c9:	c3                   	ret    

c001f8ca <Vm::fpuGetLog102()>:
c001f8ca:	83 ec 18             	sub    esp,0x18
c001f8cd:	68 ad c8 02 c0       	push   0xc002c8ad
c001f8d2:	e8 c6 ad ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001f8d7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f8dc:	31 d2                	xor    edx,edx
c001f8de:	83 c4 1c             	add    esp,0x1c
c001f8e1:	c3                   	ret    

c001f8e2 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f8e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f8e6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f8ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f8ee:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f8f2:	0f 92 c0             	setb   al
c001f8f5:	c3                   	ret    

c001f8f6 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f8f6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f8fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8fe:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f902:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f906:	09 c2                	or     edx,eax
c001f908:	0f 94 c0             	sete   al
c001f90b:	c3                   	ret    

c001f90c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f90c:	57                   	push   edi
c001f90d:	56                   	push   esi
c001f90e:	53                   	push   ebx
c001f90f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f913:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f917:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f91b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f91f:	57                   	push   edi
c001f920:	56                   	push   esi
c001f921:	53                   	push   ebx
c001f922:	51                   	push   ecx
c001f923:	e8 ce ff ff ff       	call   c001f8f6 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f928:	83 c4 10             	add    esp,0x10
c001f92b:	88 c2                	mov    dl,al
c001f92d:	31 c0                	xor    eax,eax
c001f92f:	84 d2                	test   dl,dl
c001f931:	75 0c                	jne    c001f93f <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f933:	57                   	push   edi
c001f934:	56                   	push   esi
c001f935:	53                   	push   ebx
c001f936:	51                   	push   ecx
c001f937:	e8 a6 ff ff ff       	call   c001f8e2 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f93c:	83 c4 10             	add    esp,0x10
c001f93f:	83 e0 01             	and    eax,0x1
c001f942:	5b                   	pop    ebx
c001f943:	88 c1                	mov    cl,al
c001f945:	83 e2 01             	and    edx,0x1
c001f948:	a0 01 1b 03 c0       	mov    al,ds:0xc0031b01
c001f94d:	c1 e2 06             	shl    edx,0x6
c001f950:	83 e0 ba             	and    eax,0xffffffba
c001f953:	5e                   	pop    esi
c001f954:	09 c8                	or     eax,ecx
c001f956:	5f                   	pop    edi
c001f957:	09 d0                	or     eax,edx
c001f959:	a2 01 1b 03 c0       	mov    ds:0xc0031b01,al
c001f95e:	c3                   	ret    

c001f95f <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f95f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f963:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f967:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f96b:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f96f:	c3                   	ret    

c001f970 <Vm::fpuAbs(unsigned long long)>:
c001f970:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f974:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f978:	c3                   	ret    

c001f979 <Vm::fpuChs(unsigned long long)>:
c001f979:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f97d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f981:	f7 d8                	neg    eax
c001f983:	83 d2 00             	adc    edx,0x0
c001f986:	f7 da                	neg    edx
c001f988:	c3                   	ret    

c001f989 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f989:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f98d:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f992:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f996:	eb c7                	jmp    c001f95f <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f998 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f998:	53                   	push   ebx
c001f999:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f99d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f9a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f9a5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f9a9:	0f af ca             	imul   ecx,edx
c001f9ac:	0f af d8             	imul   ebx,eax
c001f9af:	f7 e2                	mul    edx
c001f9b1:	01 d9                	add    ecx,ebx
c001f9b3:	5b                   	pop    ebx
c001f9b4:	01 ca                	add    edx,ecx
c001f9b6:	c3                   	ret    

c001f9b7 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f9b7:	83 ec 0c             	sub    esp,0xc
c001f9ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f9ca:	e8 9d 70 00 00       	call   c0026a6c <__udivdi3>
c001f9cf:	83 c4 1c             	add    esp,0x1c
c001f9d2:	c3                   	ret    

c001f9d3 <Vm::fpuSquare(unsigned long long)>:
c001f9d3:	50                   	push   eax
c001f9d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f9d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f9dc:	52                   	push   edx
c001f9dd:	50                   	push   eax
c001f9de:	52                   	push   edx
c001f9df:	50                   	push   eax
c001f9e0:	e8 b3 ff ff ff       	call   c001f998 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f9e5:	83 c4 14             	add    esp,0x14
c001f9e8:	c3                   	ret    

c001f9e9 <Vm::fpuGetReg(int)>:
c001f9e9:	83 ec 0c             	sub    esp,0xc
c001f9ec:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f9f1:	76 10                	jbe    c001fa03 <Vm::fpuGetReg(int)+0x1a>
c001f9f3:	83 ec 0c             	sub    esp,0xc
c001f9f6:	68 ba c8 02 c0       	push   0xc002c8ba
c001f9fb:	e8 9d ac ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001fa00:	83 c4 10             	add    esp,0x10
c001fa03:	a0 01 1b 03 c0       	mov    al,ds:0xc0031b01
c001fa08:	b9 08 00 00 00       	mov    ecx,0x8
c001fa0d:	c0 e8 03             	shr    al,0x3
c001fa10:	83 e0 07             	and    eax,0x7
c001fa13:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa17:	99                   	cdq    
c001fa18:	f7 f9                	idiv   ecx
c001fa1a:	8b 04 d5 04 1b 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffce4fc]
c001fa21:	8b 14 d5 08 1b 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffce4f8]
c001fa28:	83 c4 0c             	add    esp,0xc
c001fa2b:	c3                   	ret    

c001fa2c <Vm::fpuSetReg(int, unsigned long long)>:
c001fa2c:	57                   	push   edi
c001fa2d:	56                   	push   esi
c001fa2e:	52                   	push   edx
c001fa2f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001fa33:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001fa37:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001fa3c:	76 10                	jbe    c001fa4e <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001fa3e:	83 ec 0c             	sub    esp,0xc
c001fa41:	68 cd c8 02 c0       	push   0xc002c8cd
c001fa46:	e8 52 ac ff ff       	call   c001a69d <Krnl::panic(char const*)>
c001fa4b:	83 c4 10             	add    esp,0x10
c001fa4e:	a0 01 1b 03 c0       	mov    al,ds:0xc0031b01
c001fa53:	b9 08 00 00 00       	mov    ecx,0x8
c001fa58:	c0 e8 03             	shr    al,0x3
c001fa5b:	83 e0 07             	and    eax,0x7
c001fa5e:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001fa62:	99                   	cdq    
c001fa63:	f7 f9                	idiv   ecx
c001fa65:	89 34 d5 04 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce4fc],esi
c001fa6c:	89 3c d5 08 1b 03 c0 	mov    DWORD PTR [edx*8-0x3ffce4f8],edi
c001fa73:	58                   	pop    eax
c001fa74:	5e                   	pop    esi
c001fa75:	5f                   	pop    edi
c001fa76:	c3                   	ret    

c001fa77 <Vm::fpuPush(unsigned long long)>:
c001fa77:	a0 01 1b 03 c0       	mov    al,ds:0xc0031b01
c001fa7c:	c0 e8 03             	shr    al,0x3
c001fa7f:	83 e0 07             	and    eax,0x7
c001fa82:	83 c0 07             	add    eax,0x7
c001fa85:	88 c2                	mov    dl,al
c001fa87:	83 e0 07             	and    eax,0x7
c001fa8a:	83 e2 07             	and    edx,0x7
c001fa8d:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001fa94:	8a 15 01 1b 03 c0    	mov    dl,BYTE PTR ds:0xc0031b01
c001fa9a:	83 e2 c7             	and    edx,0xffffffc7
c001fa9d:	09 ca                	or     edx,ecx
c001fa9f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001faa3:	88 15 01 1b 03 c0    	mov    BYTE PTR ds:0xc0031b01,dl
c001faa9:	89 0c c5 08 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce4f8],ecx
c001fab0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001fab4:	89 14 c5 04 1b 03 c0 	mov    DWORD PTR [eax*8-0x3ffce4fc],edx
c001fabb:	a1 44 1b 03 c0       	mov    eax,ds:0xc0031b44
c001fac0:	83 f8 08             	cmp    eax,0x8
c001fac3:	75 08                	jne    c001facd <Vm::fpuPush(unsigned long long)+0x56>
c001fac5:	80 0d 00 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b00,0x40
c001facc:	c3                   	ret    
c001facd:	40                   	inc    eax
c001face:	a3 44 1b 03 c0       	mov    ds:0xc0031b44,eax
c001fad3:	c3                   	ret    

c001fad4 <Vm::fpuPop()>:
c001fad4:	8a 0d 01 1b 03 c0    	mov    cl,BYTE PTR ds:0xc0031b01
c001fada:	53                   	push   ebx
c001fadb:	c0 e9 03             	shr    cl,0x3
c001fade:	8a 1d 01 1b 03 c0    	mov    bl,BYTE PTR ds:0xc0031b01
c001fae4:	83 e1 07             	and    ecx,0x7
c001fae7:	83 e3 c7             	and    ebx,0xffffffc7
c001faea:	8b 04 cd 04 1b 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffce4fc]
c001faf1:	8b 14 cd 08 1b 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffce4f8]
c001faf8:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001faff:	83 e1 38             	and    ecx,0x38
c001fb02:	09 d9                	or     ecx,ebx
c001fb04:	88 0d 01 1b 03 c0    	mov    BYTE PTR ds:0xc0031b01,cl
c001fb0a:	8b 0d 44 1b 03 c0    	mov    ecx,DWORD PTR ds:0xc0031b44
c001fb10:	85 c9                	test   ecx,ecx
c001fb12:	74 09                	je     c001fb1d <Vm::fpuPop()+0x49>
c001fb14:	49                   	dec    ecx
c001fb15:	89 0d 44 1b 03 c0    	mov    DWORD PTR ds:0xc0031b44,ecx
c001fb1b:	eb 07                	jmp    c001fb24 <Vm::fpuPop()+0x50>
c001fb1d:	80 0d 00 1b 03 c0 40 	or     BYTE PTR ds:0xc0031b00,0x40
c001fb24:	5b                   	pop    ebx
c001fb25:	c3                   	ret    

c001fb26 <Vm::x87Handler(regs*)>:
c001fb26:	55                   	push   ebp
c001fb27:	57                   	push   edi
c001fb28:	56                   	push   esi
c001fb29:	53                   	push   ebx
c001fb2a:	83 ec 1c             	sub    esp,0x1c
c001fb2d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001fb31:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001fb36:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001fb39:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001fb41:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001fb45:	50                   	push   eax
c001fb46:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001fb4a:	50                   	push   eax
c001fb4b:	8d 44 24 14          	lea    eax,[esp+0x14]
c001fb4f:	50                   	push   eax
c001fb50:	53                   	push   ebx
c001fb51:	e8 0e a2 ff ff       	call   c0019d64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001fb56:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001fb59:	83 c4 10             	add    esp,0x10
c001fb5c:	89 c6                	mov    esi,eax
c001fb5e:	80 fa d9             	cmp    dl,0xd9
c001fb61:	0f 85 52 01 00 00    	jne    c001fcb9 <Vm::x87Handler(regs*)+0x193>
c001fb67:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb6b:	8d 50 20             	lea    edx,[eax+0x20]
c001fb6e:	80 fa 0e             	cmp    dl,0xe
c001fb71:	0f 87 86 00 00 00    	ja     c001fbfd <Vm::x87Handler(regs*)+0xd7>
c001fb77:	0f b6 d2             	movzx  edx,dl
c001fb7a:	ff 24 95 e0 c8 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3720]
c001fb81:	e8 e7 fc ff ff       	call   c001f86d <Vm::fpuGet0()>
c001fb86:	eb 05                	jmp    c001fb8d <Vm::x87Handler(regs*)+0x67>
c001fb88:	e8 e5 fc ff ff       	call   c001f872 <Vm::fpuGet1()>
c001fb8d:	57                   	push   edi
c001fb8e:	57                   	push   edi
c001fb8f:	52                   	push   edx
c001fb90:	50                   	push   eax
c001fb91:	e8 e1 fe ff ff       	call   c001fa77 <Vm::fpuPush(unsigned long long)>
c001fb96:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fb9a:	83 c4 10             	add    esp,0x10
c001fb9d:	b0 01                	mov    al,0x1
c001fb9f:	e9 e3 09 00 00       	jmp    c0020587 <Vm::x87Handler(regs*)+0xa61>
c001fba4:	83 ec 0c             	sub    esp,0xc
c001fba7:	6a 00                	push   0x0
c001fba9:	e8 3b fe ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fbae:	59                   	pop    ecx
c001fbaf:	5e                   	pop    esi
c001fbb0:	52                   	push   edx
c001fbb1:	50                   	push   eax
c001fbb2:	e8 c2 fd ff ff       	call   c001f979 <Vm::fpuChs(unsigned long long)>
c001fbb7:	eb 13                	jmp    c001fbcc <Vm::x87Handler(regs*)+0xa6>
c001fbb9:	83 ec 0c             	sub    esp,0xc
c001fbbc:	6a 00                	push   0x0
c001fbbe:	e8 26 fe ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fbc3:	5f                   	pop    edi
c001fbc4:	5d                   	pop    ebp
c001fbc5:	52                   	push   edx
c001fbc6:	50                   	push   eax
c001fbc7:	e8 a4 fd ff ff       	call   c001f970 <Vm::fpuAbs(unsigned long long)>
c001fbcc:	83 c4 0c             	add    esp,0xc
c001fbcf:	52                   	push   edx
c001fbd0:	50                   	push   eax
c001fbd1:	6a 00                	push   0x0
c001fbd3:	e8 54 fe ff ff       	call   c001fa2c <Vm::fpuSetReg(int, unsigned long long)>
c001fbd8:	eb bc                	jmp    c001fb96 <Vm::x87Handler(regs*)+0x70>
c001fbda:	e8 d3 fc ff ff       	call   c001f8b2 <Vm::fpuGetLog210()>
c001fbdf:	eb ac                	jmp    c001fb8d <Vm::x87Handler(regs*)+0x67>
c001fbe1:	e8 9c fc ff ff       	call   c001f882 <Vm::fpuGetLog2E()>
c001fbe6:	eb a5                	jmp    c001fb8d <Vm::x87Handler(regs*)+0x67>
c001fbe8:	e8 8d fc ff ff       	call   c001f87a <Vm::fpuGetPi()>
c001fbed:	eb 9e                	jmp    c001fb8d <Vm::x87Handler(regs*)+0x67>
c001fbef:	e8 d6 fc ff ff       	call   c001f8ca <Vm::fpuGetLog102()>
c001fbf4:	eb 97                	jmp    c001fb8d <Vm::x87Handler(regs*)+0x67>
c001fbf6:	e8 9f fc ff ff       	call   c001f89a <Vm::fpuGetLogE2()>
c001fbfb:	eb 90                	jmp    c001fb8d <Vm::x87Handler(regs*)+0x67>
c001fbfd:	8d 50 40             	lea    edx,[eax+0x40]
c001fc00:	80 fa 07             	cmp    dl,0x7
c001fc03:	77 15                	ja     c001fc1a <Vm::x87Handler(regs*)+0xf4>
c001fc05:	83 ec 0c             	sub    esp,0xc
c001fc08:	2d c0 00 00 00       	sub    eax,0xc0
c001fc0d:	50                   	push   eax
c001fc0e:	e8 d6 fd ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fc13:	59                   	pop    ecx
c001fc14:	5e                   	pop    esi
c001fc15:	e9 75 ff ff ff       	jmp    c001fb8f <Vm::x87Handler(regs*)+0x69>
c001fc1a:	8d 50 38             	lea    edx,[eax+0x38]
c001fc1d:	80 fa 07             	cmp    dl,0x7
c001fc20:	77 3c                	ja     c001fc5e <Vm::x87Handler(regs*)+0x138>
c001fc22:	83 ec 0c             	sub    esp,0xc
c001fc25:	2d c8 00 00 00       	sub    eax,0xc8
c001fc2a:	50                   	push   eax
c001fc2b:	e8 b9 fd ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fc30:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc37:	89 c6                	mov    esi,eax
c001fc39:	89 d7                	mov    edi,edx
c001fc3b:	e8 a9 fd ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fc40:	83 c4 0c             	add    esp,0xc
c001fc43:	52                   	push   edx
c001fc44:	50                   	push   eax
c001fc45:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc49:	2d c8 00 00 00       	sub    eax,0xc8
c001fc4e:	50                   	push   eax
c001fc4f:	e8 d8 fd ff ff       	call   c001fa2c <Vm::fpuSetReg(int, unsigned long long)>
c001fc54:	83 c4 0c             	add    esp,0xc
c001fc57:	57                   	push   edi
c001fc58:	56                   	push   esi
c001fc59:	e9 73 ff ff ff       	jmp    c001fbd1 <Vm::x87Handler(regs*)+0xab>
c001fc5e:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fc62:	84 d2                	test   dl,dl
c001fc64:	75 0f                	jne    c001fc75 <Vm::x87Handler(regs*)+0x14f>
c001fc66:	83 ec 0c             	sub    esp,0xc
c001fc69:	ff 36                	push   DWORD PTR [esi]
c001fc6b:	e8 c8 fa ff ff       	call   c001f738 <Vm::fpu32ToInternal(unsigned int)>
c001fc70:	e9 bf 00 00 00       	jmp    c001fd34 <Vm::x87Handler(regs*)+0x20e>
c001fc75:	80 fa 03             	cmp    dl,0x3
c001fc78:	75 13                	jne    c001fc8d <Vm::x87Handler(regs*)+0x167>
c001fc7a:	e8 55 fe ff ff       	call   c001fad4 <Vm::fpuPop()>
c001fc7f:	55                   	push   ebp
c001fc80:	55                   	push   ebp
c001fc81:	52                   	push   edx
c001fc82:	50                   	push   eax
c001fc83:	e8 4c fa ff ff       	call   c001f6d4 <Vm::fpuInternalTo32(unsigned long long)>
c001fc88:	e9 88 00 00 00       	jmp    c001fd15 <Vm::x87Handler(regs*)+0x1ef>
c001fc8d:	80 fa 05             	cmp    dl,0x5
c001fc90:	75 0e                	jne    c001fca0 <Vm::x87Handler(regs*)+0x17a>
c001fc92:	66 8b 06             	mov    ax,WORD PTR [esi]
c001fc95:	66 a3 02 1b 03 c0    	mov    ds:0xc0031b02,ax
c001fc9b:	e9 df 00 00 00       	jmp    c001fd7f <Vm::x87Handler(regs*)+0x259>
c001fca0:	31 c0                	xor    eax,eax
c001fca2:	80 fa 07             	cmp    dl,0x7
c001fca5:	0f 85 dc 08 00 00    	jne    c0020587 <Vm::x87Handler(regs*)+0xa61>
c001fcab:	66 a1 02 1b 03 c0    	mov    ax,ds:0xc0031b02
c001fcb1:	66 89 06             	mov    WORD PTR [esi],ax
c001fcb4:	e9 c6 00 00 00       	jmp    c001fd7f <Vm::x87Handler(regs*)+0x259>
c001fcb9:	80 fa d8             	cmp    dl,0xd8
c001fcbc:	0f 84 c9 00 00 00    	je     c001fd8b <Vm::x87Handler(regs*)+0x265>
c001fcc2:	80 fa dc             	cmp    dl,0xdc
c001fcc5:	0f 84 0d 02 00 00    	je     c001fed8 <Vm::x87Handler(regs*)+0x3b2>
c001fccb:	80 fa de             	cmp    dl,0xde
c001fcce:	0f 84 cd 02 00 00    	je     c001ffa1 <Vm::x87Handler(regs*)+0x47b>
c001fcd4:	80 fa dd             	cmp    dl,0xdd
c001fcd7:	0f 84 5f 04 00 00    	je     c002013c <Vm::x87Handler(regs*)+0x616>
c001fcdd:	80 fa da             	cmp    dl,0xda
c001fce0:	0f 84 24 05 00 00    	je     c002020a <Vm::x87Handler(regs*)+0x6e4>
c001fce6:	80 fa df             	cmp    dl,0xdf
c001fce9:	0f 84 68 05 00 00    	je     c0020257 <Vm::x87Handler(regs*)+0x731>
c001fcef:	31 c0                	xor    eax,eax
c001fcf1:	80 fa db             	cmp    dl,0xdb
c001fcf4:	0f 85 8d 08 00 00    	jne    c0020587 <Vm::x87Handler(regs*)+0xa61>
c001fcfa:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fcfe:	80 fa 03             	cmp    dl,0x3
c001fd01:	0f 85 70 06 00 00    	jne    c0020377 <Vm::x87Handler(regs*)+0x851>
c001fd07:	e8 c8 fd ff ff       	call   c001fad4 <Vm::fpuPop()>
c001fd0c:	55                   	push   ebp
c001fd0d:	55                   	push   ebp
c001fd0e:	52                   	push   edx
c001fd0f:	50                   	push   eax
c001fd10:	e8 71 fa ff ff       	call   c001f786 <Vm::fpuFloatToLong(unsigned long long)>
c001fd15:	83 c4 10             	add    esp,0x10
c001fd18:	89 06                	mov    DWORD PTR [esi],eax
c001fd1a:	eb 63                	jmp    c001fd7f <Vm::x87Handler(regs*)+0x259>
c001fd1c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fd20:	84 d2                	test   dl,dl
c001fd22:	0f 85 e6 05 00 00    	jne    c002030e <Vm::x87Handler(regs*)+0x7e8>
c001fd28:	57                   	push   edi
c001fd29:	57                   	push   edi
c001fd2a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd2d:	ff 36                	push   DWORD PTR [esi]
c001fd2f:	e8 49 fa ff ff       	call   c001f77d <Vm::fpu64ToInternal(unsigned long long)>
c001fd34:	5e                   	pop    esi
c001fd35:	5f                   	pop    edi
c001fd36:	52                   	push   edx
c001fd37:	50                   	push   eax
c001fd38:	e8 3a fd ff ff       	call   c001fa77 <Vm::fpuPush(unsigned long long)>
c001fd3d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001fd41:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd44:	e9 51 fe ff ff       	jmp    c001fb9a <Vm::x87Handler(regs*)+0x74>
c001fd49:	80 fa 03             	cmp    dl,0x3
c001fd4c:	0f 85 d7 06 00 00    	jne    c0020429 <Vm::x87Handler(regs*)+0x903>
c001fd52:	57                   	push   edi
c001fd53:	57                   	push   edi
c001fd54:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fd57:	ff 36                	push   DWORD PTR [esi]
c001fd59:	e8 1f fa ff ff       	call   c001f77d <Vm::fpu64ToInternal(unsigned long long)>
c001fd5e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd65:	89 c6                	mov    esi,eax
c001fd67:	89 d7                	mov    edi,edx
c001fd69:	e8 7b fc ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fd6e:	57                   	push   edi
c001fd6f:	56                   	push   esi
c001fd70:	52                   	push   edx
c001fd71:	50                   	push   eax
c001fd72:	e8 95 fb ff ff       	call   c001f90c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd77:	83 c4 20             	add    esp,0x20
c001fd7a:	e8 55 fd ff ff       	call   c001fad4 <Vm::fpuPop()>
c001fd7f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fd83:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001fd86:	e9 12 fe ff ff       	jmp    c001fb9d <Vm::x87Handler(regs*)+0x77>
c001fd8b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd8f:	8d 50 40             	lea    edx,[eax+0x40]
c001fd92:	80 fa 07             	cmp    dl,0x7
c001fd95:	77 29                	ja     c001fdc0 <Vm::x87Handler(regs*)+0x29a>
c001fd97:	83 ec 0c             	sub    esp,0xc
c001fd9a:	2d c0 00 00 00       	sub    eax,0xc0
c001fd9f:	50                   	push   eax
c001fda0:	e8 44 fc ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fda5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fdac:	89 c6                	mov    esi,eax
c001fdae:	89 d7                	mov    edi,edx
c001fdb0:	e8 34 fc ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fdb5:	57                   	push   edi
c001fdb6:	56                   	push   esi
c001fdb7:	52                   	push   edx
c001fdb8:	50                   	push   eax
c001fdb9:	e8 a1 fb ff ff       	call   c001f95f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fdbe:	eb 2f                	jmp    c001fdef <Vm::x87Handler(regs*)+0x2c9>
c001fdc0:	8d 50 38             	lea    edx,[eax+0x38]
c001fdc3:	80 fa 07             	cmp    dl,0x7
c001fdc6:	77 2f                	ja     c001fdf7 <Vm::x87Handler(regs*)+0x2d1>
c001fdc8:	83 ec 0c             	sub    esp,0xc
c001fdcb:	2d c8 00 00 00       	sub    eax,0xc8
c001fdd0:	50                   	push   eax
c001fdd1:	e8 13 fc ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fdd6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fddd:	89 c6                	mov    esi,eax
c001fddf:	89 d7                	mov    edi,edx
c001fde1:	e8 03 fc ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fde6:	57                   	push   edi
c001fde7:	56                   	push   esi
c001fde8:	52                   	push   edx
c001fde9:	50                   	push   eax
c001fdea:	e8 a9 fb ff ff       	call   c001f998 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fdef:	83 c4 1c             	add    esp,0x1c
c001fdf2:	e9 d8 fd ff ff       	jmp    c001fbcf <Vm::x87Handler(regs*)+0xa9>
c001fdf7:	8d 50 30             	lea    edx,[eax+0x30]
c001fdfa:	80 fa 07             	cmp    dl,0x7
c001fdfd:	77 0d                	ja     c001fe0c <Vm::x87Handler(regs*)+0x2e6>
c001fdff:	83 ec 0c             	sub    esp,0xc
c001fe02:	2d d0 00 00 00       	sub    eax,0xd0
c001fe07:	e9 99 03 00 00       	jmp    c00201a5 <Vm::x87Handler(regs*)+0x67f>
c001fe0c:	8d 50 28             	lea    edx,[eax+0x28]
c001fe0f:	80 fa 07             	cmp    dl,0x7
c001fe12:	77 0d                	ja     c001fe21 <Vm::x87Handler(regs*)+0x2fb>
c001fe14:	83 ec 0c             	sub    esp,0xc
c001fe17:	2d d8 00 00 00       	sub    eax,0xd8
c001fe1c:	e9 c0 03 00 00       	jmp    c00201e1 <Vm::x87Handler(regs*)+0x6bb>
c001fe21:	8d 50 20             	lea    edx,[eax+0x20]
c001fe24:	80 fa 07             	cmp    dl,0x7
c001fe27:	77 1b                	ja     c001fe44 <Vm::x87Handler(regs*)+0x31e>
c001fe29:	83 ec 0c             	sub    esp,0xc
c001fe2c:	2d e0 00 00 00       	sub    eax,0xe0
c001fe31:	50                   	push   eax
c001fe32:	e8 b2 fb ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fe37:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe3e:	89 c6                	mov    esi,eax
c001fe40:	89 d7                	mov    edi,edx
c001fe42:	eb 22                	jmp    c001fe66 <Vm::x87Handler(regs*)+0x340>
c001fe44:	8d 50 18             	lea    edx,[eax+0x18]
c001fe47:	80 fa 07             	cmp    dl,0x7
c001fe4a:	77 2d                	ja     c001fe79 <Vm::x87Handler(regs*)+0x353>
c001fe4c:	83 ec 0c             	sub    esp,0xc
c001fe4f:	6a 00                	push   0x0
c001fe51:	e8 93 fb ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fe56:	89 c6                	mov    esi,eax
c001fe58:	89 d7                	mov    edi,edx
c001fe5a:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fe5e:	2d e8 00 00 00       	sub    eax,0xe8
c001fe63:	89 04 24             	mov    DWORD PTR [esp],eax
c001fe66:	e8 7e fb ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fe6b:	57                   	push   edi
c001fe6c:	56                   	push   esi
c001fe6d:	52                   	push   edx
c001fe6e:	50                   	push   eax
c001fe6f:	e8 15 fb ff ff       	call   c001f989 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fe74:	e9 76 ff ff ff       	jmp    c001fdef <Vm::x87Handler(regs*)+0x2c9>
c001fe79:	8d 50 10             	lea    edx,[eax+0x10]
c001fe7c:	80 fa 07             	cmp    dl,0x7
c001fe7f:	77 1b                	ja     c001fe9c <Vm::x87Handler(regs*)+0x376>
c001fe81:	83 ec 0c             	sub    esp,0xc
c001fe84:	2d f0 00 00 00       	sub    eax,0xf0
c001fe89:	50                   	push   eax
c001fe8a:	e8 5a fb ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fe8f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fe96:	89 c6                	mov    esi,eax
c001fe98:	89 d7                	mov    edi,edx
c001fe9a:	eb 22                	jmp    c001febe <Vm::x87Handler(regs*)+0x398>
c001fe9c:	3c f7                	cmp    al,0xf7
c001fe9e:	0f 86 d1 03 00 00    	jbe    c0020275 <Vm::x87Handler(regs*)+0x74f>
c001fea4:	83 ec 0c             	sub    esp,0xc
c001fea7:	6a 00                	push   0x0
c001fea9:	e8 3b fb ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001feae:	89 c6                	mov    esi,eax
c001feb0:	89 d7                	mov    edi,edx
c001feb2:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001feb6:	2d f8 00 00 00       	sub    eax,0xf8
c001febb:	89 04 24             	mov    DWORD PTR [esp],eax
c001febe:	e8 26 fb ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fec3:	57                   	push   edi
c001fec4:	56                   	push   esi
c001fec5:	52                   	push   edx
c001fec6:	50                   	push   eax
c001fec7:	e8 eb fa ff ff       	call   c001f9b7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fecc:	83 c4 1c             	add    esp,0x1c
c001fecf:	52                   	push   edx
c001fed0:	50                   	push   eax
c001fed1:	6a 00                	push   0x0
c001fed3:	e9 51 02 00 00       	jmp    c0020129 <Vm::x87Handler(regs*)+0x603>
c001fed8:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fedc:	8d 50 40             	lea    edx,[eax+0x40]
c001fedf:	80 fa 07             	cmp    dl,0x7
c001fee2:	77 37                	ja     c001ff1b <Vm::x87Handler(regs*)+0x3f5>
c001fee4:	83 ec 0c             	sub    esp,0xc
c001fee7:	2d c0 00 00 00       	sub    eax,0xc0
c001feec:	50                   	push   eax
c001feed:	e8 f7 fa ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fef2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fef9:	89 c6                	mov    esi,eax
c001fefb:	89 d7                	mov    edi,edx
c001fefd:	e8 e7 fa ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001ff02:	57                   	push   edi
c001ff03:	56                   	push   esi
c001ff04:	52                   	push   edx
c001ff05:	50                   	push   eax
c001ff06:	e8 54 fa ff ff       	call   c001f95f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff0b:	83 c4 1c             	add    esp,0x1c
c001ff0e:	52                   	push   edx
c001ff0f:	50                   	push   eax
c001ff10:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff14:	2d c0 00 00 00       	sub    eax,0xc0
c001ff19:	eb 3d                	jmp    c001ff58 <Vm::x87Handler(regs*)+0x432>
c001ff1b:	8d 50 38             	lea    edx,[eax+0x38]
c001ff1e:	80 fa 07             	cmp    dl,0x7
c001ff21:	77 3b                	ja     c001ff5e <Vm::x87Handler(regs*)+0x438>
c001ff23:	83 ec 0c             	sub    esp,0xc
c001ff26:	2d c8 00 00 00       	sub    eax,0xc8
c001ff2b:	50                   	push   eax
c001ff2c:	e8 b8 fa ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001ff31:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff38:	89 c6                	mov    esi,eax
c001ff3a:	89 d7                	mov    edi,edx
c001ff3c:	e8 a8 fa ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001ff41:	57                   	push   edi
c001ff42:	56                   	push   esi
c001ff43:	52                   	push   edx
c001ff44:	50                   	push   eax
c001ff45:	e8 4e fa ff ff       	call   c001f998 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff4a:	83 c4 1c             	add    esp,0x1c
c001ff4d:	52                   	push   edx
c001ff4e:	50                   	push   eax
c001ff4f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff53:	2d c8 00 00 00       	sub    eax,0xc8
c001ff58:	50                   	push   eax
c001ff59:	e9 75 fc ff ff       	jmp    c001fbd3 <Vm::x87Handler(regs*)+0xad>
c001ff5e:	83 c0 18             	add    eax,0x18
c001ff61:	3c 07                	cmp    al,0x7
c001ff63:	0f 87 3b 04 00 00    	ja     c00203a4 <Vm::x87Handler(regs*)+0x87e>
c001ff69:	83 ec 0c             	sub    esp,0xc
c001ff6c:	6a 00                	push   0x0
c001ff6e:	e8 76 fa ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001ff73:	89 c6                	mov    esi,eax
c001ff75:	89 d7                	mov    edi,edx
c001ff77:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff7b:	2d e8 00 00 00       	sub    eax,0xe8
c001ff80:	89 04 24             	mov    DWORD PTR [esp],eax
c001ff83:	e8 61 fa ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001ff88:	57                   	push   edi
c001ff89:	56                   	push   esi
c001ff8a:	52                   	push   edx
c001ff8b:	50                   	push   eax
c001ff8c:	e8 f8 f9 ff ff       	call   c001f989 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ff91:	83 c4 1c             	add    esp,0x1c
c001ff94:	52                   	push   edx
c001ff95:	50                   	push   eax
c001ff96:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ff9a:	2d e8 00 00 00       	sub    eax,0xe8
c001ff9f:	eb b7                	jmp    c001ff58 <Vm::x87Handler(regs*)+0x432>
c001ffa1:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffa5:	8d 50 40             	lea    edx,[eax+0x40]
c001ffa8:	80 fa 07             	cmp    dl,0x7
c001ffab:	77 3a                	ja     c001ffe7 <Vm::x87Handler(regs*)+0x4c1>
c001ffad:	83 ec 0c             	sub    esp,0xc
c001ffb0:	2d c0 00 00 00       	sub    eax,0xc0
c001ffb5:	50                   	push   eax
c001ffb6:	e8 2e fa ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001ffbb:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc2:	89 c6                	mov    esi,eax
c001ffc4:	89 d7                	mov    edi,edx
c001ffc6:	e8 1e fa ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001ffcb:	57                   	push   edi
c001ffcc:	56                   	push   esi
c001ffcd:	52                   	push   edx
c001ffce:	50                   	push   eax
c001ffcf:	e8 8b f9 ff ff       	call   c001f95f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ffd4:	83 c4 1c             	add    esp,0x1c
c001ffd7:	52                   	push   edx
c001ffd8:	50                   	push   eax
c001ffd9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ffdd:	2d c0 00 00 00       	sub    eax,0xc0
c001ffe2:	e9 9e 01 00 00       	jmp    c0020185 <Vm::x87Handler(regs*)+0x65f>
c001ffe7:	8d 50 20             	lea    edx,[eax+0x20]
c001ffea:	80 fa 07             	cmp    dl,0x7
c001ffed:	77 3a                	ja     c0020029 <Vm::x87Handler(regs*)+0x503>
c001ffef:	83 ec 0c             	sub    esp,0xc
c001fff2:	2d e0 00 00 00       	sub    eax,0xe0
c001fff7:	50                   	push   eax
c001fff8:	e8 ec f9 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c001fffd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020004:	89 c6                	mov    esi,eax
c0020006:	89 d7                	mov    edi,edx
c0020008:	e8 dc f9 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c002000d:	57                   	push   edi
c002000e:	56                   	push   esi
c002000f:	52                   	push   edx
c0020010:	50                   	push   eax
c0020011:	e8 73 f9 ff ff       	call   c001f989 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020016:	83 c4 1c             	add    esp,0x1c
c0020019:	52                   	push   edx
c002001a:	50                   	push   eax
c002001b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002001f:	2d e0 00 00 00       	sub    eax,0xe0
c0020024:	e9 5c 01 00 00       	jmp    c0020185 <Vm::x87Handler(regs*)+0x65f>
c0020029:	8d 50 18             	lea    edx,[eax+0x18]
c002002c:	80 fa 07             	cmp    dl,0x7
c002002f:	77 3b                	ja     c002006c <Vm::x87Handler(regs*)+0x546>
c0020031:	83 ec 0c             	sub    esp,0xc
c0020034:	6a 00                	push   0x0
c0020036:	e8 ae f9 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c002003b:	89 c6                	mov    esi,eax
c002003d:	89 d7                	mov    edi,edx
c002003f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020043:	2d e8 00 00 00       	sub    eax,0xe8
c0020048:	89 04 24             	mov    DWORD PTR [esp],eax
c002004b:	e8 99 f9 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c0020050:	57                   	push   edi
c0020051:	56                   	push   esi
c0020052:	52                   	push   edx
c0020053:	50                   	push   eax
c0020054:	e8 30 f9 ff ff       	call   c001f989 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020059:	83 c4 1c             	add    esp,0x1c
c002005c:	52                   	push   edx
c002005d:	50                   	push   eax
c002005e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020062:	2d e8 00 00 00       	sub    eax,0xe8
c0020067:	e9 19 01 00 00       	jmp    c0020185 <Vm::x87Handler(regs*)+0x65f>
c002006c:	8d 50 38             	lea    edx,[eax+0x38]
c002006f:	80 fa 07             	cmp    dl,0x7
c0020072:	77 37                	ja     c00200ab <Vm::x87Handler(regs*)+0x585>
c0020074:	83 ec 0c             	sub    esp,0xc
c0020077:	2d c8 00 00 00       	sub    eax,0xc8
c002007c:	50                   	push   eax
c002007d:	e8 67 f9 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c0020082:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020089:	89 c6                	mov    esi,eax
c002008b:	89 d7                	mov    edi,edx
c002008d:	e8 57 f9 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c0020092:	57                   	push   edi
c0020093:	56                   	push   esi
c0020094:	52                   	push   edx
c0020095:	50                   	push   eax
c0020096:	e8 fd f8 ff ff       	call   c001f998 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002009b:	83 c4 1c             	add    esp,0x1c
c002009e:	52                   	push   edx
c002009f:	50                   	push   eax
c00200a0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200a4:	2d c8 00 00 00       	sub    eax,0xc8
c00200a9:	eb 7d                	jmp    c0020128 <Vm::x87Handler(regs*)+0x602>
c00200ab:	3c f7                	cmp    al,0xf7
c00200ad:	76 38                	jbe    c00200e7 <Vm::x87Handler(regs*)+0x5c1>
c00200af:	83 ec 0c             	sub    esp,0xc
c00200b2:	6a 00                	push   0x0
c00200b4:	e8 30 f9 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c00200b9:	89 c6                	mov    esi,eax
c00200bb:	89 d7                	mov    edi,edx
c00200bd:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200c1:	2d f8 00 00 00       	sub    eax,0xf8
c00200c6:	89 04 24             	mov    DWORD PTR [esp],eax
c00200c9:	e8 1b f9 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c00200ce:	57                   	push   edi
c00200cf:	56                   	push   esi
c00200d0:	52                   	push   edx
c00200d1:	50                   	push   eax
c00200d2:	e8 e0 f8 ff ff       	call   c001f9b7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00200d7:	83 c4 1c             	add    esp,0x1c
c00200da:	52                   	push   edx
c00200db:	50                   	push   eax
c00200dc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00200e0:	2d f8 00 00 00       	sub    eax,0xf8
c00200e5:	eb 41                	jmp    c0020128 <Vm::x87Handler(regs*)+0x602>
c00200e7:	8d 50 10             	lea    edx,[eax+0x10]
c00200ea:	80 fa 07             	cmp    dl,0x7
c00200ed:	0f 87 5a 01 00 00    	ja     c002024d <Vm::x87Handler(regs*)+0x727>
c00200f3:	83 ec 0c             	sub    esp,0xc
c00200f6:	2d f0 00 00 00       	sub    eax,0xf0
c00200fb:	50                   	push   eax
c00200fc:	e8 e8 f8 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c0020101:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020108:	89 c6                	mov    esi,eax
c002010a:	89 d7                	mov    edi,edx
c002010c:	e8 d8 f8 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c0020111:	57                   	push   edi
c0020112:	56                   	push   esi
c0020113:	52                   	push   edx
c0020114:	50                   	push   eax
c0020115:	e8 9d f8 ff ff       	call   c001f9b7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002011a:	83 c4 1c             	add    esp,0x1c
c002011d:	52                   	push   edx
c002011e:	50                   	push   eax
c002011f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020123:	2d f0 00 00 00       	sub    eax,0xf0
c0020128:	50                   	push   eax
c0020129:	e8 fe f8 ff ff       	call   c001fa2c <Vm::fpuSetReg(int, unsigned long long)>
c002012e:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020132:	e8 9d f9 ff ff       	call   c001fad4 <Vm::fpuPop()>
c0020137:	e9 5e fa ff ff       	jmp    c001fb9a <Vm::x87Handler(regs*)+0x74>
c002013c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020140:	8d 50 30             	lea    edx,[eax+0x30]
c0020143:	80 fa 07             	cmp    dl,0x7
c0020146:	77 1d                	ja     c0020165 <Vm::x87Handler(regs*)+0x63f>
c0020148:	83 ec 0c             	sub    esp,0xc
c002014b:	6a 00                	push   0x0
c002014d:	e8 97 f8 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c0020152:	83 c4 0c             	add    esp,0xc
c0020155:	52                   	push   edx
c0020156:	50                   	push   eax
c0020157:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002015b:	2d d0 00 00 00       	sub    eax,0xd0
c0020160:	e9 f3 fd ff ff       	jmp    c001ff58 <Vm::x87Handler(regs*)+0x432>
c0020165:	8d 50 28             	lea    edx,[eax+0x28]
c0020168:	80 fa 07             	cmp    dl,0x7
c002016b:	77 28                	ja     c0020195 <Vm::x87Handler(regs*)+0x66f>
c002016d:	83 ec 0c             	sub    esp,0xc
c0020170:	6a 00                	push   0x0
c0020172:	e8 72 f8 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c0020177:	83 c4 0c             	add    esp,0xc
c002017a:	52                   	push   edx
c002017b:	50                   	push   eax
c002017c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020180:	2d d8 00 00 00       	sub    eax,0xd8
c0020185:	50                   	push   eax
c0020186:	e8 a1 f8 ff ff       	call   c001fa2c <Vm::fpuSetReg(int, unsigned long long)>
c002018b:	e8 44 f9 ff ff       	call   c001fad4 <Vm::fpuPop()>
c0020190:	e9 01 fa ff ff       	jmp    c001fb96 <Vm::x87Handler(regs*)+0x70>
c0020195:	8d 50 20             	lea    edx,[eax+0x20]
c0020198:	80 fa 07             	cmp    dl,0x7
c002019b:	77 30                	ja     c00201cd <Vm::x87Handler(regs*)+0x6a7>
c002019d:	83 ec 0c             	sub    esp,0xc
c00201a0:	2d e0 00 00 00       	sub    eax,0xe0
c00201a5:	50                   	push   eax
c00201a6:	e8 3e f8 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c00201ab:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201b2:	89 c6                	mov    esi,eax
c00201b4:	89 d7                	mov    edi,edx
c00201b6:	e8 2e f8 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c00201bb:	57                   	push   edi
c00201bc:	56                   	push   esi
c00201bd:	52                   	push   edx
c00201be:	50                   	push   eax
c00201bf:	e8 48 f7 ff ff       	call   c001f90c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00201c4:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00201c8:	e9 54 02 00 00       	jmp    c0020421 <Vm::x87Handler(regs*)+0x8fb>
c00201cd:	8d 50 18             	lea    edx,[eax+0x18]
c00201d0:	80 fa 07             	cmp    dl,0x7
c00201d3:	0f 87 43 fb ff ff    	ja     c001fd1c <Vm::x87Handler(regs*)+0x1f6>
c00201d9:	83 ec 0c             	sub    esp,0xc
c00201dc:	2d e8 00 00 00       	sub    eax,0xe8
c00201e1:	50                   	push   eax
c00201e2:	e8 02 f8 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c00201e7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201ee:	89 c6                	mov    esi,eax
c00201f0:	89 d7                	mov    edi,edx
c00201f2:	e8 f2 f7 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c00201f7:	57                   	push   edi
c00201f8:	56                   	push   esi
c00201f9:	52                   	push   edx
c00201fa:	50                   	push   eax
c00201fb:	e8 0c f7 ff ff       	call   c001f90c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020200:	83 c4 20             	add    esp,0x20
c0020203:	e8 cc f8 ff ff       	call   c001fad4 <Vm::fpuPop()>
c0020208:	eb 62                	jmp    c002026c <Vm::x87Handler(regs*)+0x746>
c002020a:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c002020e:	0f 85 0f 01 00 00    	jne    c0020323 <Vm::x87Handler(regs*)+0x7fd>
c0020214:	83 ec 0c             	sub    esp,0xc
c0020217:	6a 01                	push   0x1
c0020219:	e8 cb f7 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c002021e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020225:	89 c6                	mov    esi,eax
c0020227:	89 d7                	mov    edi,edx
c0020229:	e8 bb f7 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c002022e:	57                   	push   edi
c002022f:	56                   	push   esi
c0020230:	52                   	push   edx
c0020231:	50                   	push   eax
c0020232:	e8 d5 f6 ff ff       	call   c001f90c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020237:	83 c4 20             	add    esp,0x20
c002023a:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002023e:	e8 91 f8 ff ff       	call   c001fad4 <Vm::fpuPop()>
c0020243:	e8 8c f8 ff ff       	call   c001fad4 <Vm::fpuPop()>
c0020248:	e9 50 f9 ff ff       	jmp    c001fb9d <Vm::x87Handler(regs*)+0x77>
c002024d:	3c d9                	cmp    al,0xd9
c002024f:	0f 85 b5 02 00 00    	jne    c002050a <Vm::x87Handler(regs*)+0x9e4>
c0020255:	eb bd                	jmp    c0020214 <Vm::x87Handler(regs*)+0x6ee>
c0020257:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c002025b:	0f 85 ea 02 00 00    	jne    c002054b <Vm::x87Handler(regs*)+0xa25>
c0020261:	0f b7 05 00 1b 03 c0 	movzx  eax,WORD PTR ds:0xc0031b00
c0020268:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c002026c:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020270:	e9 28 f9 ff ff       	jmp    c001fb9d <Vm::x87Handler(regs*)+0x77>
c0020275:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020279:	84 d2                	test   dl,dl
c002027b:	75 0f                	jne    c002028c <Vm::x87Handler(regs*)+0x766>
c002027d:	83 ec 0c             	sub    esp,0xc
c0020280:	ff 36                	push   DWORD PTR [esi]
c0020282:	e8 b1 f4 ff ff       	call   c001f738 <Vm::fpu32ToInternal(unsigned int)>
c0020287:	e9 2c 01 00 00       	jmp    c00203b8 <Vm::x87Handler(regs*)+0x892>
c002028c:	80 fa 01             	cmp    dl,0x1
c002028f:	75 0f                	jne    c00202a0 <Vm::x87Handler(regs*)+0x77a>
c0020291:	83 ec 0c             	sub    esp,0xc
c0020294:	ff 36                	push   DWORD PTR [esi]
c0020296:	e8 9d f4 ff ff       	call   c001f738 <Vm::fpu32ToInternal(unsigned int)>
c002029b:	e9 81 02 00 00       	jmp    c0020521 <Vm::x87Handler(regs*)+0x9fb>
c00202a0:	80 fa 04             	cmp    dl,0x4
c00202a3:	75 0f                	jne    c00202b4 <Vm::x87Handler(regs*)+0x78e>
c00202a5:	83 ec 0c             	sub    esp,0xc
c00202a8:	ff 36                	push   DWORD PTR [esi]
c00202aa:	e8 89 f4 ff ff       	call   c001f738 <Vm::fpu32ToInternal(unsigned int)>
c00202af:	e9 86 01 00 00       	jmp    c002043a <Vm::x87Handler(regs*)+0x914>
c00202b4:	80 fa 05             	cmp    dl,0x5
c00202b7:	75 1b                	jne    c00202d4 <Vm::x87Handler(regs*)+0x7ae>
c00202b9:	83 ec 0c             	sub    esp,0xc
c00202bc:	6a 00                	push   0x0
c00202be:	e8 26 f7 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c00202c3:	89 c7                	mov    edi,eax
c00202c5:	89 d5                	mov    ebp,edx
c00202c7:	58                   	pop    eax
c00202c8:	ff 36                	push   DWORD PTR [esi]
c00202ca:	e8 69 f4 ff ff       	call   c001f738 <Vm::fpu32ToInternal(unsigned int)>
c00202cf:	e9 a3 01 00 00       	jmp    c0020477 <Vm::x87Handler(regs*)+0x951>
c00202d4:	80 fa 06             	cmp    dl,0x6
c00202d7:	75 0f                	jne    c00202e8 <Vm::x87Handler(regs*)+0x7c2>
c00202d9:	83 ec 0c             	sub    esp,0xc
c00202dc:	ff 36                	push   DWORD PTR [esi]
c00202de:	e8 55 f4 ff ff       	call   c001f738 <Vm::fpu32ToInternal(unsigned int)>
c00202e3:	e9 ae 01 00 00       	jmp    c0020496 <Vm::x87Handler(regs*)+0x970>
c00202e8:	31 c0                	xor    eax,eax
c00202ea:	80 fa 07             	cmp    dl,0x7
c00202ed:	0f 85 94 02 00 00    	jne    c0020587 <Vm::x87Handler(regs*)+0xa61>
c00202f3:	83 ec 0c             	sub    esp,0xc
c00202f6:	6a 00                	push   0x0
c00202f8:	e8 ec f6 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c00202fd:	89 c7                	mov    edi,eax
c00202ff:	89 d5                	mov    ebp,edx
c0020301:	58                   	pop    eax
c0020302:	ff 36                	push   DWORD PTR [esi]
c0020304:	e8 2f f4 ff ff       	call   c001f738 <Vm::fpu32ToInternal(unsigned int)>
c0020309:	e9 cb 01 00 00       	jmp    c00204d9 <Vm::x87Handler(regs*)+0x9b3>
c002030e:	80 fa 03             	cmp    dl,0x3
c0020311:	0f 85 d3 01 00 00    	jne    c00204ea <Vm::x87Handler(regs*)+0x9c4>
c0020317:	e8 b8 f7 ff ff       	call   c001fad4 <Vm::fpuPop()>
c002031c:	51                   	push   ecx
c002031d:	51                   	push   ecx
c002031e:	e9 de 01 00 00       	jmp    c0020501 <Vm::x87Handler(regs*)+0x9db>
c0020323:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020327:	80 fa 01             	cmp    dl,0x1
c002032a:	75 09                	jne    c0020335 <Vm::x87Handler(regs*)+0x80f>
c002032c:	57                   	push   edi
c002032d:	57                   	push   edi
c002032e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020330:	e9 e3 01 00 00       	jmp    c0020518 <Vm::x87Handler(regs*)+0x9f2>
c0020335:	80 fa 04             	cmp    dl,0x4
c0020338:	75 12                	jne    c002034c <Vm::x87Handler(regs*)+0x826>
c002033a:	31 d2                	xor    edx,edx
c002033c:	51                   	push   ecx
c002033d:	51                   	push   ecx
c002033e:	8b 06                	mov    eax,DWORD PTR [esi]
c0020340:	52                   	push   edx
c0020341:	50                   	push   eax
c0020342:	e8 d0 f4 ff ff       	call   c001f817 <Vm::fpuLongToFloat(long long)>
c0020347:	e9 ee 00 00 00       	jmp    c002043a <Vm::x87Handler(regs*)+0x914>
c002034c:	31 c0                	xor    eax,eax
c002034e:	80 fa 07             	cmp    dl,0x7
c0020351:	0f 85 30 02 00 00    	jne    c0020587 <Vm::x87Handler(regs*)+0xa61>
c0020357:	83 ec 0c             	sub    esp,0xc
c002035a:	6a 00                	push   0x0
c002035c:	e8 88 f6 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c0020361:	89 c7                	mov    edi,eax
c0020363:	89 d5                	mov    ebp,edx
c0020365:	58                   	pop    eax
c0020366:	8b 06                	mov    eax,DWORD PTR [esi]
c0020368:	5a                   	pop    edx
c0020369:	31 d2                	xor    edx,edx
c002036b:	52                   	push   edx
c002036c:	50                   	push   eax
c002036d:	e8 a5 f4 ff ff       	call   c001f817 <Vm::fpuLongToFloat(long long)>
c0020372:	e9 62 01 00 00       	jmp    c00204d9 <Vm::x87Handler(regs*)+0x9b3>
c0020377:	84 d2                	test   dl,dl
c0020379:	75 0d                	jne    c0020388 <Vm::x87Handler(regs*)+0x862>
c002037b:	31 d2                	xor    edx,edx
c002037d:	55                   	push   ebp
c002037e:	55                   	push   ebp
c002037f:	8b 06                	mov    eax,DWORD PTR [esi]
c0020381:	52                   	push   edx
c0020382:	50                   	push   eax
c0020383:	e9 d3 01 00 00       	jmp    c002055b <Vm::x87Handler(regs*)+0xa35>
c0020388:	31 c0                	xor    eax,eax
c002038a:	80 fa 02             	cmp    dl,0x2
c002038d:	0f 85 f4 01 00 00    	jne    c0020587 <Vm::x87Handler(regs*)+0xa61>
c0020393:	83 ec 0c             	sub    esp,0xc
c0020396:	6a 00                	push   0x0
c0020398:	e8 4c f6 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c002039d:	59                   	pop    ecx
c002039e:	5f                   	pop    edi
c002039f:	e9 6a f9 ff ff       	jmp    c001fd0e <Vm::x87Handler(regs*)+0x1e8>
c00203a4:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00203a8:	84 d2                	test   dl,dl
c00203aa:	75 2a                	jne    c00203d6 <Vm::x87Handler(regs*)+0x8b0>
c00203ac:	50                   	push   eax
c00203ad:	50                   	push   eax
c00203ae:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203b1:	ff 36                	push   DWORD PTR [esi]
c00203b3:	e8 c5 f3 ff ff       	call   c001f77d <Vm::fpu64ToInternal(unsigned long long)>
c00203b8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203bf:	89 c6                	mov    esi,eax
c00203c1:	89 d7                	mov    edi,edx
c00203c3:	e8 21 f6 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c00203c8:	57                   	push   edi
c00203c9:	56                   	push   esi
c00203ca:	52                   	push   edx
c00203cb:	50                   	push   eax
c00203cc:	e8 8e f5 ff ff       	call   c001f95f <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00203d1:	e9 64 01 00 00       	jmp    c002053a <Vm::x87Handler(regs*)+0xa14>
c00203d6:	80 fa 01             	cmp    dl,0x1
c00203d9:	75 11                	jne    c00203ec <Vm::x87Handler(regs*)+0x8c6>
c00203db:	50                   	push   eax
c00203dc:	50                   	push   eax
c00203dd:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203e0:	ff 36                	push   DWORD PTR [esi]
c00203e2:	e8 96 f3 ff ff       	call   c001f77d <Vm::fpu64ToInternal(unsigned long long)>
c00203e7:	e9 35 01 00 00       	jmp    c0020521 <Vm::x87Handler(regs*)+0x9fb>
c00203ec:	80 fa 02             	cmp    dl,0x2
c00203ef:	0f 85 54 f9 ff ff    	jne    c001fd49 <Vm::x87Handler(regs*)+0x223>
c00203f5:	55                   	push   ebp
c00203f6:	55                   	push   ebp
c00203f7:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00203fa:	ff 36                	push   DWORD PTR [esi]
c00203fc:	e8 7c f3 ff ff       	call   c001f77d <Vm::fpu64ToInternal(unsigned long long)>
c0020401:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020408:	89 c6                	mov    esi,eax
c002040a:	89 d7                	mov    edi,edx
c002040c:	e8 d8 f5 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c0020411:	57                   	push   edi
c0020412:	56                   	push   esi
c0020413:	52                   	push   edx
c0020414:	50                   	push   eax
c0020415:	e8 f2 f4 ff ff       	call   c001f90c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002041a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002041e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020421:	83 c4 20             	add    esp,0x20
c0020424:	e9 74 f7 ff ff       	jmp    c001fb9d <Vm::x87Handler(regs*)+0x77>
c0020429:	80 fa 04             	cmp    dl,0x4
c002042c:	75 2a                	jne    c0020458 <Vm::x87Handler(regs*)+0x932>
c002042e:	51                   	push   ecx
c002042f:	51                   	push   ecx
c0020430:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020433:	ff 36                	push   DWORD PTR [esi]
c0020435:	e8 43 f3 ff ff       	call   c001f77d <Vm::fpu64ToInternal(unsigned long long)>
c002043a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020441:	89 c6                	mov    esi,eax
c0020443:	89 d7                	mov    edi,edx
c0020445:	e8 9f f5 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c002044a:	57                   	push   edi
c002044b:	56                   	push   esi
c002044c:	52                   	push   edx
c002044d:	50                   	push   eax
c002044e:	e8 36 f5 ff ff       	call   c001f989 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020453:	e9 e2 00 00 00       	jmp    c002053a <Vm::x87Handler(regs*)+0xa14>
c0020458:	80 fa 05             	cmp    dl,0x5
c002045b:	75 28                	jne    c0020485 <Vm::x87Handler(regs*)+0x95f>
c002045d:	83 ec 0c             	sub    esp,0xc
c0020460:	6a 00                	push   0x0
c0020462:	e8 82 f5 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c0020467:	89 c7                	mov    edi,eax
c0020469:	89 d5                	mov    ebp,edx
c002046b:	58                   	pop    eax
c002046c:	5a                   	pop    edx
c002046d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020470:	ff 36                	push   DWORD PTR [esi]
c0020472:	e8 06 f3 ff ff       	call   c001f77d <Vm::fpu64ToInternal(unsigned long long)>
c0020477:	83 c4 10             	add    esp,0x10
c002047a:	55                   	push   ebp
c002047b:	57                   	push   edi
c002047c:	52                   	push   edx
c002047d:	50                   	push   eax
c002047e:	e8 06 f5 ff ff       	call   c001f989 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020483:	eb 60                	jmp    c00204e5 <Vm::x87Handler(regs*)+0x9bf>
c0020485:	80 fa 06             	cmp    dl,0x6
c0020488:	75 2a                	jne    c00204b4 <Vm::x87Handler(regs*)+0x98e>
c002048a:	51                   	push   ecx
c002048b:	51                   	push   ecx
c002048c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002048f:	ff 36                	push   DWORD PTR [esi]
c0020491:	e8 e7 f2 ff ff       	call   c001f77d <Vm::fpu64ToInternal(unsigned long long)>
c0020496:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002049d:	89 c6                	mov    esi,eax
c002049f:	89 d7                	mov    edi,edx
c00204a1:	e8 43 f5 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c00204a6:	57                   	push   edi
c00204a7:	56                   	push   esi
c00204a8:	52                   	push   edx
c00204a9:	50                   	push   eax
c00204aa:	e8 08 f5 ff ff       	call   c001f9b7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204af:	e9 86 00 00 00       	jmp    c002053a <Vm::x87Handler(regs*)+0xa14>
c00204b4:	31 c0                	xor    eax,eax
c00204b6:	80 fa 07             	cmp    dl,0x7
c00204b9:	0f 85 c8 00 00 00    	jne    c0020587 <Vm::x87Handler(regs*)+0xa61>
c00204bf:	83 ec 0c             	sub    esp,0xc
c00204c2:	6a 00                	push   0x0
c00204c4:	e8 20 f5 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c00204c9:	89 c7                	mov    edi,eax
c00204cb:	89 d5                	mov    ebp,edx
c00204cd:	58                   	pop    eax
c00204ce:	5a                   	pop    edx
c00204cf:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00204d2:	ff 36                	push   DWORD PTR [esi]
c00204d4:	e8 a4 f2 ff ff       	call   c001f77d <Vm::fpu64ToInternal(unsigned long long)>
c00204d9:	83 c4 10             	add    esp,0x10
c00204dc:	55                   	push   ebp
c00204dd:	57                   	push   edi
c00204de:	52                   	push   edx
c00204df:	50                   	push   eax
c00204e0:	e8 d2 f4 ff ff       	call   c001f9b7 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00204e5:	83 c4 0c             	add    esp,0xc
c00204e8:	eb 53                	jmp    c002053d <Vm::x87Handler(regs*)+0xa17>
c00204ea:	31 c0                	xor    eax,eax
c00204ec:	80 fa 02             	cmp    dl,0x2
c00204ef:	0f 85 92 00 00 00    	jne    c0020587 <Vm::x87Handler(regs*)+0xa61>
c00204f5:	83 ec 0c             	sub    esp,0xc
c00204f8:	6a 00                	push   0x0
c00204fa:	e8 ea f4 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c00204ff:	59                   	pop    ecx
c0020500:	5f                   	pop    edi
c0020501:	52                   	push   edx
c0020502:	50                   	push   eax
c0020503:	e8 27 f2 ff ff       	call   c001f72f <Vm::fpuInternalTo64(unsigned long long)>
c0020508:	eb 70                	jmp    c002057a <Vm::x87Handler(regs*)+0xa54>
c002050a:	31 c0                	xor    eax,eax
c002050c:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020511:	75 74                	jne    c0020587 <Vm::x87Handler(regs*)+0xa61>
c0020513:	50                   	push   eax
c0020514:	50                   	push   eax
c0020515:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020518:	31 d2                	xor    edx,edx
c002051a:	52                   	push   edx
c002051b:	50                   	push   eax
c002051c:	e8 f6 f2 ff ff       	call   c001f817 <Vm::fpuLongToFloat(long long)>
c0020521:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020528:	89 c6                	mov    esi,eax
c002052a:	89 d7                	mov    edi,edx
c002052c:	e8 b8 f4 ff ff       	call   c001f9e9 <Vm::fpuGetReg(int)>
c0020531:	57                   	push   edi
c0020532:	56                   	push   esi
c0020533:	52                   	push   edx
c0020534:	50                   	push   eax
c0020535:	e8 5e f4 ff ff       	call   c001f998 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002053a:	83 c4 1c             	add    esp,0x1c
c002053d:	52                   	push   edx
c002053e:	50                   	push   eax
c002053f:	6a 00                	push   0x0
c0020541:	e8 e6 f4 ff ff       	call   c001fa2c <Vm::fpuSetReg(int, unsigned long long)>
c0020546:	e9 f2 f7 ff ff       	jmp    c001fd3d <Vm::x87Handler(regs*)+0x217>
c002054b:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002054f:	80 fa 05             	cmp    dl,0x5
c0020552:	75 11                	jne    c0020565 <Vm::x87Handler(regs*)+0xa3f>
c0020554:	55                   	push   ebp
c0020555:	55                   	push   ebp
c0020556:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020559:	ff 36                	push   DWORD PTR [esi]
c002055b:	e8 81 f2 ff ff       	call   c001f7e1 <Vm::fpuULongToFloat(unsigned long long)>
c0020560:	e9 cf f7 ff ff       	jmp    c001fd34 <Vm::x87Handler(regs*)+0x20e>
c0020565:	31 c0                	xor    eax,eax
c0020567:	80 fa 07             	cmp    dl,0x7
c002056a:	75 1b                	jne    c0020587 <Vm::x87Handler(regs*)+0xa61>
c002056c:	e8 63 f5 ff ff       	call   c001fad4 <Vm::fpuPop()>
c0020571:	51                   	push   ecx
c0020572:	51                   	push   ecx
c0020573:	52                   	push   edx
c0020574:	50                   	push   eax
c0020575:	e8 0c f2 ff ff       	call   c001f786 <Vm::fpuFloatToLong(unsigned long long)>
c002057a:	83 c4 10             	add    esp,0x10
c002057d:	89 06                	mov    DWORD PTR [esi],eax
c002057f:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020582:	e9 f8 f7 ff ff       	jmp    c001fd7f <Vm::x87Handler(regs*)+0x259>
c0020587:	83 c4 1c             	add    esp,0x1c
c002058a:	5b                   	pop    ebx
c002058b:	5e                   	pop    esi
c002058c:	5f                   	pop    edi
c002058d:	5d                   	pop    ebp
c002058e:	c3                   	ret    

c002058f <__static_initialization_and_destruction_0(int, int)>:
c002058f:	83 ec 0c             	sub    esp,0xc
c0020592:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020597:	75 1a                	jne    c00205b3 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020599:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00205a1:	75 10                	jne    c00205b3 <__static_initialization_and_destruction_0(int, int)+0x24>
c00205a3:	83 ec 0c             	sub    esp,0xc
c00205a6:	68 00 1b 03 c0       	push   0xc0031b00
c00205ab:	e8 10 88 00 00       	call   c0028dc0 <Vm::_FPUState::_FPUState()>
c00205b0:	83 c4 10             	add    esp,0x10
c00205b3:	90                   	nop
c00205b4:	83 c4 0c             	add    esp,0xc
c00205b7:	c3                   	ret    

c00205b8 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c00205b8:	83 ec 0c             	sub    esp,0xc
c00205bb:	83 ec 08             	sub    esp,0x8
c00205be:	68 ff ff 00 00       	push   0xffff
c00205c3:	6a 01                	push   0x1
c00205c5:	e8 c5 ff ff ff       	call   c002058f <__static_initialization_and_destruction_0(int, int)>
c00205ca:	83 c4 10             	add    esp,0x10
c00205cd:	83 c4 0c             	add    esp,0xc
c00205d0:	c3                   	ret    
c00205d1:	90                   	nop

c00205d2 <FAT::getName()>:
c00205d2:	b8 1c c9 02 c0       	mov    eax,0xc002c91c
c00205d7:	c3                   	ret    

c00205d8 <FAT::tell(void*, unsigned long long*)>:
c00205d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00205dd:	75 06                	jne    c00205e5 <FAT::tell(void*, unsigned long long*)+0xd>
c00205df:	b8 04 00 00 00       	mov    eax,0x4
c00205e4:	c3                   	ret    
c00205e5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00205ea:	75 06                	jne    c00205f2 <FAT::tell(void*, unsigned long long*)+0x1a>
c00205ec:	b8 04 00 00 00       	mov    eax,0x4
c00205f1:	c3                   	ret    
c00205f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00205f6:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c00205f9:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00205fc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020600:	89 01                	mov    DWORD PTR [ecx],eax
c0020602:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020605:	b8 00 00 00 00       	mov    eax,0x0
c002060a:	c3                   	ret    
c002060b:	90                   	nop

c002060c <FAT::stat(void*, unsigned long long*)>:
c002060c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020611:	75 06                	jne    c0020619 <FAT::stat(void*, unsigned long long*)+0xd>
c0020613:	b8 04 00 00 00       	mov    eax,0x4
c0020618:	c3                   	ret    
c0020619:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002061e:	75 06                	jne    c0020626 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020620:	b8 04 00 00 00       	mov    eax,0x4
c0020625:	c3                   	ret    
c0020626:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002062a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c002062d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020630:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020634:	89 01                	mov    DWORD PTR [ecx],eax
c0020636:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020639:	b8 00 00 00 00       	mov    eax,0x0
c002063e:	c3                   	ret    
c002063f:	90                   	nop

c0020640 <FAT::~FAT()>:
c0020640:	83 ec 0c             	sub    esp,0xc
c0020643:	ba a0 c9 02 c0       	mov    edx,0xc002c9a0
c0020648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002064c:	89 10                	mov    DWORD PTR [eax],edx
c002064e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020652:	83 ec 0c             	sub    esp,0xc
c0020655:	50                   	push   eax
c0020656:	e8 bd 2c ff ff       	call   c0013318 <Filesystem::~Filesystem()>
c002065b:	83 c4 10             	add    esp,0x10
c002065e:	90                   	nop
c002065f:	83 c4 0c             	add    esp,0xc
c0020662:	c3                   	ret    
c0020663:	90                   	nop

c0020664 <FAT::~FAT()>:
c0020664:	83 ec 0c             	sub    esp,0xc
c0020667:	83 ec 0c             	sub    esp,0xc
c002066a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002066e:	e8 cd ff ff ff       	call   c0020640 <FAT::~FAT()>
c0020673:	83 c4 10             	add    esp,0x10
c0020676:	83 ec 08             	sub    esp,0x8
c0020679:	6a 08                	push   0x8
c002067b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002067f:	e8 8b 28 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0020684:	83 c4 10             	add    esp,0x10
c0020687:	83 c4 0c             	add    esp,0xc
c002068a:	c3                   	ret    
c002068b:	90                   	nop

c002068c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002068c:	83 ec 1c             	sub    esp,0x1c
c002068f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020696:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002069b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002069f:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c00206a6:	83 f8 ff             	cmp    eax,0xffffffff
c00206a9:	75 34                	jne    c00206df <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c00206ab:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206af:	88 c2                	mov    dl,al
c00206b1:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c00206b6:	01 d0                	add    eax,edx
c00206b8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206bc:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c00206c2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206c6:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c00206cd:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c00206d2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00206d6:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c00206dd:	eb 17                	jmp    c00206f6 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c00206df:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00206e3:	88 c2                	mov    dl,al
c00206e5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00206e9:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c00206f0:	01 d0                	add    eax,edx
c00206f2:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00206f6:	83 ec 04             	sub    esp,0x4
c00206f9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00206fd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020701:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020705:	50                   	push   eax
c0020706:	e8 2d 66 fe ff       	call   c0006d38 <f_getlabel>
c002070b:	83 c4 10             	add    esp,0x10
c002070e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020712:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020717:	75 07                	jne    c0020720 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020719:	b8 00 00 00 00       	mov    eax,0x0
c002071e:	eb 05                	jmp    c0020725 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020720:	b8 01 00 00 00       	mov    eax,0x1
c0020725:	83 c4 1c             	add    esp,0x1c
c0020728:	c3                   	ret    
c0020729:	90                   	nop

c002072a <FAT::setlabel(LogicalDisk*, int, char*)>:
c002072a:	57                   	push   edi
c002072b:	83 ec 58             	sub    esp,0x58
c002072e:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020736:	8d 54 24 10          	lea    edx,[esp+0x10]
c002073a:	b9 0f 00 00 00       	mov    ecx,0xf
c002073f:	b8 00 00 00 00       	mov    eax,0x0
c0020744:	fc                   	cld    
c0020745:	89 d7                	mov    edi,edx
c0020747:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020749:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c002074d:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c0020754:	83 f8 ff             	cmp    eax,0xffffffff
c0020757:	75 34                	jne    c002078d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020759:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c002075d:	88 c2                	mov    dl,al
c002075f:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020764:	01 d0                	add    eax,edx
c0020766:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c002076a:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c0020770:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020774:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c002077b:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020780:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020784:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c002078b:	eb 17                	jmp    c00207a4 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002078d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020791:	88 c2                	mov    dl,al
c0020793:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020797:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c002079e:	01 d0                	add    eax,edx
c00207a0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00207a4:	83 ec 08             	sub    esp,0x8
c00207a7:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00207ab:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207af:	50                   	push   eax
c00207b0:	e8 bf 01 fe ff       	call   c0000974 <strcat>
c00207b5:	83 c4 10             	add    esp,0x10
c00207b8:	83 ec 0c             	sub    esp,0xc
c00207bb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00207bf:	50                   	push   eax
c00207c0:	e8 61 67 fe ff       	call   c0006f26 <f_setlabel>
c00207c5:	83 c4 10             	add    esp,0x10
c00207c8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00207cc:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00207d1:	75 07                	jne    c00207da <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c00207d3:	b8 00 00 00 00       	mov    eax,0x0
c00207d8:	eb 05                	jmp    c00207df <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c00207da:	b8 01 00 00 00       	mov    eax,0x1
c00207df:	83 c4 58             	add    esp,0x58
c00207e2:	5f                   	pop    edi
c00207e3:	c3                   	ret    

c00207e4 <FAT::format(LogicalDisk*, int, char const*, int)>:
c00207e4:	83 ec 2c             	sub    esp,0x2c
c00207e7:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00207ef:	83 ec 08             	sub    esp,0x8
c00207f2:	68 40 c9 02 c0       	push   0xc002c940
c00207f7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00207fb:	e8 c0 00 fe ff       	call   c00008c0 <strcmp>
c0020800:	83 c4 10             	add    esp,0x10
c0020803:	85 c0                	test   eax,eax
c0020805:	0f 94 c0             	sete   al
c0020808:	84 c0                	test   al,al
c002080a:	74 0d                	je     c0020819 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002080c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020814:	e9 a6 00 00 00       	jmp    c00208bf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020819:	83 ec 08             	sub    esp,0x8
c002081c:	68 32 c9 02 c0       	push   0xc002c932
c0020821:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020825:	e8 96 00 fe ff       	call   c00008c0 <strcmp>
c002082a:	83 c4 10             	add    esp,0x10
c002082d:	85 c0                	test   eax,eax
c002082f:	0f 94 c0             	sete   al
c0020832:	84 c0                	test   al,al
c0020834:	74 0a                	je     c0020840 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020836:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c002083e:	eb 7f                	jmp    c00208bf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020840:	83 ec 08             	sub    esp,0x8
c0020843:	68 38 c9 02 c0       	push   0xc002c938
c0020848:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002084c:	e8 6f 00 fe ff       	call   c00008c0 <strcmp>
c0020851:	83 c4 10             	add    esp,0x10
c0020854:	85 c0                	test   eax,eax
c0020856:	0f 94 c0             	sete   al
c0020859:	84 c0                	test   al,al
c002085b:	74 0a                	je     c0020867 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c002085d:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020865:	eb 58                	jmp    c00208bf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020867:	83 ec 08             	sub    esp,0x8
c002086a:	68 2c 95 02 c0       	push   0xc002952c
c002086f:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020873:	e8 48 00 fe ff       	call   c00008c0 <strcmp>
c0020878:	83 c4 10             	add    esp,0x10
c002087b:	85 c0                	test   eax,eax
c002087d:	0f 94 c0             	sete   al
c0020880:	84 c0                	test   al,al
c0020882:	74 0a                	je     c002088e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020884:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002088c:	eb 31                	jmp    c00208bf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002088e:	83 ec 08             	sub    esp,0x8
c0020891:	68 3e c9 02 c0       	push   0xc002c93e
c0020896:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002089a:	e8 21 00 fe ff       	call   c00008c0 <strcmp>
c002089f:	83 c4 10             	add    esp,0x10
c00208a2:	85 c0                	test   eax,eax
c00208a4:	0f 94 c0             	sete   al
c00208a7:	84 c0                	test   al,al
c00208a9:	74 0a                	je     c00208b5 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c00208ab:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00208b3:	eb 0a                	jmp    c00208bf <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00208b5:	b8 08 00 00 00       	mov    eax,0x8
c00208ba:	e9 04 01 00 00       	jmp    c00209c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00208bf:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00208c6:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00208cb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208cf:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c00208d6:	83 f8 ff             	cmp    eax,0xffffffff
c00208d9:	75 34                	jne    c002090f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c00208db:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c00208df:	88 c2                	mov    dl,al
c00208e1:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c00208e6:	01 d0                	add    eax,edx
c00208e8:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00208ec:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c00208f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00208f6:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c00208fd:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020902:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020906:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c002090d:	eb 17                	jmp    c0020926 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002090f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020913:	88 c2                	mov    dl,al
c0020915:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020919:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c0020920:	01 d0                	add    eax,edx
c0020922:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020926:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002092a:	88 04 24             	mov    BYTE PTR [esp],al
c002092d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020931:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020935:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002093d:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020942:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c002094a:	83 ec 0c             	sub    esp,0xc
c002094d:	68 00 20 00 00       	push   0x2000
c0020952:	e8 ec ee fe ff       	call   c000f843 <malloc>
c0020957:	83 c4 10             	add    esp,0x10
c002095a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002095e:	68 00 20 00 00       	push   0x2000
c0020963:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020967:	8d 44 24 08          	lea    eax,[esp+0x8]
c002096b:	50                   	push   eax
c002096c:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020970:	50                   	push   eax
c0020971:	e8 fb 69 fe ff       	call   c0007371 <f_mkfs>
c0020976:	83 c4 10             	add    esp,0x10
c0020979:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002097d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020982:	75 07                	jne    c002098b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020984:	b8 00 00 00 00       	mov    eax,0x0
c0020989:	eb 38                	jmp    c00209c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002098b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020990:	75 17                	jne    c00209a9 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020992:	83 ec 0c             	sub    esp,0xc
c0020995:	68 70 c9 02 c0       	push   0xc002c970
c002099a:	e8 50 26 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c002099f:	83 c4 10             	add    esp,0x10
c00209a2:	b8 09 00 00 00       	mov    eax,0x9
c00209a7:	eb 1a                	jmp    c00209c3 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c00209a9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00209ad:	83 ec 08             	sub    esp,0x8
c00209b0:	50                   	push   eax
c00209b1:	68 44 c9 02 c0       	push   0xc002c944
c00209b6:	e8 34 26 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00209bb:	83 c4 10             	add    esp,0x10
c00209be:	b8 01 00 00 00       	mov    eax,0x1
c00209c3:	83 c4 2c             	add    esp,0x2c
c00209c6:	c3                   	ret    
c00209c7:	90                   	nop

c00209c8 <FAT::tryMount(LogicalDisk*, int)>:
c00209c8:	81 ec 6c 03 00 00    	sub    esp,0x36c
c00209ce:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c00209d3:	83 f8 14             	cmp    eax,0x14
c00209d6:	75 17                	jne    c00209ef <FAT::tryMount(LogicalDisk*, int)+0x27>
c00209d8:	83 ec 0c             	sub    esp,0xc
c00209db:	68 56 c9 02 c0       	push   0xc002c956
c00209e0:	e8 b8 9c ff ff       	call   c001a69d <Krnl::panic(char const*)>
c00209e5:	83 c4 10             	add    esp,0x10
c00209e8:	b0 00                	mov    al,0x0
c00209ea:	e9 d7 01 00 00       	jmp    c0020bc6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00209ef:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00209f6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00209fc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020a02:	3d 00 02 00 00       	cmp    eax,0x200
c0020a07:	74 07                	je     c0020a10 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020a09:	b0 00                	mov    al,0x0
c0020a0b:	e9 b6 01 00 00       	jmp    c0020bc6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a10:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020a18:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a1f:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c0020a26:	83 f8 ff             	cmp    eax,0xffffffff
c0020a29:	74 07                	je     c0020a32 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020a2b:	b0 01                	mov    al,0x1
c0020a2d:	e9 94 01 00 00       	jmp    c0020bc6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020a32:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020a3c:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020a44:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020a4b:	88 c2                	mov    dl,al
c0020a4d:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020a52:	01 d0                	add    eax,edx
c0020a54:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0020a5b:	8b 15 60 1b 03 c0    	mov    edx,DWORD PTR ds:0xc0031b60
c0020a61:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020a68:	89 14 85 80 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce480],edx
c0020a6f:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020a74:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0020a7b:	89 14 85 00 1c 03 c0 	mov    DWORD PTR [eax*4-0x3ffce400],edx
c0020a82:	83 ec 0c             	sub    esp,0xc
c0020a85:	68 54 02 00 00       	push   0x254
c0020a8a:	e8 b4 ed fe ff       	call   c000f843 <malloc>
c0020a8f:	83 c4 10             	add    esp,0x10
c0020a92:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020a99:	83 ec 04             	sub    esp,0x4
c0020a9c:	6a 00                	push   0x0
c0020a9e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020aa5:	50                   	push   eax
c0020aa6:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020aad:	e8 7d 44 fe ff       	call   c0004f2f <f_mount>
c0020ab2:	83 c4 10             	add    esp,0x10
c0020ab5:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020abc:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020ac4:	74 19                	je     c0020adf <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020ac6:	83 ec 0c             	sub    esp,0xc
c0020ac9:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020ad0:	e8 8e ed fe ff       	call   c000f863 <rfree>
c0020ad5:	83 c4 10             	add    esp,0x10
c0020ad8:	b0 00                	mov    al,0x0
c0020ada:	e9 e7 00 00 00       	jmp    c0020bc6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020adf:	83 ec 04             	sub    esp,0x4
c0020ae2:	68 00 01 00 00       	push   0x100
c0020ae7:	6a 00                	push   0x0
c0020ae9:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020af0:	50                   	push   eax
c0020af1:	e8 82 fc fd ff       	call   c0000778 <memset>
c0020af6:	83 c4 10             	add    esp,0x10
c0020af9:	83 ec 08             	sub    esp,0x8
c0020afc:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020b03:	50                   	push   eax
c0020b04:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b0b:	50                   	push   eax
c0020b0c:	e8 63 fe fd ff       	call   c0000974 <strcat>
c0020b11:	83 c4 10             	add    esp,0x10
c0020b14:	83 ec 08             	sub    esp,0x8
c0020b17:	68 64 c9 02 c0       	push   0xc002c964
c0020b1c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020b23:	50                   	push   eax
c0020b24:	e8 4b fe fd ff       	call   c0000974 <strcat>
c0020b29:	83 c4 10             	add    esp,0x10
c0020b2c:	83 ec 04             	sub    esp,0x4
c0020b2f:	6a 01                	push   0x1
c0020b31:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c0020b38:	50                   	push   eax
c0020b39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b3d:	50                   	push   eax
c0020b3e:	e8 4e 44 fe ff       	call   c0004f91 <f_open>
c0020b43:	83 c4 10             	add    esp,0x10
c0020b46:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0020b4d:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0020b54:	85 c0                	test   eax,eax
c0020b56:	74 0a                	je     c0020b62 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0020b58:	78 2d                	js     c0020b87 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b5a:	83 e8 04             	sub    eax,0x4
c0020b5d:	83 f8 01             	cmp    eax,0x1
c0020b60:	77 25                	ja     c0020b87 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0020b62:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0020b6a:	83 ec 0c             	sub    esp,0xc
c0020b6d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020b71:	50                   	push   eax
c0020b72:	e8 6c 4f fe ff       	call   c0005ae3 <f_close>
c0020b77:	83 c4 10             	add    esp,0x10
c0020b7a:	90                   	nop
c0020b7b:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020b83:	74 3a                	je     c0020bbf <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020b85:	eb 2d                	jmp    c0020bb4 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020b87:	83 ec 0c             	sub    esp,0xc
c0020b8a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020b91:	e8 cd ec fe ff       	call   c000f863 <rfree>
c0020b96:	83 c4 10             	add    esp,0x10
c0020b99:	83 ec 04             	sub    esp,0x4
c0020b9c:	6a 00                	push   0x0
c0020b9e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020ba5:	50                   	push   eax
c0020ba6:	6a 00                	push   0x0
c0020ba8:	e8 82 43 fe ff       	call   c0004f2f <f_mount>
c0020bad:	83 c4 10             	add    esp,0x10
c0020bb0:	b0 00                	mov    al,0x0
c0020bb2:	eb 12                	jmp    c0020bc6 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020bb4:	a1 60 1b 03 c0       	mov    eax,ds:0xc0031b60
c0020bb9:	40                   	inc    eax
c0020bba:	a3 60 1b 03 c0       	mov    ds:0xc0031b60,eax
c0020bbf:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020bc6:	81 c4 6c 03 00 00    	add    esp,0x36c
c0020bcc:	c3                   	ret    
c0020bcd:	90                   	nop

c0020bce <FAT::readDir(void*, unsigned long, void*, int*)>:
c0020bce:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020bd4:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c0020bdc:	74 0a                	je     c0020be8 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c0020bde:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020be6:	75 0a                	jne    c0020bf2 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020be8:	b8 04 00 00 00       	mov    eax,0x4
c0020bed:	e9 db 00 00 00       	jmp    c0020ccd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020bf2:	83 ec 08             	sub    esp,0x8
c0020bf5:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020bfc:	50                   	push   eax
c0020bfd:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020c04:	e8 e4 54 fe ff       	call   c00060ed <f_readdir>
c0020c09:	83 c4 10             	add    esp,0x10
c0020c0c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020c13:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020c19:	83 ec 0c             	sub    esp,0xc
c0020c1c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0020c23:	83 c0 1a             	add    eax,0x1a
c0020c26:	50                   	push   eax
c0020c27:	e8 68 fb fd ff       	call   c0000794 <strlen>
c0020c2c:	83 c4 10             	add    esp,0x10
c0020c2f:	ba 00 00 00 00       	mov    edx,0x0
c0020c34:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020c38:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0020c3c:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c0020c43:	0f b6 c0             	movzx  eax,al
c0020c46:	83 e0 10             	and    eax,0x10
c0020c49:	74 07                	je     c0020c52 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c0020c4b:	b8 02 00 00 00       	mov    eax,0x2
c0020c50:	eb 05                	jmp    c0020c57 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c0020c52:	b8 01 00 00 00       	mov    eax,0x1
c0020c57:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020c5b:	83 ec 08             	sub    esp,0x8
c0020c5e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0020c65:	83 c0 1a             	add    eax,0x1a
c0020c68:	50                   	push   eax
c0020c69:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0020c6d:	83 c0 10             	add    eax,0x10
c0020c70:	50                   	push   eax
c0020c71:	e8 be fb fd ff       	call   c0000834 <strcpy>
c0020c76:	83 c4 10             	add    esp,0x10
c0020c79:	83 ec 04             	sub    esp,0x4
c0020c7c:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020c83:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020c87:	50                   	push   eax
c0020c88:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c0020c8f:	e8 b0 fa fd ff       	call   c0000744 <memcpy>
c0020c94:	83 c4 10             	add    esp,0x10
c0020c97:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c0020c9e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020ca4:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c0020cab:	84 c0                	test   al,al
c0020cad:	75 07                	jne    c0020cb6 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c0020caf:	b8 07 00 00 00       	mov    eax,0x7
c0020cb4:	eb 17                	jmp    c0020ccd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cb6:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c0020cbd:	85 c0                	test   eax,eax
c0020cbf:	75 07                	jne    c0020cc8 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020cc1:	b8 00 00 00 00       	mov    eax,0x0
c0020cc6:	eb 05                	jmp    c0020ccd <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020cc8:	b8 01 00 00 00       	mov    eax,0x1
c0020ccd:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020cd3:	c3                   	ret    

c0020cd4 <FAT::read(void*, unsigned long, void*, int*)>:
c0020cd4:	83 ec 1c             	sub    esp,0x1c
c0020cd7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020cdc:	74 07                	je     c0020ce5 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0020cde:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020ce3:	75 07                	jne    c0020cec <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020ce5:	b8 04 00 00 00       	mov    eax,0x4
c0020cea:	eb 3d                	jmp    c0020d29 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020cec:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020cf0:	50                   	push   eax
c0020cf1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020cf5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cf9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020cfd:	e8 cb 46 fe ff       	call   c00053cd <f_read>
c0020d02:	83 c4 10             	add    esp,0x10
c0020d05:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d0d:	89 c2                	mov    edx,eax
c0020d0f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d13:	89 10                	mov    DWORD PTR [eax],edx
c0020d15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d19:	85 c0                	test   eax,eax
c0020d1b:	75 07                	jne    c0020d24 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c0020d1d:	b8 00 00 00 00       	mov    eax,0x0
c0020d22:	eb 05                	jmp    c0020d29 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c0020d24:	b8 01 00 00 00       	mov    eax,0x1
c0020d29:	83 c4 1c             	add    esp,0x1c
c0020d2c:	c3                   	ret    
c0020d2d:	90                   	nop

c0020d2e <FAT::write(void*, unsigned long, void*, int*)>:
c0020d2e:	83 ec 1c             	sub    esp,0x1c
c0020d31:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d36:	74 07                	je     c0020d3f <FAT::write(void*, unsigned long, void*, int*)+0x11>
c0020d38:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020d3d:	75 07                	jne    c0020d46 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c0020d3f:	b8 04 00 00 00       	mov    eax,0x4
c0020d44:	eb 3d                	jmp    c0020d83 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d46:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020d4a:	50                   	push   eax
c0020d4b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020d4f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020d53:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020d57:	e8 f1 48 fe ff       	call   c000564d <f_write>
c0020d5c:	83 c4 10             	add    esp,0x10
c0020d5f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020d63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020d67:	89 c2                	mov    edx,eax
c0020d69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020d6d:	89 10                	mov    DWORD PTR [eax],edx
c0020d6f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020d73:	85 c0                	test   eax,eax
c0020d75:	75 07                	jne    c0020d7e <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0020d77:	b8 00 00 00 00       	mov    eax,0x0
c0020d7c:	eb 05                	jmp    c0020d83 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0020d7e:	b8 01 00 00 00       	mov    eax,0x1
c0020d83:	83 c4 1c             	add    esp,0x1c
c0020d86:	c3                   	ret    
c0020d87:	90                   	nop

c0020d88 <FAT::close(void*)>:
c0020d88:	83 ec 1c             	sub    esp,0x1c
c0020d8b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020d90:	75 07                	jne    c0020d99 <FAT::close(void*)+0x11>
c0020d92:	b8 04 00 00 00       	mov    eax,0x4
c0020d97:	eb 36                	jmp    c0020dcf <FAT::close(void*)+0x47>
c0020d99:	83 ec 0c             	sub    esp,0xc
c0020d9c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020da0:	e8 3e 4d fe ff       	call   c0005ae3 <f_close>
c0020da5:	83 c4 10             	add    esp,0x10
c0020da8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020dac:	83 ec 0c             	sub    esp,0xc
c0020daf:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020db3:	e8 9b ea fe ff       	call   c000f853 <free>
c0020db8:	83 c4 10             	add    esp,0x10
c0020dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020dbf:	85 c0                	test   eax,eax
c0020dc1:	75 07                	jne    c0020dca <FAT::close(void*)+0x42>
c0020dc3:	b8 00 00 00 00       	mov    eax,0x0
c0020dc8:	eb 05                	jmp    c0020dcf <FAT::close(void*)+0x47>
c0020dca:	b8 01 00 00 00       	mov    eax,0x1
c0020dcf:	83 c4 1c             	add    esp,0x1c
c0020dd2:	c3                   	ret    
c0020dd3:	90                   	nop

c0020dd4 <FAT::closeDir(void*)>:
c0020dd4:	83 ec 1c             	sub    esp,0x1c
c0020dd7:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020ddc:	75 07                	jne    c0020de5 <FAT::closeDir(void*)+0x11>
c0020dde:	b8 04 00 00 00       	mov    eax,0x4
c0020de3:	eb 36                	jmp    c0020e1b <FAT::closeDir(void*)+0x47>
c0020de5:	83 ec 0c             	sub    esp,0xc
c0020de8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dec:	e8 da 52 fe ff       	call   c00060cb <f_closedir>
c0020df1:	83 c4 10             	add    esp,0x10
c0020df4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020df8:	83 ec 0c             	sub    esp,0xc
c0020dfb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020dff:	e8 4f ea fe ff       	call   c000f853 <free>
c0020e04:	83 c4 10             	add    esp,0x10
c0020e07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020e0b:	85 c0                	test   eax,eax
c0020e0d:	75 07                	jne    c0020e16 <FAT::closeDir(void*)+0x42>
c0020e0f:	b8 00 00 00 00       	mov    eax,0x0
c0020e14:	eb 05                	jmp    c0020e1b <FAT::closeDir(void*)+0x47>
c0020e16:	b8 01 00 00 00       	mov    eax,0x1
c0020e1b:	83 c4 1c             	add    esp,0x1c
c0020e1e:	c3                   	ret    
c0020e1f:	90                   	nop

c0020e20 <FAT::seek(void*, unsigned long long)>:
c0020e20:	83 ec 2c             	sub    esp,0x2c
c0020e23:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e27:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0020e2b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0020e2f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020e33:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0020e38:	75 07                	jne    c0020e41 <FAT::seek(void*, unsigned long long)+0x21>
c0020e3a:	b8 04 00 00 00       	mov    eax,0x4
c0020e3f:	eb 2f                	jmp    c0020e70 <FAT::seek(void*, unsigned long long)+0x50>
c0020e41:	83 ec 04             	sub    esp,0x4
c0020e44:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e48:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0020e4c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0020e50:	e8 bd 4c fe ff       	call   c0005b12 <f_lseek>
c0020e55:	83 c4 10             	add    esp,0x10
c0020e58:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020e5c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020e60:	85 c0                	test   eax,eax
c0020e62:	75 07                	jne    c0020e6b <FAT::seek(void*, unsigned long long)+0x4b>
c0020e64:	b8 00 00 00 00       	mov    eax,0x0
c0020e69:	eb 05                	jmp    c0020e70 <FAT::seek(void*, unsigned long long)+0x50>
c0020e6b:	b8 01 00 00 00       	mov    eax,0x1
c0020e70:	83 c4 2c             	add    esp,0x2c
c0020e73:	c3                   	ret    

c0020e74 <fatWrapperReadDisk>:
c0020e74:	83 ec 1c             	sub    esp,0x1c
c0020e77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020e7b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020e7f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020e83:	89 04 24             	mov    DWORD PTR [esp],eax
c0020e86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020e8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020e8e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020e93:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0020e9a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020e9e:	83 ec 0c             	sub    esp,0xc
c0020ea1:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020ea5:	52                   	push   edx
c0020ea6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020eae:	50                   	push   eax
c0020eaf:	e8 58 59 ff ff       	call   c001680c <LogicalDisk::read(unsigned long long, int, void*)>
c0020eb4:	83 c4 20             	add    esp,0x20
c0020eb7:	83 c4 1c             	add    esp,0x1c
c0020eba:	c3                   	ret    

c0020ebb <fatWrapperWriteDisk>:
c0020ebb:	83 ec 1c             	sub    esp,0x1c
c0020ebe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ec2:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020ec6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020eca:	89 04 24             	mov    DWORD PTR [esp],eax
c0020ecd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020ed1:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020ed5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020eda:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0020ee1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020ee5:	83 ec 0c             	sub    esp,0xc
c0020ee8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020eec:	52                   	push   edx
c0020eed:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ef1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020ef5:	50                   	push   eax
c0020ef6:	e8 7d 59 ff ff       	call   c0016878 <LogicalDisk::write(unsigned long long, int, void*)>
c0020efb:	83 c4 20             	add    esp,0x20
c0020efe:	83 c4 1c             	add    esp,0x1c
c0020f01:	c3                   	ret    

c0020f02 <fatWrapperIoctl>:
c0020f02:	53                   	push   ebx
c0020f03:	83 ec 28             	sub    esp,0x28
c0020f06:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020f0a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020f0e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020f12:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f16:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020f1b:	75 31                	jne    c0020f4e <fatWrapperIoctl+0x4c>
c0020f1d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f21:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020f25:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f2a:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0020f31:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f37:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020f3d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020f41:	66 89 02             	mov    WORD PTR [edx],ax
c0020f44:	b8 00 00 00 00       	mov    eax,0x0
c0020f49:	e9 b2 00 00 00       	jmp    c0021000 <fatWrapperIoctl+0xfe>
c0020f4e:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020f53:	75 6a                	jne    c0020fbf <fatWrapperIoctl+0xbd>
c0020f55:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020f59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f5d:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020f62:	8b 04 85 40 eb 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd14c0]
c0020f69:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020f6f:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020f75:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020f7b:	89 c8                	mov    eax,ecx
c0020f7d:	89 da                	mov    edx,ebx
c0020f7f:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020f83:	c1 e0 0a             	shl    eax,0xa
c0020f86:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020f8b:	8b 0c 8d 40 eb 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd14c0]
c0020f92:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020f98:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020f9e:	89 cb                	mov    ebx,ecx
c0020fa0:	c1 fb 1f             	sar    ebx,0x1f
c0020fa3:	53                   	push   ebx
c0020fa4:	51                   	push   ecx
c0020fa5:	52                   	push   edx
c0020fa6:	50                   	push   eax
c0020fa7:	e8 c0 5a 00 00       	call   c0026a6c <__udivdi3>
c0020fac:	83 c4 10             	add    esp,0x10
c0020faf:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020fb3:	89 01                	mov    DWORD PTR [ecx],eax
c0020fb5:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020fb8:	b8 00 00 00 00       	mov    eax,0x0
c0020fbd:	eb 41                	jmp    c0021000 <fatWrapperIoctl+0xfe>
c0020fbf:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020fc4:	75 07                	jne    c0020fcd <fatWrapperIoctl+0xcb>
c0020fc6:	b8 00 00 00 00       	mov    eax,0x0
c0020fcb:	eb 33                	jmp    c0021000 <fatWrapperIoctl+0xfe>
c0020fcd:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020fd2:	75 19                	jne    c0020fed <fatWrapperIoctl+0xeb>
c0020fd4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020fd8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020fdc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020fe0:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020fe6:	b8 00 00 00 00       	mov    eax,0x0
c0020feb:	eb 13                	jmp    c0021000 <fatWrapperIoctl+0xfe>
c0020fed:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020ff2:	75 07                	jne    c0020ffb <fatWrapperIoctl+0xf9>
c0020ff4:	b8 00 00 00 00       	mov    eax,0x0
c0020ff9:	eb 05                	jmp    c0021000 <fatWrapperIoctl+0xfe>
c0020ffb:	b8 04 00 00 00       	mov    eax,0x4
c0021000:	83 c4 28             	add    esp,0x28
c0021003:	5b                   	pop    ebx
c0021004:	c3                   	ret    
c0021005:	90                   	nop

c0021006 <FAT::FAT()>:
c0021006:	83 ec 1c             	sub    esp,0x1c
c0021009:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002100d:	83 ec 0c             	sub    esp,0xc
c0021010:	50                   	push   eax
c0021011:	e8 de 22 ff ff       	call   c00132f4 <Filesystem::Filesystem()>
c0021016:	83 c4 10             	add    esp,0x10
c0021019:	ba a0 c9 02 c0       	mov    edx,0xc002c9a0
c002101e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021022:	89 10                	mov    DWORD PTR [eax],edx
c0021024:	c7 05 60 1b 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031b60,0x0
c002102e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021036:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c002103b:	7f 15                	jg     c0021052 <FAT::FAT()+0x4c>
c002103d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021041:	c7 04 85 80 1b 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce480],0xffffffff
c002104c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021050:	eb e4                	jmp    c0021036 <FAT::FAT()+0x30>
c0021052:	90                   	nop
c0021053:	83 c4 1c             	add    esp,0x1c
c0021056:	c3                   	ret    
c0021057:	90                   	nop

c0021058 <FAT::fixFilepath(char*)>:
c0021058:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002105c:	8a 00                	mov    al,BYTE PTR [eax]
c002105e:	3c 40                	cmp    al,0x40
c0021060:	7e 2c                	jle    c002108e <FAT::fixFilepath(char*)+0x36>
c0021062:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021066:	8a 00                	mov    al,BYTE PTR [eax]
c0021068:	83 e8 41             	sub    eax,0x41
c002106b:	88 c2                	mov    dl,al
c002106d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021071:	88 10                	mov    BYTE PTR [eax],dl
c0021073:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021077:	8a 00                	mov    al,BYTE PTR [eax]
c0021079:	0f be c0             	movsx  eax,al
c002107c:	8b 04 85 80 1b 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce480]
c0021083:	83 c0 30             	add    eax,0x30
c0021086:	88 c2                	mov    dl,al
c0021088:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002108c:	88 10                	mov    BYTE PTR [eax],dl
c002108e:	90                   	nop
c002108f:	c3                   	ret    

c0021090 <FAT::open(char const*, void**, FileOpenMode)>:
c0021090:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021096:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c002109e:	74 0a                	je     c00210aa <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c00210a0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00210a8:	75 0a                	jne    c00210b4 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c00210aa:	b8 04 00 00 00       	mov    eax,0x4
c00210af:	e9 fd 00 00 00       	jmp    c00211b1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00210b4:	83 ec 08             	sub    esp,0x8
c00210b7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210be:	8d 44 24 14          	lea    eax,[esp+0x14]
c00210c2:	50                   	push   eax
c00210c3:	e8 6c f7 fd ff       	call   c0000834 <strcpy>
c00210c8:	83 c4 10             	add    esp,0x10
c00210cb:	83 ec 08             	sub    esp,0x8
c00210ce:	8d 44 24 10          	lea    eax,[esp+0x10]
c00210d2:	50                   	push   eax
c00210d3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00210da:	e8 79 ff ff ff       	call   c0021058 <FAT::fixFilepath(char*)>
c00210df:	83 c4 10             	add    esp,0x10
c00210e2:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c00210ea:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00210f1:	83 e0 01             	and    eax,0x1
c00210f4:	74 08                	je     c00210fe <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c00210f6:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00210fe:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021105:	83 e0 04             	and    eax,0x4
c0021108:	74 10                	je     c002111a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c002110a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0021112:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002111a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021121:	83 e0 02             	and    eax,0x2
c0021124:	74 08                	je     c002112e <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0021126:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c002112e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021135:	83 e0 08             	and    eax,0x8
c0021138:	74 08                	je     c0021142 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c002113a:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0021142:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021149:	83 e0 10             	and    eax,0x10
c002114c:	74 08                	je     c0021156 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c002114e:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0021156:	83 ec 0c             	sub    esp,0xc
c0021159:	68 50 02 00 00       	push   0x250
c002115e:	e8 e0 e6 fe ff       	call   c000f843 <malloc>
c0021163:	83 c4 10             	add    esp,0x10
c0021166:	89 c2                	mov    edx,eax
c0021168:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002116f:	89 10                	mov    DWORD PTR [eax],edx
c0021171:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0021179:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021180:	8b 00                	mov    eax,DWORD PTR [eax]
c0021182:	83 ec 04             	sub    esp,0x4
c0021185:	52                   	push   edx
c0021186:	8d 54 24 10          	lea    edx,[esp+0x10]
c002118a:	52                   	push   edx
c002118b:	50                   	push   eax
c002118c:	e8 00 3e fe ff       	call   c0004f91 <f_open>
c0021191:	83 c4 10             	add    esp,0x10
c0021194:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002119b:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c00211a3:	74 07                	je     c00211ac <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c00211a5:	b8 01 00 00 00       	mov    eax,0x1
c00211aa:	eb 05                	jmp    c00211b1 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c00211ac:	b8 00 00 00 00       	mov    eax,0x0
c00211b1:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211b7:	c3                   	ret    

c00211b8 <FAT::openDir(char const*, void**)>:
c00211b8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00211be:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00211c6:	74 0a                	je     c00211d2 <FAT::openDir(char const*, void**)+0x1a>
c00211c8:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00211d0:	75 07                	jne    c00211d9 <FAT::openDir(char const*, void**)+0x21>
c00211d2:	b8 04 00 00 00       	mov    eax,0x4
c00211d7:	eb 7d                	jmp    c0021256 <FAT::openDir(char const*, void**)+0x9e>
c00211d9:	83 ec 08             	sub    esp,0x8
c00211dc:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211e3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211e7:	50                   	push   eax
c00211e8:	e8 47 f6 fd ff       	call   c0000834 <strcpy>
c00211ed:	83 c4 10             	add    esp,0x10
c00211f0:	83 ec 08             	sub    esp,0x8
c00211f3:	8d 44 24 14          	lea    eax,[esp+0x14]
c00211f7:	50                   	push   eax
c00211f8:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00211ff:	e8 54 fe ff ff       	call   c0021058 <FAT::fixFilepath(char*)>
c0021204:	83 c4 10             	add    esp,0x10
c0021207:	83 ec 0c             	sub    esp,0xc
c002120a:	6a 4c                	push   0x4c
c002120c:	e8 32 e6 fe ff       	call   c000f843 <malloc>
c0021211:	83 c4 10             	add    esp,0x10
c0021214:	89 c2                	mov    edx,eax
c0021216:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c002121d:	89 10                	mov    DWORD PTR [eax],edx
c002121f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021226:	8b 00                	mov    eax,DWORD PTR [eax]
c0021228:	83 ec 08             	sub    esp,0x8
c002122b:	8d 54 24 14          	lea    edx,[esp+0x14]
c002122f:	52                   	push   edx
c0021230:	50                   	push   eax
c0021231:	e8 93 4d fe ff       	call   c0005fc9 <f_opendir>
c0021236:	83 c4 10             	add    esp,0x10
c0021239:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021240:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0021248:	74 07                	je     c0021251 <FAT::openDir(char const*, void**)+0x99>
c002124a:	b8 01 00 00 00       	mov    eax,0x1
c002124f:	eb 05                	jmp    c0021256 <FAT::openDir(char const*, void**)+0x9e>
c0021251:	b8 00 00 00 00       	mov    eax,0x0
c0021256:	81 c4 1c 01 00 00    	add    esp,0x11c
c002125c:	c3                   	ret    
c002125d:	90                   	nop

c002125e <FAT::stat(char const*, unsigned long long*, bool*)>:
c002125e:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021264:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002126c:	75 0a                	jne    c0021278 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c002126e:	b8 04 00 00 00       	mov    eax,0x4
c0021273:	e9 c9 00 00 00       	jmp    c0021341 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021278:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021280:	75 0a                	jne    c002128c <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021282:	b8 04 00 00 00       	mov    eax,0x4
c0021287:	e9 b5 00 00 00       	jmp    c0021341 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002128c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021294:	75 0a                	jne    c00212a0 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021296:	b8 04 00 00 00       	mov    eax,0x4
c002129b:	e9 a1 00 00 00       	jmp    c0021341 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00212a0:	83 ec 08             	sub    esp,0x8
c00212a3:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212aa:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212b1:	50                   	push   eax
c00212b2:	e8 7d f5 fd ff       	call   c0000834 <strcpy>
c00212b7:	83 c4 10             	add    esp,0x10
c00212ba:	83 ec 08             	sub    esp,0x8
c00212bd:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00212c4:	50                   	push   eax
c00212c5:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00212cc:	e8 87 fd ff ff       	call   c0021058 <FAT::fixFilepath(char*)>
c00212d1:	83 c4 10             	add    esp,0x10
c00212d4:	83 ec 08             	sub    esp,0x8
c00212d7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00212db:	50                   	push   eax
c00212dc:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00212e3:	50                   	push   eax
c00212e4:	e8 9f 4e fe ff       	call   c0006188 <f_stat>
c00212e9:	83 c4 10             	add    esp,0x10
c00212ec:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00212f3:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00212fa:	85 c0                	test   eax,eax
c00212fc:	74 07                	je     c0021305 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00212fe:	83 f8 04             	cmp    eax,0x4
c0021301:	74 32                	je     c0021335 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0021303:	eb 37                	jmp    c002133c <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0021305:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0021309:	0f b6 c0             	movzx  eax,al
c002130c:	83 e0 10             	and    eax,0x10
c002130f:	0f 95 c2             	setne  dl
c0021312:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0021319:	88 10                	mov    BYTE PTR [eax],dl
c002131b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002131e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021322:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0021329:	89 01                	mov    DWORD PTR [ecx],eax
c002132b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002132e:	b8 00 00 00 00       	mov    eax,0x0
c0021333:	eb 0c                	jmp    c0021341 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021335:	b8 02 00 00 00       	mov    eax,0x2
c002133a:	eb 05                	jmp    c0021341 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002133c:	b8 01 00 00 00       	mov    eax,0x1
c0021341:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021347:	c3                   	ret    

c0021348 <FAT::unlink(char const*)>:
c0021348:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002134e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021356:	75 07                	jne    c002135f <FAT::unlink(char const*)+0x17>
c0021358:	b8 04 00 00 00       	mov    eax,0x4
c002135d:	eb 5c                	jmp    c00213bb <FAT::unlink(char const*)+0x73>
c002135f:	83 ec 08             	sub    esp,0x8
c0021362:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021369:	8d 44 24 18          	lea    eax,[esp+0x18]
c002136d:	50                   	push   eax
c002136e:	e8 c1 f4 fd ff       	call   c0000834 <strcpy>
c0021373:	83 c4 10             	add    esp,0x10
c0021376:	83 ec 08             	sub    esp,0x8
c0021379:	8d 44 24 14          	lea    eax,[esp+0x14]
c002137d:	50                   	push   eax
c002137e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021385:	e8 ce fc ff ff       	call   c0021058 <FAT::fixFilepath(char*)>
c002138a:	83 c4 10             	add    esp,0x10
c002138d:	83 ec 0c             	sub    esp,0xc
c0021390:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021394:	50                   	push   eax
c0021395:	e8 40 51 fe ff       	call   c00064da <f_unlink>
c002139a:	83 c4 10             	add    esp,0x10
c002139d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00213a4:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00213ab:	85 c0                	test   eax,eax
c00213ad:	75 07                	jne    c00213b6 <FAT::unlink(char const*)+0x6e>
c00213af:	b8 00 00 00 00       	mov    eax,0x0
c00213b4:	eb 05                	jmp    c00213bb <FAT::unlink(char const*)+0x73>
c00213b6:	b8 01 00 00 00       	mov    eax,0x1
c00213bb:	81 c4 1c 01 00 00    	add    esp,0x11c
c00213c1:	c3                   	ret    

c00213c2 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c00213c2:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00213c8:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c00213cf:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c00213d6:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00213da:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00213de:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c00213e6:	75 0a                	jne    c00213f2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c00213e8:	b8 04 00 00 00       	mov    eax,0x4
c00213ed:	e9 1c 01 00 00       	jmp    c002150e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c00213f2:	83 ec 08             	sub    esp,0x8
c00213f5:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00213fc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021400:	50                   	push   eax
c0021401:	e8 2e f4 fd ff       	call   c0000834 <strcpy>
c0021406:	83 c4 10             	add    esp,0x10
c0021409:	83 ec 08             	sub    esp,0x8
c002140c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021410:	50                   	push   eax
c0021411:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021418:	e8 3b fc ff ff       	call   c0021058 <FAT::fixFilepath(char*)>
c002141d:	83 c4 10             	add    esp,0x10
c0021420:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021428:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021430:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021435:	83 e0 01             	and    eax,0x1
c0021438:	74 08                	je     c0021442 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c002143a:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021442:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021447:	83 e0 02             	and    eax,0x2
c002144a:	74 08                	je     c0021454 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c002144c:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021454:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021459:	83 e0 04             	and    eax,0x4
c002145c:	74 08                	je     c0021466 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c002145e:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021466:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002146b:	83 e0 08             	and    eax,0x8
c002146e:	74 08                	je     c0021478 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021470:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021478:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002147d:	83 e0 01             	and    eax,0x1
c0021480:	74 08                	je     c002148a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021482:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002148a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002148f:	83 e0 02             	and    eax,0x2
c0021492:	74 08                	je     c002149c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021494:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002149c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214a1:	83 e0 04             	and    eax,0x4
c00214a4:	74 08                	je     c00214ae <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c00214a6:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c00214ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00214b3:	83 e0 08             	and    eax,0x8
c00214b6:	74 08                	je     c00214c0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c00214b8:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c00214c0:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00214c7:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00214ce:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c00214d6:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c00214de:	83 ec 04             	sub    esp,0x4
c00214e1:	52                   	push   edx
c00214e2:	50                   	push   eax
c00214e3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00214e7:	50                   	push   eax
c00214e8:	e8 8f 56 fe ff       	call   c0006b7c <f_chmod>
c00214ed:	83 c4 10             	add    esp,0x10
c00214f0:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00214f7:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00214fe:	85 c0                	test   eax,eax
c0021500:	75 07                	jne    c0021509 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021502:	b8 00 00 00 00       	mov    eax,0x0
c0021507:	eb 05                	jmp    c002150e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021509:	b8 01 00 00 00       	mov    eax,0x1
c002150e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021514:	c3                   	ret    
c0021515:	90                   	nop

c0021516 <FAT::rename(char const*, char const*)>:
c0021516:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002151c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021524:	74 0a                	je     c0021530 <FAT::rename(char const*, char const*)+0x1a>
c0021526:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c002152e:	75 0a                	jne    c002153a <FAT::rename(char const*, char const*)+0x24>
c0021530:	b8 04 00 00 00       	mov    eax,0x4
c0021535:	e9 98 00 00 00       	jmp    c00215d2 <FAT::rename(char const*, char const*)+0xbc>
c002153a:	83 ec 08             	sub    esp,0x8
c002153d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021544:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002154b:	50                   	push   eax
c002154c:	e8 e3 f2 fd ff       	call   c0000834 <strcpy>
c0021551:	83 c4 10             	add    esp,0x10
c0021554:	83 ec 08             	sub    esp,0x8
c0021557:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c002155e:	50                   	push   eax
c002155f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021566:	e8 ed fa ff ff       	call   c0021058 <FAT::fixFilepath(char*)>
c002156b:	83 c4 10             	add    esp,0x10
c002156e:	83 ec 08             	sub    esp,0x8
c0021571:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021578:	8d 44 24 18          	lea    eax,[esp+0x18]
c002157c:	50                   	push   eax
c002157d:	e8 b2 f2 fd ff       	call   c0000834 <strcpy>
c0021582:	83 c4 10             	add    esp,0x10
c0021585:	83 ec 08             	sub    esp,0x8
c0021588:	8d 44 24 14          	lea    eax,[esp+0x14]
c002158c:	50                   	push   eax
c002158d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021594:	e8 bf fa ff ff       	call   c0021058 <FAT::fixFilepath(char*)>
c0021599:	83 c4 10             	add    esp,0x10
c002159c:	83 ec 08             	sub    esp,0x8
c002159f:	8d 44 24 14          	lea    eax,[esp+0x14]
c00215a3:	50                   	push   eax
c00215a4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00215ab:	50                   	push   eax
c00215ac:	e8 d8 52 fe ff       	call   c0006889 <f_rename>
c00215b1:	83 c4 10             	add    esp,0x10
c00215b4:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00215bb:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00215c2:	85 c0                	test   eax,eax
c00215c4:	75 07                	jne    c00215cd <FAT::rename(char const*, char const*)+0xb7>
c00215c6:	b8 00 00 00 00       	mov    eax,0x0
c00215cb:	eb 05                	jmp    c00215d2 <FAT::rename(char const*, char const*)+0xbc>
c00215cd:	b8 01 00 00 00       	mov    eax,0x1
c00215d2:	81 c4 1c 02 00 00    	add    esp,0x21c
c00215d8:	c3                   	ret    
c00215d9:	90                   	nop

c00215da <FAT::mkdir(char const*)>:
c00215da:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00215e0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00215e8:	75 07                	jne    c00215f1 <FAT::mkdir(char const*)+0x17>
c00215ea:	b8 04 00 00 00       	mov    eax,0x4
c00215ef:	eb 5c                	jmp    c002164d <FAT::mkdir(char const*)+0x73>
c00215f1:	83 ec 08             	sub    esp,0x8
c00215f4:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00215fb:	8d 44 24 18          	lea    eax,[esp+0x18]
c00215ff:	50                   	push   eax
c0021600:	e8 2f f2 fd ff       	call   c0000834 <strcpy>
c0021605:	83 c4 10             	add    esp,0x10
c0021608:	83 ec 08             	sub    esp,0x8
c002160b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002160f:	50                   	push   eax
c0021610:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021617:	e8 3c fa ff ff       	call   c0021058 <FAT::fixFilepath(char*)>
c002161c:	83 c4 10             	add    esp,0x10
c002161f:	83 ec 0c             	sub    esp,0xc
c0021622:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021626:	50                   	push   eax
c0021627:	e8 31 50 fe ff       	call   c000665d <f_mkdir>
c002162c:	83 c4 10             	add    esp,0x10
c002162f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021636:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c002163d:	85 c0                	test   eax,eax
c002163f:	75 07                	jne    c0021648 <FAT::mkdir(char const*)+0x6e>
c0021641:	b8 00 00 00 00       	mov    eax,0x0
c0021646:	eb 05                	jmp    c002164d <FAT::mkdir(char const*)+0x73>
c0021648:	b8 01 00 00 00       	mov    eax,0x1
c002164d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021653:	c3                   	ret    

c0021654 <FAT::exists(char const*)>:
c0021654:	81 ec 2c 02 00 00    	sub    esp,0x22c
c002165a:	83 ec 08             	sub    esp,0x8
c002165d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021664:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021668:	50                   	push   eax
c0021669:	e8 c6 f1 fd ff       	call   c0000834 <strcpy>
c002166e:	83 c4 10             	add    esp,0x10
c0021671:	83 ec 08             	sub    esp,0x8
c0021674:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021678:	50                   	push   eax
c0021679:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021680:	e8 d3 f9 ff ff       	call   c0021058 <FAT::fixFilepath(char*)>
c0021685:	83 c4 10             	add    esp,0x10
c0021688:	83 ec 08             	sub    esp,0x8
c002168b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021692:	50                   	push   eax
c0021693:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021697:	50                   	push   eax
c0021698:	e8 eb 4a fe ff       	call   c0006188 <f_stat>
c002169d:	83 c4 10             	add    esp,0x10
c00216a0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00216a7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00216ae:	85 c0                	test   eax,eax
c00216b0:	75 04                	jne    c00216b6 <FAT::exists(char const*)+0x62>
c00216b2:	b0 01                	mov    al,0x1
c00216b4:	eb 02                	jmp    c00216b8 <FAT::exists(char const*)+0x64>
c00216b6:	b0 00                	mov    al,0x0
c00216b8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00216be:	c3                   	ret    
c00216bf:	90                   	nop

c00216c0 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c00216c0:	b8 08 00 00 00       	mov    eax,0x8
c00216c5:	c3                   	ret    

c00216c6 <ISO9660::seek(void*, unsigned long long)>:
c00216c6:	53                   	push   ebx
c00216c7:	b8 04 00 00 00       	mov    eax,0x4
c00216cc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00216d0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00216d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00216d8:	85 d2                	test   edx,edx
c00216da:	74 17                	je     c00216f3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216dc:	89 c8                	mov    eax,ecx
c00216de:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c00216e1:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c00216e4:	b8 01 00 00 00       	mov    eax,0x1
c00216e9:	73 08                	jae    c00216f3 <ISO9660::seek(void*, unsigned long long)+0x2d>
c00216eb:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c00216ee:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c00216f1:	31 c0                	xor    eax,eax
c00216f3:	5b                   	pop    ebx
c00216f4:	c3                   	ret    
c00216f5:	90                   	nop

c00216f6 <ISO9660::tell(void*, unsigned long long*)>:
c00216f6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00216fa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216fe:	85 d2                	test   edx,edx
c0021700:	74 12                	je     c0021714 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021702:	85 c0                	test   eax,eax
c0021704:	74 0e                	je     c0021714 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021706:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021709:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002170c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002170f:	89 10                	mov    DWORD PTR [eax],edx
c0021711:	31 c0                	xor    eax,eax
c0021713:	c3                   	ret    
c0021714:	b8 04 00 00 00       	mov    eax,0x4
c0021719:	c3                   	ret    

c002171a <ISO9660::getName()>:
c002171a:	b8 fc c9 02 c0       	mov    eax,0xc002c9fc
c002171f:	c3                   	ret    

c0021720 <ISO9660::stat(void*, unsigned long long*)>:
c0021720:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021724:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021728:	85 d2                	test   edx,edx
c002172a:	74 12                	je     c002173e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c002172c:	85 c0                	test   eax,eax
c002172e:	74 0e                	je     c002173e <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021730:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021733:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021736:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021739:	89 10                	mov    DWORD PTR [eax],edx
c002173b:	31 c0                	xor    eax,eax
c002173d:	c3                   	ret    
c002173e:	b8 04 00 00 00       	mov    eax,0x4
c0021743:	c3                   	ret    

c0021744 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021744:	b8 01 00 00 00       	mov    eax,0x1
c0021749:	c3                   	ret    

c002174a <ISO9660::unlink(char const*)>:
c002174a:	b8 01 00 00 00       	mov    eax,0x1
c002174f:	c3                   	ret    

c0021750 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021750:	b8 01 00 00 00       	mov    eax,0x1
c0021755:	c3                   	ret    

c0021756 <ISO9660::rename(char const*, char const*)>:
c0021756:	b8 01 00 00 00       	mov    eax,0x1
c002175b:	c3                   	ret    

c002175c <ISO9660::mkdir(char const*)>:
c002175c:	b8 01 00 00 00       	mov    eax,0x1
c0021761:	c3                   	ret    

c0021762 <ISO9660::close(void*)>:
c0021762:	83 ec 0c             	sub    esp,0xc
c0021765:	b8 04 00 00 00       	mov    eax,0x4
c002176a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002176e:	85 d2                	test   edx,edx
c0021770:	74 0e                	je     c0021780 <ISO9660::close(void*)+0x1e>
c0021772:	83 ec 0c             	sub    esp,0xc
c0021775:	52                   	push   edx
c0021776:	e8 d8 e0 fe ff       	call   c000f853 <free>
c002177b:	83 c4 10             	add    esp,0x10
c002177e:	31 c0                	xor    eax,eax
c0021780:	83 c4 0c             	add    esp,0xc
c0021783:	c3                   	ret    

c0021784 <ISO9660::closeDir(void*)>:
c0021784:	83 ec 0c             	sub    esp,0xc
c0021787:	b8 04 00 00 00       	mov    eax,0x4
c002178c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021790:	85 d2                	test   edx,edx
c0021792:	74 0e                	je     c00217a2 <ISO9660::closeDir(void*)+0x1e>
c0021794:	83 ec 0c             	sub    esp,0xc
c0021797:	52                   	push   edx
c0021798:	e8 b6 e0 fe ff       	call   c000f853 <free>
c002179d:	83 c4 10             	add    esp,0x10
c00217a0:	31 c0                	xor    eax,eax
c00217a2:	83 c4 0c             	add    esp,0xc
c00217a5:	c3                   	ret    

c00217a6 <ISO9660::~ISO9660()>:
c00217a6:	83 ec 0c             	sub    esp,0xc
c00217a9:	ba 60 ca 02 c0       	mov    edx,0xc002ca60
c00217ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217b2:	89 10                	mov    DWORD PTR [eax],edx
c00217b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00217b8:	83 ec 0c             	sub    esp,0xc
c00217bb:	50                   	push   eax
c00217bc:	e8 57 1b ff ff       	call   c0013318 <Filesystem::~Filesystem()>
c00217c1:	83 c4 10             	add    esp,0x10
c00217c4:	90                   	nop
c00217c5:	83 c4 0c             	add    esp,0xc
c00217c8:	c3                   	ret    
c00217c9:	90                   	nop

c00217ca <ISO9660::~ISO9660()>:
c00217ca:	83 ec 0c             	sub    esp,0xc
c00217cd:	83 ec 0c             	sub    esp,0xc
c00217d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217d4:	e8 cd ff ff ff       	call   c00217a6 <ISO9660::~ISO9660()>
c00217d9:	83 c4 10             	add    esp,0x10
c00217dc:	83 ec 08             	sub    esp,0x8
c00217df:	6a 08                	push   0x8
c00217e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00217e5:	e8 25 17 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c00217ea:	83 c4 10             	add    esp,0x10
c00217ed:	83 c4 0c             	add    esp,0xc
c00217f0:	c3                   	ret    

c00217f1 <__memmem(unsigned char*, int, unsigned char*, int)>:
c00217f1:	55                   	push   ebp
c00217f2:	31 c9                	xor    ecx,ecx
c00217f4:	57                   	push   edi
c00217f5:	56                   	push   esi
c00217f6:	53                   	push   ebx
c00217f7:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00217fb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00217ff:	89 eb                	mov    ebx,ebp
c0021801:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021805:	39 ce                	cmp    esi,ecx
c0021807:	7e 17                	jle    c0021820 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021809:	31 d2                	xor    edx,edx
c002180b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002180f:	7d 13                	jge    c0021824 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021811:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021815:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021818:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002181b:	75 0d                	jne    c002182a <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002181d:	42                   	inc    edx
c002181e:	eb eb                	jmp    c002180b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021820:	31 c0                	xor    eax,eax
c0021822:	eb 0a                	jmp    c002182e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021824:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021828:	eb 04                	jmp    c002182e <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c002182a:	41                   	inc    ecx
c002182b:	43                   	inc    ebx
c002182c:	eb d7                	jmp    c0021805 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c002182e:	5b                   	pop    ebx
c002182f:	5e                   	pop    esi
c0021830:	5f                   	pop    edi
c0021831:	5d                   	pop    ebp
c0021832:	c3                   	ret    

c0021833 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021833:	56                   	push   esi
c0021834:	53                   	push   ebx
c0021835:	52                   	push   edx
c0021836:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002183a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002183e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021842:	39 0d 60 1c 03 c0    	cmp    DWORD PTR ds:0xc0031c60,ecx
c0021848:	75 08                	jne    c0021852 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c002184a:	38 05 b4 da 02 c0    	cmp    BYTE PTR ds:0xc002dab4,al
c0021850:	74 2b                	je     c002187d <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c0021852:	83 ec 0c             	sub    esp,0xc
c0021855:	a2 b4 da 02 c0       	mov    ds:0xc002dab4,al
c002185a:	68 80 1c 03 c0       	push   0xc0031c80
c002185f:	0f be c0             	movsx  eax,al
c0021862:	6a 01                	push   0x1
c0021864:	89 0d 60 1c 03 c0    	mov    DWORD PTR ds:0xc0031c60,ecx
c002186a:	31 db                	xor    ebx,ebx
c002186c:	53                   	push   ebx
c002186d:	51                   	push   ecx
c002186e:	ff 34 85 3c ea 02 c0 	push   DWORD PTR [eax*4-0x3ffd15c4]
c0021875:	e8 92 4f ff ff       	call   c001680c <LogicalDisk::read(unsigned long long, int, void*)>
c002187a:	83 c4 20             	add    esp,0x20
c002187d:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021885:	c7 44 24 14 80 1c 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031c80
c002188d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021891:	58                   	pop    eax
c0021892:	5b                   	pop    ebx
c0021893:	5e                   	pop    esi
c0021894:	e9 ab ee fd ff       	jmp    c0000744 <memcpy>
c0021899:	90                   	nop

c002189a <ISO9660::tryMount(LogicalDisk*, int)>:
c002189a:	81 ec 10 08 00 00    	sub    esp,0x810
c00218a0:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00218a7:	83 c0 41             	add    eax,0x41
c00218aa:	0f be c0             	movsx  eax,al
c00218ad:	50                   	push   eax
c00218ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00218b2:	50                   	push   eax
c00218b3:	6a 10                	push   0x10
c00218b5:	e8 79 ff ff ff       	call   c0021833 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00218ba:	83 c4 10             	add    esp,0x10
c00218bd:	31 c0                	xor    eax,eax
c00218bf:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00218c4:	75 1d                	jne    c00218e3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218c6:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00218cb:	75 16                	jne    c00218e3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218cd:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00218d2:	75 0f                	jne    c00218e3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218d4:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00218d9:	75 08                	jne    c00218e3 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c00218db:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00218e0:	0f 94 c0             	sete   al
c00218e3:	81 c4 0c 08 00 00    	add    esp,0x80c
c00218e9:	c3                   	ret    

c00218ea <ISO9660::read(void*, unsigned long, void*, int*)>:
c00218ea:	55                   	push   ebp
c00218eb:	57                   	push   edi
c00218ec:	56                   	push   esi
c00218ed:	53                   	push   ebx
c00218ee:	81 ec 2c 08 00 00    	sub    esp,0x82c
c00218f4:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c00218fb:	85 ed                	test   ebp,ebp
c00218fd:	0f 84 d6 01 00 00    	je     c0021ad9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021903:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002190b:	0f 84 c8 01 00 00    	je     c0021ad9 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021911:	b8 01 00 00 00       	mov    eax,0x1
c0021916:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002191a:	0f 85 be 01 00 00    	jne    c0021ade <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021920:	31 d2                	xor    edx,edx
c0021922:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021929:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c002192c:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c002192f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021933:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021936:	89 04 24             	mov    DWORD PTR [esp],eax
c0021939:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002193d:	01 f0                	add    eax,esi
c002193f:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021942:	11 fa                	adc    edx,edi
c0021944:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021948:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c002194c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0021950:	19 d1                	sbb    ecx,edx
c0021952:	72 0a                	jb     c002195e <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021958:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002195c:	eb 13                	jmp    c0021971 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c002195e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021962:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021966:	29 f0                	sub    eax,esi
c0021968:	19 fa                	sbb    edx,edi
c002196a:	89 04 24             	mov    DWORD PTR [esp],eax
c002196d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021971:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0021974:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0021977:	0f a4 c2 0b          	shld   edx,eax,0xb
c002197b:	51                   	push   ecx
c002197c:	c1 e0 0b             	shl    eax,0xb
c002197f:	01 c6                	add    esi,eax
c0021981:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021985:	11 d7                	adc    edi,edx
c0021987:	50                   	push   eax
c0021988:	89 fa                	mov    edx,edi
c002198a:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002198e:	89 f0                	mov    eax,esi
c0021990:	53                   	push   ebx
c0021991:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021995:	50                   	push   eax
c0021996:	e8 98 fe ff ff       	call   c0021833 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002199b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002199f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00219a2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00219a6:	81 e2 ff 07 00 00    	and    edx,0x7ff
c00219ac:	83 c4 10             	add    esp,0x10
c00219af:	b8 00 08 00 00       	mov    eax,0x800
c00219b4:	29 d0                	sub    eax,edx
c00219b6:	39 c1                	cmp    ecx,eax
c00219b8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00219bc:	83 d9 00             	sbb    ecx,0x0
c00219bf:	7d 1c                	jge    c00219dd <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c00219c1:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00219c6:	75 12                	jne    c00219da <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c00219c8:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c00219cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00219d5:	e9 fb 00 00 00       	jmp    c0021ad5 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c00219da:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219dd:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c00219e0:	31 d2                	xor    edx,edx
c00219e2:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00219e6:	39 c2                	cmp    edx,eax
c00219e8:	7d 14                	jge    c00219fe <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c00219ea:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c00219f1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00219f5:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c00219f8:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c00219fb:	42                   	inc    edx
c00219fc:	eb e8                	jmp    c00219e6 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c00219fe:	89 c3                	mov    ebx,eax
c0021a00:	85 c0                	test   eax,eax
c0021a02:	79 02                	jns    c0021a06 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021a04:	31 db                	xor    ebx,ebx
c0021a06:	99                   	cdq    
c0021a07:	01 c3                	add    ebx,eax
c0021a09:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021a10:	01 c6                	add    esi,eax
c0021a12:	11 d7                	adc    edi,edx
c0021a14:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021a18:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0021a1c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0021a1f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0021a23:	29 c6                	sub    esi,eax
c0021a25:	19 d7                	sbb    edi,edx
c0021a27:	89 34 24             	mov    DWORD PTR [esp],esi
c0021a2a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0021a2e:	b8 ff 07 00 00       	mov    eax,0x7ff
c0021a33:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0021a36:	b8 00 00 00 00       	mov    eax,0x0
c0021a3b:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021a3f:	7d 3e                	jge    c0021a7f <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c0021a41:	52                   	push   edx
c0021a42:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a46:	50                   	push   eax
c0021a47:	53                   	push   ebx
c0021a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a4c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021a50:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021a54:	50                   	push   eax
c0021a55:	e8 d9 fd ff ff       	call   c0021833 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a5a:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0021a62:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0021a67:	81 c3 00 08 00 00    	add    ebx,0x800
c0021a6d:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0021a75:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c0021a7a:	83 c4 10             	add    esp,0x10
c0021a7d:	eb af                	jmp    c0021a2e <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c0021a7f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021a83:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021a86:	74 32                	je     c0021aba <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021a88:	50                   	push   eax
c0021a89:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021a8d:	50                   	push   eax
c0021a8e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021a92:	50                   	push   eax
c0021a93:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021a97:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0021a9b:	0f ac fe 0b          	shrd   esi,edi,0xb
c0021a9f:	56                   	push   esi
c0021aa0:	e8 8e fd ff ff       	call   c0021833 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021aa5:	83 c4 0c             	add    esp,0xc
c0021aa8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0021aac:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021ab0:	50                   	push   eax
c0021ab1:	53                   	push   ebx
c0021ab2:	e8 8d ec fd ff       	call   c0000744 <memcpy>
c0021ab7:	83 c4 10             	add    esp,0x10
c0021aba:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021ac1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021ac5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021ac9:	89 38                	mov    DWORD PTR [eax],edi
c0021acb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021acf:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021ad2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021ad5:	31 c0                	xor    eax,eax
c0021ad7:	eb 05                	jmp    c0021ade <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021ad9:	b8 04 00 00 00       	mov    eax,0x4
c0021ade:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021ae4:	5b                   	pop    ebx
c0021ae5:	5e                   	pop    esi
c0021ae6:	5f                   	pop    edi
c0021ae7:	5d                   	pop    ebp
c0021ae8:	c3                   	ret    
c0021ae9:	90                   	nop

c0021aea <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0021aea:	55                   	push   ebp
c0021aeb:	57                   	push   edi
c0021aec:	56                   	push   esi
c0021aed:	53                   	push   ebx
c0021aee:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021af4:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c0021afb:	85 f6                	test   esi,esi
c0021afd:	0f 84 64 02 00 00    	je     c0021d67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b03:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c0021b0b:	0f 84 56 02 00 00    	je     c0021d67 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021b11:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021b14:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021b17:	75 0a                	jne    c0021b23 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021b19:	b8 07 00 00 00       	mov    eax,0x7
c0021b1e:	e9 49 02 00 00       	jmp    c0021d6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021b23:	50                   	push   eax
c0021b24:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021b28:	50                   	push   eax
c0021b29:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021b30:	53                   	push   ebx
c0021b31:	8b 06                	mov    eax,DWORD PTR [esi]
c0021b33:	c1 e0 0b             	shl    eax,0xb
c0021b36:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c0021b39:	c1 e8 0b             	shr    eax,0xb
c0021b3c:	50                   	push   eax
c0021b3d:	e8 f1 fc ff ff       	call   c0021833 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021b42:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021b45:	83 c4 10             	add    esp,0x10
c0021b48:	89 c1                	mov    ecx,eax
c0021b4a:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c0021b4d:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0021b53:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c0021b56:	84 db                	test   bl,bl
c0021b58:	0f 85 90 00 00 00    	jne    c0021bee <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c0021b5e:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c0021b64:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021b6a:	29 c7                	sub    edi,eax
c0021b6c:	89 fb                	mov    ebx,edi
c0021b6e:	c1 fb 1f             	sar    ebx,0x1f
c0021b71:	01 f8                	add    eax,edi
c0021b73:	11 da                	adc    edx,ebx
c0021b75:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021b79:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021b7d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021b80:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021b83:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021b86:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021b89:	89 04 24             	mov    DWORD PTR [esp],eax
c0021b8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021b90:	89 d8                	mov    eax,ebx
c0021b92:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021b95:	ba 00 00 00 00       	mov    edx,0x0
c0021b9a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0021b9e:	b8 00 00 00 00       	mov    eax,0x0
c0021ba3:	73 0b                	jae    c0021bb0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021ba5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021ba8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021bac:	29 f8                	sub    eax,edi
c0021bae:	19 da                	sbb    edx,ebx
c0021bb0:	89 d3                	mov    ebx,edx
c0021bb2:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021bb5:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021bb8:	09 c3                	or     ebx,eax
c0021bba:	0f 84 59 ff ff ff    	je     c0021b19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021bc0:	55                   	push   ebp
c0021bc1:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021bc5:	50                   	push   eax
c0021bc6:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c0021bcd:	53                   	push   ebx
c0021bce:	8b 06                	mov    eax,DWORD PTR [esi]
c0021bd0:	c1 e0 0b             	shl    eax,0xb
c0021bd3:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021bd7:	c1 e8 0b             	shr    eax,0xb
c0021bda:	50                   	push   eax
c0021bdb:	e8 53 fc ff ff       	call   c0021833 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021be0:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021be3:	83 c4 10             	add    esp,0x10
c0021be6:	25 ff 07 00 00       	and    eax,0x7ff
c0021beb:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0021bee:	57                   	push   edi
c0021bef:	6a 28                	push   0x28
c0021bf1:	6a 00                	push   0x0
c0021bf3:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021bf7:	50                   	push   eax
c0021bf8:	e8 7b eb fd ff       	call   c0000778 <memset>
c0021bfd:	31 d2                	xor    edx,edx
c0021bff:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021c02:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021c08:	89 f8                	mov    eax,edi
c0021c0a:	83 c0 21             	add    eax,0x21
c0021c0d:	83 d2 00             	adc    edx,0x0
c0021c10:	89 c7                	mov    edi,eax
c0021c12:	89 d5                	mov    ebp,edx
c0021c14:	83 c4 10             	add    esp,0x10
c0021c17:	31 c9                	xor    ecx,ecx
c0021c19:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c0021c20:	83 f9 28             	cmp    ecx,0x28
c0021c23:	88 04 24             	mov    BYTE PTR [esp],al
c0021c26:	0f 94 c2             	sete   dl
c0021c29:	88 d0                	mov    al,dl
c0021c2b:	ba ff 07 00 00       	mov    edx,0x7ff
c0021c30:	39 fa                	cmp    edx,edi
c0021c32:	ba 00 00 00 00       	mov    edx,0x0
c0021c37:	19 ea                	sbb    edx,ebp
c0021c39:	0f 92 c2             	setb   dl
c0021c3c:	09 c2                	or     edx,eax
c0021c3e:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0021c42:	0f 94 c0             	sete   al
c0021c45:	08 d0                	or     al,dl
c0021c47:	75 16                	jne    c0021c5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c49:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c0021c4d:	74 10                	je     c0021c5f <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c0021c4f:	8a 04 24             	mov    al,BYTE PTR [esp]
c0021c52:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c0021c56:	41                   	inc    ecx
c0021c57:	83 c7 01             	add    edi,0x1
c0021c5a:	83 d5 00             	adc    ebp,0x0
c0021c5d:	eb ba                	jmp    c0021c19 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c0021c5f:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c0021c66:	83 ec 0c             	sub    esp,0xc
c0021c69:	8d 7c 24 24          	lea    edi,[esp+0x24]
c0021c6d:	57                   	push   edi
c0021c6e:	e8 21 eb fd ff       	call   c0000794 <strlen>
c0021c73:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0021c7b:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021c7f:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021c86:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021c89:	5a                   	pop    edx
c0021c8a:	25 ff 07 00 00       	and    eax,0x7ff
c0021c8f:	01 c8                	add    eax,ecx
c0021c91:	59                   	pop    ecx
c0021c92:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021c98:	83 e0 02             	and    eax,0x2
c0021c9b:	3c 01                	cmp    al,0x1
c0021c9d:	19 c0                	sbb    eax,eax
c0021c9f:	83 c0 02             	add    eax,0x2
c0021ca2:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021ca6:	57                   	push   edi
c0021ca7:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0021cab:	50                   	push   eax
c0021cac:	e8 83 eb fd ff       	call   c0000834 <strcpy>
c0021cb1:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021cb5:	83 c4 10             	add    esp,0x10
c0021cb8:	84 c0                	test   al,al
c0021cba:	75 21                	jne    c0021cdd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c0021cbc:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021cc4:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021ccc:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cd4:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0021cdb:	eb 28                	jmp    c0021d05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021cdd:	fe c8                	dec    al
c0021cdf:	75 24                	jne    c0021d05 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021ce1:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021ce9:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021cf1:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021cf9:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021d00:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021d05:	0f b6 fb             	movzx  edi,bl
c0021d08:	31 db                	xor    ebx,ebx
c0021d0a:	50                   	push   eax
c0021d0b:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021d12:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021d16:	50                   	push   eax
c0021d17:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c0021d1e:	e8 21 ea fd ff       	call   c0000744 <memcpy>
c0021d23:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c0021d2a:	89 f9                	mov    ecx,edi
c0021d2c:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021d32:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c0021d35:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021d38:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c0021d3b:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021d3e:	83 c4 10             	add    esp,0x10
c0021d41:	39 c7                	cmp    edi,eax
c0021d43:	89 df                	mov    edi,ebx
c0021d45:	19 d7                	sbb    edi,edx
c0021d47:	72 10                	jb     c0021d59 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c0021d49:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0021d50:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c0021d57:	eb 0a                	jmp    c0021d63 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c0021d59:	29 c8                	sub    eax,ecx
c0021d5b:	19 da                	sbb    edx,ebx
c0021d5d:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021d60:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021d63:	31 c0                	xor    eax,eax
c0021d65:	eb 05                	jmp    c0021d6c <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c0021d67:	b8 04 00 00 00       	mov    eax,0x4
c0021d6c:	81 c4 5c 09 00 00    	add    esp,0x95c
c0021d72:	5b                   	pop    ebx
c0021d73:	5e                   	pop    esi
c0021d74:	5f                   	pop    edi
c0021d75:	5d                   	pop    ebp
c0021d76:	c3                   	ret    

c0021d77 <readRoot(unsigned int*, unsigned int*, char)>:
c0021d77:	81 ec 40 08 00 00    	sub    esp,0x840
c0021d7d:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021d85:	50                   	push   eax
c0021d86:	8d 44 24 38          	lea    eax,[esp+0x38]
c0021d8a:	50                   	push   eax
c0021d8b:	6a 10                	push   0x10
c0021d8d:	e8 a1 fa ff ff       	call   c0021833 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021d92:	83 c4 0c             	add    esp,0xc
c0021d95:	6a 22                	push   0x22
c0021d97:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c0021d9e:	50                   	push   eax
c0021d9f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021da3:	50                   	push   eax
c0021da4:	e8 9b e9 fd ff       	call   c0000744 <memcpy>
c0021da9:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021db0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021db4:	89 10                	mov    DWORD PTR [eax],edx
c0021db6:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c0021dbd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021dc1:	89 10                	mov    DWORD PTR [eax],edx
c0021dc3:	b0 01                	mov    al,0x1
c0021dc5:	81 c4 4c 08 00 00    	add    esp,0x84c
c0021dcb:	c3                   	ret    

c0021dcc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0021dcc:	55                   	push   ebp
c0021dcd:	57                   	push   edi
c0021dce:	56                   	push   esi
c0021dcf:	53                   	push   ebx
c0021dd0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021dd6:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0021ddd:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021de4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021de8:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0021dec:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021df0:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021df4:	75 03                	jne    c0021df9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021df6:	83 c3 02             	add    ebx,0x2
c0021df9:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0021dfc:	75 03                	jne    c0021e01 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0021dfe:	43                   	inc    ebx
c0021dff:	eb f8                	jmp    c0021df9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021e01:	51                   	push   ecx
c0021e02:	68 00 01 00 00       	push   0x100
c0021e07:	6a 00                	push   0x0
c0021e09:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021e0d:	50                   	push   eax
c0021e0e:	e8 65 e9 fd ff       	call   c0000778 <memset>
c0021e13:	83 c4 10             	add    esp,0x10
c0021e16:	31 d2                	xor    edx,edx
c0021e18:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021e1b:	84 c0                	test   al,al
c0021e1d:	74 21                	je     c0021e40 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c0021e1f:	3c 2f                	cmp    al,0x2f
c0021e21:	75 0b                	jne    c0021e2e <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c0021e23:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c0021e27:	bd 01 00 00 00       	mov    ebp,0x1
c0021e2c:	eb 14                	jmp    c0021e42 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c0021e2e:	8d 48 9f             	lea    ecx,[eax-0x61]
c0021e31:	80 f9 19             	cmp    cl,0x19
c0021e34:	77 03                	ja     c0021e39 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021e36:	83 e8 20             	sub    eax,0x20
c0021e39:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c0021e3d:	42                   	inc    edx
c0021e3e:	eb d8                	jmp    c0021e18 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c0021e40:	31 ed                	xor    ebp,ebp
c0021e42:	83 ec 0c             	sub    esp,0xc
c0021e45:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c0021e4c:	e8 f2 d9 fe ff       	call   c000f843 <malloc>
c0021e51:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c0021e58:	89 c6                	mov    esi,eax
c0021e5a:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c0021e60:	c1 ef 0b             	shr    edi,0xb
c0021e63:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c0021e6a:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0021e6e:	83 c4 10             	add    esp,0x10
c0021e71:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c0021e76:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0021e7a:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021e81:	74 28                	je     c0021eab <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021e83:	52                   	push   edx
c0021e84:	57                   	push   edi
c0021e85:	50                   	push   eax
c0021e86:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021e8a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021e91:	e8 9d f9 ff ff       	call   c0021833 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021e96:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021e9a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021ea1:	05 00 08 00 00       	add    eax,0x800
c0021ea6:	83 c4 10             	add    esp,0x10
c0021ea9:	eb cb                	jmp    c0021e76 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021eab:	83 ec 0c             	sub    esp,0xc
c0021eae:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021eb2:	57                   	push   edi
c0021eb3:	e8 dc e8 fd ff       	call   c0000794 <strlen>
c0021eb8:	50                   	push   eax
c0021eb9:	57                   	push   edi
c0021eba:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021ec1:	56                   	push   esi
c0021ec2:	e8 2a f9 ff ff       	call   c00217f1 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021ec7:	83 c4 20             	add    esp,0x20
c0021eca:	85 c0                	test   eax,eax
c0021ecc:	75 13                	jne    c0021ee1 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021ece:	83 ec 0c             	sub    esp,0xc
c0021ed1:	56                   	push   esi
c0021ed2:	e8 7c d9 fe ff       	call   c000f853 <free>
c0021ed7:	83 c4 10             	add    esp,0x10
c0021eda:	31 c0                	xor    eax,eax
c0021edc:	e9 b3 00 00 00       	jmp    c0021f94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ee1:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021ee5:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021ee9:	c1 e7 08             	shl    edi,0x8
c0021eec:	c1 e2 10             	shl    edx,0x10
c0021eef:	09 d7                	or     edi,edx
c0021ef1:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021ef5:	09 d7                	or     edi,edx
c0021ef7:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021efb:	c1 e2 18             	shl    edx,0x18
c0021efe:	09 d7                	or     edi,edx
c0021f00:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021f04:	89 d1                	mov    ecx,edx
c0021f06:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021f0a:	c1 e1 08             	shl    ecx,0x8
c0021f0d:	c1 e2 10             	shl    edx,0x10
c0021f10:	09 ca                	or     edx,ecx
c0021f12:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021f16:	09 ca                	or     edx,ecx
c0021f18:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021f1c:	c1 e1 18             	shl    ecx,0x18
c0021f1f:	09 ca                	or     edx,ecx
c0021f21:	89 e9                	mov    ecx,ebp
c0021f23:	84 c9                	test   cl,cl
c0021f25:	74 3c                	je     c0021f63 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021f27:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021f2b:	83 ec 0c             	sub    esp,0xc
c0021f2e:	56                   	push   esi
c0021f2f:	e8 1f d9 fe ff       	call   c000f853 <free>
c0021f34:	83 c4 0c             	add    esp,0xc
c0021f37:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f3e:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021f43:	50                   	push   eax
c0021f44:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f4b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021f52:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021f56:	52                   	push   edx
c0021f57:	57                   	push   edi
c0021f58:	53                   	push   ebx
c0021f59:	e8 6e fe ff ff       	call   c0021dcc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021f5e:	83 c4 20             	add    esp,0x20
c0021f61:	eb 31                	jmp    c0021f94 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021f63:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021f66:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021f6d:	d0 e8                	shr    al,1
c0021f6f:	89 3b                	mov    DWORD PTR [ebx],edi
c0021f71:	83 e0 01             	and    eax,0x1
c0021f74:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021f7b:	83 ec 0c             	sub    esp,0xc
c0021f7e:	89 13                	mov    DWORD PTR [ebx],edx
c0021f80:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021f87:	89 03                	mov    DWORD PTR [ebx],eax
c0021f89:	56                   	push   esi
c0021f8a:	e8 c4 d8 fe ff       	call   c000f853 <free>
c0021f8f:	83 c4 10             	add    esp,0x10
c0021f92:	b0 01                	mov    al,0x1
c0021f94:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021f9a:	5b                   	pop    ebx
c0021f9b:	5e                   	pop    esi
c0021f9c:	5f                   	pop    edi
c0021f9d:	5d                   	pop    ebp
c0021f9e:	c3                   	ret    

c0021f9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021f9f:	55                   	push   ebp
c0021fa0:	57                   	push   edi
c0021fa1:	56                   	push   esi
c0021fa2:	53                   	push   ebx
c0021fa3:	83 ec 20             	sub    esp,0x20
c0021fa6:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021faa:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021fae:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021fb2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021fba:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021fc2:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021fc7:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021fcd:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021fd3:	57                   	push   edi
c0021fd4:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fd8:	50                   	push   eax
c0021fd9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021fdd:	50                   	push   eax
c0021fde:	e8 94 fd ff ff       	call   c0021d77 <readRoot(unsigned int*, unsigned int*, char)>
c0021fe3:	5a                   	pop    edx
c0021fe4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021fe8:	e8 a7 e7 fd ff       	call   c0000794 <strlen>
c0021fed:	83 c4 10             	add    esp,0x10
c0021ff0:	83 f8 03             	cmp    eax,0x3
c0021ff3:	77 17                	ja     c002200c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021ff5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ff9:	89 03                	mov    DWORD PTR [ebx],eax
c0021ffb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021fff:	89 06                	mov    DWORD PTR [esi],eax
c0022001:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0022008:	b0 01                	mov    al,0x1
c002200a:	eb 19                	jmp    c0022025 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c002200c:	50                   	push   eax
c002200d:	55                   	push   ebp
c002200e:	57                   	push   edi
c002200f:	56                   	push   esi
c0022010:	53                   	push   ebx
c0022011:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022015:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022019:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002201d:	e8 aa fd ff ff       	call   c0021dcc <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0022022:	83 c4 20             	add    esp,0x20
c0022025:	83 c4 1c             	add    esp,0x1c
c0022028:	5b                   	pop    ebx
c0022029:	5e                   	pop    esi
c002202a:	5f                   	pop    edi
c002202b:	5d                   	pop    ebp
c002202c:	c3                   	ret    
c002202d:	90                   	nop

c002202e <ISO9660::open(char const*, void**, FileOpenMode)>:
c002202e:	57                   	push   edi
c002202f:	56                   	push   esi
c0022030:	53                   	push   ebx
c0022031:	83 ec 10             	sub    esp,0x10
c0022034:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022038:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002203c:	85 ff                	test   edi,edi
c002203e:	0f 84 9d 00 00 00    	je     c00220e1 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0022044:	85 f6                	test   esi,esi
c0022046:	0f 84 95 00 00 00    	je     c00220e1 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c002204c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0022051:	74 17                	je     c002206a <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0022053:	83 ec 0c             	sub    esp,0xc
c0022056:	68 17 ca 02 c0       	push   0xc002ca17
c002205b:	e8 8f 0f ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0022060:	83 c4 10             	add    esp,0x10
c0022063:	b8 03 00 00 00       	mov    eax,0x3
c0022068:	eb 7c                	jmp    c00220e6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002206a:	83 ec 0c             	sub    esp,0xc
c002206d:	6a 1c                	push   0x1c
c002206f:	e8 cf d7 fe ff       	call   c000f843 <malloc>
c0022074:	89 07                	mov    DWORD PTR [edi],eax
c0022076:	89 c3                	mov    ebx,eax
c0022078:	58                   	pop    eax
c0022079:	8d 44 24 18          	lea    eax,[esp+0x18]
c002207d:	50                   	push   eax
c002207e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022081:	50                   	push   eax
c0022082:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022086:	50                   	push   eax
c0022087:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002208b:	50                   	push   eax
c002208c:	56                   	push   esi
c002208d:	e8 0d ff ff ff       	call   c0021f9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022092:	83 c4 20             	add    esp,0x20
c0022095:	84 c0                	test   al,al
c0022097:	74 07                	je     c00220a0 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0022099:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002209e:	74 0b                	je     c00220ab <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c00220a0:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c00220a4:	b8 01 00 00 00       	mov    eax,0x1
c00220a9:	eb 3b                	jmp    c00220e6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220ab:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00220af:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00220b3:	89 03                	mov    DWORD PTR [ebx],eax
c00220b5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00220bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00220c0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00220c7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00220ce:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00220d1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00220d8:	8a 06                	mov    al,BYTE PTR [esi]
c00220da:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00220dd:	31 c0                	xor    eax,eax
c00220df:	eb 05                	jmp    c00220e6 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00220e1:	b8 04 00 00 00       	mov    eax,0x4
c00220e6:	83 c4 10             	add    esp,0x10
c00220e9:	5b                   	pop    ebx
c00220ea:	5e                   	pop    esi
c00220eb:	5f                   	pop    edi
c00220ec:	c3                   	ret    
c00220ed:	90                   	nop

c00220ee <ISO9660::exists(char const*)>:
c00220ee:	83 ec 28             	sub    esp,0x28
c00220f1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00220f5:	8d 54 24 18          	lea    edx,[esp+0x18]
c00220f9:	52                   	push   edx
c00220fa:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00220fd:	52                   	push   edx
c00220fe:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022102:	52                   	push   edx
c0022103:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022107:	52                   	push   edx
c0022108:	50                   	push   eax
c0022109:	e8 91 fe ff ff       	call   c0021f9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c002210e:	83 c4 3c             	add    esp,0x3c
c0022111:	c3                   	ret    

c0022112 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022112:	56                   	push   esi
c0022113:	53                   	push   ebx
c0022114:	83 ec 14             	sub    esp,0x14
c0022117:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002211b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c002211f:	85 db                	test   ebx,ebx
c0022121:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0022125:	0f 94 c2             	sete   dl
c0022128:	85 f6                	test   esi,esi
c002212a:	0f 94 c0             	sete   al
c002212d:	08 c2                	or     dl,al
c002212f:	75 68                	jne    c0022199 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022131:	85 c9                	test   ecx,ecx
c0022133:	74 64                	je     c0022199 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0022135:	83 ec 0c             	sub    esp,0xc
c0022138:	c6 06 00             	mov    BYTE PTR [esi],0x0
c002213b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002213f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022145:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002214c:	50                   	push   eax
c002214d:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0022150:	50                   	push   eax
c0022151:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022155:	50                   	push   eax
c0022156:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002215a:	50                   	push   eax
c002215b:	51                   	push   ecx
c002215c:	e8 3e fe ff ff       	call   c0021f9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022161:	83 c4 20             	add    esp,0x20
c0022164:	ba 01 00 00 00       	mov    edx,0x1
c0022169:	84 c0                	test   al,al
c002216b:	74 31                	je     c002219e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002216d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022171:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022178:	89 03                	mov    DWORD PTR [ebx],eax
c002217a:	ba 00 00 00 00       	mov    edx,0x0
c002217f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022183:	85 c0                	test   eax,eax
c0022185:	0f 95 06             	setne  BYTE PTR [esi]
c0022188:	74 14                	je     c002219e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002218a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022190:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022197:	eb 05                	jmp    c002219e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0022199:	ba 04 00 00 00       	mov    edx,0x4
c002219e:	83 c4 14             	add    esp,0x14
c00221a1:	89 d0                	mov    eax,edx
c00221a3:	5b                   	pop    ebx
c00221a4:	5e                   	pop    esi
c00221a5:	c3                   	ret    

c00221a6 <ISO9660::openDir(char const*, void**)>:
c00221a6:	57                   	push   edi
c00221a7:	56                   	push   esi
c00221a8:	53                   	push   ebx
c00221a9:	83 ec 10             	sub    esp,0x10
c00221ac:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00221b0:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00221b4:	85 ff                	test   edi,edi
c00221b6:	0f 84 95 00 00 00    	je     c0022251 <ISO9660::openDir(char const*, void**)+0xab>
c00221bc:	85 f6                	test   esi,esi
c00221be:	0f 84 8d 00 00 00    	je     c0022251 <ISO9660::openDir(char const*, void**)+0xab>
c00221c4:	83 ec 0c             	sub    esp,0xc
c00221c7:	6a 1c                	push   0x1c
c00221c9:	e8 75 d6 fe ff       	call   c000f843 <malloc>
c00221ce:	89 07                	mov    DWORD PTR [edi],eax
c00221d0:	89 c3                	mov    ebx,eax
c00221d2:	59                   	pop    ecx
c00221d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00221d7:	50                   	push   eax
c00221d8:	0f be 06             	movsx  eax,BYTE PTR [esi]
c00221db:	50                   	push   eax
c00221dc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221e0:	50                   	push   eax
c00221e1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00221e5:	50                   	push   eax
c00221e6:	56                   	push   esi
c00221e7:	e8 b3 fd ff ff       	call   c0021f9f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00221ec:	83 c4 20             	add    esp,0x20
c00221ef:	84 c0                	test   al,al
c00221f1:	74 07                	je     c00221fa <ISO9660::openDir(char const*, void**)+0x54>
c00221f3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00221f8:	75 21                	jne    c002221b <ISO9660::openDir(char const*, void**)+0x75>
c00221fa:	0f b6 c0             	movzx  eax,al
c00221fd:	52                   	push   edx
c00221fe:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022202:	50                   	push   eax
c0022203:	68 3d ca 02 c0       	push   0xc002ca3d
c0022208:	e8 e2 0d ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c002220d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022211:	83 c4 10             	add    esp,0x10
c0022214:	b8 01 00 00 00       	mov    eax,0x1
c0022219:	eb 3b                	jmp    c0022256 <ISO9660::openDir(char const*, void**)+0xb0>
c002221b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002221f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022223:	89 03                	mov    DWORD PTR [ebx],eax
c0022225:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c002222c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022230:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0022237:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002223e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022241:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0022248:	8a 06                	mov    al,BYTE PTR [esi]
c002224a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c002224d:	31 c0                	xor    eax,eax
c002224f:	eb 05                	jmp    c0022256 <ISO9660::openDir(char const*, void**)+0xb0>
c0022251:	b8 04 00 00 00       	mov    eax,0x4
c0022256:	83 c4 10             	add    esp,0x10
c0022259:	5b                   	pop    ebx
c002225a:	5e                   	pop    esi
c002225b:	5f                   	pop    edi
c002225c:	c3                   	ret    
c002225d:	90                   	nop

c002225e <ISO9660::ISO9660()>:
c002225e:	83 ec 0c             	sub    esp,0xc
c0022261:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022265:	83 ec 0c             	sub    esp,0xc
c0022268:	50                   	push   eax
c0022269:	e8 86 10 ff ff       	call   c00132f4 <Filesystem::Filesystem()>
c002226e:	83 c4 10             	add    esp,0x10
c0022271:	ba 60 ca 02 c0       	mov    edx,0xc002ca60
c0022276:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002227a:	89 10                	mov    DWORD PTR [eax],edx
c002227c:	90                   	nop
c002227d:	83 c4 0c             	add    esp,0xc
c0022280:	c3                   	ret    
c0022281:	90                   	nop

c0022282 <SoundChannel::~SoundChannel()>:
c0022282:	83 ec 0c             	sub    esp,0xc
c0022285:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022289:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c002228c:	83 ec 0c             	sub    esp,0xc
c002228f:	50                   	push   eax
c0022290:	e8 be d5 fe ff       	call   c000f853 <free>
c0022295:	83 c4 10             	add    esp,0x10
c0022298:	90                   	nop
c0022299:	83 c4 0c             	add    esp,0xc
c002229c:	c3                   	ret    
c002229d:	90                   	nop

c002229e <SoundChannel::setSpeed(float)>:
c002229e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222a2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222a6:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00222a9:	c3                   	ret    

c00222aa <SoundChannel::getSpeed()>:
c00222aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ae:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00222b1:	c3                   	ret    

c00222b2 <SoundChannel::setVolume(int)>:
c00222b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00222b6:	83 f8 64             	cmp    eax,0x64
c00222b9:	7e 05                	jle    c00222c0 <SoundChannel::setVolume(int)+0xe>
c00222bb:	b8 64 00 00 00       	mov    eax,0x64
c00222c0:	85 c0                	test   eax,eax
c00222c2:	79 02                	jns    c00222c6 <SoundChannel::setVolume(int)+0x14>
c00222c4:	31 c0                	xor    eax,eax
c00222c6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00222ca:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00222cd:	c3                   	ret    

c00222ce <SoundChannel::getVolume()>:
c00222ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222d2:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00222d5:	c3                   	ret    

c00222d6 <SoundChannel::pause()>:
c00222d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222da:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c00222de:	c3                   	ret    
c00222df:	90                   	nop

c00222e0 <SoundChannel::SoundChannel(int, int, int, int)>:
c00222e0:	83 ec 1c             	sub    esp,0x1c
c00222e3:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00222e7:	e8 ea ff ff ff       	call   c00222d6 <SoundChannel::pause()>
c00222ec:	83 c4 04             	add    esp,0x4
c00222ef:	6a 50                	push   0x50
c00222f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00222f5:	e8 b8 ff ff ff       	call   c00222b2 <SoundChannel::setVolume(int)>
c00222fa:	83 c4 08             	add    esp,0x8
c00222fd:	a1 d8 ca 02 c0       	mov    eax,ds:0xc002cad8
c0022302:	50                   	push   eax
c0022303:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022307:	e8 92 ff ff ff       	call   c002229e <SoundChannel::setSpeed(float)>
c002230c:	83 c4 08             	add    esp,0x8
c002230f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022313:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0022317:	89 10                	mov    DWORD PTR [eax],edx
c0022319:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002231d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022321:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0022324:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022328:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c002232c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002232f:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0022334:	75 23                	jne    c0022359 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0022336:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002233a:	8b 10                	mov    edx,DWORD PTR [eax]
c002233c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022340:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022343:	0f af c2             	imul   eax,edx
c0022346:	85 c0                	test   eax,eax
c0022348:	79 03                	jns    c002234d <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c002234a:	83 c0 03             	add    eax,0x3
c002234d:	c1 f8 02             	sar    eax,0x2
c0022350:	05 a0 0f 00 00       	add    eax,0xfa0
c0022355:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022359:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002235d:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0022361:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0022364:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022368:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c002236f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022373:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c002237a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002237e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022381:	c1 e0 02             	shl    eax,0x2
c0022384:	83 ec 0c             	sub    esp,0xc
c0022387:	50                   	push   eax
c0022388:	e8 b6 d4 fe ff       	call   c000f843 <malloc>
c002238d:	83 c4 10             	add    esp,0x10
c0022390:	89 c2                	mov    edx,eax
c0022392:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022396:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022399:	83 ec 04             	sub    esp,0x4
c002239c:	8d 44 24 08          	lea    eax,[esp+0x8]
c00223a0:	50                   	push   eax
c00223a1:	6a 01                	push   0x1
c00223a3:	6a 04                	push   0x4
c00223a5:	e8 f5 67 fe ff       	call   c0008b9f <src_new>
c00223aa:	83 c4 10             	add    esp,0x10
c00223ad:	89 c2                	mov    edx,eax
c00223af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00223b3:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00223b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00223ba:	85 c0                	test   eax,eax
c00223bc:	74 10                	je     c00223ce <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c00223be:	83 ec 0c             	sub    esp,0xc
c00223c1:	68 bc ca 02 c0       	push   0xc002cabc
c00223c6:	e8 d2 82 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c00223cb:	83 c4 10             	add    esp,0x10
c00223ce:	a0 80 28 03 c0       	mov    al,ds:0xc0032880
c00223d3:	83 f0 01             	xor    eax,0x1
c00223d6:	84 c0                	test   al,al
c00223d8:	74 57                	je     c0022431 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c00223da:	a1 dc ca 02 c0       	mov    eax,ds:0xc002cadc
c00223df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00223e3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00223eb:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c00223f3:	7f 35                	jg     c002242a <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c00223f5:	83 ec 0c             	sub    esp,0xc
c00223f8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00223fc:	e8 96 4f 00 00       	call   c0027397 <__floatsisf>
c0022401:	83 c4 10             	add    esp,0x10
c0022404:	8b 15 dc ca 02 c0    	mov    edx,DWORD PTR ds:0xc002cadc
c002240a:	83 ec 08             	sub    esp,0x8
c002240d:	52                   	push   edx
c002240e:	50                   	push   eax
c002240f:	e8 95 4b 00 00       	call   c0026fa9 <__mulsf3>
c0022414:	83 c4 10             	add    esp,0x10
c0022417:	89 c2                	mov    edx,eax
c0022419:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002241d:	89 14 85 80 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb80],edx
c0022424:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022428:	eb c1                	jmp    c00223eb <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c002242a:	c6 05 80 28 03 c0 01 	mov    BYTE PTR ds:0xc0032880,0x1
c0022431:	90                   	nop
c0022432:	83 c4 1c             	add    esp,0x1c
c0022435:	c3                   	ret    

c0022436 <SoundChannel::play()>:
c0022436:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002243a:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c002243e:	c3                   	ret    
c002243f:	90                   	nop

c0022440 <SoundChannel::paused()>:
c0022440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022444:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022447:	c3                   	ret    

c0022448 <SoundChannel::getSampleRate()>:
c0022448:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002244c:	8b 00                	mov    eax,DWORD PTR [eax]
c002244e:	c3                   	ret    
c002244f:	90                   	nop

c0022450 <SoundChannel::getBits()>:
c0022450:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022454:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022457:	c3                   	ret    

c0022458 <SoundChannel::getBufferUsed()>:
c0022458:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002245c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c002245f:	c3                   	ret    

c0022460 <SoundChannel::getBufferSize()>:
c0022460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022464:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022467:	c3                   	ret    

c0022468 <SoundChannel::unbuffer(float*, int, int)>:
c0022468:	56                   	push   esi
c0022469:	53                   	push   ebx
c002246a:	83 ec 40             	sub    esp,0x40
c002246d:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022471:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022474:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022478:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c002247b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002247f:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022483:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022487:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002248b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002248f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022493:	e8 ff 4e 00 00       	call   c0027397 <__floatsisf>
c0022498:	5a                   	pop    edx
c0022499:	89 c6                	mov    esi,eax
c002249b:	ff 33                	push   DWORD PTR [ebx]
c002249d:	e8 f5 4e 00 00       	call   c0027397 <__floatsisf>
c00224a2:	59                   	pop    ecx
c00224a3:	5a                   	pop    edx
c00224a4:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c00224a7:	50                   	push   eax
c00224a8:	e8 fc 4a 00 00       	call   c0026fa9 <__mulsf3>
c00224ad:	59                   	pop    ecx
c00224ae:	5a                   	pop    edx
c00224af:	50                   	push   eax
c00224b0:	56                   	push   esi
c00224b1:	e8 b6 4c 00 00       	call   c002716c <__divsf3>
c00224b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00224b9:	e8 a9 61 00 00       	call   c0028667 <__extendsfdf2>
c00224be:	59                   	pop    ecx
c00224bf:	5e                   	pop    esi
c00224c0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00224c4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00224c8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c00224d0:	8d 44 24 14          	lea    eax,[esp+0x14]
c00224d4:	50                   	push   eax
c00224d5:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00224d8:	e8 b7 62 fe ff       	call   c0008794 <src_process>
c00224dd:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00224e1:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00224e4:	83 c4 0c             	add    esp,0xc
c00224e7:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00224ea:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c00224ed:	29 d0                	sub    eax,edx
c00224ef:	c1 e0 02             	shl    eax,0x2
c00224f2:	50                   	push   eax
c00224f3:	8d 04 91             	lea    eax,[ecx+edx*4]
c00224f6:	50                   	push   eax
c00224f7:	51                   	push   ecx
c00224f8:	e8 7f e1 fd ff       	call   c000067c <memmove>
c00224fd:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022501:	83 c4 44             	add    esp,0x44
c0022504:	5b                   	pop    ebx
c0022505:	5e                   	pop    esi
c0022506:	c3                   	ret    
c0022507:	90                   	nop

c0022508 <SoundChannel::buffer8(unsigned char*, int)>:
c0022508:	55                   	push   ebp
c0022509:	57                   	push   edi
c002250a:	56                   	push   esi
c002250b:	53                   	push   ebx
c002250c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022510:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022514:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022517:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002251b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002251e:	74 7a                	je     c002259a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022520:	85 ff                	test   edi,edi
c0022522:	7e 76                	jle    c002259a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022524:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022528:	8d 70 01             	lea    esi,[eax+0x1]
c002252b:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002252e:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022531:	8b 1c 9d 80 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb80]
c0022538:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002253b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c002253e:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022541:	74 5e                	je     c00225a1 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022543:	83 ff 01             	cmp    edi,0x1
c0022546:	74 4b                	je     c0022593 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022548:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c002254c:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c002254f:	8d 70 01             	lea    esi,[eax+0x1]
c0022552:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022555:	8b 1c 9d 80 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb80]
c002255c:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c002255f:	b8 02 00 00 00       	mov    eax,0x2
c0022564:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022567:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002256a:	75 23                	jne    c002258f <SoundChannel::buffer8(unsigned char*, int)+0x87>
c002256c:	eb 27                	jmp    c0022595 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002256e:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022573:	8d 71 01             	lea    esi,[ecx+0x1]
c0022576:	40                   	inc    eax
c0022577:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c002257a:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c002257d:	8b 1c 9d 80 24 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcdb80]
c0022584:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022587:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002258a:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002258d:	74 06                	je     c0022595 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002258f:	39 c7                	cmp    edi,eax
c0022591:	75 db                	jne    c002256e <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022593:	89 f8                	mov    eax,edi
c0022595:	5b                   	pop    ebx
c0022596:	5e                   	pop    esi
c0022597:	5f                   	pop    edi
c0022598:	5d                   	pop    ebp
c0022599:	c3                   	ret    
c002259a:	5b                   	pop    ebx
c002259b:	31 c0                	xor    eax,eax
c002259d:	5e                   	pop    esi
c002259e:	5f                   	pop    edi
c002259f:	5d                   	pop    ebp
c00225a0:	c3                   	ret    
c00225a1:	b8 01 00 00 00       	mov    eax,0x1
c00225a6:	eb ed                	jmp    c0022595 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c00225a8 <SoundDevice::SoundDevice(char const*)>:
c00225a8:	83 ec 1c             	sub    esp,0x1c
c00225ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225af:	83 ec 08             	sub    esp,0x8
c00225b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00225b6:	50                   	push   eax
c00225b7:	e8 4a 20 ff ff       	call   c0014606 <Device::Device(char const*)>
c00225bc:	83 c4 10             	add    esp,0x10
c00225bf:	ba e8 ca 02 c0       	mov    edx,0xc002cae8
c00225c4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225c8:	89 10                	mov    DWORD PTR [eax],edx
c00225ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225ce:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00225d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225dc:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00225e6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00225ee:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00225f3:	7f 19                	jg     c002260e <SoundDevice::SoundDevice(char const*)+0x66>
c00225f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00225f9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00225fd:	83 c2 54             	add    edx,0x54
c0022600:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022608:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002260c:	eb e0                	jmp    c00225ee <SoundDevice::SoundDevice(char const*)+0x46>
c002260e:	90                   	nop
c002260f:	83 c4 1c             	add    esp,0x1c
c0022612:	c3                   	ret    
c0022613:	90                   	nop

c0022614 <SoundDevice::~SoundDevice()>:
c0022614:	53                   	push   ebx
c0022615:	83 ec 18             	sub    esp,0x18
c0022618:	ba e8 ca 02 c0       	mov    edx,0xc002cae8
c002261d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022621:	89 10                	mov    DWORD PTR [eax],edx
c0022623:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002262b:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022630:	7f 46                	jg     c0022678 <SoundDevice::~SoundDevice()+0x64>
c0022632:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022636:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002263a:	83 c2 54             	add    edx,0x54
c002263d:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022641:	85 c0                	test   eax,eax
c0022643:	74 2d                	je     c0022672 <SoundDevice::~SoundDevice()+0x5e>
c0022645:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022649:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002264d:	83 c2 54             	add    edx,0x54
c0022650:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022654:	85 db                	test   ebx,ebx
c0022656:	74 1a                	je     c0022672 <SoundDevice::~SoundDevice()+0x5e>
c0022658:	83 ec 0c             	sub    esp,0xc
c002265b:	53                   	push   ebx
c002265c:	e8 21 fc ff ff       	call   c0022282 <SoundChannel::~SoundChannel()>
c0022661:	83 c4 10             	add    esp,0x10
c0022664:	83 ec 08             	sub    esp,0x8
c0022667:	6a 2c                	push   0x2c
c0022669:	53                   	push   ebx
c002266a:	e8 a0 08 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c002266f:	83 c4 10             	add    esp,0x10
c0022672:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022676:	eb b3                	jmp    c002262b <SoundDevice::~SoundDevice()+0x17>
c0022678:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002267c:	83 ec 0c             	sub    esp,0xc
c002267f:	50                   	push   eax
c0022680:	e8 63 1c ff ff       	call   c00142e8 <Device::~Device()>
c0022685:	83 c4 10             	add    esp,0x10
c0022688:	90                   	nop
c0022689:	83 c4 18             	add    esp,0x18
c002268c:	5b                   	pop    ebx
c002268d:	c3                   	ret    

c002268e <SoundDevice::~SoundDevice()>:
c002268e:	83 ec 0c             	sub    esp,0xc
c0022691:	83 ec 0c             	sub    esp,0xc
c0022694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022698:	e8 77 ff ff ff       	call   c0022614 <SoundDevice::~SoundDevice()>
c002269d:	83 c4 10             	add    esp,0x10
c00226a0:	83 ec 08             	sub    esp,0x8
c00226a3:	68 e4 01 00 00       	push   0x1e4
c00226a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00226ac:	e8 5e 08 ff ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c00226b1:	83 c4 10             	add    esp,0x10
c00226b4:	83 c4 0c             	add    esp,0xc
c00226b7:	c3                   	ret    

c00226b8 <SoundDevice::getFreeChannelNum()>:
c00226b8:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00226bc:	31 c0                	xor    eax,eax
c00226be:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c00226c6:	74 09                	je     c00226d1 <SoundDevice::getFreeChannelNum()+0x19>
c00226c8:	40                   	inc    eax
c00226c9:	83 f8 20             	cmp    eax,0x20
c00226cc:	75 f0                	jne    c00226be <SoundDevice::getFreeChannelNum()+0x6>
c00226ce:	83 c8 ff             	or     eax,0xffffffff
c00226d1:	c3                   	ret    

c00226d2 <SoundDevice::addChannel(SoundChannel*)>:
c00226d2:	56                   	push   esi
c00226d3:	53                   	push   ebx
c00226d4:	51                   	push   ecx
c00226d5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00226d9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00226dd:	53                   	push   ebx
c00226de:	e8 d5 ff ff ff       	call   c00226b8 <SoundDevice::getFreeChannelNum()>
c00226e3:	5a                   	pop    edx
c00226e4:	83 f8 ff             	cmp    eax,0xffffffff
c00226e7:	74 51                	je     c002273a <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226e9:	85 f6                	test   esi,esi
c00226eb:	74 4d                	je     c002273a <SoundDevice::addChannel(SoundChannel*)+0x68>
c00226ed:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c00226f4:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c00226fb:	75 30                	jne    c002272d <SoundDevice::addChannel(SoundChannel*)+0x5b>
c00226fd:	83 ec 0c             	sub    esp,0xc
c0022700:	56                   	push   esi
c0022701:	e8 42 fd ff ff       	call   c0022448 <SoundChannel::getSampleRate()>
c0022706:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002270c:	89 34 24             	mov    DWORD PTR [esp],esi
c002270f:	e8 3c fd ff ff       	call   c0022450 <SoundChannel::getBits()>
c0022714:	83 c4 0c             	add    esp,0xc
c0022717:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002271d:	8b 13                	mov    edx,DWORD PTR [ebx]
c002271f:	50                   	push   eax
c0022720:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022726:	53                   	push   ebx
c0022727:	ff 52 28             	call   DWORD PTR [edx+0x28]
c002272a:	83 c4 10             	add    esp,0x10
c002272d:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022733:	b8 01 00 00 00       	mov    eax,0x1
c0022738:	eb 03                	jmp    c002273d <SoundDevice::addChannel(SoundChannel*)+0x6b>
c002273a:	83 c8 ff             	or     eax,0xffffffff
c002273d:	5a                   	pop    edx
c002273e:	5b                   	pop    ebx
c002273f:	5e                   	pop    esi
c0022740:	c3                   	ret    
c0022741:	90                   	nop

c0022742 <SoundDevice::removeChannel(int)>:
c0022742:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002274a:	83 fa 1f             	cmp    edx,0x1f
c002274d:	77 23                	ja     c0022772 <SoundDevice::removeChannel(int)+0x30>
c002274f:	8d 14 90             	lea    edx,[eax+edx*4]
c0022752:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022759:	74 17                	je     c0022772 <SoundDevice::removeChannel(int)+0x30>
c002275b:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022765:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c002276b:	75 05                	jne    c0022772 <SoundDevice::removeChannel(int)+0x30>
c002276d:	8b 00                	mov    eax,DWORD PTR [eax]
c002276f:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022772:	c3                   	ret    
c0022773:	90                   	nop

c0022774 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022774:	57                   	push   edi
c0022775:	56                   	push   esi
c0022776:	53                   	push   ebx
c0022777:	31 db                	xor    ebx,ebx
c0022779:	83 ec 10             	sub    esp,0x10
c002277c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022780:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022784:	0f 8d cb 00 00 00    	jge    c0022855 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002278a:	83 ec 0c             	sub    esp,0xc
c002278d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022791:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022794:	e8 ce 5e 00 00       	call   c0028667 <__extendsfdf2>
c0022799:	83 c4 10             	add    esp,0x10
c002279c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227a0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227a4:	68 00 00 f0 3f       	push   0x3ff00000
c00227a9:	6a 00                	push   0x0
c00227ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227b3:	e8 3b 4e 00 00       	call   c00275f3 <__adddf3>
c00227b8:	83 c4 10             	add    esp,0x10
c00227bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227c3:	68 00 00 e0 3f       	push   0x3fe00000
c00227c8:	6a 00                	push   0x0
c00227ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227d2:	e8 99 54 00 00       	call   c0027c70 <__muldf3>
c00227d7:	83 c4 10             	add    esp,0x10
c00227da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00227de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00227e2:	68 00 00 60 40       	push   0x40600000
c00227e7:	6a 00                	push   0x0
c00227e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00227f1:	e8 7a 54 00 00       	call   c0027c70 <__muldf3>
c00227f6:	59                   	pop    ecx
c00227f7:	5f                   	pop    edi
c00227f8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00227fc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022800:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022804:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022808:	e8 36 5d 00 00       	call   c0028543 <__truncdfsf2>
c002280d:	5a                   	pop    edx
c002280e:	89 c7                	mov    edi,eax
c0022810:	59                   	pop    ecx
c0022811:	68 00 00 fe 42       	push   0x42fe0000
c0022816:	50                   	push   eax
c0022817:	e8 d1 4d 00 00       	call   c00275ed <__gesf2>
c002281c:	83 c4 10             	add    esp,0x10
c002281f:	85 c0                	test   eax,eax
c0022821:	78 06                	js     c0022829 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022823:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022827:	eb 26                	jmp    c002284f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022829:	50                   	push   eax
c002282a:	50                   	push   eax
c002282b:	6a 00                	push   0x0
c002282d:	57                   	push   edi
c002282e:	e8 be 4d 00 00       	call   c00275f1 <__lesf2>
c0022833:	83 c4 10             	add    esp,0x10
c0022836:	85 c0                	test   eax,eax
c0022838:	7f 06                	jg     c0022840 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c002283a:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c002283e:	eb 0f                	jmp    c002284f <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022840:	83 ec 0c             	sub    esp,0xc
c0022843:	57                   	push   edi
c0022844:	e8 b3 5e 00 00       	call   c00286fc <lrintf>
c0022849:	83 c4 10             	add    esp,0x10
c002284c:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c002284f:	43                   	inc    ebx
c0022850:	e9 2b ff ff ff       	jmp    c0022780 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022855:	83 c4 10             	add    esp,0x10
c0022858:	5b                   	pop    ebx
c0022859:	5e                   	pop    esi
c002285a:	5f                   	pop    edi
c002285b:	c3                   	ret    

c002285c <SoundDevice::getAudio(int, float*, float*)>:
c002285c:	55                   	push   ebp
c002285d:	57                   	push   edi
c002285e:	56                   	push   esi
c002285f:	53                   	push   ebx
c0022860:	31 db                	xor    ebx,ebx
c0022862:	83 ec 20             	sub    esp,0x20
c0022865:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022869:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002286d:	c1 e0 02             	shl    eax,0x2
c0022870:	50                   	push   eax
c0022871:	6a 00                	push   0x0
c0022873:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022877:	e8 fc de fd ff       	call   c0000778 <memset>
c002287c:	83 c4 10             	add    esp,0x10
c002287f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022883:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002288a:	85 c0                	test   eax,eax
c002288c:	0f 84 d7 00 00 00    	je     c0022969 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022892:	83 ec 0c             	sub    esp,0xc
c0022895:	50                   	push   eax
c0022896:	e8 a5 fb ff ff       	call   c0022440 <SoundChannel::paused()>
c002289b:	83 c4 10             	add    esp,0x10
c002289e:	84 c0                	test   al,al
c00228a0:	0f 85 c3 00 00 00    	jne    c0022969 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228a6:	83 ec 0c             	sub    esp,0xc
c00228a9:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228b0:	e8 19 fa ff ff       	call   c00222ce <SoundChannel::getVolume()>
c00228b5:	83 c4 10             	add    esp,0x10
c00228b8:	85 c0                	test   eax,eax
c00228ba:	0f 84 a9 00 00 00    	je     c0022969 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00228c0:	83 ec 0c             	sub    esp,0xc
c00228c3:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c00228ca:	e8 ff f9 ff ff       	call   c00222ce <SoundChannel::getVolume()>
c00228cf:	83 ec 0c             	sub    esp,0xc
c00228d2:	50                   	push   eax
c00228d3:	e8 bf 4a 00 00       	call   c0027397 <__floatsisf>
c00228d8:	59                   	pop    ecx
c00228d9:	5d                   	pop    ebp
c00228da:	31 ed                	xor    ebp,ebp
c00228dc:	68 00 00 c8 42       	push   0x42c80000
c00228e1:	50                   	push   eax
c00228e2:	e8 85 48 00 00       	call   c002716c <__divsf3>
c00228e7:	83 c4 10             	add    esp,0x10
c00228ea:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00228ee:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00228f2:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c00228f8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c00228fc:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022903:	e8 60 fb ff ff       	call   c0022468 <SoundChannel::unbuffer(float*, int, int)>
c0022908:	83 c4 20             	add    esp,0x20
c002290b:	89 c1                	mov    ecx,eax
c002290d:	39 cd                	cmp    ebp,ecx
c002290f:	7d 52                	jge    c0022963 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022911:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022915:	50                   	push   eax
c0022916:	50                   	push   eax
c0022917:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002291b:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002291e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022922:	e8 82 46 00 00       	call   c0026fa9 <__mulsf3>
c0022927:	5a                   	pop    edx
c0022928:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002292c:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022932:	e8 60 4a 00 00       	call   c0027397 <__floatsisf>
c0022937:	59                   	pop    ecx
c0022938:	5a                   	pop    edx
c0022939:	50                   	push   eax
c002293a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002293e:	e8 29 48 00 00       	call   c002716c <__divsf3>
c0022943:	59                   	pop    ecx
c0022944:	5a                   	pop    edx
c0022945:	50                   	push   eax
c0022946:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002294a:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002294d:	e8 34 43 00 00       	call   c0026c86 <__addsf3>
c0022952:	83 c4 10             	add    esp,0x10
c0022955:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022959:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c002295d:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022960:	45                   	inc    ebp
c0022961:	eb aa                	jmp    c002290d <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022963:	39 cf                	cmp    edi,ecx
c0022965:	7e 02                	jle    c0022969 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022967:	89 cf                	mov    edi,ecx
c0022969:	43                   	inc    ebx
c002296a:	83 fb 20             	cmp    ebx,0x20
c002296d:	0f 85 10 ff ff ff    	jne    c0022883 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022973:	83 c4 1c             	add    esp,0x1c
c0022976:	89 f8                	mov    eax,edi
c0022978:	5b                   	pop    ebx
c0022979:	5e                   	pop    esi
c002297a:	5f                   	pop    edi
c002297b:	5d                   	pop    ebp
c002297c:	c3                   	ret    
c002297d:	90                   	nop

c002297e <PCI::open(int, int, void*)>:
c002297e:	83 ec 18             	sub    esp,0x18
c0022981:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022985:	8b 10                	mov    edx,DWORD PTR [eax]
c0022987:	50                   	push   eax
c0022988:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002298b:	31 c0                	xor    eax,eax
c002298d:	83 c4 1c             	add    esp,0x1c
c0022990:	c3                   	ret    
c0022991:	90                   	nop

c0022992 <PCI::close(int, int, void*)>:
c0022992:	31 c0                	xor    eax,eax
c0022994:	c3                   	ret    
c0022995:	90                   	nop

c0022996 <PCI::PCI()>:
c0022996:	83 ec 0c             	sub    esp,0xc
c0022999:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002299d:	83 ec 08             	sub    esp,0x8
c00229a0:	68 18 cb 02 c0       	push   0xc002cb18
c00229a5:	50                   	push   eax
c00229a6:	e8 df 12 ff ff       	call   c0013c8a <Bus::Bus(char const*)>
c00229ab:	83 c4 10             	add    esp,0x10
c00229ae:	ba 84 cb 02 c0       	mov    edx,0xc002cb84
c00229b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229b7:	89 10                	mov    DWORD PTR [eax],edx
c00229b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229bd:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229c3:	0f b6 d0             	movzx  edx,al
c00229c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229ca:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c00229d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229d5:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229db:	0f b6 d0             	movzx  edx,al
c00229de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229e2:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c00229e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00229eb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00229f1:	8d 50 01             	lea    edx,[eax+0x1]
c00229f4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00229f8:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00229fe:	0f b6 d0             	movzx  edx,al
c0022a01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022a05:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022a09:	83 c9 c0             	or     ecx,0xffffffc0
c0022a0c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022a10:	90                   	nop
c0022a11:	83 c4 0c             	add    esp,0xc
c0022a14:	c3                   	ret    
c0022a15:	90                   	nop

c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022a16:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0022a1a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022a1f:	89 ca                	mov    edx,ecx
c0022a21:	c1 e0 10             	shl    eax,0x10
c0022a24:	81 e2 fc 00 00 00    	and    edx,0xfc
c0022a2a:	09 d0                	or     eax,edx
c0022a2c:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0022a31:	c1 e2 08             	shl    edx,0x8
c0022a34:	09 d0                	or     eax,edx
c0022a36:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0022a3b:	c1 e2 0b             	shl    edx,0xb
c0022a3e:	09 d0                	or     eax,edx
c0022a40:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022a45:	0d 00 00 00 80       	or     eax,0x80000000
c0022a4a:	ef                   	out    dx,eax
c0022a4b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022a50:	ed                   	in     eax,dx
c0022a51:	83 e1 02             	and    ecx,0x2
c0022a54:	0f b6 c9             	movzx  ecx,cl
c0022a57:	c1 e1 03             	shl    ecx,0x3
c0022a5a:	d3 e8                	shr    eax,cl
c0022a5c:	c3                   	ret    
c0022a5d:	90                   	nop

c0022a5e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c0022a5e:	6a 00                	push   0x0
c0022a60:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a65:	50                   	push   eax
c0022a66:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a6b:	50                   	push   eax
c0022a6c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a71:	50                   	push   eax
c0022a72:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a76:	e8 9b ff ff ff       	call   c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a7b:	83 c4 14             	add    esp,0x14
c0022a7e:	c3                   	ret    
c0022a7f:	90                   	nop

c0022a80 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022a80:	6a 0e                	push   0xe
c0022a82:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a87:	50                   	push   eax
c0022a88:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a8d:	50                   	push   eax
c0022a8e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022a93:	50                   	push   eax
c0022a94:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022a98:	e8 79 ff ff ff       	call   c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a9d:	83 c4 14             	add    esp,0x14
c0022aa0:	0f b6 c0             	movzx  eax,al
c0022aa3:	c3                   	ret    

c0022aa4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022aa4:	55                   	push   ebp
c0022aa5:	57                   	push   edi
c0022aa6:	56                   	push   esi
c0022aa7:	53                   	push   ebx
c0022aa8:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c0022aad:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022ab2:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022ab7:	6a 0a                	push   0xa
c0022ab9:	56                   	push   esi
c0022aba:	55                   	push   ebp
c0022abb:	57                   	push   edi
c0022abc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022ac0:	e8 51 ff ff ff       	call   c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ac5:	6a 0a                	push   0xa
c0022ac7:	89 c3                	mov    ebx,eax
c0022ac9:	56                   	push   esi
c0022aca:	0f b6 db             	movzx  ebx,bl
c0022acd:	55                   	push   ebp
c0022ace:	57                   	push   edi
c0022acf:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022ad3:	e8 3e ff ff ff       	call   c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ad8:	83 c4 28             	add    esp,0x28
c0022adb:	25 00 ff 00 00       	and    eax,0xff00
c0022ae0:	09 d8                	or     eax,ebx
c0022ae2:	5b                   	pop    ebx
c0022ae3:	5e                   	pop    esi
c0022ae4:	5f                   	pop    edi
c0022ae5:	5d                   	pop    ebp
c0022ae6:	c3                   	ret    
c0022ae7:	90                   	nop

c0022ae8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022ae8:	6a 08                	push   0x8
c0022aea:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022aef:	50                   	push   eax
c0022af0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022af5:	50                   	push   eax
c0022af6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022afb:	50                   	push   eax
c0022afc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b00:	e8 11 ff ff ff       	call   c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b05:	83 c4 14             	add    esp,0x14
c0022b08:	0f b6 c4             	movzx  eax,ah
c0022b0b:	c3                   	ret    

c0022b0c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0022b0c:	6a 08                	push   0x8
c0022b0e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b13:	50                   	push   eax
c0022b14:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b19:	50                   	push   eax
c0022b1a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b1f:	50                   	push   eax
c0022b20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b24:	e8 ed fe ff ff       	call   c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b29:	83 c4 14             	add    esp,0x14
c0022b2c:	c3                   	ret    
c0022b2d:	90                   	nop

c0022b2e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0022b2e:	6a 3c                	push   0x3c
c0022b30:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b35:	50                   	push   eax
c0022b36:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b3b:	50                   	push   eax
c0022b3c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b41:	50                   	push   eax
c0022b42:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b46:	e8 cb fe ff ff       	call   c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b4b:	83 c4 14             	add    esp,0x14
c0022b4e:	c3                   	ret    
c0022b4f:	90                   	nop

c0022b50 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c0022b50:	6a 18                	push   0x18
c0022b52:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b57:	50                   	push   eax
c0022b58:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b5d:	50                   	push   eax
c0022b5e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022b63:	50                   	push   eax
c0022b64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022b68:	e8 a9 fe ff ff       	call   c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022b6d:	83 c4 14             	add    esp,0x14
c0022b70:	0f b6 c4             	movzx  eax,ah
c0022b73:	c3                   	ret    

c0022b74 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022b74:	55                   	push   ebp
c0022b75:	57                   	push   edi
c0022b76:	56                   	push   esi
c0022b77:	53                   	push   ebx
c0022b78:	50                   	push   eax
c0022b79:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0022b7d:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022b82:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b87:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c0022b8c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022b93:	8d 43 12             	lea    eax,[ebx+0x12]
c0022b96:	83 c3 10             	add    ebx,0x10
c0022b99:	0f b6 c0             	movzx  eax,al
c0022b9c:	0f b6 db             	movzx  ebx,bl
c0022b9f:	50                   	push   eax
c0022ba0:	51                   	push   ecx
c0022ba1:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022ba5:	57                   	push   edi
c0022ba6:	55                   	push   ebp
c0022ba7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0022bab:	e8 66 fe ff ff       	call   c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bb0:	53                   	push   ebx
c0022bb1:	89 c6                	mov    esi,eax
c0022bb3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022bb7:	c1 e6 10             	shl    esi,0x10
c0022bba:	51                   	push   ecx
c0022bbb:	57                   	push   edi
c0022bbc:	55                   	push   ebp
c0022bbd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022bc1:	e8 50 fe ff ff       	call   c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022bc6:	83 c4 2c             	add    esp,0x2c
c0022bc9:	0f b7 c0             	movzx  eax,ax
c0022bcc:	5b                   	pop    ebx
c0022bcd:	09 f0                	or     eax,esi
c0022bcf:	5e                   	pop    esi
c0022bd0:	5f                   	pop    edi
c0022bd1:	5d                   	pop    ebp
c0022bd2:	c3                   	ret    
c0022bd3:	90                   	nop

c0022bd4 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022bd4:	53                   	push   ebx
c0022bd5:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022bda:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0022bdf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022be3:	c1 e1 10             	shl    ecx,0x10
c0022be6:	25 fc 00 00 00       	and    eax,0xfc
c0022beb:	09 c1                	or     ecx,eax
c0022bed:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022bf2:	c1 e0 08             	shl    eax,0x8
c0022bf5:	09 c1                	or     ecx,eax
c0022bf7:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0022bfc:	c1 e0 0b             	shl    eax,0xb
c0022bff:	09 c1                	or     ecx,eax
c0022c01:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022c07:	89 c8                	mov    eax,ecx
c0022c09:	ef                   	out    dx,eax
c0022c0a:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c0f:	ed                   	in     eax,dx
c0022c10:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022c15:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0022c1a:	74 0a                	je     c0022c26 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0022c1c:	0f b7 d8             	movzx  ebx,ax
c0022c1f:	89 d0                	mov    eax,edx
c0022c21:	c1 e0 10             	shl    eax,0x10
c0022c24:	eb 05                	jmp    c0022c2b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0022c26:	66 31 c0             	xor    ax,ax
c0022c29:	89 d3                	mov    ebx,edx
c0022c2b:	09 c3                	or     ebx,eax
c0022c2d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0022c32:	89 c8                	mov    eax,ecx
c0022c34:	ef                   	out    dx,eax
c0022c35:	ba fc 0c 00 00       	mov    edx,0xcfc
c0022c3a:	89 d8                	mov    eax,ebx
c0022c3c:	ef                   	out    dx,eax
c0022c3d:	5b                   	pop    ebx
c0022c3e:	c3                   	ret    
c0022c3f:	90                   	nop

c0022c40 <PCI::checkBus(unsigned char)>:
c0022c40:	56                   	push   esi
c0022c41:	53                   	push   ebx
c0022c42:	31 db                	xor    ebx,ebx
c0022c44:	51                   	push   ecx
c0022c45:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0022c4a:	52                   	push   edx
c0022c4b:	53                   	push   ebx
c0022c4c:	43                   	inc    ebx
c0022c4d:	56                   	push   esi
c0022c4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022c52:	e8 2b 03 00 00       	call   c0022f82 <PCI::checkDevice(unsigned char, unsigned char)>
c0022c57:	83 c4 10             	add    esp,0x10
c0022c5a:	83 fb 20             	cmp    ebx,0x20
c0022c5d:	75 eb                	jne    c0022c4a <PCI::checkBus(unsigned char)+0xa>
c0022c5f:	58                   	pop    eax
c0022c60:	5b                   	pop    ebx
c0022c61:	5e                   	pop    esi
c0022c62:	c3                   	ret    
c0022c63:	90                   	nop

c0022c64 <PCI::foundDevice(PCIDeviceInfo)>:
c0022c64:	55                   	push   ebp
c0022c65:	57                   	push   edi
c0022c66:	56                   	push   esi
c0022c67:	53                   	push   ebx
c0022c68:	83 ec 1c             	sub    esp,0x1c
c0022c6b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0022c6f:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c0022c75:	0f 84 52 01 00 00    	je     c0022dcd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022c7b:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0022c7f:	66 81 f9 06 04       	cmp    cx,0x406
c0022c84:	75 2c                	jne    c0022cb2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022c86:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c0022c8b:	50                   	push   eax
c0022c8c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022c91:	50                   	push   eax
c0022c92:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022c97:	50                   	push   eax
c0022c98:	56                   	push   esi
c0022c99:	e8 b2 fe ff ff       	call   c0022b50 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c0022c9e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022ca2:	0f b6 c0             	movzx  eax,al
c0022ca5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022ca9:	83 c4 2c             	add    esp,0x2c
c0022cac:	5b                   	pop    ebx
c0022cad:	5e                   	pop    esi
c0022cae:	5f                   	pop    edi
c0022caf:	5d                   	pop    ebp
c0022cb0:	eb 8e                	jmp    c0022c40 <PCI::checkBus(unsigned char)>
c0022cb2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022cb6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0022cbc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022cc0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022cc4:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022cc8:	88 d3                	mov    bl,dl
c0022cca:	85 c0                	test   eax,eax
c0022ccc:	74 33                	je     c0022d01 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0022cce:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022cd1:	85 d2                	test   edx,edx
c0022cd3:	74 28                	je     c0022cfd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cd5:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c0022cdb:	31 ef                	xor    edi,ebp
c0022cdd:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022ce3:	75 18                	jne    c0022cfd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022ce5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022ce9:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0022cef:	75 0c                	jne    c0022cfd <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022cf1:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022cf7:	0f 84 d0 00 00 00    	je     c0022dcd <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0022cfd:	8b 00                	mov    eax,DWORD PTR [eax]
c0022cff:	eb c9                	jmp    c0022cca <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022d01:	66 81 f9 01 06       	cmp    cx,0x601
c0022d06:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c0022d0a:	75 19                	jne    c0022d25 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0022d0c:	83 ec 0c             	sub    esp,0xc
c0022d0f:	68 64 01 00 00       	push   0x164
c0022d14:	e8 2a cb fe ff       	call   c000f843 <malloc>
c0022d19:	89 c5                	mov    ebp,eax
c0022d1b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d1e:	e8 95 0f 00 00       	call   c0023cb8 <SATABus::SATABus()>
c0022d23:	eb 1e                	jmp    c0022d43 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0022d25:	66 81 f9 01 01       	cmp    cx,0x101
c0022d2a:	75 60                	jne    c0022d8c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0022d2c:	83 ec 0c             	sub    esp,0xc
c0022d2f:	68 70 02 00 00       	push   0x270
c0022d34:	e8 0a cb fe ff       	call   c000f843 <malloc>
c0022d39:	89 c5                	mov    ebp,eax
c0022d3b:	89 04 24             	mov    DWORD PTR [esp],eax
c0022d3e:	e8 03 03 00 00       	call   c0023046 <IDE::IDE()>
c0022d43:	58                   	pop    eax
c0022d44:	5a                   	pop    edx
c0022d45:	55                   	push   ebp
c0022d46:	56                   	push   esi
c0022d47:	e8 ca 16 ff ff       	call   c0014416 <Device::addChild(Device*)>
c0022d4c:	83 ec 1c             	sub    esp,0x1c
c0022d4f:	b9 09 00 00 00       	mov    ecx,0x9
c0022d54:	fc                   	cld    
c0022d55:	89 e7                	mov    edi,esp
c0022d57:	89 de                	mov    esi,ebx
c0022d59:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022d5b:	55                   	push   ebp
c0022d5c:	e8 bf 15 ff ff       	call   c0014320 <Device::preOpenPCI(PCIDeviceInfo)>
c0022d61:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022d64:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c0022d68:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c0022d70:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c0022d78:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022d80:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022d83:	83 c4 4c             	add    esp,0x4c
c0022d86:	5b                   	pop    ebx
c0022d87:	5e                   	pop    esi
c0022d88:	5f                   	pop    edi
c0022d89:	5d                   	pop    ebp
c0022d8a:	ff e0                	jmp    eax
c0022d8c:	83 ec 0c             	sub    esp,0xc
c0022d8f:	68 58 01 00 00       	push   0x158
c0022d94:	e8 aa ca fe ff       	call   c000f843 <malloc>
c0022d99:	89 c5                	mov    ebp,eax
c0022d9b:	58                   	pop    eax
c0022d9c:	5a                   	pop    edx
c0022d9d:	68 20 cb 02 c0       	push   0xc002cb20
c0022da2:	55                   	push   ebp
c0022da3:	e8 64 19 ff ff       	call   c001470c <DriverlessDevice::DriverlessDevice(char const*)>
c0022da8:	59                   	pop    ecx
c0022da9:	5f                   	pop    edi
c0022daa:	55                   	push   ebp
c0022dab:	56                   	push   esi
c0022dac:	e8 65 16 ff ff       	call   c0014416 <Device::addChild(Device*)>
c0022db1:	b9 09 00 00 00       	mov    ecx,0x9
c0022db6:	fc                   	cld    
c0022db7:	89 df                	mov    edi,ebx
c0022db9:	89 de                	mov    esi,ebx
c0022dbb:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022dbd:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022dc1:	83 c4 2c             	add    esp,0x2c
c0022dc4:	5b                   	pop    ebx
c0022dc5:	5e                   	pop    esi
c0022dc6:	5f                   	pop    edi
c0022dc7:	5d                   	pop    ebp
c0022dc8:	e9 53 15 ff ff       	jmp    c0014320 <Device::preOpenPCI(PCIDeviceInfo)>
c0022dcd:	83 c4 1c             	add    esp,0x1c
c0022dd0:	5b                   	pop    ebx
c0022dd1:	5e                   	pop    esi
c0022dd2:	5f                   	pop    edi
c0022dd3:	5d                   	pop    ebp
c0022dd4:	c3                   	ret    
c0022dd5:	90                   	nop

c0022dd6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022dd6:	55                   	push   ebp
c0022dd7:	57                   	push   edi
c0022dd8:	56                   	push   esi
c0022dd9:	53                   	push   ebx
c0022dda:	83 ec 5c             	sub    esp,0x5c
c0022ddd:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022de1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022de5:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022de9:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0022dee:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022df2:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022df6:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0022dfb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022dff:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022e04:	6a 0c                	push   0xc
c0022e06:	55                   	push   ebp
c0022e07:	53                   	push   ebx
c0022e08:	57                   	push   edi
c0022e09:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022e10:	e8 01 fc ff ff       	call   c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e15:	55                   	push   ebp
c0022e16:	53                   	push   ebx
c0022e17:	57                   	push   edi
c0022e18:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e1f:	e8 80 fc ff ff       	call   c0022aa4 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c0022e24:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c0022e29:	83 c4 24             	add    esp,0x24
c0022e2c:	55                   	push   ebp
c0022e2d:	53                   	push   ebx
c0022e2e:	57                   	push   edi
c0022e2f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022e33:	e8 f6 fc ff ff       	call   c0022b2e <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c0022e38:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0022e3c:	6a 3c                	push   0x3c
c0022e3e:	55                   	push   ebp
c0022e3f:	53                   	push   ebx
c0022e40:	57                   	push   edi
c0022e41:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0022e48:	e8 c9 fb ff ff       	call   c0022a16 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022e4d:	0f b6 c4             	movzx  eax,ah
c0022e50:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022e54:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c0022e58:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c0022e5c:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0022e61:	83 c4 24             	add    esp,0x24
c0022e64:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0022e6a:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c0022e71:	74 6c                	je     c0022edf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e73:	31 f6                	xor    esi,esi
c0022e75:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c0022e7b:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022e81:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022e87:	7e 56                	jle    c0022edf <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022e89:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022e8c:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022e93:	39 cb                	cmp    ebx,ecx
c0022e95:	75 45                	jne    c0022edc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022e97:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022e9e:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022ea2:	75 38                	jne    c0022edc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022ea4:	83 ec 0c             	sub    esp,0xc
c0022ea7:	68 3a cb 02 c0       	push   0xc002cb3a
c0022eac:	e8 3e 01 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0022eb1:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c0022eb7:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022ebd:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022ec5:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022ec9:	52                   	push   edx
c0022eca:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022ece:	53                   	push   ebx
c0022ecf:	68 5f cb 02 c0       	push   0xc002cb5f
c0022ed4:	e8 16 01 ff ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0022ed9:	83 c4 20             	add    esp,0x20
c0022edc:	46                   	inc    esi
c0022edd:	eb 96                	jmp    c0022e75 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022edf:	31 d2                	xor    edx,edx
c0022ee1:	83 ec 0c             	sub    esp,0xc
c0022ee4:	55                   	push   ebp
c0022ee5:	53                   	push   ebx
c0022ee6:	57                   	push   edi
c0022ee7:	52                   	push   edx
c0022ee8:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022eec:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022ef3:	e8 7c fc ff ff       	call   c0022b74 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022ef8:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022efc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022f00:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022f04:	42                   	inc    edx
c0022f05:	83 c4 20             	add    esp,0x20
c0022f08:	83 fa 06             	cmp    edx,0x6
c0022f0b:	75 d4                	jne    c0022ee1 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022f0d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022f11:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022f15:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022f19:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022f1d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022f21:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022f25:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022f2a:	86 e0                	xchg   al,ah
c0022f2c:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022f31:	55                   	push   ebp
c0022f32:	53                   	push   ebx
c0022f33:	57                   	push   edi
c0022f34:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022f38:	e8 ab fb ff ff       	call   c0022ae8 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022f3d:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022f41:	55                   	push   ebp
c0022f42:	53                   	push   ebx
c0022f43:	57                   	push   edi
c0022f44:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022f4b:	e8 0e fb ff ff       	call   c0022a5e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022f50:	83 ec 0c             	sub    esp,0xc
c0022f53:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022f58:	b9 09 00 00 00       	mov    ecx,0x9
c0022f5d:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022f61:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022f65:	fc                   	cld    
c0022f66:	89 e7                	mov    edi,esp
c0022f68:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022f6a:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022f71:	e8 ee fc ff ff       	call   c0022c64 <PCI::foundDevice(PCIDeviceInfo)>
c0022f76:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022f7c:	5b                   	pop    ebx
c0022f7d:	5e                   	pop    esi
c0022f7e:	5f                   	pop    edi
c0022f7f:	5d                   	pop    ebp
c0022f80:	c3                   	ret    
c0022f81:	90                   	nop

c0022f82 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022f82:	55                   	push   ebp
c0022f83:	57                   	push   edi
c0022f84:	56                   	push   esi
c0022f85:	53                   	push   ebx
c0022f86:	83 ec 0c             	sub    esp,0xc
c0022f89:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022f8d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022f92:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022f97:	6a 00                	push   0x0
c0022f99:	56                   	push   esi
c0022f9a:	57                   	push   edi
c0022f9b:	55                   	push   ebp
c0022f9c:	e8 bd fa ff ff       	call   c0022a5e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fa1:	6a 00                	push   0x0
c0022fa3:	56                   	push   esi
c0022fa4:	57                   	push   edi
c0022fa5:	55                   	push   ebp
c0022fa6:	e8 2b fe ff ff       	call   c0022dd6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fab:	83 c4 20             	add    esp,0x20
c0022fae:	6a 00                	push   0x0
c0022fb0:	56                   	push   esi
c0022fb1:	57                   	push   edi
c0022fb2:	55                   	push   ebp
c0022fb3:	e8 c8 fa ff ff       	call   c0022a80 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022fb8:	83 c4 10             	add    esp,0x10
c0022fbb:	84 c0                	test   al,al
c0022fbd:	79 27                	jns    c0022fe6 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022fbf:	bb 01 00 00 00       	mov    ebx,0x1
c0022fc4:	53                   	push   ebx
c0022fc5:	56                   	push   esi
c0022fc6:	57                   	push   edi
c0022fc7:	55                   	push   ebp
c0022fc8:	e8 91 fa ff ff       	call   c0022a5e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022fcd:	83 c4 10             	add    esp,0x10
c0022fd0:	66 40                	inc    ax
c0022fd2:	74 0c                	je     c0022fe0 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022fd4:	53                   	push   ebx
c0022fd5:	56                   	push   esi
c0022fd6:	57                   	push   edi
c0022fd7:	55                   	push   ebp
c0022fd8:	e8 f9 fd ff ff       	call   c0022dd6 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022fdd:	83 c4 10             	add    esp,0x10
c0022fe0:	43                   	inc    ebx
c0022fe1:	83 fb 08             	cmp    ebx,0x8
c0022fe4:	75 de                	jne    c0022fc4 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022fe6:	83 c4 0c             	add    esp,0xc
c0022fe9:	5b                   	pop    ebx
c0022fea:	5e                   	pop    esi
c0022feb:	5f                   	pop    edi
c0022fec:	5d                   	pop    ebp
c0022fed:	c3                   	ret    

c0022fee <PCI::detect()>:
c0022fee:	56                   	push   esi
c0022fef:	53                   	push   ebx
c0022ff0:	53                   	push   ebx
c0022ff1:	31 db                	xor    ebx,ebx
c0022ff3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022ff7:	6a 00                	push   0x0
c0022ff9:	6a 00                	push   0x0
c0022ffb:	6a 00                	push   0x0
c0022ffd:	56                   	push   esi
c0022ffe:	e8 7d fa ff ff       	call   c0022a80 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023003:	83 c4 10             	add    esp,0x10
c0023006:	a8 80                	test   al,0x80
c0023008:	75 21                	jne    c002302b <PCI::detect()+0x3d>
c002300a:	51                   	push   ecx
c002300b:	51                   	push   ecx
c002300c:	6a 00                	push   0x0
c002300e:	56                   	push   esi
c002300f:	e8 2c fc ff ff       	call   c0022c40 <PCI::checkBus(unsigned char)>
c0023014:	83 c4 10             	add    esp,0x10
c0023017:	eb 24                	jmp    c002303d <PCI::detect()+0x4f>
c0023019:	52                   	push   edx
c002301a:	52                   	push   edx
c002301b:	53                   	push   ebx
c002301c:	43                   	inc    ebx
c002301d:	56                   	push   esi
c002301e:	e8 1d fc ff ff       	call   c0022c40 <PCI::checkBus(unsigned char)>
c0023023:	83 c4 10             	add    esp,0x10
c0023026:	83 fb 08             	cmp    ebx,0x8
c0023029:	74 12                	je     c002303d <PCI::detect()+0x4f>
c002302b:	53                   	push   ebx
c002302c:	6a 00                	push   0x0
c002302e:	6a 00                	push   0x0
c0023030:	56                   	push   esi
c0023031:	e8 28 fa ff ff       	call   c0022a5e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023036:	83 c4 10             	add    esp,0x10
c0023039:	66 40                	inc    ax
c002303b:	74 dc                	je     c0023019 <PCI::detect()+0x2b>
c002303d:	58                   	pop    eax
c002303e:	5b                   	pop    ebx
c002303f:	5e                   	pop    esi
c0023040:	c3                   	ret    
c0023041:	90                   	nop

c0023042 <IDE::close(int, int, void*)>:
c0023042:	83 c8 ff             	or     eax,0xffffffff
c0023045:	c3                   	ret    

c0023046 <IDE::IDE()>:
c0023046:	83 ec 0c             	sub    esp,0xc
c0023049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304d:	83 ec 08             	sub    esp,0x8
c0023050:	68 a8 cb 02 c0       	push   0xc002cba8
c0023055:	50                   	push   eax
c0023056:	e8 47 17 ff ff       	call   c00147a2 <HardDiskController::HardDiskController(char const*)>
c002305b:	83 c4 10             	add    esp,0x10
c002305e:	ba e8 cd 02 c0       	mov    edx,0xc002cde8
c0023063:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023067:	89 10                	mov    DWORD PTR [eax],edx
c0023069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002306d:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0023074:	90                   	nop
c0023075:	83 c4 0c             	add    esp,0xc
c0023078:	c3                   	ret    
c0023079:	90                   	nop

c002307a <IDE::prepareInterrupt(unsigned char)>:
c002307a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002307f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0023083:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c002308b:	c3                   	ret    

c002308c <selectDrive(unsigned char, unsigned char)>:
c002308c:	c3                   	ret    
c002308d:	90                   	nop

c002308e <IDE::getBase(unsigned char)>:
c002308e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0023093:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023097:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c002309f:	c3                   	ret    

c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00230a0:	55                   	push   ebp
c00230a1:	57                   	push   edi
c00230a2:	56                   	push   esi
c00230a3:	53                   	push   ebx
c00230a4:	83 ec 1c             	sub    esp,0x1c
c00230a7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00230ab:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00230af:	8d 4b f8             	lea    ecx,[ebx-0x8]
c00230b2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00230b6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00230ba:	80 f9 03             	cmp    cl,0x3
c00230bd:	77 51                	ja     c0023110 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c00230bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00230c3:	0f b6 f2             	movzx  esi,dl
c00230c6:	0f b6 db             	movzx  ebx,bl
c00230c9:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00230cc:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c00230d0:	83 ca 80             	or     edx,0xffffff80
c00230d3:	0f b6 d2             	movzx  edx,dl
c00230d6:	52                   	push   edx
c00230d7:	6a 0c                	push   0xc
c00230d9:	56                   	push   esi
c00230da:	57                   	push   edi
c00230db:	e8 c0 ff ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00230e0:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c00230e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00230e9:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c00230ed:	ee                   	out    dx,al
c00230ee:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c00230f3:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c00230f7:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c00230fb:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00230ff:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023107:	83 c4 2c             	add    esp,0x2c
c002310a:	5b                   	pop    ebx
c002310b:	5e                   	pop    esi
c002310c:	5f                   	pop    edi
c002310d:	5d                   	pop    ebp
c002310e:	eb 90                	jmp    c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023110:	80 fb 07             	cmp    bl,0x7
c0023113:	77 12                	ja     c0023127 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0023115:	0f b6 d2             	movzx  edx,dl
c0023118:	0f b6 db             	movzx  ebx,bl
c002311b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023123:	89 da                	mov    edx,ebx
c0023125:	eb 2f                	jmp    c0023156 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023127:	80 fb 0d             	cmp    bl,0xd
c002312a:	77 13                	ja     c002313f <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c002312c:	0f b6 d2             	movzx  edx,dl
c002312f:	0f b6 db             	movzx  ebx,bl
c0023132:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0023139:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c002313d:	eb 17                	jmp    c0023156 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002313f:	80 fb 15             	cmp    bl,0x15
c0023142:	77 13                	ja     c0023157 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0023144:	0f b6 d2             	movzx  edx,dl
c0023147:	0f b6 db             	movzx  ebx,bl
c002314a:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0023152:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0023156:	ee                   	out    dx,al
c0023157:	83 c4 1c             	add    esp,0x1c
c002315a:	5b                   	pop    ebx
c002315b:	5e                   	pop    esi
c002315c:	5f                   	pop    edi
c002315d:	5d                   	pop    ebp
c002315e:	c3                   	ret    
c002315f:	90                   	nop

c0023160 <IDE::read(unsigned char, unsigned char)>:
c0023160:	55                   	push   ebp
c0023161:	57                   	push   edi
c0023162:	56                   	push   esi
c0023163:	53                   	push   ebx
c0023164:	83 ec 1c             	sub    esp,0x1c
c0023167:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002316b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002316f:	8d 43 f8             	lea    eax,[ebx-0x8]
c0023172:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0023176:	3c 03                	cmp    al,0x3
c0023178:	77 43                	ja     c00231bd <IDE::read(unsigned char, unsigned char)+0x5d>
c002317a:	0f b6 f2             	movzx  esi,dl
c002317d:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023180:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0023184:	83 c8 80             	or     eax,0xffffff80
c0023187:	0f b6 c0             	movzx  eax,al
c002318a:	50                   	push   eax
c002318b:	6a 0c                	push   0xc
c002318d:	56                   	push   esi
c002318e:	57                   	push   edi
c002318f:	e8 0c ff ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023194:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0023199:	0f b6 c3             	movzx  eax,bl
c002319c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00231a0:	ec                   	in     al,dx
c00231a1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00231a5:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c00231aa:	52                   	push   edx
c00231ab:	6a 0c                	push   0xc
c00231ad:	56                   	push   esi
c00231ae:	57                   	push   edi
c00231af:	e8 ec fe ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00231b4:	83 c4 20             	add    esp,0x20
c00231b7:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00231bb:	eb 49                	jmp    c0023206 <IDE::read(unsigned char, unsigned char)+0xa6>
c00231bd:	80 fb 07             	cmp    bl,0x7
c00231c0:	77 12                	ja     c00231d4 <IDE::read(unsigned char, unsigned char)+0x74>
c00231c2:	0f b6 d2             	movzx  edx,dl
c00231c5:	0f b6 c3             	movzx  eax,bl
c00231c8:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c00231d0:	89 c2                	mov    edx,eax
c00231d2:	eb 31                	jmp    c0023205 <IDE::read(unsigned char, unsigned char)+0xa5>
c00231d4:	80 fb 0d             	cmp    bl,0xd
c00231d7:	77 13                	ja     c00231ec <IDE::read(unsigned char, unsigned char)+0x8c>
c00231d9:	0f b6 d2             	movzx  edx,dl
c00231dc:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c00231e3:	0f b6 d3             	movzx  edx,bl
c00231e6:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c00231ea:	eb 19                	jmp    c0023205 <IDE::read(unsigned char, unsigned char)+0xa5>
c00231ec:	31 c0                	xor    eax,eax
c00231ee:	80 fb 15             	cmp    bl,0x15
c00231f1:	77 13                	ja     c0023206 <IDE::read(unsigned char, unsigned char)+0xa6>
c00231f3:	0f b6 d2             	movzx  edx,dl
c00231f6:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c00231fe:	0f b6 d3             	movzx  edx,bl
c0023201:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0023205:	ec                   	in     al,dx
c0023206:	83 c4 1c             	add    esp,0x1c
c0023209:	5b                   	pop    ebx
c002320a:	5e                   	pop    esi
c002320b:	5f                   	pop    edi
c002320c:	5d                   	pop    ebp
c002320d:	c3                   	ret    

c002320e <IDE::waitInterrupt(unsigned char)>:
c002320e:	55                   	push   ebp
c002320f:	57                   	push   edi
c0023210:	56                   	push   esi
c0023211:	53                   	push   ebx
c0023212:	31 db                	xor    ebx,ebx
c0023214:	83 ec 0c             	sub    esp,0xc
c0023217:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002321b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023220:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0023228:	89 e8                	mov    eax,ebp
c002322a:	84 c0                	test   al,al
c002322c:	75 34                	jne    c0023262 <IDE::waitInterrupt(unsigned char)+0x54>
c002322e:	52                   	push   edx
c002322f:	6a 0c                	push   0xc
c0023231:	56                   	push   esi
c0023232:	57                   	push   edi
c0023233:	e8 28 ff ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c0023238:	83 c4 10             	add    esp,0x10
c002323b:	a8 01                	test   al,0x1
c002323d:	75 2b                	jne    c002326a <IDE::waitInterrupt(unsigned char)+0x5c>
c002323f:	f6 c3 04             	test   bl,0x4
c0023242:	75 16                	jne    c002325a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023244:	83 fb 32             	cmp    ebx,0x32
c0023247:	7e 11                	jle    c002325a <IDE::waitInterrupt(unsigned char)+0x4c>
c0023249:	50                   	push   eax
c002324a:	50                   	push   eax
c002324b:	6a 00                	push   0x0
c002324d:	68 80 96 98 00       	push   0x989680
c0023252:	e8 8b b1 ff ff       	call   c001e3e2 <nanoSleep(unsigned long long)>
c0023257:	83 c4 10             	add    esp,0x10
c002325a:	83 fb 3c             	cmp    ebx,0x3c
c002325d:	74 0b                	je     c002326a <IDE::waitInterrupt(unsigned char)+0x5c>
c002325f:	43                   	inc    ebx
c0023260:	eb be                	jmp    c0023220 <IDE::waitInterrupt(unsigned char)+0x12>
c0023262:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c002326a:	83 c4 0c             	add    esp,0xc
c002326d:	89 e8                	mov    eax,ebp
c002326f:	5b                   	pop    ebx
c0023270:	5e                   	pop    esi
c0023271:	5f                   	pop    edi
c0023272:	5d                   	pop    ebp
c0023273:	c3                   	ret    

c0023274 <ideChannel0IRQHandler(regs*, void*)>:
c0023274:	83 ec 10             	sub    esp,0x10
c0023277:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002327b:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0023282:	6a 07                	push   0x7
c0023284:	6a 00                	push   0x0
c0023286:	50                   	push   eax
c0023287:	e8 d4 fe ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c002328c:	83 c4 1c             	add    esp,0x1c
c002328f:	c3                   	ret    

c0023290 <ideChannel1IRQHandler(regs*, void*)>:
c0023290:	83 ec 10             	sub    esp,0x10
c0023293:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023297:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c002329e:	6a 07                	push   0x7
c00232a0:	6a 01                	push   0x1
c00232a2:	50                   	push   eax
c00232a3:	e8 b8 fe ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c00232a8:	83 c4 1c             	add    esp,0x1c
c00232ab:	c3                   	ret    

c00232ac <IDE::enableIRQs(unsigned char, bool)>:
c00232ac:	57                   	push   edi
c00232ad:	56                   	push   esi
c00232ae:	be 04 00 00 00       	mov    esi,0x4
c00232b3:	53                   	push   ebx
c00232b4:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c00232b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00232bd:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c00232c2:	0f 94 c0             	sete   al
c00232c5:	d1 e0                	shl    eax,1
c00232c7:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c00232ce:	0f b6 c0             	movzx  eax,al
c00232d1:	50                   	push   eax
c00232d2:	6a 0c                	push   0xc
c00232d4:	57                   	push   edi
c00232d5:	53                   	push   ebx
c00232d6:	e8 c5 fd ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232db:	83 c4 10             	add    esp,0x10
c00232de:	50                   	push   eax
c00232df:	6a 0c                	push   0xc
c00232e1:	57                   	push   edi
c00232e2:	53                   	push   ebx
c00232e3:	e8 78 fe ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c00232e8:	83 c4 10             	add    esp,0x10
c00232eb:	4e                   	dec    esi
c00232ec:	75 f0                	jne    c00232de <IDE::enableIRQs(unsigned char, bool)+0x32>
c00232ee:	5b                   	pop    ebx
c00232ef:	5e                   	pop    esi
c00232f0:	5f                   	pop    edi
c00232f1:	c3                   	ret    

c00232f2 <IDE::open(int, int, void*)>:
c00232f2:	55                   	push   ebp
c00232f3:	57                   	push   edi
c00232f4:	56                   	push   esi
c00232f5:	53                   	push   ebx
c00232f6:	83 ec 1c             	sub    esp,0x1c
c00232f9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00232fd:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023306:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c002330f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023316:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c002331d:	0f 85 b0 02 00 00    	jne    c00235d3 <IDE::open(int, int, void*)+0x2e1>
c0023323:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023329:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c002332d:	83 e0 7f             	and    eax,0x7f
c0023330:	3c 05                	cmp    al,0x5
c0023332:	74 04                	je     c0023338 <IDE::open(int, int, void*)+0x46>
c0023334:	3c 0f                	cmp    al,0xf
c0023336:	75 32                	jne    c002336a <IDE::open(int, int, void*)+0x78>
c0023338:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c002333e:	83 e0 fc             	and    eax,0xfffffffc
c0023341:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023348:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c002334e:	83 e0 fc             	and    eax,0xfffffffc
c0023351:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023358:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c002335e:	83 e0 fc             	and    eax,0xfffffffc
c0023361:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023368:	eb 14                	jmp    c002337e <IDE::open(int, int, void*)+0x8c>
c002336a:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023374:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c002337e:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023385:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c002338c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023390:	89 c6                	mov    esi,eax
c0023392:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023397:	c1 e6 10             	shl    esi,0x10
c002339a:	89 e8                	mov    eax,ebp
c002339c:	89 fa                	mov    edx,edi
c002339e:	c1 e0 0b             	shl    eax,0xb
c00233a1:	09 f0                	or     eax,esi
c00233a3:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c00233aa:	c1 e6 08             	shl    esi,0x8
c00233ad:	09 c6                	or     esi,eax
c00233af:	89 f0                	mov    eax,esi
c00233b1:	0d 08 00 00 80       	or     eax,0x80000008
c00233b6:	ef                   	out    dx,eax
c00233b7:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c00233bc:	89 ca                	mov    edx,ecx
c00233be:	ed                   	in     eax,dx
c00233bf:	c1 e8 10             	shr    eax,0x10
c00233c2:	3d ff ff 00 00       	cmp    eax,0xffff
c00233c7:	0f 84 f5 00 00 00    	je     c00234c2 <IDE::open(int, int, void*)+0x1d0>
c00233cd:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c00233d3:	89 fa                	mov    edx,edi
c00233d5:	89 f0                	mov    eax,esi
c00233d7:	ef                   	out    dx,eax
c00233d8:	b0 fe                	mov    al,0xfe
c00233da:	89 ca                	mov    edx,ecx
c00233dc:	ee                   	out    dx,al
c00233dd:	89 f0                	mov    eax,esi
c00233df:	89 fa                	mov    edx,edi
c00233e1:	ef                   	out    dx,eax
c00233e2:	89 ca                	mov    edx,ecx
c00233e4:	ed                   	in     eax,dx
c00233e5:	3c fe                	cmp    al,0xfe
c00233e7:	0f 85 a9 00 00 00    	jne    c0023496 <IDE::open(int, int, void*)+0x1a4>
c00233ed:	8b 15 28 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e528
c00233f3:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c00233fa:	74 33                	je     c002342f <IDE::open(int, int, void*)+0x13d>
c00233fc:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023402:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023406:	40                   	inc    eax
c0023407:	83 ec 0c             	sub    esp,0xc
c002340a:	0f b6 c0             	movzx  eax,al
c002340d:	50                   	push   eax
c002340e:	55                   	push   ebp
c002340f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023413:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023419:	51                   	push   ecx
c002341a:	e8 d7 4e ff ff       	call   c00182f6 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c002341f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023424:	83 c4 1c             	add    esp,0x1c
c0023427:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c002342d:	eb 0a                	jmp    c0023439 <IDE::open(int, int, void*)+0x147>
c002342f:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023439:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023440:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023447:	c1 e1 10             	shl    ecx,0x10
c002344a:	c1 e0 08             	shl    eax,0x8
c002344d:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023452:	09 c1                	or     ecx,eax
c0023454:	89 fa                	mov    edx,edi
c0023456:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c002345d:	c1 e0 0b             	shl    eax,0xb
c0023460:	09 c1                	or     ecx,eax
c0023462:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023468:	89 c8                	mov    eax,ecx
c002346a:	ef                   	out    dx,eax
c002346b:	be fc 0c 00 00       	mov    esi,0xcfc
c0023470:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023476:	89 f2                	mov    edx,esi
c0023478:	ee                   	out    dx,al
c0023479:	89 c8                	mov    eax,ecx
c002347b:	89 fa                	mov    edx,edi
c002347d:	ef                   	out    dx,eax
c002347e:	89 f2                	mov    edx,esi
c0023480:	ed                   	in     eax,dx
c0023481:	0f b6 c0             	movzx  eax,al
c0023484:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002348a:	74 46                	je     c00234d2 <IDE::open(int, int, void*)+0x1e0>
c002348c:	83 ec 0c             	sub    esp,0xc
c002348f:	68 c0 cb 02 c0       	push   0xc002cbc0
c0023494:	eb 34                	jmp    c00234ca <IDE::open(int, int, void*)+0x1d8>
c0023496:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002349f:	75 17                	jne    c00234b8 <IDE::open(int, int, void*)+0x1c6>
c00234a1:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c00234a6:	74 07                	je     c00234af <IDE::open(int, int, void*)+0x1bd>
c00234a8:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c00234ad:	75 09                	jne    c00234b8 <IDE::open(int, int, void*)+0x1c6>
c00234af:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00234b6:	eb 1a                	jmp    c00234d2 <IDE::open(int, int, void*)+0x1e0>
c00234b8:	83 ec 0c             	sub    esp,0xc
c00234bb:	68 c8 cb 02 c0       	push   0xc002cbc8
c00234c0:	eb 08                	jmp    c00234ca <IDE::open(int, int, void*)+0x1d8>
c00234c2:	83 ec 0c             	sub    esp,0xc
c00234c5:	68 f9 cb 02 c0       	push   0xc002cbf9
c00234ca:	e8 ce 71 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c00234cf:	83 c4 10             	add    esp,0x10
c00234d2:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c00234d9:	79 1a                	jns    c00234f5 <IDE::open(int, int, void*)+0x203>
c00234db:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c00234e1:	83 e0 fc             	and    eax,0xfffffffc
c00234e4:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c00234eb:	83 c0 08             	add    eax,0x8
c00234ee:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c00234f5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00234fb:	89 c2                	mov    edx,eax
c00234fd:	83 e2 0f             	and    edx,0xf
c0023500:	66 83 fa 08          	cmp    dx,0x8
c0023504:	75 0a                	jne    c0023510 <IDE::open(int, int, void*)+0x21e>
c0023506:	83 e8 02             	sub    eax,0x2
c0023509:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023510:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023516:	89 c2                	mov    edx,eax
c0023518:	83 e2 0f             	and    edx,0xf
c002351b:	66 83 fa 08          	cmp    dx,0x8
c002351f:	75 0a                	jne    c002352b <IDE::open(int, int, void*)+0x239>
c0023521:	83 e8 02             	sub    eax,0x2
c0023524:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c002352b:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023532:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023539:	89 d0                	mov    eax,edx
c002353b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002353e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023542:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023546:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023549:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c002354e:	0f b6 c9             	movzx  ecx,cl
c0023551:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023558:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c002355b:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c002355f:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023563:	8d 50 02             	lea    edx,[eax+0x2]
c0023566:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c002356b:	0f b6 d2             	movzx  edx,dl
c002356e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023574:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023577:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c002357b:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c002357f:	8d 48 03             	lea    ecx,[eax+0x3]
c0023582:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023587:	0f b6 c9             	movzx  ecx,cl
c002358a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023590:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023593:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023597:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002359b:	8d 50 04             	lea    edx,[eax+0x4]
c002359e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c00235a4:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00235a9:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c00235b0:	66 85 f6             	test   si,si
c00235b3:	74 3e                	je     c00235f3 <IDE::open(int, int, void*)+0x301>
c00235b5:	0f b6 d2             	movzx  edx,dl
c00235b8:	83 c0 05             	add    eax,0x5
c00235bb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00235be:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00235c2:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c00235c6:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c00235cc:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00235d1:	eb 20                	jmp    c00235f3 <IDE::open(int, int, void*)+0x301>
c00235d3:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c00235dd:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c00235e7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c00235ee:	e9 02 ff ff ff       	jmp    c00234f5 <IDE::open(int, int, void*)+0x203>
c00235f3:	52                   	push   edx
c00235f4:	52                   	push   edx
c00235f5:	6a 00                	push   0x0
c00235f7:	53                   	push   ebx
c00235f8:	e8 7d fa ff ff       	call   c002307a <IDE::prepareInterrupt(unsigned char)>
c00235fd:	59                   	pop    ecx
c00235fe:	5e                   	pop    esi
c00235ff:	6a 01                	push   0x1
c0023601:	53                   	push   ebx
c0023602:	e8 73 fa ff ff       	call   c002307a <IDE::prepareInterrupt(unsigned char)>
c0023607:	83 c4 0c             	add    esp,0xc
c002360a:	6a 00                	push   0x0
c002360c:	6a 00                	push   0x0
c002360e:	53                   	push   ebx
c002360f:	e8 98 fc ff ff       	call   c00232ac <IDE::enableIRQs(unsigned char, bool)>
c0023614:	83 c4 0c             	add    esp,0xc
c0023617:	6a 00                	push   0x0
c0023619:	6a 01                	push   0x1
c002361b:	53                   	push   ebx
c002361c:	e8 8b fc ff ff       	call   c00232ac <IDE::enableIRQs(unsigned char, bool)>
c0023621:	83 c4 10             	add    esp,0x10
c0023624:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c002362b:	74 40                	je     c002366d <IDE::open(int, int, void*)+0x37b>
c002362d:	83 ec 0c             	sub    esp,0xc
c0023630:	68 23 cc 02 c0       	push   0xc002cc23
c0023635:	e8 b5 f9 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c002363a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002363d:	6a 01                	push   0x1
c002363f:	68 74 32 02 c0       	push   0xc0023274
c0023644:	6a 0e                	push   0xe
c0023646:	53                   	push   ebx
c0023647:	e8 4e 0d ff ff       	call   c001439a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c002364c:	83 c4 14             	add    esp,0x14
c002364f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023655:	53                   	push   ebx
c0023656:	6a 01                	push   0x1
c0023658:	68 90 32 02 c0       	push   0xc0023290
c002365d:	6a 0f                	push   0xf
c002365f:	53                   	push   ebx
c0023660:	e8 35 0d ff ff       	call   c001439a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023665:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c002366b:	eb 4a                	jmp    c00236b7 <IDE::open(int, int, void*)+0x3c5>
c002366d:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023677:	50                   	push   eax
c0023678:	6a 0f                	push   0xf
c002367a:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023680:	68 3f cc 02 c0       	push   0xc002cc3f
c0023685:	e8 65 f9 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c002368a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002368d:	6a 00                	push   0x0
c002368f:	68 74 32 02 c0       	push   0xc0023274
c0023694:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002369a:	53                   	push   ebx
c002369b:	e8 fa 0c ff ff       	call   c001439a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236a0:	83 c4 14             	add    esp,0x14
c00236a3:	53                   	push   ebx
c00236a4:	6a 00                	push   0x0
c00236a6:	68 90 32 02 c0       	push   0xc0023290
c00236ab:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00236b1:	53                   	push   ebx
c00236b2:	e8 e3 0c ff ff       	call   c001439a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00236b7:	8b 03                	mov    eax,DWORD PTR [ebx]
c00236b9:	83 c4 20             	add    esp,0x20
c00236bc:	83 ec 0c             	sub    esp,0xc
c00236bf:	53                   	push   ebx
c00236c0:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00236c3:	83 c4 0c             	add    esp,0xc
c00236c6:	6a 07                	push   0x7
c00236c8:	6a 00                	push   0x0
c00236ca:	53                   	push   ebx
c00236cb:	e8 90 fa ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c00236d0:	83 c4 0c             	add    esp,0xc
c00236d3:	6a 07                	push   0x7
c00236d5:	6a 01                	push   0x1
c00236d7:	53                   	push   ebx
c00236d8:	e8 83 fa ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c00236dd:	83 c4 0c             	add    esp,0xc
c00236e0:	6a 01                	push   0x1
c00236e2:	6a 00                	push   0x0
c00236e4:	53                   	push   ebx
c00236e5:	e8 c2 fb ff ff       	call   c00232ac <IDE::enableIRQs(unsigned char, bool)>
c00236ea:	83 c4 0c             	add    esp,0xc
c00236ed:	6a 01                	push   0x1
c00236ef:	6a 01                	push   0x1
c00236f1:	53                   	push   ebx
c00236f2:	e8 b5 fb ff ff       	call   c00232ac <IDE::enableIRQs(unsigned char, bool)>
c00236f7:	83 c4 2c             	add    esp,0x2c
c00236fa:	31 c0                	xor    eax,eax
c00236fc:	5b                   	pop    ebx
c00236fd:	5e                   	pop    esi
c00236fe:	5f                   	pop    edi
c00236ff:	5d                   	pop    ebp
c0023700:	c3                   	ret    
c0023701:	90                   	nop

c0023702 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023702:	55                   	push   ebp
c0023703:	57                   	push   edi
c0023704:	56                   	push   esi
c0023705:	53                   	push   ebx
c0023706:	83 ec 1c             	sub    esp,0x1c
c0023709:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002370d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023711:	8d 50 f8             	lea    edx,[eax-0x8]
c0023714:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023718:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002371c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023720:	80 fa 03             	cmp    dl,0x3
c0023723:	77 5d                	ja     c0023782 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023725:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023729:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002372d:	0f b6 db             	movzx  ebx,bl
c0023730:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023733:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023737:	83 ca 80             	or     edx,0xffffff80
c002373a:	0f b6 d2             	movzx  edx,dl
c002373d:	52                   	push   edx
c002373e:	6a 0c                	push   0xc
c0023740:	53                   	push   ebx
c0023741:	56                   	push   esi
c0023742:	e8 59 f9 ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023747:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c002374c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023750:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023754:	0f b6 c0             	movzx  eax,al
c0023757:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c002375b:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c002375d:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023762:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023766:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c002376a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002376e:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023776:	83 c4 2c             	add    esp,0x2c
c0023779:	5b                   	pop    ebx
c002377a:	5e                   	pop    esi
c002377b:	5f                   	pop    edi
c002377c:	5d                   	pop    ebp
c002377d:	e9 1e f9 ff ff       	jmp    c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023782:	3c 07                	cmp    al,0x7
c0023784:	77 10                	ja     c0023796 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023786:	0f b6 db             	movzx  ebx,bl
c0023789:	0f b6 d0             	movzx  edx,al
c002378c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023794:	eb 2d                	jmp    c00237c3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023796:	3c 0d                	cmp    al,0xd
c0023798:	77 13                	ja     c00237ad <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002379a:	0f b6 db             	movzx  ebx,bl
c002379d:	0f b6 c0             	movzx  eax,al
c00237a0:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00237a7:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00237ab:	eb 16                	jmp    c00237c3 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00237ad:	3c 15                	cmp    al,0x15
c00237af:	77 14                	ja     c00237c5 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00237b1:	0f b6 db             	movzx  ebx,bl
c00237b4:	0f b6 c0             	movzx  eax,al
c00237b7:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00237bf:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00237c3:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00237c5:	83 c4 1c             	add    esp,0x1c
c00237c8:	5b                   	pop    ebx
c00237c9:	5e                   	pop    esi
c00237ca:	5f                   	pop    edi
c00237cb:	5d                   	pop    ebp
c00237cc:	c3                   	ret    
c00237cd:	90                   	nop

c00237ce <IDE::detect()>:
c00237ce:	55                   	push   ebp
c00237cf:	57                   	push   edi
c00237d0:	56                   	push   esi
c00237d1:	53                   	push   ebx
c00237d2:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00237d8:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00237df:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c00237e6:	0f 85 be 02 00 00    	jne    c0023aaa <IDE::detect()+0x2dc>
c00237ec:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c00237f3:	31 f6                	xor    esi,esi
c00237f5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00237fd:	31 ed                	xor    ebp,ebp
c00237ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023803:	c1 e0 06             	shl    eax,0x6
c0023806:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002380e:	89 e8                	mov    eax,ebp
c0023810:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023814:	c1 e0 04             	shl    eax,0x4
c0023817:	83 c8 a0             	or     eax,0xffffffa0
c002381a:	0f b6 c0             	movzx  eax,al
c002381d:	50                   	push   eax
c002381e:	6a 06                	push   0x6
c0023820:	56                   	push   esi
c0023821:	53                   	push   ebx
c0023822:	e8 79 f8 ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023827:	83 c4 0c             	add    esp,0xc
c002382a:	6a 0c                	push   0xc
c002382c:	56                   	push   esi
c002382d:	53                   	push   ebx
c002382e:	e8 2d f9 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c0023833:	83 c4 0c             	add    esp,0xc
c0023836:	6a 0c                	push   0xc
c0023838:	56                   	push   esi
c0023839:	53                   	push   ebx
c002383a:	e8 21 f9 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c002383f:	83 c4 0c             	add    esp,0xc
c0023842:	6a 0c                	push   0xc
c0023844:	56                   	push   esi
c0023845:	53                   	push   ebx
c0023846:	e8 15 f9 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c002384b:	83 c4 0c             	add    esp,0xc
c002384e:	6a 0c                	push   0xc
c0023850:	56                   	push   esi
c0023851:	53                   	push   ebx
c0023852:	e8 09 f9 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c0023857:	68 ec 00 00 00       	push   0xec
c002385c:	6a 07                	push   0x7
c002385e:	56                   	push   esi
c002385f:	53                   	push   ebx
c0023860:	e8 3b f8 ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023865:	83 c4 1c             	add    esp,0x1c
c0023868:	6a 0c                	push   0xc
c002386a:	56                   	push   esi
c002386b:	53                   	push   ebx
c002386c:	e8 ef f8 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c0023871:	83 c4 0c             	add    esp,0xc
c0023874:	6a 0c                	push   0xc
c0023876:	56                   	push   esi
c0023877:	53                   	push   ebx
c0023878:	e8 e3 f8 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c002387d:	83 c4 0c             	add    esp,0xc
c0023880:	6a 0c                	push   0xc
c0023882:	56                   	push   esi
c0023883:	53                   	push   ebx
c0023884:	e8 d7 f8 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c0023889:	83 c4 0c             	add    esp,0xc
c002388c:	6a 0c                	push   0xc
c002388e:	56                   	push   esi
c002388f:	53                   	push   ebx
c0023890:	e8 cb f8 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c0023895:	83 c4 0c             	add    esp,0xc
c0023898:	6a 0c                	push   0xc
c002389a:	56                   	push   esi
c002389b:	53                   	push   ebx
c002389c:	e8 bf f8 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c00238a1:	83 c4 10             	add    esp,0x10
c00238a4:	84 c0                	test   al,al
c00238a6:	0f 84 8b 01 00 00    	je     c0023a37 <IDE::detect()+0x269>
c00238ac:	31 ff                	xor    edi,edi
c00238ae:	50                   	push   eax
c00238af:	6a 0c                	push   0xc
c00238b1:	56                   	push   esi
c00238b2:	53                   	push   ebx
c00238b3:	e8 a8 f8 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c00238b8:	83 c4 10             	add    esp,0x10
c00238bb:	a8 01                	test   al,0x1
c00238bd:	0f 85 8e 01 00 00    	jne    c0023a51 <IDE::detect()+0x283>
c00238c3:	84 c0                	test   al,al
c00238c5:	78 04                	js     c00238cb <IDE::detect()+0xfd>
c00238c7:	a8 08                	test   al,0x8
c00238c9:	75 27                	jne    c00238f2 <IDE::detect()+0x124>
c00238cb:	47                   	inc    edi
c00238cc:	81 ff 17 01 00 00    	cmp    edi,0x117
c00238d2:	7e da                	jle    c00238ae <IDE::detect()+0xe0>
c00238d4:	50                   	push   eax
c00238d5:	50                   	push   eax
c00238d6:	6a 00                	push   0x0
c00238d8:	68 40 4b 4c 00       	push   0x4c4b40
c00238dd:	e8 00 ab ff ff       	call   c001e3e2 <nanoSleep(unsigned long long)>
c00238e2:	83 c4 10             	add    esp,0x10
c00238e5:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c00238eb:	75 c1                	jne    c00238ae <IDE::detect()+0xe0>
c00238ed:	e9 5f 01 00 00       	jmp    c0023a51 <IDE::detect()+0x283>
c00238f2:	31 c9                	xor    ecx,ecx
c00238f4:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00238f8:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00238fc:	83 ec 0c             	sub    esp,0xc
c00238ff:	68 80 00 00 00       	push   0x80
c0023904:	57                   	push   edi
c0023905:	6a 00                	push   0x0
c0023907:	56                   	push   esi
c0023908:	53                   	push   ebx
c0023909:	e8 f4 fd ff ff       	call   c0023702 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002390e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023913:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023917:	89 d1                	mov    ecx,edx
c0023919:	c1 e0 06             	shl    eax,0x6
c002391c:	01 d8                	add    eax,ebx
c002391e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c0023925:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c002392c:	89 f2                	mov    edx,esi
c002392e:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c0023934:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c0023938:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c002393e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0023942:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c0023949:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0023951:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c0023958:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0023960:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c0023966:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c002396d:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0023973:	8d 54 24 58          	lea    edx,[esp+0x58]
c0023977:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c002397b:	83 c4 20             	add    esp,0x20
c002397e:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023981:	83 c0 02             	add    eax,0x2
c0023984:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002398a:	83 c7 02             	add    edi,0x2
c002398d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023990:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023996:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002399a:	75 e2                	jne    c002397e <IDE::detect()+0x1b0>
c002399c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00239a0:	c1 e0 06             	shl    eax,0x6
c00239a3:	01 d8                	add    eax,ebx
c00239a5:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00239ab:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00239b2:	66 c1 ea 09          	shr    dx,0x9
c00239b6:	83 e2 01             	and    edx,0x1
c00239b9:	84 c9                	test   cl,cl
c00239bb:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00239c1:	75 2f                	jne    c00239f2 <IDE::detect()+0x224>
c00239c3:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c00239c9:	85 c0                	test   eax,eax
c00239cb:	74 66                	je     c0023a33 <IDE::detect()+0x265>
c00239cd:	50                   	push   eax
c00239ce:	55                   	push   ebp
c00239cf:	56                   	push   esi
c00239d0:	68 5b cc 02 c0       	push   0xc002cc5b
c00239d5:	e8 15 f6 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00239da:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00239e1:	e8 5d be fe ff       	call   c000f843 <malloc>
c00239e6:	89 c7                	mov    edi,eax
c00239e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00239eb:	e8 78 06 00 00       	call   c0024068 <ATA::ATA()>
c00239f0:	eb 28                	jmp    c0023a1a <IDE::detect()+0x24c>
c00239f2:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c00239f8:	55                   	push   ebp
c00239f9:	56                   	push   esi
c00239fa:	68 8a cc 02 c0       	push   0xc002cc8a
c00239ff:	e8 eb f5 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023a04:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023a0b:	e8 33 be fe ff       	call   c000f843 <malloc>
c0023a10:	89 c7                	mov    edi,eax
c0023a12:	89 04 24             	mov    DWORD PTR [esp],eax
c0023a15:	e8 8e 0c 00 00       	call   c00246a8 <ATAPI::ATAPI()>
c0023a1a:	5a                   	pop    edx
c0023a1b:	59                   	pop    ecx
c0023a1c:	57                   	push   edi
c0023a1d:	53                   	push   ebx
c0023a1e:	e8 f3 09 ff ff       	call   c0014416 <Device::addChild(Device*)>
c0023a23:	8b 07                	mov    eax,DWORD PTR [edi]
c0023a25:	53                   	push   ebx
c0023a26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023a2a:	6a 00                	push   0x0
c0023a2c:	57                   	push   edi
c0023a2d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023a30:	83 c4 20             	add    esp,0x20
c0023a33:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0023a37:	4d                   	dec    ebp
c0023a38:	74 0a                	je     c0023a44 <IDE::detect()+0x276>
c0023a3a:	bd 01 00 00 00       	mov    ebp,0x1
c0023a3f:	e9 bb fd ff ff       	jmp    c00237ff <IDE::detect()+0x31>
c0023a44:	4e                   	dec    esi
c0023a45:	74 63                	je     c0023aaa <IDE::detect()+0x2dc>
c0023a47:	be 01 00 00 00       	mov    esi,0x1
c0023a4c:	e9 ac fd ff ff       	jmp    c00237fd <IDE::detect()+0x2f>
c0023a51:	50                   	push   eax
c0023a52:	6a 04                	push   0x4
c0023a54:	56                   	push   esi
c0023a55:	53                   	push   ebx
c0023a56:	e8 05 f7 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c0023a5b:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0023a5f:	83 c4 0c             	add    esp,0xc
c0023a62:	6a 05                	push   0x5
c0023a64:	56                   	push   esi
c0023a65:	53                   	push   ebx
c0023a66:	e8 f5 f6 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c0023a6b:	83 c4 10             	add    esp,0x10
c0023a6e:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0023a72:	80 fa 14             	cmp    dl,0x14
c0023a75:	75 04                	jne    c0023a7b <IDE::detect()+0x2ad>
c0023a77:	3c eb                	cmp    al,0xeb
c0023a79:	eb 07                	jmp    c0023a82 <IDE::detect()+0x2b4>
c0023a7b:	3c 96                	cmp    al,0x96
c0023a7d:	75 b8                	jne    c0023a37 <IDE::detect()+0x269>
c0023a7f:	80 fa 69             	cmp    dl,0x69
c0023a82:	75 b3                	jne    c0023a37 <IDE::detect()+0x269>
c0023a84:	68 a1 00 00 00       	push   0xa1
c0023a89:	6a 07                	push   0x7
c0023a8b:	56                   	push   esi
c0023a8c:	53                   	push   ebx
c0023a8d:	e8 0e f6 ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a92:	5f                   	pop    edi
c0023a93:	58                   	pop    eax
c0023a94:	6a 00                	push   0x0
c0023a96:	68 40 42 0f 00       	push   0xf4240
c0023a9b:	e8 42 a9 ff ff       	call   c001e3e2 <nanoSleep(unsigned long long)>
c0023aa0:	83 c4 10             	add    esp,0x10
c0023aa3:	b1 01                	mov    cl,0x1
c0023aa5:	e9 4a fe ff ff       	jmp    c00238f4 <IDE::detect()+0x126>
c0023aaa:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023ab0:	5b                   	pop    ebx
c0023ab1:	5e                   	pop    esi
c0023ab2:	5f                   	pop    edi
c0023ab3:	5d                   	pop    ebp
c0023ab4:	c3                   	ret    
c0023ab5:	90                   	nop

c0023ab6 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023ab6:	55                   	push   ebp
c0023ab7:	57                   	push   edi
c0023ab8:	56                   	push   esi
c0023ab9:	53                   	push   ebx
c0023aba:	83 ec 1c             	sub    esp,0x1c
c0023abd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023ac1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023ac5:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023ac9:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0023acd:	88 c3                	mov    bl,al
c0023acf:	84 c0                	test   al,al
c0023ad1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023ad5:	0f 84 67 01 00 00    	je     c0023c42 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0023adb:	83 ec 0c             	sub    esp,0xc
c0023ade:	68 bb cc 02 c0       	push   0xc002ccbb
c0023ae3:	e8 07 f5 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023ae8:	83 c4 10             	add    esp,0x10
c0023aeb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023aef:	3c 01                	cmp    al,0x1
c0023af1:	75 17                	jne    c0023b0a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023af3:	83 ec 0c             	sub    esp,0xc
c0023af6:	b3 13                	mov    bl,0x13
c0023af8:	68 c7 cc 02 c0       	push   0xc002ccc7
c0023afd:	e8 ed f4 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023b02:	83 c4 10             	add    esp,0x10
c0023b05:	e9 25 01 00 00       	jmp    c0023c2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023b0a:	3c 02                	cmp    al,0x2
c0023b0c:	0f 85 ef 00 00 00    	jne    c0023c01 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023b12:	d1 e6                	shl    esi,1
c0023b14:	09 ee                	or     esi,ebp
c0023b16:	52                   	push   edx
c0023b17:	89 f0                	mov    eax,esi
c0023b19:	6a 01                	push   0x1
c0023b1b:	0f b6 f0             	movzx  esi,al
c0023b1e:	c1 e6 06             	shl    esi,0x6
c0023b21:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0023b29:	50                   	push   eax
c0023b2a:	57                   	push   edi
c0023b2b:	e8 30 f6 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c0023b30:	83 c4 10             	add    esp,0x10
c0023b33:	89 c6                	mov    esi,eax
c0023b35:	a8 01                	test   al,0x1
c0023b37:	74 12                	je     c0023b4b <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c0023b39:	83 ec 0c             	sub    esp,0xc
c0023b3c:	b3 07                	mov    bl,0x7
c0023b3e:	68 dc cc 02 c0       	push   0xc002ccdc
c0023b43:	e8 a7 f4 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023b48:	83 c4 10             	add    esp,0x10
c0023b4b:	f7 c6 02 00 00 00    	test   esi,0x2
c0023b51:	74 12                	je     c0023b65 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c0023b53:	83 ec 0c             	sub    esp,0xc
c0023b56:	b3 03                	mov    bl,0x3
c0023b58:	68 fa cc 02 c0       	push   0xc002ccfa
c0023b5d:	e8 8d f4 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023b62:	83 c4 10             	add    esp,0x10
c0023b65:	f7 c6 04 00 00 00    	test   esi,0x4
c0023b6b:	74 12                	je     c0023b7f <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c0023b6d:	83 ec 0c             	sub    esp,0xc
c0023b70:	b3 14                	mov    bl,0x14
c0023b72:	68 1a cd 02 c0       	push   0xc002cd1a
c0023b77:	e8 73 f4 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023b7c:	83 c4 10             	add    esp,0x10
c0023b7f:	f7 c6 08 00 00 00    	test   esi,0x8
c0023b85:	74 12                	je     c0023b99 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023b87:	83 ec 0c             	sub    esp,0xc
c0023b8a:	b3 03                	mov    bl,0x3
c0023b8c:	68 fa cc 02 c0       	push   0xc002ccfa
c0023b91:	e8 59 f4 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023b96:	83 c4 10             	add    esp,0x10
c0023b99:	f7 c6 10 00 00 00    	test   esi,0x10
c0023b9f:	74 12                	je     c0023bb3 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023ba1:	83 ec 0c             	sub    esp,0xc
c0023ba4:	b3 15                	mov    bl,0x15
c0023ba6:	68 32 cd 02 c0       	push   0xc002cd32
c0023bab:	e8 3f f4 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023bb0:	83 c4 10             	add    esp,0x10
c0023bb3:	f7 c6 20 00 00 00    	test   esi,0x20
c0023bb9:	74 12                	je     c0023bcd <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0023bbb:	83 ec 0c             	sub    esp,0xc
c0023bbe:	b3 03                	mov    bl,0x3
c0023bc0:	68 fa cc 02 c0       	push   0xc002ccfa
c0023bc5:	e8 25 f4 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023bca:	83 c4 10             	add    esp,0x10
c0023bcd:	f7 c6 40 00 00 00    	test   esi,0x40
c0023bd3:	74 12                	je     c0023be7 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023bd5:	83 ec 0c             	sub    esp,0xc
c0023bd8:	b3 16                	mov    bl,0x16
c0023bda:	68 4c cd 02 c0       	push   0xc002cd4c
c0023bdf:	e8 0b f4 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023be4:	83 c4 10             	add    esp,0x10
c0023be7:	89 f0                	mov    eax,esi
c0023be9:	84 c0                	test   al,al
c0023beb:	79 42                	jns    c0023c2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023bed:	83 ec 0c             	sub    esp,0xc
c0023bf0:	b3 0d                	mov    bl,0xd
c0023bf2:	68 6d cd 02 c0       	push   0xc002cd6d
c0023bf7:	e8 f3 f3 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023bfc:	83 c4 10             	add    esp,0x10
c0023bff:	eb 2e                	jmp    c0023c2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c01:	3c 03                	cmp    al,0x3
c0023c03:	75 14                	jne    c0023c19 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023c05:	83 ec 0c             	sub    esp,0xc
c0023c08:	b3 17                	mov    bl,0x17
c0023c0a:	68 81 cd 02 c0       	push   0xc002cd81
c0023c0f:	e8 db f3 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023c14:	83 c4 10             	add    esp,0x10
c0023c17:	eb 16                	jmp    c0023c2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c19:	3c 04                	cmp    al,0x4
c0023c1b:	75 12                	jne    c0023c2f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023c1d:	83 ec 0c             	sub    esp,0xc
c0023c20:	b3 08                	mov    bl,0x8
c0023c22:	68 97 cd 02 c0       	push   0xc002cd97
c0023c27:	e8 c3 f3 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023c2c:	83 c4 10             	add    esp,0x10
c0023c2f:	50                   	push   eax
c0023c30:	50                   	push   eax
c0023c31:	0f b6 c3             	movzx  eax,bl
c0023c34:	50                   	push   eax
c0023c35:	68 af cd 02 c0       	push   0xc002cdaf
c0023c3a:	e8 b0 f3 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023c3f:	83 c4 10             	add    esp,0x10
c0023c42:	83 c4 1c             	add    esp,0x1c
c0023c45:	88 d8                	mov    al,bl
c0023c47:	5b                   	pop    ebx
c0023c48:	5e                   	pop    esi
c0023c49:	5f                   	pop    edi
c0023c4a:	5d                   	pop    ebp
c0023c4b:	c3                   	ret    

c0023c4c <IDE::polling(unsigned char, unsigned int)>:
c0023c4c:	57                   	push   edi
c0023c4d:	56                   	push   esi
c0023c4e:	53                   	push   ebx
c0023c4f:	bb 04 00 00 00       	mov    ebx,0x4
c0023c54:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0023c58:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c0023c5d:	52                   	push   edx
c0023c5e:	6a 0c                	push   0xc
c0023c60:	56                   	push   esi
c0023c61:	57                   	push   edi
c0023c62:	e8 f9 f4 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c0023c67:	83 c4 10             	add    esp,0x10
c0023c6a:	4b                   	dec    ebx
c0023c6b:	75 f0                	jne    c0023c5d <IDE::polling(unsigned char, unsigned int)+0x11>
c0023c6d:	bb a0 86 01 00       	mov    ebx,0x186a0
c0023c72:	50                   	push   eax
c0023c73:	6a 0c                	push   0xc
c0023c75:	56                   	push   esi
c0023c76:	57                   	push   edi
c0023c77:	e8 e4 f4 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c0023c7c:	83 c4 10             	add    esp,0x10
c0023c7f:	a8 01                	test   al,0x1
c0023c81:	74 12                	je     c0023c95 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023c83:	83 ec 0c             	sub    esp,0xc
c0023c86:	68 c9 cd 02 c0       	push   0xc002cdc9
c0023c8b:	e8 5f f3 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023c90:	83 c4 10             	add    esp,0x10
c0023c93:	eb 17                	jmp    c0023cac <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c95:	a8 20                	test   al,0x20
c0023c97:	75 0f                	jne    c0023ca8 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023c99:	4b                   	dec    ebx
c0023c9a:	74 10                	je     c0023cac <IDE::polling(unsigned char, unsigned int)+0x60>
c0023c9c:	84 c0                	test   al,al
c0023c9e:	78 d2                	js     c0023c72 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ca0:	a8 08                	test   al,0x8
c0023ca2:	74 ce                	je     c0023c72 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023ca4:	31 c0                	xor    eax,eax
c0023ca6:	eb 06                	jmp    c0023cae <IDE::polling(unsigned char, unsigned int)+0x62>
c0023ca8:	b0 01                	mov    al,0x1
c0023caa:	eb 02                	jmp    c0023cae <IDE::polling(unsigned char, unsigned int)+0x62>
c0023cac:	b0 02                	mov    al,0x2
c0023cae:	5b                   	pop    ebx
c0023caf:	5e                   	pop    esi
c0023cb0:	5f                   	pop    edi
c0023cb1:	c3                   	ret    

c0023cb2 <SATABus::close(int, int, void*)>:
c0023cb2:	31 c0                	xor    eax,eax
c0023cb4:	c3                   	ret    
c0023cb5:	90                   	nop

c0023cb6 <SATABus::detect()>:
c0023cb6:	c3                   	ret    
c0023cb7:	90                   	nop

c0023cb8 <SATABus::SATABus()>:
c0023cb8:	83 ec 0c             	sub    esp,0xc
c0023cbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cbf:	83 ec 08             	sub    esp,0x8
c0023cc2:	68 0c ce 02 c0       	push   0xc002ce0c
c0023cc7:	50                   	push   eax
c0023cc8:	e8 d5 0a ff ff       	call   c00147a2 <HardDiskController::HardDiskController(char const*)>
c0023ccd:	83 c4 10             	add    esp,0x10
c0023cd0:	ba c8 ce 02 c0       	mov    edx,0xc002cec8
c0023cd5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cd9:	89 10                	mov    DWORD PTR [eax],edx
c0023cdb:	83 ec 0c             	sub    esp,0xc
c0023cde:	6a 50                	push   0x50
c0023ce0:	e8 21 c3 fe ff       	call   c0010006 <Phys::allocateContiguousPages(int)>
c0023ce5:	83 c4 10             	add    esp,0x10
c0023ce8:	89 c2                	mov    edx,eax
c0023cea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023cee:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023cf4:	83 ec 0c             	sub    esp,0xc
c0023cf7:	6a 50                	push   0x50
c0023cf9:	e8 81 de fe ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0023cfe:	83 c4 10             	add    esp,0x10
c0023d01:	89 c2                	mov    edx,eax
c0023d03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d07:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0023d0d:	e8 08 e1 fe ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0023d12:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d16:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0023d1c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023d20:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0023d26:	83 ec 0c             	sub    esp,0xc
c0023d29:	6a 03                	push   0x3
c0023d2b:	6a 50                	push   0x50
c0023d2d:	51                   	push   ecx
c0023d2e:	52                   	push   edx
c0023d2f:	50                   	push   eax
c0023d30:	e8 2b e9 fe ff       	call   c0012660 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0023d35:	83 c4 20             	add    esp,0x20
c0023d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d3c:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0023d42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d46:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0023d4c:	83 ec 04             	sub    esp,0x4
c0023d4f:	52                   	push   edx
c0023d50:	50                   	push   eax
c0023d51:	68 30 ce 02 c0       	push   0xc002ce30
c0023d56:	e8 94 f2 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023d5b:	83 c4 10             	add    esp,0x10
c0023d5e:	90                   	nop
c0023d5f:	83 c4 0c             	add    esp,0xc
c0023d62:	c3                   	ret    
c0023d63:	90                   	nop

c0023d64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0023d64:	83 ec 0c             	sub    esp,0xc
c0023d67:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0023d6b:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0023d6e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0023d71:	09 c2                	or     edx,eax
c0023d73:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023d77:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0023d7d:	8b 08                	mov    ecx,DWORD PTR [eax]
c0023d7f:	31 c0                	xor    eax,eax
c0023d81:	c1 e9 08             	shr    ecx,0x8
c0023d84:	83 e1 0f             	and    ecx,0xf
c0023d87:	39 c8                	cmp    eax,ecx
c0023d89:	74 0a                	je     c0023d95 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c0023d8b:	f6 c2 01             	test   dl,0x1
c0023d8e:	74 18                	je     c0023da8 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023d90:	d1 ea                	shr    edx,1
c0023d92:	40                   	inc    eax
c0023d93:	eb f2                	jmp    c0023d87 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023d95:	83 ec 0c             	sub    esp,0xc
c0023d98:	68 54 ce 02 c0       	push   0xc002ce54
c0023d9d:	e8 fb 68 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0023da2:	83 c4 10             	add    esp,0x10
c0023da5:	83 c8 ff             	or     eax,0xffffffff
c0023da8:	83 c4 0c             	add    esp,0xc
c0023dab:	c3                   	ret    

c0023dac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0023dac:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023db0:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023db3:	89 c2                	mov    edx,eax
c0023db5:	c1 ea 08             	shr    edx,0x8
c0023db8:	83 e2 0f             	and    edx,0xf
c0023dbb:	fe ca                	dec    dl
c0023dbd:	75 31                	jne    c0023df0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dbf:	83 e0 0f             	and    eax,0xf
c0023dc2:	3c 03                	cmp    al,0x3
c0023dc4:	75 2a                	jne    c0023df0 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023dc6:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023dc9:	b8 02 00 00 00       	mov    eax,0x2
c0023dce:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023dd4:	74 1c                	je     c0023df2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023dd6:	b8 04 00 00 00       	mov    eax,0x4
c0023ddb:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023de1:	74 0f                	je     c0023df2 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023de3:	31 c0                	xor    eax,eax
c0023de5:	83 fa 03             	cmp    edx,0x3
c0023de8:	0f 94 c0             	sete   al
c0023deb:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0023def:	c3                   	ret    
c0023df0:	31 c0                	xor    eax,eax
c0023df2:	c3                   	ret    
c0023df3:	90                   	nop

c0023df4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023df4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023df8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023dfb:	0f ba e2 0f          	bt     edx,0xf
c0023dff:	72 f7                	jb     c0023df8 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023e01:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e04:	83 ca 10             	or     edx,0x10
c0023e07:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e0a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e0d:	83 ca 01             	or     edx,0x1
c0023e10:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e13:	c3                   	ret    

c0023e14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023e14:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023e18:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e1b:	83 e2 fe             	and    edx,0xfffffffe
c0023e1e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e21:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e24:	83 e2 ef             	and    edx,0xffffffef
c0023e27:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023e2a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e2d:	0f ba e2 0e          	bt     edx,0xe
c0023e31:	72 f7                	jb     c0023e2a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e33:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023e36:	0f ba e2 0f          	bt     edx,0xf
c0023e3a:	72 ee                	jb     c0023e2a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0023e3c:	c3                   	ret    
c0023e3d:	90                   	nop

c0023e3e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0023e3e:	55                   	push   ebp
c0023e3f:	57                   	push   edi
c0023e40:	56                   	push   esi
c0023e41:	53                   	push   ebx
c0023e42:	83 ec 1c             	sub    esp,0x1c
c0023e45:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e49:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e4d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0023e51:	53                   	push   ebx
c0023e52:	89 fd                	mov    ebp,edi
c0023e54:	56                   	push   esi
c0023e55:	c1 e5 0a             	shl    ebp,0xa
c0023e58:	e8 b7 ff ff ff       	call   c0023e14 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c0023e5d:	83 ec 0c             	sub    esp,0xc
c0023e60:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0023e66:	01 e8                	add    eax,ebp
c0023e68:	89 03                	mov    DWORD PTR [ebx],eax
c0023e6a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e6c:	68 00 04 00 00       	push   0x400
c0023e71:	6a 00                	push   0x0
c0023e73:	50                   	push   eax
c0023e74:	e8 ff c8 fd ff       	call   c0000778 <memset>
c0023e79:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0023e7f:	89 fa                	mov    edx,edi
c0023e81:	01 e8                	add    eax,ebp
c0023e83:	c1 e7 0d             	shl    edi,0xd
c0023e86:	89 03                	mov    DWORD PTR [ebx],eax
c0023e88:	c1 e2 08             	shl    edx,0x8
c0023e8b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023e92:	81 c2 00 80 00 00    	add    edx,0x8000
c0023e98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023e9c:	89 d0                	mov    eax,edx
c0023e9e:	83 c4 1c             	add    esp,0x1c
c0023ea1:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ea7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023eaa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023ead:	68 00 01 00 00       	push   0x100
c0023eb2:	6a 00                	push   0x0
c0023eb4:	50                   	push   eax
c0023eb5:	e8 be c8 fd ff       	call   c0000778 <memset>
c0023eba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023ebe:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023ec4:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023eca:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023ece:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023ed1:	83 c4 10             	add    esp,0x10
c0023ed4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023edb:	31 ff                	xor    edi,edi
c0023edd:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023ee3:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023ee9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023eed:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023ef3:	83 c5 20             	add    ebp,0x20
c0023ef6:	01 f8                	add    eax,edi
c0023ef8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023efb:	52                   	push   edx
c0023efc:	68 00 01 00 00       	push   0x100
c0023f01:	6a 00                	push   0x0
c0023f03:	50                   	push   eax
c0023f04:	e8 6f c8 fd ff       	call   c0000778 <memset>
c0023f09:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023f0d:	83 c4 10             	add    esp,0x10
c0023f10:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023f16:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023f1d:	01 f8                	add    eax,edi
c0023f1f:	81 c7 00 01 00 00    	add    edi,0x100
c0023f25:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023f28:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023f2e:	75 b3                	jne    c0023ee3 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023f30:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023f34:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023f38:	83 c4 1c             	add    esp,0x1c
c0023f3b:	5b                   	pop    ebx
c0023f3c:	5e                   	pop    esi
c0023f3d:	5f                   	pop    edi
c0023f3e:	5d                   	pop    ebp
c0023f3f:	e9 b0 fe ff ff       	jmp    c0023df4 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023f44 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023f44:	55                   	push   ebp
c0023f45:	57                   	push   edi
c0023f46:	56                   	push   esi
c0023f47:	53                   	push   ebx
c0023f48:	31 db                	xor    ebx,ebx
c0023f4a:	83 ec 0c             	sub    esp,0xc
c0023f4d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023f51:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023f55:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023f58:	f7 c7 01 00 00 00    	test   edi,0x1
c0023f5e:	0f 84 aa 00 00 00    	je     c002400e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023f64:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023f68:	89 d8                	mov    eax,ebx
c0023f6a:	c1 e0 07             	shl    eax,0x7
c0023f6d:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023f74:	55                   	push   ebp
c0023f75:	56                   	push   esi
c0023f76:	e8 31 fe ff ff       	call   c0023dac <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023f7b:	5a                   	pop    edx
c0023f7c:	83 f8 01             	cmp    eax,0x1
c0023f7f:	59                   	pop    ecx
c0023f80:	75 30                	jne    c0023fb2 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023f82:	50                   	push   eax
c0023f83:	50                   	push   eax
c0023f84:	53                   	push   ebx
c0023f85:	68 79 ce 02 c0       	push   0xc002ce79
c0023f8a:	e8 60 f0 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023f8f:	83 c4 0c             	add    esp,0xc
c0023f92:	53                   	push   ebx
c0023f93:	55                   	push   ebp
c0023f94:	56                   	push   esi
c0023f95:	e8 a4 fe ff ff       	call   c0023e3e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023f9a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023fa1:	e8 9d b8 fe ff       	call   c000f843 <malloc>
c0023fa6:	89 c5                	mov    ebp,eax
c0023fa8:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fab:	e8 60 0d 00 00       	call   c0024d10 <SATA::SATA()>
c0023fb0:	eb 33                	jmp    c0023fe5 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023fb2:	83 f8 04             	cmp    eax,0x4
c0023fb5:	75 47                	jne    c0023ffe <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023fb7:	50                   	push   eax
c0023fb8:	50                   	push   eax
c0023fb9:	53                   	push   ebx
c0023fba:	68 90 ce 02 c0       	push   0xc002ce90
c0023fbf:	e8 2b f0 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0023fc4:	83 c4 0c             	add    esp,0xc
c0023fc7:	53                   	push   ebx
c0023fc8:	55                   	push   ebp
c0023fc9:	56                   	push   esi
c0023fca:	e8 6f fe ff ff       	call   c0023e3e <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023fcf:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023fd6:	e8 68 b8 fe ff       	call   c000f843 <malloc>
c0023fdb:	89 c5                	mov    ebp,eax
c0023fdd:	89 04 24             	mov    DWORD PTR [esp],eax
c0023fe0:	e8 d7 10 00 00       	call   c00250bc <SATAPI::SATAPI()>
c0023fe5:	5a                   	pop    edx
c0023fe6:	59                   	pop    ecx
c0023fe7:	55                   	push   ebp
c0023fe8:	56                   	push   esi
c0023fe9:	e8 28 04 ff ff       	call   c0014416 <Device::addChild(Device*)>
c0023fee:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023ff1:	56                   	push   esi
c0023ff2:	6a 00                	push   0x0
c0023ff4:	53                   	push   ebx
c0023ff5:	55                   	push   ebp
c0023ff6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023ff9:	83 c4 20             	add    esp,0x20
c0023ffc:	eb 10                	jmp    c002400e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ffe:	50                   	push   eax
c0023fff:	50                   	push   eax
c0024000:	53                   	push   ebx
c0024001:	68 a9 ce 02 c0       	push   0xc002cea9
c0024006:	e8 e4 ef fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c002400b:	83 c4 10             	add    esp,0x10
c002400e:	d1 ef                	shr    edi,1
c0024010:	43                   	inc    ebx
c0024011:	83 fb 20             	cmp    ebx,0x20
c0024014:	0f 85 3e ff ff ff    	jne    c0023f58 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c002401a:	83 c4 0c             	add    esp,0xc
c002401d:	5b                   	pop    ebx
c002401e:	5e                   	pop    esi
c002401f:	5f                   	pop    edi
c0024020:	5d                   	pop    ebp
c0024021:	c3                   	ret    

c0024022 <SATABus::open(int, int, void*)>:
c0024022:	83 ec 14             	sub    esp,0x14
c0024025:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024029:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c002402f:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0024035:	52                   	push   edx
c0024036:	50                   	push   eax
c0024037:	e8 08 ff ff ff       	call   c0023f44 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c002403c:	31 c0                	xor    eax,eax
c002403e:	83 c4 1c             	add    esp,0x1c
c0024041:	c3                   	ret    

c0024042 <ATA::close(int, int, void*)>:
c0024042:	83 ec 0c             	sub    esp,0xc
c0024045:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024049:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002404f:	85 c0                	test   eax,eax
c0024051:	74 0c                	je     c002405f <ATA::close(int, int, void*)+0x1d>
c0024053:	83 ec 0c             	sub    esp,0xc
c0024056:	8b 10                	mov    edx,DWORD PTR [eax]
c0024058:	50                   	push   eax
c0024059:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002405c:	83 c4 10             	add    esp,0x10
c002405f:	31 c0                	xor    eax,eax
c0024061:	83 c4 0c             	add    esp,0xc
c0024064:	c3                   	ret    
c0024065:	90                   	nop

c0024066 <ATA::powerSaving(PowerSavingLevel)>:
c0024066:	c3                   	ret    
c0024067:	90                   	nop

c0024068 <ATA::ATA()>:
c0024068:	83 ec 0c             	sub    esp,0xc
c002406b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002406f:	83 ec 04             	sub    esp,0x4
c0024072:	68 00 02 00 00       	push   0x200
c0024077:	68 91 cf 02 c0       	push   0xc002cf91
c002407c:	50                   	push   eax
c002407d:	e8 b8 07 ff ff       	call   c001483a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024082:	83 c4 10             	add    esp,0x10
c0024085:	ba 14 cf 02 c0       	mov    edx,0xc002cf14
c002408a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002408e:	89 10                	mov    DWORD PTR [eax],edx
c0024090:	90                   	nop
c0024091:	83 c4 0c             	add    esp,0xc
c0024094:	c3                   	ret    
c0024095:	90                   	nop

c0024096 <ATA::flush(bool)>:
c0024096:	53                   	push   ebx
c0024097:	83 ec 08             	sub    esp,0x8
c002409a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c002409f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00240a3:	19 c0                	sbb    eax,eax
c00240a5:	83 e0 fd             	and    eax,0xfffffffd
c00240a8:	05 ea 00 00 00       	add    eax,0xea
c00240ad:	50                   	push   eax
c00240ae:	6a 07                	push   0x7
c00240b0:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240b7:	50                   	push   eax
c00240b8:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240be:	e8 dd ef ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00240c3:	83 c4 0c             	add    esp,0xc
c00240c6:	6a 00                	push   0x0
c00240c8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00240cf:	50                   	push   eax
c00240d0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00240d6:	e8 71 fb ff ff       	call   c0023c4c <IDE::polling(unsigned char, unsigned int)>
c00240db:	83 c4 18             	add    esp,0x18
c00240de:	5b                   	pop    ebx
c00240df:	c3                   	ret    

c00240e0 <ATA::readyForCommand()>:
c00240e0:	56                   	push   esi
c00240e1:	53                   	push   ebx
c00240e2:	31 db                	xor    ebx,ebx
c00240e4:	50                   	push   eax
c00240e5:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00240e9:	50                   	push   eax
c00240ea:	6a 0c                	push   0xc
c00240ec:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00240f3:	50                   	push   eax
c00240f4:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00240fa:	e8 61 f0 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c00240ff:	83 c4 10             	add    esp,0x10
c0024102:	a8 88                	test   al,0x88
c0024104:	74 23                	je     c0024129 <ATA::readyForCommand()+0x49>
c0024106:	43                   	inc    ebx
c0024107:	83 fb 63             	cmp    ebx,0x63
c002410a:	7e dd                	jle    c00240e9 <ATA::readyForCommand()+0x9>
c002410c:	51                   	push   ecx
c002410d:	51                   	push   ecx
c002410e:	6a 00                	push   0x0
c0024110:	68 40 42 0f 00       	push   0xf4240
c0024115:	e8 c8 a2 ff ff       	call   c001e3e2 <nanoSleep(unsigned long long)>
c002411a:	83 c4 10             	add    esp,0x10
c002411d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024123:	75 c4                	jne    c00240e9 <ATA::readyForCommand()+0x9>
c0024125:	31 c0                	xor    eax,eax
c0024127:	eb 02                	jmp    c002412b <ATA::readyForCommand()+0x4b>
c0024129:	b0 01                	mov    al,0x1
c002412b:	5a                   	pop    edx
c002412c:	5b                   	pop    ebx
c002412d:	5e                   	pop    esi
c002412e:	c3                   	ret    
c002412f:	90                   	nop

c0024130 <ATA::access(unsigned long long, int, void*, bool)>:
c0024130:	55                   	push   ebp
c0024131:	57                   	push   edi
c0024132:	56                   	push   esi
c0024133:	53                   	push   ebx
c0024134:	83 ec 2c             	sub    esp,0x2c
c0024137:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002413b:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c002413f:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024143:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0024147:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c002414b:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c002414f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024153:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0024159:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002415d:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024163:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024167:	c1 e0 06             	shl    eax,0x6
c002416a:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0024172:	74 5d                	je     c00241d1 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0024174:	89 fa                	mov    edx,edi
c0024176:	89 f0                	mov    eax,esi
c0024178:	0f ac d0 1c          	shrd   eax,edx,0x1c
c002417c:	c1 ea 1c             	shr    edx,0x1c
c002417f:	89 d1                	mov    ecx,edx
c0024181:	09 c1                	or     ecx,eax
c0024183:	74 25                	je     c00241aa <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0024185:	31 ed                	xor    ebp,ebp
c0024187:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c002418e:	89 fa                	mov    edx,edi
c0024190:	89 f0                	mov    eax,esi
c0024192:	0f ad d0             	shrd   eax,edx,cl
c0024195:	d3 ea                	shr    edx,cl
c0024197:	f6 c1 20             	test   cl,0x20
c002419a:	74 02                	je     c002419e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c002419c:	89 d0                	mov    eax,edx
c002419e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00241a2:	45                   	inc    ebp
c00241a3:	83 fd 06             	cmp    ebp,0x6
c00241a6:	75 df                	jne    c0024187 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00241a8:	eb 76                	jmp    c0024220 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c00241aa:	89 f0                	mov    eax,esi
c00241ac:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c00241b1:	89 fa                	mov    edx,edi
c00241b3:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c00241ba:	0f ac d0 10          	shrd   eax,edx,0x10
c00241be:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00241c3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00241c7:	c1 ee 18             	shr    esi,0x18
c00241ca:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c00241cf:	eb 56                	jmp    c0024227 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c00241d1:	6a 00                	push   0x0
c00241d3:	6a 3f                	push   0x3f
c00241d5:	57                   	push   edi
c00241d6:	56                   	push   esi
c00241d7:	e8 90 29 00 00       	call   c0026b6c <__umoddi3>
c00241dc:	83 c4 10             	add    esp,0x10
c00241df:	40                   	inc    eax
c00241e0:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c00241e4:	6a 00                	push   0x0
c00241e6:	68 f0 03 00 00       	push   0x3f0
c00241eb:	57                   	push   edi
c00241ec:	56                   	push   esi
c00241ed:	e8 7a 28 00 00       	call   c0026a6c <__udivdi3>
c00241f2:	83 c4 10             	add    esp,0x10
c00241f5:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c00241fa:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024201:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024206:	6a 00                	push   0x0
c0024208:	6a 3f                	push   0x3f
c002420a:	57                   	push   edi
c002420b:	56                   	push   esi
c002420c:	e8 5b 28 00 00       	call   c0026a6c <__udivdi3>
c0024211:	83 c4 10             	add    esp,0x10
c0024214:	89 c6                	mov    esi,eax
c0024216:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c002421b:	83 e6 0f             	and    esi,0xf
c002421e:	eb 07                	jmp    c0024227 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024220:	31 f6                	xor    esi,esi
c0024222:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0024227:	bf 01 00 00 00       	mov    edi,0x1
c002422c:	50                   	push   eax
c002422d:	6a 00                	push   0x0
c002422f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024236:	50                   	push   eax
c0024237:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002423b:	e8 6c f0 ff ff       	call   c00232ac <IDE::enableIRQs(unsigned char, bool)>
c0024240:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024243:	e8 98 fe ff ff       	call   c00240e0 <ATA::readyForCommand()>
c0024248:	83 c4 10             	add    esp,0x10
c002424b:	84 c0                	test   al,al
c002424d:	0f 84 5a 02 00 00    	je     c00244ad <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024253:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0024259:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c002425f:	c1 e0 04             	shl    eax,0x4
c0024262:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0024269:	09 c6                	or     esi,eax
c002426b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0024270:	75 05                	jne    c0024277 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0024272:	83 ce a0             	or     esi,0xffffffa0
c0024275:	eb 03                	jmp    c002427a <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0024277:	83 ce e0             	or     esi,0xffffffe0
c002427a:	89 f0                	mov    eax,esi
c002427c:	0f b6 f0             	movzx  esi,al
c002427f:	56                   	push   esi
c0024280:	6a 06                	push   0x6
c0024282:	51                   	push   ecx
c0024283:	52                   	push   edx
c0024284:	e8 17 ee ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024289:	83 c4 10             	add    esp,0x10
c002428c:	6a 00                	push   0x0
c002428e:	6a 01                	push   0x1
c0024290:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024297:	50                   	push   eax
c0024298:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002429e:	e8 fd ed ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242a3:	83 c4 10             	add    esp,0x10
c00242a6:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c00242ab:	75 6e                	jne    c002431b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c00242ad:	6a 00                	push   0x0
c00242af:	6a 08                	push   0x8
c00242b1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242b8:	50                   	push   eax
c00242b9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242bf:	e8 dc ed ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242c4:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c00242c9:	50                   	push   eax
c00242ca:	6a 09                	push   0x9
c00242cc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242d3:	50                   	push   eax
c00242d4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242da:	e8 c1 ed ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242df:	83 c4 20             	add    esp,0x20
c00242e2:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c00242e7:	50                   	push   eax
c00242e8:	6a 0a                	push   0xa
c00242ea:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00242f1:	50                   	push   eax
c00242f2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00242f8:	e8 a3 ed ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00242fd:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024302:	50                   	push   eax
c0024303:	6a 0b                	push   0xb
c0024305:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002430c:	50                   	push   eax
c002430d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024313:	e8 88 ed ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024318:	83 c4 20             	add    esp,0x20
c002431b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024320:	50                   	push   eax
c0024321:	6a 02                	push   0x2
c0024323:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002432a:	50                   	push   eax
c002432b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024331:	e8 6a ed ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024336:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c002433b:	50                   	push   eax
c002433c:	6a 03                	push   0x3
c002433e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024345:	50                   	push   eax
c0024346:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002434c:	e8 4f ed ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024351:	83 c4 20             	add    esp,0x20
c0024354:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024359:	50                   	push   eax
c002435a:	6a 04                	push   0x4
c002435c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024363:	50                   	push   eax
c0024364:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002436a:	e8 31 ed ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002436f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024374:	50                   	push   eax
c0024375:	6a 05                	push   0x5
c0024377:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002437e:	50                   	push   eax
c002437f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024385:	e8 16 ed ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002438a:	83 c4 20             	add    esp,0x20
c002438d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024392:	0f 94 c0             	sete   al
c0024395:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c002439a:	74 09                	je     c00243a5 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c002439c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c00243a3:	eb 07                	jmp    c00243ac <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c00243a5:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c00243ac:	0f b6 c0             	movzx  eax,al
c00243af:	50                   	push   eax
c00243b0:	6a 07                	push   0x7
c00243b2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243b9:	50                   	push   eax
c00243ba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243c0:	e8 db ec ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00243c5:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c00243c9:	83 c4 10             	add    esp,0x10
c00243cc:	85 f6                	test   esi,esi
c00243ce:	0f 84 ba 00 00 00    	je     c002448e <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c00243d4:	50                   	push   eax
c00243d5:	6a 01                	push   0x1
c00243d7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00243de:	50                   	push   eax
c00243df:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00243e5:	e8 62 f8 ff ff       	call   c0023c4c <IDE::polling(unsigned char, unsigned int)>
c00243ea:	83 c4 10             	add    esp,0x10
c00243ed:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c00243f3:	84 c0                	test   al,al
c00243f5:	74 2c                	je     c0024423 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c00243f7:	0f b6 f8             	movzx  edi,al
c00243fa:	0f b6 d2             	movzx  edx,dl
c00243fd:	57                   	push   edi
c00243fe:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024405:	50                   	push   eax
c0024406:	52                   	push   edx
c0024407:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002440d:	e8 a4 f6 ff ff       	call   c0023ab6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024412:	c7 04 24 ec ce 02 c0 	mov    DWORD PTR [esp],0xc002ceec
c0024419:	e8 d1 eb fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c002441e:	e9 87 00 00 00       	jmp    c00244aa <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024423:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024428:	74 33                	je     c002445d <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c002442a:	31 ed                	xor    ebp,ebp
c002442c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024430:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024434:	50                   	push   eax
c0024435:	50                   	push   eax
c0024436:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002443d:	50                   	push   eax
c002443e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024444:	e8 45 ec ff ff       	call   c002308e <IDE::getBase(unsigned char)>
c0024449:	89 c2                	mov    edx,eax
c002444b:	89 f8                	mov    eax,edi
c002444d:	66 ef                	out    dx,ax
c002444f:	45                   	inc    ebp
c0024450:	83 c4 10             	add    esp,0x10
c0024453:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024459:	75 d1                	jne    c002442c <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c002445b:	eb 23                	jmp    c0024480 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c002445d:	0f b6 d2             	movzx  edx,dl
c0024460:	51                   	push   ecx
c0024461:	51                   	push   ecx
c0024462:	52                   	push   edx
c0024463:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024469:	e8 20 ec ff ff       	call   c002308e <IDE::getBase(unsigned char)>
c002446e:	b9 00 01 00 00       	mov    ecx,0x100
c0024473:	89 c2                	mov    edx,eax
c0024475:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024479:	fc                   	cld    
c002447a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c002447d:	83 c4 10             	add    esp,0x10
c0024480:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024488:	4e                   	dec    esi
c0024489:	e9 3e ff ff ff       	jmp    c00243cc <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002448e:	31 ff                	xor    edi,edi
c0024490:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024495:	74 16                	je     c00244ad <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024497:	50                   	push   eax
c0024498:	50                   	push   eax
c0024499:	31 c0                	xor    eax,eax
c002449b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c00244a0:	0f 94 c0             	sete   al
c00244a3:	50                   	push   eax
c00244a4:	53                   	push   ebx
c00244a5:	e8 ec fb ff ff       	call   c0024096 <ATA::flush(bool)>
c00244aa:	83 c4 10             	add    esp,0x10
c00244ad:	83 c4 2c             	add    esp,0x2c
c00244b0:	89 f8                	mov    eax,edi
c00244b2:	5b                   	pop    ebx
c00244b3:	5e                   	pop    esi
c00244b4:	5f                   	pop    edi
c00244b5:	5d                   	pop    ebp
c00244b6:	c3                   	ret    
c00244b7:	90                   	nop

c00244b8 <ATA::read(unsigned long long, int, void*)>:
c00244b8:	57                   	push   edi
c00244b9:	b8 04 00 00 00       	mov    eax,0x4
c00244be:	56                   	push   esi
c00244bf:	53                   	push   ebx
c00244c0:	83 ec 10             	sub    esp,0x10
c00244c3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00244c7:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00244cb:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00244ce:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00244d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00244d6:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00244dc:	77 3b                	ja     c0024519 <ATA::read(unsigned long long, int, void*)+0x61>
c00244de:	b8 06 00 00 00       	mov    eax,0x6
c00244e3:	85 d2                	test   edx,edx
c00244e5:	74 32                	je     c0024519 <ATA::read(unsigned long long, int, void*)+0x61>
c00244e7:	50                   	push   eax
c00244e8:	50                   	push   eax
c00244e9:	6a 00                	push   0x0
c00244eb:	52                   	push   edx
c00244ec:	53                   	push   ebx
c00244ed:	57                   	push   edi
c00244ee:	56                   	push   esi
c00244ef:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00244f3:	e8 38 fc ff ff       	call   c0024130 <ATA::access(unsigned long long, int, void*, bool)>
c00244f8:	83 c4 20             	add    esp,0x20
c00244fb:	85 c0                	test   eax,eax
c00244fd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024501:	75 11                	jne    c0024514 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024503:	01 1d 88 28 03 c0    	add    DWORD PTR ds:0xc0032888,ebx
c0024509:	e8 c6 c4 fe ff       	call   c00109d4 <VgaText::updateDiskUsage()>
c002450e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024512:	eb 05                	jmp    c0024519 <ATA::read(unsigned long long, int, void*)+0x61>
c0024514:	b8 01 00 00 00       	mov    eax,0x1
c0024519:	83 c4 10             	add    esp,0x10
c002451c:	5b                   	pop    ebx
c002451d:	5e                   	pop    esi
c002451e:	5f                   	pop    edi
c002451f:	c3                   	ret    

c0024520 <ATA::write(unsigned long long, int, void*)>:
c0024520:	57                   	push   edi
c0024521:	b8 04 00 00 00       	mov    eax,0x4
c0024526:	56                   	push   esi
c0024527:	53                   	push   ebx
c0024528:	83 ec 10             	sub    esp,0x10
c002452b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c002452f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024533:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024536:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c002453a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c002453e:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024544:	77 3b                	ja     c0024581 <ATA::write(unsigned long long, int, void*)+0x61>
c0024546:	b8 06 00 00 00       	mov    eax,0x6
c002454b:	85 d2                	test   edx,edx
c002454d:	74 32                	je     c0024581 <ATA::write(unsigned long long, int, void*)+0x61>
c002454f:	50                   	push   eax
c0024550:	50                   	push   eax
c0024551:	6a 01                	push   0x1
c0024553:	52                   	push   edx
c0024554:	53                   	push   ebx
c0024555:	57                   	push   edi
c0024556:	56                   	push   esi
c0024557:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002455b:	e8 d0 fb ff ff       	call   c0024130 <ATA::access(unsigned long long, int, void*, bool)>
c0024560:	83 c4 20             	add    esp,0x20
c0024563:	85 c0                	test   eax,eax
c0024565:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024569:	75 11                	jne    c002457c <ATA::write(unsigned long long, int, void*)+0x5c>
c002456b:	01 1d 84 28 03 c0    	add    DWORD PTR ds:0xc0032884,ebx
c0024571:	e8 5e c4 fe ff       	call   c00109d4 <VgaText::updateDiskUsage()>
c0024576:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002457a:	eb 05                	jmp    c0024581 <ATA::write(unsigned long long, int, void*)+0x61>
c002457c:	b8 01 00 00 00       	mov    eax,0x1
c0024581:	83 c4 10             	add    esp,0x10
c0024584:	5b                   	pop    ebx
c0024585:	5e                   	pop    esi
c0024586:	5f                   	pop    edi
c0024587:	c3                   	ret    

c0024588 <ATA::detectCHS()>:
c0024588:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002458c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024592:	c1 e0 06             	shl    eax,0x6
c0024595:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002459b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c00245a5:	c7 44 24 04 f7 ce 02 c0 	mov    DWORD PTR [esp+0x4],0xc002cef7
c00245ad:	e9 eb 60 ff ff       	jmp    c001a69d <Krnl::panic(char const*)>

c00245b2 <ATA::open(int, int, void*)>:
c00245b2:	53                   	push   ebx
c00245b3:	83 ec 08             	sub    esp,0x8
c00245b6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00245ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00245be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00245c2:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00245c8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00245ce:	c1 e0 06             	shl    eax,0x6
c00245d1:	01 d0                	add    eax,edx
c00245d3:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c00245da:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c00245e0:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c00245e7:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00245f1:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c00245f7:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00245fe:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024605:	75 0c                	jne    c0024613 <ATA::open(int, int, void*)+0x61>
c0024607:	83 ec 0c             	sub    esp,0xc
c002460a:	53                   	push   ebx
c002460b:	e8 78 ff ff ff       	call   c0024588 <ATA::detectCHS()>
c0024610:	83 c4 10             	add    esp,0x10
c0024613:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024619:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002461f:	c1 e0 06             	shl    eax,0x6
c0024622:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024629:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024633:	d1 e8                	shr    eax,1
c0024635:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c002463b:	6a 04                	push   0x4
c002463d:	6a 0c                	push   0xc
c002463f:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024646:	50                   	push   eax
c0024647:	52                   	push   edx
c0024648:	e8 53 ea ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002464d:	90                   	nop
c002464e:	90                   	nop
c002464f:	6a 00                	push   0x0
c0024651:	6a 0c                	push   0xc
c0024653:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002465a:	50                   	push   eax
c002465b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024661:	e8 3a ea ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024666:	83 c4 14             	add    esp,0x14
c0024669:	53                   	push   ebx
c002466a:	e8 33 02 ff ff       	call   c00148a2 <PhysicalDisk::startCache()>
c002466f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024672:	e8 ad 23 ff ff       	call   c0016a24 <createPartitionsForDisk(PhysicalDisk*)>
c0024677:	31 c0                	xor    eax,eax
c0024679:	83 c4 18             	add    esp,0x18
c002467c:	5b                   	pop    ebx
c002467d:	c3                   	ret    

c002467e <ATAPI::write(unsigned long long, int, void*)>:
c002467e:	b8 03 00 00 00       	mov    eax,0x3
c0024683:	c3                   	ret    

c0024684 <ATAPI::close(int, int, void*)>:
c0024684:	83 ec 0c             	sub    esp,0xc
c0024687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002468b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024691:	85 c0                	test   eax,eax
c0024693:	74 0c                	je     c00246a1 <ATAPI::close(int, int, void*)+0x1d>
c0024695:	83 ec 0c             	sub    esp,0xc
c0024698:	8b 10                	mov    edx,DWORD PTR [eax]
c002469a:	50                   	push   eax
c002469b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002469e:	83 c4 10             	add    esp,0x10
c00246a1:	31 c0                	xor    eax,eax
c00246a3:	83 c4 0c             	add    esp,0xc
c00246a6:	c3                   	ret    
c00246a7:	90                   	nop

c00246a8 <ATAPI::ATAPI()>:
c00246a8:	83 ec 0c             	sub    esp,0xc
c00246ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246af:	83 ec 04             	sub    esp,0x4
c00246b2:	68 00 08 00 00       	push   0x800
c00246b7:	68 31 d0 02 c0       	push   0xc002d031
c00246bc:	50                   	push   eax
c00246bd:	e8 78 01 ff ff       	call   c001483a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00246c2:	83 c4 10             	add    esp,0x10
c00246c5:	ba 4c cf 02 c0       	mov    edx,0xc002cf4c
c00246ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00246ce:	89 10                	mov    DWORD PTR [eax],edx
c00246d0:	90                   	nop
c00246d1:	83 c4 0c             	add    esp,0xc
c00246d4:	c3                   	ret    
c00246d5:	90                   	nop

c00246d6 <ATAPI::readyForCommand()>:
c00246d6:	56                   	push   esi
c00246d7:	53                   	push   ebx
c00246d8:	31 db                	xor    ebx,ebx
c00246da:	50                   	push   eax
c00246db:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00246df:	50                   	push   eax
c00246e0:	6a 0c                	push   0xc
c00246e2:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c00246e9:	50                   	push   eax
c00246ea:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c00246f0:	e8 6b ea ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c00246f5:	83 c4 10             	add    esp,0x10
c00246f8:	a8 88                	test   al,0x88
c00246fa:	74 23                	je     c002471f <ATAPI::readyForCommand()+0x49>
c00246fc:	43                   	inc    ebx
c00246fd:	83 fb 63             	cmp    ebx,0x63
c0024700:	7e dd                	jle    c00246df <ATAPI::readyForCommand()+0x9>
c0024702:	51                   	push   ecx
c0024703:	51                   	push   ecx
c0024704:	6a 00                	push   0x0
c0024706:	68 40 42 0f 00       	push   0xf4240
c002470b:	e8 d2 9c ff ff       	call   c001e3e2 <nanoSleep(unsigned long long)>
c0024710:	83 c4 10             	add    esp,0x10
c0024713:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024719:	75 c4                	jne    c00246df <ATAPI::readyForCommand()+0x9>
c002471b:	31 c0                	xor    eax,eax
c002471d:	eb 02                	jmp    c0024721 <ATAPI::readyForCommand()+0x4b>
c002471f:	b0 01                	mov    al,0x1
c0024721:	5a                   	pop    edx
c0024722:	5b                   	pop    ebx
c0024723:	5e                   	pop    esi
c0024724:	c3                   	ret    
c0024725:	90                   	nop

c0024726 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024726:	55                   	push   ebp
c0024727:	57                   	push   edi
c0024728:	56                   	push   esi
c0024729:	53                   	push   ebx
c002472a:	83 ec 20             	sub    esp,0x20
c002472d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024731:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024735:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024739:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c002473d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024741:	6a 01                	push   0x1
c0024743:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002474a:	50                   	push   eax
c002474b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024751:	e8 56 eb ff ff       	call   c00232ac <IDE::enableIRQs(unsigned char, bool)>
c0024756:	5e                   	pop    esi
c0024757:	58                   	pop    eax
c0024758:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002475f:	50                   	push   eax
c0024760:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024766:	e8 0f e9 ff ff       	call   c002307a <IDE::prepareInterrupt(unsigned char)>
c002476b:	89 3c 24             	mov    DWORD PTR [esp],edi
c002476e:	e8 63 ff ff ff       	call   c00246d6 <ATAPI::readyForCommand()>
c0024773:	83 c4 10             	add    esp,0x10
c0024776:	84 c0                	test   al,al
c0024778:	75 0a                	jne    c0024784 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c002477a:	bb 01 00 00 00       	mov    ebx,0x1
c002477f:	e9 57 02 00 00       	jmp    c00249db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024784:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002478a:	c1 e0 04             	shl    eax,0x4
c002478d:	0f b6 c0             	movzx  eax,al
c0024790:	50                   	push   eax
c0024791:	6a 06                	push   0x6
c0024793:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002479a:	50                   	push   eax
c002479b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247a1:	e8 fa e8 ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247a6:	6a 00                	push   0x0
c00247a8:	6a 01                	push   0x1
c00247aa:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247b1:	50                   	push   eax
c00247b2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247b8:	e8 e3 e8 ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247bd:	83 c4 20             	add    esp,0x20
c00247c0:	0f b6 c3             	movzx  eax,bl
c00247c3:	0f b6 df             	movzx  ebx,bh
c00247c6:	50                   	push   eax
c00247c7:	6a 04                	push   0x4
c00247c9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247d0:	50                   	push   eax
c00247d1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247d7:	e8 c4 e8 ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247dc:	53                   	push   ebx
c00247dd:	6a 05                	push   0x5
c00247df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00247e6:	50                   	push   eax
c00247e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00247ed:	e8 ae e8 ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00247f2:	83 c4 20             	add    esp,0x20
c00247f5:	68 a0 00 00 00       	push   0xa0
c00247fa:	6a 07                	push   0x7
c00247fc:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024803:	50                   	push   eax
c0024804:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002480a:	e8 91 e8 ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002480f:	83 c4 0c             	add    esp,0xc
c0024812:	6a 01                	push   0x1
c0024814:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002481b:	50                   	push   eax
c002481c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024822:	e8 25 f4 ff ff       	call   c0023c4c <IDE::polling(unsigned char, unsigned int)>
c0024827:	83 c4 10             	add    esp,0x10
c002482a:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024830:	84 c0                	test   al,al
c0024832:	74 23                	je     c0024857 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024834:	0f b6 d8             	movzx  ebx,al
c0024837:	0f b6 d2             	movzx  edx,dl
c002483a:	53                   	push   ebx
c002483b:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024842:	50                   	push   eax
c0024843:	52                   	push   edx
c0024844:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002484a:	e8 67 f2 ff ff       	call   c0023ab6 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c002484f:	83 c4 10             	add    esp,0x10
c0024852:	e9 84 01 00 00       	jmp    c00249db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024857:	0f b6 d2             	movzx  edx,dl
c002485a:	53                   	push   ebx
c002485b:	53                   	push   ebx
c002485c:	52                   	push   edx
c002485d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024863:	e8 26 e8 ff ff       	call   c002308e <IDE::getBase(unsigned char)>
c0024868:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c002486c:	b9 06 00 00 00       	mov    ecx,0x6
c0024871:	89 c2                	mov    edx,eax
c0024873:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024876:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c002487a:	83 c4 10             	add    esp,0x10
c002487d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024883:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002488a:	85 db                	test   ebx,ebx
c002488c:	0f 84 ec 00 00 00    	je     c002497e <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024892:	51                   	push   ecx
c0024893:	51                   	push   ecx
c0024894:	52                   	push   edx
c0024895:	50                   	push   eax
c0024896:	e8 73 e9 ff ff       	call   c002320e <IDE::waitInterrupt(unsigned char)>
c002489b:	83 c4 10             	add    esp,0x10
c002489e:	84 c0                	test   al,al
c00248a0:	0f 84 d4 fe ff ff    	je     c002477a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00248a6:	56                   	push   esi
c00248a7:	56                   	push   esi
c00248a8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248af:	50                   	push   eax
c00248b0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248b6:	e8 bf e7 ff ff       	call   c002307a <IDE::prepareInterrupt(unsigned char)>
c00248bb:	83 c4 0c             	add    esp,0xc
c00248be:	6a 04                	push   0x4
c00248c0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248c7:	50                   	push   eax
c00248c8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248ce:	e8 8d e8 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c00248d3:	83 c4 0c             	add    esp,0xc
c00248d6:	89 c6                	mov    esi,eax
c00248d8:	6a 05                	push   0x5
c00248da:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00248e1:	50                   	push   eax
c00248e2:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00248e8:	e8 73 e8 ff ff       	call   c0023160 <IDE::read(unsigned char, unsigned char)>
c00248ed:	89 f1                	mov    ecx,esi
c00248ef:	0f b6 c0             	movzx  eax,al
c00248f2:	0f b6 f1             	movzx  esi,cl
c00248f5:	c1 e0 08             	shl    eax,0x8
c00248f8:	09 c6                	or     esi,eax
c00248fa:	d1 fe                	sar    esi,1
c00248fc:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024900:	83 c4 10             	add    esp,0x10
c0024903:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024908:	74 41                	je     c002494b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002490a:	31 c9                	xor    ecx,ecx
c002490c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024912:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024919:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002491d:	75 0a                	jne    c0024929 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002491f:	01 c9                	add    ecx,ecx
c0024921:	01 cd                	add    ebp,ecx
c0024923:	4b                   	dec    ebx
c0024924:	e9 54 ff ff ff       	jmp    c002487d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c0024929:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c002492e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0024932:	51                   	push   ecx
c0024933:	51                   	push   ecx
c0024934:	52                   	push   edx
c0024935:	50                   	push   eax
c0024936:	e8 53 e7 ff ff       	call   c002308e <IDE::getBase(unsigned char)>
c002493b:	89 c2                	mov    edx,eax
c002493d:	89 f0                	mov    eax,esi
c002493f:	66 ef                	out    dx,ax
c0024941:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0024945:	83 c4 10             	add    esp,0x10
c0024948:	41                   	inc    ecx
c0024949:	eb c1                	jmp    c002490c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c002494b:	31 f6                	xor    esi,esi
c002494d:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024953:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002495a:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c002495e:	75 06                	jne    c0024966 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c0024960:	01 f6                	add    esi,esi
c0024962:	01 f5                	add    ebp,esi
c0024964:	eb bd                	jmp    c0024923 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c0024966:	51                   	push   ecx
c0024967:	51                   	push   ecx
c0024968:	52                   	push   edx
c0024969:	50                   	push   eax
c002496a:	e8 1f e7 ff ff       	call   c002308e <IDE::getBase(unsigned char)>
c002496f:	89 c2                	mov    edx,eax
c0024971:	66 ed                	in     ax,dx
c0024973:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c0024978:	83 c4 10             	add    esp,0x10
c002497b:	46                   	inc    esi
c002497c:	eb cf                	jmp    c002494d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c002497e:	51                   	push   ecx
c002497f:	51                   	push   ecx
c0024980:	52                   	push   edx
c0024981:	50                   	push   eax
c0024982:	e8 87 e8 ff ff       	call   c002320e <IDE::waitInterrupt(unsigned char)>
c0024987:	83 c4 10             	add    esp,0x10
c002498a:	84 c0                	test   al,al
c002498c:	0f 84 e8 fd ff ff    	je     c002477a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024992:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024997:	52                   	push   edx
c0024998:	52                   	push   edx
c0024999:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249a0:	50                   	push   eax
c00249a1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249a7:	e8 ce e6 ff ff       	call   c002307a <IDE::prepareInterrupt(unsigned char)>
c00249ac:	83 c4 10             	add    esp,0x10
c00249af:	50                   	push   eax
c00249b0:	50                   	push   eax
c00249b1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00249b8:	50                   	push   eax
c00249b9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00249bf:	e8 ca e6 ff ff       	call   c002308e <IDE::getBase(unsigned char)>
c00249c4:	8d 50 07             	lea    edx,[eax+0x7]
c00249c7:	ec                   	in     al,dx
c00249c8:	83 c4 10             	add    esp,0x10
c00249cb:	a8 88                	test   al,0x88
c00249cd:	74 0a                	je     c00249d9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c00249cf:	4b                   	dec    ebx
c00249d0:	75 dd                	jne    c00249af <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c00249d2:	bb 02 00 00 00       	mov    ebx,0x2
c00249d7:	eb 02                	jmp    c00249db <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00249d9:	31 db                	xor    ebx,ebx
c00249db:	83 c4 1c             	add    esp,0x1c
c00249de:	89 d8                	mov    eax,ebx
c00249e0:	5b                   	pop    ebx
c00249e1:	5e                   	pop    esi
c00249e2:	5f                   	pop    edi
c00249e3:	5d                   	pop    ebp
c00249e4:	c3                   	ret    
c00249e5:	90                   	nop

c00249e6 <ATAPI::diskRemoved()>:
c00249e6:	83 ec 18             	sub    esp,0x18
c00249e9:	68 3d d0 02 c0       	push   0xc002d03d
c00249ee:	e8 fc e5 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00249f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00249f7:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c00249fe:	83 c4 1c             	add    esp,0x1c
c0024a01:	c3                   	ret    

c0024a02 <ATAPI::eject()>:
c0024a02:	57                   	push   edi
c0024a03:	b9 03 00 00 00       	mov    ecx,0x3
c0024a08:	53                   	push   ebx
c0024a09:	83 ec 14             	sub    esp,0x14
c0024a0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024a10:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024a14:	fc                   	cld    
c0024a15:	31 c0                	xor    eax,eax
c0024a17:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024a19:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024a1e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024a23:	50                   	push   eax
c0024a24:	50                   	push   eax
c0024a25:	6a 00                	push   0x0
c0024a27:	6a 00                	push   0x0
c0024a29:	6a 00                	push   0x0
c0024a2b:	6a 02                	push   0x2
c0024a2d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024a31:	50                   	push   eax
c0024a32:	53                   	push   ebx
c0024a33:	e8 ee fc ff ff       	call   c0024726 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024a38:	83 c4 14             	add    esp,0x14
c0024a3b:	53                   	push   ebx
c0024a3c:	e8 a5 ff ff ff       	call   c00249e6 <ATAPI::diskRemoved()>
c0024a41:	83 c4 24             	add    esp,0x24
c0024a44:	31 c0                	xor    eax,eax
c0024a46:	5b                   	pop    ebx
c0024a47:	5f                   	pop    edi
c0024a48:	c3                   	ret    
c0024a49:	90                   	nop

c0024a4a <ATAPI::diskInserted()>:
c0024a4a:	53                   	push   ebx
c0024a4b:	83 ec 14             	sub    esp,0x14
c0024a4e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024a52:	68 54 d0 02 c0       	push   0xc002d054
c0024a57:	e8 93 e5 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0024a5c:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c0024a63:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024a66:	e8 37 fe fe ff       	call   c00148a2 <PhysicalDisk::startCache()>
c0024a6b:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024a6f:	83 c4 18             	add    esp,0x18
c0024a72:	5b                   	pop    ebx
c0024a73:	e9 ac 1f ff ff       	jmp    c0016a24 <createPartitionsForDisk(PhysicalDisk*)>

c0024a78 <ATAPI::detectMedia()>:
c0024a78:	56                   	push   esi
c0024a79:	53                   	push   ebx
c0024a7a:	83 ec 28             	sub    esp,0x28
c0024a7d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024a81:	6a 0c                	push   0xc
c0024a83:	6a 00                	push   0x0
c0024a85:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024a89:	56                   	push   esi
c0024a8a:	e8 e9 bc fd ff       	call   c0000778 <memset>
c0024a8f:	58                   	pop    eax
c0024a90:	5a                   	pop    edx
c0024a91:	6a 00                	push   0x0
c0024a93:	6a 00                	push   0x0
c0024a95:	6a 00                	push   0x0
c0024a97:	6a 00                	push   0x0
c0024a99:	56                   	push   esi
c0024a9a:	53                   	push   ebx
c0024a9b:	e8 86 fc ff ff       	call   c0024726 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024aa0:	83 c4 1c             	add    esp,0x1c
c0024aa3:	6a 0c                	push   0xc
c0024aa5:	6a 00                	push   0x0
c0024aa7:	56                   	push   esi
c0024aa8:	e8 cb bc fd ff       	call   c0000778 <memset>
c0024aad:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024ab2:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024ab7:	59                   	pop    ecx
c0024ab8:	58                   	pop    eax
c0024ab9:	6a 01                	push   0x1
c0024abb:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0024abf:	50                   	push   eax
c0024ac0:	6a 00                	push   0x0
c0024ac2:	6a 12                	push   0x12
c0024ac4:	56                   	push   esi
c0024ac5:	53                   	push   ebx
c0024ac6:	e8 5b fc ff ff       	call   c0024726 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024acb:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024acf:	83 c4 20             	add    esp,0x20
c0024ad2:	83 e0 7f             	and    eax,0x7f
c0024ad5:	3c 70                	cmp    al,0x70
c0024ad7:	74 15                	je     c0024aee <ATAPI::detectMedia()+0x76>
c0024ad9:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024ae0:	75 0c                	jne    c0024aee <ATAPI::detectMedia()+0x76>
c0024ae2:	83 ec 0c             	sub    esp,0xc
c0024ae5:	53                   	push   ebx
c0024ae6:	e8 5f ff ff ff       	call   c0024a4a <ATAPI::diskInserted()>
c0024aeb:	83 c4 10             	add    esp,0x10
c0024aee:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024af2:	83 e0 0f             	and    eax,0xf
c0024af5:	3c 02                	cmp    al,0x2
c0024af7:	75 1b                	jne    c0024b14 <ATAPI::detectMedia()+0x9c>
c0024af9:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024afe:	75 2d                	jne    c0024b2d <ATAPI::detectMedia()+0xb5>
c0024b00:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b07:	74 24                	je     c0024b2d <ATAPI::detectMedia()+0xb5>
c0024b09:	83 ec 0c             	sub    esp,0xc
c0024b0c:	53                   	push   ebx
c0024b0d:	e8 d4 fe ff ff       	call   c00249e6 <ATAPI::diskRemoved()>
c0024b12:	eb 16                	jmp    c0024b2a <ATAPI::detectMedia()+0xb2>
c0024b14:	84 c0                	test   al,al
c0024b16:	75 15                	jne    c0024b2d <ATAPI::detectMedia()+0xb5>
c0024b18:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024b1f:	75 0c                	jne    c0024b2d <ATAPI::detectMedia()+0xb5>
c0024b21:	83 ec 0c             	sub    esp,0xc
c0024b24:	53                   	push   ebx
c0024b25:	e8 20 ff ff ff       	call   c0024a4a <ATAPI::diskInserted()>
c0024b2a:	83 c4 10             	add    esp,0x10
c0024b2d:	83 c4 24             	add    esp,0x24
c0024b30:	5b                   	pop    ebx
c0024b31:	5e                   	pop    esi
c0024b32:	c3                   	ret    
c0024b33:	90                   	nop

c0024b34 <ATAPI::open(int, int, void*)>:
c0024b34:	53                   	push   ebx
c0024b35:	83 ec 08             	sub    esp,0x8
c0024b38:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024b3c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024b40:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024b44:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024b4a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024b50:	c1 e0 06             	shl    eax,0x6
c0024b53:	01 d0                	add    eax,edx
c0024b55:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c0024b5c:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c0024b62:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c0024b69:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024b73:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024b79:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024b80:	6a 04                	push   0x4
c0024b82:	6a 0c                	push   0xc
c0024b84:	51                   	push   ecx
c0024b85:	52                   	push   edx
c0024b86:	e8 15 e5 ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b8b:	90                   	nop
c0024b8c:	90                   	nop
c0024b8d:	6a 00                	push   0x0
c0024b8f:	6a 0c                	push   0xc
c0024b91:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b98:	50                   	push   eax
c0024b99:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b9f:	e8 fc e4 ff ff       	call   c00230a0 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ba4:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0024bab:	83 c4 14             	add    esp,0x14
c0024bae:	53                   	push   ebx
c0024baf:	e8 c4 fe ff ff       	call   c0024a78 <ATAPI::detectMedia()>
c0024bb4:	31 c0                	xor    eax,eax
c0024bb6:	83 c4 18             	add    esp,0x18
c0024bb9:	5b                   	pop    ebx
c0024bba:	c3                   	ret    
c0024bbb:	90                   	nop

c0024bbc <ATAPI::read(unsigned long long, int, void*)>:
c0024bbc:	55                   	push   ebp
c0024bbd:	57                   	push   edi
c0024bbe:	56                   	push   esi
c0024bbf:	53                   	push   ebx
c0024bc0:	83 ec 1c             	sub    esp,0x1c
c0024bc3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024bc7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024bcb:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024bcf:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024bd6:	74 41                	je     c0024c19 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024bd8:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024bdc:	b9 03 00 00 00       	mov    ecx,0x3
c0024be1:	fc                   	cld    
c0024be2:	31 c0                	xor    eax,eax
c0024be4:	86 fb                	xchg   bl,bh
c0024be6:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024be8:	c1 c3 10             	rol    ebx,0x10
c0024beb:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024bf0:	89 e8                	mov    eax,ebp
c0024bf2:	86 fb                	xchg   bl,bh
c0024bf4:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024bf8:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0024bfc:	50                   	push   eax
c0024bfd:	50                   	push   eax
c0024bfe:	55                   	push   ebp
c0024bff:	c1 e5 0b             	shl    ebp,0xb
c0024c02:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024c06:	6a 00                	push   0x0
c0024c08:	55                   	push   ebp
c0024c09:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024c0d:	50                   	push   eax
c0024c0e:	56                   	push   esi
c0024c0f:	e8 12 fb ff ff       	call   c0024726 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024c14:	83 c4 20             	add    esp,0x20
c0024c17:	eb 1a                	jmp    c0024c33 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024c19:	83 ec 0c             	sub    esp,0xc
c0024c1c:	56                   	push   esi
c0024c1d:	e8 56 fe ff ff       	call   c0024a78 <ATAPI::detectMedia()>
c0024c22:	83 c4 10             	add    esp,0x10
c0024c25:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024c2c:	75 aa                	jne    c0024bd8 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0024c2e:	b8 02 00 00 00       	mov    eax,0x2
c0024c33:	83 c4 1c             	add    esp,0x1c
c0024c36:	5b                   	pop    ebx
c0024c37:	5e                   	pop    esi
c0024c38:	5f                   	pop    edi
c0024c39:	5d                   	pop    ebp
c0024c3a:	c3                   	ret    
c0024c3b:	90                   	nop

c0024c3c <SATA::close(int, int, void*)>:
c0024c3c:	83 ec 0c             	sub    esp,0xc
c0024c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c43:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c49:	85 c0                	test   eax,eax
c0024c4b:	74 0c                	je     c0024c59 <SATA::close(int, int, void*)+0x1d>
c0024c4d:	83 ec 0c             	sub    esp,0xc
c0024c50:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c52:	50                   	push   eax
c0024c53:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c56:	83 c4 10             	add    esp,0x10
c0024c59:	31 c0                	xor    eax,eax
c0024c5b:	83 c4 0c             	add    esp,0xc
c0024c5e:	c3                   	ret    
c0024c5f:	90                   	nop

c0024c60 <SATA::powerSaving(PowerSavingLevel)>:
c0024c60:	c3                   	ret    
c0024c61:	90                   	nop

c0024c62 <SATA::open(int, int, void*)>:
c0024c62:	56                   	push   esi
c0024c63:	53                   	push   ebx
c0024c64:	50                   	push   eax
c0024c65:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024c69:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024c6d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024c77:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024c7d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024c87:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024c8b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024c95:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024c9b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024ca2:	e8 3e b2 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024ca7:	89 c6                	mov    esi,eax
c0024ca9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0024caf:	81 c6 00 10 00 00    	add    esi,0x1000
c0024cb5:	e8 2b b2 fe ff       	call   c000fee5 <Phys::allocatePage()>
c0024cba:	39 c6                	cmp    esi,eax
c0024cbc:	74 10                	je     c0024cce <SATA::open(int, int, void*)+0x6c>
c0024cbe:	83 ec 0c             	sub    esp,0xc
c0024cc1:	68 7c cf 02 c0       	push   0xc002cf7c
c0024cc6:	e8 d2 59 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0024ccb:	83 c4 10             	add    esp,0x10
c0024cce:	83 ec 0c             	sub    esp,0xc
c0024cd1:	6a 02                	push   0x2
c0024cd3:	e8 a7 ce fe ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c0024cd8:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024cde:	e8 37 d1 fe ff       	call   c0011e1a <Virt::getAKernelVAS()>
c0024ce3:	6a 03                	push   0x3
c0024ce5:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0024ceb:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024cf1:	50                   	push   eax
c0024cf2:	e8 75 d6 fe ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c0024cf7:	83 c4 14             	add    esp,0x14
c0024cfa:	53                   	push   ebx
c0024cfb:	e8 a2 fb fe ff       	call   c00148a2 <PhysicalDisk::startCache()>
c0024d00:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024d03:	e8 1c 1d ff ff       	call   c0016a24 <createPartitionsForDisk(PhysicalDisk*)>
c0024d08:	83 c4 14             	add    esp,0x14
c0024d0b:	31 c0                	xor    eax,eax
c0024d0d:	5b                   	pop    ebx
c0024d0e:	5e                   	pop    esi
c0024d0f:	c3                   	ret    

c0024d10 <SATA::SATA()>:
c0024d10:	83 ec 0c             	sub    esp,0xc
c0024d13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d17:	83 ec 04             	sub    esp,0x4
c0024d1a:	68 00 02 00 00       	push   0x200
c0024d1f:	68 90 cf 02 c0       	push   0xc002cf90
c0024d24:	50                   	push   eax
c0024d25:	e8 10 fb fe ff       	call   c001483a <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024d2a:	83 c4 10             	add    esp,0x10
c0024d2d:	ba 00 d0 02 c0       	mov    edx,0xc002d000
c0024d32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024d36:	89 10                	mov    DWORD PTR [eax],edx
c0024d38:	90                   	nop
c0024d39:	83 c4 0c             	add    esp,0xc
c0024d3c:	c3                   	ret    
c0024d3d:	90                   	nop

c0024d3e <SATA::access(unsigned long long, int, void*, bool)>:
c0024d3e:	55                   	push   ebp
c0024d3f:	57                   	push   edi
c0024d40:	56                   	push   esi
c0024d41:	53                   	push   ebx
c0024d42:	83 ec 2c             	sub    esp,0x2c
c0024d45:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d49:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0024d4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024d51:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0024d55:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024d59:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c0024d5e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024d62:	7e 10                	jle    c0024d74 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c0024d64:	83 ec 0c             	sub    esp,0xc
c0024d67:	68 a0 cf 02 c0       	push   0xc002cfa0
c0024d6c:	e8 2c 59 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0024d71:	83 c4 10             	add    esp,0x10
c0024d74:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c0024d7a:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024d80:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024d86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024d8a:	89 f0                	mov    eax,esi
c0024d8c:	c1 e0 07             	shl    eax,0x7
c0024d8f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024d93:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d9d:	53                   	push   ebx
c0024d9e:	8d 46 02             	lea    eax,[esi+0x2]
c0024da1:	53                   	push   ebx
c0024da2:	c1 e0 07             	shl    eax,0x7
c0024da5:	bb 01 00 00 00       	mov    ebx,0x1
c0024daa:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0024dae:	50                   	push   eax
c0024daf:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024db5:	e8 aa ef ff ff       	call   c0023d64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024dba:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0024dbe:	83 c4 10             	add    esp,0x10
c0024dc1:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024dc6:	0f 84 ce 01 00 00    	je     c0024f9a <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024dcc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024dd0:	c1 e0 09             	shl    eax,0x9
c0024dd3:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024dd8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0024ddc:	74 17                	je     c0024df5 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c0024dde:	51                   	push   ecx
c0024ddf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024de3:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024de7:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024ded:	e8 52 b9 fd ff       	call   c0000744 <memcpy>
c0024df2:	83 c4 10             	add    esp,0x10
c0024df5:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024dfb:	8d 46 02             	lea    eax,[esi+0x2]
c0024dfe:	c1 e0 07             	shl    eax,0x7
c0024e01:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024e05:	8b 00                	mov    eax,DWORD PTR [eax]
c0024e07:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024e0d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024e13:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024e17:	c1 e1 05             	shl    ecx,0x5
c0024e1a:	01 c8                	add    eax,ecx
c0024e1c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0024e20:	8a 18                	mov    bl,BYTE PTR [eax]
c0024e22:	83 e1 01             	and    ecx,0x1
c0024e25:	83 e3 bf             	and    ebx,0xffffffbf
c0024e28:	c1 e1 06             	shl    ecx,0x6
c0024e2b:	09 d9                	or     ecx,ebx
c0024e2d:	88 08                	mov    BYTE PTR [eax],cl
c0024e2f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024e31:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c0024e37:	81 c9 05 00 01 00    	or     ecx,0x10005
c0024e3d:	89 08                	mov    DWORD PTR [eax],ecx
c0024e3f:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0024e45:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024e4b:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024e51:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024e54:	52                   	push   edx
c0024e55:	68 90 00 00 00       	push   0x90
c0024e5a:	6a 00                	push   0x0
c0024e5c:	53                   	push   ebx
c0024e5d:	e8 16 b9 fd ff       	call   c0000778 <memset>
c0024e62:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c0024e68:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c0024e6c:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024e72:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024e76:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0024e7a:	83 c4 10             	add    esp,0x10
c0024e7d:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024e80:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024e86:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024e8c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024e91:	09 c8                	or     eax,ecx
c0024e93:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024e99:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024e9c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024ea3:	66 25 00 7f          	and    ax,0x7f00
c0024ea7:	66 0d 27 80          	or     ax,0x8027
c0024eab:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024eb0:	66 89 03             	mov    WORD PTR [ebx],ax
c0024eb3:	19 c0                	sbb    eax,eax
c0024eb5:	83 e0 f0             	and    eax,0xfffffff0
c0024eb8:	83 c0 35             	add    eax,0x35
c0024ebb:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024ebe:	89 f8                	mov    eax,edi
c0024ec0:	c1 e8 10             	shr    eax,0x10
c0024ec3:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024ec6:	89 f8                	mov    eax,edi
c0024ec8:	c1 e8 18             	shr    eax,0x18
c0024ecb:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024ece:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024ed2:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024ed5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024ed9:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024edc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024ee0:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024ee4:	89 f3                	mov    ebx,esi
c0024ee6:	31 c0                	xor    eax,eax
c0024ee8:	c1 e3 07             	shl    ebx,0x7
c0024eeb:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024eef:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024ef5:	80 e1 88             	and    cl,0x88
c0024ef8:	74 0a                	je     c0024f04 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024efa:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024eff:	74 0a                	je     c0024f0b <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024f01:	40                   	inc    eax
c0024f02:	eb eb                	jmp    c0024eef <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024f04:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024f09:	75 0a                	jne    c0024f15 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024f0b:	83 ec 0c             	sub    esp,0xc
c0024f0e:	68 d9 cf 02 c0       	push   0xc002cfd9
c0024f13:	eb 56                	jmp    c0024f6b <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024f15:	b8 01 00 00 00       	mov    eax,0x1
c0024f1a:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024f1e:	c1 e6 07             	shl    esi,0x7
c0024f21:	d3 e0                	shl    eax,cl
c0024f23:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024f27:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024f2d:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024f33:	85 c8                	test   eax,ecx
c0024f35:	74 20                	je     c0024f57 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024f37:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024f3d:	0f ba e1 1e          	bt     ecx,0x1e
c0024f41:	73 ea                	jae    c0024f2d <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024f43:	83 ec 0c             	sub    esp,0xc
c0024f46:	31 db                	xor    ebx,ebx
c0024f48:	68 e7 cf 02 c0       	push   0xc002cfe7
c0024f4d:	e8 4b 57 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0024f52:	83 c4 10             	add    esp,0x10
c0024f55:	eb 43                	jmp    c0024f9a <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f57:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024f5d:	0f ba e0 1e          	bt     eax,0x1e
c0024f61:	73 17                	jae    c0024f7a <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024f63:	83 ec 0c             	sub    esp,0xc
c0024f66:	68 e7 cf 02 c0       	push   0xc002cfe7
c0024f6b:	e8 2d 57 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0024f70:	bb 01 00 00 00       	mov    ebx,0x1
c0024f75:	83 c4 10             	add    esp,0x10
c0024f78:	eb 20                	jmp    c0024f9a <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f7a:	31 db                	xor    ebx,ebx
c0024f7c:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024f81:	75 17                	jne    c0024f9a <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024f83:	50                   	push   eax
c0024f84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024f88:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024f8e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024f92:	e8 ad b7 fd ff       	call   c0000744 <memcpy>
c0024f97:	83 c4 10             	add    esp,0x10
c0024f9a:	83 c4 2c             	add    esp,0x2c
c0024f9d:	89 d8                	mov    eax,ebx
c0024f9f:	5b                   	pop    ebx
c0024fa0:	5e                   	pop    esi
c0024fa1:	5f                   	pop    edi
c0024fa2:	5d                   	pop    ebp
c0024fa3:	c3                   	ret    

c0024fa4 <SATA::read(unsigned long long, int, void*)>:
c0024fa4:	57                   	push   edi
c0024fa5:	b8 04 00 00 00       	mov    eax,0x4
c0024faa:	56                   	push   esi
c0024fab:	53                   	push   ebx
c0024fac:	83 ec 10             	sub    esp,0x10
c0024faf:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024fb3:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024fb7:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024fba:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024fbe:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024fc2:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024fc8:	77 3b                	ja     c0025005 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fca:	b8 06 00 00 00       	mov    eax,0x6
c0024fcf:	85 d2                	test   edx,edx
c0024fd1:	74 32                	je     c0025005 <SATA::read(unsigned long long, int, void*)+0x61>
c0024fd3:	50                   	push   eax
c0024fd4:	50                   	push   eax
c0024fd5:	6a 00                	push   0x0
c0024fd7:	52                   	push   edx
c0024fd8:	53                   	push   ebx
c0024fd9:	57                   	push   edi
c0024fda:	56                   	push   esi
c0024fdb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024fdf:	e8 5a fd ff ff       	call   c0024d3e <SATA::access(unsigned long long, int, void*, bool)>
c0024fe4:	83 c4 20             	add    esp,0x20
c0024fe7:	85 c0                	test   eax,eax
c0024fe9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024fed:	75 11                	jne    c0025000 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024fef:	01 1d 88 28 03 c0    	add    DWORD PTR ds:0xc0032888,ebx
c0024ff5:	e8 da b9 fe ff       	call   c00109d4 <VgaText::updateDiskUsage()>
c0024ffa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024ffe:	eb 05                	jmp    c0025005 <SATA::read(unsigned long long, int, void*)+0x61>
c0025000:	b8 01 00 00 00       	mov    eax,0x1
c0025005:	83 c4 10             	add    esp,0x10
c0025008:	5b                   	pop    ebx
c0025009:	5e                   	pop    esi
c002500a:	5f                   	pop    edi
c002500b:	c3                   	ret    

c002500c <SATA::write(unsigned long long, int, void*)>:
c002500c:	55                   	push   ebp
c002500d:	b8 04 00 00 00       	mov    eax,0x4
c0025012:	57                   	push   edi
c0025013:	56                   	push   esi
c0025014:	53                   	push   ebx
c0025015:	83 ec 1c             	sub    esp,0x1c
c0025018:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002501c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025020:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025023:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025027:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002502b:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025031:	77 56                	ja     c0025089 <SATA::write(unsigned long long, int, void*)+0x7d>
c0025033:	b8 06 00 00 00       	mov    eax,0x6
c0025038:	85 ff                	test   edi,edi
c002503a:	74 4d                	je     c0025089 <SATA::write(unsigned long long, int, void*)+0x7d>
c002503c:	89 ee                	mov    esi,ebp
c002503e:	c1 e6 09             	shl    esi,0x9
c0025041:	01 fe                	add    esi,edi
c0025043:	89 c8                	mov    eax,ecx
c0025045:	89 da                	mov    edx,ebx
c0025047:	83 c0 01             	add    eax,0x1
c002504a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002504e:	83 d2 00             	adc    edx,0x0
c0025051:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0025055:	50                   	push   eax
c0025056:	50                   	push   eax
c0025057:	6a 01                	push   0x1
c0025059:	57                   	push   edi
c002505a:	81 c7 00 02 00 00    	add    edi,0x200
c0025060:	6a 01                	push   0x1
c0025062:	53                   	push   ebx
c0025063:	51                   	push   ecx
c0025064:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0025068:	e8 d1 fc ff ff       	call   c0024d3e <SATA::access(unsigned long long, int, void*, bool)>
c002506d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0025071:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025075:	83 c4 20             	add    esp,0x20
c0025078:	39 f7                	cmp    edi,esi
c002507a:	75 c7                	jne    c0025043 <SATA::write(unsigned long long, int, void*)+0x37>
c002507c:	01 2d 84 28 03 c0    	add    DWORD PTR ds:0xc0032884,ebp
c0025082:	e8 4d b9 fe ff       	call   c00109d4 <VgaText::updateDiskUsage()>
c0025087:	31 c0                	xor    eax,eax
c0025089:	83 c4 1c             	add    esp,0x1c
c002508c:	5b                   	pop    ebx
c002508d:	5e                   	pop    esi
c002508e:	5f                   	pop    edi
c002508f:	5d                   	pop    ebp
c0025090:	c3                   	ret    
c0025091:	90                   	nop

c0025092 <SATAPI::write(unsigned long long, int, void*)>:
c0025092:	b8 03 00 00 00       	mov    eax,0x3
c0025097:	c3                   	ret    

c0025098 <SATAPI::close(int, int, void*)>:
c0025098:	83 ec 0c             	sub    esp,0xc
c002509b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002509f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00250a5:	85 c0                	test   eax,eax
c00250a7:	74 0c                	je     c00250b5 <SATAPI::close(int, int, void*)+0x1d>
c00250a9:	83 ec 0c             	sub    esp,0xc
c00250ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00250ae:	50                   	push   eax
c00250af:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00250b2:	83 c4 10             	add    esp,0x10
c00250b5:	31 c0                	xor    eax,eax
c00250b7:	83 c4 0c             	add    esp,0xc
c00250ba:	c3                   	ret    
c00250bb:	90                   	nop

c00250bc <SATAPI::SATAPI()>:
c00250bc:	83 ec 0c             	sub    esp,0xc
c00250bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250c3:	83 ec 04             	sub    esp,0x4
c00250c6:	68 00 08 00 00       	push   0x800
c00250cb:	68 30 d0 02 c0       	push   0xc002d030
c00250d0:	50                   	push   eax
c00250d1:	e8 64 f7 fe ff       	call   c001483a <PhysicalDisk::PhysicalDisk(char const*, int)>
c00250d6:	83 c4 10             	add    esp,0x10
c00250d9:	ba dc d0 02 c0       	mov    edx,0xc002d0dc
c00250de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00250e2:	89 10                	mov    DWORD PTR [eax],edx
c00250e4:	90                   	nop
c00250e5:	83 c4 0c             	add    esp,0xc
c00250e8:	c3                   	ret    
c00250e9:	90                   	nop

c00250ea <SATAPI::diskRemoved()>:
c00250ea:	83 ec 18             	sub    esp,0x18
c00250ed:	68 3c d0 02 c0       	push   0xc002d03c
c00250f2:	e8 f8 de fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00250f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00250fb:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025102:	83 c4 1c             	add    esp,0x1c
c0025105:	c3                   	ret    

c0025106 <SATAPI::diskInserted()>:
c0025106:	53                   	push   ebx
c0025107:	83 ec 14             	sub    esp,0x14
c002510a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002510e:	68 53 d0 02 c0       	push   0xc002d053
c0025113:	e8 d7 de fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0025118:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c002511f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025122:	e8 7b f7 fe ff       	call   c00148a2 <PhysicalDisk::startCache()>
c0025127:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002512b:	83 c4 18             	add    esp,0x18
c002512e:	5b                   	pop    ebx
c002512f:	e9 f0 18 ff ff       	jmp    c0016a24 <createPartitionsForDisk(PhysicalDisk*)>

c0025134 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025134:	55                   	push   ebp
c0025135:	57                   	push   edi
c0025136:	56                   	push   esi
c0025137:	53                   	push   ebx
c0025138:	83 ec 24             	sub    esp,0x24
c002513b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c002513f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0025143:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0025149:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002514d:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0025151:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0025157:	8d 5f 02             	lea    ebx,[edi+0x2]
c002515a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025160:	c1 e3 07             	shl    ebx,0x7
c0025163:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025167:	89 f8                	mov    eax,edi
c0025169:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c002516d:	c1 e0 07             	shl    eax,0x7
c0025170:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025174:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025178:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0025182:	53                   	push   ebx
c0025183:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0025189:	e8 d6 eb ff ff       	call   c0023d64 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002518e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025192:	83 c4 10             	add    esp,0x10
c0025195:	b8 01 00 00 00       	mov    eax,0x1
c002519a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c002519f:	0f 84 8a 01 00 00    	je     c002532f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00251a5:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c00251ad:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c00251b3:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c00251b9:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00251bd:	c1 e1 05             	shl    ecx,0x5
c00251c0:	01 c8                	add    eax,ecx
c00251c2:	8b 08                	mov    ecx,DWORD PTR [eax]
c00251c4:	81 e1 80 ff 00 00    	and    ecx,0xff80
c00251ca:	81 c9 25 00 01 00    	or     ecx,0x10025
c00251d0:	89 08                	mov    DWORD PTR [eax],ecx
c00251d2:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c00251d8:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00251de:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00251e4:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00251e7:	52                   	push   edx
c00251e8:	68 90 00 00 00       	push   0x90
c00251ed:	6a 00                	push   0x0
c00251ef:	53                   	push   ebx
c00251f0:	e8 83 b5 fd ff       	call   c0000778 <memset>
c00251f5:	83 c4 0c             	add    esp,0xc
c00251f8:	8d 43 40             	lea    eax,[ebx+0x40]
c00251fb:	6a 0c                	push   0xc
c00251fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025201:	50                   	push   eax
c0025202:	e8 3d b5 fd ff       	call   c0000744 <memcpy>
c0025207:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c002520d:	89 ea                	mov    edx,ebp
c002520f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0025215:	c1 ea 18             	shr    edx,0x18
c0025218:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002521c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c002521f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0025222:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025226:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c002522c:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0025232:	25 00 00 c0 ff       	and    eax,0xffc00000
c0025237:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c002523b:	09 c8                	or     eax,ecx
c002523d:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025241:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025247:	66 8b 03             	mov    ax,WORD PTR [ebx]
c002524a:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0025251:	66 25 00 7f          	and    ax,0x7f00
c0025255:	66 0d 27 80          	or     ax,0x8027
c0025259:	66 89 03             	mov    WORD PTR [ebx],ax
c002525c:	89 e8                	mov    eax,ebp
c002525e:	c1 e8 10             	shr    eax,0x10
c0025261:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0025264:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0025268:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c002526b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002526f:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0025272:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025276:	83 c4 10             	add    esp,0x10
c0025279:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c002527d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025281:	31 c0                	xor    eax,eax
c0025283:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0025289:	80 e1 88             	and    cl,0x88
c002528c:	74 0a                	je     c0025298 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c002528e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025293:	74 0a                	je     c002529f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0025295:	40                   	inc    eax
c0025296:	eb eb                	jmp    c0025283 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0025298:	3d 40 42 0f 00       	cmp    eax,0xf4240
c002529d:	75 0f                	jne    c00252ae <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c002529f:	83 ec 0c             	sub    esp,0xc
c00252a2:	68 d9 cf 02 c0       	push   0xc002cfd9
c00252a7:	e8 f1 53 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c00252ac:	eb 3a                	jmp    c00252e8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c00252ae:	b8 01 00 00 00       	mov    eax,0x1
c00252b3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00252b7:	c1 e7 07             	shl    edi,0x7
c00252ba:	d3 e0                	shl    eax,cl
c00252bc:	03 3c 24             	add    edi,DWORD PTR [esp]
c00252bf:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c00252c5:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c00252cb:	85 d0                	test   eax,edx
c00252cd:	74 23                	je     c00252f2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c00252cf:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c00252d5:	0f ba e2 1e          	bt     edx,0x1e
c00252d9:	73 ea                	jae    c00252c5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c00252db:	83 ec 0c             	sub    esp,0xc
c00252de:	68 6b d0 02 c0       	push   0xc002d06b
c00252e3:	e8 07 dd fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00252e8:	83 c4 10             	add    esp,0x10
c00252eb:	b8 01 00 00 00       	mov    eax,0x1
c00252f0:	eb 3d                	jmp    c002532f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c00252f2:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c00252f8:	0f ba e0 1e          	bt     eax,0x1e
c00252fc:	73 0a                	jae    c0025308 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c00252fe:	83 ec 0c             	sub    esp,0xc
c0025301:	68 7e d0 02 c0       	push   0xc002d07e
c0025306:	eb db                	jmp    c00252e3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0025308:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c002530d:	74 1e                	je     c002532d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c002530f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0025314:	74 17                	je     c002532d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0025316:	50                   	push   eax
c0025317:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002531b:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0025321:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0025325:	e8 1a b4 fd ff       	call   c0000744 <memcpy>
c002532a:	83 c4 10             	add    esp,0x10
c002532d:	31 c0                	xor    eax,eax
c002532f:	83 c4 1c             	add    esp,0x1c
c0025332:	5b                   	pop    ebx
c0025333:	5e                   	pop    esi
c0025334:	5f                   	pop    edi
c0025335:	5d                   	pop    ebp
c0025336:	c3                   	ret    
c0025337:	90                   	nop

c0025338 <SATAPI::eject()>:
c0025338:	57                   	push   edi
c0025339:	b9 03 00 00 00       	mov    ecx,0x3
c002533e:	53                   	push   ebx
c002533f:	83 ec 14             	sub    esp,0x14
c0025342:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025346:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002534a:	fc                   	cld    
c002534b:	31 c0                	xor    eax,eax
c002534d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002534f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025354:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025359:	50                   	push   eax
c002535a:	6a 00                	push   0x0
c002535c:	6a 00                	push   0x0
c002535e:	6a 00                	push   0x0
c0025360:	6a 00                	push   0x0
c0025362:	6a 02                	push   0x2
c0025364:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025368:	50                   	push   eax
c0025369:	53                   	push   ebx
c002536a:	e8 c5 fd ff ff       	call   c0025134 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c002536f:	83 c4 14             	add    esp,0x14
c0025372:	53                   	push   ebx
c0025373:	e8 72 fd ff ff       	call   c00250ea <SATAPI::diskRemoved()>
c0025378:	83 c4 24             	add    esp,0x24
c002537b:	31 c0                	xor    eax,eax
c002537d:	5b                   	pop    ebx
c002537e:	5f                   	pop    edi
c002537f:	c3                   	ret    

c0025380 <SATAPI::detectMedia()>:
c0025380:	56                   	push   esi
c0025381:	53                   	push   ebx
c0025382:	83 ec 28             	sub    esp,0x28
c0025385:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025389:	6a 0c                	push   0xc
c002538b:	6a 00                	push   0x0
c002538d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025391:	56                   	push   esi
c0025392:	e8 e1 b3 fd ff       	call   c0000778 <memset>
c0025397:	83 c4 0c             	add    esp,0xc
c002539a:	6a 00                	push   0x0
c002539c:	6a 00                	push   0x0
c002539e:	6a 00                	push   0x0
c00253a0:	6a 00                	push   0x0
c00253a2:	6a 00                	push   0x0
c00253a4:	56                   	push   esi
c00253a5:	53                   	push   ebx
c00253a6:	e8 89 fd ff ff       	call   c0025134 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253ab:	83 c4 1c             	add    esp,0x1c
c00253ae:	6a 0c                	push   0xc
c00253b0:	6a 00                	push   0x0
c00253b2:	56                   	push   esi
c00253b3:	e8 c0 b3 fd ff       	call   c0000778 <memset>
c00253b8:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c00253bd:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c00253c2:	83 c4 0c             	add    esp,0xc
c00253c5:	6a 01                	push   0x1
c00253c7:	8d 44 24 16          	lea    eax,[esp+0x16]
c00253cb:	50                   	push   eax
c00253cc:	6a 00                	push   0x0
c00253ce:	6a 00                	push   0x0
c00253d0:	6a 12                	push   0x12
c00253d2:	56                   	push   esi
c00253d3:	53                   	push   ebx
c00253d4:	e8 5b fd ff ff       	call   c0025134 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c00253d9:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c00253dd:	83 c4 20             	add    esp,0x20
c00253e0:	83 e0 7f             	and    eax,0x7f
c00253e3:	3c 70                	cmp    al,0x70
c00253e5:	74 15                	je     c00253fc <SATAPI::detectMedia()+0x7c>
c00253e7:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c00253ee:	75 0c                	jne    c00253fc <SATAPI::detectMedia()+0x7c>
c00253f0:	83 ec 0c             	sub    esp,0xc
c00253f3:	53                   	push   ebx
c00253f4:	e8 0d fd ff ff       	call   c0025106 <SATAPI::diskInserted()>
c00253f9:	83 c4 10             	add    esp,0x10
c00253fc:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025400:	83 e0 0f             	and    eax,0xf
c0025403:	3c 02                	cmp    al,0x2
c0025405:	75 1b                	jne    c0025422 <SATAPI::detectMedia()+0xa2>
c0025407:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002540c:	75 2d                	jne    c002543b <SATAPI::detectMedia()+0xbb>
c002540e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025415:	74 24                	je     c002543b <SATAPI::detectMedia()+0xbb>
c0025417:	83 ec 0c             	sub    esp,0xc
c002541a:	53                   	push   ebx
c002541b:	e8 ca fc ff ff       	call   c00250ea <SATAPI::diskRemoved()>
c0025420:	eb 16                	jmp    c0025438 <SATAPI::detectMedia()+0xb8>
c0025422:	84 c0                	test   al,al
c0025424:	75 15                	jne    c002543b <SATAPI::detectMedia()+0xbb>
c0025426:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c002542d:	75 0c                	jne    c002543b <SATAPI::detectMedia()+0xbb>
c002542f:	83 ec 0c             	sub    esp,0xc
c0025432:	53                   	push   ebx
c0025433:	e8 ce fc ff ff       	call   c0025106 <SATAPI::diskInserted()>
c0025438:	83 c4 10             	add    esp,0x10
c002543b:	83 c4 24             	add    esp,0x24
c002543e:	5b                   	pop    ebx
c002543f:	5e                   	pop    esi
c0025440:	c3                   	ret    
c0025441:	90                   	nop

c0025442 <SATAPI::open(int, int, void*)>:
c0025442:	56                   	push   esi
c0025443:	53                   	push   ebx
c0025444:	50                   	push   eax
c0025445:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025449:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002544d:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025457:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c002545d:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025467:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002546b:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025475:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002547b:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025482:	e8 5e aa fe ff       	call   c000fee5 <Phys::allocatePage()>
c0025487:	89 c6                	mov    esi,eax
c0025489:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002548f:	81 c6 00 10 00 00    	add    esi,0x1000
c0025495:	e8 4b aa fe ff       	call   c000fee5 <Phys::allocatePage()>
c002549a:	39 c6                	cmp    esi,eax
c002549c:	74 10                	je     c00254ae <SATAPI::open(int, int, void*)+0x6c>
c002549e:	83 ec 0c             	sub    esp,0xc
c00254a1:	68 93 d0 02 c0       	push   0xc002d093
c00254a6:	e8 f2 51 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c00254ab:	83 c4 10             	add    esp,0x10
c00254ae:	83 ec 0c             	sub    esp,0xc
c00254b1:	6a 02                	push   0x2
c00254b3:	e8 c7 c6 fe ff       	call   c0011b7f <Virt::allocateKernelVirtualPages(int)>
c00254b8:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c00254be:	e8 57 c9 fe ff       	call   c0011e1a <Virt::getAKernelVAS()>
c00254c3:	6a 03                	push   0x3
c00254c5:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c00254cb:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c00254d1:	50                   	push   eax
c00254d2:	e8 95 ce fe ff       	call   c001236c <VAS::mapPage(unsigned long, unsigned long, int)>
c00254d7:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c00254de:	83 c4 14             	add    esp,0x14
c00254e1:	53                   	push   ebx
c00254e2:	e8 99 fe ff ff       	call   c0025380 <SATAPI::detectMedia()>
c00254e7:	83 c4 14             	add    esp,0x14
c00254ea:	31 c0                	xor    eax,eax
c00254ec:	5b                   	pop    ebx
c00254ed:	5e                   	pop    esi
c00254ee:	c3                   	ret    
c00254ef:	90                   	nop

c00254f0 <SATAPI::read(unsigned long long, int, void*)>:
c00254f0:	55                   	push   ebp
c00254f1:	57                   	push   edi
c00254f2:	56                   	push   esi
c00254f3:	53                   	push   ebx
c00254f4:	83 ec 1c             	sub    esp,0x1c
c00254f7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00254fb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00254ff:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025503:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002550a:	74 19                	je     c0025525 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002550c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025511:	7e 2e                	jle    c0025541 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025513:	83 ec 0c             	sub    esp,0xc
c0025516:	68 a9 d0 02 c0       	push   0xc002d0a9
c002551b:	e8 7d 51 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0025520:	83 c4 10             	add    esp,0x10
c0025523:	eb 1c                	jmp    c0025541 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025525:	83 ec 0c             	sub    esp,0xc
c0025528:	55                   	push   ebp
c0025529:	e8 52 fe ff ff       	call   c0025380 <SATAPI::detectMedia()>
c002552e:	83 c4 10             	add    esp,0x10
c0025531:	b8 02 00 00 00       	mov    eax,0x2
c0025536:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002553d:	75 cd                	jne    c002550c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c002553f:	eb 49                	jmp    c002558a <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025541:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025545:	b9 03 00 00 00       	mov    ecx,0x3
c002554a:	fc                   	cld    
c002554b:	31 c0                	xor    eax,eax
c002554d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002554f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025554:	89 d8                	mov    eax,ebx
c0025556:	86 e0                	xchg   al,ah
c0025558:	c1 c0 10             	rol    eax,0x10
c002555b:	86 e0                	xchg   al,ah
c002555d:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025561:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025565:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025569:	50                   	push   eax
c002556a:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c002556e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025572:	56                   	push   esi
c0025573:	53                   	push   ebx
c0025574:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025578:	c1 e0 0b             	shl    eax,0xb
c002557b:	50                   	push   eax
c002557c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025580:	50                   	push   eax
c0025581:	55                   	push   ebp
c0025582:	e8 ad fb ff ff       	call   c0025134 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025587:	83 c4 20             	add    esp,0x20
c002558a:	83 c4 1c             	add    esp,0x1c
c002558d:	5b                   	pop    ebx
c002558e:	5e                   	pop    esi
c002558f:	5f                   	pop    edi
c0025590:	5d                   	pop    ebp
c0025591:	c3                   	ret    

c0025592 <AVX::open(int, int, void*)>:
c0025592:	83 ec 0c             	sub    esp,0xc
c0025595:	e8 3e 11 00 00       	call   c00266d8 <avxInit>
c002559a:	b8 00 00 00 00       	mov    eax,0x0
c002559f:	83 c4 0c             	add    esp,0xc
c00255a2:	c3                   	ret    
c00255a3:	90                   	nop

c00255a4 <AVX::close(int, int, void*)>:
c00255a4:	83 ec 0c             	sub    esp,0xc
c00255a7:	e8 2d 11 00 00       	call   c00266d9 <avxClose>
c00255ac:	b8 00 00 00 00       	mov    eax,0x0
c00255b1:	83 c4 0c             	add    esp,0xc
c00255b4:	c3                   	ret    
c00255b5:	90                   	nop

c00255b6 <AVX::available()>:
c00255b6:	83 ec 0c             	sub    esp,0xc
c00255b9:	e8 12 11 00 00       	call   c00266d0 <avxDetect>
c00255be:	85 c0                	test   eax,eax
c00255c0:	0f 95 c0             	setne  al
c00255c3:	83 c4 0c             	add    esp,0xc
c00255c6:	c3                   	ret    
c00255c7:	90                   	nop

c00255c8 <AVX::save(void*)>:
c00255c8:	83 ec 0c             	sub    esp,0xc
c00255cb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255cf:	83 ec 0c             	sub    esp,0xc
c00255d2:	50                   	push   eax
c00255d3:	e8 fe 10 00 00       	call   c00266d6 <avxSave>
c00255d8:	83 c4 10             	add    esp,0x10
c00255db:	90                   	nop
c00255dc:	83 c4 0c             	add    esp,0xc
c00255df:	c3                   	ret    

c00255e0 <AVX::load(void*)>:
c00255e0:	83 ec 0c             	sub    esp,0xc
c00255e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00255e7:	83 ec 0c             	sub    esp,0xc
c00255ea:	50                   	push   eax
c00255eb:	e8 e7 10 00 00       	call   c00266d7 <avxLoad>
c00255f0:	83 c4 10             	add    esp,0x10
c00255f3:	90                   	nop
c00255f4:	83 c4 0c             	add    esp,0xc
c00255f7:	c3                   	ret    

c00255f8 <AVX::AVX()>:
c00255f8:	83 ec 0c             	sub    esp,0xc
c00255fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00255ff:	83 ec 08             	sub    esp,0x8
c0025602:	68 0c d1 02 c0       	push   0xc002d10c
c0025607:	50                   	push   eax
c0025608:	e8 0b f3 fe ff       	call   c0014918 <FPU::FPU(char const*)>
c002560d:	83 c4 10             	add    esp,0x10
c0025610:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c0025615:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025619:	89 10                	mov    DWORD PTR [eax],edx
c002561b:	90                   	nop
c002561c:	83 c4 0c             	add    esp,0xc
c002561f:	c3                   	ret    

c0025620 <MMX::available()>:
c0025620:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0025625:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c002562b:	83 e0 20             	and    eax,0x20
c002562e:	84 c0                	test   al,al
c0025630:	0f 95 c0             	setne  al
c0025633:	c3                   	ret    

c0025634 <MMX::open(int, int, void*)>:
c0025634:	83 ec 0c             	sub    esp,0xc
c0025637:	e8 20 11 00 00       	call   c002675c <x87Init>
c002563c:	b8 00 00 00 00       	mov    eax,0x0
c0025641:	83 c4 0c             	add    esp,0xc
c0025644:	c3                   	ret    
c0025645:	90                   	nop

c0025646 <MMX::close(int, int, void*)>:
c0025646:	83 ec 0c             	sub    esp,0xc
c0025649:	e8 28 11 00 00       	call   c0026776 <x87Close>
c002564e:	b8 00 00 00 00       	mov    eax,0x0
c0025653:	83 c4 0c             	add    esp,0xc
c0025656:	c3                   	ret    
c0025657:	90                   	nop

c0025658 <MMX::save(void*)>:
c0025658:	83 ec 0c             	sub    esp,0xc
c002565b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002565f:	83 ec 0c             	sub    esp,0xc
c0025662:	50                   	push   eax
c0025663:	e8 e9 10 00 00       	call   c0026751 <x87Save>
c0025668:	83 c4 10             	add    esp,0x10
c002566b:	90                   	nop
c002566c:	83 c4 0c             	add    esp,0xc
c002566f:	c3                   	ret    

c0025670 <MMX::load(void*)>:
c0025670:	83 ec 0c             	sub    esp,0xc
c0025673:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025677:	83 ec 0c             	sub    esp,0xc
c002567a:	50                   	push   eax
c002567b:	e8 d7 10 00 00       	call   c0026757 <x87Load>
c0025680:	83 c4 10             	add    esp,0x10
c0025683:	90                   	nop
c0025684:	83 c4 0c             	add    esp,0xc
c0025687:	c3                   	ret    

c0025688 <MMX::MMX()>:
c0025688:	83 ec 0c             	sub    esp,0xc
c002568b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002568f:	83 ec 08             	sub    esp,0x8
c0025692:	68 4c d1 02 c0       	push   0xc002d14c
c0025697:	50                   	push   eax
c0025698:	e8 7b f2 fe ff       	call   c0014918 <FPU::FPU(char const*)>
c002569d:	83 c4 10             	add    esp,0x10
c00256a0:	ba 5c d1 02 c0       	mov    edx,0xc002d15c
c00256a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00256a9:	89 10                	mov    DWORD PTR [eax],edx
c00256ab:	90                   	nop
c00256ac:	83 c4 0c             	add    esp,0xc
c00256af:	c3                   	ret    

c00256b0 <SSE::open(int, int, void*)>:
c00256b0:	83 ec 0c             	sub    esp,0xc
c00256b3:	e8 5c 10 00 00       	call   c0026714 <sseInit>
c00256b8:	b8 00 00 00 00       	mov    eax,0x0
c00256bd:	83 c4 0c             	add    esp,0xc
c00256c0:	c3                   	ret    
c00256c1:	90                   	nop

c00256c2 <SSE::close(int, int, void*)>:
c00256c2:	83 ec 0c             	sub    esp,0xc
c00256c5:	e8 5a 10 00 00       	call   c0026724 <sseClose>
c00256ca:	b8 00 00 00 00       	mov    eax,0x0
c00256cf:	83 c4 0c             	add    esp,0xc
c00256d2:	c3                   	ret    
c00256d3:	90                   	nop

c00256d4 <SSE::available()>:
c00256d4:	83 ec 1c             	sub    esp,0x1c
c00256d7:	e8 14 10 00 00       	call   c00266f0 <absolutelyNoChanceInHell>
c00256dc:	85 c0                	test   eax,eax
c00256de:	0f 95 c0             	setne  al
c00256e1:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00256e5:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c00256e9:	83 c4 1c             	add    esp,0x1c
c00256ec:	c3                   	ret    
c00256ed:	90                   	nop

c00256ee <SSE::save(void*)>:
c00256ee:	83 ec 0c             	sub    esp,0xc
c00256f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00256f5:	83 ec 0c             	sub    esp,0xc
c00256f8:	50                   	push   eax
c00256f9:	e8 0a 10 00 00       	call   c0026708 <sseSave>
c00256fe:	83 c4 10             	add    esp,0x10
c0025701:	90                   	nop
c0025702:	83 c4 0c             	add    esp,0xc
c0025705:	c3                   	ret    

c0025706 <SSE::load(void*)>:
c0025706:	83 ec 0c             	sub    esp,0xc
c0025709:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002570d:	83 ec 0c             	sub    esp,0xc
c0025710:	50                   	push   eax
c0025711:	e8 f8 0f 00 00       	call   c002670e <sseLoad>
c0025716:	83 c4 10             	add    esp,0x10
c0025719:	90                   	nop
c002571a:	83 c4 0c             	add    esp,0xc
c002571d:	c3                   	ret    

c002571e <SSE::SSE()>:
c002571e:	83 ec 0c             	sub    esp,0xc
c0025721:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025725:	83 ec 08             	sub    esp,0x8
c0025728:	68 8c d1 02 c0       	push   0xc002d18c
c002572d:	50                   	push   eax
c002572e:	e8 e5 f1 fe ff       	call   c0014918 <FPU::FPU(char const*)>
c0025733:	83 c4 10             	add    esp,0x10
c0025736:	ba 9c d1 02 c0       	mov    edx,0xc002d19c
c002573b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002573f:	89 10                	mov    DWORD PTR [eax],edx
c0025741:	90                   	nop
c0025742:	83 c4 0c             	add    esp,0xc
c0025745:	c3                   	ret    

c0025746 <x87::open(int, int, void*)>:
c0025746:	83 ec 0c             	sub    esp,0xc
c0025749:	e8 0e 10 00 00       	call   c002675c <x87Init>
c002574e:	b8 00 00 00 00       	mov    eax,0x0
c0025753:	83 c4 0c             	add    esp,0xc
c0025756:	c3                   	ret    
c0025757:	90                   	nop

c0025758 <x87::close(int, int, void*)>:
c0025758:	83 ec 0c             	sub    esp,0xc
c002575b:	e8 16 10 00 00       	call   c0026776 <x87Close>
c0025760:	b8 00 00 00 00       	mov    eax,0x0
c0025765:	83 c4 0c             	add    esp,0xc
c0025768:	c3                   	ret    
c0025769:	90                   	nop

c002576a <x87::available()>:
c002576a:	83 ec 0c             	sub    esp,0xc
c002576d:	e8 c4 0f 00 00       	call   c0026736 <x87Detect>
c0025772:	85 c0                	test   eax,eax
c0025774:	0f 95 c0             	setne  al
c0025777:	83 c4 0c             	add    esp,0xc
c002577a:	c3                   	ret    
c002577b:	90                   	nop

c002577c <x87::save(void*)>:
c002577c:	83 ec 0c             	sub    esp,0xc
c002577f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025783:	83 ec 0c             	sub    esp,0xc
c0025786:	50                   	push   eax
c0025787:	e8 c5 0f 00 00       	call   c0026751 <x87Save>
c002578c:	83 c4 10             	add    esp,0x10
c002578f:	90                   	nop
c0025790:	83 c4 0c             	add    esp,0xc
c0025793:	c3                   	ret    

c0025794 <x87::load(void*)>:
c0025794:	83 ec 0c             	sub    esp,0xc
c0025797:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002579b:	83 ec 0c             	sub    esp,0xc
c002579e:	50                   	push   eax
c002579f:	e8 b3 0f 00 00       	call   c0026757 <x87Load>
c00257a4:	83 c4 10             	add    esp,0x10
c00257a7:	90                   	nop
c00257a8:	83 c4 0c             	add    esp,0xc
c00257ab:	c3                   	ret    

c00257ac <x87::x87()>:
c00257ac:	83 ec 0c             	sub    esp,0xc
c00257af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257b3:	83 ec 08             	sub    esp,0x8
c00257b6:	68 cc d1 02 c0       	push   0xc002d1cc
c00257bb:	50                   	push   eax
c00257bc:	e8 57 f1 fe ff       	call   c0014918 <FPU::FPU(char const*)>
c00257c1:	83 c4 10             	add    esp,0x10
c00257c4:	ba dc d1 02 c0       	mov    edx,0xc002d1dc
c00257c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257cd:	89 10                	mov    DWORD PTR [eax],edx
c00257cf:	90                   	nop
c00257d0:	83 c4 0c             	add    esp,0xc
c00257d3:	c3                   	ret    

c00257d4 <APIC::disable()>:
c00257d4:	90                   	nop
c00257d5:	c3                   	ret    

c00257d6 <APIC::close(int, int, void*)>:
c00257d6:	55                   	push   ebp
c00257d7:	89 e5                	mov    ebp,esp
c00257d9:	83 ec 08             	sub    esp,0x8
c00257dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00257df:	8b 00                	mov    eax,DWORD PTR [eax]
c00257e1:	83 c0 3c             	add    eax,0x3c
c00257e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00257e6:	83 ec 0c             	sub    esp,0xc
c00257e9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00257ec:	ff d0                	call   eax
c00257ee:	83 c4 10             	add    esp,0x10
c00257f1:	b8 00 00 00 00       	mov    eax,0x0
c00257f6:	c9                   	leave  
c00257f7:	c3                   	ret    

c00257f8 <IOAPIC::close(int, int, void*)>:
c00257f8:	b8 00 00 00 00       	mov    eax,0x0
c00257fd:	c3                   	ret    

c00257fe <APIC::io_wait()>:
c00257fe:	eb 00                	jmp    c0025800 <APIC::io_wait()+0x2>
c0025800:	eb 00                	jmp    c0025802 <APIC::io_wait()+0x4>
c0025802:	90                   	nop
c0025803:	c3                   	ret    

c0025804 <APIC::getBase()>:
c0025804:	55                   	push   ebp
c0025805:	89 e5                	mov    ebp,esp
c0025807:	83 ec 18             	sub    esp,0x18
c002580a:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c002580f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025815:	83 e0 08             	and    eax,0x8
c0025818:	84 c0                	test   al,al
c002581a:	75 07                	jne    c0025823 <APIC::getBase()+0x1f>
c002581c:	b8 00 00 00 00       	mov    eax,0x0
c0025821:	eb 21                	jmp    c0025844 <APIC::getBase()+0x40>
c0025823:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0025828:	83 ec 08             	sub    esp,0x8
c002582b:	6a 1b                	push   0x1b
c002582d:	50                   	push   eax
c002582e:	e8 b5 95 fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0025833:	83 c4 10             	add    esp,0x10
c0025836:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025839:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002583c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002583f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025844:	c9                   	leave  
c0025845:	c3                   	ret    

c0025846 <APIC::eoi(unsigned char)>:
c0025846:	55                   	push   ebp
c0025847:	89 e5                	mov    ebp,esp
c0025849:	83 ec 28             	sub    esp,0x28
c002584c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002584f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025852:	83 ec 0c             	sub    esp,0xc
c0025855:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025858:	e8 a7 ff ff ff       	call   c0025804 <APIC::getBase()>
c002585d:	83 c4 10             	add    esp,0x10
c0025860:	05 b0 00 00 00       	add    eax,0xb0
c0025865:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025868:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c002586b:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025871:	90                   	nop
c0025872:	c9                   	leave  
c0025873:	c3                   	ret    

c0025874 <APIC::open(int, int, void*)>:
c0025874:	55                   	push   ebp
c0025875:	89 e5                	mov    ebp,esp
c0025877:	57                   	push   edi
c0025878:	56                   	push   esi
c0025879:	53                   	push   ebx
c002587a:	83 ec 2c             	sub    esp,0x2c
c002587d:	83 ec 0c             	sub    esp,0xc
c0025880:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025883:	e8 7c ff ff ff       	call   c0025804 <APIC::getBase()>
c0025888:	83 c4 10             	add    esp,0x10
c002588b:	89 c2                	mov    edx,eax
c002588d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025890:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025896:	0f b6 f8             	movzx  edi,al
c0025899:	89 d0                	mov    eax,edx
c002589b:	ba 00 00 00 00       	mov    edx,0x0
c00258a0:	89 c1                	mov    ecx,eax
c00258a2:	80 e5 ff             	and    ch,0xff
c00258a5:	89 cb                	mov    ebx,ecx
c00258a7:	0f b6 f2             	movzx  esi,dl
c00258aa:	89 d8                	mov    eax,ebx
c00258ac:	89 f2                	mov    edx,esi
c00258ae:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258b1:	8d 5f 08             	lea    ebx,[edi+0x8]
c00258b4:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00258b8:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00258bc:	83 e0 00             	and    eax,0x0
c00258bf:	09 d0                	or     eax,edx
c00258c1:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c00258c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258c8:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00258ce:	8d 50 01             	lea    edx,[eax+0x1]
c00258d1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00258d4:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c00258da:	0f b6 d0             	movzx  edx,al
c00258dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00258e0:	83 c2 08             	add    edx,0x8
c00258e3:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c00258e7:	0f b6 c9             	movzx  ecx,cl
c00258ea:	81 c9 00 00 01 00    	or     ecx,0x10000
c00258f0:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00258f4:	83 ec 0c             	sub    esp,0xc
c00258f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258fa:	e8 05 ff ff ff       	call   c0025804 <APIC::getBase()>
c00258ff:	83 c4 10             	add    esp,0x10
c0025902:	05 f0 00 00 00       	add    eax,0xf0
c0025907:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002590a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002590d:	8b 00                	mov    eax,DWORD PTR [eax]
c002590f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025912:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025919:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0025920:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025923:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025926:	89 10                	mov    DWORD PTR [eax],edx
c0025928:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002592f:	a1 10 0e 03 c0       	mov    eax,ds:0xc0030e10
c0025934:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0025937:	7d 7c                	jge    c00259b5 <APIC::open(int, int, void*)+0x141>
c0025939:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002593c:	8b 04 85 20 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1e0]
c0025943:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0025946:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0025949:	8b 04 85 20 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1e0]
c0025950:	c1 e8 08             	shr    eax,0x8
c0025953:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c0025957:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002595a:	8b 04 85 20 0e 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf1e0]
c0025961:	c1 e8 18             	shr    eax,0x18
c0025964:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c0025967:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c002596b:	75 40                	jne    c00259ad <APIC::open(int, int, void*)+0x139>
c002596d:	83 ec 0c             	sub    esp,0xc
c0025970:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025973:	e8 8c fe ff ff       	call   c0025804 <APIC::getBase()>
c0025978:	83 c4 10             	add    esp,0x10
c002597b:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c002597f:	75 07                	jne    c0025988 <APIC::open(int, int, void*)+0x114>
c0025981:	ba 60 03 00 00       	mov    edx,0x360
c0025986:	eb 05                	jmp    c002598d <APIC::open(int, int, void*)+0x119>
c0025988:	ba 50 03 00 00       	mov    edx,0x350
c002598d:	01 d0                	add    eax,edx
c002598f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025992:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025995:	8b 00                	mov    eax,DWORD PTR [eax]
c0025997:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002599a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00259a1:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00259a5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00259a8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00259ab:	89 10                	mov    DWORD PTR [eax],edx
c00259ad:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c00259b0:	e9 7a ff ff ff       	jmp    c002592f <APIC::open(int, int, void*)+0xbb>
c00259b5:	b8 00 00 00 00       	mov    eax,0x0
c00259ba:	8d 65 f4             	lea    esp,[ebp-0xc]
c00259bd:	5b                   	pop    ebx
c00259be:	5e                   	pop    esi
c00259bf:	5f                   	pop    edi
c00259c0:	5d                   	pop    ebp
c00259c1:	c3                   	ret    

c00259c2 <IOAPIC::IOAPIC()>:
c00259c2:	83 ec 0c             	sub    esp,0xc
c00259c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259c9:	83 ec 08             	sub    esp,0x8
c00259cc:	68 0c d2 02 c0       	push   0xc002d20c
c00259d1:	50                   	push   eax
c00259d2:	e8 2f ec fe ff       	call   c0014606 <Device::Device(char const*)>
c00259d7:	83 c4 10             	add    esp,0x10
c00259da:	ba 34 d3 02 c0       	mov    edx,0xc002d334
c00259df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00259e3:	89 10                	mov    DWORD PTR [eax],edx
c00259e5:	90                   	nop
c00259e6:	83 c4 0c             	add    esp,0xc
c00259e9:	c3                   	ret    

c00259ea <APIC::APIC()>:
c00259ea:	53                   	push   ebx
c00259eb:	83 ec 18             	sub    esp,0x18
c00259ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00259f2:	83 ec 08             	sub    esp,0x8
c00259f5:	68 14 d2 02 c0       	push   0xc002d214
c00259fa:	50                   	push   eax
c00259fb:	e8 72 f3 fe ff       	call   c0014d72 <InterruptController::InterruptController(char const*)>
c0025a00:	83 c4 10             	add    esp,0x10
c0025a03:	ba ec d2 02 c0       	mov    edx,0xc002d2ec
c0025a08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025a0c:	89 10                	mov    DWORD PTR [eax],edx
c0025a0e:	a0 e0 28 03 c0       	mov    al,ds:0xc00328e0
c0025a13:	83 f0 01             	xor    eax,0x1
c0025a16:	84 c0                	test   al,al
c0025a18:	0f 84 a1 00 00 00    	je     c0025abf <APIC::APIC()+0xd5>
c0025a1e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0025a23:	a0 c0 0e 03 c0       	mov    al,ds:0xc0030ec0
c0025a28:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c0025a2c:	0f 83 86 00 00 00    	jae    c0025ab8 <APIC::APIC()+0xce>
c0025a32:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c0025a3a:	83 ec 0c             	sub    esp,0xc
c0025a3d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a41:	e8 fd 9d fe ff       	call   c000f843 <malloc>
c0025a46:	83 c4 10             	add    esp,0x10
c0025a49:	89 c3                	mov    ebx,eax
c0025a4b:	83 ec 0c             	sub    esp,0xc
c0025a4e:	53                   	push   ebx
c0025a4f:	e8 6e ff ff ff       	call   c00259c2 <IOAPIC::IOAPIC()>
c0025a54:	83 c4 10             	add    esp,0x10
c0025a57:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0025a5b:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0025a60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0025a64:	89 14 85 c0 28 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd740],edx
c0025a6b:	a1 a0 28 03 c0       	mov    eax,ds:0xc00328a0
c0025a70:	40                   	inc    eax
c0025a71:	a3 a0 28 03 c0       	mov    ds:0xc00328a0,eax
c0025a76:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0025a7b:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025a81:	83 ec 08             	sub    esp,0x8
c0025a84:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025a88:	50                   	push   eax
c0025a89:	e8 88 e9 fe ff       	call   c0014416 <Device::addChild(Device*)>
c0025a8e:	83 c4 10             	add    esp,0x10
c0025a91:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025a95:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a97:	83 c0 08             	add    eax,0x8
c0025a9a:	8b 00                	mov    eax,DWORD PTR [eax]
c0025a9c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025aa1:	6a 00                	push   0x0
c0025aa3:	6a 00                	push   0x0
c0025aa5:	52                   	push   edx
c0025aa6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0025aaa:	ff d0                	call   eax
c0025aac:	83 c4 10             	add    esp,0x10
c0025aaf:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025ab3:	e9 6b ff ff ff       	jmp    c0025a23 <APIC::APIC()+0x39>
c0025ab8:	c6 05 e0 28 03 c0 01 	mov    BYTE PTR ds:0xc00328e0,0x1
c0025abf:	90                   	nop
c0025ac0:	83 c4 18             	add    esp,0x18
c0025ac3:	5b                   	pop    ebx
c0025ac4:	c3                   	ret    
c0025ac5:	90                   	nop

c0025ac6 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025ac6:	55                   	push   ebp
c0025ac7:	89 e5                	mov    ebp,esp
c0025ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025acc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025ad2:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025ad5:	72 1d                	jb     c0025af4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025ad7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ada:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025ae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025ae3:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025ae9:	01 d0                	add    eax,edx
c0025aeb:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025aee:	73 04                	jae    c0025af4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025af0:	b0 01                	mov    al,0x1
c0025af2:	eb 02                	jmp    c0025af6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025af4:	b0 00                	mov    al,0x0
c0025af6:	5d                   	pop    ebp
c0025af7:	c3                   	ret    

c0025af8 <IOAPIC::read(int)>:
c0025af8:	55                   	push   ebp
c0025af9:	89 e5                	mov    ebp,esp
c0025afb:	83 ec 10             	sub    esp,0x10
c0025afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b01:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025b07:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025b0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025b0d:	0f b6 d0             	movzx  edx,al
c0025b10:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b13:	89 10                	mov    DWORD PTR [eax],edx
c0025b15:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025b18:	83 c0 10             	add    eax,0x10
c0025b1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0025b1d:	c9                   	leave  
c0025b1e:	c3                   	ret    
c0025b1f:	90                   	nop

c0025b20 <IOAPIC::open(int, int, void*)>:
c0025b20:	55                   	push   ebp
c0025b21:	89 e5                	mov    ebp,esp
c0025b23:	57                   	push   edi
c0025b24:	56                   	push   esi
c0025b25:	53                   	push   ebx
c0025b26:	83 ec 0c             	sub    esp,0xc
c0025b29:	83 ec 0c             	sub    esp,0xc
c0025b2c:	68 3f d2 02 c0       	push   0xc002d23f
c0025b31:	e8 b9 d4 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0025b36:	83 c4 10             	add    esp,0x10
c0025b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b3c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025b3f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b48:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b4e:	8b 14 85 00 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf100]
c0025b55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b58:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0025b5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b61:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0025b67:	8b 14 85 80 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf080]
c0025b6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b71:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0025b77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b7a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025b83:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025b89:	0f b6 f8             	movzx  edi,al
c0025b8c:	89 d0                	mov    eax,edx
c0025b8e:	ba 00 00 00 00       	mov    edx,0x0
c0025b93:	89 c1                	mov    ecx,eax
c0025b95:	80 e5 ff             	and    ch,0xff
c0025b98:	89 cb                	mov    ebx,ecx
c0025b9a:	0f b6 f2             	movzx  esi,dl
c0025b9d:	89 d8                	mov    eax,ebx
c0025b9f:	89 f2                	mov    edx,esi
c0025ba1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025ba4:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025ba7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025bab:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025baf:	83 e0 00             	and    eax,0x0
c0025bb2:	09 d0                	or     eax,edx
c0025bb4:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bbb:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025bc1:	8d 50 01             	lea    edx,[eax+0x1]
c0025bc4:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025bc7:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0025bcd:	0f b6 d0             	movzx  edx,al
c0025bd0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025bd3:	83 c2 08             	add    edx,0x8
c0025bd6:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025bda:	0f b6 c9             	movzx  ecx,cl
c0025bdd:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025be3:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025be7:	83 ec 08             	sub    esp,0x8
c0025bea:	6a 01                	push   0x1
c0025bec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025bef:	e8 04 ff ff ff       	call   c0025af8 <IOAPIC::read(int)>
c0025bf4:	83 c4 10             	add    esp,0x10
c0025bf7:	c1 f8 10             	sar    eax,0x10
c0025bfa:	0f b6 c0             	movzx  eax,al
c0025bfd:	8d 50 01             	lea    edx,[eax+0x1]
c0025c00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c03:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025c09:	b8 00 00 00 00       	mov    eax,0x0
c0025c0e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025c11:	5b                   	pop    ebx
c0025c12:	5e                   	pop    esi
c0025c13:	5f                   	pop    edi
c0025c14:	5d                   	pop    ebp
c0025c15:	c3                   	ret    

c0025c16 <IOAPIC::write(int, int)>:
c0025c16:	55                   	push   ebp
c0025c17:	89 e5                	mov    ebp,esp
c0025c19:	83 ec 10             	sub    esp,0x10
c0025c1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025c1f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025c25:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0025c28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c2b:	0f b6 d0             	movzx  edx,al
c0025c2e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c31:	89 10                	mov    DWORD PTR [eax],edx
c0025c33:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c36:	8d 50 10             	lea    edx,[eax+0x10]
c0025c39:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c3c:	89 02                	mov    DWORD PTR [edx],eax
c0025c3e:	90                   	nop
c0025c3f:	c9                   	leave  
c0025c40:	c3                   	ret    
c0025c41:	90                   	nop

c0025c42 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0025c42:	55                   	push   ebp
c0025c43:	89 e5                	mov    ebp,esp
c0025c45:	53                   	push   ebx
c0025c46:	83 ec 2c             	sub    esp,0x2c
c0025c49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c4c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c0025c4f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c0025c52:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c0025c55:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025c58:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0025c5b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0025c5e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025c61:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025c64:	88 d8                	mov    al,bl
c0025c66:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c0025c69:	88 c8                	mov    al,cl
c0025c6b:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025c6e:	88 d0                	mov    al,dl
c0025c70:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c0025c73:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c77:	83 c0 08             	add    eax,0x8
c0025c7a:	01 c0                	add    eax,eax
c0025c7c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025c7f:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025c83:	83 c0 08             	add    eax,0x8
c0025c86:	01 c0                	add    eax,eax
c0025c88:	40                   	inc    eax
c0025c89:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0025c8c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025c8f:	50                   	push   eax
c0025c90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c93:	e8 60 fe ff ff       	call   c0025af8 <IOAPIC::read(int)>
c0025c98:	83 c4 08             	add    esp,0x8
c0025c9b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0025c9e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025ca5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025ca8:	c1 e0 18             	shl    eax,0x18
c0025cab:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c0025cae:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025cb1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025cb4:	52                   	push   edx
c0025cb5:	50                   	push   eax
c0025cb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cb9:	e8 58 ff ff ff       	call   c0025c16 <IOAPIC::write(int, int)>
c0025cbe:	83 c4 0c             	add    esp,0xc
c0025cc1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025cc4:	50                   	push   eax
c0025cc5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cc8:	e8 2b fe ff ff       	call   c0025af8 <IOAPIC::read(int)>
c0025ccd:	83 c4 08             	add    esp,0x8
c0025cd0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025cd3:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c0025cda:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025ce1:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025ce8:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025cec:	74 09                	je     c0025cf7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c0025cee:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025cf5:	eb 07                	jmp    c0025cfe <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025cf7:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c0025cfe:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025d02:	74 09                	je     c0025d0d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025d04:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c0025d0b:	eb 07                	jmp    c0025d14 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c0025d0d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025d14:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c0025d1b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c0025d1f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0025d22:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0025d25:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d28:	52                   	push   edx
c0025d29:	50                   	push   eax
c0025d2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d2d:	e8 e4 fe ff ff       	call   c0025c16 <IOAPIC::write(int, int)>
c0025d32:	83 c4 0c             	add    esp,0xc
c0025d35:	90                   	nop
c0025d36:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0025d39:	c9                   	leave  
c0025d3a:	c3                   	ret    
c0025d3b:	90                   	nop

c0025d3c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0025d3c:	55                   	push   ebp
c0025d3d:	89 e5                	mov    ebp,esp
c0025d3f:	57                   	push   edi
c0025d40:	56                   	push   esi
c0025d41:	53                   	push   ebx
c0025d42:	83 ec 2c             	sub    esp,0x2c
c0025d45:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0025d48:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c0025d4b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025d4f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c0025d53:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c0025d57:	74 5a                	je     c0025db3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d59:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0025d5d:	7f 44                	jg     c0025da3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c0025d5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d62:	05 80 d7 02 c0       	add    eax,0xc002d780
c0025d67:	8a 00                	mov    al,BYTE PTR [eax]
c0025d69:	0f b6 c0             	movzx  eax,al
c0025d6c:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0025d6f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d72:	66 8b 84 00 a0 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf160]
c0025d7a:	0f b7 c0             	movzx  eax,ax
c0025d7d:	83 e0 02             	and    eax,0x2
c0025d80:	85 c0                	test   eax,eax
c0025d82:	74 04                	je     c0025d88 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025d84:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025d88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025d8b:	66 8b 84 00 a0 0e 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf160]
c0025d93:	0f b7 c0             	movzx  eax,ax
c0025d96:	83 e0 08             	and    eax,0x8
c0025d99:	85 c0                	test   eax,eax
c0025d9b:	74 16                	je     c0025db3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025d9d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025da1:	eb 10                	jmp    c0025db3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025da3:	83 ec 0c             	sub    esp,0xc
c0025da6:	68 50 d2 02 c0       	push   0xc002d250
c0025dab:	e8 ed 48 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0025db0:	83 c4 10             	add    esp,0x10
c0025db3:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025db7:	a1 a0 28 03 c0       	mov    eax,ds:0xc00328a0
c0025dbc:	83 ec 08             	sub    esp,0x8
c0025dbf:	50                   	push   eax
c0025dc0:	68 88 d2 02 c0       	push   0xc002d288
c0025dc5:	e8 25 d2 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0025dca:	83 c4 10             	add    esp,0x10
c0025dcd:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025dd4:	a1 a0 28 03 c0       	mov    eax,ds:0xc00328a0
c0025dd9:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c0025ddc:	7d 67                	jge    c0025e45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025dde:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025de1:	8b 04 85 c0 28 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcd740]
c0025de8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025deb:	83 ec 08             	sub    esp,0x8
c0025dee:	52                   	push   edx
c0025def:	50                   	push   eax
c0025df0:	e8 d1 fc ff ff       	call   c0025ac6 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025df5:	83 c4 10             	add    esp,0x10
c0025df8:	84 c0                	test   al,al
c0025dfa:	74 44                	je     c0025e40 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c0025dfc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025dff:	8b 1c 85 c0 28 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcd740]
c0025e06:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c0025e0a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025e0d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025e11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025e14:	83 c0 20             	add    eax,0x20
c0025e17:	0f b6 f0             	movzx  esi,al
c0025e1a:	b8 00 00 00 00       	mov    eax,0x0
c0025e1f:	99                   	cdq    
c0025e20:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0025e23:	0f b6 c9             	movzx  ecx,cl
c0025e26:	83 ec 04             	sub    esp,0x4
c0025e29:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c0025e2c:	57                   	push   edi
c0025e2d:	56                   	push   esi
c0025e2e:	52                   	push   edx
c0025e2f:	50                   	push   eax
c0025e30:	51                   	push   ecx
c0025e31:	53                   	push   ebx
c0025e32:	e8 0b fe ff ff       	call   c0025c42 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0025e37:	83 c4 20             	add    esp,0x20
c0025e3a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c0025e3e:	eb 05                	jmp    c0025e45 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0025e40:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0025e43:	eb 8f                	jmp    c0025dd4 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0025e45:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0025e48:	83 f0 01             	xor    eax,0x1
c0025e4b:	84 c0                	test   al,al
c0025e4d:	74 10                	je     c0025e5f <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c0025e4f:	83 ec 0c             	sub    esp,0xc
c0025e52:	68 9f d2 02 c0       	push   0xc002d29f
c0025e57:	e8 41 48 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0025e5c:	83 c4 10             	add    esp,0x10
c0025e5f:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c0025e63:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c0025e6a:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c0025e6e:	7f 65                	jg     c0025ed5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c0025e70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e73:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e76:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e7d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e80:	01 ca                	add    edx,ecx
c0025e82:	83 c2 54             	add    edx,0x54
c0025e85:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025e89:	85 c0                	test   eax,eax
c0025e8b:	75 43                	jne    c0025ed0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025e90:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025e93:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025e9a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025e9d:	01 ca                	add    edx,ecx
c0025e9f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025ea2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025ea5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025eac:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025eaf:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025eb6:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025eb9:	01 ca                	add    edx,ecx
c0025ebb:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025ec1:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025ec4:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025ec8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ecb:	83 e8 20             	sub    eax,0x20
c0025ece:	eb 1a                	jmp    c0025eea <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025ed0:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025ed3:	eb 95                	jmp    c0025e6a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025ed5:	83 ec 0c             	sub    esp,0xc
c0025ed8:	68 ac d2 02 c0       	push   0xc002d2ac
c0025edd:	e8 bb 47 ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0025ee2:	83 c4 10             	add    esp,0x10
c0025ee5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025eea:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025eed:	5b                   	pop    ebx
c0025eee:	5e                   	pop    esi
c0025eef:	5f                   	pop    edi
c0025ef0:	5d                   	pop    ebp
c0025ef1:	c3                   	ret    

c0025ef2 <PIC::disable()>:
c0025ef2:	55                   	push   ebp
c0025ef3:	89 e5                	mov    ebp,esp
c0025ef5:	83 ec 10             	sub    esp,0x10
c0025ef8:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025efe:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025f02:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025f05:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025f09:	ee                   	out    dx,al
c0025f0a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025f10:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025f14:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025f17:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025f1b:	ee                   	out    dx,al
c0025f1c:	90                   	nop
c0025f1d:	c9                   	leave  
c0025f1e:	c3                   	ret    
c0025f1f:	90                   	nop

c0025f20 <PIC::close(int, int, void*)>:
c0025f20:	55                   	push   ebp
c0025f21:	89 e5                	mov    ebp,esp
c0025f23:	83 ec 08             	sub    esp,0x8
c0025f26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f29:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f2b:	83 c0 3c             	add    eax,0x3c
c0025f2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f30:	83 ec 0c             	sub    esp,0xc
c0025f33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f36:	ff d0                	call   eax
c0025f38:	83 c4 10             	add    esp,0x10
c0025f3b:	b8 00 00 00 00       	mov    eax,0x0
c0025f40:	c9                   	leave  
c0025f41:	c3                   	ret    

c0025f42 <PIC::PIC()>:
c0025f42:	83 ec 0c             	sub    esp,0xc
c0025f45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f49:	83 ec 08             	sub    esp,0x8
c0025f4c:	68 58 d3 02 c0       	push   0xc002d358
c0025f51:	50                   	push   eax
c0025f52:	e8 1b ee fe ff       	call   c0014d72 <InterruptController::InterruptController(char const*)>
c0025f57:	83 c4 10             	add    esp,0x10
c0025f5a:	ba 84 d3 02 c0       	mov    edx,0xc002d384
c0025f5f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f63:	89 10                	mov    DWORD PTR [eax],edx
c0025f65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f6f:	0f b6 d0             	movzx  edx,al
c0025f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f76:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025f7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f81:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f87:	0f b6 d0             	movzx  edx,al
c0025f8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f8e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025f93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f97:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025f9d:	8d 50 01             	lea    edx,[eax+0x1]
c0025fa0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fa4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025faa:	0f b6 d0             	movzx  edx,al
c0025fad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fb1:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025fb5:	83 e1 3f             	and    ecx,0x3f
c0025fb8:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025fbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc0:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fc6:	0f b6 d0             	movzx  edx,al
c0025fc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fcd:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025fd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fd8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025fde:	0f b6 d0             	movzx  edx,al
c0025fe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fe5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025fea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fee:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025ff4:	8d 50 01             	lea    edx,[eax+0x1]
c0025ff7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025ffb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026001:	0f b6 d0             	movzx  edx,al
c0026004:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026008:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002600c:	83 e1 3f             	and    ecx,0x3f
c002600f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026013:	90                   	nop
c0026014:	83 c4 0c             	add    esp,0xc
c0026017:	c3                   	ret    

c0026018 <PIC::ioWait()>:
c0026018:	eb 00                	jmp    c002601a <PIC::ioWait()+0x2>
c002601a:	eb 00                	jmp    c002601c <PIC::ioWait()+0x4>
c002601c:	90                   	nop
c002601d:	c3                   	ret    

c002601e <PIC::getIRQReg(int)>:
c002601e:	55                   	push   ebp
c002601f:	89 e5                	mov    ebp,esp
c0026021:	83 ec 10             	sub    esp,0x10
c0026024:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026027:	0f b6 c0             	movzx  eax,al
c002602a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026030:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026033:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026036:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002603a:	ee                   	out    dx,al
c002603b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002603e:	0f b6 c0             	movzx  eax,al
c0026041:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026047:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002604a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002604d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026051:	ee                   	out    dx,al
c0026052:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0026058:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c002605c:	89 c2                	mov    edx,eax
c002605e:	ec                   	in     al,dx
c002605f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0026062:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026065:	0f b6 c0             	movzx  eax,al
c0026068:	c1 e0 08             	shl    eax,0x8
c002606b:	89 c1                	mov    ecx,eax
c002606d:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0026073:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0026077:	89 c2                	mov    edx,eax
c0026079:	ec                   	in     al,dx
c002607a:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c002607d:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026080:	0f b6 c0             	movzx  eax,al
c0026083:	09 c8                	or     eax,ecx
c0026085:	c9                   	leave  
c0026086:	c3                   	ret    
c0026087:	90                   	nop

c0026088 <PIC::eoi(unsigned char)>:
c0026088:	55                   	push   ebp
c0026089:	89 e5                	mov    ebp,esp
c002608b:	83 ec 14             	sub    esp,0x14
c002608e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026091:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0026094:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0026098:	75 1e                	jne    c00260b8 <PIC::eoi(unsigned char)+0x30>
c002609a:	6a 0b                	push   0xb
c002609c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002609f:	e8 7a ff ff ff       	call   c002601e <PIC::getIRQReg(int)>
c00260a4:	83 c4 08             	add    esp,0x8
c00260a7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00260ab:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00260af:	25 80 00 00 00       	and    eax,0x80
c00260b4:	85 c0                	test   eax,eax
c00260b6:	74 5f                	je     c0026117 <PIC::eoi(unsigned char)+0x8f>
c00260b8:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c00260bc:	75 2d                	jne    c00260eb <PIC::eoi(unsigned char)+0x63>
c00260be:	6a 0b                	push   0xb
c00260c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c3:	e8 56 ff ff ff       	call   c002601e <PIC::getIRQReg(int)>
c00260c8:	83 c4 08             	add    esp,0x8
c00260cb:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c00260cf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00260d2:	66 85 c0             	test   ax,ax
c00260d5:	78 14                	js     c00260eb <PIC::eoi(unsigned char)+0x63>
c00260d7:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c00260dd:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c00260e1:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00260e4:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c00260e8:	ee                   	out    dx,al
c00260e9:	eb 2d                	jmp    c0026118 <PIC::eoi(unsigned char)+0x90>
c00260eb:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00260ef:	76 12                	jbe    c0026103 <PIC::eoi(unsigned char)+0x7b>
c00260f1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c00260f7:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c00260fb:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00260fe:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026102:	ee                   	out    dx,al
c0026103:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026109:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002610d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026110:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026114:	ee                   	out    dx,al
c0026115:	eb 01                	jmp    c0026118 <PIC::eoi(unsigned char)+0x90>
c0026117:	90                   	nop
c0026118:	c9                   	leave  
c0026119:	c3                   	ret    

c002611a <PIC::remap()>:
c002611a:	55                   	push   ebp
c002611b:	89 e5                	mov    ebp,esp
c002611d:	83 ec 48             	sub    esp,0x48
c0026120:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026127:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002612e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026134:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026137:	89 c2                	mov    edx,eax
c0026139:	ec                   	in     al,dx
c002613a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002613d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026140:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026143:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026149:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002614c:	89 c2                	mov    edx,eax
c002614e:	ec                   	in     al,dx
c002614f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0026152:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0026155:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0026158:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c002615e:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0026162:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0026165:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0026168:	ee                   	out    dx,al
c0026169:	83 ec 0c             	sub    esp,0xc
c002616c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002616f:	e8 a4 fe ff ff       	call   c0026018 <PIC::ioWait()>
c0026174:	83 c4 10             	add    esp,0x10
c0026177:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c002617d:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0026181:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0026184:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0026187:	ee                   	out    dx,al
c0026188:	83 ec 0c             	sub    esp,0xc
c002618b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002618e:	e8 85 fe ff ff       	call   c0026018 <PIC::ioWait()>
c0026193:	83 c4 10             	add    esp,0x10
c0026196:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0026199:	0f b6 c0             	movzx  eax,al
c002619c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00261a2:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00261a5:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00261a8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00261ab:	ee                   	out    dx,al
c00261ac:	83 ec 0c             	sub    esp,0xc
c00261af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261b2:	e8 61 fe ff ff       	call   c0026018 <PIC::ioWait()>
c00261b7:	83 c4 10             	add    esp,0x10
c00261ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00261bd:	0f b6 c0             	movzx  eax,al
c00261c0:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c00261c6:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c00261c9:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c00261cc:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00261cf:	ee                   	out    dx,al
c00261d0:	83 ec 0c             	sub    esp,0xc
c00261d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261d6:	e8 3d fe ff ff       	call   c0026018 <PIC::ioWait()>
c00261db:	83 c4 10             	add    esp,0x10
c00261de:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c00261e4:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c00261e8:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c00261eb:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c00261ee:	ee                   	out    dx,al
c00261ef:	83 ec 0c             	sub    esp,0xc
c00261f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00261f5:	e8 1e fe ff ff       	call   c0026018 <PIC::ioWait()>
c00261fa:	83 c4 10             	add    esp,0x10
c00261fd:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026203:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026207:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002620a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002620d:	ee                   	out    dx,al
c002620e:	83 ec 0c             	sub    esp,0xc
c0026211:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026214:	e8 ff fd ff ff       	call   c0026018 <PIC::ioWait()>
c0026219:	83 c4 10             	add    esp,0x10
c002621c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026222:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026226:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026229:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002622c:	ee                   	out    dx,al
c002622d:	83 ec 0c             	sub    esp,0xc
c0026230:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026233:	e8 e0 fd ff ff       	call   c0026018 <PIC::ioWait()>
c0026238:	83 c4 10             	add    esp,0x10
c002623b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026241:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026245:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026248:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002624b:	ee                   	out    dx,al
c002624c:	83 ec 0c             	sub    esp,0xc
c002624f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026252:	e8 c1 fd ff ff       	call   c0026018 <PIC::ioWait()>
c0026257:	83 c4 10             	add    esp,0x10
c002625a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c002625e:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0026264:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0026267:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c002626a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002626d:	ee                   	out    dx,al
c002626e:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0026272:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0026278:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c002627b:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c002627e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0026281:	ee                   	out    dx,al
c0026282:	90                   	nop
c0026283:	c9                   	leave  
c0026284:	c3                   	ret    
c0026285:	90                   	nop

c0026286 <PIC::open(int, int, void*)>:
c0026286:	55                   	push   ebp
c0026287:	89 e5                	mov    ebp,esp
c0026289:	83 ec 18             	sub    esp,0x18
c002628c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0026292:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0026296:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026299:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002629d:	ee                   	out    dx,al
c002629e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00262a4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00262a8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00262ab:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00262af:	ee                   	out    dx,al
c00262b0:	83 ec 0c             	sub    esp,0xc
c00262b3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00262b6:	e8 5f fe ff ff       	call   c002611a <PIC::remap()>
c00262bb:	83 c4 10             	add    esp,0x10
c00262be:	b8 00 00 00 00       	mov    eax,0x0
c00262c3:	c9                   	leave  
c00262c4:	c3                   	ret    
c00262c5:	90                   	nop

c00262c6 <APICTimer::close(int, int, void*)>:
c00262c6:	b8 00 00 00 00       	mov    eax,0x0
c00262cb:	c3                   	ret    

c00262cc <apicTimerHandler(regs*, void*)>:
c00262cc:	83 ec 0c             	sub    esp,0xc
c00262cf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00262d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00262d5:	99                   	cdq    
c00262d6:	52                   	push   edx
c00262d7:	50                   	push   eax
c00262d8:	6a 00                	push   0x0
c00262da:	68 00 ca 9a 3b       	push   0x3b9aca00
c00262df:	e8 88 07 00 00       	call   c0026a6c <__udivdi3>
c00262e4:	83 c4 10             	add    esp,0x10
c00262e7:	83 ec 08             	sub    esp,0x8
c00262ea:	52                   	push   edx
c00262eb:	50                   	push   eax
c00262ec:	e8 d8 0a ff ff       	call   c0016dc9 <timerHandler(unsigned long long)>
c00262f1:	83 c4 10             	add    esp,0x10
c00262f4:	90                   	nop
c00262f5:	83 c4 0c             	add    esp,0xc
c00262f8:	c3                   	ret    
c00262f9:	90                   	nop

c00262fa <APICTimer::write(int)>:
c00262fa:	53                   	push   ebx
c00262fb:	83 ec 28             	sub    esp,0x28
c00262fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026302:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026306:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002630c:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0026311:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026317:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002631d:	83 ec 0c             	sub    esp,0xc
c0026320:	50                   	push   eax
c0026321:	e8 de f4 ff ff       	call   c0025804 <APIC::getBase()>
c0026326:	83 c4 10             	add    esp,0x10
c0026329:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002632d:	a1 b0 eb 02 c0       	mov    eax,ds:0xc002ebb0
c0026332:	8b 15 b4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebb4
c0026338:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002633c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026344:	05 e0 03 00 00       	add    eax,0x3e0
c0026349:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c002634f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026353:	05 80 03 00 00       	add    eax,0x380
c0026358:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c002635e:	fb                   	sti    
c002635f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026363:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026367:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c002636c:	83 d2 00             	adc    edx,0x0
c002636f:	89 c1                	mov    ecx,eax
c0026371:	89 d3                	mov    ebx,edx
c0026373:	a1 b0 eb 02 c0       	mov    eax,ds:0xc002ebb0
c0026378:	8b 15 b4 eb 02 c0    	mov    edx,DWORD PTR ds:0xc002ebb4
c002637e:	39 c8                	cmp    eax,ecx
c0026380:	89 d0                	mov    eax,edx
c0026382:	19 d8                	sbb    eax,ebx
c0026384:	73 02                	jae    c0026388 <APICTimer::write(int)+0x8e>
c0026386:	eb d7                	jmp    c002635f <APICTimer::write(int)+0x65>
c0026388:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002638c:	05 20 03 00 00       	add    eax,0x320
c0026391:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026397:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002639b:	05 90 03 00 00       	add    eax,0x390
c00263a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00263a2:	f7 d0                	not    eax
c00263a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00263a8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00263ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00263b0:	ba 00 00 00 00       	mov    edx,0x0
c00263b5:	f7 f3                	div    ebx
c00263b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00263bb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00263bf:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00263c5:	0d 00 00 02 00       	or     eax,0x20000
c00263ca:	89 c2                	mov    edx,eax
c00263cc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263d0:	05 20 03 00 00       	add    eax,0x320
c00263d5:	89 10                	mov    DWORD PTR [eax],edx
c00263d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263db:	05 e0 03 00 00       	add    eax,0x3e0
c00263e0:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c00263e6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00263ea:	05 80 03 00 00       	add    eax,0x380
c00263ef:	89 c2                	mov    edx,eax
c00263f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00263f5:	89 02                	mov    DWORD PTR [edx],eax
c00263f7:	90                   	nop
c00263f8:	83 c4 28             	add    esp,0x28
c00263fb:	5b                   	pop    ebx
c00263fc:	c3                   	ret    
c00263fd:	90                   	nop

c00263fe <APICTimer::open(int, int, void*)>:
c00263fe:	57                   	push   edi
c00263ff:	56                   	push   esi
c0026400:	53                   	push   ebx
c0026401:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026405:	8b 00                	mov    eax,DWORD PTR [eax]
c0026407:	83 c0 24             	add    eax,0x24
c002640a:	8b 00                	mov    eax,DWORD PTR [eax]
c002640c:	83 ec 08             	sub    esp,0x8
c002640f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026413:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026417:	ff d0                	call   eax
c0026419:	83 c4 10             	add    esp,0x10
c002641c:	a1 28 e5 02 c0       	mov    eax,ds:0xc002e528
c0026421:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026427:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c002642d:	83 ec 0c             	sub    esp,0xc
c0026430:	50                   	push   eax
c0026431:	e8 ce f3 ff ff       	call   c0025804 <APIC::getBase()>
c0026436:	83 c4 10             	add    esp,0x10
c0026439:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c002643f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026443:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026449:	0f b6 f8             	movzx  edi,al
c002644c:	89 d0                	mov    eax,edx
c002644e:	ba 00 00 00 00       	mov    edx,0x0
c0026453:	89 c1                	mov    ecx,eax
c0026455:	80 e5 ff             	and    ch,0xff
c0026458:	89 cb                	mov    ebx,ecx
c002645a:	0f b6 f2             	movzx  esi,dl
c002645d:	89 d8                	mov    eax,ebx
c002645f:	89 f2                	mov    edx,esi
c0026461:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026465:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026468:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002646c:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026470:	83 e0 00             	and    eax,0x0
c0026473:	09 d0                	or     eax,edx
c0026475:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002647d:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026483:	8d 50 01             	lea    edx,[eax+0x1]
c0026486:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002648a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026490:	0f b6 d0             	movzx  edx,al
c0026493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026497:	83 c2 08             	add    edx,0x8
c002649a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002649e:	0f b6 c9             	movzx  ecx,cl
c00264a1:	81 c9 00 00 01 00    	or     ecx,0x10000
c00264a7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c00264ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264af:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00264b3:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00264b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264bd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264c1:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c00264c7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00264cb:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00264d1:	83 ec 0c             	sub    esp,0xc
c00264d4:	51                   	push   ecx
c00264d5:	6a 01                	push   0x1
c00264d7:	68 cc 62 02 c0       	push   0xc00262cc
c00264dc:	52                   	push   edx
c00264dd:	50                   	push   eax
c00264de:	e8 b7 de fe ff       	call   c001439a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00264e3:	83 c4 20             	add    esp,0x20
c00264e6:	89 c2                	mov    edx,eax
c00264e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00264ec:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c00264f2:	b8 00 00 00 00       	mov    eax,0x0
c00264f7:	5b                   	pop    ebx
c00264f8:	5e                   	pop    esi
c00264f9:	5f                   	pop    edi
c00264fa:	c3                   	ret    
c00264fb:	90                   	nop

c00264fc <APICTimer::APICTimer()>:
c00264fc:	83 ec 0c             	sub    esp,0xc
c00264ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026503:	83 ec 08             	sub    esp,0x8
c0026506:	68 c4 d3 02 c0       	push   0xc002d3c4
c002650b:	50                   	push   eax
c002650c:	e8 29 08 ff ff       	call   c0016d3a <Timer::Timer(char const*)>
c0026511:	83 c4 10             	add    esp,0x10
c0026514:	ba d8 d3 02 c0       	mov    edx,0xc002d3d8
c0026519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002651d:	89 10                	mov    DWORD PTR [eax],edx
c002651f:	90                   	nop
c0026520:	83 c4 0c             	add    esp,0xc
c0026523:	c3                   	ret    

c0026524 <PIT::write(int)>:
c0026524:	83 ec 10             	sub    esp,0x10
c0026527:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002652b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c002652f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026535:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026539:	a3 e4 28 03 c0       	mov    ds:0xc00328e4,eax
c002653e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026543:	99                   	cdq    
c0026544:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026548:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002654c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026553:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026558:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c002655c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026561:	ee                   	out    dx,al
c0026562:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026566:	0f b6 c0             	movzx  eax,al
c0026569:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026570:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026574:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026578:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c002657d:	ee                   	out    dx,al
c002657e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026582:	c1 f8 08             	sar    eax,0x8
c0026585:	0f b6 c0             	movzx  eax,al
c0026588:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002658f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026593:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026597:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002659c:	ee                   	out    dx,al
c002659d:	90                   	nop
c002659e:	83 c4 10             	add    esp,0x10
c00265a1:	c3                   	ret    

c00265a2 <pitHandler(regs*, void*)>:
c00265a2:	83 ec 0c             	sub    esp,0xc
c00265a5:	a1 e4 28 03 c0       	mov    eax,ds:0xc00328e4
c00265aa:	99                   	cdq    
c00265ab:	52                   	push   edx
c00265ac:	50                   	push   eax
c00265ad:	6a 00                	push   0x0
c00265af:	68 00 ca 9a 3b       	push   0x3b9aca00
c00265b4:	e8 b3 04 00 00       	call   c0026a6c <__udivdi3>
c00265b9:	83 c4 10             	add    esp,0x10
c00265bc:	83 ec 08             	sub    esp,0x8
c00265bf:	52                   	push   edx
c00265c0:	50                   	push   eax
c00265c1:	e8 03 08 ff ff       	call   c0016dc9 <timerHandler(unsigned long long)>
c00265c6:	83 c4 10             	add    esp,0x10
c00265c9:	90                   	nop
c00265ca:	83 c4 0c             	add    esp,0xc
c00265cd:	c3                   	ret    

c00265ce <PIT::open(int, int, void*)>:
c00265ce:	83 ec 0c             	sub    esp,0xc
c00265d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265d5:	8b 00                	mov    eax,DWORD PTR [eax]
c00265d7:	83 c0 24             	add    eax,0x24
c00265da:	8b 00                	mov    eax,DWORD PTR [eax]
c00265dc:	83 ec 08             	sub    esp,0x8
c00265df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00265e7:	ff d0                	call   eax
c00265e9:	83 c4 10             	add    esp,0x10
c00265ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00265f0:	83 ec 0c             	sub    esp,0xc
c00265f3:	6a 00                	push   0x0
c00265f5:	6a 01                	push   0x1
c00265f7:	68 a2 65 02 c0       	push   0xc00265a2
c00265fc:	6a 00                	push   0x0
c00265fe:	50                   	push   eax
c00265ff:	e8 96 dd fe ff       	call   c001439a <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026604:	83 c4 20             	add    esp,0x20
c0026607:	89 c2                	mov    edx,eax
c0026609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002660d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026613:	b8 00 00 00 00       	mov    eax,0x0
c0026618:	83 c4 0c             	add    esp,0xc
c002661b:	c3                   	ret    

c002661c <PIT::close(int, int, void*)>:
c002661c:	83 ec 0c             	sub    esp,0xc
c002661f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026623:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c002662d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026631:	6a 01                	push   0x1
c0026633:	68 a2 65 02 c0       	push   0xc00265a2
c0026638:	6a 00                	push   0x0
c002663a:	50                   	push   eax
c002663b:	e8 98 dd fe ff       	call   c00143d8 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026640:	83 c4 10             	add    esp,0x10
c0026643:	b8 00 00 00 00       	mov    eax,0x0
c0026648:	83 c4 0c             	add    esp,0xc
c002664b:	c3                   	ret    

c002664c <PIT::PIT()>:
c002664c:	83 ec 0c             	sub    esp,0xc
c002664f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026653:	83 ec 08             	sub    esp,0x8
c0026656:	68 00 d4 02 c0       	push   0xc002d400
c002665b:	50                   	push   eax
c002665c:	e8 d9 06 ff ff       	call   c0016d3a <Timer::Timer(char const*)>
c0026661:	83 c4 10             	add    esp,0x10
c0026664:	ba 28 d4 02 c0       	mov    edx,0xc002d428
c0026669:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002666d:	89 10                	mov    DWORD PTR [eax],edx
c002666f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026673:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026679:	0f b6 d0             	movzx  edx,al
c002667c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026680:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026687:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002668b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026691:	0f b6 d0             	movzx  edx,al
c0026694:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026698:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002669d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266a1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266a7:	8d 50 01             	lea    edx,[eax+0x1]
c00266aa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266ae:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266b4:	0f b6 d0             	movzx  edx,al
c00266b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266bb:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c00266bf:	83 e1 3f             	and    ecx,0x3f
c00266c2:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c00266c6:	90                   	nop
c00266c7:	83 c4 0c             	add    esp,0xc
c00266ca:	c3                   	ret    
c00266cb:	66 90                	xchg   ax,ax
c00266cd:	66 90                	xchg   ax,ax
c00266cf:	90                   	nop

c00266d0 <avxDetect>:
c00266d0:	b8 00 00 00 00       	mov    eax,0x0
c00266d5:	c3                   	ret    

c00266d6 <avxSave>:
c00266d6:	c3                   	ret    

c00266d7 <avxLoad>:
c00266d7:	c3                   	ret    

c00266d8 <avxInit>:
c00266d8:	c3                   	ret    

c00266d9 <avxClose>:
c00266d9:	c3                   	ret    

c00266da <wouldSheSayYes>:
c00266da:	c3                   	ret    
c00266db:	49                   	dec    ecx
c00266dc:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c00266e0:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c00266e4:	75 20                	jne    c0026706 <sseDetect.noSSE+0x1>
c00266e6:	4e                   	dec    esi
c00266e7:	79 61                	jns    c002674a <x87Detect+0x14>
c00266e9:	68 2e 2e 2e 00       	push   0x2e2e2e
c00266ee:	66 90                	xchg   ax,ax

c00266f0 <absolutelyNoChanceInHell>:
c00266f0:	b8 01 00 00 00       	mov    eax,0x1
c00266f5:	0f a2                	cpuid  
c00266f7:	f7 c2 00 00 00 02    	test   edx,0x2000000
c00266fd:	74 06                	je     c0026705 <sseDetect.noSSE>
c00266ff:	b8 01 00 00 00       	mov    eax,0x1
c0026704:	c3                   	ret    

c0026705 <sseDetect.noSSE>:
c0026705:	31 c0                	xor    eax,eax
c0026707:	c3                   	ret    

c0026708 <sseSave>:
c0026708:	0f ae 44 24 08       	fxsave [esp+0x8]
c002670d:	c3                   	ret    

c002670e <sseLoad>:
c002670e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026713:	c3                   	ret    

c0026714 <sseInit>:
c0026714:	e8 43 00 00 00       	call   c002675c <x87Init>
c0026719:	0f 20 e0             	mov    eax,cr4
c002671c:	66 0d 00 06          	or     ax,0x600
c0026720:	0f 22 e0             	mov    cr4,eax
c0026723:	c3                   	ret    

c0026724 <sseClose>:
c0026724:	c3                   	ret    
c0026725:	66 90                	xchg   ax,ax
c0026727:	66 90                	xchg   ax,ax
c0026729:	66 90                	xchg   ax,ax
c002672b:	66 90                	xchg   ax,ax
c002672d:	66 90                	xchg   ax,ax
c002672f:	90                   	nop

c0026730 <value_37F>:
c0026730:	7f 03                	jg     c0026735 <value_37A+0x1>

c0026732 <value_37E>:
c0026732:	7e 03                	jle    c0026737 <x87Detect+0x1>

c0026734 <value_37A>:
c0026734:	7a 03                	jp     c0026739 <x87Detect+0x3>

c0026736 <x87Detect>:
c0026736:	b8 01 00 00 00       	mov    eax,0x1
c002673b:	0f a2                	cpuid  
c002673d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026743:	74 06                	je     c002674b <x87Detect.nox87>
c0026745:	b8 01 00 00 00       	mov    eax,0x1
c002674a:	c3                   	ret    

c002674b <x87Detect.nox87>:
c002674b:	b8 00 00 00 00       	mov    eax,0x0
c0026750:	c3                   	ret    

c0026751 <x87Save>:
c0026751:	9b dd 74 24 08       	fsave  [esp+0x8]
c0026756:	c3                   	ret    

c0026757 <x87Load>:
c0026757:	dd 64 24 08          	frstor [esp+0x8]
c002675b:	c3                   	ret    

c002675c <x87Init>:
c002675c:	9b db e3             	finit  
c002675f:	0f 20 c0             	mov    eax,cr0
c0026762:	66 25 fb ff          	and    ax,0xfffb
c0026766:	66 0d 22 00          	or     ax,0x22
c002676a:	0f 22 c0             	mov    cr0,eax
c002676d:	0f 06                	clts   
c002676f:	d9 2d 34 67 02 c0    	fldcw  WORD PTR ds:0xc0026734
c0026775:	c3                   	ret    

c0026776 <x87Close>:
c0026776:	c3                   	ret    
c0026777:	90                   	nop

c0026778 <__do_global_ctors_aux>:
c0026778:	a1 bc 92 02 c0       	mov    eax,ds:0xc00292bc
c002677d:	83 f8 ff             	cmp    eax,0xffffffff
c0026780:	74 1a                	je     c002679c <__do_global_ctors_aux+0x24>
c0026782:	55                   	push   ebp
c0026783:	89 e5                	mov    ebp,esp
c0026785:	53                   	push   ebx
c0026786:	52                   	push   edx
c0026787:	bb bc 92 02 c0       	mov    ebx,0xc00292bc
c002678c:	ff d0                	call   eax
c002678e:	83 eb 04             	sub    ebx,0x4
c0026791:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026793:	83 f8 ff             	cmp    eax,0xffffffff
c0026796:	75 f4                	jne    c002678c <__do_global_ctors_aux+0x14>
c0026798:	58                   	pop    eax
c0026799:	5b                   	pop    ebx
c002679a:	5d                   	pop    ebp
c002679b:	c3                   	ret    
c002679c:	c3                   	ret    
c002679d:	66 90                	xchg   ax,ax
c002679f:	90                   	nop

c00267a0 <__divdi3>:
c00267a0:	55                   	push   ebp
c00267a1:	57                   	push   edi
c00267a2:	56                   	push   esi
c00267a3:	53                   	push   ebx
c00267a4:	83 ec 1c             	sub    esp,0x1c
c00267a7:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00267ab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00267af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00267b2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00267b6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00267ba:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00267be:	85 db                	test   ebx,ebx
c00267c0:	0f 88 8e 00 00 00    	js     c0026854 <__divdi3+0xb4>
c00267c6:	89 dd                	mov    ebp,ebx
c00267c8:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00267d0:	89 d3                	mov    ebx,edx
c00267d2:	85 d2                	test   edx,edx
c00267d4:	79 0d                	jns    c00267e3 <__divdi3+0x43>
c00267d6:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c00267da:	f7 d8                	neg    eax
c00267dc:	83 d2 00             	adc    edx,0x0
c00267df:	f7 da                	neg    edx
c00267e1:	89 d3                	mov    ebx,edx
c00267e3:	89 c7                	mov    edi,eax
c00267e5:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00267e8:	85 db                	test   ebx,ebx
c00267ea:	75 48                	jne    c0026834 <__divdi3+0x94>
c00267ec:	39 ef                	cmp    edi,ebp
c00267ee:	76 24                	jbe    c0026814 <__divdi3+0x74>
c00267f0:	89 ea                	mov    edx,ebp
c00267f2:	f7 f7                	div    edi
c00267f4:	89 c1                	mov    ecx,eax
c00267f6:	31 f6                	xor    esi,esi
c00267f8:	89 c8                	mov    eax,ecx
c00267fa:	89 f2                	mov    edx,esi
c00267fc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026800:	85 c9                	test   ecx,ecx
c0026802:	74 07                	je     c002680b <__divdi3+0x6b>
c0026804:	f7 d8                	neg    eax
c0026806:	83 d2 00             	adc    edx,0x0
c0026809:	f7 da                	neg    edx
c002680b:	83 c4 1c             	add    esp,0x1c
c002680e:	5b                   	pop    ebx
c002680f:	5e                   	pop    esi
c0026810:	5f                   	pop    edi
c0026811:	5d                   	pop    ebp
c0026812:	c3                   	ret    
c0026813:	90                   	nop
c0026814:	85 ff                	test   edi,edi
c0026816:	75 0b                	jne    c0026823 <__divdi3+0x83>
c0026818:	b8 01 00 00 00       	mov    eax,0x1
c002681d:	31 d2                	xor    edx,edx
c002681f:	f7 f3                	div    ebx
c0026821:	89 c7                	mov    edi,eax
c0026823:	31 d2                	xor    edx,edx
c0026825:	89 e8                	mov    eax,ebp
c0026827:	f7 f7                	div    edi
c0026829:	89 c6                	mov    esi,eax
c002682b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002682e:	f7 f7                	div    edi
c0026830:	89 c1                	mov    ecx,eax
c0026832:	eb c4                	jmp    c00267f8 <__divdi3+0x58>
c0026834:	39 eb                	cmp    ebx,ebp
c0026836:	77 3c                	ja     c0026874 <__divdi3+0xd4>
c0026838:	0f bd f3             	bsr    esi,ebx
c002683b:	83 f6 1f             	xor    esi,0x1f
c002683e:	75 40                	jne    c0026880 <__divdi3+0xe0>
c0026840:	39 eb                	cmp    ebx,ebp
c0026842:	72 09                	jb     c002684d <__divdi3+0xad>
c0026844:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026847:	0f 87 97 00 00 00    	ja     c00268e4 <__divdi3+0x144>
c002684d:	b9 01 00 00 00       	mov    ecx,0x1
c0026852:	eb a4                	jmp    c00267f8 <__divdi3+0x58>
c0026854:	f7 d9                	neg    ecx
c0026856:	83 d3 00             	adc    ebx,0x0
c0026859:	f7 db                	neg    ebx
c002685b:	89 0c 24             	mov    DWORD PTR [esp],ecx
c002685e:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026862:	89 dd                	mov    ebp,ebx
c0026864:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c002686c:	e9 5f ff ff ff       	jmp    c00267d0 <__divdi3+0x30>
c0026871:	8d 76 00             	lea    esi,[esi+0x0]
c0026874:	31 f6                	xor    esi,esi
c0026876:	31 c9                	xor    ecx,ecx
c0026878:	e9 7b ff ff ff       	jmp    c00267f8 <__divdi3+0x58>
c002687d:	8d 76 00             	lea    esi,[esi+0x0]
c0026880:	b8 20 00 00 00       	mov    eax,0x20
c0026885:	29 f0                	sub    eax,esi
c0026887:	89 f1                	mov    ecx,esi
c0026889:	d3 e3                	shl    ebx,cl
c002688b:	89 fa                	mov    edx,edi
c002688d:	88 c1                	mov    cl,al
c002688f:	d3 ea                	shr    edx,cl
c0026891:	09 da                	or     edx,ebx
c0026893:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026897:	89 f1                	mov    ecx,esi
c0026899:	d3 e7                	shl    edi,cl
c002689b:	89 eb                	mov    ebx,ebp
c002689d:	88 c1                	mov    cl,al
c002689f:	d3 eb                	shr    ebx,cl
c00268a1:	89 f1                	mov    ecx,esi
c00268a3:	d3 e5                	shl    ebp,cl
c00268a5:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00268a8:	88 c1                	mov    cl,al
c00268aa:	d3 ea                	shr    edx,cl
c00268ac:	09 d5                	or     ebp,edx
c00268ae:	89 e8                	mov    eax,ebp
c00268b0:	89 da                	mov    edx,ebx
c00268b2:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c00268b6:	89 d3                	mov    ebx,edx
c00268b8:	89 c5                	mov    ebp,eax
c00268ba:	f7 e7                	mul    edi
c00268bc:	39 d3                	cmp    ebx,edx
c00268be:	72 18                	jb     c00268d8 <__divdi3+0x138>
c00268c0:	74 0a                	je     c00268cc <__divdi3+0x12c>
c00268c2:	89 e9                	mov    ecx,ebp
c00268c4:	31 f6                	xor    esi,esi
c00268c6:	e9 2d ff ff ff       	jmp    c00267f8 <__divdi3+0x58>
c00268cb:	90                   	nop
c00268cc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00268cf:	89 f1                	mov    ecx,esi
c00268d1:	d3 e7                	shl    edi,cl
c00268d3:	39 c7                	cmp    edi,eax
c00268d5:	73 eb                	jae    c00268c2 <__divdi3+0x122>
c00268d7:	90                   	nop
c00268d8:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00268db:	31 f6                	xor    esi,esi
c00268dd:	e9 16 ff ff ff       	jmp    c00267f8 <__divdi3+0x58>
c00268e2:	66 90                	xchg   ax,ax
c00268e4:	31 c9                	xor    ecx,ecx
c00268e6:	e9 0d ff ff ff       	jmp    c00267f8 <__divdi3+0x58>
c00268eb:	90                   	nop

c00268ec <__moddi3>:
c00268ec:	55                   	push   ebp
c00268ed:	57                   	push   edi
c00268ee:	56                   	push   esi
c00268ef:	53                   	push   ebx
c00268f0:	83 ec 2c             	sub    esp,0x2c
c00268f3:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00268f7:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c00268fb:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00268ff:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026903:	85 db                	test   ebx,ebx
c0026905:	0f 88 85 00 00 00    	js     c0026990 <__moddi3+0xa4>
c002690b:	89 de                	mov    esi,ebx
c002690d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026915:	89 d7                	mov    edi,edx
c0026917:	85 d2                	test   edx,edx
c0026919:	79 09                	jns    c0026924 <__moddi3+0x38>
c002691b:	f7 d8                	neg    eax
c002691d:	83 d2 00             	adc    edx,0x0
c0026920:	f7 da                	neg    edx
c0026922:	89 d7                	mov    edi,edx
c0026924:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026928:	89 cd                	mov    ebp,ecx
c002692a:	85 ff                	test   edi,edi
c002692c:	75 52                	jne    c0026980 <__moddi3+0x94>
c002692e:	89 c3                	mov    ebx,eax
c0026930:	39 f0                	cmp    eax,esi
c0026932:	76 24                	jbe    c0026958 <__moddi3+0x6c>
c0026934:	89 c8                	mov    eax,ecx
c0026936:	89 f2                	mov    edx,esi
c0026938:	f7 f3                	div    ebx
c002693a:	89 d6                	mov    esi,edx
c002693c:	89 f0                	mov    eax,esi
c002693e:	31 d2                	xor    edx,edx
c0026940:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026944:	85 c9                	test   ecx,ecx
c0026946:	74 07                	je     c002694f <__moddi3+0x63>
c0026948:	f7 d8                	neg    eax
c002694a:	83 d2 00             	adc    edx,0x0
c002694d:	f7 da                	neg    edx
c002694f:	83 c4 2c             	add    esp,0x2c
c0026952:	5b                   	pop    ebx
c0026953:	5e                   	pop    esi
c0026954:	5f                   	pop    edi
c0026955:	5d                   	pop    ebp
c0026956:	c3                   	ret    
c0026957:	90                   	nop
c0026958:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c002695c:	85 db                	test   ebx,ebx
c002695e:	75 0d                	jne    c002696d <__moddi3+0x81>
c0026960:	b8 01 00 00 00       	mov    eax,0x1
c0026965:	31 d2                	xor    edx,edx
c0026967:	f7 f7                	div    edi
c0026969:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002696d:	89 f0                	mov    eax,esi
c002696f:	31 d2                	xor    edx,edx
c0026971:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0026975:	f7 f7                	div    edi
c0026977:	89 e8                	mov    eax,ebp
c0026979:	f7 f7                	div    edi
c002697b:	89 d6                	mov    esi,edx
c002697d:	eb bd                	jmp    c002693c <__moddi3+0x50>
c002697f:	90                   	nop
c0026980:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026984:	39 f7                	cmp    edi,esi
c0026986:	76 20                	jbe    c00269a8 <__moddi3+0xbc>
c0026988:	89 c8                	mov    eax,ecx
c002698a:	89 f2                	mov    edx,esi
c002698c:	eb b2                	jmp    c0026940 <__moddi3+0x54>
c002698e:	66 90                	xchg   ax,ax
c0026990:	f7 d9                	neg    ecx
c0026992:	83 d3 00             	adc    ebx,0x0
c0026995:	f7 db                	neg    ebx
c0026997:	89 de                	mov    esi,ebx
c0026999:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00269a1:	e9 6f ff ff ff       	jmp    c0026915 <__moddi3+0x29>
c00269a6:	66 90                	xchg   ax,ax
c00269a8:	0f bd c7             	bsr    eax,edi
c00269ab:	83 f0 1f             	xor    eax,0x1f
c00269ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00269b2:	75 24                	jne    c00269d8 <__moddi3+0xec>
c00269b4:	39 f7                	cmp    edi,esi
c00269b6:	72 06                	jb     c00269be <__moddi3+0xd2>
c00269b8:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00269bc:	77 0c                	ja     c00269ca <__moddi3+0xde>
c00269be:	89 e9                	mov    ecx,ebp
c00269c0:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00269c4:	19 fe                	sbb    esi,edi
c00269c6:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00269ca:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00269ce:	89 f2                	mov    edx,esi
c00269d0:	e9 6b ff ff ff       	jmp    c0026940 <__moddi3+0x54>
c00269d5:	8d 76 00             	lea    esi,[esi+0x0]
c00269d8:	b8 20 00 00 00       	mov    eax,0x20
c00269dd:	89 c2                	mov    edx,eax
c00269df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00269e3:	29 da                	sub    edx,ebx
c00269e5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00269e9:	88 d9                	mov    cl,bl
c00269eb:	d3 e7                	shl    edi,cl
c00269ed:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00269f1:	88 d1                	mov    cl,dl
c00269f3:	d3 e8                	shr    eax,cl
c00269f5:	09 c7                	or     edi,eax
c00269f7:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c00269fb:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00269ff:	89 d8                	mov    eax,ebx
c0026a01:	88 d9                	mov    cl,bl
c0026a03:	d3 e7                	shl    edi,cl
c0026a05:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026a09:	89 f3                	mov    ebx,esi
c0026a0b:	88 d1                	mov    cl,dl
c0026a0d:	d3 eb                	shr    ebx,cl
c0026a0f:	89 c7                	mov    edi,eax
c0026a11:	88 c1                	mov    cl,al
c0026a13:	d3 e6                	shl    esi,cl
c0026a15:	89 e8                	mov    eax,ebp
c0026a17:	88 d1                	mov    cl,dl
c0026a19:	d3 e8                	shr    eax,cl
c0026a1b:	09 f0                	or     eax,esi
c0026a1d:	89 f9                	mov    ecx,edi
c0026a1f:	d3 e5                	shl    ebp,cl
c0026a21:	89 da                	mov    edx,ebx
c0026a23:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c0026a27:	89 d3                	mov    ebx,edx
c0026a29:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026a2d:	89 c6                	mov    esi,eax
c0026a2f:	89 d1                	mov    ecx,edx
c0026a31:	39 d3                	cmp    ebx,edx
c0026a33:	72 27                	jb     c0026a5c <__moddi3+0x170>
c0026a35:	74 21                	je     c0026a58 <__moddi3+0x16c>
c0026a37:	29 f5                	sub    ebp,esi
c0026a39:	19 cb                	sbb    ebx,ecx
c0026a3b:	89 de                	mov    esi,ebx
c0026a3d:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0026a41:	d3 e6                	shl    esi,cl
c0026a43:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0026a47:	89 f9                	mov    ecx,edi
c0026a49:	d3 ed                	shr    ebp,cl
c0026a4b:	09 ee                	or     esi,ebp
c0026a4d:	89 f0                	mov    eax,esi
c0026a4f:	d3 eb                	shr    ebx,cl
c0026a51:	89 da                	mov    edx,ebx
c0026a53:	e9 e8 fe ff ff       	jmp    c0026940 <__moddi3+0x54>
c0026a58:	39 c5                	cmp    ebp,eax
c0026a5a:	73 db                	jae    c0026a37 <__moddi3+0x14b>
c0026a5c:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026a60:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0026a64:	89 d1                	mov    ecx,edx
c0026a66:	89 c6                	mov    esi,eax
c0026a68:	eb cd                	jmp    c0026a37 <__moddi3+0x14b>
c0026a6a:	66 90                	xchg   ax,ax

c0026a6c <__udivdi3>:
c0026a6c:	55                   	push   ebp
c0026a6d:	57                   	push   edi
c0026a6e:	56                   	push   esi
c0026a6f:	53                   	push   ebx
c0026a70:	83 ec 1c             	sub    esp,0x1c
c0026a73:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0026a77:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0026a7b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026a7f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026a83:	85 d2                	test   edx,edx
c0026a85:	75 41                	jne    c0026ac8 <__udivdi3+0x5c>
c0026a87:	39 f7                	cmp    edi,esi
c0026a89:	76 15                	jbe    c0026aa0 <__udivdi3+0x34>
c0026a8b:	89 e8                	mov    eax,ebp
c0026a8d:	89 f2                	mov    edx,esi
c0026a8f:	f7 f7                	div    edi
c0026a91:	31 db                	xor    ebx,ebx
c0026a93:	89 da                	mov    edx,ebx
c0026a95:	83 c4 1c             	add    esp,0x1c
c0026a98:	5b                   	pop    ebx
c0026a99:	5e                   	pop    esi
c0026a9a:	5f                   	pop    edi
c0026a9b:	5d                   	pop    ebp
c0026a9c:	c3                   	ret    
c0026a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0026aa0:	89 f9                	mov    ecx,edi
c0026aa2:	85 ff                	test   edi,edi
c0026aa4:	75 0b                	jne    c0026ab1 <__udivdi3+0x45>
c0026aa6:	b8 01 00 00 00       	mov    eax,0x1
c0026aab:	31 d2                	xor    edx,edx
c0026aad:	f7 f7                	div    edi
c0026aaf:	89 c1                	mov    ecx,eax
c0026ab1:	31 d2                	xor    edx,edx
c0026ab3:	89 f0                	mov    eax,esi
c0026ab5:	f7 f1                	div    ecx
c0026ab7:	89 c3                	mov    ebx,eax
c0026ab9:	89 e8                	mov    eax,ebp
c0026abb:	f7 f1                	div    ecx
c0026abd:	89 da                	mov    edx,ebx
c0026abf:	83 c4 1c             	add    esp,0x1c
c0026ac2:	5b                   	pop    ebx
c0026ac3:	5e                   	pop    esi
c0026ac4:	5f                   	pop    edi
c0026ac5:	5d                   	pop    ebp
c0026ac6:	c3                   	ret    
c0026ac7:	90                   	nop
c0026ac8:	39 f2                	cmp    edx,esi
c0026aca:	77 1c                	ja     c0026ae8 <__udivdi3+0x7c>
c0026acc:	0f bd da             	bsr    ebx,edx
c0026acf:	83 f3 1f             	xor    ebx,0x1f
c0026ad2:	75 24                	jne    c0026af8 <__udivdi3+0x8c>
c0026ad4:	39 f2                	cmp    edx,esi
c0026ad6:	72 08                	jb     c0026ae0 <__udivdi3+0x74>
c0026ad8:	39 ef                	cmp    edi,ebp
c0026ada:	0f 87 84 00 00 00    	ja     c0026b64 <__udivdi3+0xf8>
c0026ae0:	b8 01 00 00 00       	mov    eax,0x1
c0026ae5:	eb ac                	jmp    c0026a93 <__udivdi3+0x27>
c0026ae7:	90                   	nop
c0026ae8:	31 db                	xor    ebx,ebx
c0026aea:	31 c0                	xor    eax,eax
c0026aec:	89 da                	mov    edx,ebx
c0026aee:	83 c4 1c             	add    esp,0x1c
c0026af1:	5b                   	pop    ebx
c0026af2:	5e                   	pop    esi
c0026af3:	5f                   	pop    edi
c0026af4:	5d                   	pop    ebp
c0026af5:	c3                   	ret    
c0026af6:	66 90                	xchg   ax,ax
c0026af8:	b8 20 00 00 00       	mov    eax,0x20
c0026afd:	29 d8                	sub    eax,ebx
c0026aff:	88 d9                	mov    cl,bl
c0026b01:	d3 e2                	shl    edx,cl
c0026b03:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026b07:	89 fa                	mov    edx,edi
c0026b09:	88 c1                	mov    cl,al
c0026b0b:	d3 ea                	shr    edx,cl
c0026b0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026b11:	09 d1                	or     ecx,edx
c0026b13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026b17:	88 d9                	mov    cl,bl
c0026b19:	d3 e7                	shl    edi,cl
c0026b1b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026b1f:	89 f7                	mov    edi,esi
c0026b21:	88 c1                	mov    cl,al
c0026b23:	d3 ef                	shr    edi,cl
c0026b25:	88 d9                	mov    cl,bl
c0026b27:	d3 e6                	shl    esi,cl
c0026b29:	89 ea                	mov    edx,ebp
c0026b2b:	88 c1                	mov    cl,al
c0026b2d:	d3 ea                	shr    edx,cl
c0026b2f:	09 d6                	or     esi,edx
c0026b31:	89 f0                	mov    eax,esi
c0026b33:	89 fa                	mov    edx,edi
c0026b35:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026b39:	89 d7                	mov    edi,edx
c0026b3b:	89 c6                	mov    esi,eax
c0026b3d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026b41:	39 d7                	cmp    edi,edx
c0026b43:	72 13                	jb     c0026b58 <__udivdi3+0xec>
c0026b45:	74 09                	je     c0026b50 <__udivdi3+0xe4>
c0026b47:	89 f0                	mov    eax,esi
c0026b49:	31 db                	xor    ebx,ebx
c0026b4b:	e9 43 ff ff ff       	jmp    c0026a93 <__udivdi3+0x27>
c0026b50:	88 d9                	mov    cl,bl
c0026b52:	d3 e5                	shl    ebp,cl
c0026b54:	39 c5                	cmp    ebp,eax
c0026b56:	73 ef                	jae    c0026b47 <__udivdi3+0xdb>
c0026b58:	8d 46 ff             	lea    eax,[esi-0x1]
c0026b5b:	31 db                	xor    ebx,ebx
c0026b5d:	e9 31 ff ff ff       	jmp    c0026a93 <__udivdi3+0x27>
c0026b62:	66 90                	xchg   ax,ax
c0026b64:	31 c0                	xor    eax,eax
c0026b66:	e9 28 ff ff ff       	jmp    c0026a93 <__udivdi3+0x27>
c0026b6b:	90                   	nop

c0026b6c <__umoddi3>:
c0026b6c:	55                   	push   ebp
c0026b6d:	57                   	push   edi
c0026b6e:	56                   	push   esi
c0026b6f:	53                   	push   ebx
c0026b70:	83 ec 1c             	sub    esp,0x1c
c0026b73:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0026b77:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026b7b:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0026b7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026b83:	89 da                	mov    edx,ebx
c0026b85:	85 c0                	test   eax,eax
c0026b87:	75 37                	jne    c0026bc0 <__umoddi3+0x54>
c0026b89:	39 df                	cmp    edi,ebx
c0026b8b:	76 13                	jbe    c0026ba0 <__umoddi3+0x34>
c0026b8d:	89 f0                	mov    eax,esi
c0026b8f:	f7 f7                	div    edi
c0026b91:	89 d0                	mov    eax,edx
c0026b93:	31 d2                	xor    edx,edx
c0026b95:	83 c4 1c             	add    esp,0x1c
c0026b98:	5b                   	pop    ebx
c0026b99:	5e                   	pop    esi
c0026b9a:	5f                   	pop    edi
c0026b9b:	5d                   	pop    ebp
c0026b9c:	c3                   	ret    
c0026b9d:	8d 76 00             	lea    esi,[esi+0x0]
c0026ba0:	89 fd                	mov    ebp,edi
c0026ba2:	85 ff                	test   edi,edi
c0026ba4:	75 0b                	jne    c0026bb1 <__umoddi3+0x45>
c0026ba6:	b8 01 00 00 00       	mov    eax,0x1
c0026bab:	31 d2                	xor    edx,edx
c0026bad:	f7 f7                	div    edi
c0026baf:	89 c5                	mov    ebp,eax
c0026bb1:	89 d8                	mov    eax,ebx
c0026bb3:	31 d2                	xor    edx,edx
c0026bb5:	f7 f5                	div    ebp
c0026bb7:	89 f0                	mov    eax,esi
c0026bb9:	f7 f5                	div    ebp
c0026bbb:	89 d0                	mov    eax,edx
c0026bbd:	eb d4                	jmp    c0026b93 <__umoddi3+0x27>
c0026bbf:	90                   	nop
c0026bc0:	89 f1                	mov    ecx,esi
c0026bc2:	39 d8                	cmp    eax,ebx
c0026bc4:	76 0a                	jbe    c0026bd0 <__umoddi3+0x64>
c0026bc6:	89 f0                	mov    eax,esi
c0026bc8:	83 c4 1c             	add    esp,0x1c
c0026bcb:	5b                   	pop    ebx
c0026bcc:	5e                   	pop    esi
c0026bcd:	5f                   	pop    edi
c0026bce:	5d                   	pop    ebp
c0026bcf:	c3                   	ret    
c0026bd0:	0f bd e8             	bsr    ebp,eax
c0026bd3:	83 f5 1f             	xor    ebp,0x1f
c0026bd6:	75 1c                	jne    c0026bf4 <__umoddi3+0x88>
c0026bd8:	39 d8                	cmp    eax,ebx
c0026bda:	72 04                	jb     c0026be0 <__umoddi3+0x74>
c0026bdc:	39 f7                	cmp    edi,esi
c0026bde:	77 08                	ja     c0026be8 <__umoddi3+0x7c>
c0026be0:	89 da                	mov    edx,ebx
c0026be2:	29 fe                	sub    esi,edi
c0026be4:	19 c2                	sbb    edx,eax
c0026be6:	89 f1                	mov    ecx,esi
c0026be8:	89 c8                	mov    eax,ecx
c0026bea:	83 c4 1c             	add    esp,0x1c
c0026bed:	5b                   	pop    ebx
c0026bee:	5e                   	pop    esi
c0026bef:	5f                   	pop    edi
c0026bf0:	5d                   	pop    ebp
c0026bf1:	c3                   	ret    
c0026bf2:	66 90                	xchg   ax,ax
c0026bf4:	ba 20 00 00 00       	mov    edx,0x20
c0026bf9:	29 ea                	sub    edx,ebp
c0026bfb:	89 e9                	mov    ecx,ebp
c0026bfd:	d3 e0                	shl    eax,cl
c0026bff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026c03:	89 f8                	mov    eax,edi
c0026c05:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026c09:	88 d1                	mov    cl,dl
c0026c0b:	d3 e8                	shr    eax,cl
c0026c0d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026c11:	09 c1                	or     ecx,eax
c0026c13:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026c17:	89 e9                	mov    ecx,ebp
c0026c19:	d3 e7                	shl    edi,cl
c0026c1b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026c1f:	89 d8                	mov    eax,ebx
c0026c21:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0026c25:	88 d1                	mov    cl,dl
c0026c27:	d3 e8                	shr    eax,cl
c0026c29:	89 c7                	mov    edi,eax
c0026c2b:	89 e9                	mov    ecx,ebp
c0026c2d:	d3 e3                	shl    ebx,cl
c0026c2f:	89 f0                	mov    eax,esi
c0026c31:	88 d1                	mov    cl,dl
c0026c33:	d3 e8                	shr    eax,cl
c0026c35:	09 d8                	or     eax,ebx
c0026c37:	89 e9                	mov    ecx,ebp
c0026c39:	d3 e6                	shl    esi,cl
c0026c3b:	89 f3                	mov    ebx,esi
c0026c3d:	89 fa                	mov    edx,edi
c0026c3f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0026c43:	89 d1                	mov    ecx,edx
c0026c45:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0026c49:	89 c6                	mov    esi,eax
c0026c4b:	89 d7                	mov    edi,edx
c0026c4d:	39 d1                	cmp    ecx,edx
c0026c4f:	72 27                	jb     c0026c78 <__umoddi3+0x10c>
c0026c51:	74 21                	je     c0026c74 <__umoddi3+0x108>
c0026c53:	89 ca                	mov    edx,ecx
c0026c55:	29 f3                	sub    ebx,esi
c0026c57:	19 fa                	sbb    edx,edi
c0026c59:	89 d0                	mov    eax,edx
c0026c5b:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0026c5f:	d3 e0                	shl    eax,cl
c0026c61:	89 e9                	mov    ecx,ebp
c0026c63:	d3 eb                	shr    ebx,cl
c0026c65:	09 d8                	or     eax,ebx
c0026c67:	d3 ea                	shr    edx,cl
c0026c69:	83 c4 1c             	add    esp,0x1c
c0026c6c:	5b                   	pop    ebx
c0026c6d:	5e                   	pop    esi
c0026c6e:	5f                   	pop    edi
c0026c6f:	5d                   	pop    ebp
c0026c70:	c3                   	ret    
c0026c71:	8d 76 00             	lea    esi,[esi+0x0]
c0026c74:	39 c3                	cmp    ebx,eax
c0026c76:	73 db                	jae    c0026c53 <__umoddi3+0xe7>
c0026c78:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0026c7c:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026c80:	89 d7                	mov    edi,edx
c0026c82:	89 c6                	mov    esi,eax
c0026c84:	eb cd                	jmp    c0026c53 <__umoddi3+0xe7>

c0026c86 <__addsf3>:
c0026c86:	55                   	push   ebp
c0026c87:	89 e5                	mov    ebp,esp
c0026c89:	57                   	push   edi
c0026c8a:	56                   	push   esi
c0026c8b:	53                   	push   ebx
c0026c8c:	83 ec 08             	sub    esp,0x8
c0026c8f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026c92:	89 fa                	mov    edx,edi
c0026c94:	89 f8                	mov    eax,edi
c0026c96:	c1 f8 17             	sar    eax,0x17
c0026c99:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0026c9c:	c1 e2 08             	shl    edx,0x8
c0026c9f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026ca5:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026ca8:	89 de                	mov    esi,ebx
c0026caa:	c1 fe 17             	sar    esi,0x17
c0026cad:	c1 e3 08             	shl    ebx,0x8
c0026cb0:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026cb6:	31 f0                	xor    eax,esi
c0026cb8:	0f 88 3b 01 00 00    	js     c0026df9 <__addsf3+0x173>
c0026cbe:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026cc1:	29 f1                	sub    ecx,esi
c0026cc3:	85 c9                	test   ecx,ecx
c0026cc5:	7e 54                	jle    c0026d1b <__addsf3+0x95>
c0026cc7:	89 f0                	mov    eax,esi
c0026cc9:	84 c0                	test   al,al
c0026ccb:	75 10                	jne    c0026cdd <__addsf3+0x57>
c0026ccd:	85 db                	test   ebx,ebx
c0026ccf:	0f 84 aa 02 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026cd5:	49                   	dec    ecx
c0026cd6:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026cd9:	74 38                	je     c0026d13 <__addsf3+0x8d>
c0026cdb:	eb 13                	jmp    c0026cf0 <__addsf3+0x6a>
c0026cdd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ce0:	f7 d0                	not    eax
c0026ce2:	84 c0                	test   al,al
c0026ce4:	0f 84 95 02 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026cea:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026cf0:	83 f9 1f             	cmp    ecx,0x1f
c0026cf3:	0f 8f 86 02 00 00    	jg     c0026f7f <__addsf3+0x2f9>
c0026cf9:	89 de                	mov    esi,ebx
c0026cfb:	d3 ee                	shr    esi,cl
c0026cfd:	b8 20 00 00 00       	mov    eax,0x20
c0026d02:	29 c8                	sub    eax,ecx
c0026d04:	89 c1                	mov    ecx,eax
c0026d06:	d3 e3                	shl    ebx,cl
c0026d08:	31 c0                	xor    eax,eax
c0026d0a:	85 db                	test   ebx,ebx
c0026d0c:	0f 95 c0             	setne  al
c0026d0f:	09 f0                	or     eax,esi
c0026d11:	01 d0                	add    eax,edx
c0026d13:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026d16:	e9 b6 00 00 00       	jmp    c0026dd1 <__addsf3+0x14b>
c0026d1b:	74 5c                	je     c0026d79 <__addsf3+0xf3>
c0026d1d:	89 f1                	mov    ecx,esi
c0026d1f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c0026d22:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d25:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d29:	75 14                	jne    c0026d3f <__addsf3+0xb9>
c0026d2b:	85 d2                	test   edx,edx
c0026d2d:	0f 84 4c 02 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026d33:	49                   	dec    ecx
c0026d34:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026d37:	0f 84 94 00 00 00    	je     c0026dd1 <__addsf3+0x14b>
c0026d3d:	eb 12                	jmp    c0026d51 <__addsf3+0xcb>
c0026d3f:	89 f0                	mov    eax,esi
c0026d41:	f7 d0                	not    eax
c0026d43:	84 c0                	test   al,al
c0026d45:	0f 84 34 02 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026d4b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026d51:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026d54:	83 f9 1f             	cmp    ecx,0x1f
c0026d57:	0f 8f 22 02 00 00    	jg     c0026f7f <__addsf3+0x2f9>
c0026d5d:	89 d7                	mov    edi,edx
c0026d5f:	d3 ef                	shr    edi,cl
c0026d61:	b8 20 00 00 00       	mov    eax,0x20
c0026d66:	29 c8                	sub    eax,ecx
c0026d68:	89 c1                	mov    ecx,eax
c0026d6a:	d3 e2                	shl    edx,cl
c0026d6c:	31 c0                	xor    eax,eax
c0026d6e:	85 d2                	test   edx,edx
c0026d70:	0f 95 c0             	setne  al
c0026d73:	09 f8                	or     eax,edi
c0026d75:	01 d8                	add    eax,ebx
c0026d77:	eb 58                	jmp    c0026dd1 <__addsf3+0x14b>
c0026d79:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026d7c:	8d 70 01             	lea    esi,[eax+0x1]
c0026d7f:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026d85:	75 32                	jne    c0026db9 <__addsf3+0x133>
c0026d87:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0026d8b:	75 1f                	jne    c0026dac <__addsf3+0x126>
c0026d8d:	85 d2                	test   edx,edx
c0026d8f:	0f 84 e0 01 00 00    	je     c0026f75 <__addsf3+0x2ef>
c0026d95:	85 db                	test   ebx,ebx
c0026d97:	0f 84 e2 01 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026d9d:	89 d0                	mov    eax,edx
c0026d9f:	01 d8                	add    eax,ebx
c0026da1:	0f 89 a9 01 00 00    	jns    c0026f50 <__addsf3+0x2ca>
c0026da7:	e9 9d 01 00 00       	jmp    c0026f49 <__addsf3+0x2c3>
c0026dac:	85 d2                	test   edx,edx
c0026dae:	0f 85 cb 01 00 00    	jne    c0026f7f <__addsf3+0x2f9>
c0026db4:	e9 bc 01 00 00       	jmp    c0026f75 <__addsf3+0x2ef>
c0026db9:	31 c0                	xor    eax,eax
c0026dbb:	89 f1                	mov    ecx,esi
c0026dbd:	f7 d1                	not    ecx
c0026dbf:	84 c9                	test   cl,cl
c0026dc1:	0f 84 90 01 00 00    	je     c0026f57 <__addsf3+0x2d1>
c0026dc7:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026dca:	d1 e8                	shr    eax,1
c0026dcc:	e9 86 01 00 00       	jmp    c0026f57 <__addsf3+0x2d1>
c0026dd1:	85 c0                	test   eax,eax
c0026dd3:	0f 89 7e 01 00 00    	jns    c0026f57 <__addsf3+0x2d1>
c0026dd9:	46                   	inc    esi
c0026dda:	89 f2                	mov    edx,esi
c0026ddc:	f7 d2                	not    edx
c0026dde:	84 d2                	test   dl,dl
c0026de0:	0f 84 6f 01 00 00    	je     c0026f55 <__addsf3+0x2cf>
c0026de6:	89 c2                	mov    edx,eax
c0026de8:	83 e2 01             	and    edx,0x1
c0026deb:	d1 e8                	shr    eax,1
c0026ded:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026df2:	09 d0                	or     eax,edx
c0026df4:	e9 5e 01 00 00       	jmp    c0026f57 <__addsf3+0x2d1>
c0026df9:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0026dfd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026e00:	89 f0                	mov    eax,esi
c0026e02:	0f b6 c0             	movzx  eax,al
c0026e05:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026e08:	29 c1                	sub    ecx,eax
c0026e0a:	85 c9                	test   ecx,ecx
c0026e0c:	7e 55                	jle    c0026e63 <__addsf3+0x1dd>
c0026e0e:	85 c0                	test   eax,eax
c0026e10:	75 11                	jne    c0026e23 <__addsf3+0x19d>
c0026e12:	85 db                	test   ebx,ebx
c0026e14:	0f 84 65 01 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026e1a:	49                   	dec    ecx
c0026e1b:	75 19                	jne    c0026e36 <__addsf3+0x1b0>
c0026e1d:	89 d0                	mov    eax,edx
c0026e1f:	29 d8                	sub    eax,ebx
c0026e21:	eb 38                	jmp    c0026e5b <__addsf3+0x1d5>
c0026e23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026e26:	f7 d0                	not    eax
c0026e28:	84 c0                	test   al,al
c0026e2a:	0f 84 4f 01 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026e30:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e36:	83 f9 1f             	cmp    ecx,0x1f
c0026e39:	0f 8f 40 01 00 00    	jg     c0026f7f <__addsf3+0x2f9>
c0026e3f:	89 de                	mov    esi,ebx
c0026e41:	d3 ee                	shr    esi,cl
c0026e43:	b8 20 00 00 00       	mov    eax,0x20
c0026e48:	29 c8                	sub    eax,ecx
c0026e4a:	89 c1                	mov    ecx,eax
c0026e4c:	d3 e3                	shl    ebx,cl
c0026e4e:	31 c0                	xor    eax,eax
c0026e50:	85 db                	test   ebx,ebx
c0026e52:	0f 95 c0             	setne  al
c0026e55:	09 f0                	or     eax,esi
c0026e57:	29 c2                	sub    edx,eax
c0026e59:	89 d0                	mov    eax,edx
c0026e5b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026e5e:	e9 af 00 00 00       	jmp    c0026f12 <__addsf3+0x28c>
c0026e63:	74 5c                	je     c0026ec1 <__addsf3+0x23b>
c0026e65:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c0026e68:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e6b:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026e6f:	75 14                	jne    c0026e85 <__addsf3+0x1ff>
c0026e71:	85 d2                	test   edx,edx
c0026e73:	0f 84 06 01 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026e79:	48                   	dec    eax
c0026e7a:	75 1b                	jne    c0026e97 <__addsf3+0x211>
c0026e7c:	89 d8                	mov    eax,ebx
c0026e7e:	29 d0                	sub    eax,edx
c0026e80:	e9 8d 00 00 00       	jmp    c0026f12 <__addsf3+0x28c>
c0026e85:	89 f1                	mov    ecx,esi
c0026e87:	f7 d1                	not    ecx
c0026e89:	84 c9                	test   cl,cl
c0026e8b:	0f 84 ee 00 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026e91:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026e97:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026e9a:	83 f8 1f             	cmp    eax,0x1f
c0026e9d:	0f 8f dc 00 00 00    	jg     c0026f7f <__addsf3+0x2f9>
c0026ea3:	89 d7                	mov    edi,edx
c0026ea5:	88 c1                	mov    cl,al
c0026ea7:	d3 ef                	shr    edi,cl
c0026ea9:	b9 20 00 00 00       	mov    ecx,0x20
c0026eae:	29 c1                	sub    ecx,eax
c0026eb0:	d3 e2                	shl    edx,cl
c0026eb2:	31 c0                	xor    eax,eax
c0026eb4:	85 d2                	test   edx,edx
c0026eb6:	0f 95 c0             	setne  al
c0026eb9:	09 f8                	or     eax,edi
c0026ebb:	29 c3                	sub    ebx,eax
c0026ebd:	89 d8                	mov    eax,ebx
c0026ebf:	eb 51                	jmp    c0026f12 <__addsf3+0x28c>
c0026ec1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026ec4:	40                   	inc    eax
c0026ec5:	a8 fe                	test   al,0xfe
c0026ec7:	75 3d                	jne    c0026f06 <__addsf3+0x280>
c0026ec9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026ecd:	0f 85 a7 00 00 00    	jne    c0026f7a <__addsf3+0x2f4>
c0026ed3:	85 d2                	test   edx,edx
c0026ed5:	75 12                	jne    c0026ee9 <__addsf3+0x263>
c0026ed7:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026eda:	85 db                	test   ebx,ebx
c0026edc:	0f 85 9d 00 00 00    	jne    c0026f7f <__addsf3+0x2f9>
c0026ee2:	31 ff                	xor    edi,edi
c0026ee4:	e9 96 00 00 00       	jmp    c0026f7f <__addsf3+0x2f9>
c0026ee9:	85 db                	test   ebx,ebx
c0026eeb:	0f 84 8e 00 00 00    	je     c0026f7f <__addsf3+0x2f9>
c0026ef1:	89 d0                	mov    eax,edx
c0026ef3:	29 d8                	sub    eax,ebx
c0026ef5:	79 06                	jns    c0026efd <__addsf3+0x277>
c0026ef7:	89 d8                	mov    eax,ebx
c0026ef9:	29 d0                	sub    eax,edx
c0026efb:	eb 5a                	jmp    c0026f57 <__addsf3+0x2d1>
c0026efd:	bf 00 00 00 00       	mov    edi,0x0
c0026f02:	74 7b                	je     c0026f7f <__addsf3+0x2f9>
c0026f04:	eb 4a                	jmp    c0026f50 <__addsf3+0x2ca>
c0026f06:	89 d0                	mov    eax,edx
c0026f08:	29 d8                	sub    eax,ebx
c0026f0a:	79 12                	jns    c0026f1e <__addsf3+0x298>
c0026f0c:	89 d8                	mov    eax,ebx
c0026f0e:	29 d0                	sub    eax,edx
c0026f10:	eb 09                	jmp    c0026f1b <__addsf3+0x295>
c0026f12:	85 c0                	test   eax,eax
c0026f14:	79 41                	jns    c0026f57 <__addsf3+0x2d1>
c0026f16:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f1b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026f1e:	31 f6                	xor    esi,esi
c0026f20:	85 c0                	test   eax,eax
c0026f22:	74 33                	je     c0026f57 <__addsf3+0x2d1>
c0026f24:	0f bd c8             	bsr    ecx,eax
c0026f27:	83 f1 1f             	xor    ecx,0x1f
c0026f2a:	d3 e0                	shl    eax,cl
c0026f2c:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026f30:	39 ca                	cmp    edx,ecx
c0026f32:	7f 10                	jg     c0026f44 <__addsf3+0x2be>
c0026f34:	29 d1                	sub    ecx,edx
c0026f36:	41                   	inc    ecx
c0026f37:	d3 e8                	shr    eax,cl
c0026f39:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f3c:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026f42:	eb 13                	jmp    c0026f57 <__addsf3+0x2d1>
c0026f44:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f47:	29 ce                	sub    esi,ecx
c0026f49:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f4e:	eb 07                	jmp    c0026f57 <__addsf3+0x2d1>
c0026f50:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026f53:	eb 02                	jmp    c0026f57 <__addsf3+0x2d1>
c0026f55:	31 c0                	xor    eax,eax
c0026f57:	89 c2                	mov    edx,eax
c0026f59:	c1 ea 08             	shr    edx,0x8
c0026f5c:	a8 7f                	test   al,0x7f
c0026f5e:	0f 95 c1             	setne  cl
c0026f61:	09 d1                	or     ecx,edx
c0026f63:	83 e1 01             	and    ecx,0x1
c0026f66:	c1 e8 07             	shr    eax,0x7
c0026f69:	21 c8                	and    eax,ecx
c0026f6b:	c1 e6 17             	shl    esi,0x17
c0026f6e:	09 d6                	or     esi,edx
c0026f70:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026f73:	eb 0a                	jmp    c0026f7f <__addsf3+0x2f9>
c0026f75:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026f78:	eb 05                	jmp    c0026f7f <__addsf3+0x2f9>
c0026f7a:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026f7f:	89 f8                	mov    eax,edi
c0026f81:	5a                   	pop    edx
c0026f82:	59                   	pop    ecx
c0026f83:	5b                   	pop    ebx
c0026f84:	5e                   	pop    esi
c0026f85:	5f                   	pop    edi
c0026f86:	5d                   	pop    ebp
c0026f87:	c3                   	ret    

c0026f88 <__subsf3>:
c0026f88:	55                   	push   ebp
c0026f89:	89 e5                	mov    ebp,esp
c0026f8b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026f8e:	05 00 00 00 80       	add    eax,0x80000000
c0026f93:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026f96:	5d                   	pop    ebp
c0026f97:	e9 ea fc ff ff       	jmp    c0026c86 <__addsf3>

c0026f9c <__negsf2>:
c0026f9c:	55                   	push   ebp
c0026f9d:	89 e5                	mov    ebp,esp
c0026f9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026fa2:	05 00 00 00 80       	add    eax,0x80000000
c0026fa7:	5d                   	pop    ebp
c0026fa8:	c3                   	ret    

c0026fa9 <__mulsf3>:
c0026fa9:	55                   	push   ebp
c0026faa:	89 e5                	mov    ebp,esp
c0026fac:	57                   	push   edi
c0026fad:	56                   	push   esi
c0026fae:	53                   	push   ebx
c0026faf:	83 ec 1c             	sub    esp,0x1c
c0026fb2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026fb5:	89 f0                	mov    eax,esi
c0026fb7:	89 f1                	mov    ecx,esi
c0026fb9:	c1 f9 17             	sar    ecx,0x17
c0026fbc:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026fbf:	c1 e0 08             	shl    eax,0x8
c0026fc2:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026fc7:	89 c1                	mov    ecx,eax
c0026fc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026fcc:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026fcf:	89 c7                	mov    edi,eax
c0026fd1:	c1 ff 17             	sar    edi,0x17
c0026fd4:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026fd8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026fdb:	89 f8                	mov    eax,edi
c0026fdd:	0f b6 c0             	movzx  eax,al
c0026fe0:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026fe3:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026fe7:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026fea:	42                   	inc    edx
c0026feb:	80 e2 fe             	and    dl,0xfe
c0026fee:	75 7b                	jne    c002706b <__mulsf3+0xc2>
c0026ff0:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026ff4:	74 54                	je     c002704a <__mulsf3+0xa1>
c0026ff6:	85 c9                	test   ecx,ecx
c0026ff8:	0f 85 64 01 00 00    	jne    c0027162 <__mulsf3+0x1b9>
c0026ffe:	8d 57 01             	lea    edx,[edi+0x1]
c0027001:	80 e2 fe             	and    dl,0xfe
c0027004:	75 1f                	jne    c0027025 <__mulsf3+0x7c>
c0027006:	85 c0                	test   eax,eax
c0027008:	b8 00 00 00 00       	mov    eax,0x0
c002700d:	74 29                	je     c0027038 <__mulsf3+0x8f>
c002700f:	53                   	push   ebx
c0027010:	53                   	push   ebx
c0027011:	50                   	push   eax
c0027012:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027015:	e8 96 05 00 00       	call   c00275b0 <__nesf2>
c002701a:	83 c4 10             	add    esp,0x10
c002701d:	85 c0                	test   eax,eax
c002701f:	0f 85 3a 01 00 00    	jne    c002715f <__mulsf3+0x1b6>
c0027025:	85 ff                	test   edi,edi
c0027027:	0f 89 35 01 00 00    	jns    c0027162 <__mulsf3+0x1b9>
c002702d:	81 c6 00 00 00 80    	add    esi,0x80000000
c0027033:	e9 2a 01 00 00       	jmp    c0027162 <__mulsf3+0x1b9>
c0027038:	51                   	push   ecx
c0027039:	51                   	push   ecx
c002703a:	50                   	push   eax
c002703b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002703e:	e8 6d 05 00 00       	call   c00275b0 <__nesf2>
c0027043:	83 c4 10             	add    esp,0x10
c0027046:	85 c0                	test   eax,eax
c0027048:	eb 15                	jmp    c002705f <__mulsf3+0xb6>
c002704a:	85 c9                	test   ecx,ecx
c002704c:	74 0b                	je     c0027059 <__mulsf3+0xb0>
c002704e:	8d 53 ff             	lea    edx,[ebx-0x1]
c0027051:	01 c9                	add    ecx,ecx
c0027053:	78 16                	js     c002706b <__mulsf3+0xc2>
c0027055:	89 d3                	mov    ebx,edx
c0027057:	eb f5                	jmp    c002704e <__mulsf3+0xa5>
c0027059:	89 f8                	mov    eax,edi
c002705b:	f7 d0                	not    eax
c002705d:	84 c0                	test   al,al
c002705f:	75 c4                	jne    c0027025 <__mulsf3+0x7c>
c0027061:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0027066:	e9 f7 00 00 00       	jmp    c0027162 <__mulsf3+0x1b9>
c002706b:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002706e:	c1 e6 08             	shl    esi,0x8
c0027071:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0027077:	8d 57 01             	lea    edx,[edi+0x1]
c002707a:	80 e2 fe             	and    dl,0xfe
c002707d:	75 63                	jne    c00270e2 <__mulsf3+0x139>
c002707f:	85 c0                	test   eax,eax
c0027081:	74 2f                	je     c00270b2 <__mulsf3+0x109>
c0027083:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027087:	0f 89 d2 00 00 00    	jns    c002715f <__mulsf3+0x1b6>
c002708d:	52                   	push   edx
c002708e:	52                   	push   edx
c002708f:	6a 00                	push   0x0
c0027091:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027094:	e8 dc 04 00 00       	call   c0027575 <__eqsf2>
c0027099:	83 c4 10             	add    esp,0x10
c002709c:	85 c0                	test   eax,eax
c002709e:	0f 85 bb 00 00 00    	jne    c002715f <__mulsf3+0x1b6>
c00270a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00270a7:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c00270ad:	e9 b0 00 00 00       	jmp    c0027162 <__mulsf3+0x1b9>
c00270b2:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00270b5:	50                   	push   eax
c00270b6:	50                   	push   eax
c00270b7:	6a 00                	push   0x0
c00270b9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00270bc:	e8 b4 04 00 00       	call   c0027575 <__eqsf2>
c00270c1:	83 c4 10             	add    esp,0x10
c00270c4:	85 c0                	test   eax,eax
c00270c6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00270c9:	75 0c                	jne    c00270d7 <__mulsf3+0x12e>
c00270cb:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00270cf:	0f 89 8a 00 00 00    	jns    c002715f <__mulsf3+0x1b6>
c00270d5:	eb cd                	jmp    c00270a4 <__mulsf3+0xfb>
c00270d7:	8d 43 ff             	lea    eax,[ebx-0x1]
c00270da:	01 f6                	add    esi,esi
c00270dc:	78 04                	js     c00270e2 <__mulsf3+0x139>
c00270de:	89 c3                	mov    ebx,eax
c00270e0:	eb f5                	jmp    c00270d7 <__mulsf3+0x12e>
c00270e2:	89 c8                	mov    eax,ecx
c00270e4:	0d 00 00 00 80       	or     eax,0x80000000
c00270e9:	81 ce 00 00 00 80    	or     esi,0x80000000
c00270ef:	f7 e6                	mul    esi
c00270f1:	85 c0                	test   eax,eax
c00270f3:	0f 95 c0             	setne  al
c00270f6:	0f b6 c0             	movzx  eax,al
c00270f9:	09 c2                	or     edx,eax
c00270fb:	78 03                	js     c0027100 <__mulsf3+0x157>
c00270fd:	01 d2                	add    edx,edx
c00270ff:	4b                   	dec    ebx
c0027100:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0027106:	7f 22                	jg     c002712a <__mulsf3+0x181>
c0027108:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c002710e:	85 db                	test   ebx,ebx
c0027110:	7f 23                	jg     c0027135 <__mulsf3+0x18c>
c0027112:	83 fb e9             	cmp    ebx,0xffffffe9
c0027115:	7c 1a                	jl     c0027131 <__mulsf3+0x188>
c0027117:	81 ca 00 00 00 80    	or     edx,0x80000000
c002711d:	b9 01 00 00 00       	mov    ecx,0x1
c0027122:	29 d9                	sub    ecx,ebx
c0027124:	d3 ea                	shr    edx,cl
c0027126:	31 db                	xor    ebx,ebx
c0027128:	eb 0b                	jmp    c0027135 <__mulsf3+0x18c>
c002712a:	bb ff 00 00 00       	mov    ebx,0xff
c002712f:	eb 02                	jmp    c0027133 <__mulsf3+0x18a>
c0027131:	31 db                	xor    ebx,ebx
c0027133:	31 d2                	xor    edx,edx
c0027135:	89 d0                	mov    eax,edx
c0027137:	c1 e8 08             	shr    eax,0x8
c002713a:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c002713d:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027143:	09 fb                	or     ebx,edi
c0027145:	c1 e3 17             	shl    ebx,0x17
c0027148:	09 c3                	or     ebx,eax
c002714a:	f6 c2 7f             	test   dl,0x7f
c002714d:	0f 95 c1             	setne  cl
c0027150:	09 c8                	or     eax,ecx
c0027152:	83 e0 01             	and    eax,0x1
c0027155:	c1 ea 07             	shr    edx,0x7
c0027158:	21 c2                	and    edx,eax
c002715a:	8d 34 13             	lea    esi,[ebx+edx*1]
c002715d:	eb 03                	jmp    c0027162 <__mulsf3+0x1b9>
c002715f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0027162:	89 f0                	mov    eax,esi
c0027164:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027167:	5b                   	pop    ebx
c0027168:	5e                   	pop    esi
c0027169:	5f                   	pop    edi
c002716a:	5d                   	pop    ebp
c002716b:	c3                   	ret    

c002716c <__divsf3>:
c002716c:	55                   	push   ebp
c002716d:	89 e5                	mov    ebp,esp
c002716f:	57                   	push   edi
c0027170:	56                   	push   esi
c0027171:	53                   	push   ebx
c0027172:	83 ec 1c             	sub    esp,0x1c
c0027175:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027178:	89 d8                	mov    eax,ebx
c002717a:	89 d9                	mov    ecx,ebx
c002717c:	c1 f9 17             	sar    ecx,0x17
c002717f:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027182:	c1 e0 08             	shl    eax,0x8
c0027185:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002718a:	89 c1                	mov    ecx,eax
c002718c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002718f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027192:	89 c7                	mov    edi,eax
c0027194:	c1 ff 17             	sar    edi,0x17
c0027197:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c002719b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002719e:	89 f8                	mov    eax,edi
c00271a0:	0f b6 c0             	movzx  eax,al
c00271a3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271a6:	29 c6                	sub    esi,eax
c00271a8:	83 c6 7f             	add    esi,0x7f
c00271ab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c00271ae:	42                   	inc    edx
c00271af:	80 e2 fe             	and    dl,0xfe
c00271b2:	0f 85 9c 00 00 00    	jne    c0027254 <__divsf3+0xe8>
c00271b8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00271bc:	74 33                	je     c00271f1 <__divsf3+0x85>
c00271be:	85 c9                	test   ecx,ecx
c00271c0:	0f 85 c7 01 00 00    	jne    c002738d <__divsf3+0x221>
c00271c6:	8d 57 01             	lea    edx,[edi+0x1]
c00271c9:	80 e2 fe             	and    dl,0xfe
c00271cc:	75 2f                	jne    c00271fd <__divsf3+0x91>
c00271ce:	85 c0                	test   eax,eax
c00271d0:	74 2b                	je     c00271fd <__divsf3+0x91>
c00271d2:	51                   	push   ecx
c00271d3:	51                   	push   ecx
c00271d4:	6a 00                	push   0x0
c00271d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00271d9:	e8 d2 03 00 00       	call   c00275b0 <__nesf2>
c00271de:	83 c4 10             	add    esp,0x10
c00271e1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00271e4:	85 c0                	test   eax,eax
c00271e6:	0f 85 a1 01 00 00    	jne    c002738d <__divsf3+0x221>
c00271ec:	e9 92 01 00 00       	jmp    c0027383 <__divsf3+0x217>
c00271f1:	85 c9                	test   ecx,ecx
c00271f3:	75 1b                	jne    c0027210 <__divsf3+0xa4>
c00271f5:	8d 57 01             	lea    edx,[edi+0x1]
c00271f8:	80 e2 fe             	and    dl,0xfe
c00271fb:	74 1e                	je     c002721b <__divsf3+0xaf>
c00271fd:	85 ff                	test   edi,edi
c00271ff:	0f 89 88 01 00 00    	jns    c002738d <__divsf3+0x221>
c0027205:	81 c3 00 00 00 80    	add    ebx,0x80000000
c002720b:	e9 7d 01 00 00       	jmp    c002738d <__divsf3+0x221>
c0027210:	8d 56 ff             	lea    edx,[esi-0x1]
c0027213:	01 c9                	add    ecx,ecx
c0027215:	78 3d                	js     c0027254 <__divsf3+0xe8>
c0027217:	89 d6                	mov    esi,edx
c0027219:	eb f5                	jmp    c0027210 <__divsf3+0xa4>
c002721b:	85 c0                	test   eax,eax
c002721d:	b8 00 00 00 00       	mov    eax,0x0
c0027222:	74 18                	je     c002723c <__divsf3+0xd0>
c0027224:	52                   	push   edx
c0027225:	52                   	push   edx
c0027226:	50                   	push   eax
c0027227:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002722a:	e8 81 03 00 00       	call   c00275b0 <__nesf2>
c002722f:	83 c4 10             	add    esp,0x10
c0027232:	85 c0                	test   eax,eax
c0027234:	0f 85 50 01 00 00    	jne    c002738a <__divsf3+0x21e>
c002723a:	eb c1                	jmp    c00271fd <__divsf3+0x91>
c002723c:	56                   	push   esi
c002723d:	56                   	push   esi
c002723e:	50                   	push   eax
c002723f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027242:	e8 69 03 00 00       	call   c00275b0 <__nesf2>
c0027247:	83 c4 10             	add    esp,0x10
c002724a:	85 c0                	test   eax,eax
c002724c:	0f 84 31 01 00 00    	je     c0027383 <__divsf3+0x217>
c0027252:	eb a9                	jmp    c00271fd <__divsf3+0x91>
c0027254:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0027257:	c1 e3 08             	shl    ebx,0x8
c002725a:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027260:	8d 57 01             	lea    edx,[edi+0x1]
c0027263:	80 e2 fe             	and    dl,0xfe
c0027266:	75 71                	jne    c00272d9 <__divsf3+0x16d>
c0027268:	85 c0                	test   eax,eax
c002726a:	ba 00 00 00 00       	mov    edx,0x0
c002726f:	74 2f                	je     c00272a0 <__divsf3+0x134>
c0027271:	51                   	push   ecx
c0027272:	51                   	push   ecx
c0027273:	52                   	push   edx
c0027274:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027277:	e8 f9 02 00 00       	call   c0027575 <__eqsf2>
c002727c:	83 c4 10             	add    esp,0x10
c002727f:	85 c0                	test   eax,eax
c0027281:	0f 85 03 01 00 00    	jne    c002738a <__divsf3+0x21e>
c0027287:	31 d2                	xor    edx,edx
c0027289:	89 d3                	mov    ebx,edx
c002728b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002728e:	31 f8                	xor    eax,edi
c0027290:	0f 89 f7 00 00 00    	jns    c002738d <__divsf3+0x221>
c0027296:	bb 00 00 00 80       	mov    ebx,0x80000000
c002729b:	e9 ed 00 00 00       	jmp    c002738d <__divsf3+0x221>
c00272a0:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00272a3:	50                   	push   eax
c00272a4:	50                   	push   eax
c00272a5:	52                   	push   edx
c00272a6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00272a9:	e8 c7 02 00 00       	call   c0027575 <__eqsf2>
c00272ae:	83 c4 10             	add    esp,0x10
c00272b1:	85 c0                	test   eax,eax
c00272b3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00272b6:	75 16                	jne    c00272ce <__divsf3+0x162>
c00272b8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00272bb:	31 fb                	xor    ebx,edi
c00272bd:	81 e3 00 00 00 80    	and    ebx,0x80000000
c00272c3:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c00272c9:	e9 bf 00 00 00       	jmp    c002738d <__divsf3+0x221>
c00272ce:	8d 46 01             	lea    eax,[esi+0x1]
c00272d1:	01 db                	add    ebx,ebx
c00272d3:	78 04                	js     c00272d9 <__divsf3+0x16d>
c00272d5:	89 c6                	mov    esi,eax
c00272d7:	eb f5                	jmp    c00272ce <__divsf3+0x162>
c00272d9:	89 c8                	mov    eax,ecx
c00272db:	0d 00 00 00 80       	or     eax,0x80000000
c00272e0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00272e6:	31 d2                	xor    edx,edx
c00272e8:	39 d8                	cmp    eax,ebx
c00272ea:	72 07                	jb     c00272f3 <__divsf3+0x187>
c00272ec:	29 d8                	sub    eax,ebx
c00272ee:	ba 01 00 00 00       	mov    edx,0x1
c00272f3:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c00272fa:	01 d2                	add    edx,edx
c00272fc:	89 c1                	mov    ecx,eax
c00272fe:	01 c0                	add    eax,eax
c0027300:	85 c9                	test   ecx,ecx
c0027302:	78 04                	js     c0027308 <__divsf3+0x19c>
c0027304:	39 c3                	cmp    ebx,eax
c0027306:	77 05                	ja     c002730d <__divsf3+0x1a1>
c0027308:	29 d8                	sub    eax,ebx
c002730a:	83 ca 01             	or     edx,0x1
c002730d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027310:	75 e8                	jne    c00272fa <__divsf3+0x18e>
c0027312:	85 c0                	test   eax,eax
c0027314:	0f 95 c0             	setne  al
c0027317:	0f b6 c0             	movzx  eax,al
c002731a:	c1 e2 06             	shl    edx,0x6
c002731d:	09 c2                	or     edx,eax
c002731f:	78 03                	js     c0027324 <__divsf3+0x1b8>
c0027321:	01 d2                	add    edx,edx
c0027323:	4e                   	dec    esi
c0027324:	81 fe fe 00 00 00    	cmp    esi,0xfe
c002732a:	7f 22                	jg     c002734e <__divsf3+0x1e2>
c002732c:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027332:	85 f6                	test   esi,esi
c0027334:	7f 23                	jg     c0027359 <__divsf3+0x1ed>
c0027336:	83 fe e9             	cmp    esi,0xffffffe9
c0027339:	7c 1a                	jl     c0027355 <__divsf3+0x1e9>
c002733b:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027341:	b9 01 00 00 00       	mov    ecx,0x1
c0027346:	29 f1                	sub    ecx,esi
c0027348:	d3 ea                	shr    edx,cl
c002734a:	31 f6                	xor    esi,esi
c002734c:	eb 0b                	jmp    c0027359 <__divsf3+0x1ed>
c002734e:	be ff 00 00 00       	mov    esi,0xff
c0027353:	eb 02                	jmp    c0027357 <__divsf3+0x1eb>
c0027355:	31 f6                	xor    esi,esi
c0027357:	31 d2                	xor    edx,edx
c0027359:	89 d0                	mov    eax,edx
c002735b:	c1 e8 08             	shr    eax,0x8
c002735e:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027361:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027367:	09 fe                	or     esi,edi
c0027369:	c1 e6 17             	shl    esi,0x17
c002736c:	09 c6                	or     esi,eax
c002736e:	f6 c2 7f             	test   dl,0x7f
c0027371:	0f 95 c1             	setne  cl
c0027374:	09 c8                	or     eax,ecx
c0027376:	83 e0 01             	and    eax,0x1
c0027379:	c1 ea 07             	shr    edx,0x7
c002737c:	21 c2                	and    edx,eax
c002737e:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027381:	eb 0a                	jmp    c002738d <__divsf3+0x221>
c0027383:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027388:	eb 03                	jmp    c002738d <__divsf3+0x221>
c002738a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002738d:	89 d8                	mov    eax,ebx
c002738f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027392:	5b                   	pop    ebx
c0027393:	5e                   	pop    esi
c0027394:	5f                   	pop    edi
c0027395:	5d                   	pop    ebp
c0027396:	c3                   	ret    

c0027397 <__floatsisf>:
c0027397:	55                   	push   ebp
c0027398:	89 e5                	mov    ebp,esp
c002739a:	53                   	push   ebx
c002739b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002739e:	85 d2                	test   edx,edx
c00273a0:	7e 2b                	jle    c00273cd <__floatsisf+0x36>
c00273a2:	0f bd ca             	bsr    ecx,edx
c00273a5:	83 f1 1f             	xor    ecx,0x1f
c00273a8:	d3 e2                	shl    edx,cl
c00273aa:	89 d0                	mov    eax,edx
c00273ac:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273b1:	89 c3                	mov    ebx,eax
c00273b3:	c1 eb 08             	shr    ebx,0x8
c00273b6:	80 e2 7f             	and    dl,0x7f
c00273b9:	0f 95 c2             	setne  dl
c00273bc:	09 da                	or     edx,ebx
c00273be:	83 e2 01             	and    edx,0x1
c00273c1:	c1 e8 07             	shr    eax,0x7
c00273c4:	21 c2                	and    edx,eax
c00273c6:	b8 9e 00 00 00       	mov    eax,0x9e
c00273cb:	eb 32                	jmp    c00273ff <__floatsisf+0x68>
c00273cd:	b8 00 00 00 00       	mov    eax,0x0
c00273d2:	74 34                	je     c0027408 <__floatsisf+0x71>
c00273d4:	f7 da                	neg    edx
c00273d6:	0f bd ca             	bsr    ecx,edx
c00273d9:	83 f1 1f             	xor    ecx,0x1f
c00273dc:	d3 e2                	shl    edx,cl
c00273de:	89 d0                	mov    eax,edx
c00273e0:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00273e5:	89 c3                	mov    ebx,eax
c00273e7:	c1 eb 08             	shr    ebx,0x8
c00273ea:	80 e2 7f             	and    dl,0x7f
c00273ed:	0f 95 c2             	setne  dl
c00273f0:	09 da                	or     edx,ebx
c00273f2:	83 e2 01             	and    edx,0x1
c00273f5:	c1 e8 07             	shr    eax,0x7
c00273f8:	21 c2                	and    edx,eax
c00273fa:	b8 9e 01 00 00       	mov    eax,0x19e
c00273ff:	29 c8                	sub    eax,ecx
c0027401:	c1 e0 17             	shl    eax,0x17
c0027404:	09 d8                	or     eax,ebx
c0027406:	01 d0                	add    eax,edx
c0027408:	5b                   	pop    ebx
c0027409:	5d                   	pop    ebp
c002740a:	c3                   	ret    

c002740b <__floatunsisf>:
c002740b:	55                   	push   ebp
c002740c:	89 e5                	mov    ebp,esp
c002740e:	53                   	push   ebx
c002740f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027412:	31 c0                	xor    eax,eax
c0027414:	85 d2                	test   edx,edx
c0027416:	74 32                	je     c002744a <__floatunsisf+0x3f>
c0027418:	0f bd ca             	bsr    ecx,edx
c002741b:	83 f1 1f             	xor    ecx,0x1f
c002741e:	d3 e2                	shl    edx,cl
c0027420:	89 d0                	mov    eax,edx
c0027422:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027427:	89 c3                	mov    ebx,eax
c0027429:	c1 eb 08             	shr    ebx,0x8
c002742c:	80 e2 7f             	and    dl,0x7f
c002742f:	0f 95 c2             	setne  dl
c0027432:	09 da                	or     edx,ebx
c0027434:	83 e2 01             	and    edx,0x1
c0027437:	c1 e8 07             	shr    eax,0x7
c002743a:	21 c2                	and    edx,eax
c002743c:	b8 9e 00 00 00       	mov    eax,0x9e
c0027441:	29 c8                	sub    eax,ecx
c0027443:	c1 e0 17             	shl    eax,0x17
c0027446:	09 d8                	or     eax,ebx
c0027448:	01 d0                	add    eax,edx
c002744a:	5b                   	pop    ebx
c002744b:	5d                   	pop    ebp
c002744c:	c3                   	ret    

c002744d <__fixsfsi>:
c002744d:	55                   	push   ebp
c002744e:	89 e5                	mov    ebp,esp
c0027450:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027453:	89 d1                	mov    ecx,edx
c0027455:	c1 e1 08             	shl    ecx,0x8
c0027458:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c002745e:	c1 fa 17             	sar    edx,0x17
c0027461:	78 1c                	js     c002747f <__fixsfsi+0x32>
c0027463:	83 ea 7f             	sub    edx,0x7f
c0027466:	31 c0                	xor    eax,eax
c0027468:	83 fa 1e             	cmp    edx,0x1e
c002746b:	77 40                	ja     c00274ad <__fixsfsi+0x60>
c002746d:	89 c8                	mov    eax,ecx
c002746f:	0d 00 00 00 80       	or     eax,0x80000000
c0027474:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027479:	29 d1                	sub    ecx,edx
c002747b:	d3 e8                	shr    eax,cl
c002747d:	eb 2e                	jmp    c00274ad <__fixsfsi+0x60>
c002747f:	31 c0                	xor    eax,eax
c0027481:	81 c2 81 00 00 00    	add    edx,0x81
c0027487:	78 24                	js     c00274ad <__fixsfsi+0x60>
c0027489:	83 fa 1e             	cmp    edx,0x1e
c002748c:	7e 09                	jle    c0027497 <__fixsfsi+0x4a>
c002748e:	83 fa 1f             	cmp    edx,0x1f
c0027491:	75 18                	jne    c00274ab <__fixsfsi+0x5e>
c0027493:	85 c9                	test   ecx,ecx
c0027495:	75 14                	jne    c00274ab <__fixsfsi+0x5e>
c0027497:	89 c8                	mov    eax,ecx
c0027499:	0d 00 00 00 80       	or     eax,0x80000000
c002749e:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274a3:	29 d1                	sub    ecx,edx
c00274a5:	d3 e8                	shr    eax,cl
c00274a7:	f7 d8                	neg    eax
c00274a9:	eb 02                	jmp    c00274ad <__fixsfsi+0x60>
c00274ab:	31 c0                	xor    eax,eax
c00274ad:	5d                   	pop    ebp
c00274ae:	c3                   	ret    

c00274af <__fixunssfsi>:
c00274af:	55                   	push   ebp
c00274b0:	89 e5                	mov    ebp,esp
c00274b2:	53                   	push   ebx
c00274b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00274b6:	89 d3                	mov    ebx,edx
c00274b8:	c1 fb 17             	sar    ebx,0x17
c00274bb:	83 eb 7f             	sub    ebx,0x7f
c00274be:	31 c0                	xor    eax,eax
c00274c0:	83 fb 1f             	cmp    ebx,0x1f
c00274c3:	77 18                	ja     c00274dd <__fixunssfsi+0x2e>
c00274c5:	89 d0                	mov    eax,edx
c00274c7:	c1 e0 08             	shl    eax,0x8
c00274ca:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00274cf:	0d 00 00 00 80       	or     eax,0x80000000
c00274d4:	b9 1f 00 00 00       	mov    ecx,0x1f
c00274d9:	29 d9                	sub    ecx,ebx
c00274db:	d3 e8                	shr    eax,cl
c00274dd:	5b                   	pop    ebx
c00274de:	5d                   	pop    ebp
c00274df:	c3                   	ret    

c00274e0 <__cmpsf2>:
c00274e0:	55                   	push   ebp
c00274e1:	89 e5                	mov    ebp,esp
c00274e3:	57                   	push   edi
c00274e4:	56                   	push   esi
c00274e5:	53                   	push   ebx
c00274e6:	83 ec 24             	sub    esp,0x24
c00274e9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00274ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00274ef:	e8 4f 10 00 00       	call   c0028543 <__truncdfsf2>
c00274f4:	5a                   	pop    edx
c00274f5:	59                   	pop    ecx
c00274f6:	89 c3                	mov    ebx,eax
c00274f8:	c1 e8 17             	shr    eax,0x17
c00274fb:	0f b6 f0             	movzx  esi,al
c00274fe:	89 d8                	mov    eax,ebx
c0027500:	c1 e8 1f             	shr    eax,0x1f
c0027503:	31 c6                	xor    esi,eax
c0027505:	c1 e3 08             	shl    ebx,0x8
c0027508:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002750b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002750e:	e8 30 10 00 00       	call   c0028543 <__truncdfsf2>
c0027513:	83 c4 10             	add    esp,0x10
c0027516:	89 c1                	mov    ecx,eax
c0027518:	c1 e9 17             	shr    ecx,0x17
c002751b:	0f b6 c9             	movzx  ecx,cl
c002751e:	89 c7                	mov    edi,eax
c0027520:	c1 ef 1f             	shr    edi,0x1f
c0027523:	89 ca                	mov    edx,ecx
c0027525:	31 fa                	xor    edx,edi
c0027527:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c002752a:	c1 e0 08             	shl    eax,0x8
c002752d:	89 c2                	mov    edx,eax
c002752f:	89 d8                	mov    eax,ebx
c0027531:	09 d0                	or     eax,edx
c0027533:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027538:	09 f0                	or     eax,esi
c002753a:	75 08                	jne    c0027544 <__cmpsf2+0x64>
c002753c:	31 c0                	xor    eax,eax
c002753e:	39 f9                	cmp    ecx,edi
c0027540:	75 0c                	jne    c002754e <__cmpsf2+0x6e>
c0027542:	eb 29                	jmp    c002756d <__cmpsf2+0x8d>
c0027544:	b8 01 00 00 00       	mov    eax,0x1
c0027549:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c002754c:	7f 1f                	jg     c002756d <__cmpsf2+0x8d>
c002754e:	83 c8 ff             	or     eax,0xffffffff
c0027551:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027554:	7c 17                	jl     c002756d <__cmpsf2+0x8d>
c0027556:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002755c:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027562:	b8 01 00 00 00       	mov    eax,0x1
c0027567:	39 d3                	cmp    ebx,edx
c0027569:	77 02                	ja     c002756d <__cmpsf2+0x8d>
c002756b:	19 c0                	sbb    eax,eax
c002756d:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027570:	5b                   	pop    ebx
c0027571:	5e                   	pop    esi
c0027572:	5f                   	pop    edi
c0027573:	5d                   	pop    ebp
c0027574:	c3                   	ret    

c0027575 <__eqsf2>:
c0027575:	55                   	push   ebp
c0027576:	89 e5                	mov    ebp,esp
c0027578:	83 ec 24             	sub    esp,0x24
c002757b:	6a 01                	push   0x1
c002757d:	83 ec 0c             	sub    esp,0xc
c0027580:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027583:	e8 df 10 00 00       	call   c0028667 <__extendsfdf2>
c0027588:	83 c4 10             	add    esp,0x10
c002758b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002758e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027591:	52                   	push   edx
c0027592:	50                   	push   eax
c0027593:	50                   	push   eax
c0027594:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027597:	e8 cb 10 00 00       	call   c0028667 <__extendsfdf2>
c002759c:	59                   	pop    ecx
c002759d:	59                   	pop    ecx
c002759e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275a1:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275a4:	52                   	push   edx
c00275a5:	50                   	push   eax
c00275a6:	e8 35 ff ff ff       	call   c00274e0 <__cmpsf2>
c00275ab:	83 c4 20             	add    esp,0x20
c00275ae:	c9                   	leave  
c00275af:	c3                   	ret    

c00275b0 <__nesf2>:
c00275b0:	eb c3                	jmp    c0027575 <__eqsf2>

c00275b2 <__gtsf2>:
c00275b2:	55                   	push   ebp
c00275b3:	89 e5                	mov    ebp,esp
c00275b5:	83 ec 24             	sub    esp,0x24
c00275b8:	6a ff                	push   0xffffffff
c00275ba:	83 ec 0c             	sub    esp,0xc
c00275bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00275c0:	e8 a2 10 00 00       	call   c0028667 <__extendsfdf2>
c00275c5:	83 c4 10             	add    esp,0x10
c00275c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275cb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275ce:	52                   	push   edx
c00275cf:	50                   	push   eax
c00275d0:	50                   	push   eax
c00275d1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00275d4:	e8 8e 10 00 00       	call   c0028667 <__extendsfdf2>
c00275d9:	59                   	pop    ecx
c00275da:	59                   	pop    ecx
c00275db:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00275de:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00275e1:	52                   	push   edx
c00275e2:	50                   	push   eax
c00275e3:	e8 f8 fe ff ff       	call   c00274e0 <__cmpsf2>
c00275e8:	83 c4 20             	add    esp,0x20
c00275eb:	c9                   	leave  
c00275ec:	c3                   	ret    

c00275ed <__gesf2>:
c00275ed:	eb c3                	jmp    c00275b2 <__gtsf2>

c00275ef <__ltsf2>:
c00275ef:	eb 84                	jmp    c0027575 <__eqsf2>

c00275f1 <__lesf2>:
c00275f1:	eb 82                	jmp    c0027575 <__eqsf2>

c00275f3 <__adddf3>:
c00275f3:	55                   	push   ebp
c00275f4:	89 e5                	mov    ebp,esp
c00275f6:	57                   	push   edi
c00275f7:	56                   	push   esi
c00275f8:	53                   	push   ebx
c00275f9:	83 ec 24             	sub    esp,0x24
c00275fc:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00275ff:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027602:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027605:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027608:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002760b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002760e:	89 c8                	mov    eax,ecx
c0027610:	89 ce                	mov    esi,ecx
c0027612:	c1 fe 14             	sar    esi,0x14
c0027615:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027618:	89 fb                	mov    ebx,edi
c002761a:	89 fa                	mov    edx,edi
c002761c:	c1 e2 0b             	shl    edx,0xb
c002761f:	c1 e0 0b             	shl    eax,0xb
c0027622:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027627:	c1 eb 15             	shr    ebx,0x15
c002762a:	09 d8                	or     eax,ebx
c002762c:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c002762f:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027632:	c1 fe 14             	sar    esi,0x14
c0027635:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027638:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c002763b:	89 f3                	mov    ebx,esi
c002763d:	c1 e3 0b             	shl    ebx,0xb
c0027640:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027643:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027646:	c1 e3 0b             	shl    ebx,0xb
c0027649:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c002764f:	c1 ee 15             	shr    esi,0x15
c0027652:	09 f3                	or     ebx,esi
c0027654:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027657:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002765a:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c002765d:	0f 88 5f 02 00 00    	js     c00278c2 <__adddf3+0x2cf>
c0027663:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027666:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027669:	85 db                	test   ebx,ebx
c002766b:	0f 8e c7 00 00 00    	jle    c0027738 <__adddf3+0x145>
c0027671:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027678:	75 1a                	jne    c0027694 <__adddf3+0xa1>
c002767a:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002767d:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027680:	0f 84 b2 05 00 00    	je     c0027c38 <__adddf3+0x645>
c0027686:	4b                   	dec    ebx
c0027687:	75 23                	jne    c00276ac <__adddf3+0xb9>
c0027689:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002768c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002768f:	e9 99 00 00 00       	jmp    c002772d <__adddf3+0x13a>
c0027694:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027697:	f7 d6                	not    esi
c0027699:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002769f:	0f 84 93 05 00 00    	je     c0027c38 <__adddf3+0x645>
c00276a5:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c00276ac:	83 fb 1f             	cmp    ebx,0x1f
c00276af:	7e 42                	jle    c00276f3 <__adddf3+0x100>
c00276b1:	83 fb 3f             	cmp    ebx,0x3f
c00276b4:	0f 8f 7e 05 00 00    	jg     c0027c38 <__adddf3+0x645>
c00276ba:	83 e3 1f             	and    ebx,0x1f
c00276bd:	89 d9                	mov    ecx,ebx
c00276bf:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00276c2:	d3 ef                	shr    edi,cl
c00276c4:	31 db                	xor    ebx,ebx
c00276c6:	85 c9                	test   ecx,ecx
c00276c8:	74 15                	je     c00276df <__adddf3+0xec>
c00276ca:	be 20 00 00 00       	mov    esi,0x20
c00276cf:	29 ce                	sub    esi,ecx
c00276d1:	89 f1                	mov    ecx,esi
c00276d3:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00276d6:	d3 e6                	shl    esi,cl
c00276d8:	31 db                	xor    ebx,ebx
c00276da:	85 f6                	test   esi,esi
c00276dc:	0f 95 c3             	setne  bl
c00276df:	31 c9                	xor    ecx,ecx
c00276e1:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00276e5:	0f 95 c1             	setne  cl
c00276e8:	09 cf                	or     edi,ecx
c00276ea:	09 fb                	or     ebx,edi
c00276ec:	01 da                	add    edx,ebx
c00276ee:	83 d0 00             	adc    eax,0x0
c00276f1:	eb 3a                	jmp    c002772d <__adddf3+0x13a>
c00276f3:	bf 20 00 00 00       	mov    edi,0x20
c00276f8:	29 df                	sub    edi,ebx
c00276fa:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00276fd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027700:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027703:	d3 e6                	shl    esi,cl
c0027705:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027708:	88 d9                	mov    cl,bl
c002770a:	d3 ef                	shr    edi,cl
c002770c:	09 fe                	or     esi,edi
c002770e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027711:	88 d9                	mov    cl,bl
c0027713:	d3 ef                	shr    edi,cl
c0027715:	89 fb                	mov    ebx,edi
c0027717:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002771a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002771d:	d3 e7                	shl    edi,cl
c002771f:	85 ff                	test   edi,edi
c0027721:	0f 95 c1             	setne  cl
c0027724:	0f b6 c9             	movzx  ecx,cl
c0027727:	09 ce                	or     esi,ecx
c0027729:	01 f2                	add    edx,esi
c002772b:	11 d8                	adc    eax,ebx
c002772d:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027730:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027733:	e9 52 01 00 00       	jmp    c002788a <__adddf3+0x297>
c0027738:	0f 84 d5 00 00 00    	je     c0027813 <__adddf3+0x220>
c002773e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027741:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027744:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027747:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002774a:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027751:	75 20                	jne    c0027773 <__adddf3+0x180>
c0027753:	89 d6                	mov    esi,edx
c0027755:	09 c6                	or     esi,eax
c0027757:	0f 84 db 04 00 00    	je     c0027c38 <__adddf3+0x645>
c002775d:	4b                   	dec    ebx
c002775e:	75 29                	jne    c0027789 <__adddf3+0x196>
c0027760:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027763:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027766:	01 d1                	add    ecx,edx
c0027768:	11 c6                	adc    esi,eax
c002776a:	89 f0                	mov    eax,esi
c002776c:	89 ca                	mov    edx,ecx
c002776e:	e9 17 01 00 00       	jmp    c002788a <__adddf3+0x297>
c0027773:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027776:	f7 d6                	not    esi
c0027778:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002777e:	0f 84 b4 04 00 00    	je     c0027c38 <__adddf3+0x645>
c0027784:	0d 00 00 00 80       	or     eax,0x80000000
c0027789:	83 fb 1f             	cmp    ebx,0x1f
c002778c:	7e 48                	jle    c00277d6 <__adddf3+0x1e3>
c002778e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027791:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027794:	83 fb 3f             	cmp    ebx,0x3f
c0027797:	0f 8f 9b 04 00 00    	jg     c0027c38 <__adddf3+0x645>
c002779d:	83 e3 1f             	and    ebx,0x1f
c00277a0:	89 d9                	mov    ecx,ebx
c00277a2:	89 c7                	mov    edi,eax
c00277a4:	d3 ef                	shr    edi,cl
c00277a6:	31 db                	xor    ebx,ebx
c00277a8:	85 c9                	test   ecx,ecx
c00277aa:	74 12                	je     c00277be <__adddf3+0x1cb>
c00277ac:	be 20 00 00 00       	mov    esi,0x20
c00277b1:	29 ce                	sub    esi,ecx
c00277b3:	89 f1                	mov    ecx,esi
c00277b5:	d3 e0                	shl    eax,cl
c00277b7:	31 db                	xor    ebx,ebx
c00277b9:	85 c0                	test   eax,eax
c00277bb:	0f 95 c3             	setne  bl
c00277be:	31 c0                	xor    eax,eax
c00277c0:	85 d2                	test   edx,edx
c00277c2:	0f 95 c0             	setne  al
c00277c5:	09 c7                	or     edi,eax
c00277c7:	09 fb                	or     ebx,edi
c00277c9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00277cc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00277cf:	01 da                	add    edx,ebx
c00277d1:	83 d6 00             	adc    esi,0x0
c00277d4:	eb 39                	jmp    c002780f <__adddf3+0x21c>
c00277d6:	be 20 00 00 00       	mov    esi,0x20
c00277db:	29 de                	sub    esi,ebx
c00277dd:	89 c7                	mov    edi,eax
c00277df:	89 f1                	mov    ecx,esi
c00277e1:	d3 e7                	shl    edi,cl
c00277e3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00277e6:	89 d7                	mov    edi,edx
c00277e8:	88 d9                	mov    cl,bl
c00277ea:	d3 ef                	shr    edi,cl
c00277ec:	89 f9                	mov    ecx,edi
c00277ee:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00277f1:	09 cf                	or     edi,ecx
c00277f3:	88 d9                	mov    cl,bl
c00277f5:	d3 e8                	shr    eax,cl
c00277f7:	89 f1                	mov    ecx,esi
c00277f9:	d3 e2                	shl    edx,cl
c00277fb:	85 d2                	test   edx,edx
c00277fd:	0f 95 c2             	setne  dl
c0027800:	0f b6 d2             	movzx  edx,dl
c0027803:	09 d7                	or     edi,edx
c0027805:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027808:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002780b:	01 fa                	add    edx,edi
c002780d:	11 c6                	adc    esi,eax
c002780f:	89 f0                	mov    eax,esi
c0027811:	eb 77                	jmp    c002788a <__adddf3+0x297>
c0027813:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027816:	46                   	inc    esi
c0027817:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002781a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027820:	75 41                	jne    c0027863 <__adddf3+0x270>
c0027822:	89 d3                	mov    ebx,edx
c0027824:	09 c3                	or     ebx,eax
c0027826:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c002782d:	75 27                	jne    c0027856 <__adddf3+0x263>
c002782f:	85 db                	test   ebx,ebx
c0027831:	0f 84 fb 03 00 00    	je     c0027c32 <__adddf3+0x63f>
c0027837:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002783a:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c002783d:	0f 84 f5 03 00 00    	je     c0027c38 <__adddf3+0x645>
c0027843:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027846:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027849:	85 c0                	test   eax,eax
c002784b:	0f 89 91 03 00 00    	jns    c0027be2 <__adddf3+0x5ef>
c0027851:	e9 85 03 00 00       	jmp    c0027bdb <__adddf3+0x5e8>
c0027856:	85 db                	test   ebx,ebx
c0027858:	0f 85 da 03 00 00    	jne    c0027c38 <__adddf3+0x645>
c002785e:	e9 cf 03 00 00       	jmp    c0027c32 <__adddf3+0x63f>
c0027863:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027866:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027869:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002786c:	f7 d1                	not    ecx
c002786e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027874:	0f 84 70 03 00 00    	je     c0027bea <__adddf3+0x5f7>
c002787a:	d1 ea                	shr    edx,1
c002787c:	89 c1                	mov    ecx,eax
c002787e:	c1 e1 1f             	shl    ecx,0x1f
c0027881:	09 ca                	or     edx,ecx
c0027883:	d1 e8                	shr    eax,1
c0027885:	e9 6f 03 00 00       	jmp    c0027bf9 <__adddf3+0x606>
c002788a:	85 c0                	test   eax,eax
c002788c:	0f 89 67 03 00 00    	jns    c0027bf9 <__adddf3+0x606>
c0027892:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027895:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027898:	f7 d1                	not    ecx
c002789a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00278a0:	0f 84 44 03 00 00    	je     c0027bea <__adddf3+0x5f7>
c00278a6:	89 d1                	mov    ecx,edx
c00278a8:	d1 e9                	shr    ecx,1
c00278aa:	83 e2 01             	and    edx,0x1
c00278ad:	09 ca                	or     edx,ecx
c00278af:	89 c1                	mov    ecx,eax
c00278b1:	c1 e1 1f             	shl    ecx,0x1f
c00278b4:	09 ca                	or     edx,ecx
c00278b6:	d1 e8                	shr    eax,1
c00278b8:	25 ff ff ff 3f       	and    eax,0x3fffffff
c00278bd:	e9 37 03 00 00       	jmp    c0027bf9 <__adddf3+0x606>
c00278c2:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00278c5:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00278cb:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c00278ce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00278d1:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00278d7:	29 de                	sub    esi,ebx
c00278d9:	85 f6                	test   esi,esi
c00278db:	0f 8e bd 00 00 00    	jle    c002799e <__adddf3+0x3ab>
c00278e1:	85 db                	test   ebx,ebx
c00278e3:	75 17                	jne    c00278fc <__adddf3+0x309>
c00278e5:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00278e8:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00278eb:	0f 84 47 03 00 00    	je     c0027c38 <__adddf3+0x645>
c00278f1:	4e                   	dec    esi
c00278f2:	75 20                	jne    c0027914 <__adddf3+0x321>
c00278f4:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c00278f7:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c00278fa:	eb 5b                	jmp    c0027957 <__adddf3+0x364>
c00278fc:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00278ff:	f7 d3                	not    ebx
c0027901:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027907:	0f 84 2b 03 00 00    	je     c0027c38 <__adddf3+0x645>
c002790d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027914:	83 fe 1f             	cmp    esi,0x1f
c0027917:	7e 49                	jle    c0027962 <__adddf3+0x36f>
c0027919:	83 fe 3f             	cmp    esi,0x3f
c002791c:	0f 8f 16 03 00 00    	jg     c0027c38 <__adddf3+0x645>
c0027922:	83 e6 1f             	and    esi,0x1f
c0027925:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027928:	89 f1                	mov    ecx,esi
c002792a:	d3 ef                	shr    edi,cl
c002792c:	31 db                	xor    ebx,ebx
c002792e:	85 f6                	test   esi,esi
c0027930:	74 13                	je     c0027945 <__adddf3+0x352>
c0027932:	b9 20 00 00 00       	mov    ecx,0x20
c0027937:	29 f1                	sub    ecx,esi
c0027939:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002793c:	d3 e6                	shl    esi,cl
c002793e:	31 db                	xor    ebx,ebx
c0027940:	85 f6                	test   esi,esi
c0027942:	0f 95 c3             	setne  bl
c0027945:	31 c9                	xor    ecx,ecx
c0027947:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002794b:	0f 95 c1             	setne  cl
c002794e:	09 cf                	or     edi,ecx
c0027950:	09 fb                	or     ebx,edi
c0027952:	29 da                	sub    edx,ebx
c0027954:	83 d8 00             	sbb    eax,0x0
c0027957:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002795a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002795d:	e9 aa 01 00 00       	jmp    c0027b0c <__adddf3+0x519>
c0027962:	bf 20 00 00 00       	mov    edi,0x20
c0027967:	29 f7                	sub    edi,esi
c0027969:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002796c:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002796f:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027972:	d3 e3                	shl    ebx,cl
c0027974:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027977:	89 f1                	mov    ecx,esi
c0027979:	d3 ef                	shr    edi,cl
c002797b:	09 fb                	or     ebx,edi
c002797d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027980:	89 f1                	mov    ecx,esi
c0027982:	d3 ef                	shr    edi,cl
c0027984:	89 fe                	mov    esi,edi
c0027986:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027989:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002798c:	d3 e7                	shl    edi,cl
c002798e:	85 ff                	test   edi,edi
c0027990:	0f 95 c1             	setne  cl
c0027993:	0f b6 c9             	movzx  ecx,cl
c0027996:	09 cb                	or     ebx,ecx
c0027998:	29 da                	sub    edx,ebx
c002799a:	19 f0                	sbb    eax,esi
c002799c:	eb b9                	jmp    c0027957 <__adddf3+0x364>
c002799e:	0f 84 cd 00 00 00    	je     c0027a71 <__adddf3+0x47e>
c00279a4:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00279a7:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279aa:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279ad:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00279b1:	75 1b                	jne    c00279ce <__adddf3+0x3db>
c00279b3:	89 d6                	mov    esi,edx
c00279b5:	09 c6                	or     esi,eax
c00279b7:	0f 84 7b 02 00 00    	je     c0027c38 <__adddf3+0x645>
c00279bd:	4b                   	dec    ebx
c00279be:	75 24                	jne    c00279e4 <__adddf3+0x3f1>
c00279c0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00279c3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00279c6:	29 d1                	sub    ecx,edx
c00279c8:	19 c6                	sbb    esi,eax
c00279ca:	89 ca                	mov    edx,ecx
c00279cc:	eb 61                	jmp    c0027a2f <__adddf3+0x43c>
c00279ce:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00279d1:	f7 d6                	not    esi
c00279d3:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00279d9:	0f 84 59 02 00 00    	je     c0027c38 <__adddf3+0x645>
c00279df:	0d 00 00 00 80       	or     eax,0x80000000
c00279e4:	83 fb 1f             	cmp    ebx,0x1f
c00279e7:	7e 4d                	jle    c0027a36 <__adddf3+0x443>
c00279e9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00279ec:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00279ef:	83 fb 3f             	cmp    ebx,0x3f
c00279f2:	0f 8f 40 02 00 00    	jg     c0027c38 <__adddf3+0x645>
c00279f8:	83 e3 1f             	and    ebx,0x1f
c00279fb:	89 d9                	mov    ecx,ebx
c00279fd:	89 c7                	mov    edi,eax
c00279ff:	d3 ef                	shr    edi,cl
c0027a01:	31 db                	xor    ebx,ebx
c0027a03:	85 c9                	test   ecx,ecx
c0027a05:	74 12                	je     c0027a19 <__adddf3+0x426>
c0027a07:	be 20 00 00 00       	mov    esi,0x20
c0027a0c:	29 ce                	sub    esi,ecx
c0027a0e:	89 f1                	mov    ecx,esi
c0027a10:	d3 e0                	shl    eax,cl
c0027a12:	31 db                	xor    ebx,ebx
c0027a14:	85 c0                	test   eax,eax
c0027a16:	0f 95 c3             	setne  bl
c0027a19:	31 c0                	xor    eax,eax
c0027a1b:	85 d2                	test   edx,edx
c0027a1d:	0f 95 c0             	setne  al
c0027a20:	09 c7                	or     edi,eax
c0027a22:	09 fb                	or     ebx,edi
c0027a24:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a27:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a2a:	29 da                	sub    edx,ebx
c0027a2c:	83 de 00             	sbb    esi,0x0
c0027a2f:	89 f0                	mov    eax,esi
c0027a31:	e9 d6 00 00 00       	jmp    c0027b0c <__adddf3+0x519>
c0027a36:	be 20 00 00 00       	mov    esi,0x20
c0027a3b:	29 de                	sub    esi,ebx
c0027a3d:	89 c7                	mov    edi,eax
c0027a3f:	89 f1                	mov    ecx,esi
c0027a41:	d3 e7                	shl    edi,cl
c0027a43:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027a46:	89 d7                	mov    edi,edx
c0027a48:	88 d9                	mov    cl,bl
c0027a4a:	d3 ef                	shr    edi,cl
c0027a4c:	89 f9                	mov    ecx,edi
c0027a4e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027a51:	09 cf                	or     edi,ecx
c0027a53:	88 d9                	mov    cl,bl
c0027a55:	d3 e8                	shr    eax,cl
c0027a57:	89 f1                	mov    ecx,esi
c0027a59:	d3 e2                	shl    edx,cl
c0027a5b:	85 d2                	test   edx,edx
c0027a5d:	0f 95 c2             	setne  dl
c0027a60:	0f b6 d2             	movzx  edx,dl
c0027a63:	09 d7                	or     edi,edx
c0027a65:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027a68:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027a6b:	29 fa                	sub    edx,edi
c0027a6d:	19 c6                	sbb    esi,eax
c0027a6f:	eb be                	jmp    c0027a2f <__adddf3+0x43c>
c0027a71:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027a74:	8d 5e 01             	lea    ebx,[esi+0x1]
c0027a77:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c0027a7d:	75 6a                	jne    c0027ae9 <__adddf3+0x4f6>
c0027a7f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027a83:	75 58                	jne    c0027add <__adddf3+0x4ea>
c0027a85:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027a88:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0027a8b:	89 d6                	mov    esi,edx
c0027a8d:	09 c6                	or     esi,eax
c0027a8f:	75 17                	jne    c0027aa8 <__adddf3+0x4b5>
c0027a91:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027a94:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027a97:	85 db                	test   ebx,ebx
c0027a99:	0f 85 99 01 00 00    	jne    c0027c38 <__adddf3+0x645>
c0027a9f:	31 ff                	xor    edi,edi
c0027aa1:	31 c9                	xor    ecx,ecx
c0027aa3:	e9 90 01 00 00       	jmp    c0027c38 <__adddf3+0x645>
c0027aa8:	85 db                	test   ebx,ebx
c0027aaa:	0f 84 88 01 00 00    	je     c0027c38 <__adddf3+0x645>
c0027ab0:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027ab3:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027ab6:	85 c0                	test   eax,eax
c0027ab8:	79 10                	jns    c0027aca <__adddf3+0x4d7>
c0027aba:	31 c9                	xor    ecx,ecx
c0027abc:	f7 da                	neg    edx
c0027abe:	0f 95 c1             	setne  cl
c0027ac1:	01 c8                	add    eax,ecx
c0027ac3:	f7 d8                	neg    eax
c0027ac5:	e9 2f 01 00 00       	jmp    c0027bf9 <__adddf3+0x606>
c0027aca:	31 ff                	xor    edi,edi
c0027acc:	31 c9                	xor    ecx,ecx
c0027ace:	89 c3                	mov    ebx,eax
c0027ad0:	09 d3                	or     ebx,edx
c0027ad2:	0f 84 60 01 00 00    	je     c0027c38 <__adddf3+0x645>
c0027ad8:	e9 05 01 00 00       	jmp    c0027be2 <__adddf3+0x5ef>
c0027add:	31 ff                	xor    edi,edi
c0027adf:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027ae4:	e9 4f 01 00 00       	jmp    c0027c38 <__adddf3+0x645>
c0027ae9:	89 c1                	mov    ecx,eax
c0027aeb:	89 d0                	mov    eax,edx
c0027aed:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027af0:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027af3:	89 ca                	mov    edx,ecx
c0027af5:	85 c9                	test   ecx,ecx
c0027af7:	79 2c                	jns    c0027b25 <__adddf3+0x532>
c0027af9:	31 c9                	xor    ecx,ecx
c0027afb:	f7 d8                	neg    eax
c0027afd:	0f 95 c1             	setne  cl
c0027b00:	01 ca                	add    edx,ecx
c0027b02:	f7 da                	neg    edx
c0027b04:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027b07:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027b0a:	eb 19                	jmp    c0027b25 <__adddf3+0x532>
c0027b0c:	85 c0                	test   eax,eax
c0027b0e:	0f 89 e5 00 00 00    	jns    c0027bf9 <__adddf3+0x606>
c0027b14:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b19:	89 c1                	mov    ecx,eax
c0027b1b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027b1e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027b21:	89 d0                	mov    eax,edx
c0027b23:	89 ca                	mov    edx,ecx
c0027b25:	85 d2                	test   edx,edx
c0027b27:	74 59                	je     c0027b82 <__adddf3+0x58f>
c0027b29:	0f bd da             	bsr    ebx,edx
c0027b2c:	83 f3 1f             	xor    ebx,0x1f
c0027b2f:	88 d9                	mov    cl,bl
c0027b31:	d3 e2                	shl    edx,cl
c0027b33:	bf 20 00 00 00       	mov    edi,0x20
c0027b38:	89 f9                	mov    ecx,edi
c0027b3a:	29 d9                	sub    ecx,ebx
c0027b3c:	89 c6                	mov    esi,eax
c0027b3e:	d3 ee                	shr    esi,cl
c0027b40:	09 d6                	or     esi,edx
c0027b42:	88 d9                	mov    cl,bl
c0027b44:	d3 e0                	shl    eax,cl
c0027b46:	89 c2                	mov    edx,eax
c0027b48:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b4b:	25 ff 07 00 00       	and    eax,0x7ff
c0027b50:	39 d8                	cmp    eax,ebx
c0027b52:	7f 22                	jg     c0027b76 <__adddf3+0x583>
c0027b54:	29 c3                	sub    ebx,eax
c0027b56:	43                   	inc    ebx
c0027b57:	88 d9                	mov    cl,bl
c0027b59:	d3 ea                	shr    edx,cl
c0027b5b:	29 df                	sub    edi,ebx
c0027b5d:	89 f9                	mov    ecx,edi
c0027b5f:	89 f0                	mov    eax,esi
c0027b61:	d3 e0                	shl    eax,cl
c0027b63:	09 c2                	or     edx,eax
c0027b65:	89 f0                	mov    eax,esi
c0027b67:	88 d9                	mov    cl,bl
c0027b69:	d3 e8                	shr    eax,cl
c0027b6b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027b6e:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c0027b74:	eb 6f                	jmp    c0027be5 <__adddf3+0x5f2>
c0027b76:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b79:	29 d8                	sub    eax,ebx
c0027b7b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027b7e:	89 f0                	mov    eax,esi
c0027b80:	eb 59                	jmp    c0027bdb <__adddf3+0x5e8>
c0027b82:	85 c0                	test   eax,eax
c0027b84:	74 6a                	je     c0027bf0 <__adddf3+0x5fd>
c0027b86:	0f bd c8             	bsr    ecx,eax
c0027b89:	83 f1 1f             	xor    ecx,0x1f
c0027b8c:	d3 e0                	shl    eax,cl
c0027b8e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b91:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b97:	83 c1 20             	add    ecx,0x20
c0027b9a:	39 cb                	cmp    ebx,ecx
c0027b9c:	7f 35                	jg     c0027bd3 <__adddf3+0x5e0>
c0027b9e:	29 d9                	sub    ecx,ebx
c0027ba0:	8d 71 01             	lea    esi,[ecx+0x1]
c0027ba3:	83 fe 1f             	cmp    esi,0x1f
c0027ba6:	7e 09                	jle    c0027bb1 <__adddf3+0x5be>
c0027ba8:	83 e9 1f             	sub    ecx,0x1f
c0027bab:	d3 e8                	shr    eax,cl
c0027bad:	89 c3                	mov    ebx,eax
c0027baf:	eb 11                	jmp    c0027bc2 <__adddf3+0x5cf>
c0027bb1:	b9 20 00 00 00       	mov    ecx,0x20
c0027bb6:	29 f1                	sub    ecx,esi
c0027bb8:	89 c3                	mov    ebx,eax
c0027bba:	d3 e3                	shl    ebx,cl
c0027bbc:	89 f1                	mov    ecx,esi
c0027bbe:	d3 e8                	shr    eax,cl
c0027bc0:	89 c2                	mov    edx,eax
c0027bc2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027bc5:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027bca:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027bcd:	89 d0                	mov    eax,edx
c0027bcf:	89 da                	mov    edx,ebx
c0027bd1:	eb 26                	jmp    c0027bf9 <__adddf3+0x606>
c0027bd3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027bd6:	29 cf                	sub    edi,ecx
c0027bd8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027bdb:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027be0:	eb 17                	jmp    c0027bf9 <__adddf3+0x606>
c0027be2:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027be5:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027be8:	eb 0f                	jmp    c0027bf9 <__adddf3+0x606>
c0027bea:	31 d2                	xor    edx,edx
c0027bec:	31 c0                	xor    eax,eax
c0027bee:	eb 09                	jmp    c0027bf9 <__adddf3+0x606>
c0027bf0:	89 c2                	mov    edx,eax
c0027bf2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027bf9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027bfc:	c1 e1 14             	shl    ecx,0x14
c0027bff:	89 c3                	mov    ebx,eax
c0027c01:	c1 eb 0b             	shr    ebx,0xb
c0027c04:	09 d9                	or     ecx,ebx
c0027c06:	89 d3                	mov    ebx,edx
c0027c08:	c1 eb 0b             	shr    ebx,0xb
c0027c0b:	c1 e0 15             	shl    eax,0x15
c0027c0e:	09 d8                	or     eax,ebx
c0027c10:	89 c7                	mov    edi,eax
c0027c12:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027c18:	0f 95 c0             	setne  al
c0027c1b:	89 c6                	mov    esi,eax
c0027c1d:	09 f3                	or     ebx,esi
c0027c1f:	83 e3 01             	and    ebx,0x1
c0027c22:	c1 ea 0a             	shr    edx,0xa
c0027c25:	21 da                	and    edx,ebx
c0027c27:	89 f8                	mov    eax,edi
c0027c29:	01 d0                	add    eax,edx
c0027c2b:	83 d1 00             	adc    ecx,0x0
c0027c2e:	89 c7                	mov    edi,eax
c0027c30:	eb 06                	jmp    c0027c38 <__adddf3+0x645>
c0027c32:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027c35:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027c38:	89 f8                	mov    eax,edi
c0027c3a:	89 ca                	mov    edx,ecx
c0027c3c:	83 c4 24             	add    esp,0x24
c0027c3f:	5b                   	pop    ebx
c0027c40:	5e                   	pop    esi
c0027c41:	5f                   	pop    edi
c0027c42:	5d                   	pop    ebp
c0027c43:	c3                   	ret    

c0027c44 <__subdf3>:
c0027c44:	55                   	push   ebp
c0027c45:	89 e5                	mov    ebp,esp
c0027c47:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c4a:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027c4d:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c53:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0027c56:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0027c59:	5d                   	pop    ebp
c0027c5a:	e9 94 f9 ff ff       	jmp    c00275f3 <__adddf3>

c0027c5f <__negdf2>:
c0027c5f:	55                   	push   ebp
c0027c60:	89 e5                	mov    ebp,esp
c0027c62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027c65:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027c68:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027c6e:	5d                   	pop    ebp
c0027c6f:	c3                   	ret    

c0027c70 <__muldf3>:
c0027c70:	55                   	push   ebp
c0027c71:	89 e5                	mov    ebp,esp
c0027c73:	57                   	push   edi
c0027c74:	56                   	push   esi
c0027c75:	53                   	push   ebx
c0027c76:	83 ec 24             	sub    esp,0x24
c0027c79:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027c7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027c7f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027c82:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027c85:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027c88:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0027c8b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027c8e:	89 c8                	mov    eax,ecx
c0027c90:	c1 f8 14             	sar    eax,0x14
c0027c93:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027c96:	89 f8                	mov    eax,edi
c0027c98:	89 fb                	mov    ebx,edi
c0027c9a:	c1 e3 0b             	shl    ebx,0xb
c0027c9d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027ca0:	c1 e1 0b             	shl    ecx,0xb
c0027ca3:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ca9:	c1 e8 15             	shr    eax,0x15
c0027cac:	09 c1                	or     ecx,eax
c0027cae:	89 d6                	mov    esi,edx
c0027cb0:	89 d0                	mov    eax,edx
c0027cb2:	c1 f8 14             	sar    eax,0x14
c0027cb5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027cb8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0027cbb:	89 c3                	mov    ebx,eax
c0027cbd:	c1 e3 0b             	shl    ebx,0xb
c0027cc0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027cc3:	c1 e6 0b             	shl    esi,0xb
c0027cc6:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027ccc:	c1 e8 15             	shr    eax,0x15
c0027ccf:	09 c6                	or     esi,eax
c0027cd1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cd4:	25 ff 07 00 00       	and    eax,0x7ff
c0027cd9:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027cdc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027cdf:	25 ff 07 00 00       	and    eax,0x7ff
c0027ce4:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ce7:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027cea:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027ced:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027cf4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027cf7:	40                   	inc    eax
c0027cf8:	a9 fe 07 00 00       	test   eax,0x7fe
c0027cfd:	0f 85 8d 00 00 00    	jne    c0027d90 <__muldf3+0x120>
c0027d03:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027d06:	09 c8                	or     eax,ecx
c0027d08:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0027d0c:	74 44                	je     c0027d52 <__muldf3+0xe2>
c0027d0e:	85 c0                	test   eax,eax
c0027d10:	0f 85 31 02 00 00    	jne    c0027f47 <__muldf3+0x2d7>
c0027d16:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d19:	40                   	inc    eax
c0027d1a:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d1f:	75 13                	jne    c0027d34 <__muldf3+0xc4>
c0027d21:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027d24:	09 f1                	or     ecx,esi
c0027d26:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027d2a:	74 22                	je     c0027d4e <__muldf3+0xde>
c0027d2c:	85 c9                	test   ecx,ecx
c0027d2e:	0f 85 0d 02 00 00    	jne    c0027f41 <__muldf3+0x2d1>
c0027d34:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0027d38:	0f 89 09 02 00 00    	jns    c0027f47 <__muldf3+0x2d7>
c0027d3e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027d41:	05 00 00 00 80       	add    eax,0x80000000
c0027d46:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d49:	e9 f9 01 00 00       	jmp    c0027f47 <__muldf3+0x2d7>
c0027d4e:	85 c9                	test   ecx,ecx
c0027d50:	eb 2e                	jmp    c0027d80 <__muldf3+0x110>
c0027d52:	85 c0                	test   eax,eax
c0027d54:	74 20                	je     c0027d76 <__muldf3+0x106>
c0027d56:	8d 04 09             	lea    eax,[ecx+ecx*1]
c0027d59:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027d5c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027d5f:	c1 ef 1f             	shr    edi,0x1f
c0027d62:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c0027d65:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c0027d68:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027d6b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d6e:	09 f9                	or     ecx,edi
c0027d70:	78 1e                	js     c0027d90 <__muldf3+0x120>
c0027d72:	89 c3                	mov    ebx,eax
c0027d74:	eb e0                	jmp    c0027d56 <__muldf3+0xe6>
c0027d76:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d79:	f7 d0                	not    eax
c0027d7b:	a9 ff 07 00 00       	test   eax,0x7ff
c0027d80:	75 b2                	jne    c0027d34 <__muldf3+0xc4>
c0027d82:	31 ff                	xor    edi,edi
c0027d84:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c0027d8b:	e9 b7 01 00 00       	jmp    c0027f47 <__muldf3+0x2d7>
c0027d90:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027d93:	40                   	inc    eax
c0027d94:	a9 fe 07 00 00       	test   eax,0x7fe
c0027d99:	75 57                	jne    c0027df2 <__muldf3+0x182>
c0027d9b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0027d9e:	09 f0                	or     eax,esi
c0027da0:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027da4:	74 23                	je     c0027dc9 <__muldf3+0x159>
c0027da6:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027daa:	0f 89 91 01 00 00    	jns    c0027f41 <__muldf3+0x2d1>
c0027db0:	85 c0                	test   eax,eax
c0027db2:	0f 85 89 01 00 00    	jne    c0027f41 <__muldf3+0x2d1>
c0027db8:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027dbb:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027dc1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027dc4:	e9 7e 01 00 00       	jmp    c0027f47 <__muldf3+0x2d7>
c0027dc9:	85 c0                	test   eax,eax
c0027dcb:	75 0c                	jne    c0027dd9 <__muldf3+0x169>
c0027dcd:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027dd1:	0f 89 6a 01 00 00    	jns    c0027f41 <__muldf3+0x2d1>
c0027dd7:	eb df                	jmp    c0027db8 <__muldf3+0x148>
c0027dd9:	01 f6                	add    esi,esi
c0027ddb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027dde:	c1 ea 1f             	shr    edx,0x1f
c0027de1:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027de4:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027de7:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027dea:	09 d6                	or     esi,edx
c0027dec:	78 04                	js     c0027df2 <__muldf3+0x182>
c0027dee:	89 c3                	mov    ebx,eax
c0027df0:	eb e7                	jmp    c0027dd9 <__muldf3+0x169>
c0027df2:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027df8:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027dfe:	89 c8                	mov    eax,ecx
c0027e00:	f7 e6                	mul    esi
c0027e02:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027e05:	89 c7                	mov    edi,eax
c0027e07:	89 c8                	mov    eax,ecx
c0027e09:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e0c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0027e0f:	89 c1                	mov    ecx,eax
c0027e11:	89 f0                	mov    eax,esi
c0027e13:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027e16:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027e19:	89 c6                	mov    esi,eax
c0027e1b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027e1e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0027e21:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0027e24:	31 c0                	xor    eax,eax
c0027e26:	01 f1                	add    ecx,esi
c0027e28:	0f 92 c0             	setb   al
c0027e2b:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0027e2e:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027e31:	83 d6 00             	adc    esi,0x0
c0027e34:	01 c7                	add    edi,eax
c0027e36:	83 d6 00             	adc    esi,0x0
c0027e39:	01 ca                	add    edx,ecx
c0027e3b:	0f 92 c1             	setb   cl
c0027e3e:	0f b6 c9             	movzx  ecx,cl
c0027e41:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c0027e44:	83 d6 00             	adc    esi,0x0
c0027e47:	01 cf                	add    edi,ecx
c0027e49:	83 d6 00             	adc    esi,0x0
c0027e4c:	31 c9                	xor    ecx,ecx
c0027e4e:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c0027e51:	0f 95 c1             	setne  cl
c0027e54:	09 cf                	or     edi,ecx
c0027e56:	85 f6                	test   esi,esi
c0027e58:	78 0c                	js     c0027e66 <__muldf3+0x1f6>
c0027e5a:	01 f6                	add    esi,esi
c0027e5c:	89 f8                	mov    eax,edi
c0027e5e:	c1 e8 1f             	shr    eax,0x1f
c0027e61:	09 c6                	or     esi,eax
c0027e63:	01 ff                	add    edi,edi
c0027e65:	4b                   	dec    ebx
c0027e66:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c0027e6c:	0f 8f 85 00 00 00    	jg     c0027ef7 <__muldf3+0x287>
c0027e72:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c0027e78:	85 db                	test   ebx,ebx
c0027e7a:	0f 8f 84 00 00 00    	jg     c0027f04 <__muldf3+0x294>
c0027e80:	83 fb cc             	cmp    ebx,0xffffffcc
c0027e83:	7c 79                	jl     c0027efe <__muldf3+0x28e>
c0027e85:	ba 01 00 00 00       	mov    edx,0x1
c0027e8a:	29 da                	sub    edx,ebx
c0027e8c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027e92:	83 fa 1f             	cmp    edx,0x1f
c0027e95:	7e 30                	jle    c0027ec7 <__muldf3+0x257>
c0027e97:	83 fa 20             	cmp    edx,0x20
c0027e9a:	75 0b                	jne    c0027ea7 <__muldf3+0x237>
c0027e9c:	31 c0                	xor    eax,eax
c0027e9e:	85 ff                	test   edi,edi
c0027ea0:	0f 95 c0             	setne  al
c0027ea3:	89 c7                	mov    edi,eax
c0027ea5:	eb 1a                	jmp    c0027ec1 <__muldf3+0x251>
c0027ea7:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027eaa:	89 f0                	mov    eax,esi
c0027eac:	d3 e0                	shl    eax,cl
c0027eae:	09 f8                	or     eax,edi
c0027eb0:	0f 95 c0             	setne  al
c0027eb3:	0f b6 c0             	movzx  eax,al
c0027eb6:	89 c7                	mov    edi,eax
c0027eb8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027ebd:	29 d9                	sub    ecx,ebx
c0027ebf:	d3 ee                	shr    esi,cl
c0027ec1:	09 f7                	or     edi,esi
c0027ec3:	31 db                	xor    ebx,ebx
c0027ec5:	eb 3b                	jmp    c0027f02 <__muldf3+0x292>
c0027ec7:	83 c3 1f             	add    ebx,0x1f
c0027eca:	89 f0                	mov    eax,esi
c0027ecc:	88 d9                	mov    cl,bl
c0027ece:	d3 e0                	shl    eax,cl
c0027ed0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027ed3:	89 f8                	mov    eax,edi
c0027ed5:	88 d1                	mov    cl,dl
c0027ed7:	d3 e8                	shr    eax,cl
c0027ed9:	89 c1                	mov    ecx,eax
c0027edb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027ede:	09 c8                	or     eax,ecx
c0027ee0:	88 d9                	mov    cl,bl
c0027ee2:	d3 e7                	shl    edi,cl
c0027ee4:	31 db                	xor    ebx,ebx
c0027ee6:	85 ff                	test   edi,edi
c0027ee8:	0f 95 c3             	setne  bl
c0027eeb:	89 df                	mov    edi,ebx
c0027eed:	09 c7                	or     edi,eax
c0027eef:	88 d1                	mov    cl,dl
c0027ef1:	d3 ee                	shr    esi,cl
c0027ef3:	31 db                	xor    ebx,ebx
c0027ef5:	eb 0d                	jmp    c0027f04 <__muldf3+0x294>
c0027ef7:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027efc:	eb 02                	jmp    c0027f00 <__muldf3+0x290>
c0027efe:	31 db                	xor    ebx,ebx
c0027f00:	31 ff                	xor    edi,edi
c0027f02:	31 f6                	xor    esi,esi
c0027f04:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027f07:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027f0a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027f0f:	09 c3                	or     ebx,eax
c0027f11:	c1 e3 14             	shl    ebx,0x14
c0027f14:	89 f0                	mov    eax,esi
c0027f16:	c1 e8 0b             	shr    eax,0xb
c0027f19:	09 c3                	or     ebx,eax
c0027f1b:	89 f8                	mov    eax,edi
c0027f1d:	c1 e8 0b             	shr    eax,0xb
c0027f20:	c1 e6 15             	shl    esi,0x15
c0027f23:	09 c6                	or     esi,eax
c0027f25:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027f2b:	0f 95 c1             	setne  cl
c0027f2e:	09 c8                	or     eax,ecx
c0027f30:	83 e0 01             	and    eax,0x1
c0027f33:	c1 ef 0a             	shr    edi,0xa
c0027f36:	21 c7                	and    edi,eax
c0027f38:	01 f7                	add    edi,esi
c0027f3a:	83 d3 00             	adc    ebx,0x0
c0027f3d:	89 da                	mov    edx,ebx
c0027f3f:	eb 03                	jmp    c0027f44 <__muldf3+0x2d4>
c0027f41:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027f44:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027f47:	89 f8                	mov    eax,edi
c0027f49:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027f4c:	83 c4 24             	add    esp,0x24
c0027f4f:	5b                   	pop    ebx
c0027f50:	5e                   	pop    esi
c0027f51:	5f                   	pop    edi
c0027f52:	5d                   	pop    ebp
c0027f53:	c3                   	ret    

c0027f54 <__divdf3>:
c0027f54:	55                   	push   ebp
c0027f55:	89 e5                	mov    ebp,esp
c0027f57:	57                   	push   edi
c0027f58:	56                   	push   esi
c0027f59:	53                   	push   ebx
c0027f5a:	83 ec 2c             	sub    esp,0x2c
c0027f5d:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027f60:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027f63:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027f66:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027f69:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027f6c:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027f6f:	89 ce                	mov    esi,ecx
c0027f71:	89 c8                	mov    eax,ecx
c0027f73:	c1 f8 14             	sar    eax,0x14
c0027f76:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027f79:	89 f8                	mov    eax,edi
c0027f7b:	89 fb                	mov    ebx,edi
c0027f7d:	c1 e3 0b             	shl    ebx,0xb
c0027f80:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027f83:	c1 e6 0b             	shl    esi,0xb
c0027f86:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027f8c:	c1 e8 15             	shr    eax,0x15
c0027f8f:	09 c6                	or     esi,eax
c0027f91:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027f94:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027f97:	89 c2                	mov    edx,eax
c0027f99:	c1 fa 14             	sar    edx,0x14
c0027f9c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027f9f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027fa2:	89 de                	mov    esi,ebx
c0027fa4:	c1 e6 0b             	shl    esi,0xb
c0027fa7:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027faa:	c1 e0 0b             	shl    eax,0xb
c0027fad:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027fb2:	c1 eb 15             	shr    ebx,0x15
c0027fb5:	09 d8                	or     eax,ebx
c0027fb7:	89 c2                	mov    edx,eax
c0027fb9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027fbc:	25 ff 07 00 00       	and    eax,0x7ff
c0027fc1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027fc4:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027fc7:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027fcd:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027fd0:	29 d8                	sub    eax,ebx
c0027fd2:	05 ff 03 00 00       	add    eax,0x3ff
c0027fd7:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027fda:	46                   	inc    esi
c0027fdb:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027fe1:	0f 85 a5 00 00 00    	jne    c002808c <__divdf3+0x138>
c0027fe7:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027fea:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027fed:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027ff1:	74 2a                	je     c002801d <__divdf3+0xc9>
c0027ff3:	85 f6                	test   esi,esi
c0027ff5:	0f 85 cc 02 00 00    	jne    c00282c7 <__divdf3+0x373>
c0027ffb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ffe:	40                   	inc    eax
c0027fff:	a9 fe 07 00 00       	test   eax,0x7fe
c0028004:	75 26                	jne    c002802c <__divdf3+0xd8>
c0028006:	85 db                	test   ebx,ebx
c0028008:	74 22                	je     c002802c <__divdf3+0xd8>
c002800a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c002800d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028010:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028013:	09 d0                	or     eax,edx
c0028015:	0f 85 ac 02 00 00    	jne    c00282c7 <__divdf3+0x373>
c002801b:	eb 63                	jmp    c0028080 <__divdf3+0x12c>
c002801d:	85 f6                	test   esi,esi
c002801f:	75 22                	jne    c0028043 <__divdf3+0xef>
c0028021:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028024:	40                   	inc    eax
c0028025:	a9 fe 07 00 00       	test   eax,0x7fe
c002802a:	74 36                	je     c0028062 <__divdf3+0x10e>
c002802c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028030:	0f 89 91 02 00 00    	jns    c00282c7 <__divdf3+0x373>
c0028036:	89 f8                	mov    eax,edi
c0028038:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c002803e:	e9 80 02 00 00       	jmp    c00282c3 <__divdf3+0x36f>
c0028043:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028046:	01 f6                	add    esi,esi
c0028048:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002804b:	c1 ef 1f             	shr    edi,0x1f
c002804e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028051:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0028054:	8d 48 ff             	lea    ecx,[eax-0x1]
c0028057:	09 f7                	or     edi,esi
c0028059:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c002805c:	78 2e                	js     c002808c <__divdf3+0x138>
c002805e:	89 c8                	mov    eax,ecx
c0028060:	eb e1                	jmp    c0028043 <__divdf3+0xef>
c0028062:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028065:	09 d0                	or     eax,edx
c0028067:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c002806b:	74 0f                	je     c002807c <__divdf3+0x128>
c002806d:	85 c0                	test   eax,eax
c002806f:	74 bb                	je     c002802c <__divdf3+0xd8>
c0028071:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028074:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028077:	e9 4b 02 00 00       	jmp    c00282c7 <__divdf3+0x373>
c002807c:	85 c0                	test   eax,eax
c002807e:	75 ac                	jne    c002802c <__divdf3+0xd8>
c0028080:	31 ff                	xor    edi,edi
c0028082:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0028087:	e9 3b 02 00 00       	jmp    c00282c7 <__divdf3+0x373>
c002808c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002808f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0028092:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0028098:	75 6b                	jne    c0028105 <__divdf3+0x1b1>
c002809a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002809d:	09 d6                	or     esi,edx
c002809f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00280a3:	74 28                	je     c00280cd <__divdf3+0x179>
c00280a5:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00280a8:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00280ab:	85 f6                	test   esi,esi
c00280ad:	0f 85 14 02 00 00    	jne    c00282c7 <__divdf3+0x373>
c00280b3:	31 ff                	xor    edi,edi
c00280b5:	31 c9                	xor    ecx,ecx
c00280b7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280ba:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280bd:	0f 89 04 02 00 00    	jns    c00282c7 <__divdf3+0x373>
c00280c3:	b9 00 00 00 80       	mov    ecx,0x80000000
c00280c8:	e9 fa 01 00 00       	jmp    c00282c7 <__divdf3+0x373>
c00280cd:	85 f6                	test   esi,esi
c00280cf:	75 1b                	jne    c00280ec <__divdf3+0x198>
c00280d1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c00280d4:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c00280d7:	25 00 00 00 80       	and    eax,0x80000000
c00280dc:	31 c9                	xor    ecx,ecx
c00280de:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c00280e3:	89 cf                	mov    edi,ecx
c00280e5:	89 c1                	mov    ecx,eax
c00280e7:	e9 db 01 00 00       	jmp    c00282c7 <__divdf3+0x373>
c00280ec:	01 d2                	add    edx,edx
c00280ee:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280f1:	c1 eb 1f             	shr    ebx,0x1f
c00280f4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00280f7:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c00280fa:	8d 48 01             	lea    ecx,[eax+0x1]
c00280fd:	09 da                	or     edx,ebx
c00280ff:	78 04                	js     c0028105 <__divdf3+0x1b1>
c0028101:	89 c8                	mov    eax,ecx
c0028103:	eb e7                	jmp    c00280ec <__divdf3+0x198>
c0028105:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028108:	81 ce 00 00 00 80    	or     esi,0x80000000
c002810e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028114:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0028117:	39 d6                	cmp    esi,edx
c0028119:	77 0d                	ja     c0028128 <__divdf3+0x1d4>
c002811b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c002811e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028121:	72 1b                	jb     c002813e <__divdf3+0x1ea>
c0028123:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0028126:	75 16                	jne    c002813e <__divdf3+0x1ea>
c0028128:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c002812b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c002812e:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028131:	83 de 00             	sbb    esi,0x0
c0028134:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0028137:	ba 01 00 00 00       	mov    edx,0x1
c002813c:	eb 02                	jmp    c0028140 <__divdf3+0x1ec>
c002813e:	31 d2                	xor    edx,edx
c0028140:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0028147:	31 ff                	xor    edi,edi
c0028149:	01 ff                	add    edi,edi
c002814b:	89 d1                	mov    ecx,edx
c002814d:	c1 e9 1f             	shr    ecx,0x1f
c0028150:	09 cf                	or     edi,ecx
c0028152:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0028155:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0028158:	89 da                	mov    edx,ebx
c002815a:	89 f3                	mov    ebx,esi
c002815c:	8d 34 36             	lea    esi,[esi+esi*1]
c002815f:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028162:	c1 e9 1f             	shr    ecx,0x1f
c0028165:	09 ce                	or     esi,ecx
c0028167:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002816a:	01 c9                	add    ecx,ecx
c002816c:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c002816f:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0028172:	85 db                	test   ebx,ebx
c0028174:	78 29                	js     c002819f <__divdf3+0x24b>
c0028176:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0028179:	72 07                	jb     c0028182 <__divdf3+0x22e>
c002817b:	75 3c                	jne    c00281b9 <__divdf3+0x265>
c002817d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028180:	77 37                	ja     c00281b9 <__divdf3+0x265>
c0028182:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028185:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0028188:	31 d2                	xor    edx,edx
c002818a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c002818d:	0f 97 c2             	seta   dl
c0028190:	29 d6                	sub    esi,edx
c0028192:	89 d9                	mov    ecx,ebx
c0028194:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0028197:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c002819a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002819d:	eb 17                	jmp    c00281b6 <__divdf3+0x262>
c002819f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00281a2:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00281a5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00281a8:	0f 97 c1             	seta   cl
c00281ab:	0f b6 c9             	movzx  ecx,cl
c00281ae:	29 ce                	sub    esi,ecx
c00281b0:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c00281b3:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c00281b6:	83 ca 01             	or     edx,0x1
c00281b9:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c00281bc:	75 8b                	jne    c0028149 <__divdf3+0x1f5>
c00281be:	c1 e7 09             	shl    edi,0x9
c00281c1:	89 d1                	mov    ecx,edx
c00281c3:	c1 e9 17             	shr    ecx,0x17
c00281c6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00281c9:	09 f3                	or     ebx,esi
c00281cb:	0f 95 c3             	setne  bl
c00281ce:	0f b6 db             	movzx  ebx,bl
c00281d1:	c1 e2 09             	shl    edx,0x9
c00281d4:	09 d3                	or     ebx,edx
c00281d6:	89 ca                	mov    edx,ecx
c00281d8:	09 fa                	or     edx,edi
c00281da:	78 0c                	js     c00281e8 <__divdf3+0x294>
c00281dc:	01 d2                	add    edx,edx
c00281de:	89 d9                	mov    ecx,ebx
c00281e0:	c1 e9 1f             	shr    ecx,0x1f
c00281e3:	09 ca                	or     edx,ecx
c00281e5:	01 db                	add    ebx,ebx
c00281e7:	48                   	dec    eax
c00281e8:	3d fe 07 00 00       	cmp    eax,0x7fe
c00281ed:	0f 8f 83 00 00 00    	jg     c0028276 <__divdf3+0x322>
c00281f3:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00281f9:	85 c0                	test   eax,eax
c00281fb:	0f 8f 82 00 00 00    	jg     c0028283 <__divdf3+0x32f>
c0028201:	83 f8 cc             	cmp    eax,0xffffffcc
c0028204:	7c 77                	jl     c002827d <__divdf3+0x329>
c0028206:	be 01 00 00 00       	mov    esi,0x1
c002820b:	29 c6                	sub    esi,eax
c002820d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0028213:	83 fe 1f             	cmp    esi,0x1f
c0028216:	7e 2f                	jle    c0028247 <__divdf3+0x2f3>
c0028218:	83 fe 20             	cmp    esi,0x20
c002821b:	75 0a                	jne    c0028227 <__divdf3+0x2d3>
c002821d:	85 db                	test   ebx,ebx
c002821f:	0f 95 c3             	setne  bl
c0028222:	0f b6 db             	movzx  ebx,bl
c0028225:	eb 1a                	jmp    c0028241 <__divdf3+0x2ed>
c0028227:	8d 48 3f             	lea    ecx,[eax+0x3f]
c002822a:	89 d7                	mov    edi,edx
c002822c:	d3 e7                	shl    edi,cl
c002822e:	89 f9                	mov    ecx,edi
c0028230:	09 d9                	or     ecx,ebx
c0028232:	0f 95 c3             	setne  bl
c0028235:	0f b6 db             	movzx  ebx,bl
c0028238:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c002823d:	29 c1                	sub    ecx,eax
c002823f:	d3 ea                	shr    edx,cl
c0028241:	09 d3                	or     ebx,edx
c0028243:	31 c0                	xor    eax,eax
c0028245:	eb 3a                	jmp    c0028281 <__divdf3+0x32d>
c0028247:	83 c0 1f             	add    eax,0x1f
c002824a:	89 d7                	mov    edi,edx
c002824c:	88 c1                	mov    cl,al
c002824e:	d3 e7                	shl    edi,cl
c0028250:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028253:	89 df                	mov    edi,ebx
c0028255:	89 f1                	mov    ecx,esi
c0028257:	d3 ef                	shr    edi,cl
c0028259:	89 f9                	mov    ecx,edi
c002825b:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002825e:	09 cf                	or     edi,ecx
c0028260:	88 c1                	mov    cl,al
c0028262:	d3 e3                	shl    ebx,cl
c0028264:	85 db                	test   ebx,ebx
c0028266:	0f 95 c3             	setne  bl
c0028269:	0f b6 db             	movzx  ebx,bl
c002826c:	09 fb                	or     ebx,edi
c002826e:	89 f1                	mov    ecx,esi
c0028270:	d3 ea                	shr    edx,cl
c0028272:	31 c0                	xor    eax,eax
c0028274:	eb 0d                	jmp    c0028283 <__divdf3+0x32f>
c0028276:	b8 ff 07 00 00       	mov    eax,0x7ff
c002827b:	eb 02                	jmp    c002827f <__divdf3+0x32b>
c002827d:	31 c0                	xor    eax,eax
c002827f:	31 db                	xor    ebx,ebx
c0028281:	31 d2                	xor    edx,edx
c0028283:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0028286:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0028289:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c002828f:	09 c8                	or     eax,ecx
c0028291:	c1 e0 14             	shl    eax,0x14
c0028294:	89 d1                	mov    ecx,edx
c0028296:	c1 e9 0b             	shr    ecx,0xb
c0028299:	09 c8                	or     eax,ecx
c002829b:	89 c6                	mov    esi,eax
c002829d:	89 d9                	mov    ecx,ebx
c002829f:	c1 e9 0b             	shr    ecx,0xb
c00282a2:	c1 e2 15             	shl    edx,0x15
c00282a5:	09 ca                	or     edx,ecx
c00282a7:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c00282ad:	0f 95 c0             	setne  al
c00282b0:	09 c1                	or     ecx,eax
c00282b2:	83 e1 01             	and    ecx,0x1
c00282b5:	c1 eb 0a             	shr    ebx,0xa
c00282b8:	21 cb                	and    ebx,ecx
c00282ba:	01 d3                	add    ebx,edx
c00282bc:	89 d8                	mov    eax,ebx
c00282be:	83 d6 00             	adc    esi,0x0
c00282c1:	89 f2                	mov    edx,esi
c00282c3:	89 c7                	mov    edi,eax
c00282c5:	89 d1                	mov    ecx,edx
c00282c7:	89 f8                	mov    eax,edi
c00282c9:	89 ca                	mov    edx,ecx
c00282cb:	83 c4 2c             	add    esp,0x2c
c00282ce:	5b                   	pop    ebx
c00282cf:	5e                   	pop    esi
c00282d0:	5f                   	pop    edi
c00282d1:	5d                   	pop    ebp
c00282d2:	c3                   	ret    

c00282d3 <__floatsidf>:
c00282d3:	55                   	push   ebp
c00282d4:	89 e5                	mov    ebp,esp
c00282d6:	56                   	push   esi
c00282d7:	53                   	push   ebx
c00282d8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00282db:	85 db                	test   ebx,ebx
c00282dd:	7e 15                	jle    c00282f4 <__floatsidf+0x21>
c00282df:	0f bd cb             	bsr    ecx,ebx
c00282e2:	83 f1 1f             	xor    ecx,0x1f
c00282e5:	d3 e3                	shl    ebx,cl
c00282e7:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c00282ed:	b8 1e 04 00 00       	mov    eax,0x41e
c00282f2:	eb 21                	jmp    c0028315 <__floatsidf+0x42>
c00282f4:	b8 00 00 00 00       	mov    eax,0x0
c00282f9:	ba 00 00 00 00       	mov    edx,0x0
c00282fe:	74 2a                	je     c002832a <__floatsidf+0x57>
c0028300:	f7 db                	neg    ebx
c0028302:	0f bd cb             	bsr    ecx,ebx
c0028305:	83 f1 1f             	xor    ecx,0x1f
c0028308:	d3 e3                	shl    ebx,cl
c002830a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028310:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028315:	29 c8                	sub    eax,ecx
c0028317:	c1 e0 14             	shl    eax,0x14
c002831a:	89 c1                	mov    ecx,eax
c002831c:	89 de                	mov    esi,ebx
c002831e:	c1 ee 0b             	shr    esi,0xb
c0028321:	09 f1                	or     ecx,esi
c0028323:	89 ca                	mov    edx,ecx
c0028325:	c1 e3 15             	shl    ebx,0x15
c0028328:	89 d8                	mov    eax,ebx
c002832a:	5b                   	pop    ebx
c002832b:	5e                   	pop    esi
c002832c:	5d                   	pop    ebp
c002832d:	c3                   	ret    

c002832e <__floatunsidf>:
c002832e:	55                   	push   ebp
c002832f:	89 e5                	mov    ebp,esp
c0028331:	56                   	push   esi
c0028332:	53                   	push   ebx
c0028333:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028336:	85 db                	test   ebx,ebx
c0028338:	74 2a                	je     c0028364 <__floatunsidf+0x36>
c002833a:	0f bd cb             	bsr    ecx,ebx
c002833d:	83 f1 1f             	xor    ecx,0x1f
c0028340:	d3 e3                	shl    ebx,cl
c0028342:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028348:	b8 1e 04 00 00       	mov    eax,0x41e
c002834d:	29 c8                	sub    eax,ecx
c002834f:	c1 e0 14             	shl    eax,0x14
c0028352:	89 c1                	mov    ecx,eax
c0028354:	89 de                	mov    esi,ebx
c0028356:	c1 ee 0b             	shr    esi,0xb
c0028359:	09 f1                	or     ecx,esi
c002835b:	89 ca                	mov    edx,ecx
c002835d:	c1 e3 15             	shl    ebx,0x15
c0028360:	89 d8                	mov    eax,ebx
c0028362:	eb 04                	jmp    c0028368 <__floatunsidf+0x3a>
c0028364:	31 c0                	xor    eax,eax
c0028366:	31 d2                	xor    edx,edx
c0028368:	5b                   	pop    ebx
c0028369:	5e                   	pop    esi
c002836a:	5d                   	pop    ebp
c002836b:	c3                   	ret    

c002836c <__fixdfsi>:
c002836c:	55                   	push   ebp
c002836d:	89 e5                	mov    ebp,esp
c002836f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028372:	89 d1                	mov    ecx,edx
c0028374:	c1 e1 0b             	shl    ecx,0xb
c0028377:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002837d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028380:	c1 e8 15             	shr    eax,0x15
c0028383:	09 c1                	or     ecx,eax
c0028385:	c1 fa 14             	sar    edx,0x14
c0028388:	78 1f                	js     c00283a9 <__fixdfsi+0x3d>
c002838a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028390:	31 c0                	xor    eax,eax
c0028392:	83 fa 1e             	cmp    edx,0x1e
c0028395:	77 40                	ja     c00283d7 <__fixdfsi+0x6b>
c0028397:	89 c8                	mov    eax,ecx
c0028399:	0d 00 00 00 80       	or     eax,0x80000000
c002839e:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283a3:	29 d1                	sub    ecx,edx
c00283a5:	d3 e8                	shr    eax,cl
c00283a7:	eb 2e                	jmp    c00283d7 <__fixdfsi+0x6b>
c00283a9:	31 c0                	xor    eax,eax
c00283ab:	81 c2 01 04 00 00    	add    edx,0x401
c00283b1:	78 24                	js     c00283d7 <__fixdfsi+0x6b>
c00283b3:	83 fa 1e             	cmp    edx,0x1e
c00283b6:	7e 09                	jle    c00283c1 <__fixdfsi+0x55>
c00283b8:	83 fa 1f             	cmp    edx,0x1f
c00283bb:	75 18                	jne    c00283d5 <__fixdfsi+0x69>
c00283bd:	85 c9                	test   ecx,ecx
c00283bf:	75 14                	jne    c00283d5 <__fixdfsi+0x69>
c00283c1:	89 c8                	mov    eax,ecx
c00283c3:	0d 00 00 00 80       	or     eax,0x80000000
c00283c8:	b9 1f 00 00 00       	mov    ecx,0x1f
c00283cd:	29 d1                	sub    ecx,edx
c00283cf:	d3 e8                	shr    eax,cl
c00283d1:	f7 d8                	neg    eax
c00283d3:	eb 02                	jmp    c00283d7 <__fixdfsi+0x6b>
c00283d5:	31 c0                	xor    eax,eax
c00283d7:	5d                   	pop    ebp
c00283d8:	c3                   	ret    

c00283d9 <__fixunsdfsi>:
c00283d9:	55                   	push   ebp
c00283da:	89 e5                	mov    ebp,esp
c00283dc:	53                   	push   ebx
c00283dd:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00283e0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00283e3:	89 d3                	mov    ebx,edx
c00283e5:	c1 fb 14             	sar    ebx,0x14
c00283e8:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c00283ee:	31 c0                	xor    eax,eax
c00283f0:	83 fb 1f             	cmp    ebx,0x1f
c00283f3:	77 1d                	ja     c0028412 <__fixunsdfsi+0x39>
c00283f5:	89 d0                	mov    eax,edx
c00283f7:	c1 e0 0b             	shl    eax,0xb
c00283fa:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00283ff:	c1 e9 15             	shr    ecx,0x15
c0028402:	09 c8                	or     eax,ecx
c0028404:	0d 00 00 00 80       	or     eax,0x80000000
c0028409:	b9 1f 00 00 00       	mov    ecx,0x1f
c002840e:	29 d9                	sub    ecx,ebx
c0028410:	d3 e8                	shr    eax,cl
c0028412:	5b                   	pop    ebx
c0028413:	5d                   	pop    ebp
c0028414:	c3                   	ret    

c0028415 <__cmpdf2>:
c0028415:	55                   	push   ebp
c0028416:	89 e5                	mov    ebp,esp
c0028418:	57                   	push   edi
c0028419:	56                   	push   esi
c002841a:	53                   	push   ebx
c002841b:	83 ec 0c             	sub    esp,0xc
c002841e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028421:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028424:	89 ca                	mov    edx,ecx
c0028426:	c1 ea 14             	shr    edx,0x14
c0028429:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002842f:	89 cb                	mov    ebx,ecx
c0028431:	c1 fb 1f             	sar    ebx,0x1f
c0028434:	31 da                	xor    edx,ebx
c0028436:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028439:	89 df                	mov    edi,ebx
c002843b:	c1 e7 0b             	shl    edi,0xb
c002843e:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028441:	c1 e1 0b             	shl    ecx,0xb
c0028444:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c002844a:	c1 eb 15             	shr    ebx,0x15
c002844d:	09 d9                	or     ecx,ebx
c002844f:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028452:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028455:	89 ce                	mov    esi,ecx
c0028457:	c1 ee 14             	shr    esi,0x14
c002845a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028460:	89 cb                	mov    ebx,ecx
c0028462:	c1 fb 1f             	sar    ebx,0x1f
c0028465:	31 de                	xor    esi,ebx
c0028467:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c002846a:	89 df                	mov    edi,ebx
c002846c:	c1 e7 0b             	shl    edi,0xb
c002846f:	c1 e1 0b             	shl    ecx,0xb
c0028472:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028478:	c1 eb 15             	shr    ebx,0x15
c002847b:	09 d9                	or     ecx,ebx
c002847d:	89 d3                	mov    ebx,edx
c002847f:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028485:	43                   	inc    ebx
c0028486:	83 fb 01             	cmp    ebx,0x1
c0028489:	77 08                	ja     c0028493 <__cmpdf2+0x7e>
c002848b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002848e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028491:	75 68                	jne    c00284fb <__cmpdf2+0xe6>
c0028493:	89 f3                	mov    ebx,esi
c0028495:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002849b:	43                   	inc    ebx
c002849c:	83 fb 01             	cmp    ebx,0x1
c002849f:	77 06                	ja     c00284a7 <__cmpdf2+0x92>
c00284a1:	89 fb                	mov    ebx,edi
c00284a3:	09 cb                	or     ebx,ecx
c00284a5:	75 54                	jne    c00284fb <__cmpdf2+0xe6>
c00284a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00284aa:	09 f8                	or     eax,edi
c00284ac:	09 c8                	or     eax,ecx
c00284ae:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c00284b1:	75 12                	jne    c00284c5 <__cmpdf2+0xb0>
c00284b3:	8d 42 01             	lea    eax,[edx+0x1]
c00284b6:	83 f8 01             	cmp    eax,0x1
c00284b9:	77 0a                	ja     c00284c5 <__cmpdf2+0xb0>
c00284bb:	8d 5e 01             	lea    ebx,[esi+0x1]
c00284be:	31 c0                	xor    eax,eax
c00284c0:	83 fb 01             	cmp    ebx,0x1
c00284c3:	76 36                	jbe    c00284fb <__cmpdf2+0xe6>
c00284c5:	b8 01 00 00 00       	mov    eax,0x1
c00284ca:	39 f2                	cmp    edx,esi
c00284cc:	7f 2d                	jg     c00284fb <__cmpdf2+0xe6>
c00284ce:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00284d3:	7c 26                	jl     c00284fb <__cmpdf2+0xe6>
c00284d5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00284d8:	77 07                	ja     c00284e1 <__cmpdf2+0xcc>
c00284da:	72 16                	jb     c00284f2 <__cmpdf2+0xdd>
c00284dc:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c00284df:	76 0a                	jbe    c00284eb <__cmpdf2+0xd6>
c00284e1:	89 d0                	mov    eax,edx
c00284e3:	c1 f8 1f             	sar    eax,0x1f
c00284e6:	83 c8 01             	or     eax,0x1
c00284e9:	eb 10                	jmp    c00284fb <__cmpdf2+0xe6>
c00284eb:	b8 00 00 00 00       	mov    eax,0x0
c00284f0:	73 09                	jae    c00284fb <__cmpdf2+0xe6>
c00284f2:	89 d0                	mov    eax,edx
c00284f4:	c1 f8 1f             	sar    eax,0x1f
c00284f7:	83 e0 02             	and    eax,0x2
c00284fa:	48                   	dec    eax
c00284fb:	83 c4 0c             	add    esp,0xc
c00284fe:	5b                   	pop    ebx
c00284ff:	5e                   	pop    esi
c0028500:	5f                   	pop    edi
c0028501:	5d                   	pop    ebp
c0028502:	c3                   	ret    

c0028503 <__eqdf2>:
c0028503:	55                   	push   ebp
c0028504:	89 e5                	mov    ebp,esp
c0028506:	50                   	push   eax
c0028507:	6a 01                	push   0x1
c0028509:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002850c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002850f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028512:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028515:	e8 fb fe ff ff       	call   c0028415 <__cmpdf2>
c002851a:	83 c4 18             	add    esp,0x18
c002851d:	c9                   	leave  
c002851e:	c3                   	ret    

c002851f <__nedf2>:
c002851f:	eb e2                	jmp    c0028503 <__eqdf2>

c0028521 <__gtdf2>:
c0028521:	55                   	push   ebp
c0028522:	89 e5                	mov    ebp,esp
c0028524:	50                   	push   eax
c0028525:	6a ff                	push   0xffffffff
c0028527:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002852a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002852d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028530:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028533:	e8 dd fe ff ff       	call   c0028415 <__cmpdf2>
c0028538:	83 c4 18             	add    esp,0x18
c002853b:	c9                   	leave  
c002853c:	c3                   	ret    

c002853d <__gedf2>:
c002853d:	eb e2                	jmp    c0028521 <__gtdf2>

c002853f <__ltdf2>:
c002853f:	eb c2                	jmp    c0028503 <__eqdf2>

c0028541 <__ledf2>:
c0028541:	eb c0                	jmp    c0028503 <__eqdf2>

c0028543 <__truncdfsf2>:
c0028543:	55                   	push   ebp
c0028544:	89 e5                	mov    ebp,esp
c0028546:	57                   	push   edi
c0028547:	56                   	push   esi
c0028548:	53                   	push   ebx
c0028549:	83 ec 0c             	sub    esp,0xc
c002854c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002854f:	89 d1                	mov    ecx,edx
c0028551:	c1 f9 14             	sar    ecx,0x14
c0028554:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028557:	89 df                	mov    edi,ebx
c0028559:	c1 e7 0b             	shl    edi,0xb
c002855c:	89 d0                	mov    eax,edx
c002855e:	c1 e0 0b             	shl    eax,0xb
c0028561:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028566:	c1 eb 15             	shr    ebx,0x15
c0028569:	09 d8                	or     eax,ebx
c002856b:	89 cb                	mov    ebx,ecx
c002856d:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028573:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028579:	81 fe fd 00 00 00    	cmp    esi,0xfd
c002857f:	0f 86 9e 00 00 00    	jbe    c0028623 <__truncdfsf2+0xe0>
c0028585:	85 db                	test   ebx,ebx
c0028587:	75 0a                	jne    c0028593 <__truncdfsf2+0x50>
c0028589:	c1 fa 17             	sar    edx,0x17
c002858c:	30 d2                	xor    dl,dl
c002858e:	e9 84 00 00 00       	jmp    c0028617 <__truncdfsf2+0xd4>
c0028593:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028599:	83 fe 83             	cmp    esi,0xffffff83
c002859c:	7d 4b                	jge    c00285e9 <__truncdfsf2+0xa6>
c002859e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c00285a3:	29 f1                	sub    ecx,esi
c00285a5:	83 f9 1f             	cmp    ecx,0x1f
c00285a8:	7f 6b                	jg     c0028615 <__truncdfsf2+0xd2>
c00285aa:	0d 00 00 00 80       	or     eax,0x80000000
c00285af:	89 c3                	mov    ebx,eax
c00285b1:	d3 eb                	shr    ebx,cl
c00285b3:	be 01 00 00 00       	mov    esi,0x1
c00285b8:	d3 e6                	shl    esi,cl
c00285ba:	4e                   	dec    esi
c00285bb:	21 f0                	and    eax,esi
c00285bd:	09 f8                	or     eax,edi
c00285bf:	0f 95 c0             	setne  al
c00285c2:	0f b6 c0             	movzx  eax,al
c00285c5:	09 c3                	or     ebx,eax
c00285c7:	89 d9                	mov    ecx,ebx
c00285c9:	c1 e9 08             	shr    ecx,0x8
c00285cc:	f6 c3 7f             	test   bl,0x7f
c00285cf:	0f 95 c0             	setne  al
c00285d2:	09 c8                	or     eax,ecx
c00285d4:	83 e0 01             	and    eax,0x1
c00285d7:	c1 eb 07             	shr    ebx,0x7
c00285da:	21 c3                	and    ebx,eax
c00285dc:	81 e2 00 00 00 80    	and    edx,0x80000000
c00285e2:	09 d1                	or     ecx,edx
c00285e4:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c00285e7:	eb 76                	jmp    c002865f <__truncdfsf2+0x11c>
c00285e9:	83 c6 80             	add    esi,0xffffff80
c00285ec:	7e 1d                	jle    c002860b <__truncdfsf2+0xc8>
c00285ee:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c00285f4:	75 0b                	jne    c0028601 <__truncdfsf2+0xbe>
c00285f6:	09 f8                	or     eax,edi
c00285f8:	74 09                	je     c0028603 <__truncdfsf2+0xc0>
c00285fa:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c00285ff:	eb 02                	jmp    c0028603 <__truncdfsf2+0xc0>
c0028601:	31 c0                	xor    eax,eax
c0028603:	c1 fa 17             	sar    edx,0x17
c0028606:	80 ca ff             	or     dl,0xff
c0028609:	eb 0e                	jmp    c0028619 <__truncdfsf2+0xd6>
c002860b:	c1 fa 1f             	sar    edx,0x1f
c002860e:	c1 e2 08             	shl    edx,0x8
c0028611:	09 ca                	or     edx,ecx
c0028613:	eb 04                	jmp    c0028619 <__truncdfsf2+0xd6>
c0028615:	31 d2                	xor    edx,edx
c0028617:	31 c0                	xor    eax,eax
c0028619:	c1 e2 17             	shl    edx,0x17
c002861c:	c1 e8 08             	shr    eax,0x8
c002861f:	09 d0                	or     eax,edx
c0028621:	eb 3c                	jmp    c002865f <__truncdfsf2+0x11c>
c0028623:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028629:	89 ca                	mov    edx,ecx
c002862b:	c1 fa 0b             	sar    edx,0xb
c002862e:	c1 e2 08             	shl    edx,0x8
c0028631:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028634:	31 db                	xor    ebx,ebx
c0028636:	85 ff                	test   edi,edi
c0028638:	0f 95 c3             	setne  bl
c002863b:	09 d8                	or     eax,ebx
c002863d:	89 c3                	mov    ebx,eax
c002863f:	c1 eb 08             	shr    ebx,0x8
c0028642:	a8 7f                	test   al,0x7f
c0028644:	0f 95 c2             	setne  dl
c0028647:	89 d6                	mov    esi,edx
c0028649:	09 de                	or     esi,ebx
c002864b:	83 e6 01             	and    esi,0x1
c002864e:	c1 e8 07             	shr    eax,0x7
c0028651:	21 f0                	and    eax,esi
c0028653:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028656:	09 ca                	or     edx,ecx
c0028658:	c1 e2 17             	shl    edx,0x17
c002865b:	09 da                	or     edx,ebx
c002865d:	01 d0                	add    eax,edx
c002865f:	83 c4 0c             	add    esp,0xc
c0028662:	5b                   	pop    ebx
c0028663:	5e                   	pop    esi
c0028664:	5f                   	pop    edi
c0028665:	5d                   	pop    ebp
c0028666:	c3                   	ret    

c0028667 <__extendsfdf2>:
c0028667:	55                   	push   ebp
c0028668:	89 e5                	mov    ebp,esp
c002866a:	57                   	push   edi
c002866b:	56                   	push   esi
c002866c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c002866f:	89 d1                	mov    ecx,edx
c0028671:	c1 f9 17             	sar    ecx,0x17
c0028674:	c1 e2 08             	shl    edx,0x8
c0028677:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c002867d:	89 c8                	mov    eax,ecx
c002867f:	80 e4 f8             	and    ah,0xf8
c0028682:	8d 71 01             	lea    esi,[ecx+0x1]
c0028685:	81 e6 fe 00 00 00    	and    esi,0xfe
c002868b:	75 27                	jne    c00286b4 <__extendsfdf2+0x4d>
c002868d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028693:	75 18                	jne    c00286ad <__extendsfdf2+0x46>
c0028695:	85 d2                	test   edx,edx
c0028697:	74 20                	je     c00286b9 <__extendsfdf2+0x52>
c0028699:	41                   	inc    ecx
c002869a:	01 d2                	add    edx,edx
c002869c:	79 fb                	jns    c0028699 <__extendsfdf2+0x32>
c002869e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c00286a4:	29 c8                	sub    eax,ecx
c00286a6:	05 81 03 00 00       	add    eax,0x381
c00286ab:	eb 0c                	jmp    c00286b9 <__extendsfdf2+0x52>
c00286ad:	05 00 07 00 00       	add    eax,0x700
c00286b2:	eb 05                	jmp    c00286b9 <__extendsfdf2+0x52>
c00286b4:	05 80 03 00 00       	add    eax,0x380
c00286b9:	c1 e0 14             	shl    eax,0x14
c00286bc:	89 c1                	mov    ecx,eax
c00286be:	89 d0                	mov    eax,edx
c00286c0:	c1 e8 0b             	shr    eax,0xb
c00286c3:	09 c1                	or     ecx,eax
c00286c5:	c1 e2 15             	shl    edx,0x15
c00286c8:	89 d0                	mov    eax,edx
c00286ca:	89 ca                	mov    edx,ecx
c00286cc:	5e                   	pop    esi
c00286cd:	5f                   	pop    edi
c00286ce:	5d                   	pop    ebp
c00286cf:	c3                   	ret    

c00286d0 <fabs>:
c00286d0:	83 ec 0c             	sub    esp,0xc
c00286d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286d7:	89 04 24             	mov    DWORD PTR [esp],eax
c00286da:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00286de:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00286e3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00286e7:	dd 04 24             	fld    QWORD PTR [esp]
c00286ea:	83 c4 0c             	add    esp,0xc
c00286ed:	c3                   	ret    
c00286ee:	66 90                	xchg   ax,ax

c00286f0 <lrint>:
c00286f0:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c00286f4:	83 ec 04             	sub    esp,0x4
c00286f7:	db 1c 24             	fistp  DWORD PTR [esp]
c00286fa:	58                   	pop    eax
c00286fb:	c3                   	ret    

c00286fc <lrintf>:
c00286fc:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028700:	83 ec 04             	sub    esp,0x4
c0028703:	db 1c 24             	fistp  DWORD PTR [esp]
c0028706:	58                   	pop    eax
c0028707:	c3                   	ret    

Disassembly of section .init:

c0028708 <_init>:
c0028708:	55                   	push   ebp
c0028709:	89 e5                	mov    ebp,esp
c002870b:	e8 08 7a fd ff       	call   c0000118 <frame_dummy>
c0028710:	e8 63 e0 ff ff       	call   c0026778 <__do_global_ctors_aux>
c0028715:	5d                   	pop    ebp
c0028716:	c3                   	ret    

Disassembly of section .fini:

c0028717 <_fini>:
c0028717:	55                   	push   ebp
c0028718:	89 e5                	mov    ebp,esp
c002871a:	e8 89 79 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002871f:	5d                   	pop    ebp
c0028720:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028722 <Computer::~Computer()>:
c0028722:	83 ec 0c             	sub    esp,0xc
c0028725:	ba 68 a2 02 c0       	mov    edx,0xc002a268
c002872a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002872e:	89 10                	mov    DWORD PTR [eax],edx
c0028730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028734:	83 ec 0c             	sub    esp,0xc
c0028737:	50                   	push   eax
c0028738:	e8 ab bb fe ff       	call   c00142e8 <Device::~Device()>
c002873d:	83 c4 10             	add    esp,0x10
c0028740:	90                   	nop
c0028741:	83 c4 0c             	add    esp,0xc
c0028744:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028746 <Computer::~Computer()>:
c0028746:	83 ec 0c             	sub    esp,0xc
c0028749:	83 ec 0c             	sub    esp,0xc
c002874c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028750:	e8 cd ff ff ff       	call   c0028722 <Computer::~Computer()>
c0028755:	83 c4 10             	add    esp,0x10
c0028758:	83 ec 08             	sub    esp,0x8
c002875b:	68 ec 01 00 00       	push   0x1ec
c0028760:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028764:	e8 a6 a7 fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0028769:	83 c4 10             	add    esp,0x10
c002876c:	83 c4 0c             	add    esp,0xc
c002876f:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028770 <idleCommon()>:
c0028770:	83 ec 0c             	sub    esp,0xc
c0028773:	e8 1a 57 ff ff       	call   c001de92 <lockScheduler()>
c0028778:	e8 51 5a ff ff       	call   c001e1ce <schedule()>
c002877d:	83 c4 0c             	add    esp,0xc
c0028780:	e9 0f 57 ff ff       	jmp    c001de94 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028786 <LinkedList<UnixFile>::~LinkedList()>:
c0028786:	90                   	nop
c0028787:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028788 <LinkedList<UnixFile>::LinkedList()>:
c0028788:	83 ec 0c             	sub    esp,0xc
c002878b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028795:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028799:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287af:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00287b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00287c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00287cb:	83 ec 0c             	sub    esp,0xc
c00287ce:	68 32 a5 02 c0       	push   0xc002a532
c00287d3:	e8 17 a8 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c00287d8:	83 c4 10             	add    esp,0x10
c00287db:	90                   	nop
c00287dc:	83 c4 0c             	add    esp,0xc
c00287df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c00287e0 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c00287e0:	83 ec 0c             	sub    esp,0xc
c00287e3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00287e8:	75 10                	jne    c00287fa <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c00287ea:	83 ec 0c             	sub    esp,0xc
c00287ed:	68 4c a5 02 c0       	push   0xc002a54c
c00287f2:	e8 a6 1e ff ff       	call   c001a69d <Krnl::panic(char const*)>
c00287f7:	83 c4 10             	add    esp,0x10
c00287fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fe:	8b 00                	mov    eax,DWORD PTR [eax]
c0028800:	85 c0                	test   eax,eax
c0028802:	74 34                	je     c0028838 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028808:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002880b:	85 c0                	test   eax,eax
c002880d:	74 29                	je     c0028838 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002880f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028813:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028816:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002881a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002881d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028821:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028825:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002882c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002882f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028836:	eb 65                	jmp    c002889d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002883c:	8b 00                	mov    eax,DWORD PTR [eax]
c002883e:	85 c0                	test   eax,eax
c0028840:	75 4b                	jne    c002888d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028842:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028846:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028849:	85 c0                	test   eax,eax
c002884b:	75 40                	jne    c002888d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c002884d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028851:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028855:	89 10                	mov    DWORD PTR [eax],edx
c0028857:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002885f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028862:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028866:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028869:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028870:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028874:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028877:	85 c0                	test   eax,eax
c0028879:	74 22                	je     c002889d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002887b:	83 ec 0c             	sub    esp,0xc
c002887e:	68 6e a5 02 c0       	push   0xc002a56e
c0028883:	e8 15 1e ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0028888:	83 c4 10             	add    esp,0x10
c002888b:	eb 10                	jmp    c002889d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002888d:	83 ec 0c             	sub    esp,0xc
c0028890:	68 78 a5 02 c0       	push   0xc002a578
c0028895:	e8 03 1e ff ff       	call   c001a69d <Krnl::panic(char const*)>
c002889a:	83 c4 10             	add    esp,0x10
c002889d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288a1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288a4:	8d 50 01             	lea    edx,[eax+0x1]
c00288a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288ab:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00288ae:	90                   	nop
c00288af:	83 c4 0c             	add    esp,0xc
c00288b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c00288b4 <LinkedList<UnixFile>::getFirstElement()>:
c00288b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ba:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c00288bc <LinkedList<UnixFile>::removeFirst()>:
c00288bc:	83 ec 0c             	sub    esp,0xc
c00288bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288c3:	8b 00                	mov    eax,DWORD PTR [eax]
c00288c5:	85 c0                	test   eax,eax
c00288c7:	75 12                	jne    c00288db <LinkedList<UnixFile>::removeFirst()+0x1f>
c00288c9:	83 ec 0c             	sub    esp,0xc
c00288cc:	68 84 a5 02 c0       	push   0xc002a584
c00288d1:	e8 c7 1d ff ff       	call   c001a69d <Krnl::panic(char const*)>
c00288d6:	83 c4 10             	add    esp,0x10
c00288d9:	eb 7e                	jmp    c0028959 <LinkedList<UnixFile>::removeFirst()+0x9d>
c00288db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00288e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00288e5:	85 c0                	test   eax,eax
c00288e7:	74 10                	je     c00288f9 <LinkedList<UnixFile>::removeFirst()+0x3d>
c00288e9:	83 ec 0c             	sub    esp,0xc
c00288ec:	68 cf a5 02 c0       	push   0xc002a5cf
c00288f1:	e8 a7 1d ff ff       	call   c001a69d <Krnl::panic(char const*)>
c00288f6:	83 c4 10             	add    esp,0x10
c00288f9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fd:	8b 00                	mov    eax,DWORD PTR [eax]
c00288ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028902:	85 c0                	test   eax,eax
c0028904:	75 33                	jne    c0028939 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028906:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002890a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028914:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002891b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028922:	83 f8 01             	cmp    eax,0x1
c0028925:	74 21                	je     c0028948 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028927:	83 ec 0c             	sub    esp,0xc
c002892a:	68 a8 a5 02 c0       	push   0xc002a5a8
c002892f:	e8 69 1d ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0028934:	83 c4 10             	add    esp,0x10
c0028937:	eb 0f                	jmp    c0028948 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0028939:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002893d:	8b 00                	mov    eax,DWORD PTR [eax]
c002893f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0028942:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028946:	89 10                	mov    DWORD PTR [eax],edx
c0028948:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002894c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002894f:	8d 50 ff             	lea    edx,[eax-0x1]
c0028952:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028956:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028959:	83 c4 0c             	add    esp,0xc
c002895c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c002895e <LinkedList<UnixFile>::getNext(UnixFile*)>:
c002895e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028962:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028965:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c0028966 <DriverlessDevice::~DriverlessDevice()>:
c0028966:	ba a4 ad 02 c0       	mov    edx,0xc002ada4
c002896b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002896f:	89 10                	mov    DWORD PTR [eax],edx
c0028971:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028975:	50                   	push   eax
c0028976:	e8 6d b9 fe ff       	call   c00142e8 <Device::~Device()>
c002897b:	83 c4 04             	add    esp,0x4
c002897e:	90                   	nop
c002897f:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028980 <DriverlessDevice::~DriverlessDevice()>:
c0028980:	83 ec 0c             	sub    esp,0xc
c0028983:	83 ec 0c             	sub    esp,0xc
c0028986:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002898a:	e8 d7 ff ff ff       	call   c0028966 <DriverlessDevice::~DriverlessDevice()>
c002898f:	83 c4 10             	add    esp,0x10
c0028992:	83 ec 08             	sub    esp,0x8
c0028995:	68 58 01 00 00       	push   0x158
c002899a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002899e:	e8 6c a5 fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c00289a3:	83 c4 10             	add    esp,0x10
c00289a6:	83 c4 0c             	add    esp,0xc
c00289a9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c00289aa <LinkedList<Device>::addElement(Device*)>:
c00289aa:	83 ec 0c             	sub    esp,0xc
c00289ad:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00289b2:	75 10                	jne    c00289c4 <LinkedList<Device>::addElement(Device*)+0x1a>
c00289b4:	83 ec 0c             	sub    esp,0xc
c00289b7:	68 4c a5 02 c0       	push   0xc002a54c
c00289bc:	e8 dc 1c ff ff       	call   c001a69d <Krnl::panic(char const*)>
c00289c1:	83 c4 10             	add    esp,0x10
c00289c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00289ca:	85 c0                	test   eax,eax
c00289cc:	74 3a                	je     c0028a08 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289d2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289d5:	85 c0                	test   eax,eax
c00289d7:	74 2f                	je     c0028a08 <LinkedList<Device>::addElement(Device*)+0x5e>
c00289d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289dd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289e4:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c00289ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ee:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00289f2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00289f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00289fc:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a06:	eb 68                	jmp    c0028a70 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028a0e:	85 c0                	test   eax,eax
c0028a10:	75 4e                	jne    c0028a60 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a19:	85 c0                	test   eax,eax
c0028a1b:	75 43                	jne    c0028a60 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a25:	89 10                	mov    DWORD PTR [eax],edx
c0028a27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028a2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028a32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028a39:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028a43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a4a:	85 c0                	test   eax,eax
c0028a4c:	74 22                	je     c0028a70 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a4e:	83 ec 0c             	sub    esp,0xc
c0028a51:	68 6e a5 02 c0       	push   0xc002a56e
c0028a56:	e8 42 1c ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0028a5b:	83 c4 10             	add    esp,0x10
c0028a5e:	eb 10                	jmp    c0028a70 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028a60:	83 ec 0c             	sub    esp,0xc
c0028a63:	68 78 a5 02 c0       	push   0xc002a578
c0028a68:	e8 30 1c ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0028a6d:	83 c4 10             	add    esp,0x10
c0028a70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a74:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028a77:	8d 50 01             	lea    edx,[eax+0x1]
c0028a7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a7e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028a81:	90                   	nop
c0028a82:	83 c4 0c             	add    esp,0xc
c0028a85:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028a86 <LinkedList<Device>::LinkedList()>:
c0028a86:	83 ec 0c             	sub    esp,0xc
c0028a89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a8d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028a93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a97:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028a9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aa2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028aad:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028ab3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ab7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028abe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ac2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028ac9:	83 ec 0c             	sub    esp,0xc
c0028acc:	68 32 a5 02 c0       	push   0xc002a532
c0028ad1:	e8 19 a5 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0028ad6:	83 c4 10             	add    esp,0x10
c0028ad9:	90                   	nop
c0028ada:	83 c4 0c             	add    esp,0xc
c0028add:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0028ade <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0028ade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028ae2:	8b 00                	mov    eax,DWORD PTR [eax]
c0028ae4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028ae6 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028ae6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028aea:	8b 00                	mov    eax,DWORD PTR [eax]
c0028aec:	85 c0                	test   eax,eax
c0028aee:	75 0e                	jne    c0028afe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028af0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028af4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028af7:	85 c0                	test   eax,eax
c0028af9:	75 03                	jne    c0028afe <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028afb:	b0 01                	mov    al,0x1
c0028afd:	c3                   	ret    
c0028afe:	b0 00                	mov    al,0x0
c0028b00:	90                   	nop
c0028b01:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028b02 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028b02:	83 ec 0c             	sub    esp,0xc
c0028b05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b09:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b0b:	85 c0                	test   eax,eax
c0028b0d:	75 15                	jne    c0028b24 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c0028b0f:	83 ec 0c             	sub    esp,0xc
c0028b12:	68 84 a5 02 c0       	push   0xc002a584
c0028b17:	e8 81 1b ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0028b1c:	83 c4 10             	add    esp,0x10
c0028b1f:	e9 88 00 00 00       	jmp    c0028bac <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0028b24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b28:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028b2b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b2e:	85 c0                	test   eax,eax
c0028b30:	0f 95 c0             	setne  al
c0028b33:	84 c0                	test   al,al
c0028b35:	74 10                	je     c0028b47 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c0028b37:	83 ec 0c             	sub    esp,0xc
c0028b3a:	68 cf a5 02 c0       	push   0xc002a5cf
c0028b3f:	e8 59 1b ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0028b44:	83 c4 10             	add    esp,0x10
c0028b47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b4d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028b50:	85 c0                	test   eax,eax
c0028b52:	0f 94 c0             	sete   al
c0028b55:	84 c0                	test   al,al
c0028b57:	74 33                	je     c0028b8c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c0028b59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b5d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028b63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b67:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028b6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b72:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028b75:	83 f8 01             	cmp    eax,0x1
c0028b78:	74 21                	je     c0028b9b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b7a:	83 ec 0c             	sub    esp,0xc
c0028b7d:	68 a8 a5 02 c0       	push   0xc002a5a8
c0028b82:	e8 16 1b ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0028b87:	83 c4 10             	add    esp,0x10
c0028b8a:	eb 0f                	jmp    c0028b9b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c0028b8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b90:	8b 00                	mov    eax,DWORD PTR [eax]
c0028b92:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028b95:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b99:	89 10                	mov    DWORD PTR [eax],edx
c0028b9b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b9f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028ba2:	8d 50 ff             	lea    edx,[eax-0x1]
c0028ba5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ba9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028bac:	83 c4 0c             	add    esp,0xc
c0028baf:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028bb0 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028bb0:	83 ec 0c             	sub    esp,0xc
c0028bb3:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028bb8:	75 10                	jne    c0028bca <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0028bba:	83 ec 0c             	sub    esp,0xc
c0028bbd:	68 4c a5 02 c0       	push   0xc002a54c
c0028bc2:	e8 d6 1a ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0028bc7:	83 c4 10             	add    esp,0x10
c0028bca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bce:	8b 00                	mov    eax,DWORD PTR [eax]
c0028bd0:	85 c0                	test   eax,eax
c0028bd2:	74 34                	je     c0028c08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028bd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bdb:	85 c0                	test   eax,eax
c0028bdd:	74 29                	je     c0028c08 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028bdf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028be3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028be6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bea:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0028bed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bf1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028bf5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bfc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028bff:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c06:	eb 65                	jmp    c0028c6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0028c0e:	85 c0                	test   eax,eax
c0028c10:	75 4b                	jne    c0028c5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c12:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c16:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c19:	85 c0                	test   eax,eax
c0028c1b:	75 40                	jne    c0028c5d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028c1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c21:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c25:	89 10                	mov    DWORD PTR [eax],edx
c0028c27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c2b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028c2f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028c32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c36:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028c39:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c47:	85 c0                	test   eax,eax
c0028c49:	74 22                	je     c0028c6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c4b:	83 ec 0c             	sub    esp,0xc
c0028c4e:	68 6e a5 02 c0       	push   0xc002a56e
c0028c53:	e8 45 1a ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0028c58:	83 c4 10             	add    esp,0x10
c0028c5b:	eb 10                	jmp    c0028c6d <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028c5d:	83 ec 0c             	sub    esp,0xc
c0028c60:	68 78 a5 02 c0       	push   0xc002a578
c0028c65:	e8 33 1a ff ff       	call   c001a69d <Krnl::panic(char const*)>
c0028c6a:	83 c4 10             	add    esp,0x10
c0028c6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c71:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028c74:	8d 50 01             	lea    edx,[eax+0x1]
c0028c77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c7b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028c7e:	90                   	nop
c0028c7f:	83 c4 0c             	add    esp,0xc
c0028c82:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028c84 <ACPI::~ACPI()>:
c0028c84:	83 ec 0c             	sub    esp,0xc
c0028c87:	ba 08 b7 02 c0       	mov    edx,0xc002b708
c0028c8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c90:	89 10                	mov    DWORD PTR [eax],edx
c0028c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c96:	83 ec 0c             	sub    esp,0xc
c0028c99:	50                   	push   eax
c0028c9a:	e8 49 b6 fe ff       	call   c00142e8 <Device::~Device()>
c0028c9f:	83 c4 10             	add    esp,0x10
c0028ca2:	90                   	nop
c0028ca3:	83 c4 0c             	add    esp,0xc
c0028ca6:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028ca8 <ACPI::~ACPI()>:
c0028ca8:	83 ec 0c             	sub    esp,0xc
c0028cab:	83 ec 0c             	sub    esp,0xc
c0028cae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cb2:	e8 cd ff ff ff       	call   c0028c84 <ACPI::~ACPI()>
c0028cb7:	83 c4 10             	add    esp,0x10
c0028cba:	83 ec 08             	sub    esp,0x8
c0028cbd:	68 68 12 00 00       	push   0x1268
c0028cc2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cc6:	e8 44 a2 fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0028ccb:	83 c4 10             	add    esp,0x10
c0028cce:	83 c4 0c             	add    esp,0xc
c0028cd1:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028cd2 <CPU::~CPU()>:
c0028cd2:	83 ec 0c             	sub    esp,0xc
c0028cd5:	ba f8 ba 02 c0       	mov    edx,0xc002baf8
c0028cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cde:	89 10                	mov    DWORD PTR [eax],edx
c0028ce0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ce4:	83 ec 0c             	sub    esp,0xc
c0028ce7:	50                   	push   eax
c0028ce8:	e8 fb b5 fe ff       	call   c00142e8 <Device::~Device()>
c0028ced:	83 c4 10             	add    esp,0x10
c0028cf0:	90                   	nop
c0028cf1:	83 c4 0c             	add    esp,0xc
c0028cf4:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028cf6 <CPU::~CPU()>:
c0028cf6:	83 ec 0c             	sub    esp,0xc
c0028cf9:	83 ec 0c             	sub    esp,0xc
c0028cfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d00:	e8 cd ff ff ff       	call   c0028cd2 <CPU::~CPU()>
c0028d05:	83 c4 10             	add    esp,0x10
c0028d08:	83 ec 08             	sub    esp,0x8
c0028d0b:	68 98 11 00 00       	push   0x1198
c0028d10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d14:	e8 f6 a1 fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0028d19:	83 c4 10             	add    esp,0x10
c0028d1c:	83 c4 0c             	add    esp,0xc
c0028d1f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0028d20 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0028d20:	90                   	nop
c0028d21:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0028d22 <ThreadControlBlock::ThreadControlBlock()>:
c0028d22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d26:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028d2d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d31:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0028d38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d3c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0028d43:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d47:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c0028d4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d52:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c0028d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028d5a:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c0028d5e:	90                   	nop
c0028d5f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c0028d60 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c0028d60:	83 ec 0c             	sub    esp,0xc
c0028d63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d67:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d6d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d71:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d7c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d87:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028d8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d91:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028da3:	83 ec 0c             	sub    esp,0xc
c0028da6:	68 32 a5 02 c0       	push   0xc002a532
c0028dab:	e8 3f a2 fe ff       	call   c0012fef <Dbg::kprintf(char const*, ...)>
c0028db0:	83 c4 10             	add    esp,0x10
c0028db3:	90                   	nop
c0028db4:	83 c4 0c             	add    esp,0xc
c0028db7:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028db8 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028db8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0028dbc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0028dbf:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028dc0 <Vm::_FPUState::_FPUState()>:
c0028dc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028dc4:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0028dcb:	90                   	nop
c0028dcc:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c0028dce <PCI::~PCI()>:
c0028dce:	83 ec 0c             	sub    esp,0xc
c0028dd1:	ba 84 cb 02 c0       	mov    edx,0xc002cb84
c0028dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dda:	89 10                	mov    DWORD PTR [eax],edx
c0028ddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028de0:	83 ec 0c             	sub    esp,0xc
c0028de3:	50                   	push   eax
c0028de4:	e8 d7 ae fe ff       	call   c0013cc0 <Bus::~Bus()>
c0028de9:	83 c4 10             	add    esp,0x10
c0028dec:	90                   	nop
c0028ded:	83 c4 0c             	add    esp,0xc
c0028df0:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028df2 <PCI::~PCI()>:
c0028df2:	83 ec 0c             	sub    esp,0xc
c0028df5:	83 ec 0c             	sub    esp,0xc
c0028df8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dfc:	e8 cd ff ff ff       	call   c0028dce <PCI::~PCI()>
c0028e01:	83 c4 10             	add    esp,0x10
c0028e04:	83 ec 08             	sub    esp,0x8
c0028e07:	68 58 01 00 00       	push   0x158
c0028e0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e10:	e8 fa a0 fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0028e15:	83 c4 10             	add    esp,0x10
c0028e18:	83 c4 0c             	add    esp,0xc
c0028e1b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0028e1c <IDE::~IDE()>:
c0028e1c:	83 ec 0c             	sub    esp,0xc
c0028e1f:	ba e8 cd 02 c0       	mov    edx,0xc002cde8
c0028e24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e28:	89 10                	mov    DWORD PTR [eax],edx
c0028e2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e2e:	83 ec 0c             	sub    esp,0xc
c0028e31:	50                   	push   eax
c0028e32:	e8 a1 b9 fe ff       	call   c00147d8 <HardDiskController::~HardDiskController()>
c0028e37:	83 c4 10             	add    esp,0x10
c0028e3a:	90                   	nop
c0028e3b:	83 c4 0c             	add    esp,0xc
c0028e3e:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c0028e40 <IDE::~IDE()>:
c0028e40:	83 ec 0c             	sub    esp,0xc
c0028e43:	83 ec 0c             	sub    esp,0xc
c0028e46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e4a:	e8 cd ff ff ff       	call   c0028e1c <IDE::~IDE()>
c0028e4f:	83 c4 10             	add    esp,0x10
c0028e52:	83 ec 08             	sub    esp,0x8
c0028e55:	68 70 02 00 00       	push   0x270
c0028e5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e5e:	e8 ac a0 fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0028e63:	83 c4 10             	add    esp,0x10
c0028e66:	83 c4 0c             	add    esp,0xc
c0028e69:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c0028e6a <SATABus::~SATABus()>:
c0028e6a:	83 ec 0c             	sub    esp,0xc
c0028e6d:	ba c8 ce 02 c0       	mov    edx,0xc002cec8
c0028e72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e76:	89 10                	mov    DWORD PTR [eax],edx
c0028e78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e7c:	83 ec 0c             	sub    esp,0xc
c0028e7f:	50                   	push   eax
c0028e80:	e8 53 b9 fe ff       	call   c00147d8 <HardDiskController::~HardDiskController()>
c0028e85:	83 c4 10             	add    esp,0x10
c0028e88:	90                   	nop
c0028e89:	83 c4 0c             	add    esp,0xc
c0028e8c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028e8e <SATABus::~SATABus()>:
c0028e8e:	83 ec 0c             	sub    esp,0xc
c0028e91:	83 ec 0c             	sub    esp,0xc
c0028e94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e98:	e8 cd ff ff ff       	call   c0028e6a <SATABus::~SATABus()>
c0028e9d:	83 c4 10             	add    esp,0x10
c0028ea0:	83 ec 08             	sub    esp,0x8
c0028ea3:	68 64 01 00 00       	push   0x164
c0028ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eac:	e8 5e a0 fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0028eb1:	83 c4 10             	add    esp,0x10
c0028eb4:	83 c4 0c             	add    esp,0xc
c0028eb7:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028eb8 <ATA::~ATA()>:
c0028eb8:	83 ec 0c             	sub    esp,0xc
c0028ebb:	ba 14 cf 02 c0       	mov    edx,0xc002cf14
c0028ec0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ec4:	89 10                	mov    DWORD PTR [eax],edx
c0028ec6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028eca:	83 ec 0c             	sub    esp,0xc
c0028ecd:	50                   	push   eax
c0028ece:	e8 f7 b9 fe ff       	call   c00148ca <PhysicalDisk::~PhysicalDisk()>
c0028ed3:	83 c4 10             	add    esp,0x10
c0028ed6:	90                   	nop
c0028ed7:	83 c4 0c             	add    esp,0xc
c0028eda:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028edc <ATA::~ATA()>:
c0028edc:	83 ec 0c             	sub    esp,0xc
c0028edf:	83 ec 0c             	sub    esp,0xc
c0028ee2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ee6:	e8 cd ff ff ff       	call   c0028eb8 <ATA::~ATA()>
c0028eeb:	83 c4 10             	add    esp,0x10
c0028eee:	83 ec 08             	sub    esp,0x8
c0028ef1:	68 7c 01 00 00       	push   0x17c
c0028ef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028efa:	e8 10 a0 fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0028eff:	83 c4 10             	add    esp,0x10
c0028f02:	83 c4 0c             	add    esp,0xc
c0028f05:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028f06 <ATAPI::~ATAPI()>:
c0028f06:	83 ec 0c             	sub    esp,0xc
c0028f09:	ba 4c cf 02 c0       	mov    edx,0xc002cf4c
c0028f0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f12:	89 10                	mov    DWORD PTR [eax],edx
c0028f14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f18:	83 ec 0c             	sub    esp,0xc
c0028f1b:	50                   	push   eax
c0028f1c:	e8 a9 b9 fe ff       	call   c00148ca <PhysicalDisk::~PhysicalDisk()>
c0028f21:	83 c4 10             	add    esp,0x10
c0028f24:	90                   	nop
c0028f25:	83 c4 0c             	add    esp,0xc
c0028f28:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028f2a <ATAPI::~ATAPI()>:
c0028f2a:	83 ec 0c             	sub    esp,0xc
c0028f2d:	83 ec 0c             	sub    esp,0xc
c0028f30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f34:	e8 cd ff ff ff       	call   c0028f06 <ATAPI::~ATAPI()>
c0028f39:	83 c4 10             	add    esp,0x10
c0028f3c:	83 ec 08             	sub    esp,0x8
c0028f3f:	68 80 01 00 00       	push   0x180
c0028f44:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f48:	e8 c2 9f fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0028f4d:	83 c4 10             	add    esp,0x10
c0028f50:	83 c4 0c             	add    esp,0xc
c0028f53:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028f54 <SATA::~SATA()>:
c0028f54:	83 ec 0c             	sub    esp,0xc
c0028f57:	ba 00 d0 02 c0       	mov    edx,0xc002d000
c0028f5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f60:	89 10                	mov    DWORD PTR [eax],edx
c0028f62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f66:	83 ec 0c             	sub    esp,0xc
c0028f69:	50                   	push   eax
c0028f6a:	e8 5b b9 fe ff       	call   c00148ca <PhysicalDisk::~PhysicalDisk()>
c0028f6f:	83 c4 10             	add    esp,0x10
c0028f72:	90                   	nop
c0028f73:	83 c4 0c             	add    esp,0xc
c0028f76:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028f78 <SATA::~SATA()>:
c0028f78:	83 ec 0c             	sub    esp,0xc
c0028f7b:	83 ec 0c             	sub    esp,0xc
c0028f7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f82:	e8 cd ff ff ff       	call   c0028f54 <SATA::~SATA()>
c0028f87:	83 c4 10             	add    esp,0x10
c0028f8a:	83 ec 08             	sub    esp,0x8
c0028f8d:	68 7c 01 00 00       	push   0x17c
c0028f92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028f96:	e8 74 9f fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0028f9b:	83 c4 10             	add    esp,0x10
c0028f9e:	83 c4 0c             	add    esp,0xc
c0028fa1:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028fa2 <SATAPI::~SATAPI()>:
c0028fa2:	83 ec 0c             	sub    esp,0xc
c0028fa5:	ba dc d0 02 c0       	mov    edx,0xc002d0dc
c0028faa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fae:	89 10                	mov    DWORD PTR [eax],edx
c0028fb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb4:	83 ec 0c             	sub    esp,0xc
c0028fb7:	50                   	push   eax
c0028fb8:	e8 0d b9 fe ff       	call   c00148ca <PhysicalDisk::~PhysicalDisk()>
c0028fbd:	83 c4 10             	add    esp,0x10
c0028fc0:	90                   	nop
c0028fc1:	83 c4 0c             	add    esp,0xc
c0028fc4:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028fc6 <SATAPI::~SATAPI()>:
c0028fc6:	83 ec 0c             	sub    esp,0xc
c0028fc9:	83 ec 0c             	sub    esp,0xc
c0028fcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fd0:	e8 cd ff ff ff       	call   c0028fa2 <SATAPI::~SATAPI()>
c0028fd5:	83 c4 10             	add    esp,0x10
c0028fd8:	83 ec 08             	sub    esp,0x8
c0028fdb:	68 80 01 00 00       	push   0x180
c0028fe0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028fe4:	e8 26 9f fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0028fe9:	83 c4 10             	add    esp,0x10
c0028fec:	83 c4 0c             	add    esp,0xc
c0028fef:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028ff0 <AVX::~AVX()>:
c0028ff0:	83 ec 0c             	sub    esp,0xc
c0028ff3:	ba 1c d1 02 c0       	mov    edx,0xc002d11c
c0028ff8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ffc:	89 10                	mov    DWORD PTR [eax],edx
c0028ffe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029002:	83 ec 0c             	sub    esp,0xc
c0029005:	50                   	push   eax
c0029006:	e8 43 b9 fe ff       	call   c001494e <FPU::~FPU()>
c002900b:	83 c4 10             	add    esp,0x10
c002900e:	90                   	nop
c002900f:	83 c4 0c             	add    esp,0xc
c0029012:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029014 <AVX::~AVX()>:
c0029014:	83 ec 0c             	sub    esp,0xc
c0029017:	83 ec 0c             	sub    esp,0xc
c002901a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002901e:	e8 cd ff ff ff       	call   c0028ff0 <AVX::~AVX()>
c0029023:	83 c4 10             	add    esp,0x10
c0029026:	83 ec 08             	sub    esp,0x8
c0029029:	68 58 01 00 00       	push   0x158
c002902e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029032:	e8 d8 9e fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0029037:	83 c4 10             	add    esp,0x10
c002903a:	83 c4 0c             	add    esp,0xc
c002903d:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002903e <MMX::~MMX()>:
c002903e:	83 ec 0c             	sub    esp,0xc
c0029041:	ba 5c d1 02 c0       	mov    edx,0xc002d15c
c0029046:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904a:	89 10                	mov    DWORD PTR [eax],edx
c002904c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029050:	83 ec 0c             	sub    esp,0xc
c0029053:	50                   	push   eax
c0029054:	e8 f5 b8 fe ff       	call   c001494e <FPU::~FPU()>
c0029059:	83 c4 10             	add    esp,0x10
c002905c:	90                   	nop
c002905d:	83 c4 0c             	add    esp,0xc
c0029060:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0029062 <MMX::~MMX()>:
c0029062:	83 ec 0c             	sub    esp,0xc
c0029065:	83 ec 0c             	sub    esp,0xc
c0029068:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002906c:	e8 cd ff ff ff       	call   c002903e <MMX::~MMX()>
c0029071:	83 c4 10             	add    esp,0x10
c0029074:	83 ec 08             	sub    esp,0x8
c0029077:	68 58 01 00 00       	push   0x158
c002907c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029080:	e8 8a 9e fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0029085:	83 c4 10             	add    esp,0x10
c0029088:	83 c4 0c             	add    esp,0xc
c002908b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c002908c <SSE::~SSE()>:
c002908c:	83 ec 0c             	sub    esp,0xc
c002908f:	ba 9c d1 02 c0       	mov    edx,0xc002d19c
c0029094:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029098:	89 10                	mov    DWORD PTR [eax],edx
c002909a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002909e:	83 ec 0c             	sub    esp,0xc
c00290a1:	50                   	push   eax
c00290a2:	e8 a7 b8 fe ff       	call   c001494e <FPU::~FPU()>
c00290a7:	83 c4 10             	add    esp,0x10
c00290aa:	90                   	nop
c00290ab:	83 c4 0c             	add    esp,0xc
c00290ae:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00290b0 <SSE::~SSE()>:
c00290b0:	83 ec 0c             	sub    esp,0xc
c00290b3:	83 ec 0c             	sub    esp,0xc
c00290b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ba:	e8 cd ff ff ff       	call   c002908c <SSE::~SSE()>
c00290bf:	83 c4 10             	add    esp,0x10
c00290c2:	83 ec 08             	sub    esp,0x8
c00290c5:	68 58 01 00 00       	push   0x158
c00290ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290ce:	e8 3c 9e fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c00290d3:	83 c4 10             	add    esp,0x10
c00290d6:	83 c4 0c             	add    esp,0xc
c00290d9:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c00290da <x87::~x87()>:
c00290da:	83 ec 0c             	sub    esp,0xc
c00290dd:	ba dc d1 02 c0       	mov    edx,0xc002d1dc
c00290e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290e6:	89 10                	mov    DWORD PTR [eax],edx
c00290e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290ec:	83 ec 0c             	sub    esp,0xc
c00290ef:	50                   	push   eax
c00290f0:	e8 59 b8 fe ff       	call   c001494e <FPU::~FPU()>
c00290f5:	83 c4 10             	add    esp,0x10
c00290f8:	90                   	nop
c00290f9:	83 c4 0c             	add    esp,0xc
c00290fc:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c00290fe <x87::~x87()>:
c00290fe:	83 ec 0c             	sub    esp,0xc
c0029101:	83 ec 0c             	sub    esp,0xc
c0029104:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029108:	e8 cd ff ff ff       	call   c00290da <x87::~x87()>
c002910d:	83 c4 10             	add    esp,0x10
c0029110:	83 ec 08             	sub    esp,0x8
c0029113:	68 58 01 00 00       	push   0x158
c0029118:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002911c:	e8 ee 9d fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0029121:	83 c4 10             	add    esp,0x10
c0029124:	83 c4 0c             	add    esp,0xc
c0029127:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029128 <IOAPIC::~IOAPIC()>:
c0029128:	83 ec 0c             	sub    esp,0xc
c002912b:	ba 34 d3 02 c0       	mov    edx,0xc002d334
c0029130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029134:	89 10                	mov    DWORD PTR [eax],edx
c0029136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913a:	83 ec 0c             	sub    esp,0xc
c002913d:	50                   	push   eax
c002913e:	e8 a5 b1 fe ff       	call   c00142e8 <Device::~Device()>
c0029143:	83 c4 10             	add    esp,0x10
c0029146:	90                   	nop
c0029147:	83 c4 0c             	add    esp,0xc
c002914a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c002914c <IOAPIC::~IOAPIC()>:
c002914c:	83 ec 0c             	sub    esp,0xc
c002914f:	83 ec 0c             	sub    esp,0xc
c0029152:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029156:	e8 cd ff ff ff       	call   c0029128 <IOAPIC::~IOAPIC()>
c002915b:	83 c4 10             	add    esp,0x10
c002915e:	83 ec 08             	sub    esp,0x8
c0029161:	68 68 01 00 00       	push   0x168
c0029166:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002916a:	e8 a0 9d fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c002916f:	83 c4 10             	add    esp,0x10
c0029172:	83 c4 0c             	add    esp,0xc
c0029175:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0029176 <APIC::~APIC()>:
c0029176:	83 ec 0c             	sub    esp,0xc
c0029179:	ba ec d2 02 c0       	mov    edx,0xc002d2ec
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	89 10                	mov    DWORD PTR [eax],edx
c0029184:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029188:	83 ec 0c             	sub    esp,0xc
c002918b:	50                   	push   eax
c002918c:	e8 87 bc fe ff       	call   c0014e18 <InterruptController::~InterruptController()>
c0029191:	83 c4 10             	add    esp,0x10
c0029194:	90                   	nop
c0029195:	83 c4 0c             	add    esp,0xc
c0029198:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c002919a <APIC::~APIC()>:
c002919a:	83 ec 0c             	sub    esp,0xc
c002919d:	83 ec 0c             	sub    esp,0xc
c00291a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291a4:	e8 cd ff ff ff       	call   c0029176 <APIC::~APIC()>
c00291a9:	83 c4 10             	add    esp,0x10
c00291ac:	83 ec 08             	sub    esp,0x8
c00291af:	68 58 21 00 00       	push   0x2158
c00291b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291b8:	e8 52 9d fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c00291bd:	83 c4 10             	add    esp,0x10
c00291c0:	83 c4 0c             	add    esp,0xc
c00291c3:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c00291c4 <PIC::~PIC()>:
c00291c4:	83 ec 0c             	sub    esp,0xc
c00291c7:	ba 84 d3 02 c0       	mov    edx,0xc002d384
c00291cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d0:	89 10                	mov    DWORD PTR [eax],edx
c00291d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291d6:	83 ec 0c             	sub    esp,0xc
c00291d9:	50                   	push   eax
c00291da:	e8 39 bc fe ff       	call   c0014e18 <InterruptController::~InterruptController()>
c00291df:	83 c4 10             	add    esp,0x10
c00291e2:	90                   	nop
c00291e3:	83 c4 0c             	add    esp,0xc
c00291e6:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c00291e8 <PIC::~PIC()>:
c00291e8:	83 ec 0c             	sub    esp,0xc
c00291eb:	83 ec 0c             	sub    esp,0xc
c00291ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00291f2:	e8 cd ff ff ff       	call   c00291c4 <PIC::~PIC()>
c00291f7:	83 c4 10             	add    esp,0x10
c00291fa:	83 ec 08             	sub    esp,0x8
c00291fd:	68 58 21 00 00       	push   0x2158
c0029202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029206:	e8 04 9d fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c002920b:	83 c4 10             	add    esp,0x10
c002920e:	83 c4 0c             	add    esp,0xc
c0029211:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029212 <APICTimer::~APICTimer()>:
c0029212:	83 ec 0c             	sub    esp,0xc
c0029215:	ba d8 d3 02 c0       	mov    edx,0xc002d3d8
c002921a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002921e:	89 10                	mov    DWORD PTR [eax],edx
c0029220:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029224:	83 ec 0c             	sub    esp,0xc
c0029227:	50                   	push   eax
c0029228:	e8 43 db fe ff       	call   c0016d70 <Timer::~Timer()>
c002922d:	83 c4 10             	add    esp,0x10
c0029230:	90                   	nop
c0029231:	83 c4 0c             	add    esp,0xc
c0029234:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029236 <APICTimer::~APICTimer()>:
c0029236:	83 ec 0c             	sub    esp,0xc
c0029239:	83 ec 0c             	sub    esp,0xc
c002923c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029240:	e8 cd ff ff ff       	call   c0029212 <APICTimer::~APICTimer()>
c0029245:	83 c4 10             	add    esp,0x10
c0029248:	83 ec 08             	sub    esp,0x8
c002924b:	68 60 01 00 00       	push   0x160
c0029250:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029254:	e8 b6 9c fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c0029259:	83 c4 10             	add    esp,0x10
c002925c:	83 c4 0c             	add    esp,0xc
c002925f:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029260 <PIT::~PIT()>:
c0029260:	83 ec 0c             	sub    esp,0xc
c0029263:	ba 28 d4 02 c0       	mov    edx,0xc002d428
c0029268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002926c:	89 10                	mov    DWORD PTR [eax],edx
c002926e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029272:	83 ec 0c             	sub    esp,0xc
c0029275:	50                   	push   eax
c0029276:	e8 f5 da fe ff       	call   c0016d70 <Timer::~Timer()>
c002927b:	83 c4 10             	add    esp,0x10
c002927e:	90                   	nop
c002927f:	83 c4 0c             	add    esp,0xc
c0029282:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029284 <PIT::~PIT()>:
c0029284:	83 ec 0c             	sub    esp,0xc
c0029287:	83 ec 0c             	sub    esp,0xc
c002928a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002928e:	e8 cd ff ff ff       	call   c0029260 <PIT::~PIT()>
c0029293:	83 c4 10             	add    esp,0x10
c0029296:	83 ec 08             	sub    esp,0x8
c0029299:	68 5c 01 00 00       	push   0x15c
c002929e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00292a2:	e8 68 9c fe ff       	call   c0012f0f <operator delete(void*, unsigned long)>
c00292a7:	83 c4 10             	add    esp,0x10
c00292aa:	83 c4 0c             	add    esp,0xc
c00292ad:	c3                   	ret    
