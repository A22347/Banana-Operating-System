
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 3f 7a 00 00       	call   c0007a5f <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 95 bd 01 00       	call   c001bdba <_init>
c0000025:	c3                   	ret    
c0000026:	bb 56 c8 01 c0       	mov    ebx,0xc001c856
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 60 c8 01 c0    	cmp    ebx,0xc001c860
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 78 f3 01 c0       	mov    eax,0xc001f378
c0000049:	3d 78 f3 01 c0       	cmp    eax,0xc001f378
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 78 f3 01 c0       	push   0xc001f378
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 78 f3 01 c0       	mov    eax,0xc001f378
c0000075:	2d 78 f3 01 c0       	sub    eax,0xc001f378
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 78 f3 01 c0       	push   0xc001f378
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 04 f5 01 c0 00 	cmp    BYTE PTR ds:0xc001f504,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 68 c8 01 c0       	mov    ebx,0xc001c868
c00000bb:	81 eb 64 c8 01 c0    	sub    ebx,0xc001c864
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 64 c8 01 c0       	mov    esi,0xc001c864
c00000ca:	a1 08 f5 01 c0       	mov    eax,ds:0xc001f508
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 08 f5 01 c0       	mov    ds:0xc001f508,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 08 f5 01 c0       	mov    eax,ds:0xc001f508
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 78 f3 01 c0       	push   0xc001f378
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 04 f5 01 c0 01 	mov    BYTE PTR ds:0xc001f504,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 0c f5 01 c0       	push   0xc001f50c
c000012c:	68 78 f3 01 c0       	push   0xc001f378
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <doTPAUSE>:
c00001b4:	fb                   	sti    
c00001b5:	31 c0                	xor    eax,eax
c00001b7:	31 d2                	xor    edx,edx
c00001b9:	66 0f ae f0          	tpause eax
c00001bd:	c3                   	ret    

c00001be <hasLegacyFPU>:
c00001be:	0f 20 c2             	mov    edx,cr0
c00001c1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001c7:	0f 22 c2             	mov    cr0,edx
c00001ca:	db e3                	fninit 
c00001cc:	dd 3d e1 01 00 c0    	fnstsw WORD PTR ds:0xc00001e1
c00001d2:	31 c0                	xor    eax,eax
c00001d4:	66 81 3d e1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001e1,0x0
c00001dd:	75 01                	jne    c00001e0 <hasLegacyFPU.nofpu>

c00001df <hasLegacyFPU.hasfpu>:
c00001df:	40                   	inc    eax

c00001e0 <hasLegacyFPU.nofpu>:
c00001e0:	c3                   	ret    

c00001e1 <testword>:
c00001e1:	aa                   	stos   BYTE PTR es:[edi],al
c00001e2:	55                   	push   ebp

c00001e3 <is486>:
c00001e3:	0f 09                	wbinvd 
c00001e5:	31 c0                	xor    eax,eax
c00001e7:	40                   	inc    eax
c00001e8:	c3                   	ret    
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	90                   	nop
c00001f7:	90                   	nop
c00001f8:	90                   	nop
c00001f9:	90                   	nop
c00001fa:	90                   	nop
c00001fb:	90                   	nop
c00001fc:	90                   	nop
c00001fd:	90                   	nop
c00001fe:	90                   	nop
c00001ff:	90                   	nop
c0000200:	90                   	nop
c0000201:	90                   	nop
c0000202:	90                   	nop
c0000203:	90                   	nop
c0000204:	90                   	nop
c0000205:	90                   	nop
c0000206:	90                   	nop
c0000207:	90                   	nop
c0000208:	90                   	nop
c0000209:	90                   	nop
c000020a:	90                   	nop
c000020b:	90                   	nop
c000020c:	90                   	nop
c000020d:	90                   	nop
c000020e:	90                   	nop
c000020f:	90                   	nop
c0000210:	90                   	nop
c0000211:	90                   	nop
c0000212:	90                   	nop
c0000213:	90                   	nop
c0000214:	90                   	nop
c0000215:	90                   	nop
c0000216:	31 c0                	xor    eax,eax
c0000218:	c3                   	ret    

c0000219 <detectCPUID>:
c0000219:	9c                   	pushf  
c000021a:	9c                   	pushf  
c000021b:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000222:	9d                   	popf   
c0000223:	9c                   	pushf  
c0000224:	58                   	pop    eax
c0000225:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000228:	9d                   	popf   
c0000229:	25 00 00 20 00       	and    eax,0x200000
c000022e:	c3                   	ret    

c000022f <goToVM86>:
c000022f:	55                   	push   ebp
c0000230:	89 e5                	mov    ebp,esp
c0000232:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000235:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000238:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000023b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000023e:	25 ff ff 00 00       	and    eax,0xffff
c0000243:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000249:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000024f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000255:	52                   	push   edx
c0000256:	51                   	push   ecx
c0000257:	68 02 02 02 00       	push   0x20202
c000025c:	53                   	push   ebx
c000025d:	50                   	push   eax
c000025e:	cf                   	iret   

c000025f <goToUsermode>:
c000025f:	55                   	push   ebp
c0000260:	89 e5                	mov    ebp,esp
c0000262:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000265:	66 b8 23 00          	mov    ax,0x23
c0000269:	66 8e d8             	mov    ds,ax
c000026c:	66 8e c0             	mov    es,ax
c000026f:	66 8e e0             	mov    fs,ax
c0000272:	66 8e e8             	mov    gs,ax
c0000275:	89 e0                	mov    eax,esp
c0000277:	68 23 00 00 00       	push   0x23
c000027c:	50                   	push   eax
c000027d:	68 02 02 00 00       	push   0x202
c0000282:	68 1b 00 00 00       	push   0x1b
c0000287:	53                   	push   ebx
c0000288:	cf                   	iret   

c0000289 <switchToThreadASMFirstTime>:
c0000289:	9c                   	pushf  
c000028a:	fa                   	cli    
c000028b:	50                   	push   eax
c000028c:	53                   	push   ebx
c000028d:	51                   	push   ecx
c000028e:	52                   	push   edx
c000028f:	56                   	push   esi
c0000290:	57                   	push   edi
c0000291:	55                   	push   ebp
c0000292:	e9 11 00 00 00       	jmp    c00002a8 <commonThreadSwitch>

c0000297 <switchToThreadASM>:
c0000297:	9c                   	pushf  
c0000298:	50                   	push   eax
c0000299:	53                   	push   ebx
c000029a:	51                   	push   ecx
c000029b:	52                   	push   edx
c000029c:	56                   	push   esi
c000029d:	57                   	push   edi
c000029e:	55                   	push   ebp
c000029f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c00002a5:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c00002a8 <commonThreadSwitch>:
c00002a8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00002ac:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00002b2:	8b 06                	mov    eax,DWORD PTR [esi]
c00002b4:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c00002b7:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00002ba:	0f 20 d9             	mov    ecx,cr3
c00002bd:	39 c8                	cmp    eax,ecx
c00002bf:	74 03                	je     c00002c4 <commonThreadSwitch.doneVAS>
c00002c1:	0f 22 d8             	mov    cr3,eax

c00002c4 <commonThreadSwitch.doneVAS>:
c00002c4:	85 d2                	test   edx,edx
c00002c6:	75 11                	jne    c00002d9 <commonThreadSwitch.firstTime>
c00002c8:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002cb:	e8 9c 2b 01 00       	call   c0012e6c <changeTSS>
c00002d0:	5d                   	pop    ebp
c00002d1:	5f                   	pop    edi
c00002d2:	5e                   	pop    esi
c00002d3:	5a                   	pop    edx
c00002d4:	59                   	pop    ecx
c00002d5:	5b                   	pop    ebx
c00002d6:	58                   	pop    eax
c00002d7:	9d                   	popf   
c00002d8:	c3                   	ret    

c00002d9 <commonThreadSwitch.firstTime>:
c00002d9:	fa                   	cli    
c00002da:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002dd:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002e2:	60                   	pusha  
c00002e3:	e8 40 a2 00 00       	call   c000a528 <mapVASFirstTime>
c00002e8:	61                   	popa   
c00002e9:	89 c4                	mov    esp,eax
c00002eb:	56                   	push   esi
c00002ec:	52                   	push   edx
c00002ed:	e8 7a 2b 01 00       	call   c0012e6c <changeTSS>
c00002f2:	5a                   	pop    edx
c00002f3:	5e                   	pop    esi
c00002f4:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002fb:	5d                   	pop    ebp
c00002fc:	5f                   	pop    edi
c00002fd:	5e                   	pop    esi
c00002fe:	59                   	pop    ecx
c00002ff:	59                   	pop    ecx
c0000300:	5b                   	pop    ebx
c0000301:	58                   	pop    eax
c0000302:	81 c4 04 00 00 00    	add    esp,0x4
c0000308:	6a 02                	push   0x2
c000030a:	9d                   	popf   
c000030b:	52                   	push   edx
c000030c:	e8 4b 30 01 00       	call   c001335c <taskStartupFunction>
c0000311:	5a                   	pop    edx
c0000312:	50                   	push   eax
c0000313:	ff d2                	call   edx
c0000315:	e8 9a 36 01 00       	call   c00139b4 <taskReturned>
c000031a:	e9 fb ff ff ff       	jmp    c000031a <commonThreadSwitch.firstTime+0x41>

c000031f <asmQuickAcquireLock>:
c000031f:	55                   	push   ebp
c0000320:	89 e5                	mov    ebp,esp
c0000322:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000325 <asmQuickAcquireLock.retry>:
c0000325:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000032a:	72 02                	jb     c000032e <asmQuickAcquireLock.spin_with_pause>
c000032c:	fa                   	cli    
c000032d:	c3                   	ret    

c000032e <asmQuickAcquireLock.spin_with_pause>:
c000032e:	f3 90                	pause  
c0000330:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000336:	75 f6                	jne    c000032e <asmQuickAcquireLock.spin_with_pause>
c0000338:	e9 e8 ff ff ff       	jmp    c0000325 <asmQuickAcquireLock.retry>

c000033d <asmQuickReleaseLock>:
c000033d:	55                   	push   ebp
c000033e:	89 e5                	mov    ebp,esp
c0000340:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000347:	5d                   	pop    ebp
c0000348:	c3                   	ret    

c0000349 <asmAcquireLock>:
c0000349:	55                   	push   ebp
c000034a:	89 e5                	mov    ebp,esp
c000034c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000034f <asmAcquireLock.retry>:
c000034f:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000354:	72 05                	jb     c000035b <asmAcquireLock.spin_with_pause>
c0000356:	9c                   	pushf  
c0000357:	58                   	pop    eax
c0000358:	fa                   	cli    
c0000359:	5d                   	pop    ebp
c000035a:	c3                   	ret    

c000035b <asmAcquireLock.spin_with_pause>:
c000035b:	f3 90                	pause  
c000035d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000363:	75 f6                	jne    c000035b <asmAcquireLock.spin_with_pause>
c0000365:	e9 e5 ff ff ff       	jmp    c000034f <asmAcquireLock.retry>

c000036a <asmReleaseLock>:
c000036a:	55                   	push   ebp
c000036b:	89 e5                	mov    ebp,esp
c000036d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000370:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000373:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000379:	52                   	push   edx
c000037a:	9d                   	popf   
c000037b:	5d                   	pop    ebp
c000037c:	c3                   	ret    

c000037d <loadGDT>:
c000037d:	0f 01 15 8c 03 02 c0 	lgdtd  ds:0xc002038c
c0000384:	66 b8 10 00          	mov    ax,0x10
c0000388:	66 8e d8             	mov    ds,ax
c000038b:	66 8e c0             	mov    es,ax
c000038e:	66 8e e0             	mov    fs,ax
c0000391:	66 8e e8             	mov    gs,ax
c0000394:	66 8e d0             	mov    ss,ax
c0000397:	e9 00 00 00 00       	jmp    c000039c <flush2>

c000039c <flush2>:
c000039c:	c3                   	ret    

c000039d <memcpy>:
c000039d:	e9 c9 66 00 00       	jmp    c0006a6b <__not_memcpy>
c00003a2:	66 90                	xchg   ax,ax
c00003a4:	66 90                	xchg   ax,ax
c00003a6:	66 90                	xchg   ax,ax
c00003a8:	66 90                	xchg   ax,ax
c00003aa:	66 90                	xchg   ax,ax
c00003ac:	66 90                	xchg   ax,ax
c00003ae:	66 90                	xchg   ax,ax

c00003b0 <memcmp>:
c00003b0:	56                   	push   esi
c00003b1:	53                   	push   ebx
c00003b2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00003b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00003ba:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00003be:	85 f6                	test   esi,esi
c00003c0:	74 1c                	je     c00003de <memcmp+0x2e>
c00003c2:	8a 08                	mov    cl,BYTE PTR [eax]
c00003c4:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003c6:	38 cb                	cmp    bl,cl
c00003c8:	75 26                	jne    c00003f0 <memcmp+0x40>
c00003ca:	01 c6                	add    esi,eax
c00003cc:	eb 0a                	jmp    c00003d8 <memcmp+0x28>
c00003ce:	66 90                	xchg   ax,ax
c00003d0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003d2:	8a 1a                	mov    bl,BYTE PTR [edx]
c00003d4:	38 d9                	cmp    cl,bl
c00003d6:	75 18                	jne    c00003f0 <memcmp+0x40>
c00003d8:	40                   	inc    eax
c00003d9:	42                   	inc    edx
c00003da:	39 f0                	cmp    eax,esi
c00003dc:	75 f2                	jne    c00003d0 <memcmp+0x20>
c00003de:	31 c0                	xor    eax,eax
c00003e0:	5b                   	pop    ebx
c00003e1:	5e                   	pop    esi
c00003e2:	c3                   	ret    
c00003e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00003e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00003f0:	81 e3 ff 00 00 00    	and    ebx,0xff
c00003f6:	31 c0                	xor    eax,eax
c00003f8:	88 c8                	mov    al,cl
c00003fa:	29 d8                	sub    eax,ebx
c00003fc:	5b                   	pop    ebx
c00003fd:	5e                   	pop    esi
c00003fe:	c3                   	ret    
c00003ff:	90                   	nop

c0000400 <memmove>:
c0000400:	55                   	push   ebp
c0000401:	57                   	push   edi
c0000402:	56                   	push   esi
c0000403:	53                   	push   ebx
c0000404:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000408:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000040c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0000410:	39 dd                	cmp    ebp,ebx
c0000412:	0f 83 98 00 00 00    	jae    c00004b0 <memmove+0xb0>
c0000418:	85 d2                	test   edx,edx
c000041a:	0f 84 7c 00 00 00    	je     c000049c <memmove+0x9c>
c0000420:	8d 4b 04             	lea    ecx,[ebx+0x4]
c0000423:	8d 75 04             	lea    esi,[ebp+0x4]
c0000426:	39 cd                	cmp    ebp,ecx
c0000428:	0f 93 c1             	setae  cl
c000042b:	39 f3                	cmp    ebx,esi
c000042d:	0f 93 c0             	setae  al
c0000430:	89 c6                	mov    esi,eax
c0000432:	09 ce                	or     esi,ecx
c0000434:	8d 4a ff             	lea    ecx,[edx-0x1]
c0000437:	89 f0                	mov    eax,esi
c0000439:	83 f9 0c             	cmp    ecx,0xc
c000043c:	0f 97 c1             	seta   cl
c000043f:	84 c8                	test   al,cl
c0000441:	0f 84 89 00 00 00    	je     c00004d0 <memmove+0xd0>
c0000447:	89 e9                	mov    ecx,ebp
c0000449:	09 d9                	or     ecx,ebx
c000044b:	83 e1 03             	and    ecx,0x3
c000044e:	0f 85 7c 00 00 00    	jne    c00004d0 <memmove+0xd0>
c0000454:	89 d7                	mov    edi,edx
c0000456:	89 d9                	mov    ecx,ebx
c0000458:	83 e7 fc             	and    edi,0xfffffffc
c000045b:	89 ee                	mov    esi,ebp
c000045d:	01 df                	add    edi,ebx
c000045f:	90                   	nop
c0000460:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000462:	83 c6 04             	add    esi,0x4
c0000465:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000468:	83 c1 04             	add    ecx,0x4
c000046b:	39 f9                	cmp    ecx,edi
c000046d:	75 f1                	jne    c0000460 <memmove+0x60>
c000046f:	89 d1                	mov    ecx,edx
c0000471:	89 d7                	mov    edi,edx
c0000473:	83 e1 fc             	and    ecx,0xfffffffc
c0000476:	29 cf                	sub    edi,ecx
c0000478:	01 cb                	add    ebx,ecx
c000047a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000047e:	39 ca                	cmp    edx,ecx
c0000480:	74 1a                	je     c000049c <memmove+0x9c>
c0000482:	8a 03                	mov    al,BYTE PTR [ebx]
c0000484:	83 ff 01             	cmp    edi,0x1
c0000487:	88 06                	mov    BYTE PTR [esi],al
c0000489:	74 11                	je     c000049c <memmove+0x9c>
c000048b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000048e:	83 ff 02             	cmp    edi,0x2
c0000491:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000494:	74 06                	je     c000049c <memmove+0x9c>
c0000496:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000499:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000049c:	5b                   	pop    ebx
c000049d:	89 e8                	mov    eax,ebp
c000049f:	5e                   	pop    esi
c00004a0:	5f                   	pop    edi
c00004a1:	5d                   	pop    ebp
c00004a2:	c3                   	ret    
c00004a3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004b0:	76 ea                	jbe    c000049c <memmove+0x9c>
c00004b2:	85 d2                	test   edx,edx
c00004b4:	74 e6                	je     c000049c <memmove+0x9c>
c00004b6:	4b                   	dec    ebx
c00004b7:	8d 4d ff             	lea    ecx,[ebp-0x1]
c00004ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004c0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004c3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004c6:	4a                   	dec    edx
c00004c7:	75 f7                	jne    c00004c0 <memmove+0xc0>
c00004c9:	5b                   	pop    ebx
c00004ca:	89 e8                	mov    eax,ebp
c00004cc:	5e                   	pop    esi
c00004cd:	5f                   	pop    edi
c00004ce:	5d                   	pop    ebp
c00004cf:	c3                   	ret    
c00004d0:	01 ea                	add    edx,ebp
c00004d2:	89 e9                	mov    ecx,ebp
c00004d4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004da:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004e0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004e2:	41                   	inc    ecx
c00004e3:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004e6:	43                   	inc    ebx
c00004e7:	39 d1                	cmp    ecx,edx
c00004e9:	75 f5                	jne    c00004e0 <memmove+0xe0>
c00004eb:	eb af                	jmp    c000049c <memmove+0x9c>
c00004ed:	8d 76 00             	lea    esi,[esi+0x0]

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	53                   	push   ebx
c00004f2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00004f6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00004fa:	85 d2                	test   edx,edx
c00004fc:	74 1f                	je     c000051d <memset+0x2d>
c00004fe:	31 c0                	xor    eax,eax
c0000500:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0000504:	88 c4                	mov    ah,al
c0000506:	89 c1                	mov    ecx,eax
c0000508:	c1 e1 10             	shl    ecx,0x10
c000050b:	09 c8                	or     eax,ecx
c000050d:	83 fa 04             	cmp    edx,0x4
c0000510:	73 1e                	jae    c0000530 <memset+0x40>
c0000512:	85 d2                	test   edx,edx
c0000514:	74 07                	je     c000051d <memset+0x2d>
c0000516:	88 03                	mov    BYTE PTR [ebx],al
c0000518:	f6 c2 02             	test   dl,0x2
c000051b:	75 30                	jne    c000054d <memset+0x5d>
c000051d:	89 d8                	mov    eax,ebx
c000051f:	5b                   	pop    ebx
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	89 03                	mov    DWORD PTR [ebx],eax
c0000532:	8d 7b 04             	lea    edi,[ebx+0x4]
c0000535:	89 d9                	mov    ecx,ebx
c0000537:	83 e7 fc             	and    edi,0xfffffffc
c000053a:	89 44 13 fc          	mov    DWORD PTR [ebx+edx*1-0x4],eax
c000053e:	29 f9                	sub    ecx,edi
c0000540:	01 d1                	add    ecx,edx
c0000542:	c1 e9 02             	shr    ecx,0x2
c0000545:	fc                   	cld    
c0000546:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000548:	89 d8                	mov    eax,ebx
c000054a:	5b                   	pop    ebx
c000054b:	5f                   	pop    edi
c000054c:	c3                   	ret    
c000054d:	66 89 44 13 fe       	mov    WORD PTR [ebx+edx*1-0x2],ax
c0000552:	eb c9                	jmp    c000051d <memset+0x2d>
c0000554:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000055a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000560 <strlen>:
c0000560:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000564:	31 c0                	xor    eax,eax
c0000566:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000569:	74 15                	je     c0000580 <strlen+0x20>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000570:	40                   	inc    eax
c0000571:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000575:	75 f9                	jne    c0000570 <strlen+0x10>
c0000577:	c3                   	ret    
c0000578:	90                   	nop
c0000579:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000580:	c3                   	ret    
c0000581:	eb 0d                	jmp    c0000590 <strpbrk>
c0000583:	90                   	nop
c0000584:	90                   	nop
c0000585:	90                   	nop
c0000586:	90                   	nop
c0000587:	90                   	nop
c0000588:	90                   	nop
c0000589:	90                   	nop
c000058a:	90                   	nop
c000058b:	90                   	nop
c000058c:	90                   	nop
c000058d:	90                   	nop
c000058e:	90                   	nop
c000058f:	90                   	nop

c0000590 <strpbrk>:
c0000590:	57                   	push   edi
c0000591:	56                   	push   esi
c0000592:	53                   	push   ebx
c0000593:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000597:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000059b:	8a 1e                	mov    bl,BYTE PTR [esi]
c000059d:	84 db                	test   bl,bl
c000059f:	74 21                	je     c00005c2 <strpbrk+0x32>
c00005a1:	8a 07                	mov    al,BYTE PTR [edi]
c00005a3:	84 c0                	test   al,al
c00005a5:	74 14                	je     c00005bb <strpbrk+0x2b>
c00005a7:	38 d8                	cmp    al,bl
c00005a9:	74 19                	je     c00005c4 <strpbrk+0x34>
c00005ab:	89 fa                	mov    edx,edi
c00005ad:	eb 05                	jmp    c00005b4 <strpbrk+0x24>
c00005af:	90                   	nop
c00005b0:	38 d9                	cmp    cl,bl
c00005b2:	74 10                	je     c00005c4 <strpbrk+0x34>
c00005b4:	42                   	inc    edx
c00005b5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00005b7:	84 c9                	test   cl,cl
c00005b9:	75 f5                	jne    c00005b0 <strpbrk+0x20>
c00005bb:	46                   	inc    esi
c00005bc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00005be:	84 db                	test   bl,bl
c00005c0:	75 e1                	jne    c00005a3 <strpbrk+0x13>
c00005c2:	31 f6                	xor    esi,esi
c00005c4:	89 f0                	mov    eax,esi
c00005c6:	5b                   	pop    ebx
c00005c7:	5e                   	pop    esi
c00005c8:	5f                   	pop    edi
c00005c9:	c3                   	ret    
c00005ca:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00005d0 <strtok>:
c00005d0:	56                   	push   esi
c00005d1:	53                   	push   ebx
c00005d2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005d6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005da:	85 db                	test   ebx,ebx
c00005dc:	75 07                	jne    c00005e5 <strtok+0x15>
c00005de:	eb 30                	jmp    c0000610 <strtok+0x40>
c00005e0:	43                   	inc    ebx
c00005e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00005e5:	56                   	push   esi
c00005e6:	53                   	push   ebx
c00005e7:	e8 a4 ff ff ff       	call   c0000590 <strpbrk>
c00005ec:	5a                   	pop    edx
c00005ed:	a3 24 f5 01 c0       	mov    ds:0xc001f524,eax
c00005f2:	59                   	pop    ecx
c00005f3:	39 d8                	cmp    eax,ebx
c00005f5:	74 e9                	je     c00005e0 <strtok+0x10>
c00005f7:	85 c0                	test   eax,eax
c00005f9:	74 1f                	je     c000061a <strtok+0x4a>
c00005fb:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00005fe:	8d 50 01             	lea    edx,[eax+0x1]
c0000601:	89 d8                	mov    eax,ebx
c0000603:	89 15 24 f5 01 c0    	mov    DWORD PTR ds:0xc001f524,edx
c0000609:	5b                   	pop    ebx
c000060a:	5e                   	pop    esi
c000060b:	c3                   	ret    
c000060c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000610:	8b 1d 24 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f524
c0000616:	85 db                	test   ebx,ebx
c0000618:	75 cb                	jne    c00005e5 <strtok+0x15>
c000061a:	31 c0                	xor    eax,eax
c000061c:	5b                   	pop    ebx
c000061d:	5e                   	pop    esi
c000061e:	c3                   	ret    
c000061f:	90                   	nop

c0000620 <strcpy>:
c0000620:	53                   	push   ebx
c0000621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000625:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000629:	89 c3                	mov    ebx,eax
c000062b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000062d:	84 d2                	test   dl,dl
c000062f:	74 19                	je     c000064a <strcpy+0x2a>
c0000631:	eb 0d                	jmp    c0000640 <strcpy+0x20>
c0000633:	90                   	nop
c0000634:	90                   	nop
c0000635:	90                   	nop
c0000636:	90                   	nop
c0000637:	90                   	nop
c0000638:	90                   	nop
c0000639:	90                   	nop
c000063a:	90                   	nop
c000063b:	90                   	nop
c000063c:	90                   	nop
c000063d:	90                   	nop
c000063e:	90                   	nop
c000063f:	90                   	nop
c0000640:	88 13                	mov    BYTE PTR [ebx],dl
c0000642:	41                   	inc    ecx
c0000643:	43                   	inc    ebx
c0000644:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000646:	84 d2                	test   dl,dl
c0000648:	75 f6                	jne    c0000640 <strcpy+0x20>
c000064a:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000064d:	5b                   	pop    ebx
c000064e:	c3                   	ret    
c000064f:	90                   	nop

c0000650 <strncpy>:
c0000650:	57                   	push   edi
c0000651:	56                   	push   esi
c0000652:	53                   	push   ebx
c0000653:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000657:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000065b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000065f:	85 ff                	test   edi,edi
c0000661:	74 3e                	je     c00006a1 <strncpy+0x51>
c0000663:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000665:	8d 47 ff             	lea    eax,[edi-0x1]
c0000668:	8d 4a 01             	lea    ecx,[edx+0x1]
c000066b:	88 1a                	mov    BYTE PTR [edx],bl
c000066d:	84 db                	test   bl,bl
c000066f:	74 3f                	je     c00006b0 <strncpy+0x60>
c0000671:	85 c0                	test   eax,eax
c0000673:	74 2c                	je     c00006a1 <strncpy+0x51>
c0000675:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000678:	8d 47 fe             	lea    eax,[edi-0x2]
c000067b:	8d 4a 02             	lea    ecx,[edx+0x2]
c000067e:	8d 7e 02             	lea    edi,[esi+0x2]
c0000681:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0000684:	84 db                	test   bl,bl
c0000686:	75 15                	jne    c000069d <strncpy+0x4d>
c0000688:	eb 26                	jmp    c00006b0 <strncpy+0x60>
c000068a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000690:	47                   	inc    edi
c0000691:	41                   	inc    ecx
c0000692:	8a 5f ff             	mov    bl,BYTE PTR [edi-0x1]
c0000695:	48                   	dec    eax
c0000696:	88 59 ff             	mov    BYTE PTR [ecx-0x1],bl
c0000699:	84 db                	test   bl,bl
c000069b:	74 13                	je     c00006b0 <strncpy+0x60>
c000069d:	85 c0                	test   eax,eax
c000069f:	75 ef                	jne    c0000690 <strncpy+0x40>
c00006a1:	5b                   	pop    ebx
c00006a2:	89 d0                	mov    eax,edx
c00006a4:	5e                   	pop    esi
c00006a5:	5f                   	pop    edi
c00006a6:	c3                   	ret    
c00006a7:	89 f6                	mov    esi,esi
c00006a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00006b0:	85 c0                	test   eax,eax
c00006b2:	74 ed                	je     c00006a1 <strncpy+0x51>
c00006b4:	83 f8 04             	cmp    eax,0x4
c00006b7:	73 17                	jae    c00006d0 <strncpy+0x80>
c00006b9:	85 c0                	test   eax,eax
c00006bb:	74 e4                	je     c00006a1 <strncpy+0x51>
c00006bd:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00006c0:	a8 02                	test   al,0x2
c00006c2:	74 dd                	je     c00006a1 <strncpy+0x51>
c00006c4:	66 c7 44 01 fe 00 00 	mov    WORD PTR [ecx+eax*1-0x2],0x0
c00006cb:	eb d4                	jmp    c00006a1 <strncpy+0x51>
c00006cd:	8d 76 00             	lea    esi,[esi+0x0]
c00006d0:	c7 01 00 00 00 00    	mov    DWORD PTR [ecx],0x0
c00006d6:	8d 79 04             	lea    edi,[ecx+0x4]
c00006d9:	c7 44 01 fc 00 00 00 00 	mov    DWORD PTR [ecx+eax*1-0x4],0x0
c00006e1:	83 e7 fc             	and    edi,0xfffffffc
c00006e4:	29 f9                	sub    ecx,edi
c00006e6:	01 c1                	add    ecx,eax
c00006e8:	c1 e9 02             	shr    ecx,0x2
c00006eb:	fc                   	cld    
c00006ec:	31 c0                	xor    eax,eax
c00006ee:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00006f0:	89 d0                	mov    eax,edx
c00006f2:	5b                   	pop    ebx
c00006f3:	5e                   	pop    esi
c00006f4:	5f                   	pop    edi
c00006f5:	c3                   	ret    
c00006f6:	8d 76 00             	lea    esi,[esi+0x0]
c00006f9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000700 <strcmp>:
c0000700:	56                   	push   esi
c0000701:	53                   	push   ebx
c0000702:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0000706:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000070a:	8a 16                	mov    dl,BYTE PTR [esi]
c000070c:	8a 0b                	mov    cl,BYTE PTR [ebx]
c000070e:	38 d1                	cmp    cl,dl
c0000710:	75 1d                	jne    c000072f <strcmp+0x2f>
c0000712:	84 c9                	test   cl,cl
c0000714:	74 2a                	je     c0000740 <strcmp+0x40>
c0000716:	b8 01 00 00 00       	mov    eax,0x1
c000071b:	eb 08                	jmp    c0000725 <strcmp+0x25>
c000071d:	8d 76 00             	lea    esi,[esi+0x0]
c0000720:	40                   	inc    eax
c0000721:	84 d2                	test   dl,dl
c0000723:	74 1b                	je     c0000740 <strcmp+0x40>
c0000725:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0000728:	8a 0c 03             	mov    cl,BYTE PTR [ebx+eax*1]
c000072b:	38 ca                	cmp    dl,cl
c000072d:	74 f1                	je     c0000720 <strcmp+0x20>
c000072f:	31 c0                	xor    eax,eax
c0000731:	81 e1 ff 00 00 00    	and    ecx,0xff
c0000737:	88 d0                	mov    al,dl
c0000739:	5b                   	pop    ebx
c000073a:	29 c8                	sub    eax,ecx
c000073c:	5e                   	pop    esi
c000073d:	c3                   	ret    
c000073e:	66 90                	xchg   ax,ax
c0000740:	31 c0                	xor    eax,eax
c0000742:	5b                   	pop    ebx
c0000743:	5e                   	pop    esi
c0000744:	c3                   	ret    
c0000745:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000749:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000750 <strchr>:
c0000750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000754:	8a 10                	mov    dl,BYTE PTR [eax]
c0000756:	84 d2                	test   dl,dl
c0000758:	74 21                	je     c000077b <strchr+0x2b>
c000075a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000075e:	38 ca                	cmp    dl,cl
c0000760:	75 12                	jne    c0000774 <strchr+0x24>
c0000762:	eb 1a                	jmp    c000077e <strchr+0x2e>
c0000764:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000076a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000770:	38 ca                	cmp    dl,cl
c0000772:	74 09                	je     c000077d <strchr+0x2d>
c0000774:	40                   	inc    eax
c0000775:	8a 10                	mov    dl,BYTE PTR [eax]
c0000777:	84 d2                	test   dl,dl
c0000779:	75 f5                	jne    c0000770 <strchr+0x20>
c000077b:	31 c0                	xor    eax,eax
c000077d:	c3                   	ret    
c000077e:	c3                   	ret    
c000077f:	90                   	nop

c0000780 <strncmp>:
c0000780:	57                   	push   edi
c0000781:	56                   	push   esi
c0000782:	53                   	push   ebx
c0000783:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0000787:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000078b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000078f:	85 ff                	test   edi,edi
c0000791:	74 2f                	je     c00007c2 <strncmp+0x42>
c0000793:	8a 16                	mov    dl,BYTE PTR [esi]
c0000795:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000797:	38 d1                	cmp    cl,dl
c0000799:	75 35                	jne    c00007d0 <strncmp+0x50>
c000079b:	8d 46 01             	lea    eax,[esi+0x1]
c000079e:	84 c9                	test   cl,cl
c00007a0:	74 20                	je     c00007c2 <strncmp+0x42>
c00007a2:	01 fe                	add    esi,edi
c00007a4:	eb 17                	jmp    c00007bd <strncmp+0x3d>
c00007a6:	8d 76 00             	lea    esi,[esi+0x0]
c00007a9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00007b0:	8a 10                	mov    dl,BYTE PTR [eax]
c00007b2:	8a 0b                	mov    cl,BYTE PTR [ebx]
c00007b4:	38 ca                	cmp    dl,cl
c00007b6:	75 18                	jne    c00007d0 <strncmp+0x50>
c00007b8:	40                   	inc    eax
c00007b9:	84 d2                	test   dl,dl
c00007bb:	74 05                	je     c00007c2 <strncmp+0x42>
c00007bd:	43                   	inc    ebx
c00007be:	39 c6                	cmp    esi,eax
c00007c0:	75 ee                	jne    c00007b0 <strncmp+0x30>
c00007c2:	5b                   	pop    ebx
c00007c3:	31 c0                	xor    eax,eax
c00007c5:	5e                   	pop    esi
c00007c6:	5f                   	pop    edi
c00007c7:	c3                   	ret    
c00007c8:	90                   	nop
c00007c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d0:	5b                   	pop    ebx
c00007d1:	31 c0                	xor    eax,eax
c00007d3:	81 e1 ff 00 00 00    	and    ecx,0xff
c00007d9:	88 d0                	mov    al,dl
c00007db:	5e                   	pop    esi
c00007dc:	29 c8                	sub    eax,ecx
c00007de:	5f                   	pop    edi
c00007df:	c3                   	ret    

c00007e0 <strcat>:
c00007e0:	56                   	push   esi
c00007e1:	53                   	push   ebx
c00007e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00007e6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007ea:	89 c3                	mov    ebx,eax
c00007ec:	eb 04                	jmp    c00007f2 <strcat+0x12>
c00007ee:	66 90                	xchg   ax,ax
c00007f0:	89 d3                	mov    ebx,edx
c00007f2:	8d 53 01             	lea    edx,[ebx+0x1]
c00007f5:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00007f9:	75 f5                	jne    c00007f0 <strcat+0x10>
c00007fb:	31 d2                	xor    edx,edx
c00007fd:	8d 76 00             	lea    esi,[esi+0x0]
c0000800:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000803:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000806:	42                   	inc    edx
c0000807:	84 c9                	test   cl,cl
c0000809:	75 f5                	jne    c0000800 <strcat+0x20>
c000080b:	5b                   	pop    ebx
c000080c:	5e                   	pop    esi
c000080d:	c3                   	ret    
c000080e:	66 90                	xchg   ax,ax

c0000810 <strncat>:
c0000810:	56                   	push   esi
c0000811:	53                   	push   ebx
c0000812:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000081a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000081e:	85 f6                	test   esi,esi
c0000820:	74 2e                	je     c0000850 <strncat+0x40>
c0000822:	89 c2                	mov    edx,eax
c0000824:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000082a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000830:	42                   	inc    edx
c0000831:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000835:	75 f9                	jne    c0000830 <strncat+0x20>
c0000837:	01 ce                	add    esi,ecx
c0000839:	eb 0a                	jmp    c0000845 <strncat+0x35>
c000083b:	90                   	nop
c000083c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000840:	39 f1                	cmp    ecx,esi
c0000842:	74 1c                	je     c0000860 <strncat+0x50>
c0000844:	42                   	inc    edx
c0000845:	41                   	inc    ecx
c0000846:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c0000849:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000084c:	84 db                	test   bl,bl
c000084e:	75 f0                	jne    c0000840 <strncat+0x30>
c0000850:	5b                   	pop    ebx
c0000851:	5e                   	pop    esi
c0000852:	c3                   	ret    
c0000853:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000859:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000860:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0000863:	5b                   	pop    ebx
c0000864:	5e                   	pop    esi
c0000865:	c3                   	ret    
c0000866:	8d 76 00             	lea    esi,[esi+0x0]
c0000869:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000870 <strstr>:
c0000870:	57                   	push   edi
c0000871:	56                   	push   esi
c0000872:	53                   	push   ebx
c0000873:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000877:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000087b:	57                   	push   edi
c000087c:	e8 df fc ff ff       	call   c0000560 <strlen>
c0000881:	59                   	pop    ecx
c0000882:	85 c0                	test   eax,eax
c0000884:	74 3a                	je     c00008c0 <strstr+0x50>
c0000886:	89 c6                	mov    esi,eax
c0000888:	eb 16                	jmp    c00008a0 <strstr+0x30>
c000088a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000890:	56                   	push   esi
c0000891:	57                   	push   edi
c0000892:	53                   	push   ebx
c0000893:	e8 18 fb ff ff       	call   c00003b0 <memcmp>
c0000898:	83 c4 0c             	add    esp,0xc
c000089b:	85 c0                	test   eax,eax
c000089d:	74 21                	je     c00008c0 <strstr+0x50>
c000089f:	43                   	inc    ebx
c00008a0:	53                   	push   ebx
c00008a1:	e8 ba fc ff ff       	call   c0000560 <strlen>
c00008a6:	5a                   	pop    edx
c00008a7:	39 f0                	cmp    eax,esi
c00008a9:	73 e5                	jae    c0000890 <strstr+0x20>
c00008ab:	5b                   	pop    ebx
c00008ac:	31 c0                	xor    eax,eax
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	c3                   	ret    
c00008b1:	eb 0d                	jmp    c00008c0 <strstr+0x50>
c00008b3:	90                   	nop
c00008b4:	90                   	nop
c00008b5:	90                   	nop
c00008b6:	90                   	nop
c00008b7:	90                   	nop
c00008b8:	90                   	nop
c00008b9:	90                   	nop
c00008ba:	90                   	nop
c00008bb:	90                   	nop
c00008bc:	90                   	nop
c00008bd:	90                   	nop
c00008be:	90                   	nop
c00008bf:	90                   	nop
c00008c0:	89 d8                	mov    eax,ebx
c00008c2:	5b                   	pop    ebx
c00008c3:	5e                   	pop    esi
c00008c4:	5f                   	pop    edi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <toupper>:
c00008d0:	31 d2                	xor    edx,edx
c00008d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008d6:	88 c2                	mov    dl,al
c00008d8:	f6 82 80 c8 01 c0 02 	test   BYTE PTR [edx-0x3ffe3780],0x2
c00008df:	74 03                	je     c00008e4 <toupper+0x14>
c00008e1:	83 e8 20             	sub    eax,0x20
c00008e4:	c3                   	ret    
c00008e5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00008e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008f0 <tolower>:
c00008f0:	31 d2                	xor    edx,edx
c00008f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f6:	88 c2                	mov    dl,al
c00008f8:	f6 82 80 c8 01 c0 01 	test   BYTE PTR [edx-0x3ffe3780],0x1
c00008ff:	74 03                	je     c0000904 <tolower+0x14>
c0000901:	83 c0 20             	add    eax,0x20
c0000904:	c3                   	ret    
c0000905:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000909:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000910 <simple_strtoul>:
c0000910:	55                   	push   ebp
c0000911:	57                   	push   edi
c0000912:	56                   	push   esi
c0000913:	53                   	push   ebx
c0000914:	83 ec 08             	sub    esp,0x8
c0000917:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000091b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000091f:	90                   	nop
c0000920:	31 d2                	xor    edx,edx
c0000922:	8a 01                	mov    al,BYTE PTR [ecx]
c0000924:	88 c2                	mov    dl,al
c0000926:	f6 82 80 c8 01 c0 08 	test   BYTE PTR [edx-0x3ffe3780],0x8
c000092d:	75 04                	jne    c0000933 <simple_strtoul+0x23>
c000092f:	3c 09                	cmp    al,0x9
c0000931:	75 0d                	jne    c0000940 <simple_strtoul+0x30>
c0000933:	41                   	inc    ecx
c0000934:	eb ea                	jmp    c0000920 <simple_strtoul+0x10>
c0000936:	8d 76 00             	lea    esi,[esi+0x0]
c0000939:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000940:	3c 2d                	cmp    al,0x2d
c0000942:	0f 84 48 01 00 00    	je     c0000a90 <simple_strtoul+0x180>
c0000948:	3c 2b                	cmp    al,0x2b
c000094a:	0f 84 e0 00 00 00    	je     c0000a30 <simple_strtoul+0x120>
c0000950:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000958:	85 f6                	test   esi,esi
c000095a:	0f 85 e1 00 00 00    	jne    c0000a41 <simple_strtoul+0x131>
c0000960:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000963:	80 fa 30             	cmp    dl,0x30
c0000966:	0f 84 75 01 00 00    	je     c0000ae1 <simple_strtoul+0x1d1>
c000096c:	be 0a 00 00 00       	mov    esi,0xa
c0000971:	84 d2                	test   dl,dl
c0000973:	0f 84 9f 01 00 00    	je     c0000b18 <simple_strtoul+0x208>
c0000979:	31 ed                	xor    ebp,ebp
c000097b:	31 ff                	xor    edi,edi
c000097d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000984:	eb 35                	jmp    c00009bb <simple_strtoul+0xab>
c0000986:	8d 76 00             	lea    esi,[esi+0x0]
c0000989:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000990:	83 eb 30             	sub    ebx,0x30
c0000993:	39 f3                	cmp    ebx,esi
c0000995:	73 59                	jae    c00009f0 <simple_strtoul+0xe0>
c0000997:	31 d2                	xor    edx,edx
c0000999:	89 d8                	mov    eax,ebx
c000099b:	f7 d0                	not    eax
c000099d:	f7 f6                	div    esi
c000099f:	39 f8                	cmp    eax,edi
c00009a1:	0f 82 c9 00 00 00    	jb     c0000a70 <simple_strtoul+0x160>
c00009a7:	0f af fe             	imul   edi,esi
c00009aa:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00009b1:	01 df                	add    edi,ebx
c00009b3:	41                   	inc    ecx
c00009b4:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c00009b7:	84 d2                	test   dl,dl
c00009b9:	74 35                	je     c00009f0 <simple_strtoul+0xe0>
c00009bb:	31 db                	xor    ebx,ebx
c00009bd:	88 d3                	mov    bl,dl
c00009bf:	f6 83 80 c8 01 c0 04 	test   BYTE PTR [ebx-0x3ffe3780],0x4
c00009c6:	75 c8                	jne    c0000990 <simple_strtoul+0x80>
c00009c8:	52                   	push   edx
c00009c9:	e8 02 ff ff ff       	call   c00008d0 <toupper>
c00009ce:	31 d2                	xor    edx,edx
c00009d0:	5b                   	pop    ebx
c00009d1:	88 c2                	mov    dl,al
c00009d3:	f6 82 80 c8 01 c0 01 	test   BYTE PTR [edx-0x3ffe3780],0x1
c00009da:	74 14                	je     c00009f0 <simple_strtoul+0xe0>
c00009dc:	8d 58 c9             	lea    ebx,[eax-0x37]
c00009df:	39 f3                	cmp    ebx,esi
c00009e1:	72 b4                	jb     c0000997 <simple_strtoul+0x87>
c00009e3:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00009e9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00009f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00009f4:	85 c0                	test   eax,eax
c00009f6:	74 18                	je     c0000a10 <simple_strtoul+0x100>
c00009f8:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00009fb:	09 f8                	or     eax,edi
c00009fd:	0f 85 7d 00 00 00    	jne    c0000a80 <simple_strtoul+0x170>
c0000a03:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a07:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a0b:	31 ff                	xor    edi,edi
c0000a0d:	89 30                	mov    DWORD PTR [eax],esi
c0000a0f:	90                   	nop
c0000a10:	4d                   	dec    ebp
c0000a11:	75 05                	jne    c0000a18 <simple_strtoul+0x108>
c0000a13:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a18:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a1d:	75 02                	jne    c0000a21 <simple_strtoul+0x111>
c0000a1f:	f7 df                	neg    edi
c0000a21:	83 c4 08             	add    esp,0x8
c0000a24:	89 f8                	mov    eax,edi
c0000a26:	5b                   	pop    ebx
c0000a27:	5e                   	pop    esi
c0000a28:	5f                   	pop    edi
c0000a29:	5d                   	pop    ebp
c0000a2a:	c3                   	ret    
c0000a2b:	90                   	nop
c0000a2c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a30:	41                   	inc    ecx
c0000a31:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a39:	85 f6                	test   esi,esi
c0000a3b:	0f 84 1f ff ff ff    	je     c0000960 <simple_strtoul+0x50>
c0000a41:	8d 46 fe             	lea    eax,[esi-0x2]
c0000a44:	83 f8 22             	cmp    eax,0x22
c0000a47:	77 7b                	ja     c0000ac4 <simple_strtoul+0x1b4>
c0000a49:	0f be 11             	movsx  edx,BYTE PTR [ecx]
c0000a4c:	83 fe 08             	cmp    esi,0x8
c0000a4f:	0f 84 b3 00 00 00    	je     c0000b08 <simple_strtoul+0x1f8>
c0000a55:	83 fe 10             	cmp    esi,0x10
c0000a58:	0f 85 13 ff ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000a5e:	80 fa 30             	cmp    dl,0x30
c0000a61:	74 3b                	je     c0000a9e <simple_strtoul+0x18e>
c0000a63:	be 10 00 00 00       	mov    esi,0x10
c0000a68:	e9 04 ff ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000a6d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a70:	bd 01 00 00 00       	mov    ebp,0x1
c0000a75:	31 ff                	xor    edi,edi
c0000a77:	e9 37 ff ff ff       	jmp    c00009b3 <simple_strtoul+0xa3>
c0000a7c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a80:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a84:	89 08                	mov    DWORD PTR [eax],ecx
c0000a86:	eb 88                	jmp    c0000a10 <simple_strtoul+0x100>
c0000a88:	90                   	nop
c0000a89:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000a90:	41                   	inc    ecx
c0000a91:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000a99:	e9 ba fe ff ff       	jmp    c0000958 <simple_strtoul+0x48>
c0000a9e:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000aa2:	88 04 24             	mov    BYTE PTR [esp],al
c0000aa5:	50                   	push   eax
c0000aa6:	e8 45 fe ff ff       	call   c00008f0 <tolower>
c0000aab:	5e                   	pop    esi
c0000aac:	83 f8 78             	cmp    eax,0x78
c0000aaf:	0f 84 88 00 00 00    	je     c0000b3d <simple_strtoul+0x22d>
c0000ab5:	41                   	inc    ecx
c0000ab6:	be 10 00 00 00       	mov    esi,0x10
c0000abb:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000abf:	e9 ad fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000ac4:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000ac8:	85 ff                	test   edi,edi
c0000aca:	74 5e                	je     c0000b2a <simple_strtoul+0x21a>
c0000acc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000ad0:	85 c9                	test   ecx,ecx
c0000ad2:	75 50                	jne    c0000b24 <simple_strtoul+0x214>
c0000ad4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000ada:	31 ff                	xor    edi,edi
c0000adc:	e9 37 ff ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000ae1:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000ae5:	88 04 24             	mov    BYTE PTR [esp],al
c0000ae8:	50                   	push   eax
c0000ae9:	e8 02 fe ff ff       	call   c00008f0 <tolower>
c0000aee:	5d                   	pop    ebp
c0000aef:	83 f8 78             	cmp    eax,0x78
c0000af2:	74 3d                	je     c0000b31 <simple_strtoul+0x221>
c0000af4:	41                   	inc    ecx
c0000af5:	0f be 14 24          	movsx  edx,BYTE PTR [esp]
c0000af9:	80 fa 30             	cmp    dl,0x30
c0000afc:	74 13                	je     c0000b11 <simple_strtoul+0x201>
c0000afe:	be 08 00 00 00       	mov    esi,0x8
c0000b03:	e9 69 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>
c0000b08:	80 fa 30             	cmp    dl,0x30
c0000b0b:	0f 85 60 fe ff ff    	jne    c0000971 <simple_strtoul+0x61>
c0000b11:	0f be 51 01          	movsx  edx,BYTE PTR [ecx+0x1]
c0000b15:	41                   	inc    ecx
c0000b16:	eb e6                	jmp    c0000afe <simple_strtoul+0x1ee>
c0000b18:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000b1c:	85 d2                	test   edx,edx
c0000b1e:	74 0a                	je     c0000b2a <simple_strtoul+0x21a>
c0000b20:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b24:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b28:	89 30                	mov    DWORD PTR [eax],esi
c0000b2a:	31 ff                	xor    edi,edi
c0000b2c:	e9 e7 fe ff ff       	jmp    c0000a18 <simple_strtoul+0x108>
c0000b31:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b35:	83 c1 02             	add    ecx,0x2
c0000b38:	e9 21 ff ff ff       	jmp    c0000a5e <simple_strtoul+0x14e>
c0000b3d:	0f be 51 02          	movsx  edx,BYTE PTR [ecx+0x2]
c0000b41:	be 10 00 00 00       	mov    esi,0x10
c0000b46:	83 c1 02             	add    ecx,0x2
c0000b49:	e9 23 fe ff ff       	jmp    c0000971 <simple_strtoul+0x61>

c0000b4e <largebin_index>:
c0000b4e:	89 c2                	mov    edx,eax
c0000b50:	c1 ea 08             	shr    edx,0x8
c0000b53:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000b59:	77 10                	ja     c0000b6b <largebin_index+0x1d>
c0000b5b:	0f bd d2             	bsr    edx,edx
c0000b5e:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000b61:	d3 e8                	shr    eax,cl
c0000b63:	83 e0 03             	and    eax,0x3
c0000b66:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000b6a:	c3                   	ret    
c0000b6b:	b8 5f 00 00 00       	mov    eax,0x5f
c0000b70:	c3                   	ret    

c0000b71 <malloc_init_state>:
c0000b71:	53                   	push   ebx
c0000b72:	8d 50 34             	lea    edx,[eax+0x34]
c0000b75:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000b7b:	89 d1                	mov    ecx,edx
c0000b7d:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000b80:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000b83:	83 c2 08             	add    edx,0x8
c0000b86:	39 da                	cmp    edx,ebx
c0000b88:	75 f3                	jne    c0000b7d <malloc_init_state+0xc>
c0000b8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0000b8c:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000b96:	83 e2 03             	and    edx,0x3
c0000b99:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ba3:	83 ca 48             	or     edx,0x48
c0000ba6:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000bb0:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000bba:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000bc1:	89 10                	mov    DWORD PTR [eax],edx
c0000bc3:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000bc6:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000bd0:	5b                   	pop    ebx
c0000bd1:	c3                   	ret    

c0000bd2 <malloc_consolidate>:
c0000bd2:	8b 10                	mov    edx,DWORD PTR [eax]
c0000bd4:	85 d2                	test   edx,edx
c0000bd6:	0f 84 d8 00 00 00    	je     c0000cb4 <malloc_consolidate+0xe2>
c0000bdc:	55                   	push   ebp
c0000bdd:	83 e2 fd             	and    edx,0xfffffffd
c0000be0:	57                   	push   edi
c0000be1:	89 c5                	mov    ebp,eax
c0000be3:	56                   	push   esi
c0000be4:	8d 78 34             	lea    edi,[eax+0x34]
c0000be7:	53                   	push   ebx
c0000be8:	83 ec 10             	sub    esp,0x10
c0000beb:	89 10                	mov    DWORD PTR [eax],edx
c0000bed:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000bf1:	c1 ea 03             	shr    edx,0x3
c0000bf4:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000bf8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000bfc:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000bff:	85 d2                	test   edx,edx
c0000c01:	0f 84 98 00 00 00    	je     c0000c9f <malloc_consolidate+0xcd>
c0000c07:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000c0e:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000c11:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000c18:	89 f9                	mov    ecx,edi
c0000c1a:	83 e1 fe             	and    ecx,0xfffffffe
c0000c1d:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000c20:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000c23:	83 e3 fc             	and    ebx,0xfffffffc
c0000c26:	83 e7 01             	and    edi,0x1
c0000c29:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000c2c:	75 14                	jne    c0000c42 <malloc_consolidate+0x70>
c0000c2e:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000c30:	29 fa                	sub    edx,edi
c0000c32:	01 f9                	add    ecx,edi
c0000c34:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000c37:	89 fb                	mov    ebx,edi
c0000c39:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000c3c:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000c3f:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000c42:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000c45:	74 40                	je     c0000c87 <malloc_consolidate+0xb5>
c0000c47:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000c4a:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000c4d:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000c51:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000c54:	83 e7 01             	and    edi,0x1
c0000c57:	75 0e                	jne    c0000c67 <malloc_consolidate+0x95>
c0000c59:	01 d9                	add    ecx,ebx
c0000c5b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000c5e:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000c61:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000c64:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000c67:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000c6a:	89 ce                	mov    esi,ecx
c0000c6c:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000c6f:	83 ce 01             	or     esi,0x1
c0000c72:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000c75:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000c78:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000c7b:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000c7f:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000c82:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000c85:	eb 0c                	jmp    c0000c93 <malloc_consolidate+0xc1>
c0000c87:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000c8a:	83 c9 01             	or     ecx,0x1
c0000c8d:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000c90:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000c93:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000c97:	85 d2                	test   edx,edx
c0000c99:	0f 85 6f ff ff ff    	jne    c0000c0e <malloc_consolidate+0x3c>
c0000c9f:	83 c5 04             	add    ebp,0x4
c0000ca2:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000ca6:	0f 85 50 ff ff ff    	jne    c0000bfc <malloc_consolidate+0x2a>
c0000cac:	83 c4 10             	add    esp,0x10
c0000caf:	5b                   	pop    ebx
c0000cb0:	5e                   	pop    esi
c0000cb1:	5f                   	pop    edi
c0000cb2:	5d                   	pop    ebp
c0000cb3:	c3                   	ret    
c0000cb4:	e9 b8 fe ff ff       	jmp    c0000b71 <malloc_init_state>

c0000cb9 <dlfree>:
c0000cb9:	57                   	push   edi
c0000cba:	56                   	push   esi
c0000cbb:	53                   	push   ebx
c0000cbc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000cc0:	85 db                	test   ebx,ebx
c0000cc2:	0f 84 e2 00 00 00    	je     c0000daa <dlfree+0xf1>
c0000cc8:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000ccb:	8b 0d 40 f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f540
c0000cd1:	89 f0                	mov    eax,esi
c0000cd3:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000cd6:	83 e0 fc             	and    eax,0xfffffffc
c0000cd9:	39 c1                	cmp    ecx,eax
c0000cdb:	72 24                	jb     c0000d01 <dlfree+0x48>
c0000cdd:	83 c9 03             	or     ecx,0x3
c0000ce0:	c1 e8 03             	shr    eax,0x3
c0000ce3:	89 0d 40 f5 01 c0    	mov    DWORD PTR ds:0xc001f540,ecx
c0000ce9:	83 e8 02             	sub    eax,0x2
c0000cec:	8b 0c 85 44 f5 01 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffe0abc]
c0000cf3:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000cf5:	89 14 85 44 f5 01 c0 	mov    DWORD PTR [eax*4-0x3ffe0abc],edx
c0000cfc:	e9 a9 00 00 00       	jmp    c0000daa <dlfree+0xf1>
c0000d01:	83 e6 02             	and    esi,0x2
c0000d04:	0f 85 a0 00 00 00    	jne    c0000daa <dlfree+0xf1>
c0000d0a:	83 c9 01             	or     ecx,0x1
c0000d0d:	8d 34 02             	lea    esi,[edx+eax*1]
c0000d10:	89 0d 40 f5 01 c0    	mov    DWORD PTR ds:0xc001f540,ecx
c0000d16:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000d19:	83 e1 fc             	and    ecx,0xfffffffc
c0000d1c:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000d20:	75 13                	jne    c0000d35 <dlfree+0x7c>
c0000d22:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000d25:	29 da                	sub    edx,ebx
c0000d27:	01 d8                	add    eax,ebx
c0000d29:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000d2f:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d32:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d35:	39 35 6c f5 01 c0    	cmp    DWORD PTR ds:0xc001f56c,esi
c0000d3b:	74 40                	je     c0000d7d <dlfree+0xc4>
c0000d3d:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000d41:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000d44:	80 e3 01             	and    bl,0x1
c0000d47:	75 0e                	jne    c0000d57 <dlfree+0x9e>
c0000d49:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000d4c:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000d4f:	01 c8                	add    eax,ecx
c0000d51:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000d54:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000d57:	8b 0d 7c f5 01 c0    	mov    ecx,DWORD PTR ds:0xc001f57c
c0000d5d:	c7 42 0c 74 f5 01 c0 	mov    DWORD PTR [edx+0xc],0xc001f574
c0000d64:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000d67:	89 15 7c f5 01 c0    	mov    DWORD PTR ds:0xc001f57c,edx
c0000d6d:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000d70:	89 c1                	mov    ecx,eax
c0000d72:	83 c9 01             	or     ecx,0x1
c0000d75:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d78:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000d7b:	eb 10                	jmp    c0000d8d <dlfree+0xd4>
c0000d7d:	01 c8                	add    eax,ecx
c0000d7f:	89 c1                	mov    ecx,eax
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 15 6c f5 01 c0    	mov    DWORD PTR ds:0xc001f56c,edx
c0000d8d:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000d92:	76 16                	jbe    c0000daa <dlfree+0xf1>
c0000d94:	f6 05 40 f5 01 c0 02 	test   BYTE PTR ds:0xc001f540,0x2
c0000d9b:	74 0d                	je     c0000daa <dlfree+0xf1>
c0000d9d:	5b                   	pop    ebx
c0000d9e:	b8 40 f5 01 c0       	mov    eax,0xc001f540
c0000da3:	5e                   	pop    esi
c0000da4:	5f                   	pop    edi
c0000da5:	e9 28 fe ff ff       	jmp    c0000bd2 <malloc_consolidate>
c0000daa:	5b                   	pop    ebx
c0000dab:	5e                   	pop    esi
c0000dac:	5f                   	pop    edi
c0000dad:	c3                   	ret    

c0000dae <sYSMALLOc>:
c0000dae:	55                   	push   ebp
c0000daf:	57                   	push   edi
c0000db0:	56                   	push   esi
c0000db1:	53                   	push   ebx
c0000db2:	89 d3                	mov    ebx,edx
c0000db4:	83 ec 2c             	sub    esp,0x2c
c0000db7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000dbb:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000dc1:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000dc4:	8d 42 ff             	lea    eax,[edx-0x1]
c0000dc7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000dcb:	74 1f                	je     c0000dec <sYSMALLOc+0x3e>
c0000dcd:	89 d8                	mov    eax,ebx
c0000dcf:	e8 fe fd ff ff       	call   c0000bd2 <malloc_consolidate>
c0000dd4:	83 ec 0c             	sub    esp,0xc
c0000dd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ddb:	83 e8 07             	sub    eax,0x7
c0000dde:	50                   	push   eax
c0000ddf:	e8 30 02 00 00       	call   c0001014 <dlmalloc>
c0000de4:	83 c4 10             	add    esp,0x10
c0000de7:	e9 20 02 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000dec:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000def:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000df5:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000df8:	83 e0 fc             	and    eax,0xfffffffc
c0000dfb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000dff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e03:	83 c0 10             	add    eax,0x10
c0000e06:	01 c1                	add    ecx,eax
c0000e08:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000e0c:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000e13:	74 04                	je     c0000e19 <sYSMALLOc+0x6b>
c0000e15:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000e19:	f7 da                	neg    edx
c0000e1b:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000e1f:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000e23:	21 d1                	and    ecx,edx
c0000e25:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000e29:	7f 07                	jg     c0000e32 <sYSMALLOc+0x84>
c0000e2b:	31 c0                	xor    eax,eax
c0000e2d:	e9 da 01 00 00       	jmp    c000100c <sYSMALLOc+0x25e>
c0000e32:	83 ec 0c             	sub    esp,0xc
c0000e35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000e39:	e8 32 6a 00 00       	call   c0007870 <sbrk>
c0000e3e:	83 c4 10             	add    esp,0x10
c0000e41:	89 c6                	mov    esi,eax
c0000e43:	83 f8 ff             	cmp    eax,0xffffffff
c0000e46:	74 e3                	je     c0000e2b <sYSMALLOc+0x7d>
c0000e48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000e4c:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000e50:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000e53:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000e59:	39 f1                	cmp    ecx,esi
c0000e5b:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000e61:	75 13                	jne    c0000e76 <sYSMALLOc+0xc8>
c0000e63:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000e67:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000e6b:	83 c8 01             	or     eax,0x1
c0000e6e:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000e71:	e9 3e 01 00 00       	jmp    c0000fb4 <sYSMALLOc+0x206>
c0000e76:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000e7c:	88 d0                	mov    al,dl
c0000e7e:	83 e0 01             	and    eax,0x1
c0000e81:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000e86:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000e8a:	0f 95 c0             	setne  al
c0000e8d:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000e91:	39 f1                	cmp    ecx,esi
c0000e93:	76 12                	jbe    c0000ea7 <sYSMALLOc+0xf9>
c0000e95:	84 c0                	test   al,al
c0000e97:	74 0e                	je     c0000ea7 <sYSMALLOc+0xf9>
c0000e99:	83 e2 fe             	and    edx,0xfffffffe
c0000e9c:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000ea2:	e9 83 00 00 00       	jmp    c0000f2a <sYSMALLOc+0x17c>
c0000ea7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000eac:	74 7c                	je     c0000f2a <sYSMALLOc+0x17c>
c0000eae:	84 c0                	test   al,al
c0000eb0:	74 0c                	je     c0000ebe <sYSMALLOc+0x110>
c0000eb2:	89 f0                	mov    eax,esi
c0000eb4:	29 c8                	sub    eax,ecx
c0000eb6:	01 e8                	add    eax,ebp
c0000eb8:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000ebe:	89 f2                	mov    edx,esi
c0000ec0:	83 e2 07             	and    edx,0x7
c0000ec3:	74 0c                	je     c0000ed1 <sYSMALLOc+0x123>
c0000ec5:	b8 08 00 00 00       	mov    eax,0x8
c0000eca:	29 d0                	sub    eax,edx
c0000ecc:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000ecf:	eb 04                	jmp    c0000ed5 <sYSMALLOc+0x127>
c0000ed1:	89 f5                	mov    ebp,esi
c0000ed3:	31 c0                	xor    eax,eax
c0000ed5:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000ed9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000edd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ee1:	01 c1                	add    ecx,eax
c0000ee3:	83 ec 0c             	sub    esp,0xc
c0000ee6:	01 f1                	add    ecx,esi
c0000ee8:	01 ca                	add    edx,ecx
c0000eea:	29 c8                	sub    eax,ecx
c0000eec:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ef0:	01 c2                	add    edx,eax
c0000ef2:	52                   	push   edx
c0000ef3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ef7:	e8 74 69 00 00       	call   c0007870 <sbrk>
c0000efc:	83 c4 10             	add    esp,0x10
c0000eff:	83 f8 ff             	cmp    eax,0xffffffff
c0000f02:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f06:	75 0f                	jne    c0000f17 <sYSMALLOc+0x169>
c0000f08:	83 ec 0c             	sub    esp,0xc
c0000f0b:	6a 00                	push   0x0
c0000f0d:	e8 5e 69 00 00       	call   c0007870 <sbrk>
c0000f12:	83 c4 10             	add    esp,0x10
c0000f15:	eb 30                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f17:	39 c6                	cmp    esi,eax
c0000f19:	76 33                	jbe    c0000f4e <sYSMALLOc+0x1a0>
c0000f1b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f1f:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000f26:	01 f0                	add    eax,esi
c0000f28:	eb 1d                	jmp    c0000f47 <sYSMALLOc+0x199>
c0000f2a:	83 ec 0c             	sub    esp,0xc
c0000f2d:	89 f5                	mov    ebp,esi
c0000f2f:	6a 00                	push   0x0
c0000f31:	e8 3a 69 00 00       	call   c0007870 <sbrk>
c0000f36:	89 c2                	mov    edx,eax
c0000f38:	29 f2                	sub    edx,esi
c0000f3a:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000f3e:	83 c4 10             	add    esp,0x10
c0000f41:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f47:	31 d2                	xor    edx,edx
c0000f49:	83 f8 ff             	cmp    eax,0xffffffff
c0000f4c:	74 66                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f4e:	29 e8                	sub    eax,ebp
c0000f50:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000f53:	01 d0                	add    eax,edx
c0000f55:	83 c8 01             	or     eax,0x1
c0000f58:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000f5b:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000f61:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f66:	74 4c                	je     c0000fb4 <sYSMALLOc+0x206>
c0000f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f6c:	83 e8 0c             	sub    eax,0xc
c0000f6f:	83 e0 f8             	and    eax,0xfffffff8
c0000f72:	89 c2                	mov    edx,eax
c0000f74:	83 ca 01             	or     edx,0x1
c0000f77:	83 f8 0f             	cmp    eax,0xf
c0000f7a:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0000f7d:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0000f85:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0000f8d:	76 25                	jbe    c0000fb4 <sYSMALLOc+0x206>
c0000f8f:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0000f95:	83 ec 0c             	sub    esp,0xc
c0000f98:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0000fa2:	83 c7 08             	add    edi,0x8
c0000fa5:	57                   	push   edi
c0000fa6:	e8 0e fd ff ff       	call   c0000cb9 <dlfree>
c0000fab:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0000fb1:	83 c4 10             	add    esp,0x10
c0000fb4:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0000fba:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0000fc0:	73 06                	jae    c0000fc8 <sYSMALLOc+0x21a>
c0000fc2:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c0000fc8:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0000fce:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c0000fd4:	73 06                	jae    c0000fdc <sYSMALLOc+0x22e>
c0000fd6:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0000fdc:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0000fdf:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0000fe2:	83 e2 fc             	and    edx,0xfffffffc
c0000fe5:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0000fe9:	0f 82 3c fe ff ff    	jb     c0000e2b <sYSMALLOc+0x7d>
c0000fef:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0000ff3:	8d 0c 38             	lea    ecx,[eax+edi*1]
c0000ff6:	29 fa                	sub    edx,edi
c0000ff8:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0000ffb:	83 ca 01             	or     edx,0x1
c0000ffe:	89 fb                	mov    ebx,edi
c0001000:	83 c0 08             	add    eax,0x8
c0001003:	83 cb 01             	or     ebx,0x1
c0001006:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001009:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000100c:	83 c4 2c             	add    esp,0x2c
c000100f:	5b                   	pop    ebx
c0001010:	5e                   	pop    esi
c0001011:	5f                   	pop    edi
c0001012:	5d                   	pop    ebp
c0001013:	c3                   	ret    

c0001014 <dlmalloc>:
c0001014:	55                   	push   ebp
c0001015:	57                   	push   edi
c0001016:	56                   	push   esi
c0001017:	53                   	push   ebx
c0001018:	83 ec 1c             	sub    esp,0x1c
c000101b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000101f:	83 f8 df             	cmp    eax,0xffffffdf
c0001022:	0f 87 70 03 00 00    	ja     c0001398 <dlmalloc+0x384>
c0001028:	83 c0 0b             	add    eax,0xb
c000102b:	be 10 00 00 00       	mov    esi,0x10
c0001030:	83 f8 0f             	cmp    eax,0xf
c0001033:	76 05                	jbe    c000103a <dlmalloc+0x26>
c0001035:	83 e0 f8             	and    eax,0xfffffff8
c0001038:	89 c6                	mov    esi,eax
c000103a:	8b 3d 40 f5 01 c0    	mov    edi,DWORD PTR ds:0xc001f540
c0001040:	f7 c7 01 00 00 00    	test   edi,0x1
c0001046:	75 17                	jne    c000105f <dlmalloc+0x4b>
c0001048:	85 ff                	test   edi,edi
c000104a:	0f 85 05 03 00 00    	jne    c0001355 <dlmalloc+0x341>
c0001050:	b8 40 f5 01 c0       	mov    eax,0xc001f540
c0001055:	e8 78 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c000105a:	e9 f6 02 00 00       	jmp    c0001355 <dlmalloc+0x341>
c000105f:	39 f7                	cmp    edi,esi
c0001061:	72 1f                	jb     c0001082 <dlmalloc+0x6e>
c0001063:	89 f2                	mov    edx,esi
c0001065:	c1 ea 03             	shr    edx,0x3
c0001068:	83 ea 02             	sub    edx,0x2
c000106b:	8b 04 95 44 f5 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0abc]
c0001072:	85 c0                	test   eax,eax
c0001074:	74 0c                	je     c0001082 <dlmalloc+0x6e>
c0001076:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001079:	89 0c 95 44 f5 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0abc],ecx
c0001080:	eb 30                	jmp    c00010b2 <dlmalloc+0x9e>
c0001082:	89 f0                	mov    eax,esi
c0001084:	81 fe ff 00 00 00    	cmp    esi,0xff
c000108a:	77 2e                	ja     c00010ba <dlmalloc+0xa6>
c000108c:	c1 e8 03             	shr    eax,0x3
c000108f:	8d 14 c5 74 f5 01 c0 	lea    edx,[eax*8-0x3ffe0a8c]
c0001096:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000109a:	8d 5a f8             	lea    ebx,[edx-0x8]
c000109d:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00010a0:	39 c3                	cmp    ebx,eax
c00010a2:	74 2e                	je     c00010d2 <dlmalloc+0xbe>
c00010a4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00010a7:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00010ac:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00010af:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00010b2:	83 c0 08             	add    eax,0x8
c00010b5:	e9 e0 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c00010ba:	e8 8f fa ff ff       	call   c0000b4e <largebin_index>
c00010bf:	83 e7 02             	and    edi,0x2
c00010c2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00010c6:	74 0a                	je     c00010d2 <dlmalloc+0xbe>
c00010c8:	b8 40 f5 01 c0       	mov    eax,0xc001f540
c00010cd:	e8 00 fb ff ff       	call   c0000bd2 <malloc_consolidate>
c00010d2:	8d 46 10             	lea    eax,[esi+0x10]
c00010d5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00010d9:	8b 1d 80 f5 01 c0    	mov    ebx,DWORD PTR ds:0xc001f580
c00010df:	81 fb 74 f5 01 c0    	cmp    ebx,0xc001f574
c00010e5:	0f 84 13 01 00 00    	je     c00011fe <dlmalloc+0x1ea>
c00010eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00010ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00010f1:	83 e7 fc             	and    edi,0xfffffffc
c00010f4:	81 fe ff 00 00 00    	cmp    esi,0xff
c00010fa:	77 4c                	ja     c0001148 <dlmalloc+0x134>
c00010fc:	3d 74 f5 01 c0       	cmp    eax,0xc001f574
c0001101:	75 45                	jne    c0001148 <dlmalloc+0x134>
c0001103:	39 1d 70 f5 01 c0    	cmp    DWORD PTR ds:0xc001f570,ebx
c0001109:	75 3d                	jne    c0001148 <dlmalloc+0x134>
c000110b:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000110f:	73 37                	jae    c0001148 <dlmalloc+0x134>
c0001111:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001114:	89 fa                	mov    edx,edi
c0001116:	a3 7c f5 01 c0       	mov    ds:0xc001f57c,eax
c000111b:	a3 80 f5 01 c0       	mov    ds:0xc001f580,eax
c0001120:	a3 70 f5 01 c0       	mov    ds:0xc001f570,eax
c0001125:	29 f2                	sub    edx,esi
c0001127:	c7 40 08 74 f5 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f574
c000112e:	c7 40 0c 74 f5 01 c0 	mov    DWORD PTR [eax+0xc],0xc001f574
c0001135:	83 ce 01             	or     esi,0x1
c0001138:	89 d1                	mov    ecx,edx
c000113a:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c000113d:	83 c9 01             	or     ecx,0x1
c0001140:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001143:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001146:	eb 15                	jmp    c000115d <dlmalloc+0x149>
c0001148:	a3 80 f5 01 c0       	mov    ds:0xc001f580,eax
c000114d:	39 fe                	cmp    esi,edi
c000114f:	c7 40 08 74 f5 01 c0 	mov    DWORD PTR [eax+0x8],0xc001f574
c0001156:	75 0d                	jne    c0001165 <dlmalloc+0x151>
c0001158:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c000115d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001160:	e9 35 02 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001165:	89 f8                	mov    eax,edi
c0001167:	81 ff ff 00 00 00    	cmp    edi,0xff
c000116d:	77 19                	ja     c0001188 <dlmalloc+0x174>
c000116f:	c1 e8 03             	shr    eax,0x3
c0001172:	8d 14 00             	lea    edx,[eax+eax*1]
c0001175:	83 c2 0d             	add    edx,0xd
c0001178:	8d 2c 95 38 f5 01 c0 	lea    ebp,[edx*4-0x3ffe0ac8]
c000117f:	8b 14 95 40 f5 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0ac0]
c0001186:	eb 46                	jmp    c00011ce <dlmalloc+0x1ba>
c0001188:	e8 c1 f9 ff ff       	call   c0000b4e <largebin_index>
c000118d:	8d 14 00             	lea    edx,[eax+eax*1]
c0001190:	83 c2 0d             	add    edx,0xd
c0001193:	8d 0c 95 40 f5 01 c0 	lea    ecx,[edx*4-0x3ffe0ac0]
c000119a:	8b 14 95 40 f5 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0ac0]
c00011a1:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00011a4:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00011a8:	89 d5                	mov    ebp,edx
c00011aa:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00011ae:	74 1e                	je     c00011ce <dlmalloc+0x1ba>
c00011b0:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00011b3:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00011b6:	77 12                	ja     c00011ca <dlmalloc+0x1b6>
c00011b8:	83 cf 01             	or     edi,0x1
c00011bb:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00011be:	76 05                	jbe    c00011c5 <dlmalloc+0x1b1>
c00011c0:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00011c3:	eb f6                	jmp    c00011bb <dlmalloc+0x1a7>
c00011c5:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00011c8:	eb 04                	jmp    c00011ce <dlmalloc+0x1ba>
c00011ca:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00011ce:	89 c7                	mov    edi,eax
c00011d0:	88 c1                	mov    cl,al
c00011d2:	c1 ff 05             	sar    edi,0x5
c00011d5:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00011d9:	bf 01 00 00 00       	mov    edi,0x1
c00011de:	d3 e7                	shl    edi,cl
c00011e0:	89 f8                	mov    eax,edi
c00011e2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00011e6:	09 04 bd 74 f8 01 c0 	or     DWORD PTR [edi*4-0x3ffe078c],eax
c00011ed:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00011f0:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00011f3:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00011f6:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00011f9:	e9 db fe ff ff       	jmp    c00010d9 <dlmalloc+0xc5>
c00011fe:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001204:	76 78                	jbe    c000127e <dlmalloc+0x26a>
c0001206:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000120a:	8d 04 c5 74 f5 01 c0 	lea    eax,[eax*8-0x3ffe0a8c]
c0001211:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001214:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001217:	39 ca                	cmp    edx,ecx
c0001219:	74 63                	je     c000127e <dlmalloc+0x26a>
c000121b:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c000121e:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001221:	83 e3 fc             	and    ebx,0xfffffffc
c0001224:	39 de                	cmp    esi,ebx
c0001226:	77 52                	ja     c000127a <dlmalloc+0x266>
c0001228:	89 df                	mov    edi,ebx
c000122a:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c000122d:	29 f7                	sub    edi,esi
c000122f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001232:	01 d3                	add    ebx,edx
c0001234:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c0001237:	83 ff 0f             	cmp    edi,0xf
c000123a:	8d 42 08             	lea    eax,[edx+0x8]
c000123d:	77 09                	ja     c0001248 <dlmalloc+0x234>
c000123f:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001243:	e9 52 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001248:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000124b:	83 ce 01             	or     esi,0x1
c000124e:	89 0d 7c f5 01 c0    	mov    DWORD PTR ds:0xc001f57c,ecx
c0001254:	89 0d 80 f5 01 c0    	mov    DWORD PTR ds:0xc001f580,ecx
c000125a:	c7 41 08 74 f5 01 c0 	mov    DWORD PTR [ecx+0x8],0xc001f574
c0001261:	c7 41 0c 74 f5 01 c0 	mov    DWORD PTR [ecx+0xc],0xc001f574
c0001268:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000126b:	89 fa                	mov    edx,edi
c000126d:	83 ca 01             	or     edx,0x1
c0001270:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001273:	89 3b                	mov    DWORD PTR [ebx],edi
c0001275:	e9 20 01 00 00       	jmp    c000139a <dlmalloc+0x386>
c000127a:	89 c2                	mov    edx,eax
c000127c:	eb 99                	jmp    c0001217 <dlmalloc+0x203>
c000127e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001282:	b8 01 00 00 00       	mov    eax,0x1
c0001287:	41                   	inc    ecx
c0001288:	89 cb                	mov    ebx,ecx
c000128a:	8d 14 cd 6c f5 01 c0 	lea    edx,[ecx*8-0x3ffe0a94]
c0001291:	c1 eb 05             	shr    ebx,0x5
c0001294:	d3 e0                	shl    eax,cl
c0001296:	8b 3c 9d 74 f8 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe078c]
c000129d:	39 f8                	cmp    eax,edi
c000129f:	77 04                	ja     c00012a5 <dlmalloc+0x291>
c00012a1:	85 c0                	test   eax,eax
c00012a3:	75 26                	jne    c00012cb <dlmalloc+0x2b7>
c00012a5:	43                   	inc    ebx
c00012a6:	83 fb 02             	cmp    ebx,0x2
c00012a9:	0f 87 a6 00 00 00    	ja     c0001355 <dlmalloc+0x341>
c00012af:	8b 3c 9d 74 f8 01 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffe078c]
c00012b6:	85 ff                	test   edi,edi
c00012b8:	74 eb                	je     c00012a5 <dlmalloc+0x291>
c00012ba:	89 d8                	mov    eax,ebx
c00012bc:	c1 e0 06             	shl    eax,0x6
c00012bf:	8d 14 85 6c f5 01 c0 	lea    edx,[eax*4-0x3ffe0a94]
c00012c6:	b8 01 00 00 00       	mov    eax,0x1
c00012cb:	85 f8                	test   eax,edi
c00012cd:	75 07                	jne    c00012d6 <dlmalloc+0x2c2>
c00012cf:	83 c2 08             	add    edx,0x8
c00012d2:	01 c0                	add    eax,eax
c00012d4:	eb f5                	jmp    c00012cb <dlmalloc+0x2b7>
c00012d6:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00012d9:	39 ca                	cmp    edx,ecx
c00012db:	75 14                	jne    c00012f1 <dlmalloc+0x2dd>
c00012dd:	89 c1                	mov    ecx,eax
c00012df:	83 c2 08             	add    edx,0x8
c00012e2:	f7 d1                	not    ecx
c00012e4:	01 c0                	add    eax,eax
c00012e6:	21 cf                	and    edi,ecx
c00012e8:	89 3c 9d 74 f8 01 c0 	mov    DWORD PTR [ebx*4-0x3ffe078c],edi
c00012ef:	eb ac                	jmp    c000129d <dlmalloc+0x289>
c00012f1:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00012f4:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00012f7:	83 e0 fc             	and    eax,0xfffffffc
c00012fa:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00012fd:	89 c3                	mov    ebx,eax
c00012ff:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001302:	29 f3                	sub    ebx,esi
c0001304:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001307:	83 fb 0f             	cmp    ebx,0xf
c000130a:	8d 41 08             	lea    eax,[ecx+0x8]
c000130d:	77 09                	ja     c0001318 <dlmalloc+0x304>
c000130f:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001313:	e9 82 00 00 00       	jmp    c000139a <dlmalloc+0x386>
c0001318:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000131b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001321:	89 3d 7c f5 01 c0    	mov    DWORD PTR ds:0xc001f57c,edi
c0001327:	89 3d 80 f5 01 c0    	mov    DWORD PTR ds:0xc001f580,edi
c000132d:	c7 47 08 74 f5 01 c0 	mov    DWORD PTR [edi+0x8],0xc001f574
c0001334:	c7 47 0c 74 f5 01 c0 	mov    DWORD PTR [edi+0xc],0xc001f574
c000133b:	77 06                	ja     c0001343 <dlmalloc+0x32f>
c000133d:	89 3d 70 f5 01 c0    	mov    DWORD PTR ds:0xc001f570,edi
c0001343:	83 ce 01             	or     esi,0x1
c0001346:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001349:	89 d9                	mov    ecx,ebx
c000134b:	83 c9 01             	or     ecx,0x1
c000134e:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001351:	89 1a                	mov    DWORD PTR [edx],ebx
c0001353:	eb 45                	jmp    c000139a <dlmalloc+0x386>
c0001355:	a1 6c f5 01 c0       	mov    eax,ds:0xc001f56c
c000135a:	8d 4e 10             	lea    ecx,[esi+0x10]
c000135d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001360:	83 e2 fc             	and    edx,0xfffffffc
c0001363:	39 d1                	cmp    ecx,edx
c0001365:	77 1e                	ja     c0001385 <dlmalloc+0x371>
c0001367:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000136a:	89 f3                	mov    ebx,esi
c000136c:	89 0d 6c f5 01 c0    	mov    DWORD PTR ds:0xc001f56c,ecx
c0001372:	83 cb 01             	or     ebx,0x1
c0001375:	29 f2                	sub    edx,esi
c0001377:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000137a:	83 ca 01             	or     edx,0x1
c000137d:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001380:	e9 2d fd ff ff       	jmp    c00010b2 <dlmalloc+0x9e>
c0001385:	83 c4 1c             	add    esp,0x1c
c0001388:	89 f0                	mov    eax,esi
c000138a:	5b                   	pop    ebx
c000138b:	ba 40 f5 01 c0       	mov    edx,0xc001f540
c0001390:	5e                   	pop    esi
c0001391:	5f                   	pop    edi
c0001392:	5d                   	pop    ebp
c0001393:	e9 16 fa ff ff       	jmp    c0000dae <sYSMALLOc>
c0001398:	31 c0                	xor    eax,eax
c000139a:	83 c4 1c             	add    esp,0x1c
c000139d:	5b                   	pop    ebx
c000139e:	5e                   	pop    esi
c000139f:	5f                   	pop    edi
c00013a0:	5d                   	pop    ebp
c00013a1:	c3                   	ret    

c00013a2 <iALLOc>:
c00013a2:	55                   	push   ebp
c00013a3:	89 c5                	mov    ebp,eax
c00013a5:	57                   	push   edi
c00013a6:	56                   	push   esi
c00013a7:	53                   	push   ebx
c00013a8:	83 ec 2c             	sub    esp,0x2c
c00013ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00013af:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00013b3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00013b7:	83 3d 40 f5 01 c0 00 	cmp    DWORD PTR ds:0xc001f540,0x0
c00013be:	75 12                	jne    c00013d2 <iALLOc+0x30>
c00013c0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00013c4:	b8 40 f5 01 c0       	mov    eax,0xc001f540
c00013c9:	e8 04 f8 ff ff       	call   c0000bd2 <malloc_consolidate>
c00013ce:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00013d2:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00013d7:	74 12                	je     c00013eb <iALLOc+0x49>
c00013d9:	85 ed                	test   ebp,ebp
c00013db:	0f 84 64 01 00 00    	je     c0001545 <iALLOc+0x1a3>
c00013e1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00013e9:	eb 33                	jmp    c000141e <iALLOc+0x7c>
c00013eb:	85 ed                	test   ebp,ebp
c00013ed:	75 14                	jne    c0001403 <iALLOc+0x61>
c00013ef:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00013f7:	83 c4 2c             	add    esp,0x2c
c00013fa:	5b                   	pop    ebx
c00013fb:	5e                   	pop    esi
c00013fc:	5f                   	pop    edi
c00013fd:	5d                   	pop    ebp
c00013fe:	e9 11 fc ff ff       	jmp    c0001014 <dlmalloc>
c0001403:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000140a:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001412:	83 f8 0f             	cmp    eax,0xf
c0001415:	76 07                	jbe    c000141e <iALLOc+0x7c>
c0001417:	83 e0 f8             	and    eax,0xfffffff8
c000141a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000141e:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001423:	75 09                	jne    c000142e <iALLOc+0x8c>
c0001425:	89 d0                	mov    eax,edx
c0001427:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000142a:	31 f6                	xor    esi,esi
c000142c:	eb 3b                	jmp    c0001469 <iALLOc+0xc7>
c000142e:	8b 02                	mov    eax,DWORD PTR [edx]
c0001430:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c0001438:	83 c0 0b             	add    eax,0xb
c000143b:	83 f8 0f             	cmp    eax,0xf
c000143e:	76 07                	jbe    c0001447 <iALLOc+0xa5>
c0001440:	83 e0 f8             	and    eax,0xfffffff8
c0001443:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0001447:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000144b:	0f af f5             	imul   esi,ebp
c000144e:	eb 25                	jmp    c0001475 <iALLOc+0xd3>
c0001450:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001452:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001455:	bb 10 00 00 00       	mov    ebx,0x10
c000145a:	83 f9 0f             	cmp    ecx,0xf
c000145d:	76 05                	jbe    c0001464 <iALLOc+0xc2>
c000145f:	83 e1 f8             	and    ecx,0xfffffff8
c0001462:	89 cb                	mov    ebx,ecx
c0001464:	01 de                	add    esi,ebx
c0001466:	83 c0 04             	add    eax,0x4
c0001469:	39 c7                	cmp    edi,eax
c000146b:	75 e3                	jne    c0001450 <iALLOc+0xae>
c000146d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001475:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001479:	8b 1d 94 f8 01 c0    	mov    ebx,DWORD PTR ds:0xc001f894
c000147f:	83 ec 0c             	sub    esp,0xc
c0001482:	c7 05 94 f8 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f894,0x0
c000148c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001490:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001494:	50                   	push   eax
c0001495:	e8 7a fb ff ff       	call   c0001014 <dlmalloc>
c000149a:	83 c4 10             	add    esp,0x10
c000149d:	89 1d 94 f8 01 c0    	mov    DWORD PTR ds:0xc001f894,ebx
c00014a3:	85 c0                	test   eax,eax
c00014a5:	0f 84 92 00 00 00    	je     c000153d <iALLOc+0x19b>
c00014ab:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00014ae:	8d 78 f8             	lea    edi,[eax-0x8]
c00014b1:	83 e3 fc             	and    ebx,0xfffffffc
c00014b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00014b8:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00014bd:	74 1e                	je     c00014dd <iALLOc+0x13b>
c00014bf:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00014c3:	89 d9                	mov    ecx,ebx
c00014c5:	52                   	push   edx
c00014c6:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00014ca:	83 e9 04             	sub    ecx,0x4
c00014cd:	51                   	push   ecx
c00014ce:	6a 00                	push   0x0
c00014d0:	50                   	push   eax
c00014d1:	e8 1a f0 ff ff       	call   c00004f0 <memset>
c00014d6:	83 c4 10             	add    esp,0x10
c00014d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00014dd:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014e2:	75 14                	jne    c00014f8 <iALLOc+0x156>
c00014e4:	8d 04 37             	lea    eax,[edi+esi*1]
c00014e7:	29 f3                	sub    ebx,esi
c00014e9:	8d 48 08             	lea    ecx,[eax+0x8]
c00014ec:	83 cb 01             	or     ebx,0x1
c00014ef:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00014f3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00014f6:	89 f3                	mov    ebx,esi
c00014f8:	31 c0                	xor    eax,eax
c00014fa:	4d                   	dec    ebp
c00014fb:	8d 4f 08             	lea    ecx,[edi+0x8]
c00014fe:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001502:	39 c5                	cmp    ebp,eax
c0001504:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c0001507:	74 2c                	je     c0001535 <iALLOc+0x193>
c0001509:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000150d:	85 c9                	test   ecx,ecx
c000150f:	75 15                	jne    c0001526 <iALLOc+0x184>
c0001511:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001514:	8d 71 0b             	lea    esi,[ecx+0xb]
c0001517:	b9 10 00 00 00       	mov    ecx,0x10
c000151c:	83 fe 0f             	cmp    esi,0xf
c000151f:	76 05                	jbe    c0001526 <iALLOc+0x184>
c0001521:	83 e6 f8             	and    esi,0xfffffff8
c0001524:	89 f1                	mov    ecx,esi
c0001526:	89 ce                	mov    esi,ecx
c0001528:	29 cb                	sub    ebx,ecx
c000152a:	83 ce 01             	or     esi,0x1
c000152d:	40                   	inc    eax
c000152e:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001531:	01 cf                	add    edi,ecx
c0001533:	eb c6                	jmp    c00014fb <iALLOc+0x159>
c0001535:	83 cb 01             	or     ebx,0x1
c0001538:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000153b:	eb 08                	jmp    c0001545 <iALLOc+0x1a3>
c000153d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001545:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001549:	83 c4 2c             	add    esp,0x2c
c000154c:	5b                   	pop    ebx
c000154d:	5e                   	pop    esi
c000154e:	5f                   	pop    edi
c000154f:	5d                   	pop    ebp
c0001550:	c3                   	ret    

c0001551 <dlrealloc>:
c0001551:	55                   	push   ebp
c0001552:	57                   	push   edi
c0001553:	56                   	push   esi
c0001554:	53                   	push   ebx
c0001555:	83 ec 1c             	sub    esp,0x1c
c0001558:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000155c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001560:	85 db                	test   ebx,ebx
c0001562:	75 10                	jne    c0001574 <dlrealloc+0x23>
c0001564:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0001568:	83 c4 1c             	add    esp,0x1c
c000156b:	5b                   	pop    ebx
c000156c:	5e                   	pop    esi
c000156d:	5f                   	pop    edi
c000156e:	5d                   	pop    ebp
c000156f:	e9 a0 fa ff ff       	jmp    c0001014 <dlmalloc>
c0001574:	83 f8 df             	cmp    eax,0xffffffdf
c0001577:	76 07                	jbe    c0001580 <dlrealloc+0x2f>
c0001579:	31 db                	xor    ebx,ebx
c000157b:	e9 6a 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c0001580:	83 c0 0b             	add    eax,0xb
c0001583:	bd 10 00 00 00       	mov    ebp,0x10
c0001588:	83 f8 0f             	cmp    eax,0xf
c000158b:	76 05                	jbe    c0001592 <dlrealloc+0x41>
c000158d:	83 e0 f8             	and    eax,0xfffffff8
c0001590:	89 c5                	mov    ebp,eax
c0001592:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001595:	8d 7b f8             	lea    edi,[ebx-0x8]
c0001598:	89 c6                	mov    esi,eax
c000159a:	83 e6 fc             	and    esi,0xfffffffc
c000159d:	a8 02                	test   al,0x2
c000159f:	75 d8                	jne    c0001579 <dlrealloc+0x28>
c00015a1:	39 f5                	cmp    ebp,esi
c00015a3:	0f 86 04 01 00 00    	jbe    c00016ad <dlrealloc+0x15c>
c00015a9:	8d 14 37             	lea    edx,[edi+esi*1]
c00015ac:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00015af:	39 15 6c f5 01 c0    	cmp    DWORD PTR ds:0xc001f56c,edx
c00015b5:	75 33                	jne    c00015ea <dlrealloc+0x99>
c00015b7:	83 e1 fc             	and    ecx,0xfffffffc
c00015ba:	01 f1                	add    ecx,esi
c00015bc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015c0:	8d 4d 10             	lea    ecx,[ebp+0x10]
c00015c3:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00015c7:	77 49                	ja     c0001612 <dlrealloc+0xc1>
c00015c9:	01 ef                	add    edi,ebp
c00015cb:	83 e0 01             	and    eax,0x1
c00015ce:	09 e8                	or     eax,ebp
c00015d0:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00015d3:	89 3d 6c f5 01 c0    	mov    DWORD PTR ds:0xc001f56c,edi
c00015d9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015dd:	29 e8                	sub    eax,ebp
c00015df:	83 c8 01             	or     eax,0x1
c00015e2:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c00015e5:	e9 00 01 00 00       	jmp    c00016ea <dlrealloc+0x199>
c00015ea:	89 c8                	mov    eax,ecx
c00015ec:	83 e0 fe             	and    eax,0xfffffffe
c00015ef:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00015f4:	75 1c                	jne    c0001612 <dlrealloc+0xc1>
c00015f6:	83 e1 fc             	and    ecx,0xfffffffc
c00015f9:	01 f1                	add    ecx,esi
c00015fb:	39 cd                	cmp    ebp,ecx
c00015fd:	77 13                	ja     c0001612 <dlrealloc+0xc1>
c00015ff:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001602:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001605:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c0001608:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000160b:	89 ce                	mov    esi,ecx
c000160d:	e9 9b 00 00 00       	jmp    c00016ad <dlrealloc+0x15c>
c0001612:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0001616:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001619:	83 ec 0c             	sub    esp,0xc
c000161c:	50                   	push   eax
c000161d:	e8 f2 f9 ff ff       	call   c0001014 <dlmalloc>
c0001622:	83 c4 10             	add    esp,0x10
c0001625:	85 c0                	test   eax,eax
c0001627:	0f 84 4c ff ff ff    	je     c0001579 <dlrealloc+0x28>
c000162d:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001634:	39 ca                	cmp    edx,ecx
c0001636:	75 0a                	jne    c0001642 <dlrealloc+0xf1>
c0001638:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c000163b:	83 e0 fc             	and    eax,0xfffffffc
c000163e:	01 c6                	add    esi,eax
c0001640:	eb 6b                	jmp    c00016ad <dlrealloc+0x15c>
c0001642:	8d 4e fc             	lea    ecx,[esi-0x4]
c0001645:	83 f9 27             	cmp    ecx,0x27
c0001648:	76 08                	jbe    c0001652 <dlrealloc+0x101>
c000164a:	89 de                	mov    esi,ebx
c000164c:	89 c7                	mov    edi,eax
c000164e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001650:	eb 43                	jmp    c0001695 <dlrealloc+0x144>
c0001652:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001654:	83 f9 13             	cmp    ecx,0x13
c0001657:	89 10                	mov    DWORD PTR [eax],edx
c0001659:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000165c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000165f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0001662:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0001665:	76 2e                	jbe    c0001695 <dlrealloc+0x144>
c0001667:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000166a:	83 f9 1b             	cmp    ecx,0x1b
c000166d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001670:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0001673:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0001676:	76 1d                	jbe    c0001695 <dlrealloc+0x144>
c0001678:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000167b:	83 f9 23             	cmp    ecx,0x23
c000167e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001681:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0001684:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0001687:	76 0c                	jbe    c0001695 <dlrealloc+0x144>
c0001689:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000168c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000168f:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001692:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0001695:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001699:	83 ec 0c             	sub    esp,0xc
c000169c:	53                   	push   ebx
c000169d:	e8 17 f6 ff ff       	call   c0000cb9 <dlfree>
c00016a2:	83 c4 10             	add    esp,0x10
c00016a5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016a9:	89 c3                	mov    ebx,eax
c00016ab:	eb 3d                	jmp    c00016ea <dlrealloc+0x199>
c00016ad:	89 f2                	mov    edx,esi
c00016af:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00016b2:	29 ea                	sub    edx,ebp
c00016b4:	83 e1 01             	and    ecx,0x1
c00016b7:	8d 04 37             	lea    eax,[edi+esi*1]
c00016ba:	83 fa 0f             	cmp    edx,0xf
c00016bd:	77 0b                	ja     c00016ca <dlrealloc+0x179>
c00016bf:	09 ce                	or     esi,ecx
c00016c1:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00016c4:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016c8:	eb 20                	jmp    c00016ea <dlrealloc+0x199>
c00016ca:	01 ef                	add    edi,ebp
c00016cc:	83 ec 0c             	sub    esp,0xc
c00016cf:	09 cd                	or     ebp,ecx
c00016d1:	83 ca 01             	or     edx,0x1
c00016d4:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c00016d7:	83 c7 08             	add    edi,0x8
c00016da:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c00016dd:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00016e1:	57                   	push   edi
c00016e2:	e8 d2 f5 ff ff       	call   c0000cb9 <dlfree>
c00016e7:	83 c4 10             	add    esp,0x10
c00016ea:	83 c4 1c             	add    esp,0x1c
c00016ed:	89 d8                	mov    eax,ebx
c00016ef:	5b                   	pop    ebx
c00016f0:	5e                   	pop    esi
c00016f1:	5f                   	pop    edi
c00016f2:	5d                   	pop    ebp
c00016f3:	c3                   	ret    

c00016f4 <dlmemalign>:
c00016f4:	55                   	push   ebp
c00016f5:	57                   	push   edi
c00016f6:	56                   	push   esi
c00016f7:	53                   	push   ebx
c00016f8:	83 ec 0c             	sub    esp,0xc
c00016fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00016ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001703:	83 fa 08             	cmp    edx,0x8
c0001706:	77 10                	ja     c0001718 <dlmemalign+0x24>
c0001708:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000170c:	83 c4 0c             	add    esp,0xc
c000170f:	5b                   	pop    ebx
c0001710:	5e                   	pop    esi
c0001711:	5f                   	pop    edi
c0001712:	5d                   	pop    ebp
c0001713:	e9 fc f8 ff ff       	jmp    c0001014 <dlmalloc>
c0001718:	bf 10 00 00 00       	mov    edi,0x10
c000171d:	83 fa 0f             	cmp    edx,0xf
c0001720:	76 13                	jbe    c0001735 <dlmemalign+0x41>
c0001722:	8d 4a ff             	lea    ecx,[edx-0x1]
c0001725:	85 d1                	test   ecx,edx
c0001727:	75 04                	jne    c000172d <dlmemalign+0x39>
c0001729:	89 d7                	mov    edi,edx
c000172b:	eb 08                	jmp    c0001735 <dlmemalign+0x41>
c000172d:	39 d7                	cmp    edi,edx
c000172f:	73 04                	jae    c0001735 <dlmemalign+0x41>
c0001731:	01 ff                	add    edi,edi
c0001733:	eb f8                	jmp    c000172d <dlmemalign+0x39>
c0001735:	83 f8 df             	cmp    eax,0xffffffdf
c0001738:	76 07                	jbe    c0001741 <dlmemalign+0x4d>
c000173a:	31 c0                	xor    eax,eax
c000173c:	e9 ce 00 00 00       	jmp    c000180f <dlmemalign+0x11b>
c0001741:	83 c0 0b             	add    eax,0xb
c0001744:	bd 10 00 00 00       	mov    ebp,0x10
c0001749:	83 f8 0f             	cmp    eax,0xf
c000174c:	76 05                	jbe    c0001753 <dlmemalign+0x5f>
c000174e:	83 e0 f8             	and    eax,0xfffffff8
c0001751:	89 c5                	mov    ebp,eax
c0001753:	83 ec 0c             	sub    esp,0xc
c0001756:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000175a:	50                   	push   eax
c000175b:	e8 b4 f8 ff ff       	call   c0001014 <dlmalloc>
c0001760:	83 c4 10             	add    esp,0x10
c0001763:	89 c1                	mov    ecx,eax
c0001765:	85 c0                	test   eax,eax
c0001767:	74 d1                	je     c000173a <dlmemalign+0x46>
c0001769:	31 d2                	xor    edx,edx
c000176b:	8d 70 f8             	lea    esi,[eax-0x8]
c000176e:	f7 f7                	div    edi
c0001770:	85 d2                	test   edx,edx
c0001772:	74 62                	je     c00017d6 <dlmemalign+0xe2>
c0001774:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c0001778:	89 f8                	mov    eax,edi
c000177a:	f7 d8                	neg    eax
c000177c:	21 c3                	and    ebx,eax
c000177e:	83 eb 08             	sub    ebx,0x8
c0001781:	89 d8                	mov    eax,ebx
c0001783:	29 f0                	sub    eax,esi
c0001785:	83 f8 0f             	cmp    eax,0xf
c0001788:	77 02                	ja     c000178c <dlmemalign+0x98>
c000178a:	01 fb                	add    ebx,edi
c000178c:	89 d8                	mov    eax,ebx
c000178e:	29 f0                	sub    eax,esi
c0001790:	89 c6                	mov    esi,eax
c0001792:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001795:	89 c2                	mov    edx,eax
c0001797:	83 e2 fc             	and    edx,0xfffffffc
c000179a:	29 f2                	sub    edx,esi
c000179c:	a8 02                	test   al,0x2
c000179e:	74 10                	je     c00017b0 <dlmemalign+0xbc>
c00017a0:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00017a3:	83 ca 02             	or     edx,0x2
c00017a6:	8d 43 08             	lea    eax,[ebx+0x8]
c00017a9:	89 33                	mov    DWORD PTR [ebx],esi
c00017ab:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00017ae:	eb 5f                	jmp    c000180f <dlmemalign+0x11b>
c00017b0:	83 ec 0c             	sub    esp,0xc
c00017b3:	89 d0                	mov    eax,edx
c00017b5:	83 c8 01             	or     eax,0x1
c00017b8:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00017bb:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00017c0:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00017c3:	83 e0 01             	and    eax,0x1
c00017c6:	09 f0                	or     eax,esi
c00017c8:	89 de                	mov    esi,ebx
c00017ca:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00017cd:	51                   	push   ecx
c00017ce:	e8 e6 f4 ff ff       	call   c0000cb9 <dlfree>
c00017d3:	83 c4 10             	add    esp,0x10
c00017d6:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017d9:	a8 02                	test   al,0x2
c00017db:	75 2f                	jne    c000180c <dlmemalign+0x118>
c00017dd:	83 e0 fc             	and    eax,0xfffffffc
c00017e0:	8d 55 10             	lea    edx,[ebp+0x10]
c00017e3:	39 c2                	cmp    edx,eax
c00017e5:	73 25                	jae    c000180c <dlmemalign+0x118>
c00017e7:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	29 e8                	sub    eax,ebp
c00017ef:	83 c2 08             	add    edx,0x8
c00017f2:	83 c8 01             	or     eax,0x1
c00017f5:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00017f8:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00017fb:	83 e0 01             	and    eax,0x1
c00017fe:	09 c5                	or     ebp,eax
c0001800:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001803:	52                   	push   edx
c0001804:	e8 b0 f4 ff ff       	call   c0000cb9 <dlfree>
c0001809:	83 c4 10             	add    esp,0x10
c000180c:	8d 46 08             	lea    eax,[esi+0x8]
c000180f:	83 c4 0c             	add    esp,0xc
c0001812:	5b                   	pop    ebx
c0001813:	5e                   	pop    esi
c0001814:	5f                   	pop    edi
c0001815:	5d                   	pop    ebp
c0001816:	c3                   	ret    

c0001817 <dlcalloc>:
c0001817:	53                   	push   ebx
c0001818:	83 ec 14             	sub    esp,0x14
c000181b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000181f:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001824:	50                   	push   eax
c0001825:	e8 ea f7 ff ff       	call   c0001014 <dlmalloc>
c000182a:	83 c4 10             	add    esp,0x10
c000182d:	89 c3                	mov    ebx,eax
c000182f:	85 c0                	test   eax,eax
c0001831:	74 77                	je     c00018aa <dlcalloc+0x93>
c0001833:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c0001836:	89 d0                	mov    eax,edx
c0001838:	83 e0 fc             	and    eax,0xfffffffc
c000183b:	80 e2 02             	and    dl,0x2
c000183e:	75 5a                	jne    c000189a <dlcalloc+0x83>
c0001840:	83 e8 04             	sub    eax,0x4
c0001843:	83 f8 27             	cmp    eax,0x27
c0001846:	76 03                	jbe    c000184b <dlcalloc+0x34>
c0001848:	51                   	push   ecx
c0001849:	eb 53                	jmp    c000189e <dlcalloc+0x87>
c000184b:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001851:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0001858:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000185f:	83 f8 13             	cmp    eax,0x13
c0001862:	76 46                	jbe    c00018aa <dlcalloc+0x93>
c0001864:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000186b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001872:	83 f8 1b             	cmp    eax,0x1b
c0001875:	76 33                	jbe    c00018aa <dlcalloc+0x93>
c0001877:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000187e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0001885:	83 f8 23             	cmp    eax,0x23
c0001888:	76 20                	jbe    c00018aa <dlcalloc+0x93>
c000188a:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001891:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0001898:	eb 10                	jmp    c00018aa <dlcalloc+0x93>
c000189a:	83 e8 08             	sub    eax,0x8
c000189d:	52                   	push   edx
c000189e:	50                   	push   eax
c000189f:	6a 00                	push   0x0
c00018a1:	53                   	push   ebx
c00018a2:	e8 49 ec ff ff       	call   c00004f0 <memset>
c00018a7:	83 c4 10             	add    esp,0x10
c00018aa:	89 d8                	mov    eax,ebx
c00018ac:	83 c4 08             	add    esp,0x8
c00018af:	5b                   	pop    ebx
c00018b0:	c3                   	ret    

c00018b1 <dlcfree>:
c00018b1:	e9 03 f4 ff ff       	jmp    c0000cb9 <dlfree>

c00018b6 <dlindependent_calloc>:
c00018b6:	83 ec 28             	sub    esp,0x28
c00018b9:	b9 03 00 00 00       	mov    ecx,0x3
c00018be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018c2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00018c6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00018ca:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00018ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00018d2:	e8 cb fa ff ff       	call   c00013a2 <iALLOc>
c00018d7:	83 c4 2c             	add    esp,0x2c
c00018da:	c3                   	ret    

c00018db <dlindependent_comalloc>:
c00018db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00018df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00018e3:	31 c9                	xor    ecx,ecx
c00018e5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00018e9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00018ed:	e9 b0 fa ff ff       	jmp    c00013a2 <iALLOc>

c00018f2 <dlvalloc>:
c00018f2:	83 ec 0c             	sub    esp,0xc
c00018f5:	83 3d 40 f5 01 c0 00 	cmp    DWORD PTR ds:0xc001f540,0x0
c00018fc:	75 0a                	jne    c0001908 <dlvalloc+0x16>
c00018fe:	b8 40 f5 01 c0       	mov    eax,0xc001f540
c0001903:	e8 ca f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001908:	50                   	push   eax
c0001909:	50                   	push   eax
c000190a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000190e:	ff 35 9c f8 01 c0    	push   DWORD PTR ds:0xc001f89c
c0001914:	e8 db fd ff ff       	call   c00016f4 <dlmemalign>
c0001919:	83 c4 1c             	add    esp,0x1c
c000191c:	c3                   	ret    

c000191d <dlpvalloc>:
c000191d:	83 ec 0c             	sub    esp,0xc
c0001920:	83 3d 40 f5 01 c0 00 	cmp    DWORD PTR ds:0xc001f540,0x0
c0001927:	75 0a                	jne    c0001933 <dlpvalloc+0x16>
c0001929:	b8 40 f5 01 c0       	mov    eax,0xc001f540
c000192e:	e8 9f f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001933:	a1 9c f8 01 c0       	mov    eax,ds:0xc001f89c
c0001938:	89 c1                	mov    ecx,eax
c000193a:	52                   	push   edx
c000193b:	f7 d9                	neg    ecx
c000193d:	52                   	push   edx
c000193e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001942:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001946:	21 ca                	and    edx,ecx
c0001948:	52                   	push   edx
c0001949:	50                   	push   eax
c000194a:	e8 a5 fd ff ff       	call   c00016f4 <dlmemalign>
c000194f:	83 c4 1c             	add    esp,0x1c
c0001952:	c3                   	ret    

c0001953 <dlmalloc_trim>:
c0001953:	b8 40 f5 01 c0       	mov    eax,0xc001f540
c0001958:	e8 75 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c000195d:	31 c0                	xor    eax,eax
c000195f:	c3                   	ret    

c0001960 <dlmalloc_usable_size>:
c0001960:	53                   	push   ebx
c0001961:	31 c0                	xor    eax,eax
c0001963:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001967:	85 c9                	test   ecx,ecx
c0001969:	74 24                	je     c000198f <dlmalloc_usable_size+0x2f>
c000196b:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c000196e:	f6 c2 02             	test   dl,0x2
c0001971:	74 08                	je     c000197b <dlmalloc_usable_size+0x1b>
c0001973:	83 e2 fc             	and    edx,0xfffffffc
c0001976:	8d 42 f8             	lea    eax,[edx-0x8]
c0001979:	eb 14                	jmp    c000198f <dlmalloc_usable_size+0x2f>
c000197b:	89 d3                	mov    ebx,edx
c000197d:	31 c0                	xor    eax,eax
c000197f:	83 e3 fe             	and    ebx,0xfffffffe
c0001982:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001987:	74 06                	je     c000198f <dlmalloc_usable_size+0x2f>
c0001989:	83 e2 fc             	and    edx,0xfffffffc
c000198c:	8d 42 fc             	lea    eax,[edx-0x4]
c000198f:	5b                   	pop    ebx
c0001990:	c3                   	ret    

c0001991 <dlmallinfo>:
c0001991:	55                   	push   ebp
c0001992:	57                   	push   edi
c0001993:	56                   	push   esi
c0001994:	53                   	push   ebx
c0001995:	83 ec 08             	sub    esp,0x8
c0001998:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000199c:	83 3d 6c f5 01 c0 00 	cmp    DWORD PTR ds:0xc001f56c,0x0
c00019a3:	75 0a                	jne    c00019af <dlmallinfo+0x1e>
c00019a5:	b8 40 f5 01 c0       	mov    eax,0xc001f540
c00019aa:	e8 23 f2 ff ff       	call   c0000bd2 <malloc_consolidate>
c00019af:	a1 6c f5 01 c0       	mov    eax,ds:0xc001f56c
c00019b4:	31 ed                	xor    ebp,ebp
c00019b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00019b9:	31 c9                	xor    ecx,ecx
c00019bb:	83 e0 fc             	and    eax,0xfffffffc
c00019be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00019c2:	31 c0                	xor    eax,eax
c00019c4:	8b 14 85 44 f5 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0abc]
c00019cb:	85 d2                	test   edx,edx
c00019cd:	74 0e                	je     c00019dd <dlmallinfo+0x4c>
c00019cf:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c00019d2:	45                   	inc    ebp
c00019d3:	83 e6 fc             	and    esi,0xfffffffc
c00019d6:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00019d9:	01 f1                	add    ecx,esi
c00019db:	eb ee                	jmp    c00019cb <dlmallinfo+0x3a>
c00019dd:	40                   	inc    eax
c00019de:	83 f8 0a             	cmp    eax,0xa
c00019e1:	75 e1                	jne    c00019c4 <dlmallinfo+0x33>
c00019e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019e7:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00019ee:	8d 14 01             	lea    edx,[ecx+eax*1]
c00019f1:	b8 74 f5 01 c0       	mov    eax,0xc001f574
c00019f6:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c00019f9:	39 f0                	cmp    eax,esi
c00019fb:	74 10                	je     c0001a0d <dlmallinfo+0x7c>
c00019fd:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a00:	ff 04 24             	inc    DWORD PTR [esp]
c0001a03:	83 e7 fc             	and    edi,0xfffffffc
c0001a06:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001a09:	01 fa                	add    edx,edi
c0001a0b:	eb ec                	jmp    c00019f9 <dlmallinfo+0x68>
c0001a0d:	83 c0 08             	add    eax,0x8
c0001a10:	3d 6c f8 01 c0       	cmp    eax,0xc001f86c
c0001a15:	75 df                	jne    c00019f6 <dlmallinfo+0x65>
c0001a17:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001a1a:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001a1d:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001a20:	a1 a8 f8 01 c0       	mov    eax,ds:0xc001f8a8
c0001a25:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001a28:	89 03                	mov    DWORD PTR [ebx],eax
c0001a2a:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001a2d:	8b 35 90 f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f890
c0001a33:	29 d0                	sub    eax,edx
c0001a35:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001a38:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001a3b:	8b 35 a4 f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f8a4
c0001a41:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a45:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001a48:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001a4b:	8b 35 b4 f8 01 c0    	mov    esi,DWORD PTR ds:0xc001f8b4
c0001a51:	89 d8                	mov    eax,ebx
c0001a53:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001a56:	83 c4 08             	add    esp,0x8
c0001a59:	5b                   	pop    ebx
c0001a5a:	5e                   	pop    esi
c0001a5b:	5f                   	pop    edi
c0001a5c:	5d                   	pop    ebp
c0001a5d:	c2 04 00             	ret    0x4

c0001a60 <dlmalloc_stats>:
c0001a60:	83 ec 30             	sub    esp,0x30
c0001a63:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001a67:	50                   	push   eax
c0001a68:	e8 24 ff ff ff       	call   c0001991 <dlmallinfo>
c0001a6d:	83 c4 30             	add    esp,0x30
c0001a70:	c3                   	ret    

c0001a71 <dlmallopt>:
c0001a71:	56                   	push   esi
c0001a72:	b8 40 f5 01 c0       	mov    eax,0xc001f540
c0001a77:	53                   	push   ebx
c0001a78:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001a7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001a80:	e8 4d f1 ff ff       	call   c0000bd2 <malloc_consolidate>
c0001a85:	8d 46 04             	lea    eax,[esi+0x4]
c0001a88:	83 f8 05             	cmp    eax,0x5
c0001a8b:	77 67                	ja     c0001af4 <dlmallopt+0x83>
c0001a8d:	ff 24 85 84 c9 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe367c]
c0001a94:	83 fb 50             	cmp    ebx,0x50
c0001a97:	77 5b                	ja     c0001af4 <dlmallopt+0x83>
c0001a99:	ba 08 00 00 00       	mov    edx,0x8
c0001a9e:	85 db                	test   ebx,ebx
c0001aa0:	74 12                	je     c0001ab4 <dlmallopt+0x43>
c0001aa2:	83 c3 0b             	add    ebx,0xb
c0001aa5:	ba 10 00 00 00       	mov    edx,0x10
c0001aaa:	83 fb 0f             	cmp    ebx,0xf
c0001aad:	76 05                	jbe    c0001ab4 <dlmallopt+0x43>
c0001aaf:	89 da                	mov    edx,ebx
c0001ab1:	83 e2 f8             	and    edx,0xfffffff8
c0001ab4:	a1 40 f5 01 c0       	mov    eax,ds:0xc001f540
c0001ab9:	83 e0 03             	and    eax,0x3
c0001abc:	09 d0                	or     eax,edx
c0001abe:	a3 40 f5 01 c0       	mov    ds:0xc001f540,eax
c0001ac3:	eb 31                	jmp    c0001af6 <dlmallopt+0x85>
c0001ac5:	89 1d 84 f8 01 c0    	mov    DWORD PTR ds:0xc001f884,ebx
c0001acb:	eb 06                	jmp    c0001ad3 <dlmallopt+0x62>
c0001acd:	89 1d 88 f8 01 c0    	mov    DWORD PTR ds:0xc001f888,ebx
c0001ad3:	be 01 00 00 00       	mov    esi,0x1
c0001ad8:	eb 1c                	jmp    c0001af6 <dlmallopt+0x85>
c0001ada:	89 1d 8c f8 01 c0    	mov    DWORD PTR ds:0xc001f88c,ebx
c0001ae0:	eb f1                	jmp    c0001ad3 <dlmallopt+0x62>
c0001ae2:	31 f6                	xor    esi,esi
c0001ae4:	85 db                	test   ebx,ebx
c0001ae6:	75 0e                	jne    c0001af6 <dlmallopt+0x85>
c0001ae8:	c7 05 94 f8 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f894,0x0
c0001af2:	eb df                	jmp    c0001ad3 <dlmallopt+0x62>
c0001af4:	31 f6                	xor    esi,esi
c0001af6:	89 f0                	mov    eax,esi
c0001af8:	5b                   	pop    ebx
c0001af9:	5e                   	pop    esi
c0001afa:	c3                   	ret    
c0001afb:	90                   	nop

c0001afc <isblank>:
c0001afc:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b01:	74 09                	je     c0001b0c <isblank+0x10>
c0001b03:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b08:	75 0a                	jne    c0001b14 <isblank+0x18>
c0001b0a:	66 90                	xchg   ax,ax
c0001b0c:	b8 01 00 00 00       	mov    eax,0x1
c0001b11:	c3                   	ret    
c0001b12:	66 90                	xchg   ax,ax
c0001b14:	b8 00 00 00 00       	mov    eax,0x0
c0001b19:	c3                   	ret    
c0001b1a:	66 90                	xchg   ax,ax

c0001b1c <iscntrl>:
c0001b1c:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001b21:	7e 09                	jle    c0001b2c <iscntrl+0x10>
c0001b23:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001b28:	75 0a                	jne    c0001b34 <iscntrl+0x18>
c0001b2a:	66 90                	xchg   ax,ax
c0001b2c:	b8 01 00 00 00       	mov    eax,0x1
c0001b31:	c3                   	ret    
c0001b32:	66 90                	xchg   ax,ax
c0001b34:	b8 00 00 00 00       	mov    eax,0x0
c0001b39:	c3                   	ret    
c0001b3a:	66 90                	xchg   ax,ax

c0001b3c <isdigit>:
c0001b3c:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001b41:	7e 0d                	jle    c0001b50 <isdigit+0x14>
c0001b43:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001b48:	7f 06                	jg     c0001b50 <isdigit+0x14>
c0001b4a:	b8 01 00 00 00       	mov    eax,0x1
c0001b4f:	c3                   	ret    
c0001b50:	b8 00 00 00 00       	mov    eax,0x0
c0001b55:	c3                   	ret    
c0001b56:	66 90                	xchg   ax,ax

c0001b58 <islower>:
c0001b58:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001b5d:	7e 0d                	jle    c0001b6c <islower+0x14>
c0001b5f:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001b64:	7f 06                	jg     c0001b6c <islower+0x14>
c0001b66:	b8 01 00 00 00       	mov    eax,0x1
c0001b6b:	c3                   	ret    
c0001b6c:	b8 00 00 00 00       	mov    eax,0x0
c0001b71:	c3                   	ret    
c0001b72:	66 90                	xchg   ax,ax

c0001b74 <isspace>:
c0001b74:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001b79:	7c 19                	jl     c0001b94 <isspace+0x20>
c0001b7b:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001b80:	7e 0a                	jle    c0001b8c <isspace+0x18>
c0001b82:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b87:	75 0b                	jne    c0001b94 <isspace+0x20>
c0001b89:	8d 76 00             	lea    esi,[esi+0x0]
c0001b8c:	b8 01 00 00 00       	mov    eax,0x1
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax
c0001b94:	b8 00 00 00 00       	mov    eax,0x0
c0001b99:	c3                   	ret    
c0001b9a:	66 90                	xchg   ax,ax

c0001b9c <isupper>:
c0001b9c:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001ba1:	7e 0d                	jle    c0001bb0 <isupper+0x14>
c0001ba3:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001ba8:	7f 06                	jg     c0001bb0 <isupper+0x14>
c0001baa:	b8 01 00 00 00       	mov    eax,0x1
c0001baf:	c3                   	ret    
c0001bb0:	b8 00 00 00 00       	mov    eax,0x0
c0001bb5:	c3                   	ret    
c0001bb6:	66 90                	xchg   ax,ax

c0001bb8 <isalpha>:
c0001bb8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bbc:	e8 db ff ff ff       	call   c0001b9c <isupper>
c0001bc1:	83 c4 04             	add    esp,0x4
c0001bc4:	85 c0                	test   eax,eax
c0001bc6:	75 10                	jne    c0001bd8 <isalpha+0x20>
c0001bc8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bcc:	e8 87 ff ff ff       	call   c0001b58 <islower>
c0001bd1:	83 c4 04             	add    esp,0x4
c0001bd4:	85 c0                	test   eax,eax
c0001bd6:	74 08                	je     c0001be0 <isalpha+0x28>
c0001bd8:	b8 01 00 00 00       	mov    eax,0x1
c0001bdd:	c3                   	ret    
c0001bde:	66 90                	xchg   ax,ax
c0001be0:	b8 00 00 00 00       	mov    eax,0x0
c0001be5:	c3                   	ret    
c0001be6:	66 90                	xchg   ax,ax

c0001be8 <isalnum>:
c0001be8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bec:	e8 c7 ff ff ff       	call   c0001bb8 <isalpha>
c0001bf1:	83 c4 04             	add    esp,0x4
c0001bf4:	85 c0                	test   eax,eax
c0001bf6:	75 10                	jne    c0001c08 <isalnum+0x20>
c0001bf8:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001bfc:	e8 3b ff ff ff       	call   c0001b3c <isdigit>
c0001c01:	83 c4 04             	add    esp,0x4
c0001c04:	85 c0                	test   eax,eax
c0001c06:	74 08                	je     c0001c10 <isalnum+0x28>
c0001c08:	b8 01 00 00 00       	mov    eax,0x1
c0001c0d:	c3                   	ret    
c0001c0e:	66 90                	xchg   ax,ax
c0001c10:	b8 00 00 00 00       	mov    eax,0x0
c0001c15:	c3                   	ret    
c0001c16:	66 90                	xchg   ax,ax

c0001c18 <ispunct>:
c0001c18:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c1c:	e8 c7 ff ff ff       	call   c0001be8 <isalnum>
c0001c21:	83 c4 04             	add    esp,0x4
c0001c24:	85 c0                	test   eax,eax
c0001c26:	75 28                	jne    c0001c50 <ispunct+0x38>
c0001c28:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c2c:	e8 43 ff ff ff       	call   c0001b74 <isspace>
c0001c31:	83 c4 04             	add    esp,0x4
c0001c34:	85 c0                	test   eax,eax
c0001c36:	75 18                	jne    c0001c50 <ispunct+0x38>
c0001c38:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c3c:	e8 db fe ff ff       	call   c0001b1c <iscntrl>
c0001c41:	83 c4 04             	add    esp,0x4
c0001c44:	85 c0                	test   eax,eax
c0001c46:	75 08                	jne    c0001c50 <ispunct+0x38>
c0001c48:	b8 01 00 00 00       	mov    eax,0x1
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax
c0001c50:	b8 00 00 00 00       	mov    eax,0x0
c0001c55:	c3                   	ret    
c0001c56:	66 90                	xchg   ax,ax

c0001c58 <isgraph>:
c0001c58:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c5c:	e8 87 ff ff ff       	call   c0001be8 <isalnum>
c0001c61:	83 c4 04             	add    esp,0x4
c0001c64:	85 c0                	test   eax,eax
c0001c66:	75 10                	jne    c0001c78 <isgraph+0x20>
c0001c68:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c6c:	e8 a7 ff ff ff       	call   c0001c18 <ispunct>
c0001c71:	83 c4 04             	add    esp,0x4
c0001c74:	85 c0                	test   eax,eax
c0001c76:	74 08                	je     c0001c80 <isgraph+0x28>
c0001c78:	b8 01 00 00 00       	mov    eax,0x1
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax
c0001c80:	b8 00 00 00 00       	mov    eax,0x0
c0001c85:	c3                   	ret    
c0001c86:	66 90                	xchg   ax,ax

c0001c88 <isprint>:
c0001c88:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c8c:	e8 c7 ff ff ff       	call   c0001c58 <isgraph>
c0001c91:	83 c4 04             	add    esp,0x4
c0001c94:	85 c0                	test   eax,eax
c0001c96:	75 08                	jne    c0001ca0 <isprint+0x18>
c0001c98:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c9d:	75 09                	jne    c0001ca8 <isprint+0x20>
c0001c9f:	90                   	nop
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <isxdigit>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 83 fe ff ff       	call   c0001b3c <isdigit>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 20                	jne    c0001ce0 <isxdigit+0x30>
c0001cc0:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001cc5:	7e 09                	jle    c0001cd0 <isxdigit+0x20>
c0001cc7:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001ccc:	7e 12                	jle    c0001ce0 <isxdigit+0x30>
c0001cce:	66 90                	xchg   ax,ax
c0001cd0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001cd5:	7e 11                	jle    c0001ce8 <isxdigit+0x38>
c0001cd7:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001cdc:	7f 0a                	jg     c0001ce8 <isxdigit+0x38>
c0001cde:	66 90                	xchg   ax,ax
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    

c0001cee <disk_status>:
c0001cee:	31 c0                	xor    eax,eax
c0001cf0:	c3                   	ret    

c0001cf1 <disk_initialize>:
c0001cf1:	31 c0                	xor    eax,eax
c0001cf3:	c3                   	ret    

c0001cf4 <disk_read>:
c0001cf4:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001cf9:	0f b6 04 85 a0 39 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc660]
c0001d01:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d05:	e9 d2 4e 01 00       	jmp    c0016bdc <fatWrapperReadDisk>

c0001d0a <disk_write>:
c0001d0a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d0f:	0f b6 04 85 a0 39 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc660]
c0001d17:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d1b:	e9 00 4f 01 00       	jmp    c0016c20 <fatWrapperWriteDisk>

c0001d20 <disk_ioctl>:
c0001d20:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001d25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001d29:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d2e:	0f b6 04 85 a0 39 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffdc660]
c0001d36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d3a:	e9 25 4f 01 00       	jmp    c0016c64 <fatWrapperIoctl>

c0001d3f <ld_word>:
c0001d3f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d43:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d46:	c1 e2 08             	shl    edx,0x8
c0001d49:	09 d0                	or     eax,edx
c0001d4b:	c3                   	ret    

c0001d4c <ld_dword>:
c0001d4c:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001d50:	89 d1                	mov    ecx,edx
c0001d52:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001d56:	c1 e1 08             	shl    ecx,0x8
c0001d59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001d5c:	09 ca                	or     edx,ecx
c0001d5e:	c1 e2 08             	shl    edx,0x8
c0001d61:	09 d0                	or     eax,edx
c0001d63:	c3                   	ret    

c0001d64 <st_word>:
c0001d64:	66 89 10             	mov    WORD PTR [eax],dx
c0001d67:	c3                   	ret    

c0001d68 <st_dword>:
c0001d68:	89 10                	mov    DWORD PTR [eax],edx
c0001d6a:	c3                   	ret    

c0001d6b <mem_cpy>:
c0001d6b:	85 c9                	test   ecx,ecx
c0001d6d:	74 10                	je     c0001d7f <mem_cpy+0x14>
c0001d6f:	57                   	push   edi
c0001d70:	01 c1                	add    ecx,eax
c0001d72:	56                   	push   esi
c0001d73:	89 c7                	mov    edi,eax
c0001d75:	89 d6                	mov    esi,edx
c0001d77:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001d78:	39 f9                	cmp    ecx,edi
c0001d7a:	75 fb                	jne    c0001d77 <mem_cpy+0xc>
c0001d7c:	5e                   	pop    esi
c0001d7d:	5f                   	pop    edi
c0001d7e:	c3                   	ret    
c0001d7f:	c3                   	ret    

c0001d80 <mem_set>:
c0001d80:	01 c1                	add    ecx,eax
c0001d82:	40                   	inc    eax
c0001d83:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001d86:	39 c8                	cmp    eax,ecx
c0001d88:	75 f8                	jne    c0001d82 <mem_set+0x2>
c0001d8a:	c3                   	ret    

c0001d8b <mem_cmp>:
c0001d8b:	57                   	push   edi
c0001d8c:	56                   	push   esi
c0001d8d:	89 c6                	mov    esi,eax
c0001d8f:	53                   	push   ebx
c0001d90:	46                   	inc    esi
c0001d91:	42                   	inc    edx
c0001d92:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d96:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d9a:	29 fb                	sub    ebx,edi
c0001d9c:	89 cf                	mov    edi,ecx
c0001d9e:	29 f7                	sub    edi,esi
c0001da0:	01 c7                	add    edi,eax
c0001da2:	74 04                	je     c0001da8 <mem_cmp+0x1d>
c0001da4:	85 db                	test   ebx,ebx
c0001da6:	74 e8                	je     c0001d90 <mem_cmp+0x5>
c0001da8:	89 d8                	mov    eax,ebx
c0001daa:	5b                   	pop    ebx
c0001dab:	5e                   	pop    esi
c0001dac:	5f                   	pop    edi
c0001dad:	c3                   	ret    

c0001dae <chk_chr>:
c0001dae:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001db1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001db4:	74 07                	je     c0001dbd <chk_chr+0xf>
c0001db6:	39 d1                	cmp    ecx,edx
c0001db8:	74 03                	je     c0001dbd <chk_chr+0xf>
c0001dba:	40                   	inc    eax
c0001dbb:	eb f1                	jmp    c0001dae <chk_chr>
c0001dbd:	89 c8                	mov    eax,ecx
c0001dbf:	c3                   	ret    

c0001dc0 <dbc_1st>:
c0001dc0:	31 c0                	xor    eax,eax
c0001dc2:	c3                   	ret    

c0001dc3 <dbc_2nd>:
c0001dc3:	31 c0                	xor    eax,eax
c0001dc5:	c3                   	ret    

c0001dc6 <tchar2uni>:
c0001dc6:	57                   	push   edi
c0001dc7:	89 c7                	mov    edi,eax
c0001dc9:	56                   	push   esi
c0001dca:	53                   	push   ebx
c0001dcb:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001dcd:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001dcf:	8d 73 01             	lea    esi,[ebx+0x1]
c0001dd2:	84 c9                	test   cl,cl
c0001dd4:	78 0a                	js     c0001de0 <tchar2uni+0x1a>
c0001dd6:	0f b6 d1             	movzx  edx,cl
c0001dd9:	89 f3                	mov    ebx,esi
c0001ddb:	e9 9f 00 00 00       	jmp    c0001e7f <tchar2uni+0xb9>
c0001de0:	88 ca                	mov    dl,cl
c0001de2:	83 e2 e0             	and    edx,0xffffffe0
c0001de5:	80 fa c0             	cmp    dl,0xc0
c0001de8:	75 0c                	jne    c0001df6 <tchar2uni+0x30>
c0001dea:	89 ca                	mov    edx,ecx
c0001dec:	b9 01 00 00 00       	mov    ecx,0x1
c0001df1:	83 e2 1f             	and    edx,0x1f
c0001df4:	eb 2e                	jmp    c0001e24 <tchar2uni+0x5e>
c0001df6:	88 ca                	mov    dl,cl
c0001df8:	83 e2 f0             	and    edx,0xfffffff0
c0001dfb:	80 fa e0             	cmp    dl,0xe0
c0001dfe:	75 0c                	jne    c0001e0c <tchar2uni+0x46>
c0001e00:	89 ca                	mov    edx,ecx
c0001e02:	b9 02 00 00 00       	mov    ecx,0x2
c0001e07:	83 e2 0f             	and    edx,0xf
c0001e0a:	eb 18                	jmp    c0001e24 <tchar2uni+0x5e>
c0001e0c:	88 ca                	mov    dl,cl
c0001e0e:	83 e2 f8             	and    edx,0xfffffff8
c0001e11:	88 d0                	mov    al,dl
c0001e13:	83 ca ff             	or     edx,0xffffffff
c0001e16:	3c f0                	cmp    al,0xf0
c0001e18:	75 6c                	jne    c0001e86 <tchar2uni+0xc0>
c0001e1a:	89 ca                	mov    edx,ecx
c0001e1c:	b9 03 00 00 00       	mov    ecx,0x3
c0001e21:	83 e2 07             	and    edx,0x7
c0001e24:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001e28:	46                   	inc    esi
c0001e29:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001e2c:	88 c8                	mov    al,cl
c0001e2e:	83 e0 c0             	and    eax,0xffffffc0
c0001e31:	3c 80                	cmp    al,0x80
c0001e33:	75 4e                	jne    c0001e83 <tchar2uni+0xbd>
c0001e35:	c1 e2 06             	shl    edx,0x6
c0001e38:	83 e1 3f             	and    ecx,0x3f
c0001e3b:	09 ca                	or     edx,ecx
c0001e3d:	39 de                	cmp    esi,ebx
c0001e3f:	75 e7                	jne    c0001e28 <tchar2uni+0x62>
c0001e41:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001e44:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001e4a:	77 37                	ja     c0001e83 <tchar2uni+0xbd>
c0001e4c:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001e52:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e58:	76 29                	jbe    c0001e83 <tchar2uni+0xbd>
c0001e5a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001e60:	76 1d                	jbe    c0001e7f <tchar2uni+0xb9>
c0001e62:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001e68:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001e6e:	c1 e1 06             	shl    ecx,0x6
c0001e71:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001e77:	09 ca                	or     edx,ecx
c0001e79:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001e7f:	89 1f                	mov    DWORD PTR [edi],ebx
c0001e81:	eb 03                	jmp    c0001e86 <tchar2uni+0xc0>
c0001e83:	83 ca ff             	or     edx,0xffffffff
c0001e86:	5b                   	pop    ebx
c0001e87:	89 d0                	mov    eax,edx
c0001e89:	5e                   	pop    esi
c0001e8a:	5f                   	pop    edi
c0001e8b:	c3                   	ret    

c0001e8c <put_utf>:
c0001e8c:	53                   	push   ebx
c0001e8d:	83 f8 7f             	cmp    eax,0x7f
c0001e90:	89 c3                	mov    ebx,eax
c0001e92:	b0 00                	mov    al,0x0
c0001e94:	77 11                	ja     c0001ea7 <put_utf+0x1b>
c0001e96:	85 c9                	test   ecx,ecx
c0001e98:	0f 84 e5 00 00 00    	je     c0001f83 <put_utf+0xf7>
c0001e9e:	88 1a                	mov    BYTE PTR [edx],bl
c0001ea0:	b0 01                	mov    al,0x1
c0001ea2:	e9 dc 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ea7:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001ead:	77 23                	ja     c0001ed2 <put_utf+0x46>
c0001eaf:	83 f9 01             	cmp    ecx,0x1
c0001eb2:	0f 86 cb 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001eb8:	89 d8                	mov    eax,ebx
c0001eba:	83 e3 3f             	and    ebx,0x3f
c0001ebd:	c1 e8 06             	shr    eax,0x6
c0001ec0:	83 cb 80             	or     ebx,0xffffff80
c0001ec3:	83 c8 c0             	or     eax,0xffffffc0
c0001ec6:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001ec9:	88 02                	mov    BYTE PTR [edx],al
c0001ecb:	b0 02                	mov    al,0x2
c0001ecd:	e9 b1 00 00 00       	jmp    c0001f83 <put_utf+0xf7>
c0001ed2:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001ed8:	77 40                	ja     c0001f1a <put_utf+0x8e>
c0001eda:	83 f9 02             	cmp    ecx,0x2
c0001edd:	0f 86 a0 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ee3:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001ee9:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001eef:	0f 86 8e 00 00 00    	jbe    c0001f83 <put_utf+0xf7>
c0001ef5:	89 d8                	mov    eax,ebx
c0001ef7:	c1 e8 0c             	shr    eax,0xc
c0001efa:	83 c8 e0             	or     eax,0xffffffe0
c0001efd:	88 02                	mov    BYTE PTR [edx],al
c0001eff:	89 d8                	mov    eax,ebx
c0001f01:	83 e3 3f             	and    ebx,0x3f
c0001f04:	c1 e8 06             	shr    eax,0x6
c0001f07:	83 cb 80             	or     ebx,0xffffff80
c0001f0a:	83 e0 3f             	and    eax,0x3f
c0001f0d:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001f10:	83 c8 80             	or     eax,0xffffff80
c0001f13:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f16:	b0 03                	mov    al,0x3
c0001f18:	eb 69                	jmp    c0001f83 <put_utf+0xf7>
c0001f1a:	83 f9 03             	cmp    ecx,0x3
c0001f1d:	76 64                	jbe    c0001f83 <put_utf+0xf7>
c0001f1f:	89 d9                	mov    ecx,ebx
c0001f21:	0f b7 c3             	movzx  eax,bx
c0001f24:	66 31 c9             	xor    cx,cx
c0001f27:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001f2d:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001f33:	c1 e9 06             	shr    ecx,0x6
c0001f36:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001f3c:	77 43                	ja     c0001f81 <put_utf+0xf5>
c0001f3e:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001f44:	77 3b                	ja     c0001f81 <put_utf+0xf5>
c0001f46:	09 cb                	or     ebx,ecx
c0001f48:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001f4e:	89 d8                	mov    eax,ebx
c0001f50:	c1 e8 12             	shr    eax,0x12
c0001f53:	83 c8 f0             	or     eax,0xfffffff0
c0001f56:	88 02                	mov    BYTE PTR [edx],al
c0001f58:	89 d8                	mov    eax,ebx
c0001f5a:	c1 e8 0c             	shr    eax,0xc
c0001f5d:	83 e0 3f             	and    eax,0x3f
c0001f60:	83 c8 80             	or     eax,0xffffff80
c0001f63:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001f66:	89 d8                	mov    eax,ebx
c0001f68:	83 e3 3f             	and    ebx,0x3f
c0001f6b:	c1 e8 06             	shr    eax,0x6
c0001f6e:	83 cb 80             	or     ebx,0xffffff80
c0001f71:	83 e0 3f             	and    eax,0x3f
c0001f74:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001f77:	83 c8 80             	or     eax,0xffffff80
c0001f7a:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001f7d:	b0 04                	mov    al,0x4
c0001f7f:	eb 02                	jmp    c0001f83 <put_utf+0xf7>
c0001f81:	31 c0                	xor    eax,eax
c0001f83:	5b                   	pop    ebx
c0001f84:	c3                   	ret    

c0001f85 <clst2sect>:
c0001f85:	8d 4a fe             	lea    ecx,[edx-0x2]
c0001f88:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0001f8b:	83 ea 02             	sub    edx,0x2
c0001f8e:	39 ca                	cmp    edx,ecx
c0001f90:	76 0d                	jbe    c0001f9f <clst2sect+0x1a>
c0001f92:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c0001f96:	0f af d1             	imul   edx,ecx
c0001f99:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0001f9c:	89 d0                	mov    eax,edx
c0001f9e:	c3                   	ret    
c0001f9f:	31 c0                	xor    eax,eax
c0001fa1:	c3                   	ret    

c0001fa2 <pick_lfn>:
c0001fa2:	55                   	push   ebp
c0001fa3:	57                   	push   edi
c0001fa4:	56                   	push   esi
c0001fa5:	89 d6                	mov    esi,edx
c0001fa7:	53                   	push   ebx
c0001fa8:	89 c3                	mov    ebx,eax
c0001faa:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fad:	e8 8d fd ff ff       	call   c0001d3f <ld_word>
c0001fb2:	66 85 c0             	test   ax,ax
c0001fb5:	74 04                	je     c0001fbb <pick_lfn+0x19>
c0001fb7:	31 c0                	xor    eax,eax
c0001fb9:	eb 5c                	jmp    c0002017 <pick_lfn+0x75>
c0001fbb:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001fbe:	bd 01 00 00 00       	mov    ebp,0x1
c0001fc3:	83 e1 bf             	and    ecx,0xffffffbf
c0001fc6:	31 ff                	xor    edi,edi
c0001fc8:	49                   	dec    ecx
c0001fc9:	6b c9 0d             	imul   ecx,ecx,0xd
c0001fcc:	0f b6 87 e0 ca 01 c0 	movzx  eax,BYTE PTR [edi-0x3ffe3520]
c0001fd3:	01 f0                	add    eax,esi
c0001fd5:	e8 65 fd ff ff       	call   c0001d3f <ld_word>
c0001fda:	66 85 ed             	test   bp,bp
c0001fdd:	74 11                	je     c0001ff0 <pick_lfn+0x4e>
c0001fdf:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fe5:	77 d0                	ja     c0001fb7 <pick_lfn+0x15>
c0001fe7:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001feb:	89 c5                	mov    ebp,eax
c0001fed:	41                   	inc    ecx
c0001fee:	eb 04                	jmp    c0001ff4 <pick_lfn+0x52>
c0001ff0:	66 40                	inc    ax
c0001ff2:	75 c3                	jne    c0001fb7 <pick_lfn+0x15>
c0001ff4:	47                   	inc    edi
c0001ff5:	83 ff 0d             	cmp    edi,0xd
c0001ff8:	75 d2                	jne    c0001fcc <pick_lfn+0x2a>
c0001ffa:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001ffd:	74 13                	je     c0002012 <pick_lfn+0x70>
c0001fff:	66 85 ed             	test   bp,bp
c0002002:	74 0e                	je     c0002012 <pick_lfn+0x70>
c0002004:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000200a:	77 ab                	ja     c0001fb7 <pick_lfn+0x15>
c000200c:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0002012:	b8 01 00 00 00       	mov    eax,0x1
c0002017:	5b                   	pop    ebx
c0002018:	5e                   	pop    esi
c0002019:	5f                   	pop    edi
c000201a:	5d                   	pop    ebp
c000201b:	c3                   	ret    

c000201c <put_lfn>:
c000201c:	55                   	push   ebp
c000201d:	31 ed                	xor    ebp,ebp
c000201f:	57                   	push   edi
c0002020:	89 d7                	mov    edi,edx
c0002022:	56                   	push   esi
c0002023:	31 f6                	xor    esi,esi
c0002025:	53                   	push   ebx
c0002026:	83 ec 08             	sub    esp,0x8
c0002029:	89 04 24             	mov    DWORD PTR [esp],eax
c000202c:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0002030:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0002034:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c000203a:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c000203d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002040:	31 d2                	xor    edx,edx
c0002042:	e8 1d fd ff ff       	call   c0001d64 <st_word>
c0002047:	0f b6 d9             	movzx  ebx,cl
c000204a:	4b                   	dec    ebx
c000204b:	6b db 0d             	imul   ebx,ebx,0xd
c000204e:	66 83 fe ff          	cmp    si,0xffff
c0002052:	74 08                	je     c000205c <put_lfn+0x40>
c0002054:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002057:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000205b:	43                   	inc    ebx
c000205c:	0f b6 85 e0 ca 01 c0 	movzx  eax,BYTE PTR [ebp-0x3ffe3520]
c0002063:	0f b7 d6             	movzx  edx,si
c0002066:	01 f8                	add    eax,edi
c0002068:	e8 f7 fc ff ff       	call   c0001d64 <st_word>
c000206d:	66 85 f6             	test   si,si
c0002070:	75 03                	jne    c0002075 <put_lfn+0x59>
c0002072:	83 ce ff             	or     esi,0xffffffff
c0002075:	45                   	inc    ebp
c0002076:	83 fd 0d             	cmp    ebp,0xd
c0002079:	75 d3                	jne    c000204e <put_lfn+0x32>
c000207b:	66 46                	inc    si
c000207d:	74 0a                	je     c0002089 <put_lfn+0x6d>
c000207f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002082:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002087:	75 09                	jne    c0002092 <put_lfn+0x76>
c0002089:	88 c8                	mov    al,cl
c000208b:	83 c8 40             	or     eax,0x40
c000208e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002092:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002096:	88 07                	mov    BYTE PTR [edi],al
c0002098:	83 c4 08             	add    esp,0x8
c000209b:	5b                   	pop    ebx
c000209c:	5e                   	pop    esi
c000209d:	5f                   	pop    edi
c000209e:	5d                   	pop    ebp
c000209f:	c3                   	ret    

c00020a0 <gen_numname>:
c00020a0:	57                   	push   edi
c00020a1:	89 cf                	mov    edi,ecx
c00020a3:	56                   	push   esi
c00020a4:	b9 0b 00 00 00       	mov    ecx,0xb
c00020a9:	53                   	push   ebx
c00020aa:	89 c6                	mov    esi,eax
c00020ac:	83 ec 10             	sub    esp,0x10
c00020af:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00020b3:	e8 b3 fc ff ff       	call   c0001d6b <mem_cpy>
c00020b8:	83 fb 05             	cmp    ebx,0x5
c00020bb:	76 2d                	jbe    c00020ea <gen_numname+0x4a>
c00020bd:	66 8b 07             	mov    ax,WORD PTR [edi]
c00020c0:	66 85 c0             	test   ax,ax
c00020c3:	74 25                	je     c00020ea <gen_numname+0x4a>
c00020c5:	83 c7 02             	add    edi,0x2
c00020c8:	ba 10 00 00 00       	mov    edx,0x10
c00020cd:	01 db                	add    ebx,ebx
c00020cf:	89 c1                	mov    ecx,eax
c00020d1:	66 d1 e8             	shr    ax,1
c00020d4:	83 e1 01             	and    ecx,0x1
c00020d7:	01 cb                	add    ebx,ecx
c00020d9:	0f ba e3 10          	bt     ebx,0x10
c00020dd:	73 06                	jae    c00020e5 <gen_numname+0x45>
c00020df:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020e5:	4a                   	dec    edx
c00020e6:	75 e5                	jne    c00020cd <gen_numname+0x2d>
c00020e8:	eb d3                	jmp    c00020bd <gen_numname+0x1d>
c00020ea:	b8 07 00 00 00       	mov    eax,0x7
c00020ef:	88 d9                	mov    cl,bl
c00020f1:	83 e1 0f             	and    ecx,0xf
c00020f4:	8d 51 30             	lea    edx,[ecx+0x30]
c00020f7:	80 fa 39             	cmp    dl,0x39
c00020fa:	76 03                	jbe    c00020ff <gen_numname+0x5f>
c00020fc:	8d 51 37             	lea    edx,[ecx+0x37]
c00020ff:	8d 48 ff             	lea    ecx,[eax-0x1]
c0002102:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c0002106:	89 da                	mov    edx,ebx
c0002108:	c1 ea 04             	shr    edx,0x4
c000210b:	83 fb 0f             	cmp    ebx,0xf
c000210e:	76 06                	jbe    c0002116 <gen_numname+0x76>
c0002110:	89 c8                	mov    eax,ecx
c0002112:	89 d3                	mov    ebx,edx
c0002114:	eb d9                	jmp    c00020ef <gen_numname+0x4f>
c0002116:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c000211b:	31 d2                	xor    edx,edx
c000211d:	8d 58 fe             	lea    ebx,[eax-0x2]
c0002120:	8d 04 16             	lea    eax,[esi+edx*1]
c0002123:	39 ca                	cmp    edx,ecx
c0002125:	73 18                	jae    c000213f <gen_numname+0x9f>
c0002127:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c000212a:	3c 20                	cmp    al,0x20
c000212c:	74 11                	je     c000213f <gen_numname+0x9f>
c000212e:	e8 8d fc ff ff       	call   c0001dc0 <dbc_1st>
c0002133:	85 c0                	test   eax,eax
c0002135:	74 05                	je     c000213c <gen_numname+0x9c>
c0002137:	39 d3                	cmp    ebx,edx
c0002139:	74 04                	je     c000213f <gen_numname+0x9f>
c000213b:	42                   	inc    edx
c000213c:	42                   	inc    edx
c000213d:	eb e1                	jmp    c0002120 <gen_numname+0x80>
c000213f:	b0 20                	mov    al,0x20
c0002141:	83 f9 07             	cmp    ecx,0x7
c0002144:	77 05                	ja     c000214b <gen_numname+0xab>
c0002146:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000214a:	41                   	inc    ecx
c000214b:	42                   	inc    edx
c000214c:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002150:	83 fa 07             	cmp    edx,0x7
c0002153:	76 ea                	jbe    c000213f <gen_numname+0x9f>
c0002155:	83 c4 10             	add    esp,0x10
c0002158:	5b                   	pop    ebx
c0002159:	5e                   	pop    esi
c000215a:	5f                   	pop    edi
c000215b:	c3                   	ret    

c000215c <sum_sfn>:
c000215c:	31 c9                	xor    ecx,ecx
c000215e:	31 d2                	xor    edx,edx
c0002160:	d0 ca                	ror    dl,1
c0002162:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002165:	41                   	inc    ecx
c0002166:	83 f9 0b             	cmp    ecx,0xb
c0002169:	75 f5                	jne    c0002160 <sum_sfn+0x4>
c000216b:	88 d0                	mov    al,dl
c000216d:	c3                   	ret    

c000216e <get_ldnumber>:
c000216e:	8b 10                	mov    edx,DWORD PTR [eax]
c0002170:	85 d2                	test   edx,edx
c0002172:	74 14                	je     c0002188 <get_ldnumber+0x1a>
c0002174:	56                   	push   esi
c0002175:	53                   	push   ebx
c0002176:	89 d3                	mov    ebx,edx
c0002178:	43                   	inc    ebx
c0002179:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c000217c:	80 f9 1f             	cmp    cl,0x1f
c000217f:	76 0d                	jbe    c000218e <get_ldnumber+0x20>
c0002181:	80 f9 3a             	cmp    cl,0x3a
c0002184:	75 f2                	jne    c0002178 <get_ldnumber+0xa>
c0002186:	eb 0a                	jmp    c0002192 <get_ldnumber+0x24>
c0002188:	83 c9 ff             	or     ecx,0xffffffff
c000218b:	89 c8                	mov    eax,ecx
c000218d:	c3                   	ret    
c000218e:	31 c9                	xor    ecx,ecx
c0002190:	eb 24                	jmp    c00021b6 <get_ldnumber+0x48>
c0002192:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c0002195:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002198:	80 f9 09             	cmp    cl,0x9
c000219b:	77 16                	ja     c00021b3 <get_ldnumber+0x45>
c000219d:	83 c2 02             	add    edx,0x2
c00021a0:	83 c9 ff             	or     ecx,0xffffffff
c00021a3:	39 d3                	cmp    ebx,edx
c00021a5:	75 0f                	jne    c00021b6 <get_ldnumber+0x48>
c00021a7:	89 f2                	mov    edx,esi
c00021a9:	89 18                	mov    DWORD PTR [eax],ebx
c00021ab:	0f be ca             	movsx  ecx,dl
c00021ae:	83 e9 30             	sub    ecx,0x30
c00021b1:	eb 03                	jmp    c00021b6 <get_ldnumber+0x48>
c00021b3:	83 c9 ff             	or     ecx,0xffffffff
c00021b6:	89 c8                	mov    eax,ecx
c00021b8:	5b                   	pop    ebx
c00021b9:	5e                   	pop    esi
c00021ba:	c3                   	ret    

c00021bb <validate>:
c00021bb:	56                   	push   esi
c00021bc:	53                   	push   ebx
c00021bd:	89 d6                	mov    esi,edx
c00021bf:	51                   	push   ecx
c00021c0:	85 c0                	test   eax,eax
c00021c2:	75 09                	jne    c00021cd <validate+0x12>
c00021c4:	b8 09 00 00 00       	mov    eax,0x9
c00021c9:	31 c9                	xor    ecx,ecx
c00021cb:	eb 2f                	jmp    c00021fc <validate+0x41>
c00021cd:	89 c3                	mov    ebx,eax
c00021cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00021d1:	85 c0                	test   eax,eax
c00021d3:	74 ef                	je     c00021c4 <validate+0x9>
c00021d5:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00021d8:	74 ea                	je     c00021c4 <validate+0x9>
c00021da:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c00021de:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c00021e2:	75 e0                	jne    c00021c4 <validate+0x9>
c00021e4:	83 ec 0c             	sub    esp,0xc
c00021e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00021eb:	50                   	push   eax
c00021ec:	e8 fd fa ff ff       	call   c0001cee <disk_status>
c00021f1:	83 c4 10             	add    esp,0x10
c00021f4:	a8 01                	test   al,0x1
c00021f6:	75 cc                	jne    c00021c4 <validate+0x9>
c00021f8:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00021fa:	31 c0                	xor    eax,eax
c00021fc:	89 0e                	mov    DWORD PTR [esi],ecx
c00021fe:	5a                   	pop    edx
c00021ff:	5b                   	pop    ebx
c0002200:	5e                   	pop    esi
c0002201:	c3                   	ret    

c0002202 <sync_window>:
c0002202:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002206:	74 58                	je     c0002260 <sync_window+0x5e>
c0002208:	56                   	push   esi
c0002209:	53                   	push   ebx
c000220a:	8d 70 34             	lea    esi,[eax+0x34]
c000220d:	51                   	push   ecx
c000220e:	89 c3                	mov    ebx,eax
c0002210:	6a 01                	push   0x1
c0002212:	ff 70 30             	push   DWORD PTR [eax+0x30]
c0002215:	56                   	push   esi
c0002216:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000221a:	50                   	push   eax
c000221b:	e8 ea fa ff ff       	call   c0001d0a <disk_write>
c0002220:	83 c4 10             	add    esp,0x10
c0002223:	ba 01 00 00 00       	mov    edx,0x1
c0002228:	85 c0                	test   eax,eax
c000222a:	75 2e                	jne    c000225a <sync_window+0x58>
c000222c:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000222f:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0002232:	89 c1                	mov    ecx,eax
c0002234:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002238:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c000223b:	39 d1                	cmp    ecx,edx
c000223d:	73 19                	jae    c0002258 <sync_window+0x56>
c000223f:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c0002243:	75 13                	jne    c0002258 <sync_window+0x56>
c0002245:	6a 01                	push   0x1
c0002247:	01 d0                	add    eax,edx
c0002249:	50                   	push   eax
c000224a:	56                   	push   esi
c000224b:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000224f:	50                   	push   eax
c0002250:	e8 b5 fa ff ff       	call   c0001d0a <disk_write>
c0002255:	83 c4 10             	add    esp,0x10
c0002258:	31 d2                	xor    edx,edx
c000225a:	89 d0                	mov    eax,edx
c000225c:	5a                   	pop    edx
c000225d:	5b                   	pop    ebx
c000225e:	5e                   	pop    esi
c000225f:	c3                   	ret    
c0002260:	31 d2                	xor    edx,edx
c0002262:	89 d0                	mov    eax,edx
c0002264:	c3                   	ret    

c0002265 <move_window>:
c0002265:	57                   	push   edi
c0002266:	56                   	push   esi
c0002267:	31 f6                	xor    esi,esi
c0002269:	53                   	push   ebx
c000226a:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c000226d:	74 32                	je     c00022a1 <move_window+0x3c>
c000226f:	89 c3                	mov    ebx,eax
c0002271:	89 d7                	mov    edi,edx
c0002273:	e8 8a ff ff ff       	call   c0002202 <sync_window>
c0002278:	89 c6                	mov    esi,eax
c000227a:	85 c0                	test   eax,eax
c000227c:	75 23                	jne    c00022a1 <move_window+0x3c>
c000227e:	6a 01                	push   0x1
c0002280:	8d 43 34             	lea    eax,[ebx+0x34]
c0002283:	57                   	push   edi
c0002284:	50                   	push   eax
c0002285:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002289:	50                   	push   eax
c000228a:	e8 65 fa ff ff       	call   c0001cf4 <disk_read>
c000228f:	83 c4 10             	add    esp,0x10
c0002292:	85 c0                	test   eax,eax
c0002294:	74 08                	je     c000229e <move_window+0x39>
c0002296:	be 01 00 00 00       	mov    esi,0x1
c000229b:	83 cf ff             	or     edi,0xffffffff
c000229e:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00022a1:	89 f0                	mov    eax,esi
c00022a3:	5b                   	pop    ebx
c00022a4:	5e                   	pop    esi
c00022a5:	5f                   	pop    edi
c00022a6:	c3                   	ret    

c00022a7 <check_fs>:
c00022a7:	53                   	push   ebx
c00022a8:	89 c3                	mov    ebx,eax
c00022aa:	83 ec 08             	sub    esp,0x8
c00022ad:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00022b1:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c00022b8:	e8 a8 ff ff ff       	call   c0002265 <move_window>
c00022bd:	ba 04 00 00 00       	mov    edx,0x4
c00022c2:	85 c0                	test   eax,eax
c00022c4:	75 68                	jne    c000232e <check_fs+0x87>
c00022c6:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00022cc:	e8 6e fa ff ff       	call   c0001d3f <ld_word>
c00022d1:	ba 03 00 00 00       	mov    edx,0x3
c00022d6:	66 3d 55 aa          	cmp    ax,0xaa55
c00022da:	75 52                	jne    c000232e <check_fs+0x87>
c00022dc:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00022df:	8d 50 18             	lea    edx,[eax+0x18]
c00022e2:	80 fa 01             	cmp    dl,0x1
c00022e5:	76 09                	jbe    c00022f0 <check_fs+0x49>
c00022e7:	ba 02 00 00 00       	mov    edx,0x2
c00022ec:	3c eb                	cmp    al,0xeb
c00022ee:	75 3e                	jne    c000232e <check_fs+0x87>
c00022f0:	ba e8 e8 01 c0       	mov    edx,0xc001e8e8
c00022f5:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00022f8:	b9 03 00 00 00       	mov    ecx,0x3
c00022fd:	e8 89 fa ff ff       	call   c0001d8b <mem_cmp>
c0002302:	31 d2                	xor    edx,edx
c0002304:	85 c0                	test   eax,eax
c0002306:	74 26                	je     c000232e <check_fs+0x87>
c0002308:	ba 9c c9 01 c0       	mov    edx,0xc001c99c
c000230d:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c0002313:	b9 05 00 00 00       	mov    ecx,0x5
c0002318:	e8 6e fa ff ff       	call   c0001d8b <mem_cmp>
c000231d:	31 d2                	xor    edx,edx
c000231f:	85 c0                	test   eax,eax
c0002321:	74 0b                	je     c000232e <check_fs+0x87>
c0002323:	31 d2                	xor    edx,edx
c0002325:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002329:	0f 95 c2             	setne  dl
c000232c:	01 d2                	add    edx,edx
c000232e:	89 d0                	mov    eax,edx
c0002330:	83 c4 08             	add    esp,0x8
c0002333:	5b                   	pop    ebx
c0002334:	c3                   	ret    

c0002335 <find_volume>:
c0002335:	55                   	push   ebp
c0002336:	57                   	push   edi
c0002337:	56                   	push   esi
c0002338:	89 c6                	mov    esi,eax
c000233a:	53                   	push   ebx
c000233b:	89 d3                	mov    ebx,edx
c000233d:	83 ec 2c             	sub    esp,0x2c
c0002340:	31 d2                	xor    edx,edx
c0002342:	e8 60 ff ff ff       	call   c00022a7 <check_fs>
c0002347:	83 f8 02             	cmp    eax,0x2
c000234a:	74 06                	je     c0002352 <find_volume+0x1d>
c000234c:	77 62                	ja     c00023b0 <find_volume+0x7b>
c000234e:	85 db                	test   ebx,ebx
c0002350:	74 5e                	je     c00023b0 <find_volume+0x7b>
c0002352:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c0002356:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c000235c:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c0002362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002366:	89 cf                	mov    edi,ecx
c0002368:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000236c:	89 e8                	mov    eax,ebp
c000236e:	83 c5 10             	add    ebp,0x10
c0002371:	e8 d6 f9 ff ff       	call   c0001d4c <ld_dword>
c0002376:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000237a:	89 01                	mov    DWORD PTR [ecx],eax
c000237c:	83 c1 04             	add    ecx,0x4
c000237f:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c0002383:	75 e3                	jne    c0002368 <find_volume+0x33>
c0002385:	31 ed                	xor    ebp,ebp
c0002387:	85 db                	test   ebx,ebx
c0002389:	74 03                	je     c000238e <find_volume+0x59>
c000238b:	8d 6b ff             	lea    ebp,[ebx-0x1]
c000238e:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c0002391:	b8 03 00 00 00       	mov    eax,0x3
c0002396:	85 d2                	test   edx,edx
c0002398:	74 0c                	je     c00023a6 <find_volume+0x71>
c000239a:	89 f0                	mov    eax,esi
c000239c:	e8 06 ff ff ff       	call   c00022a7 <check_fs>
c00023a1:	83 f8 01             	cmp    eax,0x1
c00023a4:	76 0a                	jbe    c00023b0 <find_volume+0x7b>
c00023a6:	85 db                	test   ebx,ebx
c00023a8:	75 06                	jne    c00023b0 <find_volume+0x7b>
c00023aa:	45                   	inc    ebp
c00023ab:	83 fd 03             	cmp    ebp,0x3
c00023ae:	76 de                	jbe    c000238e <find_volume+0x59>
c00023b0:	83 c4 2c             	add    esp,0x2c
c00023b3:	5b                   	pop    ebx
c00023b4:	5e                   	pop    esi
c00023b5:	5f                   	pop    edi
c00023b6:	5d                   	pop    ebp
c00023b7:	c3                   	ret    

c00023b8 <mount_volume>:
c00023b8:	55                   	push   ebp
c00023b9:	89 d5                	mov    ebp,edx
c00023bb:	57                   	push   edi
c00023bc:	89 cf                	mov    edi,ecx
c00023be:	56                   	push   esi
c00023bf:	53                   	push   ebx
c00023c0:	bb 0b 00 00 00       	mov    ebx,0xb
c00023c5:	83 ec 2c             	sub    esp,0x2c
c00023c8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00023ce:	e8 9b fd ff ff       	call   c000216e <get_ldnumber>
c00023d3:	85 c0                	test   eax,eax
c00023d5:	0f 88 d6 02 00 00    	js     c00026b1 <mount_volume+0x2f9>
c00023db:	8b 34 85 e0 f8 01 c0 	mov    esi,DWORD PTR [eax*4-0x3ffe0720]
c00023e2:	89 c2                	mov    edx,eax
c00023e4:	bb 0c 00 00 00       	mov    ebx,0xc
c00023e9:	85 f6                	test   esi,esi
c00023eb:	0f 84 c0 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c00023f1:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00023f4:	83 e7 fe             	and    edi,0xfffffffe
c00023f7:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00023fa:	74 3a                	je     c0002436 <mount_volume+0x7e>
c00023fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002400:	83 ec 0c             	sub    esp,0xc
c0002403:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0002407:	50                   	push   eax
c0002408:	e8 e1 f8 ff ff       	call   c0001cee <disk_status>
c000240d:	83 c4 10             	add    esp,0x10
c0002410:	a8 01                	test   al,0x1
c0002412:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002416:	75 1e                	jne    c0002436 <mount_volume+0x7e>
c0002418:	31 db                	xor    ebx,ebx
c000241a:	89 f9                	mov    ecx,edi
c000241c:	84 c9                	test   cl,cl
c000241e:	0f 84 8d 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002424:	a8 04                	test   al,0x4
c0002426:	0f 84 85 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c000242c:	bb 0a 00 00 00       	mov    ebx,0xa
c0002431:	e9 7b 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002436:	83 ec 0c             	sub    esp,0xc
c0002439:	c6 06 00             	mov    BYTE PTR [esi],0x0
c000243c:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c000243f:	0f b6 c2             	movzx  eax,dl
c0002442:	bb 03 00 00 00       	mov    ebx,0x3
c0002447:	50                   	push   eax
c0002448:	e8 a4 f8 ff ff       	call   c0001cf1 <disk_initialize>
c000244d:	83 c4 10             	add    esp,0x10
c0002450:	a8 01                	test   al,0x1
c0002452:	0f 85 59 02 00 00    	jne    c00026b1 <mount_volume+0x2f9>
c0002458:	89 f9                	mov    ecx,edi
c000245a:	84 c9                	test   cl,cl
c000245c:	74 04                	je     c0002462 <mount_volume+0xaa>
c000245e:	a8 04                	test   al,0x4
c0002460:	75 ca                	jne    c000242c <mount_volume+0x74>
c0002462:	31 d2                	xor    edx,edx
c0002464:	89 f0                	mov    eax,esi
c0002466:	bb 01 00 00 00       	mov    ebx,0x1
c000246b:	e8 c5 fe ff ff       	call   c0002335 <find_volume>
c0002470:	83 f8 04             	cmp    eax,0x4
c0002473:	0f 84 38 02 00 00    	je     c00026b1 <mount_volume+0x2f9>
c0002479:	83 f8 01             	cmp    eax,0x1
c000247c:	76 0a                	jbe    c0002488 <mount_volume+0xd0>
c000247e:	bb 0d 00 00 00       	mov    ebx,0xd
c0002483:	e9 29 02 00 00       	jmp    c00026b1 <mount_volume+0x2f9>
c0002488:	8d 46 3f             	lea    eax,[esi+0x3f]
c000248b:	e8 af f8 ff ff       	call   c0001d3f <ld_word>
c0002490:	66 3d 00 02          	cmp    ax,0x200
c0002494:	75 e8                	jne    c000247e <mount_volume+0xc6>
c0002496:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002499:	e8 a1 f8 ff ff       	call   c0001d3f <ld_word>
c000249e:	0f b7 c0             	movzx  eax,ax
c00024a1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024a5:	85 c0                	test   eax,eax
c00024a7:	75 0c                	jne    c00024b5 <mount_volume+0xfd>
c00024a9:	8d 46 58             	lea    eax,[esi+0x58]
c00024ac:	e8 9b f8 ff ff       	call   c0001d4c <ld_dword>
c00024b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00024b5:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c00024b8:	8b 6e 44             	mov    ebp,DWORD PTR [esi+0x44]
c00024bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00024bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00024c3:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00024c6:	89 e8                	mov    eax,ebp
c00024c8:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00024cb:	8d 45 ff             	lea    eax,[ebp-0x1]
c00024ce:	3c 01                	cmp    al,0x1
c00024d0:	77 ac                	ja     c000247e <mount_volume+0xc6>
c00024d2:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00024d6:	89 c3                	mov    ebx,eax
c00024d8:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00024dc:	66 85 c0             	test   ax,ax
c00024df:	74 9d                	je     c000247e <mount_volume+0xc6>
c00024e1:	8d 40 ff             	lea    eax,[eax-0x1]
c00024e4:	85 d8                	test   eax,ebx
c00024e6:	75 96                	jne    c000247e <mount_volume+0xc6>
c00024e8:	8d 46 45             	lea    eax,[esi+0x45]
c00024eb:	e8 4f f8 ff ff       	call   c0001d3f <ld_word>
c00024f0:	89 c7                	mov    edi,eax
c00024f2:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00024f6:	a8 0f                	test   al,0xf
c00024f8:	75 84                	jne    c000247e <mount_volume+0xc6>
c00024fa:	8d 46 47             	lea    eax,[esi+0x47]
c00024fd:	e8 3d f8 ff ff       	call   c0001d3f <ld_word>
c0002502:	0f b7 d0             	movzx  edx,ax
c0002505:	85 d2                	test   edx,edx
c0002507:	75 0a                	jne    c0002513 <mount_volume+0x15b>
c0002509:	8d 46 54             	lea    eax,[esi+0x54]
c000250c:	e8 3b f8 ff ff       	call   c0001d4c <ld_dword>
c0002511:	89 c2                	mov    edx,eax
c0002513:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002517:	8d 46 42             	lea    eax,[esi+0x42]
c000251a:	e8 20 f8 ff ff       	call   c0001d3f <ld_word>
c000251f:	66 85 c0             	test   ax,ax
c0002522:	0f 84 56 ff ff ff    	je     c000247e <mount_volume+0xc6>
c0002528:	89 e9                	mov    ecx,ebp
c000252a:	0f b7 c0             	movzx  eax,ax
c000252d:	0f b6 e9             	movzx  ebp,cl
c0002530:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002534:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002538:	89 f8                	mov    eax,edi
c000253a:	0f af cd             	imul   ecx,ebp
c000253d:	66 c1 e8 04          	shr    ax,0x4
c0002541:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0002545:	0f b7 c0             	movzx  eax,ax
c0002548:	01 c8                	add    eax,ecx
c000254a:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000254e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002552:	39 c2                	cmp    edx,eax
c0002554:	0f 82 24 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000255a:	29 c2                	sub    edx,eax
c000255c:	89 d5                	mov    ebp,edx
c000255e:	89 d0                	mov    eax,edx
c0002560:	31 d2                	xor    edx,edx
c0002562:	f7 f3                	div    ebx
c0002564:	39 dd                	cmp    ebp,ebx
c0002566:	0f 82 12 ff ff ff    	jb     c000247e <mount_volume+0xc6>
c000256c:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c0002571:	0f 87 07 ff ff ff    	ja     c000247e <mount_volume+0xc6>
c0002577:	3d f5 ff 00 00       	cmp    eax,0xfff5
c000257c:	0f 86 1f 01 00 00    	jbe    c00026a1 <mount_volume+0x2e9>
c0002582:	bb 03 00 00 00       	mov    ebx,0x3
c0002587:	8d 68 02             	lea    ebp,[eax+0x2]
c000258a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000258e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002592:	03 54 24 10          	add    edx,DWORD PTR [esp+0x10]
c0002596:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002599:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c000259c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00025a0:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c00025a3:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00025a7:	83 fb 03             	cmp    ebx,0x3
c00025aa:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c00025ad:	75 21                	jne    c00025d0 <mount_volume+0x218>
c00025af:	8d 46 5e             	lea    eax,[esi+0x5e]
c00025b2:	e8 88 f7 ff ff       	call   c0001d3f <ld_word>
c00025b7:	66 09 c7             	or     di,ax
c00025ba:	0f 85 be fe ff ff    	jne    c000247e <mount_volume+0xc6>
c00025c0:	8d 46 60             	lea    eax,[esi+0x60]
c00025c3:	c1 e5 02             	shl    ebp,0x2
c00025c6:	e8 81 f7 ff ff       	call   c0001d4c <ld_dword>
c00025cb:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025ce:	eb 22                	jmp    c00025f2 <mount_volume+0x23a>
c00025d0:	66 85 ff             	test   di,di
c00025d3:	0f 84 a5 fe ff ff    	je     c000247e <mount_volume+0xc6>
c00025d9:	01 c8                	add    eax,ecx
c00025db:	83 fb 02             	cmp    ebx,0x2
c00025de:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00025e1:	75 04                	jne    c00025e7 <mount_volume+0x22f>
c00025e3:	01 ed                	add    ebp,ebp
c00025e5:	eb 0b                	jmp    c00025f2 <mount_volume+0x23a>
c00025e7:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00025eb:	83 e5 01             	and    ebp,0x1
c00025ee:	d1 e8                	shr    eax,1
c00025f0:	01 c5                	add    ebp,eax
c00025f2:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00025f8:	c1 ed 09             	shr    ebp,0x9
c00025fb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c00025ff:	0f 87 79 fe ff ff    	ja     c000247e <mount_volume+0xc6>
c0002605:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c000260c:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c0002613:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c0002617:	83 fb 03             	cmp    ebx,0x3
c000261a:	75 6e                	jne    c000268a <mount_volume+0x2d2>
c000261c:	8d 46 64             	lea    eax,[esi+0x64]
c000261f:	e8 1b f7 ff ff       	call   c0001d3f <ld_word>
c0002624:	66 48                	dec    ax
c0002626:	75 62                	jne    c000268a <mount_volume+0x2d2>
c0002628:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000262c:	89 f0                	mov    eax,esi
c000262e:	42                   	inc    edx
c000262f:	e8 31 fc ff ff       	call   c0002265 <move_window>
c0002634:	85 c0                	test   eax,eax
c0002636:	75 52                	jne    c000268a <mount_volume+0x2d2>
c0002638:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c000263c:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c0002642:	e8 f8 f6 ff ff       	call   c0001d3f <ld_word>
c0002647:	66 3d 55 aa          	cmp    ax,0xaa55
c000264b:	75 3d                	jne    c000268a <mount_volume+0x2d2>
c000264d:	8d 46 34             	lea    eax,[esi+0x34]
c0002650:	e8 f7 f6 ff ff       	call   c0001d4c <ld_dword>
c0002655:	3d 52 52 61 41       	cmp    eax,0x41615252
c000265a:	75 2e                	jne    c000268a <mount_volume+0x2d2>
c000265c:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c0002662:	e8 e5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002667:	3d 72 72 41 61       	cmp    eax,0x61417272
c000266c:	75 1c                	jne    c000268a <mount_volume+0x2d2>
c000266e:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c0002674:	e8 d3 f6 ff ff       	call   c0001d4c <ld_dword>
c0002679:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000267c:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c0002682:	e8 c5 f6 ff ff       	call   c0001d4c <ld_dword>
c0002687:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000268a:	66 a1 c0 f8 01 c0    	mov    ax,ds:0xc001f8c0
c0002690:	88 1e                	mov    BYTE PTR [esi],bl
c0002692:	40                   	inc    eax
c0002693:	31 db                	xor    ebx,ebx
c0002695:	66 a3 c0 f8 01 c0    	mov    ds:0xc001f8c0,ax
c000269b:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c000269f:	eb 10                	jmp    c00026b1 <mount_volume+0x2f9>
c00026a1:	31 db                	xor    ebx,ebx
c00026a3:	3d f5 0f 00 00       	cmp    eax,0xff5
c00026a8:	0f 97 c3             	seta   bl
c00026ab:	43                   	inc    ebx
c00026ac:	e9 d6 fe ff ff       	jmp    c0002587 <mount_volume+0x1cf>
c00026b1:	83 c4 2c             	add    esp,0x2c
c00026b4:	89 d8                	mov    eax,ebx
c00026b6:	5b                   	pop    ebx
c00026b7:	5e                   	pop    esi
c00026b8:	5f                   	pop    edi
c00026b9:	5d                   	pop    ebp
c00026ba:	c3                   	ret    

c00026bb <put_fat>:
c00026bb:	55                   	push   ebp
c00026bc:	bd 02 00 00 00       	mov    ebp,0x2
c00026c1:	57                   	push   edi
c00026c2:	56                   	push   esi
c00026c3:	53                   	push   ebx
c00026c4:	83 ec 1c             	sub    esp,0x1c
c00026c7:	83 fa 01             	cmp    edx,0x1
c00026ca:	0f 86 31 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d0:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c00026d3:	0f 86 28 01 00 00    	jbe    c0002801 <put_fat+0x146>
c00026d9:	89 c6                	mov    esi,eax
c00026db:	89 cf                	mov    edi,ecx
c00026dd:	8a 00                	mov    al,BYTE PTR [eax]
c00026df:	89 d3                	mov    ebx,edx
c00026e1:	3c 02                	cmp    al,0x2
c00026e3:	0f 84 ac 00 00 00    	je     c0002795 <put_fat+0xda>
c00026e9:	3c 03                	cmp    al,0x3
c00026eb:	0f 84 d1 00 00 00    	je     c00027c2 <put_fat+0x107>
c00026f1:	fe c8                	dec    al
c00026f3:	0f 85 08 01 00 00    	jne    c0002801 <put_fat+0x146>
c00026f9:	89 d1                	mov    ecx,edx
c00026fb:	89 f0                	mov    eax,esi
c00026fd:	d1 e9                	shr    ecx,1
c00026ff:	01 d1                	add    ecx,edx
c0002701:	89 ca                	mov    edx,ecx
c0002703:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002707:	c1 ea 09             	shr    edx,0x9
c000270a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000270d:	e8 53 fb ff ff       	call   c0002265 <move_window>
c0002712:	89 c5                	mov    ebp,eax
c0002714:	85 c0                	test   eax,eax
c0002716:	0f 85 e5 00 00 00    	jne    c0002801 <put_fat+0x146>
c000271c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002720:	8d 46 34             	lea    eax,[esi+0x34]
c0002723:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002727:	8d 41 01             	lea    eax,[ecx+0x1]
c000272a:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0002730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002734:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002738:	89 f8                	mov    eax,edi
c000273a:	83 e3 01             	and    ebx,0x1
c000273d:	74 0c                	je     c000274b <put_fat+0x90>
c000273f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0002741:	89 f8                	mov    eax,edi
c0002743:	83 e2 0f             	and    edx,0xf
c0002746:	c1 e0 04             	shl    eax,0x4
c0002749:	09 d0                	or     eax,edx
c000274b:	88 01                	mov    BYTE PTR [ecx],al
c000274d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002751:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002755:	c1 ea 09             	shr    edx,0x9
c0002758:	89 f0                	mov    eax,esi
c000275a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000275d:	e8 03 fb ff ff       	call   c0002265 <move_window>
c0002762:	89 c5                	mov    ebp,eax
c0002764:	85 c0                	test   eax,eax
c0002766:	0f 85 95 00 00 00    	jne    c0002801 <put_fat+0x146>
c000276c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002770:	25 ff 01 00 00       	and    eax,0x1ff
c0002775:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002779:	85 db                	test   ebx,ebx
c000277b:	74 07                	je     c0002784 <put_fat+0xc9>
c000277d:	c1 ef 04             	shr    edi,0x4
c0002780:	89 f9                	mov    ecx,edi
c0002782:	eb 0d                	jmp    c0002791 <put_fat+0xd6>
c0002784:	8a 08                	mov    cl,BYTE PTR [eax]
c0002786:	c1 ef 08             	shr    edi,0x8
c0002789:	83 e1 f0             	and    ecx,0xfffffff0
c000278c:	83 e7 0f             	and    edi,0xf
c000278f:	09 f9                	or     ecx,edi
c0002791:	88 08                	mov    BYTE PTR [eax],cl
c0002793:	eb 27                	jmp    c00027bc <put_fat+0x101>
c0002795:	c1 ea 08             	shr    edx,0x8
c0002798:	89 f0                	mov    eax,esi
c000279a:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000279d:	e8 c3 fa ff ff       	call   c0002265 <move_window>
c00027a2:	89 c5                	mov    ebp,eax
c00027a4:	85 c0                	test   eax,eax
c00027a6:	75 59                	jne    c0002801 <put_fat+0x146>
c00027a8:	01 db                	add    ebx,ebx
c00027aa:	0f b7 d7             	movzx  edx,di
c00027ad:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c00027b3:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c00027b7:	e8 a8 f5 ff ff       	call   c0001d64 <st_word>
c00027bc:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c00027c0:	eb 3f                	jmp    c0002801 <put_fat+0x146>
c00027c2:	c1 ea 07             	shr    edx,0x7
c00027c5:	89 f0                	mov    eax,esi
c00027c7:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027ca:	e8 96 fa ff ff       	call   c0002265 <move_window>
c00027cf:	89 c5                	mov    ebp,eax
c00027d1:	85 c0                	test   eax,eax
c00027d3:	75 2c                	jne    c0002801 <put_fat+0x146>
c00027d5:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00027db:	c1 e3 02             	shl    ebx,0x2
c00027de:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00027e4:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00027e8:	89 d8                	mov    eax,ebx
c00027ea:	e8 5d f5 ff ff       	call   c0001d4c <ld_dword>
c00027ef:	25 00 00 00 f0       	and    eax,0xf0000000
c00027f4:	09 f8                	or     eax,edi
c00027f6:	89 c2                	mov    edx,eax
c00027f8:	89 d8                	mov    eax,ebx
c00027fa:	e8 69 f5 ff ff       	call   c0001d68 <st_dword>
c00027ff:	eb bb                	jmp    c00027bc <put_fat+0x101>
c0002801:	83 c4 1c             	add    esp,0x1c
c0002804:	89 e8                	mov    eax,ebp
c0002806:	5b                   	pop    ebx
c0002807:	5e                   	pop    esi
c0002808:	5f                   	pop    edi
c0002809:	5d                   	pop    ebp
c000280a:	c3                   	ret    

c000280b <dir_clear>:
c000280b:	55                   	push   ebp
c000280c:	57                   	push   edi
c000280d:	56                   	push   esi
c000280e:	89 c6                	mov    esi,eax
c0002810:	53                   	push   ebx
c0002811:	83 ec 1c             	sub    esp,0x1c
c0002814:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0002818:	e8 e5 f9 ff ff       	call   c0002202 <sync_window>
c000281d:	85 c0                	test   eax,eax
c000281f:	0f 85 c0 00 00 00    	jne    c00028e5 <dir_clear+0xda>
c0002825:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002829:	89 f0                	mov    eax,esi
c000282b:	e8 55 f7 ff ff       	call   c0001f85 <clst2sect>
c0002830:	31 d2                	xor    edx,edx
c0002832:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002835:	89 c5                	mov    ebp,eax
c0002837:	b9 00 02 00 00       	mov    ecx,0x200
c000283c:	8d 46 34             	lea    eax,[esi+0x34]
c000283f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002843:	e8 38 f5 ff ff       	call   c0001d80 <mem_set>
c0002848:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000284c:	c1 e3 09             	shl    ebx,0x9
c000284f:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002855:	76 1b                	jbe    c0002872 <dir_clear+0x67>
c0002857:	bb 00 80 00 00       	mov    ebx,0x8000
c000285c:	eb 14                	jmp    c0002872 <dir_clear+0x67>
c000285e:	83 ec 0c             	sub    esp,0xc
c0002861:	53                   	push   ebx
c0002862:	e8 25 32 00 00       	call   c0005a8c <ff_memalloc>
c0002867:	83 c4 10             	add    esp,0x10
c000286a:	89 c7                	mov    edi,eax
c000286c:	85 c0                	test   eax,eax
c000286e:	75 7c                	jne    c00028ec <dir_clear+0xe1>
c0002870:	d1 eb                	shr    ebx,1
c0002872:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002878:	77 e4                	ja     c000285e <dir_clear+0x53>
c000287a:	31 db                	xor    ebx,ebx
c000287c:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002880:	39 d8                	cmp    eax,ebx
c0002882:	76 53                	jbe    c00028d7 <dir_clear+0xcc>
c0002884:	6a 01                	push   0x1
c0002886:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002889:	50                   	push   eax
c000288a:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000288e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002892:	50                   	push   eax
c0002893:	e8 72 f4 ff ff       	call   c0001d0a <disk_write>
c0002898:	83 c4 10             	add    esp,0x10
c000289b:	85 c0                	test   eax,eax
c000289d:	75 38                	jne    c00028d7 <dir_clear+0xcc>
c000289f:	43                   	inc    ebx
c00028a0:	eb da                	jmp    c000287c <dir_clear+0x71>
c00028a2:	52                   	push   edx
c00028a3:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00028a6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00028aa:	50                   	push   eax
c00028ab:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00028af:	57                   	push   edi
c00028b0:	50                   	push   eax
c00028b1:	e8 54 f4 ff ff       	call   c0001d0a <disk_write>
c00028b6:	83 c4 10             	add    esp,0x10
c00028b9:	85 c0                	test   eax,eax
c00028bb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028bf:	75 0a                	jne    c00028cb <dir_clear+0xc0>
c00028c1:	01 d3                	add    ebx,edx
c00028c3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028c7:	39 d8                	cmp    eax,ebx
c00028c9:	77 d7                	ja     c00028a2 <dir_clear+0x97>
c00028cb:	83 ec 0c             	sub    esp,0xc
c00028ce:	57                   	push   edi
c00028cf:	e8 d0 31 00 00       	call   c0005aa4 <ff_memfree>
c00028d4:	83 c4 10             	add    esp,0x10
c00028d7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00028db:	39 d8                	cmp    eax,ebx
c00028dd:	0f 95 c0             	setne  al
c00028e0:	0f b6 c0             	movzx  eax,al
c00028e3:	eb 19                	jmp    c00028fe <dir_clear+0xf3>
c00028e5:	b8 01 00 00 00       	mov    eax,0x1
c00028ea:	eb 12                	jmp    c00028fe <dir_clear+0xf3>
c00028ec:	89 d9                	mov    ecx,ebx
c00028ee:	31 d2                	xor    edx,edx
c00028f0:	e8 8b f4 ff ff       	call   c0001d80 <mem_set>
c00028f5:	89 da                	mov    edx,ebx
c00028f7:	31 db                	xor    ebx,ebx
c00028f9:	c1 ea 09             	shr    edx,0x9
c00028fc:	eb c5                	jmp    c00028c3 <dir_clear+0xb8>
c00028fe:	83 c4 1c             	add    esp,0x1c
c0002901:	5b                   	pop    ebx
c0002902:	5e                   	pop    esi
c0002903:	5f                   	pop    edi
c0002904:	5d                   	pop    ebp
c0002905:	c3                   	ret    

c0002906 <create_name>:
c0002906:	55                   	push   ebp
c0002907:	89 d5                	mov    ebp,edx
c0002909:	57                   	push   edi
c000290a:	89 c7                	mov    edi,eax
c000290c:	56                   	push   esi
c000290d:	31 f6                	xor    esi,esi
c000290f:	53                   	push   ebx
c0002910:	83 ec 3c             	sub    esp,0x3c
c0002913:	8b 02                	mov    eax,DWORD PTR [edx]
c0002915:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002919:	8b 07                	mov    eax,DWORD PTR [edi]
c000291b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000291e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002922:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0002926:	e8 9b f4 ff ff       	call   c0001dc6 <tchar2uni>
c000292b:	89 c3                	mov    ebx,eax
c000292d:	83 f8 ff             	cmp    eax,0xffffffff
c0002930:	75 0a                	jne    c000293c <create_name+0x36>
c0002932:	b8 06 00 00 00       	mov    eax,0x6
c0002937:	e9 9e 02 00 00       	jmp    c0002bda <create_name+0x2d4>
c000293c:	3d ff ff 00 00       	cmp    eax,0xffff
c0002941:	76 0c                	jbe    c000294f <create_name+0x49>
c0002943:	c1 e8 10             	shr    eax,0x10
c0002946:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000294a:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c000294e:	46                   	inc    esi
c000294f:	66 83 fb 1f          	cmp    bx,0x1f
c0002953:	76 4f                	jbe    c00029a4 <create_name+0x9e>
c0002955:	66 83 fb 5c          	cmp    bx,0x5c
c0002959:	74 35                	je     c0002990 <create_name+0x8a>
c000295b:	66 83 fb 2f          	cmp    bx,0x2f
c000295f:	74 2f                	je     c0002990 <create_name+0x8a>
c0002961:	66 83 fb 7f          	cmp    bx,0x7f
c0002965:	77 11                	ja     c0002978 <create_name+0x72>
c0002967:	0f b7 d3             	movzx  edx,bx
c000296a:	b8 a2 c9 01 c0       	mov    eax,0xc001c9a2
c000296f:	e8 3a f4 ff ff       	call   c0001dae <chk_chr>
c0002974:	85 c0                	test   eax,eax
c0002976:	75 ba                	jne    c0002932 <create_name+0x2c>
c0002978:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000297e:	77 b2                	ja     c0002932 <create_name+0x2c>
c0002980:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002984:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002988:	46                   	inc    esi
c0002989:	eb 97                	jmp    c0002922 <create_name+0x1c>
c000298b:	40                   	inc    eax
c000298c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002990:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002994:	8a 10                	mov    dl,BYTE PTR [eax]
c0002996:	80 fa 2f             	cmp    dl,0x2f
c0002999:	74 f0                	je     c000298b <create_name+0x85>
c000299b:	80 fa 5c             	cmp    dl,0x5c
c000299e:	74 eb                	je     c000298b <create_name+0x85>
c00029a0:	31 db                	xor    ebx,ebx
c00029a2:	eb 02                	jmp    c00029a6 <create_name+0xa0>
c00029a4:	b3 04                	mov    bl,0x4
c00029a6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00029aa:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00029ad:	85 f6                	test   esi,esi
c00029af:	74 18                	je     c00029c9 <create_name+0xc3>
c00029b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029b5:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c00029ba:	66 83 f8 20          	cmp    ax,0x20
c00029be:	74 06                	je     c00029c6 <create_name+0xc0>
c00029c0:	66 83 f8 2e          	cmp    ax,0x2e
c00029c4:	75 03                	jne    c00029c9 <create_name+0xc3>
c00029c6:	4e                   	dec    esi
c00029c7:	eb e4                	jmp    c00029ad <create_name+0xa7>
c00029c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029cd:	31 ed                	xor    ebp,ebp
c00029cf:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c00029d5:	85 f6                	test   esi,esi
c00029d7:	0f 84 55 ff ff ff    	je     c0002932 <create_name+0x2c>
c00029dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029e1:	8d 55 01             	lea    edx,[ebp+0x1]
c00029e4:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c00029e8:	66 83 f8 20          	cmp    ax,0x20
c00029ec:	75 04                	jne    c00029f2 <create_name+0xec>
c00029ee:	89 d5                	mov    ebp,edx
c00029f0:	eb eb                	jmp    c00029dd <create_name+0xd7>
c00029f2:	85 ed                	test   ebp,ebp
c00029f4:	75 06                	jne    c00029fc <create_name+0xf6>
c00029f6:	66 83 f8 2e          	cmp    ax,0x2e
c00029fa:	75 08                	jne    c0002a04 <create_name+0xfe>
c00029fc:	83 cb 03             	or     ebx,0x3
c00029ff:	eb 03                	jmp    c0002a04 <create_name+0xfe>
c0002a01:	4e                   	dec    esi
c0002a02:	74 0c                	je     c0002a10 <create_name+0x10a>
c0002a04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a08:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002a0e:	75 f1                	jne    c0002a01 <create_name+0xfb>
c0002a10:	b9 0b 00 00 00       	mov    ecx,0xb
c0002a15:	8d 47 20             	lea    eax,[edi+0x20]
c0002a18:	ba 20 00 00 00       	mov    edx,0x20
c0002a1d:	e8 5e f3 ff ff       	call   c0001d80 <mem_set>
c0002a22:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0002a2a:	31 c9                	xor    ecx,ecx
c0002a2c:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0002a31:	8d 45 01             	lea    eax,[ebp+0x1]
c0002a34:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002a38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002a3c:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0002a40:	66 85 ed             	test   bp,bp
c0002a43:	0f 84 30 01 00 00    	je     c0002b79 <create_name+0x273>
c0002a49:	66 83 fd 20          	cmp    bp,0x20
c0002a4d:	74 10                	je     c0002a5f <create_name+0x159>
c0002a4f:	66 83 fd 2e          	cmp    bp,0x2e
c0002a53:	75 13                	jne    c0002a68 <create_name+0x162>
c0002a55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a59:	0f 84 6b 01 00 00    	je     c0002bca <create_name+0x2c4>
c0002a5f:	83 cb 03             	or     ebx,0x3
c0002a62:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0002a66:	eb c9                	jmp    c0002a31 <create_name+0x12b>
c0002a68:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0002a6c:	73 0b                	jae    c0002a79 <create_name+0x173>
c0002a6e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a72:	75 47                	jne    c0002abb <create_name+0x1b5>
c0002a74:	e9 51 01 00 00       	jmp    c0002bca <create_name+0x2c4>
c0002a79:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002a7e:	75 10                	jne    c0002a90 <create_name+0x18a>
c0002a80:	83 cb 03             	or     ebx,0x3
c0002a83:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002a8b:	e9 e9 00 00 00       	jmp    c0002b79 <create_name+0x273>
c0002a90:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a94:	74 0d                	je     c0002aa3 <create_name+0x19d>
c0002a96:	83 cb 03             	or     ebx,0x3
c0002a99:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002a9d:	0f 87 d6 00 00 00    	ja     c0002b79 <create_name+0x273>
c0002aa3:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002aa8:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002aac:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0002ab4:	b9 08 00 00 00       	mov    ecx,0x8
c0002ab9:	eb a7                	jmp    c0002a62 <create_name+0x15c>
c0002abb:	66 83 fd 7f          	cmp    bp,0x7f
c0002abf:	76 68                	jbe    c0002b29 <create_name+0x223>
c0002ac1:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002ac5:	88 da                	mov    dl,bl
c0002ac7:	83 ca 02             	or     edx,0x2
c0002aca:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0002ace:	50                   	push   eax
c0002acf:	50                   	push   eax
c0002ad0:	68 b5 01 00 00       	push   0x1b5
c0002ad5:	55                   	push   ebp
c0002ad6:	e8 e1 2f 00 00       	call   c0005abc <ff_uni2oem>
c0002adb:	83 c4 10             	add    esp,0x10
c0002ade:	89 c5                	mov    ebp,eax
c0002ae0:	a8 80                	test   al,0x80
c0002ae2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0002ae6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002aea:	74 0c                	je     c0002af8 <create_name+0x1f2>
c0002aec:	83 e5 7f             	and    ebp,0x7f
c0002aef:	0f b6 ad 60 ca 01 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffe35a0]
c0002af6:	eb 2a                	jmp    c0002b22 <create_name+0x21c>
c0002af8:	66 3d ff 00          	cmp    ax,0xff
c0002afc:	76 24                	jbe    c0002b22 <create_name+0x21c>
c0002afe:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002b02:	48                   	dec    eax
c0002b03:	39 c8                	cmp    eax,ecx
c0002b05:	77 0c                	ja     c0002b13 <create_name+0x20d>
c0002b07:	83 cb 03             	or     ebx,0x3
c0002b0a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002b0e:	e9 4f ff ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b13:	89 e8                	mov    eax,ebp
c0002b15:	88 d3                	mov    bl,dl
c0002b17:	66 c1 e8 08          	shr    ax,0x8
c0002b1b:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b1f:	41                   	inc    ecx
c0002b20:	eb 4b                	jmp    c0002b6d <create_name+0x267>
c0002b22:	88 d3                	mov    bl,dl
c0002b24:	66 85 ed             	test   bp,bp
c0002b27:	74 19                	je     c0002b42 <create_name+0x23c>
c0002b29:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b2d:	0f b7 d5             	movzx  edx,bp
c0002b30:	b8 ab c9 01 c0       	mov    eax,0xc001c9ab
c0002b35:	e8 74 f2 ff ff       	call   c0001dae <chk_chr>
c0002b3a:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b3e:	85 c0                	test   eax,eax
c0002b40:	74 0a                	je     c0002b4c <create_name+0x246>
c0002b42:	83 cb 03             	or     ebx,0x3
c0002b45:	bd 5f 00 00 00       	mov    ebp,0x5f
c0002b4a:	eb 21                	jmp    c0002b6d <create_name+0x267>
c0002b4c:	8d 45 bf             	lea    eax,[ebp-0x41]
c0002b4f:	66 83 f8 19          	cmp    ax,0x19
c0002b53:	77 07                	ja     c0002b5c <create_name+0x256>
c0002b55:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0002b5a:	eb 11                	jmp    c0002b6d <create_name+0x267>
c0002b5c:	8d 45 9f             	lea    eax,[ebp-0x61]
c0002b5f:	66 83 f8 19          	cmp    ax,0x19
c0002b63:	77 08                	ja     c0002b6d <create_name+0x267>
c0002b65:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0002b6a:	83 ed 20             	sub    ebp,0x20
c0002b6d:	89 e8                	mov    eax,ebp
c0002b6f:	88 44 0f 20          	mov    BYTE PTR [edi+ecx*1+0x20],al
c0002b73:	41                   	inc    ecx
c0002b74:	e9 e9 fe ff ff       	jmp    c0002a62 <create_name+0x15c>
c0002b79:	80 7f 20 e5          	cmp    BYTE PTR [edi+0x20],0xe5
c0002b7d:	75 04                	jne    c0002b83 <create_name+0x27d>
c0002b7f:	c6 47 20 05          	mov    BYTE PTR [edi+0x20],0x5
c0002b83:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0002b88:	75 05                	jne    c0002b8f <create_name+0x289>
c0002b8a:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0002b8f:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b93:	83 e0 0c             	and    eax,0xc
c0002b96:	3c 0c                	cmp    al,0xc
c0002b98:	74 0b                	je     c0002ba5 <create_name+0x29f>
c0002b9a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0002b9e:	83 e0 03             	and    eax,0x3
c0002ba1:	3c 03                	cmp    al,0x3
c0002ba3:	75 05                	jne    c0002baa <create_name+0x2a4>
c0002ba5:	83 cb 02             	or     ebx,0x2
c0002ba8:	eb 19                	jmp    c0002bc3 <create_name+0x2bd>
c0002baa:	f6 c3 02             	test   bl,0x2
c0002bad:	75 14                	jne    c0002bc3 <create_name+0x2bd>
c0002baf:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0002bb4:	74 03                	je     c0002bb9 <create_name+0x2b3>
c0002bb6:	83 cb 10             	or     ebx,0x10
c0002bb9:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0002bbe:	74 03                	je     c0002bc3 <create_name+0x2bd>
c0002bc0:	83 cb 08             	or     ebx,0x8
c0002bc3:	88 5f 2b             	mov    BYTE PTR [edi+0x2b],bl
c0002bc6:	31 c0                	xor    eax,eax
c0002bc8:	eb 10                	jmp    c0002bda <create_name+0x2d4>
c0002bca:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0002bcf:	0f 85 ce fe ff ff    	jne    c0002aa3 <create_name+0x19d>
c0002bd5:	e9 a6 fe ff ff       	jmp    c0002a80 <create_name+0x17a>
c0002bda:	83 c4 3c             	add    esp,0x3c
c0002bdd:	5b                   	pop    ebx
c0002bde:	5e                   	pop    esi
c0002bdf:	5f                   	pop    edi
c0002be0:	5d                   	pop    ebp
c0002be1:	c3                   	ret    

c0002be2 <cmp_lfn>:
c0002be2:	55                   	push   ebp
c0002be3:	57                   	push   edi
c0002be4:	89 d7                	mov    edi,edx
c0002be6:	56                   	push   esi
c0002be7:	53                   	push   ebx
c0002be8:	83 ec 1c             	sub    esp,0x1c
c0002beb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002bef:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002bf2:	e8 48 f1 ff ff       	call   c0001d3f <ld_word>
c0002bf7:	66 85 c0             	test   ax,ax
c0002bfa:	74 07                	je     c0002c03 <cmp_lfn+0x21>
c0002bfc:	31 c0                	xor    eax,eax
c0002bfe:	e9 9a 00 00 00       	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c03:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002c05:	bd 01 00 00 00       	mov    ebp,0x1
c0002c0a:	83 e3 3f             	and    ebx,0x3f
c0002c0d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002c15:	4b                   	dec    ebx
c0002c16:	6b db 0d             	imul   ebx,ebx,0xd
c0002c19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002c1d:	0f b6 80 e0 ca 01 c0 	movzx  eax,BYTE PTR [eax-0x3ffe3520]
c0002c24:	01 f8                	add    eax,edi
c0002c26:	e8 14 f1 ff ff       	call   c0001d3f <ld_word>
c0002c2b:	66 85 ed             	test   bp,bp
c0002c2e:	89 c6                	mov    esi,eax
c0002c30:	74 3c                	je     c0002c6e <cmp_lfn+0x8c>
c0002c32:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002c38:	77 c2                	ja     c0002bfc <cmp_lfn+0x1a>
c0002c3a:	83 ec 0c             	sub    esp,0xc
c0002c3d:	0f b7 c0             	movzx  eax,ax
c0002c40:	50                   	push   eax
c0002c41:	e8 8e 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c46:	89 c5                	mov    ebp,eax
c0002c48:	8d 43 01             	lea    eax,[ebx+0x1]
c0002c4b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002c4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002c53:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002c57:	89 04 24             	mov    DWORD PTR [esp],eax
c0002c5a:	e8 75 2f 00 00       	call   c0005bd4 <ff_wtoupper>
c0002c5f:	83 c4 10             	add    esp,0x10
c0002c62:	39 c5                	cmp    ebp,eax
c0002c64:	75 96                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c66:	89 f5                	mov    ebp,esi
c0002c68:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002c6c:	eb 04                	jmp    c0002c72 <cmp_lfn+0x90>
c0002c6e:	66 46                	inc    si
c0002c70:	75 8a                	jne    c0002bfc <cmp_lfn+0x1a>
c0002c72:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002c76:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002c7b:	75 9c                	jne    c0002c19 <cmp_lfn+0x37>
c0002c7d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002c80:	74 16                	je     c0002c98 <cmp_lfn+0xb6>
c0002c82:	66 85 ed             	test   bp,bp
c0002c85:	74 11                	je     c0002c98 <cmp_lfn+0xb6>
c0002c87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c8b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002c90:	0f 94 c0             	sete   al
c0002c93:	0f b6 c0             	movzx  eax,al
c0002c96:	eb 05                	jmp    c0002c9d <cmp_lfn+0xbb>
c0002c98:	b8 01 00 00 00       	mov    eax,0x1
c0002c9d:	83 c4 1c             	add    esp,0x1c
c0002ca0:	5b                   	pop    ebx
c0002ca1:	5e                   	pop    esi
c0002ca2:	5f                   	pop    edi
c0002ca3:	5d                   	pop    ebp
c0002ca4:	c3                   	ret    

c0002ca5 <sync_fs>:
c0002ca5:	56                   	push   esi
c0002ca6:	53                   	push   ebx
c0002ca7:	53                   	push   ebx
c0002ca8:	89 c3                	mov    ebx,eax
c0002caa:	e8 53 f5 ff ff       	call   c0002202 <sync_window>
c0002caf:	85 c0                	test   eax,eax
c0002cb1:	0f 85 9a 00 00 00    	jne    c0002d51 <sync_fs+0xac>
c0002cb7:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002cba:	75 7b                	jne    c0002d37 <sync_fs+0x92>
c0002cbc:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002cc0:	75 75                	jne    c0002d37 <sync_fs+0x92>
c0002cc2:	b9 00 02 00 00       	mov    ecx,0x200
c0002cc7:	8d 73 34             	lea    esi,[ebx+0x34]
c0002cca:	31 d2                	xor    edx,edx
c0002ccc:	89 f0                	mov    eax,esi
c0002cce:	e8 ad f0 ff ff       	call   c0001d80 <mem_set>
c0002cd3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002cd9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002cde:	e8 81 f0 ff ff       	call   c0001d64 <st_word>
c0002ce3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002ce8:	89 f0                	mov    eax,esi
c0002cea:	e8 79 f0 ff ff       	call   c0001d68 <st_dword>
c0002cef:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002cf5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002cfa:	e8 69 f0 ff ff       	call   c0001d68 <st_dword>
c0002cff:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002d02:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002d08:	e8 5b f0 ff ff       	call   c0001d68 <st_dword>
c0002d0d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002d10:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002d16:	e8 4d f0 ff ff       	call   c0001d68 <st_dword>
c0002d1b:	6a 01                	push   0x1
c0002d1d:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002d20:	40                   	inc    eax
c0002d21:	50                   	push   eax
c0002d22:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002d25:	56                   	push   esi
c0002d26:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d2a:	50                   	push   eax
c0002d2b:	e8 da ef ff ff       	call   c0001d0a <disk_write>
c0002d30:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002d34:	83 c4 10             	add    esp,0x10
c0002d37:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002d3b:	51                   	push   ecx
c0002d3c:	6a 00                	push   0x0
c0002d3e:	6a 00                	push   0x0
c0002d40:	50                   	push   eax
c0002d41:	e8 da ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d46:	83 c4 10             	add    esp,0x10
c0002d49:	85 c0                	test   eax,eax
c0002d4b:	0f 95 c0             	setne  al
c0002d4e:	0f b6 c0             	movzx  eax,al
c0002d51:	5a                   	pop    edx
c0002d52:	5b                   	pop    ebx
c0002d53:	5e                   	pop    esi
c0002d54:	c3                   	ret    

c0002d55 <create_partition>:
c0002d55:	55                   	push   ebp
c0002d56:	0f b6 c0             	movzx  eax,al
c0002d59:	57                   	push   edi
c0002d5a:	56                   	push   esi
c0002d5b:	53                   	push   ebx
c0002d5c:	83 ec 40             	sub    esp,0x40
c0002d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002d63:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002d67:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002d6b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002d6f:	50                   	push   eax
c0002d70:	6a 01                	push   0x1
c0002d72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002d76:	e8 a5 ef ff ff       	call   c0001d20 <disk_ioctl>
c0002d7b:	83 c4 10             	add    esp,0x10
c0002d7e:	85 c0                	test   eax,eax
c0002d80:	0f 85 69 01 00 00    	jne    c0002eef <create_partition+0x19a>
c0002d86:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002d8a:	b9 05 00 00 00       	mov    ecx,0x5
c0002d8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002d93:	c6 44 24 0b 08       	mov    BYTE PTR [esp+0xb],0x8
c0002d98:	31 d2                	xor    edx,edx
c0002d9a:	0f b6 5c 24 0b       	movzx  ebx,BYTE PTR [esp+0xb]
c0002d9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002da3:	f7 f3                	div    ebx
c0002da5:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002daa:	76 0c                	jbe    c0002db8 <create_partition+0x63>
c0002dac:	d0 64 24 0b          	shl    BYTE PTR [esp+0xb],1
c0002db0:	49                   	dec    ecx
c0002db1:	75 e5                	jne    c0002d98 <create_partition+0x43>
c0002db3:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c0002db8:	b9 00 02 00 00       	mov    ecx,0x200
c0002dbd:	31 d2                	xor    edx,edx
c0002dbf:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dc3:	e8 b8 ef ff ff       	call   c0001d80 <mem_set>
c0002dc8:	b9 64 00 00 00       	mov    ecx,0x64
c0002dcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002dd1:	31 d2                	xor    edx,edx
c0002dd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002ddb:	f7 f1                	div    ecx
c0002ddd:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002de2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002de6:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002dea:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002df0:	85 c9                	test   ecx,ecx
c0002df2:	75 34                	jne    c0002e28 <create_partition+0xd3>
c0002df4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002df8:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dfd:	05 fe 01 00 00       	add    eax,0x1fe
c0002e02:	e8 5d ef ff ff       	call   c0001d64 <st_word>
c0002e07:	6a 01                	push   0x1
c0002e09:	6a 00                	push   0x0
c0002e0b:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002e0f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0002e13:	e8 f2 ee ff ff       	call   c0001d0a <disk_write>
c0002e18:	83 c4 10             	add    esp,0x10
c0002e1b:	85 c0                	test   eax,eax
c0002e1d:	0f 95 c0             	setne  al
c0002e20:	0f b6 c0             	movzx  eax,al
c0002e23:	e9 cc 00 00 00       	jmp    c0002ef4 <create_partition+0x19f>
c0002e28:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002e2c:	76 c6                	jbe    c0002df4 <create_partition+0x9f>
c0002e2e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002e32:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002e36:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002e39:	83 fe 64             	cmp    esi,0x64
c0002e3c:	77 0d                	ja     c0002e4b <create_partition+0xf6>
c0002e3e:	74 07                	je     c0002e47 <create_partition+0xf2>
c0002e40:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002e45:	eb 04                	jmp    c0002e4b <create_partition+0xf6>
c0002e47:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e4b:	31 c0                	xor    eax,eax
c0002e4d:	89 f2                	mov    edx,esi
c0002e4f:	01 ca                	add    edx,ecx
c0002e51:	0f 92 c0             	setb   al
c0002e54:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002e58:	77 04                	ja     c0002e5e <create_partition+0x109>
c0002e5a:	85 c0                	test   eax,eax
c0002e5c:	74 08                	je     c0002e66 <create_partition+0x111>
c0002e5e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002e62:	29 ce                	sub    esi,ecx
c0002e64:	eb 04                	jmp    c0002e6a <create_partition+0x115>
c0002e66:	85 f6                	test   esi,esi
c0002e68:	74 8a                	je     c0002df4 <create_partition+0x9f>
c0002e6a:	89 ca                	mov    edx,ecx
c0002e6c:	89 d8                	mov    eax,ebx
c0002e6e:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002e73:	e8 f0 ee ff ff       	call   c0001d68 <st_dword>
c0002e78:	8d 43 04             	lea    eax,[ebx+0x4]
c0002e7b:	89 f2                	mov    edx,esi
c0002e7d:	83 c3 10             	add    ebx,0x10
c0002e80:	e8 e3 ee ff ff       	call   c0001d68 <st_dword>
c0002e85:	0f b6 7c 24 0b       	movzx  edi,BYTE PTR [esp+0xb]
c0002e8a:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002e8e:	31 d2                	xor    edx,edx
c0002e90:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002e93:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0002e97:	89 c8                	mov    eax,ecx
c0002e99:	01 f1                	add    ecx,esi
c0002e9b:	f7 f5                	div    ebp
c0002e9d:	89 d5                	mov    ebp,edx
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	45                   	inc    ebp
c0002ea2:	f7 f7                	div    edi
c0002ea4:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002ea7:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002eaa:	89 c2                	mov    edx,eax
c0002eac:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002eaf:	c1 ea 02             	shr    edx,0x2
c0002eb2:	83 e2 c0             	and    edx,0xffffffc0
c0002eb5:	09 ea                	or     edx,ebp
c0002eb7:	bd 3f 00 00 00       	mov    ebp,0x3f
c0002ebc:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002ebf:	31 d2                	xor    edx,edx
c0002ec1:	f7 f5                	div    ebp
c0002ec3:	89 d6                	mov    esi,edx
c0002ec5:	31 d2                	xor    edx,edx
c0002ec7:	46                   	inc    esi
c0002ec8:	f7 f7                	div    edi
c0002eca:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002ecd:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002ed0:	89 c7                	mov    edi,eax
c0002ed2:	c1 ef 02             	shr    edi,0x2
c0002ed5:	83 e7 c0             	and    edi,0xffffffc0
c0002ed8:	09 fe                	or     esi,edi
c0002eda:	89 f2                	mov    edx,esi
c0002edc:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002edf:	83 7c 24 0c 04       	cmp    DWORD PTR [esp+0xc],0x4
c0002ee4:	0f 85 06 ff ff ff    	jne    c0002df0 <create_partition+0x9b>
c0002eea:	e9 05 ff ff ff       	jmp    c0002df4 <create_partition+0x9f>
c0002eef:	b8 01 00 00 00       	mov    eax,0x1
c0002ef4:	83 c4 3c             	add    esp,0x3c
c0002ef7:	5b                   	pop    ebx
c0002ef8:	5e                   	pop    esi
c0002ef9:	5f                   	pop    edi
c0002efa:	5d                   	pop    ebp
c0002efb:	c3                   	ret    

c0002efc <get_fileinfo>:
c0002efc:	55                   	push   ebp
c0002efd:	57                   	push   edi
c0002efe:	56                   	push   esi
c0002eff:	53                   	push   ebx
c0002f00:	83 ec 1c             	sub    esp,0x1c
c0002f03:	8b 30                	mov    esi,DWORD PTR [eax]
c0002f05:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002f09:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002f0d:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002f11:	0f 84 c1 01 00 00    	je     c00030d8 <get_fileinfo+0x1dc>
c0002f17:	89 d3                	mov    ebx,edx
c0002f19:	89 c6                	mov    esi,eax
c0002f1b:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002f1f:	74 6a                	je     c0002f8b <get_fileinfo+0x8f>
c0002f21:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002f29:	31 ed                	xor    ebp,ebp
c0002f2b:	31 ff                	xor    edi,edi
c0002f2d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002f31:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f35:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0002f38:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0002f3c:	66 85 d2             	test   dx,dx
c0002f3f:	74 3e                	je     c0002f7f <get_fileinfo+0x83>
c0002f41:	66 85 ed             	test   bp,bp
c0002f44:	75 0c                	jne    c0002f52 <get_fileinfo+0x56>
c0002f46:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0002f4c:	66 3d ff 07          	cmp    ax,0x7ff
c0002f50:	76 22                	jbe    c0002f74 <get_fileinfo+0x78>
c0002f52:	b9 ff 00 00 00       	mov    ecx,0xff
c0002f57:	89 e8                	mov    eax,ebp
c0002f59:	29 f9                	sub    ecx,edi
c0002f5b:	c1 e0 10             	shl    eax,0x10
c0002f5e:	09 d0                	or     eax,edx
c0002f60:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c0002f64:	e8 23 ef ff ff       	call   c0001e8c <put_utf>
c0002f69:	84 c0                	test   al,al
c0002f6b:	74 10                	je     c0002f7d <get_fileinfo+0x81>
c0002f6d:	0f b6 c0             	movzx  eax,al
c0002f70:	31 d2                	xor    edx,edx
c0002f72:	01 c7                	add    edi,eax
c0002f74:	83 44 24 08 02       	add    DWORD PTR [esp+0x8],0x2
c0002f79:	89 d5                	mov    ebp,edx
c0002f7b:	eb b0                	jmp    c0002f2d <get_fileinfo+0x31>
c0002f7d:	31 ff                	xor    edi,edi
c0002f7f:	66 85 ed             	test   bp,bp
c0002f82:	74 02                	je     c0002f86 <get_fileinfo+0x8a>
c0002f84:	31 ff                	xor    edi,edi
c0002f86:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0002f8b:	31 ff                	xor    edi,edi
c0002f8d:	31 c9                	xor    ecx,ecx
c0002f8f:	83 f9 0a             	cmp    ecx,0xa
c0002f92:	0f 87 ad 00 00 00    	ja     c0003045 <get_fileinfo+0x149>
c0002f98:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002f9b:	8d 69 01             	lea    ebp,[ecx+0x1]
c0002f9e:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0002fa2:	66 83 fa 20          	cmp    dx,0x20
c0002fa6:	0f 84 92 00 00 00    	je     c000303e <get_fileinfo+0x142>
c0002fac:	66 83 fa 05          	cmp    dx,0x5
c0002fb0:	75 05                	jne    c0002fb7 <get_fileinfo+0xbb>
c0002fb2:	ba e5 00 00 00       	mov    edx,0xe5
c0002fb7:	83 ff 0b             	cmp    edi,0xb
c0002fba:	77 0b                	ja     c0002fc7 <get_fileinfo+0xcb>
c0002fbc:	83 fd 09             	cmp    ebp,0x9
c0002fbf:	75 06                	jne    c0002fc7 <get_fileinfo+0xcb>
c0002fc1:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c0002fc6:	47                   	inc    edi
c0002fc7:	0f b7 c2             	movzx  eax,dx
c0002fca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002fce:	e8 ed ed ff ff       	call   c0001dc0 <dbc_1st>
c0002fd3:	85 c0                	test   eax,eax
c0002fd5:	74 2f                	je     c0003006 <get_fileinfo+0x10a>
c0002fd7:	83 fd 08             	cmp    ebp,0x8
c0002fda:	74 2a                	je     c0003006 <get_fileinfo+0x10a>
c0002fdc:	83 fd 0b             	cmp    ebp,0xb
c0002fdf:	74 25                	je     c0003006 <get_fileinfo+0x10a>
c0002fe1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0002fe4:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0002fe8:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0002fec:	e8 d2 ed ff ff       	call   c0001dc3 <dbc_2nd>
c0002ff1:	85 c0                	test   eax,eax
c0002ff3:	74 11                	je     c0003006 <get_fileinfo+0x10a>
c0002ff5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ff9:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002ffe:	c1 e2 08             	shl    edx,0x8
c0003001:	8d 69 02             	lea    ebp,[ecx+0x2]
c0003004:	09 c2                	or     edx,eax
c0003006:	0f b7 d2             	movzx  edx,dx
c0003009:	50                   	push   eax
c000300a:	50                   	push   eax
c000300b:	68 b5 01 00 00       	push   0x1b5
c0003010:	52                   	push   edx
c0003011:	e8 46 2b 00 00       	call   c0005b5c <ff_oem2uni>
c0003016:	83 c4 10             	add    esp,0x10
c0003019:	66 85 c0             	test   ax,ax
c000301c:	75 04                	jne    c0003022 <get_fileinfo+0x126>
c000301e:	31 ff                	xor    edi,edi
c0003020:	eb 23                	jmp    c0003045 <get_fileinfo+0x149>
c0003022:	b9 0c 00 00 00       	mov    ecx,0xc
c0003027:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c000302b:	29 f9                	sub    ecx,edi
c000302d:	0f b7 c0             	movzx  eax,ax
c0003030:	e8 57 ee ff ff       	call   c0001e8c <put_utf>
c0003035:	84 c0                	test   al,al
c0003037:	74 e5                	je     c000301e <get_fileinfo+0x122>
c0003039:	0f b6 c0             	movzx  eax,al
c000303c:	01 c7                	add    edi,eax
c000303e:	89 e9                	mov    ecx,ebp
c0003040:	e9 4a ff ff ff       	jmp    c0002f8f <get_fileinfo+0x93>
c0003045:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c000304a:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c000304e:	75 54                	jne    c00030a4 <get_fileinfo+0x1a8>
c0003050:	85 ff                	test   edi,edi
c0003052:	75 0b                	jne    c000305f <get_fileinfo+0x163>
c0003054:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003058:	ba 01 00 00 00       	mov    edx,0x1
c000305d:	eb 33                	jmp    c0003092 <get_fileinfo+0x196>
c000305f:	b1 08                	mov    cl,0x8
c0003061:	31 d2                	xor    edx,edx
c0003063:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003069:	84 c0                	test   al,al
c000306b:	74 25                	je     c0003092 <get_fileinfo+0x196>
c000306d:	66 83 f8 2e          	cmp    ax,0x2e
c0003071:	74 16                	je     c0003089 <get_fileinfo+0x18d>
c0003073:	8d 78 bf             	lea    edi,[eax-0x41]
c0003076:	66 83 ff 19          	cmp    di,0x19
c000307a:	77 0f                	ja     c000308b <get_fileinfo+0x18f>
c000307c:	8b 7e 1c             	mov    edi,DWORD PTR [esi+0x1c]
c000307f:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0003082:	74 07                	je     c000308b <get_fileinfo+0x18f>
c0003084:	83 c0 20             	add    eax,0x20
c0003087:	eb 02                	jmp    c000308b <get_fileinfo+0x18f>
c0003089:	b1 10                	mov    cl,0x10
c000308b:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c000308f:	42                   	inc    edx
c0003090:	eb d1                	jmp    c0003063 <get_fileinfo+0x167>
c0003092:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c0003097:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000309a:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c000309e:	75 04                	jne    c00030a4 <get_fileinfo+0x1a8>
c00030a0:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c00030a4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030a7:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c00030aa:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c00030ad:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030b0:	83 c0 1c             	add    eax,0x1c
c00030b3:	e8 94 ec ff ff       	call   c0001d4c <ld_dword>
c00030b8:	89 03                	mov    DWORD PTR [ebx],eax
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	83 c0 16             	add    eax,0x16
c00030c0:	e8 7a ec ff ff       	call   c0001d3f <ld_word>
c00030c5:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00030c9:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030cc:	83 c0 18             	add    eax,0x18
c00030cf:	e8 6b ec ff ff       	call   c0001d3f <ld_word>
c00030d4:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00030d8:	83 c4 1c             	add    esp,0x1c
c00030db:	5b                   	pop    ebx
c00030dc:	5e                   	pop    esi
c00030dd:	5f                   	pop    edi
c00030de:	5d                   	pop    ebp
c00030df:	c3                   	ret    

c00030e0 <ld_clust.isra.0>:
c00030e0:	56                   	push   esi
c00030e1:	89 c6                	mov    esi,eax
c00030e3:	53                   	push   ebx
c00030e4:	8d 42 1a             	lea    eax,[edx+0x1a]
c00030e7:	89 d3                	mov    ebx,edx
c00030e9:	e8 51 ec ff ff       	call   c0001d3f <ld_word>
c00030ee:	0f b7 c8             	movzx  ecx,ax
c00030f1:	89 f0                	mov    eax,esi
c00030f3:	3c 03                	cmp    al,0x3
c00030f5:	75 0d                	jne    c0003104 <ld_clust.isra.0+0x24>
c00030f7:	8d 43 14             	lea    eax,[ebx+0x14]
c00030fa:	e8 40 ec ff ff       	call   c0001d3f <ld_word>
c00030ff:	c1 e0 10             	shl    eax,0x10
c0003102:	09 c1                	or     ecx,eax
c0003104:	89 c8                	mov    eax,ecx
c0003106:	5b                   	pop    ebx
c0003107:	5e                   	pop    esi
c0003108:	c3                   	ret    

c0003109 <st_clust.isra.1>:
c0003109:	56                   	push   esi
c000310a:	89 c6                	mov    esi,eax
c000310c:	53                   	push   ebx
c000310d:	89 d3                	mov    ebx,edx
c000310f:	0f b7 d1             	movzx  edx,cx
c0003112:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0003115:	e8 4a ec ff ff       	call   c0001d64 <st_word>
c000311a:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c000311d:	75 0f                	jne    c000312e <st_clust.isra.1+0x25>
c000311f:	c1 e9 10             	shr    ecx,0x10
c0003122:	8d 43 14             	lea    eax,[ebx+0x14]
c0003125:	89 ca                	mov    edx,ecx
c0003127:	5b                   	pop    ebx
c0003128:	5e                   	pop    esi
c0003129:	e9 36 ec ff ff       	jmp    c0001d64 <st_word>
c000312e:	5b                   	pop    ebx
c000312f:	5e                   	pop    esi
c0003130:	c3                   	ret    

c0003131 <get_fat.isra.2>:
c0003131:	b9 01 00 00 00       	mov    ecx,0x1
c0003136:	83 fa 01             	cmp    edx,0x1
c0003139:	0f 86 f1 00 00 00    	jbe    c0003230 <get_fat.isra.2+0xff>
c000313f:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003142:	0f 83 e8 00 00 00    	jae    c0003230 <get_fat.isra.2+0xff>
c0003148:	55                   	push   ebp
c0003149:	57                   	push   edi
c000314a:	89 c7                	mov    edi,eax
c000314c:	56                   	push   esi
c000314d:	89 d6                	mov    esi,edx
c000314f:	53                   	push   ebx
c0003150:	83 ec 0c             	sub    esp,0xc
c0003153:	8a 00                	mov    al,BYTE PTR [eax]
c0003155:	3c 02                	cmp    al,0x2
c0003157:	74 78                	je     c00031d1 <get_fat.isra.2+0xa0>
c0003159:	3c 03                	cmp    al,0x3
c000315b:	0f 84 97 00 00 00    	je     c00031f8 <get_fat.isra.2+0xc7>
c0003161:	fe c8                	dec    al
c0003163:	0f 85 bd 00 00 00    	jne    c0003226 <get_fat.isra.2+0xf5>
c0003169:	89 d3                	mov    ebx,edx
c000316b:	89 f8                	mov    eax,edi
c000316d:	d1 eb                	shr    ebx,1
c000316f:	01 d3                	add    ebx,edx
c0003171:	89 da                	mov    edx,ebx
c0003173:	c1 ea 09             	shr    edx,0x9
c0003176:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003179:	e8 e7 f0 ff ff       	call   c0002265 <move_window>
c000317e:	85 c0                	test   eax,eax
c0003180:	74 08                	je     c000318a <get_fat.isra.2+0x59>
c0003182:	83 c9 ff             	or     ecx,0xffffffff
c0003185:	e9 9c 00 00 00       	jmp    c0003226 <get_fat.isra.2+0xf5>
c000318a:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000318d:	89 f8                	mov    eax,edi
c000318f:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003195:	89 ea                	mov    edx,ebp
c0003197:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c000319b:	c1 ea 09             	shr    edx,0x9
c000319e:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031a1:	e8 bf f0 ff ff       	call   c0002265 <move_window>
c00031a6:	85 c0                	test   eax,eax
c00031a8:	75 d8                	jne    c0003182 <get_fat.isra.2+0x51>
c00031aa:	0f b6 c3             	movzx  eax,bl
c00031ad:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00031b3:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c00031b8:	c1 e3 08             	shl    ebx,0x8
c00031bb:	09 c3                	or     ebx,eax
c00031bd:	89 d9                	mov    ecx,ebx
c00031bf:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00031c5:	83 e6 01             	and    esi,0x1
c00031c8:	74 5c                	je     c0003226 <get_fat.isra.2+0xf5>
c00031ca:	89 d9                	mov    ecx,ebx
c00031cc:	c1 e9 04             	shr    ecx,0x4
c00031cf:	eb 55                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031d1:	c1 ea 08             	shr    edx,0x8
c00031d4:	89 f8                	mov    eax,edi
c00031d6:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00031d9:	e8 87 f0 ff ff       	call   c0002265 <move_window>
c00031de:	85 c0                	test   eax,eax
c00031e0:	75 a0                	jne    c0003182 <get_fat.isra.2+0x51>
c00031e2:	01 f6                	add    esi,esi
c00031e4:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00031ea:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00031ee:	e8 4c eb ff ff       	call   c0001d3f <ld_word>
c00031f3:	0f b7 c8             	movzx  ecx,ax
c00031f6:	eb 2e                	jmp    c0003226 <get_fat.isra.2+0xf5>
c00031f8:	c1 ea 07             	shr    edx,0x7
c00031fb:	89 f8                	mov    eax,edi
c00031fd:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003200:	e8 60 f0 ff ff       	call   c0002265 <move_window>
c0003205:	85 c0                	test   eax,eax
c0003207:	0f 85 75 ff ff ff    	jne    c0003182 <get_fat.isra.2+0x51>
c000320d:	c1 e6 02             	shl    esi,0x2
c0003210:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003216:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c000321a:	e8 2d eb ff ff       	call   c0001d4c <ld_dword>
c000321f:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003224:	89 c1                	mov    ecx,eax
c0003226:	83 c4 0c             	add    esp,0xc
c0003229:	89 c8                	mov    eax,ecx
c000322b:	5b                   	pop    ebx
c000322c:	5e                   	pop    esi
c000322d:	5f                   	pop    edi
c000322e:	5d                   	pop    ebp
c000322f:	c3                   	ret    
c0003230:	89 c8                	mov    eax,ecx
c0003232:	c3                   	ret    

c0003233 <dir_sdi>:
c0003233:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c0003239:	0f 87 b6 00 00 00    	ja     c00032f5 <dir_sdi+0xc2>
c000323f:	55                   	push   ebp
c0003240:	57                   	push   edi
c0003241:	56                   	push   esi
c0003242:	53                   	push   ebx
c0003243:	89 d3                	mov    ebx,edx
c0003245:	83 ec 1c             	sub    esp,0x1c
c0003248:	f6 c2 1f             	test   dl,0x1f
c000324b:	74 0a                	je     c0003257 <dir_sdi+0x24>
c000324d:	b8 02 00 00 00       	mov    eax,0x2
c0003252:	e9 96 00 00 00       	jmp    c00032ed <dir_sdi+0xba>
c0003257:	89 c6                	mov    esi,eax
c0003259:	8b 38                	mov    edi,DWORD PTR [eax]
c000325b:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c000325e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003261:	85 c9                	test   ecx,ecx
c0003263:	75 23                	jne    c0003288 <dir_sdi+0x55>
c0003265:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0003268:	76 07                	jbe    c0003271 <dir_sdi+0x3e>
c000326a:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c000326d:	85 c0                	test   eax,eax
c000326f:	75 15                	jne    c0003286 <dir_sdi+0x53>
c0003271:	89 da                	mov    edx,ebx
c0003273:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003277:	c1 ea 05             	shr    edx,0x5
c000327a:	39 c2                	cmp    edx,eax
c000327c:	73 cf                	jae    c000324d <dir_sdi+0x1a>
c000327e:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003281:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003284:	eb 3d                	jmp    c00032c3 <dir_sdi+0x90>
c0003286:	89 c1                	mov    ecx,eax
c0003288:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000328c:	c1 e5 09             	shl    ebp,0x9
c000328f:	89 ca                	mov    edx,ecx
c0003291:	39 eb                	cmp    ebx,ebp
c0003293:	72 1c                	jb     c00032b1 <dir_sdi+0x7e>
c0003295:	8b 06                	mov    eax,DWORD PTR [esi]
c0003297:	e8 95 fe ff ff       	call   c0003131 <get_fat.isra.2>
c000329c:	89 c1                	mov    ecx,eax
c000329e:	83 f8 ff             	cmp    eax,0xffffffff
c00032a1:	74 45                	je     c00032e8 <dir_sdi+0xb5>
c00032a3:	83 f8 01             	cmp    eax,0x1
c00032a6:	76 a5                	jbe    c000324d <dir_sdi+0x1a>
c00032a8:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c00032ab:	76 a0                	jbe    c000324d <dir_sdi+0x1a>
c00032ad:	29 eb                	sub    ebx,ebp
c00032af:	eb de                	jmp    c000328f <dir_sdi+0x5c>
c00032b1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00032b5:	89 f8                	mov    eax,edi
c00032b7:	e8 c9 ec ff ff       	call   c0001f85 <clst2sect>
c00032bc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00032c0:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032c3:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00032c6:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00032c9:	85 d2                	test   edx,edx
c00032cb:	74 80                	je     c000324d <dir_sdi+0x1a>
c00032cd:	89 d8                	mov    eax,ebx
c00032cf:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00032d5:	c1 e8 09             	shr    eax,0x9
c00032d8:	01 d0                	add    eax,edx
c00032da:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00032dd:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00032e1:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00032e4:	31 c0                	xor    eax,eax
c00032e6:	eb 05                	jmp    c00032ed <dir_sdi+0xba>
c00032e8:	b8 01 00 00 00       	mov    eax,0x1
c00032ed:	83 c4 1c             	add    esp,0x1c
c00032f0:	5b                   	pop    ebx
c00032f1:	5e                   	pop    esi
c00032f2:	5f                   	pop    edi
c00032f3:	5d                   	pop    ebp
c00032f4:	c3                   	ret    
c00032f5:	b8 02 00 00 00       	mov    eax,0x2
c00032fa:	c3                   	ret    

c00032fb <create_chain>:
c00032fb:	55                   	push   ebp
c00032fc:	89 c5                	mov    ebp,eax
c00032fe:	57                   	push   edi
c00032ff:	89 d7                	mov    edi,edx
c0003301:	56                   	push   esi
c0003302:	53                   	push   ebx
c0003303:	83 ec 1c             	sub    esp,0x1c
c0003306:	85 d2                	test   edx,edx
c0003308:	8b 30                	mov    esi,DWORD PTR [eax]
c000330a:	75 0e                	jne    c000331a <create_chain+0x1f>
c000330c:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c000330f:	85 c9                	test   ecx,ecx
c0003311:	74 34                	je     c0003347 <create_chain+0x4c>
c0003313:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c0003316:	77 34                	ja     c000334c <create_chain+0x51>
c0003318:	eb 2d                	jmp    c0003347 <create_chain+0x4c>
c000331a:	89 f0                	mov    eax,esi
c000331c:	e8 10 fe ff ff       	call   c0003131 <get_fat.isra.2>
c0003321:	89 c3                	mov    ebx,eax
c0003323:	83 f8 01             	cmp    eax,0x1
c0003326:	77 0a                	ja     c0003332 <create_chain+0x37>
c0003328:	bb 01 00 00 00       	mov    ebx,0x1
c000332d:	e9 f9 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003332:	83 f8 ff             	cmp    eax,0xffffffff
c0003335:	0f 84 ed 00 00 00    	je     c0003428 <create_chain+0x12d>
c000333b:	89 f9                	mov    ecx,edi
c000333d:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003340:	76 0a                	jbe    c000334c <create_chain+0x51>
c0003342:	e9 e4 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003347:	b9 01 00 00 00       	mov    ecx,0x1
c000334c:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003350:	75 07                	jne    c0003359 <create_chain+0x5e>
c0003352:	31 db                	xor    ebx,ebx
c0003354:	e9 d2 00 00 00       	jmp    c000342b <create_chain+0x130>
c0003359:	39 f9                	cmp    ecx,edi
c000335b:	75 46                	jne    c00033a3 <create_chain+0xa8>
c000335d:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003360:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003363:	77 05                	ja     c000336a <create_chain+0x6f>
c0003365:	bb 02 00 00 00       	mov    ebx,0x2
c000336a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000336e:	89 da                	mov    edx,ebx
c0003370:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003373:	e8 b9 fd ff ff       	call   c0003131 <get_fat.isra.2>
c0003378:	83 f8 01             	cmp    eax,0x1
c000337b:	74 ab                	je     c0003328 <create_chain+0x2d>
c000337d:	83 f8 ff             	cmp    eax,0xffffffff
c0003380:	0f 84 a2 00 00 00    	je     c0003428 <create_chain+0x12d>
c0003386:	85 c0                	test   eax,eax
c0003388:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000338c:	74 11                	je     c000339f <create_chain+0xa4>
c000338e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003391:	83 f8 01             	cmp    eax,0x1
c0003394:	76 0d                	jbe    c00033a3 <create_chain+0xa8>
c0003396:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c0003399:	73 08                	jae    c00033a3 <create_chain+0xa8>
c000339b:	89 c1                	mov    ecx,eax
c000339d:	eb 04                	jmp    c00033a3 <create_chain+0xa8>
c000339f:	85 db                	test   ebx,ebx
c00033a1:	75 3d                	jne    c00033e0 <create_chain+0xe5>
c00033a3:	89 cb                	mov    ebx,ecx
c00033a5:	43                   	inc    ebx
c00033a6:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c00033a9:	77 0a                	ja     c00033b5 <create_chain+0xba>
c00033ab:	83 f9 01             	cmp    ecx,0x1
c00033ae:	76 a2                	jbe    c0003352 <create_chain+0x57>
c00033b0:	bb 02 00 00 00       	mov    ebx,0x2
c00033b5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00033b9:	89 da                	mov    edx,ebx
c00033bb:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00033be:	e8 6e fd ff ff       	call   c0003131 <get_fat.isra.2>
c00033c3:	85 c0                	test   eax,eax
c00033c5:	74 19                	je     c00033e0 <create_chain+0xe5>
c00033c7:	83 f8 01             	cmp    eax,0x1
c00033ca:	0f 84 58 ff ff ff    	je     c0003328 <create_chain+0x2d>
c00033d0:	40                   	inc    eax
c00033d1:	74 55                	je     c0003428 <create_chain+0x12d>
c00033d3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033d7:	39 cb                	cmp    ebx,ecx
c00033d9:	75 ca                	jne    c00033a5 <create_chain+0xaa>
c00033db:	e9 72 ff ff ff       	jmp    c0003352 <create_chain+0x57>
c00033e0:	83 c9 ff             	or     ecx,0xffffffff
c00033e3:	89 da                	mov    edx,ebx
c00033e5:	89 f0                	mov    eax,esi
c00033e7:	e8 cf f2 ff ff       	call   c00026bb <put_fat>
c00033ec:	85 c0                	test   eax,eax
c00033ee:	75 31                	jne    c0003421 <create_chain+0x126>
c00033f0:	85 ff                	test   edi,edi
c00033f2:	75 16                	jne    c000340a <create_chain+0x10f>
c00033f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033f7:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00033fa:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00033fd:	8d 57 fe             	lea    edx,[edi-0x2]
c0003400:	39 d0                	cmp    eax,edx
c0003402:	77 17                	ja     c000341b <create_chain+0x120>
c0003404:	48                   	dec    eax
c0003405:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0003408:	eb 11                	jmp    c000341b <create_chain+0x120>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	89 fa                	mov    edx,edi
c000340e:	89 f0                	mov    eax,esi
c0003410:	e8 a6 f2 ff ff       	call   c00026bb <put_fat>
c0003415:	85 c0                	test   eax,eax
c0003417:	74 db                	je     c00033f4 <create_chain+0xf9>
c0003419:	eb 06                	jmp    c0003421 <create_chain+0x126>
c000341b:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c000341f:	eb 0a                	jmp    c000342b <create_chain+0x130>
c0003421:	48                   	dec    eax
c0003422:	0f 85 00 ff ff ff    	jne    c0003328 <create_chain+0x2d>
c0003428:	83 cb ff             	or     ebx,0xffffffff
c000342b:	83 c4 1c             	add    esp,0x1c
c000342e:	89 d8                	mov    eax,ebx
c0003430:	5b                   	pop    ebx
c0003431:	5e                   	pop    esi
c0003432:	5f                   	pop    edi
c0003433:	5d                   	pop    ebp
c0003434:	c3                   	ret    

c0003435 <remove_chain>:
c0003435:	55                   	push   ebp
c0003436:	57                   	push   edi
c0003437:	56                   	push   esi
c0003438:	89 d6                	mov    esi,edx
c000343a:	53                   	push   ebx
c000343b:	83 ec 0c             	sub    esp,0xc
c000343e:	83 fa 01             	cmp    edx,0x1
c0003441:	8b 18                	mov    ebx,DWORD PTR [eax]
c0003443:	76 65                	jbe    c00034aa <remove_chain+0x75>
c0003445:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003448:	76 60                	jbe    c00034aa <remove_chain+0x75>
c000344a:	89 c5                	mov    ebp,eax
c000344c:	89 ca                	mov    edx,ecx
c000344e:	85 c9                	test   ecx,ecx
c0003450:	74 0e                	je     c0003460 <remove_chain+0x2b>
c0003452:	83 c9 ff             	or     ecx,0xffffffff
c0003455:	89 d8                	mov    eax,ebx
c0003457:	e8 5f f2 ff ff       	call   c00026bb <put_fat>
c000345c:	85 c0                	test   eax,eax
c000345e:	75 56                	jne    c00034b6 <remove_chain+0x81>
c0003460:	89 f2                	mov    edx,esi
c0003462:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003465:	e8 c7 fc ff ff       	call   c0003131 <get_fat.isra.2>
c000346a:	89 c7                	mov    edi,eax
c000346c:	85 c0                	test   eax,eax
c000346e:	75 04                	jne    c0003474 <remove_chain+0x3f>
c0003470:	31 c0                	xor    eax,eax
c0003472:	eb 42                	jmp    c00034b6 <remove_chain+0x81>
c0003474:	83 f8 01             	cmp    eax,0x1
c0003477:	74 31                	je     c00034aa <remove_chain+0x75>
c0003479:	83 f8 ff             	cmp    eax,0xffffffff
c000347c:	74 33                	je     c00034b1 <remove_chain+0x7c>
c000347e:	31 c9                	xor    ecx,ecx
c0003480:	89 f2                	mov    edx,esi
c0003482:	89 d8                	mov    eax,ebx
c0003484:	e8 32 f2 ff ff       	call   c00026bb <put_fat>
c0003489:	85 c0                	test   eax,eax
c000348b:	75 29                	jne    c00034b6 <remove_chain+0x81>
c000348d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003490:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003493:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003496:	39 c8                	cmp    eax,ecx
c0003498:	73 08                	jae    c00034a2 <remove_chain+0x6d>
c000349a:	40                   	inc    eax
c000349b:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000349f:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00034a2:	89 fe                	mov    esi,edi
c00034a4:	39 fa                	cmp    edx,edi
c00034a6:	77 b8                	ja     c0003460 <remove_chain+0x2b>
c00034a8:	eb c6                	jmp    c0003470 <remove_chain+0x3b>
c00034aa:	b8 02 00 00 00       	mov    eax,0x2
c00034af:	eb 05                	jmp    c00034b6 <remove_chain+0x81>
c00034b1:	b8 01 00 00 00       	mov    eax,0x1
c00034b6:	83 c4 0c             	add    esp,0xc
c00034b9:	5b                   	pop    ebx
c00034ba:	5e                   	pop    esi
c00034bb:	5f                   	pop    edi
c00034bc:	5d                   	pop    ebp
c00034bd:	c3                   	ret    

c00034be <dir_next>:
c00034be:	55                   	push   ebp
c00034bf:	57                   	push   edi
c00034c0:	56                   	push   esi
c00034c1:	53                   	push   ebx
c00034c2:	83 ec 1c             	sub    esp,0x1c
c00034c5:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00034c8:	8b 28                	mov    ebp,DWORD PTR [eax]
c00034ca:	83 c7 20             	add    edi,0x20
c00034cd:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00034d3:	76 07                	jbe    c00034dc <dir_next+0x1e>
c00034d5:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00034dc:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00034df:	b9 04 00 00 00       	mov    ecx,0x4
c00034e4:	85 f6                	test   esi,esi
c00034e6:	0f 84 cd 00 00 00    	je     c00035b9 <dir_next+0xfb>
c00034ec:	89 c3                	mov    ebx,eax
c00034ee:	89 d1                	mov    ecx,edx
c00034f0:	89 f8                	mov    eax,edi
c00034f2:	25 ff 01 00 00       	and    eax,0x1ff
c00034f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00034fb:	0f 85 a8 00 00 00    	jne    c00035a9 <dir_next+0xeb>
c0003501:	46                   	inc    esi
c0003502:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003505:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c0003508:	85 d2                	test   edx,edx
c000350a:	75 22                	jne    c000352e <dir_next+0x70>
c000350c:	89 fa                	mov    edx,edi
c000350e:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003512:	c1 ea 05             	shr    edx,0x5
c0003515:	39 c2                	cmp    edx,eax
c0003517:	0f 82 8c 00 00 00    	jb     c00035a9 <dir_next+0xeb>
c000351d:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003524:	b9 04 00 00 00       	mov    ecx,0x4
c0003529:	e9 8b 00 00 00       	jmp    c00035b9 <dir_next+0xfb>
c000352e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003532:	89 fe                	mov    esi,edi
c0003534:	48                   	dec    eax
c0003535:	c1 ee 09             	shr    esi,0x9
c0003538:	85 f0                	test   eax,esi
c000353a:	75 6d                	jne    c00035a9 <dir_next+0xeb>
c000353c:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003540:	89 e8                	mov    eax,ebp
c0003542:	e8 ea fb ff ff       	call   c0003131 <get_fat.isra.2>
c0003547:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000354b:	89 c6                	mov    esi,eax
c000354d:	83 f8 01             	cmp    eax,0x1
c0003550:	77 07                	ja     c0003559 <dir_next+0x9b>
c0003552:	b9 02 00 00 00       	mov    ecx,0x2
c0003557:	eb 60                	jmp    c00035b9 <dir_next+0xfb>
c0003559:	83 f8 ff             	cmp    eax,0xffffffff
c000355c:	75 07                	jne    c0003565 <dir_next+0xa7>
c000355e:	b9 01 00 00 00       	mov    ecx,0x1
c0003563:	eb 54                	jmp    c00035b9 <dir_next+0xfb>
c0003565:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003568:	77 30                	ja     c000359a <dir_next+0xdc>
c000356a:	85 c9                	test   ecx,ecx
c000356c:	74 af                	je     c000351d <dir_next+0x5f>
c000356e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003571:	89 d8                	mov    eax,ebx
c0003573:	e8 83 fd ff ff       	call   c00032fb <create_chain>
c0003578:	b9 07 00 00 00       	mov    ecx,0x7
c000357d:	89 c6                	mov    esi,eax
c000357f:	85 c0                	test   eax,eax
c0003581:	74 36                	je     c00035b9 <dir_next+0xfb>
c0003583:	83 f8 01             	cmp    eax,0x1
c0003586:	74 ca                	je     c0003552 <dir_next+0x94>
c0003588:	83 f8 ff             	cmp    eax,0xffffffff
c000358b:	74 d1                	je     c000355e <dir_next+0xa0>
c000358d:	89 c2                	mov    edx,eax
c000358f:	89 e8                	mov    eax,ebp
c0003591:	e8 75 f2 ff ff       	call   c000280b <dir_clear>
c0003596:	85 c0                	test   eax,eax
c0003598:	75 c4                	jne    c000355e <dir_next+0xa0>
c000359a:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000359d:	89 f2                	mov    edx,esi
c000359f:	89 e8                	mov    eax,ebp
c00035a1:	e8 df e9 ff ff       	call   c0001f85 <clst2sect>
c00035a6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00035a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00035ad:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c00035b0:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00035b4:	31 c9                	xor    ecx,ecx
c00035b6:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00035b9:	83 c4 1c             	add    esp,0x1c
c00035bc:	89 c8                	mov    eax,ecx
c00035be:	5b                   	pop    ebx
c00035bf:	5e                   	pop    esi
c00035c0:	5f                   	pop    edi
c00035c1:	5d                   	pop    ebp
c00035c2:	c3                   	ret    

c00035c3 <dir_alloc>:
c00035c3:	55                   	push   ebp
c00035c4:	89 c5                	mov    ebp,eax
c00035c6:	57                   	push   edi
c00035c7:	89 d7                	mov    edi,edx
c00035c9:	56                   	push   esi
c00035ca:	31 d2                	xor    edx,edx
c00035cc:	53                   	push   ebx
c00035cd:	83 ec 0c             	sub    esp,0xc
c00035d0:	8b 30                	mov    esi,DWORD PTR [eax]
c00035d2:	e8 5c fc ff ff       	call   c0003233 <dir_sdi>
c00035d7:	85 c0                	test   eax,eax
c00035d9:	75 37                	jne    c0003612 <dir_alloc+0x4f>
c00035db:	31 db                	xor    ebx,ebx
c00035dd:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00035e0:	89 f0                	mov    eax,esi
c00035e2:	e8 7e ec ff ff       	call   c0002265 <move_window>
c00035e7:	85 c0                	test   eax,eax
c00035e9:	75 27                	jne    c0003612 <dir_alloc+0x4f>
c00035eb:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00035ee:	8a 12                	mov    dl,BYTE PTR [edx]
c00035f0:	84 d2                	test   dl,dl
c00035f2:	74 05                	je     c00035f9 <dir_alloc+0x36>
c00035f4:	80 fa e5             	cmp    dl,0xe5
c00035f7:	75 07                	jne    c0003600 <dir_alloc+0x3d>
c00035f9:	43                   	inc    ebx
c00035fa:	39 fb                	cmp    ebx,edi
c00035fc:	75 04                	jne    c0003602 <dir_alloc+0x3f>
c00035fe:	eb 1c                	jmp    c000361c <dir_alloc+0x59>
c0003600:	31 db                	xor    ebx,ebx
c0003602:	ba 01 00 00 00       	mov    edx,0x1
c0003607:	89 e8                	mov    eax,ebp
c0003609:	e8 b0 fe ff ff       	call   c00034be <dir_next>
c000360e:	85 c0                	test   eax,eax
c0003610:	74 cb                	je     c00035dd <dir_alloc+0x1a>
c0003612:	83 f8 04             	cmp    eax,0x4
c0003615:	75 05                	jne    c000361c <dir_alloc+0x59>
c0003617:	b8 07 00 00 00       	mov    eax,0x7
c000361c:	83 c4 0c             	add    esp,0xc
c000361f:	5b                   	pop    ebx
c0003620:	5e                   	pop    esi
c0003621:	5f                   	pop    edi
c0003622:	5d                   	pop    ebp
c0003623:	c3                   	ret    

c0003624 <dir_read>:
c0003624:	55                   	push   ebp
c0003625:	57                   	push   edi
c0003626:	bf ff ff ff ff       	mov    edi,0xffffffff
c000362b:	56                   	push   esi
c000362c:	be 04 00 00 00       	mov    esi,0x4
c0003631:	53                   	push   ebx
c0003632:	89 c3                	mov    ebx,eax
c0003634:	83 ec 1c             	sub    esp,0x1c
c0003637:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000363b:	8b 28                	mov    ebp,DWORD PTR [eax]
c000363d:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003642:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003645:	85 d2                	test   edx,edx
c0003647:	0f 84 d8 00 00 00    	je     c0003725 <dir_read+0x101>
c000364d:	89 e8                	mov    eax,ebp
c000364f:	e8 11 ec ff ff       	call   c0002265 <move_window>
c0003654:	89 c6                	mov    esi,eax
c0003656:	85 c0                	test   eax,eax
c0003658:	0f 85 d2 00 00 00    	jne    c0003730 <dir_read+0x10c>
c000365e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003661:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003663:	84 c9                	test   cl,cl
c0003665:	0f 84 c0 00 00 00    	je     c000372b <dir_read+0x107>
c000366b:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c000366e:	83 e0 3f             	and    eax,0x3f
c0003671:	80 f9 2e             	cmp    cl,0x2e
c0003674:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003678:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c000367b:	0f 84 8a 00 00 00    	je     c000370b <dir_read+0xe7>
c0003681:	80 f9 e5             	cmp    cl,0xe5
c0003684:	0f 84 81 00 00 00    	je     c000370b <dir_read+0xe7>
c000368a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000368e:	83 e0 1f             	and    eax,0x1f
c0003691:	83 f8 08             	cmp    eax,0x8
c0003694:	0f 94 c0             	sete   al
c0003697:	0f b6 c0             	movzx  eax,al
c000369a:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000369e:	75 6b                	jne    c000370b <dir_read+0xe7>
c00036a0:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c00036a5:	75 44                	jne    c00036eb <dir_read+0xc7>
c00036a7:	f6 c1 40             	test   cl,0x40
c00036aa:	74 12                	je     c00036be <dir_read+0x9a>
c00036ac:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00036af:	83 e1 bf             	and    ecx,0xffffffbf
c00036b2:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00036b6:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00036b9:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00036bc:	eb 06                	jmp    c00036c4 <dir_read+0xa0>
c00036be:	89 f8                	mov    eax,edi
c00036c0:	38 c8                	cmp    al,cl
c00036c2:	75 47                	jne    c000370b <dir_read+0xe7>
c00036c4:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00036c8:	bf ff ff ff ff       	mov    edi,0xffffffff
c00036cd:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c00036d0:	75 3e                	jne    c0003710 <dir_read+0xec>
c00036d2:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00036d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00036d9:	e8 c4 e8 ff ff       	call   c0001fa2 <pick_lfn>
c00036de:	85 c0                	test   eax,eax
c00036e0:	74 2e                	je     c0003710 <dir_read+0xec>
c00036e2:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c00036e6:	8d 79 ff             	lea    edi,[ecx-0x1]
c00036e9:	eb 25                	jmp    c0003710 <dir_read+0xec>
c00036eb:	89 f8                	mov    eax,edi
c00036ed:	84 c0                	test   al,al
c00036ef:	75 11                	jne    c0003702 <dir_read+0xde>
c00036f1:	89 d0                	mov    eax,edx
c00036f3:	e8 64 ea ff ff       	call   c000215c <sum_sfn>
c00036f8:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c00036fc:	75 04                	jne    c0003702 <dir_read+0xde>
c00036fe:	31 f6                	xor    esi,esi
c0003700:	eb 35                	jmp    c0003737 <dir_read+0x113>
c0003702:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003709:	eb 2c                	jmp    c0003737 <dir_read+0x113>
c000370b:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003710:	31 d2                	xor    edx,edx
c0003712:	89 d8                	mov    eax,ebx
c0003714:	e8 a5 fd ff ff       	call   c00034be <dir_next>
c0003719:	89 c6                	mov    esi,eax
c000371b:	85 c0                	test   eax,eax
c000371d:	0f 84 1f ff ff ff    	je     c0003642 <dir_read+0x1e>
c0003723:	eb 0b                	jmp    c0003730 <dir_read+0x10c>
c0003725:	85 f6                	test   esi,esi
c0003727:	74 d5                	je     c00036fe <dir_read+0xda>
c0003729:	eb 05                	jmp    c0003730 <dir_read+0x10c>
c000372b:	be 04 00 00 00       	mov    esi,0x4
c0003730:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003737:	83 c4 1c             	add    esp,0x1c
c000373a:	89 f0                	mov    eax,esi
c000373c:	5b                   	pop    ebx
c000373d:	5e                   	pop    esi
c000373e:	5f                   	pop    edi
c000373f:	5d                   	pop    ebp
c0003740:	c3                   	ret    

c0003741 <dir_remove>:
c0003741:	57                   	push   edi
c0003742:	56                   	push   esi
c0003743:	53                   	push   ebx
c0003744:	89 c3                	mov    ebx,eax
c0003746:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003749:	8b 30                	mov    esi,DWORD PTR [eax]
c000374b:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000374e:	83 fa ff             	cmp    edx,0xffffffff
c0003751:	74 09                	je     c000375c <dir_remove+0x1b>
c0003753:	e8 db fa ff ff       	call   c0003233 <dir_sdi>
c0003758:	85 c0                	test   eax,eax
c000375a:	75 34                	jne    c0003790 <dir_remove+0x4f>
c000375c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000375f:	89 f0                	mov    eax,esi
c0003761:	e8 ff ea ff ff       	call   c0002265 <move_window>
c0003766:	85 c0                	test   eax,eax
c0003768:	75 1c                	jne    c0003786 <dir_remove+0x45>
c000376a:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000376d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003770:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003774:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003777:	73 17                	jae    c0003790 <dir_remove+0x4f>
c0003779:	31 d2                	xor    edx,edx
c000377b:	89 d8                	mov    eax,ebx
c000377d:	e8 3c fd ff ff       	call   c00034be <dir_next>
c0003782:	85 c0                	test   eax,eax
c0003784:	74 d6                	je     c000375c <dir_remove+0x1b>
c0003786:	83 f8 04             	cmp    eax,0x4
c0003789:	75 05                	jne    c0003790 <dir_remove+0x4f>
c000378b:	b8 02 00 00 00       	mov    eax,0x2
c0003790:	5b                   	pop    ebx
c0003791:	5e                   	pop    esi
c0003792:	5f                   	pop    edi
c0003793:	c3                   	ret    

c0003794 <dir_find>:
c0003794:	55                   	push   ebp
c0003795:	31 d2                	xor    edx,edx
c0003797:	57                   	push   edi
c0003798:	56                   	push   esi
c0003799:	53                   	push   ebx
c000379a:	89 c3                	mov    ebx,eax
c000379c:	83 ec 1c             	sub    esp,0x1c
c000379f:	8b 00                	mov    eax,DWORD PTR [eax]
c00037a1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00037a5:	89 d8                	mov    eax,ebx
c00037a7:	e8 87 fa ff ff       	call   c0003233 <dir_sdi>
c00037ac:	89 c6                	mov    esi,eax
c00037ae:	85 c0                	test   eax,eax
c00037b0:	0f 85 02 01 00 00    	jne    c00038b8 <dir_find+0x124>
c00037b6:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00037bd:	c6 44 24 0e ff       	mov    BYTE PTR [esp+0xe],0xff
c00037c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c7:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00037ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00037ce:	e8 92 ea ff ff       	call   c0002265 <move_window>
c00037d3:	89 c6                	mov    esi,eax
c00037d5:	85 c0                	test   eax,eax
c00037d7:	0f 85 db 00 00 00    	jne    c00038b8 <dir_find+0x124>
c00037dd:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00037e0:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00037e3:	84 c9                	test   cl,cl
c00037e5:	0f 84 c8 00 00 00    	je     c00038b3 <dir_find+0x11f>
c00037eb:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00037ee:	88 d0                	mov    al,dl
c00037f0:	83 e0 3f             	and    eax,0x3f
c00037f3:	80 f9 e5             	cmp    cl,0xe5
c00037f6:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00037f9:	0f 84 93 00 00 00    	je     c0003892 <dir_find+0xfe>
c00037ff:	80 e2 08             	and    dl,0x8
c0003802:	74 0a                	je     c000380e <dir_find+0x7a>
c0003804:	3c 0f                	cmp    al,0xf
c0003806:	0f 85 86 00 00 00    	jne    c0003892 <dir_find+0xfe>
c000380c:	eb 04                	jmp    c0003812 <dir_find+0x7e>
c000380e:	3c 0f                	cmp    al,0xf
c0003810:	75 54                	jne    c0003866 <dir_find+0xd2>
c0003812:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003816:	0f 85 82 00 00 00    	jne    c000389e <dir_find+0x10a>
c000381c:	f6 c1 40             	test   cl,0x40
c000381f:	74 12                	je     c0003833 <dir_find+0x9f>
c0003821:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003824:	83 e1 bf             	and    ecx,0xffffffbf
c0003827:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000382b:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000382e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003831:	eb 06                	jmp    c0003839 <dir_find+0xa5>
c0003833:	89 f8                	mov    eax,edi
c0003835:	38 c8                	cmp    al,cl
c0003837:	75 60                	jne    c0003899 <dir_find+0x105>
c0003839:	8a 44 24 0e          	mov    al,BYTE PTR [esp+0xe]
c000383d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003842:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c0003845:	75 57                	jne    c000389e <dir_find+0x10a>
c0003847:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000384b:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000384f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003852:	89 ea                	mov    edx,ebp
c0003854:	e8 89 f3 ff ff       	call   c0002be2 <cmp_lfn>
c0003859:	85 c0                	test   eax,eax
c000385b:	74 41                	je     c000389e <dir_find+0x10a>
c000385d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0003861:	8d 79 ff             	lea    edi,[ecx-0x1]
c0003864:	eb 38                	jmp    c000389e <dir_find+0x10a>
c0003866:	89 f8                	mov    eax,edi
c0003868:	84 c0                	test   al,al
c000386a:	75 0d                	jne    c0003879 <dir_find+0xe5>
c000386c:	89 e8                	mov    eax,ebp
c000386e:	e8 e9 e8 ff ff       	call   c000215c <sum_sfn>
c0003873:	3a 44 24 0e          	cmp    al,BYTE PTR [esp+0xe]
c0003877:	74 3f                	je     c00038b8 <dir_find+0x124>
c0003879:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c000387d:	75 13                	jne    c0003892 <dir_find+0xfe>
c000387f:	8d 53 20             	lea    edx,[ebx+0x20]
c0003882:	b9 0b 00 00 00       	mov    ecx,0xb
c0003887:	89 e8                	mov    eax,ebp
c0003889:	e8 fd e4 ff ff       	call   c0001d8b <mem_cmp>
c000388e:	85 c0                	test   eax,eax
c0003890:	74 26                	je     c00038b8 <dir_find+0x124>
c0003892:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003899:	bf ff ff ff ff       	mov    edi,0xffffffff
c000389e:	31 d2                	xor    edx,edx
c00038a0:	89 d8                	mov    eax,ebx
c00038a2:	e8 17 fc ff ff       	call   c00034be <dir_next>
c00038a7:	89 c6                	mov    esi,eax
c00038a9:	85 c0                	test   eax,eax
c00038ab:	0f 84 16 ff ff ff    	je     c00037c7 <dir_find+0x33>
c00038b1:	eb 05                	jmp    c00038b8 <dir_find+0x124>
c00038b3:	be 04 00 00 00       	mov    esi,0x4
c00038b8:	83 c4 1c             	add    esp,0x1c
c00038bb:	89 f0                	mov    eax,esi
c00038bd:	5b                   	pop    ebx
c00038be:	5e                   	pop    esi
c00038bf:	5f                   	pop    edi
c00038c0:	5d                   	pop    ebp
c00038c1:	c3                   	ret    

c00038c2 <follow_path>:
c00038c2:	56                   	push   esi
c00038c3:	53                   	push   ebx
c00038c4:	89 c3                	mov    ebx,eax
c00038c6:	83 ec 14             	sub    esp,0x14
c00038c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00038cd:	8b 30                	mov    esi,DWORD PTR [eax]
c00038cf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038d3:	8a 10                	mov    dl,BYTE PTR [eax]
c00038d5:	80 fa 5c             	cmp    dl,0x5c
c00038d8:	75 07                	jne    c00038e1 <follow_path+0x1f>
c00038da:	40                   	inc    eax
c00038db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038df:	eb ee                	jmp    c00038cf <follow_path+0xd>
c00038e1:	80 fa 2f             	cmp    dl,0x2f
c00038e4:	74 f4                	je     c00038da <follow_path+0x18>
c00038e6:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00038ed:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c00038f0:	77 3e                	ja     c0003930 <follow_path+0x6e>
c00038f2:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c00038f6:	31 d2                	xor    edx,edx
c00038f8:	89 d8                	mov    eax,ebx
c00038fa:	e8 34 f9 ff ff       	call   c0003233 <dir_sdi>
c00038ff:	eb 4f                	jmp    c0003950 <follow_path+0x8e>
c0003901:	89 d8                	mov    eax,ebx
c0003903:	e8 8c fe ff ff       	call   c0003794 <dir_find>
c0003908:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c000390b:	85 c0                	test   eax,eax
c000390d:	75 32                	jne    c0003941 <follow_path+0x7f>
c000390f:	80 e2 04             	and    dl,0x4
c0003912:	75 3c                	jne    c0003950 <follow_path+0x8e>
c0003914:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003918:	74 31                	je     c000394b <follow_path+0x89>
c000391a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000391d:	25 ff 01 00 00       	and    eax,0x1ff
c0003922:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003926:	8a 06                	mov    al,BYTE PTR [esi]
c0003928:	e8 b3 f7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000392d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003930:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003934:	89 d8                	mov    eax,ebx
c0003936:	e8 cb ef ff ff       	call   c0002906 <create_name>
c000393b:	85 c0                	test   eax,eax
c000393d:	74 c2                	je     c0003901 <follow_path+0x3f>
c000393f:	eb 0f                	jmp    c0003950 <follow_path+0x8e>
c0003941:	83 f8 04             	cmp    eax,0x4
c0003944:	75 0a                	jne    c0003950 <follow_path+0x8e>
c0003946:	80 e2 04             	and    dl,0x4
c0003949:	75 05                	jne    c0003950 <follow_path+0x8e>
c000394b:	b8 05 00 00 00       	mov    eax,0x5
c0003950:	83 c4 14             	add    esp,0x14
c0003953:	5b                   	pop    ebx
c0003954:	5e                   	pop    esi
c0003955:	c3                   	ret    

c0003956 <dir_register>:
c0003956:	55                   	push   ebp
c0003957:	57                   	push   edi
c0003958:	56                   	push   esi
c0003959:	be 06 00 00 00       	mov    esi,0x6
c000395e:	53                   	push   ebx
c000395f:	83 ec 2c             	sub    esp,0x2c
c0003962:	f6 40 2b a0          	test   BYTE PTR [eax+0x2b],0xa0
c0003966:	0f 85 65 01 00 00    	jne    c0003ad1 <dir_register+0x17b>
c000396c:	8b 38                	mov    edi,DWORD PTR [eax]
c000396e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003976:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003979:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000397d:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003982:	74 06                	je     c000398a <dir_register+0x34>
c0003984:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003988:	eb ef                	jmp    c0003979 <dir_register+0x23>
c000398a:	89 c3                	mov    ebx,eax
c000398c:	b9 0c 00 00 00       	mov    ecx,0xc
c0003991:	8d 40 20             	lea    eax,[eax+0x20]
c0003994:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003998:	89 c2                	mov    edx,eax
c000399a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000399e:	e8 c8 e3 ff ff       	call   c0001d6b <mem_cpy>
c00039a3:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00039a8:	74 48                	je     c00039f2 <dir_register+0x9c>
c00039aa:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c00039ae:	bd 01 00 00 00       	mov    ebp,0x1
c00039b3:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c00039b6:	55                   	push   ebp
c00039b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00039bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039bf:	e8 dc e6 ff ff       	call   c00020a0 <gen_numname>
c00039c4:	58                   	pop    eax
c00039c5:	89 d8                	mov    eax,ebx
c00039c7:	e8 c8 fd ff ff       	call   c0003794 <dir_find>
c00039cc:	89 c6                	mov    esi,eax
c00039ce:	85 c0                	test   eax,eax
c00039d0:	75 10                	jne    c00039e2 <dir_register+0x8c>
c00039d2:	45                   	inc    ebp
c00039d3:	83 fd 64             	cmp    ebp,0x64
c00039d6:	75 db                	jne    c00039b3 <dir_register+0x5d>
c00039d8:	be 07 00 00 00       	mov    esi,0x7
c00039dd:	e9 ef 00 00 00       	jmp    c0003ad1 <dir_register+0x17b>
c00039e2:	83 f8 04             	cmp    eax,0x4
c00039e5:	0f 85 e6 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c00039eb:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00039ef:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c00039f2:	bd 01 00 00 00       	mov    ebp,0x1
c00039f7:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c00039fc:	74 13                	je     c0003a11 <dir_register+0xbb>
c00039fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003a02:	b9 0d 00 00 00       	mov    ecx,0xd
c0003a07:	83 c0 0c             	add    eax,0xc
c0003a0a:	31 d2                	xor    edx,edx
c0003a0c:	f7 f1                	div    ecx
c0003a0e:	8d 68 01             	lea    ebp,[eax+0x1]
c0003a11:	89 ea                	mov    edx,ebp
c0003a13:	89 d8                	mov    eax,ebx
c0003a15:	e8 a9 fb ff ff       	call   c00035c3 <dir_alloc>
c0003a1a:	89 c6                	mov    esi,eax
c0003a1c:	85 c0                	test   eax,eax
c0003a1e:	0f 85 ad 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a24:	4d                   	dec    ebp
c0003a25:	74 6a                	je     c0003a91 <dir_register+0x13b>
c0003a27:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003a2a:	89 e8                	mov    eax,ebp
c0003a2c:	c1 e0 05             	shl    eax,0x5
c0003a2f:	29 c2                	sub    edx,eax
c0003a31:	89 d8                	mov    eax,ebx
c0003a33:	e8 fb f7 ff ff       	call   c0003233 <dir_sdi>
c0003a38:	89 c6                	mov    esi,eax
c0003a3a:	85 c0                	test   eax,eax
c0003a3c:	0f 85 8f 00 00 00    	jne    c0003ad1 <dir_register+0x17b>
c0003a42:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a46:	e8 11 e7 ff ff       	call   c000215c <sum_sfn>
c0003a4b:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0003a4f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a52:	89 f8                	mov    eax,edi
c0003a54:	e8 0c e8 ff ff       	call   c0002265 <move_window>
c0003a59:	89 c6                	mov    esi,eax
c0003a5b:	85 c0                	test   eax,eax
c0003a5d:	75 72                	jne    c0003ad1 <dir_register+0x17b>
c0003a5f:	83 ec 0c             	sub    esp,0xc
c0003a62:	89 e8                	mov    eax,ebp
c0003a64:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0003a69:	0f b6 c8             	movzx  ecx,al
c0003a6c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003a6f:	52                   	push   edx
c0003a70:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003a73:	e8 a4 e5 ff ff       	call   c000201c <put_lfn>
c0003a78:	31 d2                	xor    edx,edx
c0003a7a:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003a7e:	89 d8                	mov    eax,ebx
c0003a80:	e8 39 fa ff ff       	call   c00034be <dir_next>
c0003a85:	83 c4 10             	add    esp,0x10
c0003a88:	89 c6                	mov    esi,eax
c0003a8a:	85 c0                	test   eax,eax
c0003a8c:	75 43                	jne    c0003ad1 <dir_register+0x17b>
c0003a8e:	4d                   	dec    ebp
c0003a8f:	75 be                	jne    c0003a4f <dir_register+0xf9>
c0003a91:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003a94:	89 f8                	mov    eax,edi
c0003a96:	e8 ca e7 ff ff       	call   c0002265 <move_window>
c0003a9b:	89 c6                	mov    esi,eax
c0003a9d:	85 c0                	test   eax,eax
c0003a9f:	75 30                	jne    c0003ad1 <dir_register+0x17b>
c0003aa1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003aa4:	b9 20 00 00 00       	mov    ecx,0x20
c0003aa9:	31 d2                	xor    edx,edx
c0003aab:	e8 d0 e2 ff ff       	call   c0001d80 <mem_set>
c0003ab0:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003ab3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ab7:	b9 0b 00 00 00       	mov    ecx,0xb
c0003abc:	e8 aa e2 ff ff       	call   c0001d6b <mem_cpy>
c0003ac1:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003ac4:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003ac7:	83 e0 18             	and    eax,0x18
c0003aca:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003acd:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003ad1:	83 c4 2c             	add    esp,0x2c
c0003ad4:	89 f0                	mov    eax,esi
c0003ad6:	5b                   	pop    ebx
c0003ad7:	5e                   	pop    esi
c0003ad8:	5f                   	pop    edi
c0003ad9:	5d                   	pop    ebp
c0003ada:	c3                   	ret    

c0003adb <f_mount>:
c0003adb:	53                   	push   ebx
c0003adc:	83 ec 18             	sub    esp,0x18
c0003adf:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003ae3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003ae7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003aeb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003aef:	e8 7a e6 ff ff       	call   c000216e <get_ldnumber>
c0003af4:	89 c2                	mov    edx,eax
c0003af6:	b8 0b 00 00 00       	mov    eax,0xb
c0003afb:	85 d2                	test   edx,edx
c0003afd:	78 39                	js     c0003b38 <f_mount+0x5d>
c0003aff:	8b 04 95 e0 f8 01 c0 	mov    eax,DWORD PTR [edx*4-0x3ffe0720]
c0003b06:	85 c0                	test   eax,eax
c0003b08:	74 03                	je     c0003b0d <f_mount+0x32>
c0003b0a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b0d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b11:	85 c0                	test   eax,eax
c0003b13:	74 03                	je     c0003b18 <f_mount+0x3d>
c0003b15:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003b18:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003b1c:	89 04 95 e0 f8 01 c0 	mov    DWORD PTR [edx*4-0x3ffe0720],eax
c0003b23:	31 c0                	xor    eax,eax
c0003b25:	84 db                	test   bl,bl
c0003b27:	74 0f                	je     c0003b38 <f_mount+0x5d>
c0003b29:	31 c9                	xor    ecx,ecx
c0003b2b:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003b2f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003b33:	e8 80 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b38:	83 c4 18             	add    esp,0x18
c0003b3b:	5b                   	pop    ebx
c0003b3c:	c3                   	ret    

c0003b3d <f_open>:
c0003b3d:	55                   	push   ebp
c0003b3e:	b8 09 00 00 00       	mov    eax,0x9
c0003b43:	57                   	push   edi
c0003b44:	56                   	push   esi
c0003b45:	53                   	push   ebx
c0003b46:	83 ec 5c             	sub    esp,0x5c
c0003b49:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003b4d:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003b51:	85 db                	test   ebx,ebx
c0003b53:	0f 84 a7 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b59:	89 fe                	mov    esi,edi
c0003b5b:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003b5f:	83 e6 3f             	and    esi,0x3f
c0003b62:	89 f0                	mov    eax,esi
c0003b64:	0f b6 c8             	movzx  ecx,al
c0003b67:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003b6b:	e8 48 e8 ff ff       	call   c00023b8 <mount_volume>
c0003b70:	85 c0                	test   eax,eax
c0003b72:	0f 85 82 02 00 00    	jne    c0003dfa <f_open+0x2bd>
c0003b78:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003b7c:	83 ec 0c             	sub    esp,0xc
c0003b7f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003b83:	68 00 02 00 00       	push   0x200
c0003b88:	e8 ff 1e 00 00       	call   c0005a8c <ff_memalloc>
c0003b8d:	83 c4 10             	add    esp,0x10
c0003b90:	89 c5                	mov    ebp,eax
c0003b92:	b8 11 00 00 00       	mov    eax,0x11
c0003b97:	85 ed                	test   ebp,ebp
c0003b99:	0f 84 61 02 00 00    	je     c0003e00 <f_open+0x2c3>
c0003b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003ba3:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ba7:	89 68 0c             	mov    DWORD PTR [eax+0xc],ebp
c0003baa:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003bae:	e8 0f fd ff ff       	call   c00038c2 <follow_path>
c0003bb3:	85 c0                	test   eax,eax
c0003bb5:	75 0c                	jne    c0003bc3 <f_open+0x86>
c0003bb7:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0003bbc:	79 05                	jns    c0003bc3 <f_open+0x86>
c0003bbe:	b8 06 00 00 00       	mov    eax,0x6
c0003bc3:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003bc9:	0f 84 de 00 00 00    	je     c0003cad <f_open+0x170>
c0003bcf:	85 c0                	test   eax,eax
c0003bd1:	74 1e                	je     c0003bf1 <f_open+0xb4>
c0003bd3:	83 f8 04             	cmp    eax,0x4
c0003bd6:	0f 85 06 02 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003bdc:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003be0:	83 ce 08             	or     esi,0x8
c0003be3:	e8 6e fd ff ff       	call   c0003956 <dir_register>
c0003be8:	85 c0                	test   eax,eax
c0003bea:	74 2f                	je     c0003c1b <f_open+0xde>
c0003bec:	e9 f1 01 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003bf1:	b8 07 00 00 00       	mov    eax,0x7
c0003bf6:	f6 44 24 26 11       	test   BYTE PTR [esp+0x26],0x11
c0003bfb:	0f 85 e1 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c01:	b8 08 00 00 00       	mov    eax,0x8
c0003c06:	f7 c7 04 00 00 00    	test   edi,0x4
c0003c0c:	0f 85 d0 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c12:	83 e7 08             	and    edi,0x8
c0003c15:	0f 84 bf 00 00 00    	je     c0003cda <f_open+0x19d>
c0003c1b:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c0003c1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c23:	89 ca                	mov    edx,ecx
c0003c25:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003c29:	8a 00                	mov    al,BYTE PTR [eax]
c0003c2b:	e8 b0 f4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003c30:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003c34:	89 c7                	mov    edi,eax
c0003c36:	ba 00 00 21 50       	mov    edx,0x50210000
c0003c3b:	8d 41 0e             	lea    eax,[ecx+0xe]
c0003c3e:	e8 25 e1 ff ff       	call   c0001d68 <st_dword>
c0003c43:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c47:	31 c9                	xor    ecx,ecx
c0003c49:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003c4d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c51:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003c55:	e8 af f4 ff ff       	call   c0003109 <st_clust.isra.1>
c0003c5a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003c5e:	31 d2                	xor    edx,edx
c0003c60:	83 c0 1c             	add    eax,0x1c
c0003c63:	e8 00 e1 ff ff       	call   c0001d68 <st_dword>
c0003c68:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c6c:	85 ff                	test   edi,edi
c0003c6e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c72:	74 66                	je     c0003cda <f_open+0x19d>
c0003c74:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c78:	31 c9                	xor    ecx,ecx
c0003c7a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0003c7d:	89 fa                	mov    edx,edi
c0003c7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c83:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003c87:	e8 a9 f7 ff ff       	call   c0003435 <remove_chain>
c0003c8c:	85 c0                	test   eax,eax
c0003c8e:	0f 85 4e 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003c94:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003c98:	4f                   	dec    edi
c0003c99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9d:	e8 c3 e5 ff ff       	call   c0002265 <move_window>
c0003ca2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003ca6:	85 c0                	test   eax,eax
c0003ca8:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003cab:	eb 27                	jmp    c0003cd4 <f_open+0x197>
c0003cad:	85 c0                	test   eax,eax
c0003caf:	0f 85 2d 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cb5:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003cb9:	b8 04 00 00 00       	mov    eax,0x4
c0003cbe:	f6 c2 10             	test   dl,0x10
c0003cc1:	0f 85 1b 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cc7:	83 e7 02             	and    edi,0x2
c0003cca:	74 0e                	je     c0003cda <f_open+0x19d>
c0003ccc:	b8 07 00 00 00       	mov    eax,0x7
c0003cd1:	80 e2 01             	and    dl,0x1
c0003cd4:	0f 85 08 01 00 00    	jne    c0003de2 <f_open+0x2a5>
c0003cda:	f7 c6 08 00 00 00    	test   esi,0x8
c0003ce0:	74 03                	je     c0003ce5 <f_open+0x1a8>
c0003ce2:	83 ce 40             	or     esi,0x40
c0003ce5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003ce9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003ced:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0003cf0:	89 fa                	mov    edx,edi
c0003cf2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003cf6:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003cf9:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003cfc:	8a 01                	mov    al,BYTE PTR [ecx]
c0003cfe:	e8 dd f3 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0003d03:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003d06:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003d09:	e8 3e e0 ff ff       	call   c0001d4c <ld_dword>
c0003d0e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003d12:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003d15:	89 0b                	mov    DWORD PTR [ebx],ecx
c0003d17:	31 d2                	xor    edx,edx
c0003d19:	66 8b 41 06          	mov    ax,WORD PTR [ecx+0x6]
c0003d1d:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003d21:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003d25:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003d2c:	89 f0                	mov    eax,esi
c0003d2e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003d35:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003d38:	b9 00 02 00 00       	mov    ecx,0x200
c0003d3d:	8d 43 28             	lea    eax,[ebx+0x28]
c0003d40:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003d44:	e8 37 e0 ff ff       	call   c0001d80 <mem_set>
c0003d49:	83 e6 20             	and    esi,0x20
c0003d4c:	75 07                	jne    c0003d55 <f_open+0x218>
c0003d4e:	31 c0                	xor    eax,eax
c0003d50:	e9 8d 00 00 00       	jmp    c0003de2 <f_open+0x2a5>
c0003d55:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0003d58:	85 ff                	test   edi,edi
c0003d5a:	74 f2                	je     c0003d4e <f_open+0x211>
c0003d5c:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c0003d5f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d63:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003d66:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003d6a:	c1 e6 09             	shl    esi,0x9
c0003d6d:	39 fe                	cmp    esi,edi
c0003d6f:	73 1c                	jae    c0003d8d <f_open+0x250>
c0003d71:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003d73:	29 f7                	sub    edi,esi
c0003d75:	e8 b7 f3 ff ff       	call   c0003131 <get_fat.isra.2>
c0003d7a:	89 c2                	mov    edx,eax
c0003d7c:	83 f8 01             	cmp    eax,0x1
c0003d7f:	76 10                	jbe    c0003d91 <f_open+0x254>
c0003d81:	83 f8 ff             	cmp    eax,0xffffffff
c0003d84:	75 e7                	jne    c0003d6d <f_open+0x230>
c0003d86:	b8 01 00 00 00       	mov    eax,0x1
c0003d8b:	eb 09                	jmp    c0003d96 <f_open+0x259>
c0003d8d:	31 c0                	xor    eax,eax
c0003d8f:	eb 05                	jmp    c0003d96 <f_open+0x259>
c0003d91:	b8 02 00 00 00       	mov    eax,0x2
c0003d96:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003d99:	85 c0                	test   eax,eax
c0003d9b:	75 45                	jne    c0003de2 <f_open+0x2a5>
c0003d9d:	f7 c7 ff 01 00 00    	test   edi,0x1ff
c0003da3:	74 a9                	je     c0003d4e <f_open+0x211>
c0003da5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003da9:	89 f0                	mov    eax,esi
c0003dab:	e8 d5 e1 ff ff       	call   c0001f85 <clst2sect>
c0003db0:	89 c2                	mov    edx,eax
c0003db2:	b8 02 00 00 00       	mov    eax,0x2
c0003db7:	85 d2                	test   edx,edx
c0003db9:	74 27                	je     c0003de2 <f_open+0x2a5>
c0003dbb:	89 f9                	mov    ecx,edi
c0003dbd:	c1 e9 09             	shr    ecx,0x9
c0003dc0:	8d 04 11             	lea    eax,[ecx+edx*1]
c0003dc3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003dc6:	6a 01                	push   0x1
c0003dc8:	50                   	push   eax
c0003dc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003dcd:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003dd1:	50                   	push   eax
c0003dd2:	e8 1d df ff ff       	call   c0001cf4 <disk_read>
c0003dd7:	83 c4 10             	add    esp,0x10
c0003dda:	85 c0                	test   eax,eax
c0003ddc:	0f 95 c0             	setne  al
c0003ddf:	0f b6 c0             	movzx  eax,al
c0003de2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003de6:	83 ec 0c             	sub    esp,0xc
c0003de9:	55                   	push   ebp
c0003dea:	e8 b5 1c 00 00       	call   c0005aa4 <ff_memfree>
c0003def:	83 c4 10             	add    esp,0x10
c0003df2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003df6:	85 c0                	test   eax,eax
c0003df8:	74 06                	je     c0003e00 <f_open+0x2c3>
c0003dfa:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003e00:	83 c4 5c             	add    esp,0x5c
c0003e03:	5b                   	pop    ebx
c0003e04:	5e                   	pop    esi
c0003e05:	5f                   	pop    edi
c0003e06:	5d                   	pop    ebp
c0003e07:	c3                   	ret    

c0003e08 <f_read>:
c0003e08:	55                   	push   ebp
c0003e09:	57                   	push   edi
c0003e0a:	56                   	push   esi
c0003e0b:	53                   	push   ebx
c0003e0c:	83 ec 2c             	sub    esp,0x2c
c0003e0f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003e13:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003e17:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003e1d:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003e21:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003e25:	89 d8                	mov    eax,ebx
c0003e27:	e8 8f e3 ff ff       	call   c00021bb <validate>
c0003e2c:	89 c5                	mov    ebp,eax
c0003e2e:	85 c0                	test   eax,eax
c0003e30:	0f 85 c7 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e36:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003e3a:	85 ed                	test   ebp,ebp
c0003e3c:	0f 85 bb 01 00 00    	jne    c0003ffd <f_read+0x1f5>
c0003e42:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003e46:	0f 84 ac 01 00 00    	je     c0003ff8 <f_read+0x1f0>
c0003e4c:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003e4f:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003e52:	89 c7                	mov    edi,eax
c0003e54:	39 f0                	cmp    eax,esi
c0003e56:	0f 86 ad 00 00 00    	jbe    c0003f09 <f_read+0x101>
c0003e5c:	89 f7                	mov    edi,esi
c0003e5e:	e9 a6 00 00 00       	jmp    c0003f09 <f_read+0x101>
c0003e63:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003e66:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c0003e6c:	0f 85 5b 01 00 00    	jne    c0003fcd <f_read+0x1c5>
c0003e72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e76:	89 d1                	mov    ecx,edx
c0003e78:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0003e7c:	c1 e9 09             	shr    ecx,0x9
c0003e7f:	48                   	dec    eax
c0003e80:	21 c8                	and    eax,ecx
c0003e82:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003e86:	0f 84 8a 00 00 00    	je     c0003f16 <f_read+0x10e>
c0003e8c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e90:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003e93:	89 c8                	mov    eax,ecx
c0003e95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003e99:	e8 e7 e0 ff ff       	call   c0001f85 <clst2sect>
c0003e9e:	85 c0                	test   eax,eax
c0003ea0:	0f 84 88 00 00 00    	je     c0003f2e <f_read+0x126>
c0003ea6:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0003eaa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003eae:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003eb2:	81 ff ff 01 00 00    	cmp    edi,0x1ff
c0003eb8:	0f 86 bd 00 00 00    	jbe    c0003f7b <f_read+0x173>
c0003ebe:	89 fe                	mov    esi,edi
c0003ec0:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003ec4:	c1 ee 09             	shr    esi,0x9
c0003ec7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003ecb:	01 f2                	add    edx,esi
c0003ecd:	39 c2                	cmp    edx,eax
c0003ecf:	76 06                	jbe    c0003ed7 <f_read+0xcf>
c0003ed1:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ed5:	89 c6                	mov    esi,eax
c0003ed7:	56                   	push   esi
c0003ed8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003edc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ee0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ee4:	50                   	push   eax
c0003ee5:	e8 0a de ff ff       	call   c0001cf4 <disk_read>
c0003eea:	83 c4 10             	add    esp,0x10
c0003eed:	85 c0                	test   eax,eax
c0003eef:	75 50                	jne    c0003f41 <f_read+0x139>
c0003ef1:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003ef5:	78 60                	js     c0003f57 <f_read+0x14f>
c0003ef7:	c1 e6 09             	shl    esi,0x9
c0003efa:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003efe:	29 f7                	sub    edi,esi
c0003f00:	01 30                	add    DWORD PTR [eax],esi
c0003f02:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0003f06:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0003f09:	85 ff                	test   edi,edi
c0003f0b:	0f 85 52 ff ff ff    	jne    c0003e63 <f_read+0x5b>
c0003f11:	e9 e7 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f16:	85 d2                	test   edx,edx
c0003f18:	75 05                	jne    c0003f1f <f_read+0x117>
c0003f1a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0003f1d:	eb 0a                	jmp    c0003f29 <f_read+0x121>
c0003f1f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003f22:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003f24:	e8 08 f2 ff ff       	call   c0003131 <get_fat.isra.2>
c0003f29:	83 f8 01             	cmp    eax,0x1
c0003f2c:	77 0e                	ja     c0003f3c <f_read+0x134>
c0003f2e:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0003f32:	bd 02 00 00 00       	mov    ebp,0x2
c0003f37:	e9 c1 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f3c:	83 f8 ff             	cmp    eax,0xffffffff
c0003f3f:	75 0e                	jne    c0003f4f <f_read+0x147>
c0003f41:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0003f45:	bd 01 00 00 00       	mov    ebp,0x1
c0003f4a:	e9 ae 00 00 00       	jmp    c0003ffd <f_read+0x1f5>
c0003f4f:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003f52:	e9 35 ff ff ff       	jmp    c0003e8c <f_read+0x84>
c0003f57:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f5a:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0003f5e:	39 f0                	cmp    eax,esi
c0003f60:	73 95                	jae    c0003ef7 <f_read+0xef>
c0003f62:	c1 e0 09             	shl    eax,0x9
c0003f65:	8d 53 28             	lea    edx,[ebx+0x28]
c0003f68:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0003f6c:	b9 00 02 00 00       	mov    ecx,0x200
c0003f71:	e8 f5 dd ff ff       	call   c0001d6b <mem_cpy>
c0003f76:	e9 7c ff ff ff       	jmp    c0003ef7 <f_read+0xef>
c0003f7b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003f7e:	3b 44 24 04          	cmp    eax,DWORD PTR [esp+0x4]
c0003f82:	74 42                	je     c0003fc6 <f_read+0x1be>
c0003f84:	8d 73 28             	lea    esi,[ebx+0x28]
c0003f87:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0003f8b:	79 19                	jns    c0003fa6 <f_read+0x19e>
c0003f8d:	6a 01                	push   0x1
c0003f8f:	50                   	push   eax
c0003f90:	56                   	push   esi
c0003f91:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003f95:	50                   	push   eax
c0003f96:	e8 6f dd ff ff       	call   c0001d0a <disk_write>
c0003f9b:	83 c4 10             	add    esp,0x10
c0003f9e:	85 c0                	test   eax,eax
c0003fa0:	75 9f                	jne    c0003f41 <f_read+0x139>
c0003fa2:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0003fa6:	6a 01                	push   0x1
c0003fa8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0003fac:	56                   	push   esi
c0003fad:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0003fb1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0003fb5:	50                   	push   eax
c0003fb6:	e8 39 dd ff ff       	call   c0001cf4 <disk_read>
c0003fbb:	83 c4 10             	add    esp,0x10
c0003fbe:	85 c0                	test   eax,eax
c0003fc0:	0f 85 7b ff ff ff    	jne    c0003f41 <f_read+0x139>
c0003fc6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0003fca:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003fcd:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003fd0:	ba 00 02 00 00       	mov    edx,0x200
c0003fd5:	25 ff 01 00 00       	and    eax,0x1ff
c0003fda:	89 fe                	mov    esi,edi
c0003fdc:	29 c2                	sub    edx,eax
c0003fde:	39 d7                	cmp    edi,edx
c0003fe0:	76 02                	jbe    c0003fe4 <f_read+0x1dc>
c0003fe2:	89 d6                	mov    esi,edx
c0003fe4:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c0003fe8:	89 f1                	mov    ecx,esi
c0003fea:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0003fee:	e8 78 dd ff ff       	call   c0001d6b <mem_cpy>
c0003ff3:	e9 02 ff ff ff       	jmp    c0003efa <f_read+0xf2>
c0003ff8:	bd 07 00 00 00       	mov    ebp,0x7
c0003ffd:	83 c4 2c             	add    esp,0x2c
c0004000:	89 e8                	mov    eax,ebp
c0004002:	5b                   	pop    ebx
c0004003:	5e                   	pop    esi
c0004004:	5f                   	pop    edi
c0004005:	5d                   	pop    ebp
c0004006:	c3                   	ret    

c0004007 <f_write>:
c0004007:	55                   	push   ebp
c0004008:	57                   	push   edi
c0004009:	56                   	push   esi
c000400a:	53                   	push   ebx
c000400b:	83 ec 2c             	sub    esp,0x2c
c000400e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004012:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004016:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000401c:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004020:	89 d8                	mov    eax,ebx
c0004022:	e8 94 e1 ff ff       	call   c00021bb <validate>
c0004027:	89 c5                	mov    ebp,eax
c0004029:	85 c0                	test   eax,eax
c000402b:	0f 85 00 02 00 00    	jne    c0004231 <f_write+0x22a>
c0004031:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004035:	85 ed                	test   ebp,ebp
c0004037:	0f 85 f4 01 00 00    	jne    c0004231 <f_write+0x22a>
c000403d:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004041:	0f 84 e5 01 00 00    	je     c000422c <f_write+0x225>
c0004047:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000404a:	89 c7                	mov    edi,eax
c000404c:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004050:	0f 83 ea 00 00 00    	jae    c0004140 <f_write+0x139>
c0004056:	f7 d0                	not    eax
c0004058:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000405c:	e9 df 00 00 00       	jmp    c0004140 <f_write+0x139>
c0004061:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004064:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000406a:	0f 85 8b 01 00 00    	jne    c00041fb <f_write+0x1f4>
c0004070:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004074:	89 d1                	mov    ecx,edx
c0004076:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000407a:	c1 e9 09             	shr    ecx,0x9
c000407d:	48                   	dec    eax
c000407e:	21 c8                	and    eax,ecx
c0004080:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004084:	0f 84 c3 00 00 00    	je     c000414d <f_write+0x146>
c000408a:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c000408e:	0f 88 18 01 00 00    	js     c00041ac <f_write+0x1a5>
c0004094:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004098:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000409b:	89 c8                	mov    eax,ecx
c000409d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00040a1:	e8 df de ff ff       	call   c0001f85 <clst2sect>
c00040a6:	85 c0                	test   eax,eax
c00040a8:	0f 84 c8 00 00 00    	je     c0004176 <f_write+0x16f>
c00040ae:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00040b2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00040b6:	01 c7                	add    edi,eax
c00040b8:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00040c0:	0f 86 0d 01 00 00    	jbe    c00041d3 <f_write+0x1cc>
c00040c6:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00040ca:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00040ce:	c1 ee 09             	shr    esi,0x9
c00040d1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00040d5:	01 f2                	add    edx,esi
c00040d7:	39 c2                	cmp    edx,eax
c00040d9:	76 06                	jbe    c00040e1 <f_write+0xda>
c00040db:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00040df:	89 c6                	mov    esi,eax
c00040e1:	56                   	push   esi
c00040e2:	57                   	push   edi
c00040e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00040e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040eb:	50                   	push   eax
c00040ec:	e8 19 dc ff ff       	call   c0001d0a <disk_write>
c00040f1:	83 c4 10             	add    esp,0x10
c00040f4:	85 c0                	test   eax,eax
c00040f6:	0f 85 8d 00 00 00    	jne    c0004189 <f_write+0x182>
c00040fc:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c00040ff:	29 fa                	sub    edx,edi
c0004101:	39 f2                	cmp    edx,esi
c0004103:	73 18                	jae    c000411d <f_write+0x116>
c0004105:	c1 e2 09             	shl    edx,0x9
c0004108:	8d 43 28             	lea    eax,[ebx+0x28]
c000410b:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c000410f:	b9 00 02 00 00       	mov    ecx,0x200
c0004114:	e8 52 dc ff ff       	call   c0001d6b <mem_cpy>
c0004119:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000411d:	c1 e6 09             	shl    esi,0x9
c0004120:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0004124:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004128:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000412c:	01 30                	add    DWORD PTR [eax],esi
c000412e:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0004131:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004134:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004137:	39 f0                	cmp    eax,esi
c0004139:	73 02                	jae    c000413d <f_write+0x136>
c000413b:	89 f0                	mov    eax,esi
c000413d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004140:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0004145:	0f 85 16 ff ff ff    	jne    c0004061 <f_write+0x5a>
c000414b:	eb 1b                	jmp    c0004168 <f_write+0x161>
c000414d:	85 d2                	test   edx,edx
c000414f:	75 09                	jne    c000415a <f_write+0x153>
c0004151:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004154:	85 c0                	test   eax,eax
c0004156:	75 19                	jne    c0004171 <f_write+0x16a>
c0004158:	eb 03                	jmp    c000415d <f_write+0x156>
c000415a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000415d:	89 d8                	mov    eax,ebx
c000415f:	e8 97 f1 ff ff       	call   c00032fb <create_chain>
c0004164:	85 c0                	test   eax,eax
c0004166:	75 09                	jne    c0004171 <f_write+0x16a>
c0004168:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c000416c:	e9 c0 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004171:	83 f8 01             	cmp    eax,0x1
c0004174:	75 0e                	jne    c0004184 <f_write+0x17d>
c0004176:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000417a:	bd 02 00 00 00       	mov    ebp,0x2
c000417f:	e9 ad 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004184:	83 f8 ff             	cmp    eax,0xffffffff
c0004187:	75 0e                	jne    c0004197 <f_write+0x190>
c0004189:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000418d:	bd 01 00 00 00       	mov    ebp,0x1
c0004192:	e9 9a 00 00 00       	jmp    c0004231 <f_write+0x22a>
c0004197:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000419a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000419e:	0f 85 e6 fe ff ff    	jne    c000408a <f_write+0x83>
c00041a4:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00041a7:	e9 de fe ff ff       	jmp    c000408a <f_write+0x83>
c00041ac:	6a 01                	push   0x1
c00041ae:	8d 43 28             	lea    eax,[ebx+0x28]
c00041b1:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00041b4:	50                   	push   eax
c00041b5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00041b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00041bd:	50                   	push   eax
c00041be:	e8 47 db ff ff       	call   c0001d0a <disk_write>
c00041c3:	83 c4 10             	add    esp,0x10
c00041c6:	85 c0                	test   eax,eax
c00041c8:	75 bf                	jne    c0004189 <f_write+0x182>
c00041ca:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c00041ce:	e9 c1 fe ff ff       	jmp    c0004094 <f_write+0x8d>
c00041d3:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00041d6:	74 20                	je     c00041f8 <f_write+0x1f1>
c00041d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041db:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c00041de:	76 18                	jbe    c00041f8 <f_write+0x1f1>
c00041e0:	6a 01                	push   0x1
c00041e2:	8d 43 28             	lea    eax,[ebx+0x28]
c00041e5:	57                   	push   edi
c00041e6:	50                   	push   eax
c00041e7:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00041eb:	50                   	push   eax
c00041ec:	e8 03 db ff ff       	call   c0001cf4 <disk_read>
c00041f1:	83 c4 10             	add    esp,0x10
c00041f4:	85 c0                	test   eax,eax
c00041f6:	75 91                	jne    c0004189 <f_write+0x182>
c00041f8:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00041fb:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00041fe:	ba 00 02 00 00       	mov    edx,0x200
c0004203:	25 ff 01 00 00       	and    eax,0x1ff
c0004208:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c000420c:	29 c2                	sub    edx,eax
c000420e:	39 d6                	cmp    esi,edx
c0004210:	76 02                	jbe    c0004214 <f_write+0x20d>
c0004212:	89 d6                	mov    esi,edx
c0004214:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c0004218:	89 f1                	mov    ecx,esi
c000421a:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000421e:	e8 48 db ff ff       	call   c0001d6b <mem_cpy>
c0004223:	80 4b 10 80          	or     BYTE PTR [ebx+0x10],0x80
c0004227:	e9 f4 fe ff ff       	jmp    c0004120 <f_write+0x119>
c000422c:	bd 07 00 00 00       	mov    ebp,0x7
c0004231:	83 c4 2c             	add    esp,0x2c
c0004234:	89 e8                	mov    eax,ebp
c0004236:	5b                   	pop    ebx
c0004237:	5e                   	pop    esi
c0004238:	5f                   	pop    edi
c0004239:	5d                   	pop    ebp
c000423a:	c3                   	ret    

c000423b <f_sync>:
c000423b:	56                   	push   esi
c000423c:	53                   	push   ebx
c000423d:	83 ec 14             	sub    esp,0x14
c0004240:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004244:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004248:	89 d8                	mov    eax,ebx
c000424a:	e8 6c df ff ff       	call   c00021bb <validate>
c000424f:	85 c0                	test   eax,eax
c0004251:	0f 85 93 00 00 00    	jne    c00042ea <f_sync+0xaf>
c0004257:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000425a:	f6 c2 40             	test   dl,0x40
c000425d:	0f 84 87 00 00 00    	je     c00042ea <f_sync+0xaf>
c0004263:	84 d2                	test   dl,dl
c0004265:	79 29                	jns    c0004290 <f_sync+0x55>
c0004267:	6a 01                	push   0x1
c0004269:	8d 43 28             	lea    eax,[ebx+0x28]
c000426c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000426f:	50                   	push   eax
c0004270:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004278:	50                   	push   eax
c0004279:	e8 8c da ff ff       	call   c0001d0a <disk_write>
c000427e:	83 c4 10             	add    esp,0x10
c0004281:	89 c2                	mov    edx,eax
c0004283:	b8 01 00 00 00       	mov    eax,0x1
c0004288:	85 d2                	test   edx,edx
c000428a:	75 5e                	jne    c00042ea <f_sync+0xaf>
c000428c:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c0004290:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0004293:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004297:	e8 c9 df ff ff       	call   c0002265 <move_window>
c000429c:	85 c0                	test   eax,eax
c000429e:	75 4a                	jne    c00042ea <f_sync+0xaf>
c00042a0:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00042a3:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c00042a7:	89 f2                	mov    edx,esi
c00042a9:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00042ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00042ae:	e8 56 ee ff ff       	call   c0003109 <st_clust.isra.1>
c00042b3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00042b6:	8d 46 1c             	lea    eax,[esi+0x1c]
c00042b9:	e8 aa da ff ff       	call   c0001d68 <st_dword>
c00042be:	8d 46 16             	lea    eax,[esi+0x16]
c00042c1:	ba 00 00 21 50       	mov    edx,0x50210000
c00042c6:	e8 9d da ff ff       	call   c0001d68 <st_dword>
c00042cb:	8d 46 12             	lea    eax,[esi+0x12]
c00042ce:	31 d2                	xor    edx,edx
c00042d0:	e8 8f da ff ff       	call   c0001d64 <st_word>
c00042d5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042d9:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00042dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00042e1:	e8 bf e9 ff ff       	call   c0002ca5 <sync_fs>
c00042e6:	80 63 10 bf          	and    BYTE PTR [ebx+0x10],0xbf
c00042ea:	83 c4 14             	add    esp,0x14
c00042ed:	5b                   	pop    ebx
c00042ee:	5e                   	pop    esi
c00042ef:	c3                   	ret    

c00042f0 <f_close>:
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 24             	sub    esp,0x24
c00042f4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00042f8:	53                   	push   ebx
c00042f9:	e8 3d ff ff ff       	call   c000423b <f_sync>
c00042fe:	83 c4 10             	add    esp,0x10
c0004301:	85 c0                	test   eax,eax
c0004303:	75 15                	jne    c000431a <f_close+0x2a>
c0004305:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004309:	89 d8                	mov    eax,ebx
c000430b:	e8 ab de ff ff       	call   c00021bb <validate>
c0004310:	85 c0                	test   eax,eax
c0004312:	75 06                	jne    c000431a <f_close+0x2a>
c0004314:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000431a:	83 c4 18             	add    esp,0x18
c000431d:	5b                   	pop    ebx
c000431e:	c3                   	ret    

c000431f <f_lseek>:
c000431f:	55                   	push   ebp
c0004320:	57                   	push   edi
c0004321:	56                   	push   esi
c0004322:	53                   	push   ebx
c0004323:	83 ec 2c             	sub    esp,0x2c
c0004326:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000432a:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c000432e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004332:	89 d8                	mov    eax,ebx
c0004334:	e8 82 de ff ff       	call   c00021bb <validate>
c0004339:	89 c5                	mov    ebp,eax
c000433b:	85 c0                	test   eax,eax
c000433d:	0f 85 79 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c0004343:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004347:	85 ed                	test   ebp,ebp
c0004349:	0f 85 6d 01 00 00    	jne    c00044bc <f_lseek+0x19d>
c000434f:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004352:	39 f0                	cmp    eax,esi
c0004354:	73 08                	jae    c000435e <f_lseek+0x3f>
c0004356:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000435a:	75 02                	jne    c000435e <f_lseek+0x3f>
c000435c:	89 c6                	mov    esi,eax
c000435e:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0004361:	85 f6                	test   esi,esi
c0004363:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000436a:	75 07                	jne    c0004373 <f_lseek+0x54>
c000436c:	31 f6                	xor    esi,esi
c000436e:	e9 e2 00 00 00       	jmp    c0004455 <f_lseek+0x136>
c0004373:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004377:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c000437b:	c1 e7 09             	shl    edi,0x9
c000437e:	85 c9                	test   ecx,ecx
c0004380:	74 28                	je     c00043aa <f_lseek+0x8b>
c0004382:	49                   	dec    ecx
c0004383:	31 d2                	xor    edx,edx
c0004385:	8d 46 ff             	lea    eax,[esi-0x1]
c0004388:	f7 f7                	div    edi
c000438a:	31 d2                	xor    edx,edx
c000438c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004390:	89 c8                	mov    eax,ecx
c0004392:	f7 f7                	div    edi
c0004394:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0004398:	72 10                	jb     c00043aa <f_lseek+0x8b>
c000439a:	89 f8                	mov    eax,edi
c000439c:	f7 d8                	neg    eax
c000439e:	21 c1                	and    ecx,eax
c00043a0:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00043a3:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00043a6:	29 ce                	sub    esi,ecx
c00043a8:	eb 3c                	jmp    c00043e6 <f_lseek+0xc7>
c00043aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00043ad:	85 c0                	test   eax,eax
c00043af:	75 32                	jne    c00043e3 <f_lseek+0xc4>
c00043b1:	31 d2                	xor    edx,edx
c00043b3:	89 d8                	mov    eax,ebx
c00043b5:	e8 41 ef ff ff       	call   c00032fb <create_chain>
c00043ba:	83 f8 01             	cmp    eax,0x1
c00043bd:	75 0e                	jne    c00043cd <f_lseek+0xae>
c00043bf:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00043c3:	bd 02 00 00 00       	mov    ebp,0x2
c00043c8:	e9 ef 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043cd:	83 f8 ff             	cmp    eax,0xffffffff
c00043d0:	75 0e                	jne    c00043e0 <f_lseek+0xc1>
c00043d2:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00043d6:	bd 01 00 00 00       	mov    ebp,0x1
c00043db:	e9 dc 00 00 00       	jmp    c00044bc <f_lseek+0x19d>
c00043e0:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00043e3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00043e6:	85 c0                	test   eax,eax
c00043e8:	74 82                	je     c000436c <f_lseek+0x4d>
c00043ea:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00043ed:	39 fe                	cmp    esi,edi
c00043ef:	76 3d                	jbe    c000442e <f_lseek+0x10f>
c00043f1:	01 fa                	add    edx,edi
c00043f3:	29 fe                	sub    esi,edi
c00043f5:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c00043f8:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00043fc:	89 c2                	mov    edx,eax
c00043fe:	74 0d                	je     c000440d <f_lseek+0xee>
c0004400:	89 d8                	mov    eax,ebx
c0004402:	e8 f4 ee ff ff       	call   c00032fb <create_chain>
c0004407:	85 c0                	test   eax,eax
c0004409:	75 09                	jne    c0004414 <f_lseek+0xf5>
c000440b:	eb 1f                	jmp    c000442c <f_lseek+0x10d>
c000440d:	8b 03                	mov    eax,DWORD PTR [ebx]
c000440f:	e8 1d ed ff ff       	call   c0003131 <get_fat.isra.2>
c0004414:	83 f8 ff             	cmp    eax,0xffffffff
c0004417:	74 b9                	je     c00043d2 <f_lseek+0xb3>
c0004419:	83 f8 01             	cmp    eax,0x1
c000441c:	76 a1                	jbe    c00043bf <f_lseek+0xa0>
c000441e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004422:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c0004425:	76 98                	jbe    c00043bf <f_lseek+0xa0>
c0004427:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000442a:	eb be                	jmp    c00043ea <f_lseek+0xcb>
c000442c:	31 f6                	xor    esi,esi
c000442e:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004431:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004437:	0f 84 2f ff ff ff    	je     c000436c <f_lseek+0x4d>
c000443d:	89 c2                	mov    edx,eax
c000443f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004443:	e8 3d db ff ff       	call   c0001f85 <clst2sect>
c0004448:	85 c0                	test   eax,eax
c000444a:	0f 84 6f ff ff ff    	je     c00043bf <f_lseek+0xa0>
c0004450:	c1 ee 09             	shr    esi,0x9
c0004453:	01 c6                	add    esi,eax
c0004455:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004458:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000445b:	76 07                	jbe    c0004464 <f_lseek+0x145>
c000445d:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004460:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0004464:	a9 ff 01 00 00       	test   eax,0x1ff
c0004469:	74 51                	je     c00044bc <f_lseek+0x19d>
c000446b:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000446e:	39 f0                	cmp    eax,esi
c0004470:	74 4a                	je     c00044bc <f_lseek+0x19d>
c0004472:	8d 7b 28             	lea    edi,[ebx+0x28]
c0004475:	80 7b 10 00          	cmp    BYTE PTR [ebx+0x10],0x0
c0004479:	79 21                	jns    c000449c <f_lseek+0x17d>
c000447b:	6a 01                	push   0x1
c000447d:	50                   	push   eax
c000447e:	57                   	push   edi
c000447f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0004483:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0004487:	50                   	push   eax
c0004488:	e8 7d d8 ff ff       	call   c0001d0a <disk_write>
c000448d:	83 c4 10             	add    esp,0x10
c0004490:	85 c0                	test   eax,eax
c0004492:	0f 85 3a ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c0004498:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000449c:	6a 01                	push   0x1
c000449e:	56                   	push   esi
c000449f:	57                   	push   edi
c00044a0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00044a4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00044a8:	50                   	push   eax
c00044a9:	e8 46 d8 ff ff       	call   c0001cf4 <disk_read>
c00044ae:	83 c4 10             	add    esp,0x10
c00044b1:	85 c0                	test   eax,eax
c00044b3:	0f 85 19 ff ff ff    	jne    c00043d2 <f_lseek+0xb3>
c00044b9:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00044bc:	83 c4 2c             	add    esp,0x2c
c00044bf:	89 e8                	mov    eax,ebp
c00044c1:	5b                   	pop    ebx
c00044c2:	5e                   	pop    esi
c00044c3:	5f                   	pop    edi
c00044c4:	5d                   	pop    ebp
c00044c5:	c3                   	ret    

c00044c6 <f_opendir>:
c00044c6:	56                   	push   esi
c00044c7:	b8 09 00 00 00       	mov    eax,0x9
c00044cc:	53                   	push   ebx
c00044cd:	83 ec 24             	sub    esp,0x24
c00044d0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00044d4:	85 db                	test   ebx,ebx
c00044d6:	0f 84 af 00 00 00    	je     c000458b <f_opendir+0xc5>
c00044dc:	31 c9                	xor    ecx,ecx
c00044de:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00044e2:	8d 44 24 34          	lea    eax,[esp+0x34]
c00044e6:	e8 cd de ff ff       	call   c00023b8 <mount_volume>
c00044eb:	85 c0                	test   eax,eax
c00044ed:	0f 85 92 00 00 00    	jne    c0004585 <f_opendir+0xbf>
c00044f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044f7:	83 ec 0c             	sub    esp,0xc
c00044fa:	89 03                	mov    DWORD PTR [ebx],eax
c00044fc:	68 00 02 00 00       	push   0x200
c0004501:	e8 86 15 00 00       	call   c0005a8c <ff_memalloc>
c0004506:	83 c4 10             	add    esp,0x10
c0004509:	89 c6                	mov    esi,eax
c000450b:	b8 11 00 00 00       	mov    eax,0x11
c0004510:	85 f6                	test   esi,esi
c0004512:	74 77                	je     c000458b <f_opendir+0xc5>
c0004514:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004518:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000451c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c000451f:	89 d8                	mov    eax,ebx
c0004521:	e8 9c f3 ff ff       	call   c00038c2 <follow_path>
c0004526:	85 c0                	test   eax,eax
c0004528:	75 37                	jne    c0004561 <f_opendir+0x9b>
c000452a:	80 7b 2b 00          	cmp    BYTE PTR [ebx+0x2b],0x0
c000452e:	78 1c                	js     c000454c <f_opendir+0x86>
c0004530:	b8 05 00 00 00       	mov    eax,0x5
c0004535:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004539:	74 26                	je     c0004561 <f_opendir+0x9b>
c000453b:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000453e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004542:	8a 00                	mov    al,BYTE PTR [eax]
c0004544:	e8 97 eb ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004549:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000454c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004550:	31 d2                	xor    edx,edx
c0004552:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004556:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000455a:	89 d8                	mov    eax,ebx
c000455c:	e8 d2 ec ff ff       	call   c0003233 <dir_sdi>
c0004561:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004565:	83 ec 0c             	sub    esp,0xc
c0004568:	56                   	push   esi
c0004569:	e8 36 15 00 00       	call   c0005aa4 <ff_memfree>
c000456e:	83 c4 10             	add    esp,0x10
c0004571:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004575:	83 f8 04             	cmp    eax,0x4
c0004578:	74 06                	je     c0004580 <f_opendir+0xba>
c000457a:	85 c0                	test   eax,eax
c000457c:	74 0d                	je     c000458b <f_opendir+0xc5>
c000457e:	eb 05                	jmp    c0004585 <f_opendir+0xbf>
c0004580:	b8 05 00 00 00       	mov    eax,0x5
c0004585:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000458b:	83 c4 24             	add    esp,0x24
c000458e:	5b                   	pop    ebx
c000458f:	5e                   	pop    esi
c0004590:	c3                   	ret    

c0004591 <f_closedir>:
c0004591:	53                   	push   ebx
c0004592:	83 ec 18             	sub    esp,0x18
c0004595:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004599:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000459d:	89 d8                	mov    eax,ebx
c000459f:	e8 17 dc ff ff       	call   c00021bb <validate>
c00045a4:	85 c0                	test   eax,eax
c00045a6:	75 06                	jne    c00045ae <f_closedir+0x1d>
c00045a8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00045ae:	83 c4 18             	add    esp,0x18
c00045b1:	5b                   	pop    ebx
c00045b2:	c3                   	ret    

c00045b3 <f_readdir>:
c00045b3:	57                   	push   edi
c00045b4:	56                   	push   esi
c00045b5:	53                   	push   ebx
c00045b6:	83 ec 20             	sub    esp,0x20
c00045b9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00045bd:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00045c1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00045c5:	89 d8                	mov    eax,ebx
c00045c7:	e8 ef db ff ff       	call   c00021bb <validate>
c00045cc:	85 c0                	test   eax,eax
c00045ce:	75 6e                	jne    c000463e <f_readdir+0x8b>
c00045d0:	85 ff                	test   edi,edi
c00045d2:	75 0b                	jne    c00045df <f_readdir+0x2c>
c00045d4:	31 d2                	xor    edx,edx
c00045d6:	89 d8                	mov    eax,ebx
c00045d8:	e8 56 ec ff ff       	call   c0003233 <dir_sdi>
c00045dd:	eb 5f                	jmp    c000463e <f_readdir+0x8b>
c00045df:	83 ec 0c             	sub    esp,0xc
c00045e2:	68 00 02 00 00       	push   0x200
c00045e7:	e8 a0 14 00 00       	call   c0005a8c <ff_memalloc>
c00045ec:	83 c4 10             	add    esp,0x10
c00045ef:	89 c6                	mov    esi,eax
c00045f1:	b8 11 00 00 00       	mov    eax,0x11
c00045f6:	85 f6                	test   esi,esi
c00045f8:	74 44                	je     c000463e <f_readdir+0x8b>
c00045fa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00045fe:	31 d2                	xor    edx,edx
c0004600:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004603:	89 d8                	mov    eax,ebx
c0004605:	e8 1a f0 ff ff       	call   c0003624 <dir_read>
c000460a:	a9 fb ff ff ff       	test   eax,0xfffffffb
c000460f:	75 19                	jne    c000462a <f_readdir+0x77>
c0004611:	89 fa                	mov    edx,edi
c0004613:	89 d8                	mov    eax,ebx
c0004615:	e8 e2 e8 ff ff       	call   c0002efc <get_fileinfo>
c000461a:	31 d2                	xor    edx,edx
c000461c:	89 d8                	mov    eax,ebx
c000461e:	e8 9b ee ff ff       	call   c00034be <dir_next>
c0004623:	83 f8 04             	cmp    eax,0x4
c0004626:	75 02                	jne    c000462a <f_readdir+0x77>
c0004628:	31 c0                	xor    eax,eax
c000462a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000462e:	83 ec 0c             	sub    esp,0xc
c0004631:	56                   	push   esi
c0004632:	e8 6d 14 00 00       	call   c0005aa4 <ff_memfree>
c0004637:	83 c4 10             	add    esp,0x10
c000463a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000463e:	83 c4 20             	add    esp,0x20
c0004641:	5b                   	pop    ebx
c0004642:	5e                   	pop    esi
c0004643:	5f                   	pop    edi
c0004644:	c3                   	ret    

c0004645 <f_stat>:
c0004645:	57                   	push   edi
c0004646:	31 c9                	xor    ecx,ecx
c0004648:	56                   	push   esi
c0004649:	53                   	push   ebx
c000464a:	83 ec 30             	sub    esp,0x30
c000464d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004651:	89 e2                	mov    edx,esp
c0004653:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004657:	e8 5c dd ff ff       	call   c00023b8 <mount_volume>
c000465c:	89 c3                	mov    ebx,eax
c000465e:	85 c0                	test   eax,eax
c0004660:	75 59                	jne    c00046bb <f_stat+0x76>
c0004662:	83 ec 0c             	sub    esp,0xc
c0004665:	bb 11 00 00 00       	mov    ebx,0x11
c000466a:	68 00 02 00 00       	push   0x200
c000466f:	e8 18 14 00 00       	call   c0005a8c <ff_memalloc>
c0004674:	83 c4 10             	add    esp,0x10
c0004677:	89 c6                	mov    esi,eax
c0004679:	85 c0                	test   eax,eax
c000467b:	74 3e                	je     c00046bb <f_stat+0x76>
c000467d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004680:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0004684:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004687:	89 e0                	mov    eax,esp
c0004689:	e8 34 f2 ff ff       	call   c00038c2 <follow_path>
c000468e:	89 c3                	mov    ebx,eax
c0004690:	85 c0                	test   eax,eax
c0004692:	75 1b                	jne    c00046af <f_stat+0x6a>
c0004694:	80 7c 24 2b 00       	cmp    BYTE PTR [esp+0x2b],0x0
c0004699:	78 0f                	js     c00046aa <f_stat+0x65>
c000469b:	85 ff                	test   edi,edi
c000469d:	74 10                	je     c00046af <f_stat+0x6a>
c000469f:	89 fa                	mov    edx,edi
c00046a1:	89 e0                	mov    eax,esp
c00046a3:	e8 54 e8 ff ff       	call   c0002efc <get_fileinfo>
c00046a8:	eb 05                	jmp    c00046af <f_stat+0x6a>
c00046aa:	bb 06 00 00 00       	mov    ebx,0x6
c00046af:	83 ec 0c             	sub    esp,0xc
c00046b2:	56                   	push   esi
c00046b3:	e8 ec 13 00 00       	call   c0005aa4 <ff_memfree>
c00046b8:	83 c4 10             	add    esp,0x10
c00046bb:	83 c4 30             	add    esp,0x30
c00046be:	89 d8                	mov    eax,ebx
c00046c0:	5b                   	pop    ebx
c00046c1:	5e                   	pop    esi
c00046c2:	5f                   	pop    edi
c00046c3:	c3                   	ret    

c00046c4 <f_getfree>:
c00046c4:	55                   	push   ebp
c00046c5:	31 c9                	xor    ecx,ecx
c00046c7:	57                   	push   edi
c00046c8:	56                   	push   esi
c00046c9:	53                   	push   ebx
c00046ca:	83 ec 2c             	sub    esp,0x2c
c00046cd:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00046d1:	8d 44 24 40          	lea    eax,[esp+0x40]
c00046d5:	e8 de dc ff ff       	call   c00023b8 <mount_volume>
c00046da:	89 c7                	mov    edi,eax
c00046dc:	85 c0                	test   eax,eax
c00046de:	0f 85 d8 00 00 00    	jne    c00047bc <f_getfree+0xf8>
c00046e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00046e8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00046ec:	89 30                	mov    DWORD PTR [eax],esi
c00046ee:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00046f1:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c00046f4:	8d 55 fe             	lea    edx,[ebp-0x2]
c00046f7:	39 d0                	cmp    eax,edx
c00046f9:	77 0b                	ja     c0004706 <f_getfree+0x42>
c00046fb:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c00046ff:	89 01                	mov    DWORD PTR [ecx],eax
c0004701:	e9 b6 00 00 00       	jmp    c00047bc <f_getfree+0xf8>
c0004706:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c0004709:	75 29                	jne    c0004734 <f_getfree+0x70>
c000470b:	bd 02 00 00 00       	mov    ebp,0x2
c0004710:	31 db                	xor    ebx,ebx
c0004712:	89 ea                	mov    edx,ebp
c0004714:	89 f0                	mov    eax,esi
c0004716:	e8 16 ea ff ff       	call   c0003131 <get_fat.isra.2>
c000471b:	83 f8 ff             	cmp    eax,0xffffffff
c000471e:	74 7b                	je     c000479b <f_getfree+0xd7>
c0004720:	83 f8 01             	cmp    eax,0x1
c0004723:	74 7d                	je     c00047a2 <f_getfree+0xde>
c0004725:	83 d3 00             	adc    ebx,0x0
c0004728:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000472c:	45                   	inc    ebp
c000472d:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004730:	77 e0                	ja     c0004712 <f_getfree+0x4e>
c0004732:	eb 77                	jmp    c00047ab <f_getfree+0xe7>
c0004734:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c0004737:	31 db                	xor    ebx,ebx
c0004739:	31 f6                	xor    esi,esi
c000473b:	85 f6                	test   esi,esi
c000473d:	75 18                	jne    c0004757 <f_getfree+0x93>
c000473f:	8d 42 01             	lea    eax,[edx+0x1]
c0004742:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004746:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000474a:	e8 16 db ff ff       	call   c0002265 <move_window>
c000474f:	85 c0                	test   eax,eax
c0004751:	75 56                	jne    c00047a9 <f_getfree+0xe5>
c0004753:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004757:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000475b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000475f:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c0004763:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c0004766:	75 11                	jne    c0004779 <f_getfree+0xb5>
c0004768:	e8 d2 d5 ff ff       	call   c0001d3f <ld_word>
c000476d:	66 83 f8 01          	cmp    ax,0x1
c0004771:	83 d3 00             	adc    ebx,0x0
c0004774:	83 c6 02             	add    esi,0x2
c0004777:	eb 13                	jmp    c000478c <f_getfree+0xc8>
c0004779:	e8 ce d5 ff ff       	call   c0001d4c <ld_dword>
c000477e:	25 ff ff ff 0f       	and    eax,0xfffffff
c0004783:	83 f8 01             	cmp    eax,0x1
c0004786:	83 d3 00             	adc    ebx,0x0
c0004789:	83 c6 04             	add    esi,0x4
c000478c:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0004792:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004796:	4d                   	dec    ebp
c0004797:	75 a2                	jne    c000473b <f_getfree+0x77>
c0004799:	eb 10                	jmp    c00047ab <f_getfree+0xe7>
c000479b:	bf 01 00 00 00       	mov    edi,0x1
c00047a0:	eb 09                	jmp    c00047ab <f_getfree+0xe7>
c00047a2:	bf 02 00 00 00       	mov    edi,0x2
c00047a7:	eb 02                	jmp    c00047ab <f_getfree+0xe7>
c00047a9:	89 c7                	mov    edi,eax
c00047ab:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00047af:	89 18                	mov    DWORD PTR [eax],ebx
c00047b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00047b5:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c00047b8:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00047bc:	83 c4 2c             	add    esp,0x2c
c00047bf:	89 f8                	mov    eax,edi
c00047c1:	5b                   	pop    ebx
c00047c2:	5e                   	pop    esi
c00047c3:	5f                   	pop    edi
c00047c4:	5d                   	pop    ebp
c00047c5:	c3                   	ret    

c00047c6 <f_truncate>:
c00047c6:	56                   	push   esi
c00047c7:	53                   	push   ebx
c00047c8:	83 ec 14             	sub    esp,0x14
c00047cb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00047cf:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00047d3:	89 d8                	mov    eax,ebx
c00047d5:	e8 e1 d9 ff ff       	call   c00021bb <validate>
c00047da:	89 c6                	mov    esi,eax
c00047dc:	85 c0                	test   eax,eax
c00047de:	0f 85 be 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047e4:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00047e8:	85 f6                	test   esi,esi
c00047ea:	0f 85 b2 00 00 00    	jne    c00048a2 <f_truncate+0xdc>
c00047f0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00047f4:	0f 84 a3 00 00 00    	je     c000489d <f_truncate+0xd7>
c00047fa:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00047fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004800:	0f 83 9c 00 00 00    	jae    c00048a2 <f_truncate+0xdc>
c0004806:	85 c0                	test   eax,eax
c0004808:	75 15                	jne    c000481f <f_truncate+0x59>
c000480a:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000480d:	31 c9                	xor    ecx,ecx
c000480f:	89 d8                	mov    eax,ebx
c0004811:	e8 1f ec ff ff       	call   c0003435 <remove_chain>
c0004816:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000481d:	eb 35                	jmp    c0004854 <f_truncate+0x8e>
c000481f:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004822:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004824:	e8 08 e9 ff ff       	call   c0003131 <get_fat.isra.2>
c0004829:	89 c2                	mov    edx,eax
c000482b:	b8 01 00 00 00       	mov    eax,0x1
c0004830:	83 fa ff             	cmp    edx,0xffffffff
c0004833:	74 1f                	je     c0004854 <f_truncate+0x8e>
c0004835:	b8 02 00 00 00       	mov    eax,0x2
c000483a:	83 fa 01             	cmp    edx,0x1
c000483d:	74 15                	je     c0004854 <f_truncate+0x8e>
c000483f:	31 c0                	xor    eax,eax
c0004841:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004845:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004848:	76 0a                	jbe    c0004854 <f_truncate+0x8e>
c000484a:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000484d:	89 d8                	mov    eax,ebx
c000484f:	e8 e1 eb ff ff       	call   c0003435 <remove_chain>
c0004854:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004857:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000485a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000485d:	83 ca 40             	or     edx,0x40
c0004860:	85 c0                	test   eax,eax
c0004862:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004865:	75 2f                	jne    c0004896 <f_truncate+0xd0>
c0004867:	84 d2                	test   dl,dl
c0004869:	79 37                	jns    c00048a2 <f_truncate+0xdc>
c000486b:	6a 01                	push   0x1
c000486d:	8d 43 28             	lea    eax,[ebx+0x28]
c0004870:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004873:	50                   	push   eax
c0004874:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004878:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000487c:	50                   	push   eax
c000487d:	e8 88 d4 ff ff       	call   c0001d0a <disk_write>
c0004882:	83 c4 10             	add    esp,0x10
c0004885:	85 c0                	test   eax,eax
c0004887:	75 08                	jne    c0004891 <f_truncate+0xcb>
c0004889:	80 63 10 7f          	and    BYTE PTR [ebx+0x10],0x7f
c000488d:	31 f6                	xor    esi,esi
c000488f:	eb 11                	jmp    c00048a2 <f_truncate+0xdc>
c0004891:	b8 01 00 00 00       	mov    eax,0x1
c0004896:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c0004899:	89 c6                	mov    esi,eax
c000489b:	eb 05                	jmp    c00048a2 <f_truncate+0xdc>
c000489d:	be 07 00 00 00       	mov    esi,0x7
c00048a2:	89 f0                	mov    eax,esi
c00048a4:	83 c4 14             	add    esp,0x14
c00048a7:	5b                   	pop    ebx
c00048a8:	5e                   	pop    esi
c00048a9:	c3                   	ret    

c00048aa <f_unlink>:
c00048aa:	55                   	push   ebp
c00048ab:	b9 02 00 00 00       	mov    ecx,0x2
c00048b0:	57                   	push   edi
c00048b1:	56                   	push   esi
c00048b2:	53                   	push   ebx
c00048b3:	81 ec 8c 00 00 00    	sub    esp,0x8c
c00048b9:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00048bd:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c00048c4:	e8 ef da ff ff       	call   c00023b8 <mount_volume>
c00048c9:	85 c0                	test   eax,eax
c00048cb:	0f 85 f0 00 00 00    	jne    c00049c1 <f_unlink+0x117>
c00048d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048d5:	83 ec 0c             	sub    esp,0xc
c00048d8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00048dc:	68 00 02 00 00       	push   0x200
c00048e1:	e8 a6 11 00 00       	call   c0005a8c <ff_memalloc>
c00048e6:	83 c4 10             	add    esp,0x10
c00048e9:	89 c3                	mov    ebx,eax
c00048eb:	b8 11 00 00 00       	mov    eax,0x11
c00048f0:	85 db                	test   ebx,ebx
c00048f2:	0f 84 c9 00 00 00    	je     c00049c1 <f_unlink+0x117>
c00048f8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fc:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004903:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004906:	8d 44 24 20          	lea    eax,[esp+0x20]
c000490a:	e8 b3 ef ff ff       	call   c00038c2 <follow_path>
c000490f:	85 c0                	test   eax,eax
c0004911:	0f 85 96 00 00 00    	jne    c00049ad <f_unlink+0x103>
c0004917:	b8 06 00 00 00       	mov    eax,0x6
c000491c:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0004921:	0f 88 86 00 00 00    	js     c00049ad <f_unlink+0x103>
c0004927:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c000492c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004932:	74 07                	je     c000493b <f_unlink+0x91>
c0004934:	b8 07 00 00 00       	mov    eax,0x7
c0004939:	eb 72                	jmp    c00049ad <f_unlink+0x103>
c000493b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000493f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004943:	8a 07                	mov    al,BYTE PTR [edi]
c0004945:	e8 96 e7 ff ff       	call   c00030e0 <ld_clust.isra.0>
c000494a:	83 e5 10             	and    ebp,0x10
c000494d:	89 c6                	mov    esi,eax
c000494f:	75 0f                	jne    c0004960 <f_unlink+0xb6>
c0004951:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004955:	e8 e7 ed ff ff       	call   c0003741 <dir_remove>
c000495a:	85 c0                	test   eax,eax
c000495c:	74 2f                	je     c000498d <f_unlink+0xe3>
c000495e:	eb 4d                	jmp    c00049ad <f_unlink+0x103>
c0004960:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004964:	31 d2                	xor    edx,edx
c0004966:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c000496a:	8d 44 24 50          	lea    eax,[esp+0x50]
c000496e:	e8 c0 e8 ff ff       	call   c0003233 <dir_sdi>
c0004973:	85 c0                	test   eax,eax
c0004975:	75 36                	jne    c00049ad <f_unlink+0x103>
c0004977:	31 d2                	xor    edx,edx
c0004979:	8d 44 24 50          	lea    eax,[esp+0x50]
c000497d:	e8 a2 ec ff ff       	call   c0003624 <dir_read>
c0004982:	85 c0                	test   eax,eax
c0004984:	74 ae                	je     c0004934 <f_unlink+0x8a>
c0004986:	83 f8 04             	cmp    eax,0x4
c0004989:	75 22                	jne    c00049ad <f_unlink+0x103>
c000498b:	eb c4                	jmp    c0004951 <f_unlink+0xa7>
c000498d:	85 f6                	test   esi,esi
c000498f:	75 0b                	jne    c000499c <f_unlink+0xf2>
c0004991:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004995:	e8 0b e3 ff ff       	call   c0002ca5 <sync_fs>
c000499a:	eb 11                	jmp    c00049ad <f_unlink+0x103>
c000499c:	31 c9                	xor    ecx,ecx
c000499e:	89 f2                	mov    edx,esi
c00049a0:	8d 44 24 20          	lea    eax,[esp+0x20]
c00049a4:	e8 8c ea ff ff       	call   c0003435 <remove_chain>
c00049a9:	85 c0                	test   eax,eax
c00049ab:	74 e4                	je     c0004991 <f_unlink+0xe7>
c00049ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00049b1:	83 ec 0c             	sub    esp,0xc
c00049b4:	53                   	push   ebx
c00049b5:	e8 ea 10 00 00       	call   c0005aa4 <ff_memfree>
c00049ba:	83 c4 10             	add    esp,0x10
c00049bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049c1:	81 c4 8c 00 00 00    	add    esp,0x8c
c00049c7:	5b                   	pop    ebx
c00049c8:	5e                   	pop    esi
c00049c9:	5f                   	pop    edi
c00049ca:	5d                   	pop    ebp
c00049cb:	c3                   	ret    

c00049cc <f_mkdir>:
c00049cc:	57                   	push   edi
c00049cd:	b9 02 00 00 00       	mov    ecx,0x2
c00049d2:	56                   	push   esi
c00049d3:	53                   	push   ebx
c00049d4:	83 ec 50             	sub    esp,0x50
c00049d7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00049db:	8d 44 24 60          	lea    eax,[esp+0x60]
c00049df:	e8 d4 d9 ff ff       	call   c00023b8 <mount_volume>
c00049e4:	89 c3                	mov    ebx,eax
c00049e6:	85 c0                	test   eax,eax
c00049e8:	0f 85 70 01 00 00    	jne    c0004b5e <f_mkdir+0x192>
c00049ee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00049f2:	bb 11 00 00 00       	mov    ebx,0x11
c00049f7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00049fb:	83 ec 0c             	sub    esp,0xc
c00049fe:	68 00 02 00 00       	push   0x200
c0004a03:	e8 84 10 00 00       	call   c0005a8c <ff_memalloc>
c0004a08:	83 c4 10             	add    esp,0x10
c0004a0b:	89 c7                	mov    edi,eax
c0004a0d:	85 c0                	test   eax,eax
c0004a0f:	0f 84 49 01 00 00    	je     c0004b5e <f_mkdir+0x192>
c0004a15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a19:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004a1d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004a20:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a24:	e8 99 ee ff ff       	call   c00038c2 <follow_path>
c0004a29:	89 c3                	mov    ebx,eax
c0004a2b:	85 c0                	test   eax,eax
c0004a2d:	74 3e                	je     c0004a6d <f_mkdir+0xa1>
c0004a2f:	83 f8 04             	cmp    eax,0x4
c0004a32:	75 3e                	jne    c0004a72 <f_mkdir+0xa6>
c0004a34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a38:	31 d2                	xor    edx,edx
c0004a3a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004a3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a42:	e8 b4 e8 ff ff       	call   c00032fb <create_chain>
c0004a47:	89 c6                	mov    esi,eax
c0004a49:	85 c0                	test   eax,eax
c0004a4b:	74 0c                	je     c0004a59 <f_mkdir+0x8d>
c0004a4d:	bb 02 00 00 00       	mov    ebx,0x2
c0004a52:	83 f8 01             	cmp    eax,0x1
c0004a55:	74 07                	je     c0004a5e <f_mkdir+0x92>
c0004a57:	eb 2a                	jmp    c0004a83 <f_mkdir+0xb7>
c0004a59:	bb 07 00 00 00       	mov    ebx,0x7
c0004a5e:	31 c9                	xor    ecx,ecx
c0004a60:	89 f2                	mov    edx,esi
c0004a62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004a66:	e8 ca e9 ff ff       	call   c0003435 <remove_chain>
c0004a6b:	eb 05                	jmp    c0004a72 <f_mkdir+0xa6>
c0004a6d:	bb 08 00 00 00       	mov    ebx,0x8
c0004a72:	83 ec 0c             	sub    esp,0xc
c0004a75:	57                   	push   edi
c0004a76:	e8 29 10 00 00       	call   c0005aa4 <ff_memfree>
c0004a7b:	83 c4 10             	add    esp,0x10
c0004a7e:	e9 db 00 00 00       	jmp    c0004b5e <f_mkdir+0x192>
c0004a83:	bb 01 00 00 00       	mov    ebx,0x1
c0004a88:	83 f8 ff             	cmp    eax,0xffffffff
c0004a8b:	74 d1                	je     c0004a5e <f_mkdir+0x92>
c0004a8d:	89 f2                	mov    edx,esi
c0004a8f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004a93:	e8 73 dd ff ff       	call   c000280b <dir_clear>
c0004a98:	89 c3                	mov    ebx,eax
c0004a9a:	85 c0                	test   eax,eax
c0004a9c:	75 c0                	jne    c0004a5e <f_mkdir+0x92>
c0004a9e:	b9 0b 00 00 00       	mov    ecx,0xb
c0004aa3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004aa7:	ba 20 00 00 00       	mov    edx,0x20
c0004aac:	83 c0 34             	add    eax,0x34
c0004aaf:	e8 cc d2 ff ff       	call   c0001d80 <mem_set>
c0004ab4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ab8:	ba 00 00 21 50       	mov    edx,0x50210000
c0004abd:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004ac1:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004ac5:	83 c0 4a             	add    eax,0x4a
c0004ac8:	e8 9b d2 ff ff       	call   c0001d68 <st_dword>
c0004acd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ad1:	89 f1                	mov    ecx,esi
c0004ad3:	8d 50 34             	lea    edx,[eax+0x34]
c0004ad6:	e8 2e e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004adb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004adf:	b9 20 00 00 00       	mov    ecx,0x20
c0004ae4:	8d 50 34             	lea    edx,[eax+0x34]
c0004ae7:	83 c0 54             	add    eax,0x54
c0004aea:	e8 7c d2 ff ff       	call   c0001d6b <mem_cpy>
c0004aef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004af3:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004af7:	8d 50 54             	lea    edx,[eax+0x54]
c0004afa:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004afe:	e8 06 e6 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b03:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b07:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b0b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b0f:	e8 42 ee ff ff       	call   c0003956 <dir_register>
c0004b14:	89 c3                	mov    ebx,eax
c0004b16:	85 c0                	test   eax,eax
c0004b18:	0f 85 40 ff ff ff    	jne    c0004a5e <f_mkdir+0x92>
c0004b1e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b22:	ba 00 00 21 50       	mov    edx,0x50210000
c0004b27:	83 c0 16             	add    eax,0x16
c0004b2a:	e8 39 d2 ff ff       	call   c0001d68 <st_dword>
c0004b2f:	89 f1                	mov    ecx,esi
c0004b31:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004b35:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b39:	e8 cb e5 ff ff       	call   c0003109 <st_clust.isra.1>
c0004b3e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b42:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004b46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b4a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b52:	e8 4e e1 ff ff       	call   c0002ca5 <sync_fs>
c0004b57:	89 c3                	mov    ebx,eax
c0004b59:	e9 14 ff ff ff       	jmp    c0004a72 <f_mkdir+0xa6>
c0004b5e:	83 c4 50             	add    esp,0x50
c0004b61:	89 d8                	mov    eax,ebx
c0004b63:	5b                   	pop    ebx
c0004b64:	5e                   	pop    esi
c0004b65:	5f                   	pop    edi
c0004b66:	c3                   	ret    

c0004b67 <f_rename>:
c0004b67:	57                   	push   edi
c0004b68:	56                   	push   esi
c0004b69:	53                   	push   ebx
c0004b6a:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004b70:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004b77:	e8 f2 d5 ff ff       	call   c000216e <get_ldnumber>
c0004b7c:	b9 02 00 00 00       	mov    ecx,0x2
c0004b81:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004b85:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004b8c:	e8 27 d8 ff ff       	call   c00023b8 <mount_volume>
c0004b91:	85 c0                	test   eax,eax
c0004b93:	0f 85 7a 01 00 00    	jne    c0004d13 <f_rename+0x1ac>
c0004b99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004b9d:	83 ec 0c             	sub    esp,0xc
c0004ba0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004ba4:	68 00 02 00 00       	push   0x200
c0004ba9:	e8 de 0e 00 00       	call   c0005a8c <ff_memalloc>
c0004bae:	83 c4 10             	add    esp,0x10
c0004bb1:	89 c6                	mov    esi,eax
c0004bb3:	b8 11 00 00 00       	mov    eax,0x11
c0004bb8:	85 f6                	test   esi,esi
c0004bba:	0f 84 53 01 00 00    	je     c0004d13 <f_rename+0x1ac>
c0004bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004bc4:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004bcb:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004bce:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004bd2:	e8 eb ec ff ff       	call   c00038c2 <follow_path>
c0004bd7:	85 c0                	test   eax,eax
c0004bd9:	0f 85 20 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bdf:	b8 06 00 00 00       	mov    eax,0x6
c0004be4:	f6 44 24 6b a0       	test   BYTE PTR [esp+0x6b],0xa0
c0004be9:	0f 85 10 01 00 00    	jne    c0004cff <f_rename+0x198>
c0004bef:	b9 20 00 00 00       	mov    ecx,0x20
c0004bf4:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004bf8:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004bfc:	e8 6a d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c01:	b9 30 00 00 00       	mov    ecx,0x30
c0004c06:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004c0a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c0e:	e8 58 d1 ff ff       	call   c0001d6b <mem_cpy>
c0004c13:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004c1a:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c1e:	e8 9f ec ff ff       	call   c00038c2 <follow_path>
c0004c23:	85 c0                	test   eax,eax
c0004c25:	75 20                	jne    c0004c47 <f_rename+0xe0>
c0004c27:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004c2b:	b8 08 00 00 00       	mov    eax,0x8
c0004c30:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004c34:	0f 85 c5 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c3a:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004c3e:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004c45:	eb 03                	jmp    c0004c4a <f_rename+0xe3>
c0004c47:	83 f8 04             	cmp    eax,0x4
c0004c4a:	0f 85 af 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c50:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004c54:	e8 fd ec ff ff       	call   c0003956 <dir_register>
c0004c59:	85 c0                	test   eax,eax
c0004c5b:	0f 85 9e 00 00 00    	jne    c0004cff <f_rename+0x198>
c0004c61:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004c68:	b9 13 00 00 00       	mov    ecx,0x13
c0004c6d:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004c70:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004c74:	e8 f2 d0 ff ff       	call   c0001d6b <mem_cpy>
c0004c79:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004c7d:	a8 10                	test   al,0x10
c0004c7f:	75 03                	jne    c0004c84 <f_rename+0x11d>
c0004c81:	83 c8 20             	or     eax,0x20
c0004c84:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004c87:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004c8b:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c8f:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004c93:	74 54                	je     c0004ce9 <f_rename+0x182>
c0004c95:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004c99:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004c9d:	74 4a                	je     c0004ce9 <f_rename+0x182>
c0004c9f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004ca3:	89 da                	mov    edx,ebx
c0004ca5:	8a 07                	mov    al,BYTE PTR [edi]
c0004ca7:	e8 34 e4 ff ff       	call   c00030e0 <ld_clust.isra.0>
c0004cac:	89 c2                	mov    edx,eax
c0004cae:	89 f8                	mov    eax,edi
c0004cb0:	e8 d0 d2 ff ff       	call   c0001f85 <clst2sect>
c0004cb5:	89 c2                	mov    edx,eax
c0004cb7:	b8 02 00 00 00       	mov    eax,0x2
c0004cbc:	85 d2                	test   edx,edx
c0004cbe:	74 3f                	je     c0004cff <f_rename+0x198>
c0004cc0:	89 f8                	mov    eax,edi
c0004cc2:	e8 9e d5 ff ff       	call   c0002265 <move_window>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	75 34                	jne    c0004cff <f_rename+0x198>
c0004ccb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ccf:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004cd3:	75 14                	jne    c0004ce9 <f_rename+0x182>
c0004cd5:	8d 50 54             	lea    edx,[eax+0x54]
c0004cd8:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004cdc:	e8 28 e4 ff ff       	call   c0003109 <st_clust.isra.1>
c0004ce1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ce5:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004ce9:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004ced:	e8 4f ea ff ff       	call   c0003741 <dir_remove>
c0004cf2:	85 c0                	test   eax,eax
c0004cf4:	75 09                	jne    c0004cff <f_rename+0x198>
c0004cf6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004cfa:	e8 a6 df ff ff       	call   c0002ca5 <sync_fs>
c0004cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004d03:	83 ec 0c             	sub    esp,0xc
c0004d06:	56                   	push   esi
c0004d07:	e8 98 0d 00 00       	call   c0005aa4 <ff_memfree>
c0004d0c:	83 c4 10             	add    esp,0x10
c0004d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004d13:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004d19:	5b                   	pop    ebx
c0004d1a:	5e                   	pop    esi
c0004d1b:	5f                   	pop    edi
c0004d1c:	c3                   	ret    

c0004d1d <f_chmod>:
c0004d1d:	57                   	push   edi
c0004d1e:	b9 02 00 00 00       	mov    ecx,0x2
c0004d23:	56                   	push   esi
c0004d24:	53                   	push   ebx
c0004d25:	83 ec 50             	sub    esp,0x50
c0004d28:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0004d2c:	8b 7c 24 68          	mov    edi,DWORD PTR [esp+0x68]
c0004d30:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004d34:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004d38:	e8 7b d6 ff ff       	call   c00023b8 <mount_volume>
c0004d3d:	85 c0                	test   eax,eax
c0004d3f:	75 7e                	jne    c0004dbf <f_chmod+0xa2>
c0004d41:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d45:	83 ec 0c             	sub    esp,0xc
c0004d48:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004d4c:	68 00 02 00 00       	push   0x200
c0004d51:	e8 36 0d 00 00       	call   c0005a8c <ff_memalloc>
c0004d56:	83 c4 10             	add    esp,0x10
c0004d59:	89 c6                	mov    esi,eax
c0004d5b:	b8 11 00 00 00       	mov    eax,0x11
c0004d60:	85 f6                	test   esi,esi
c0004d62:	74 5b                	je     c0004dbf <f_chmod+0xa2>
c0004d64:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d68:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004d6c:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d6f:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d73:	e8 4a eb ff ff       	call   c00038c2 <follow_path>
c0004d78:	85 c0                	test   eax,eax
c0004d7a:	75 2f                	jne    c0004dab <f_chmod+0x8e>
c0004d7c:	b8 06 00 00 00       	mov    eax,0x6
c0004d81:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004d86:	75 23                	jne    c0004dab <f_chmod+0x8e>
c0004d88:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004d8c:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d8f:	21 fb                	and    ebx,edi
c0004d91:	83 e3 27             	and    ebx,0x27
c0004d94:	32 58 0b             	xor    bl,BYTE PTR [eax+0xb]
c0004d97:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004d9a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d9e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004da2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004da6:	e8 fa de ff ff       	call   c0002ca5 <sync_fs>
c0004dab:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004daf:	83 ec 0c             	sub    esp,0xc
c0004db2:	56                   	push   esi
c0004db3:	e8 ec 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004db8:	83 c4 10             	add    esp,0x10
c0004dbb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004dbf:	83 c4 50             	add    esp,0x50
c0004dc2:	5b                   	pop    ebx
c0004dc3:	5e                   	pop    esi
c0004dc4:	5f                   	pop    edi
c0004dc5:	c3                   	ret    

c0004dc6 <f_utime>:
c0004dc6:	56                   	push   esi
c0004dc7:	b9 02 00 00 00       	mov    ecx,0x2
c0004dcc:	53                   	push   ebx
c0004dcd:	83 ec 54             	sub    esp,0x54
c0004dd0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004dd4:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004dd8:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004ddc:	e8 d7 d5 ff ff       	call   c00023b8 <mount_volume>
c0004de1:	85 c0                	test   eax,eax
c0004de3:	0f 85 85 00 00 00    	jne    c0004e6e <f_utime+0xa8>
c0004de9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ded:	83 ec 0c             	sub    esp,0xc
c0004df0:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004df4:	68 00 02 00 00       	push   0x200
c0004df9:	e8 8e 0c 00 00       	call   c0005a8c <ff_memalloc>
c0004dfe:	83 c4 10             	add    esp,0x10
c0004e01:	89 c3                	mov    ebx,eax
c0004e03:	b8 11 00 00 00       	mov    eax,0x11
c0004e08:	85 db                	test   ebx,ebx
c0004e0a:	74 62                	je     c0004e6e <f_utime+0xa8>
c0004e0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e10:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004e14:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004e17:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004e1b:	e8 a2 ea ff ff       	call   c00038c2 <follow_path>
c0004e20:	85 c0                	test   eax,eax
c0004e22:	75 36                	jne    c0004e5a <f_utime+0x94>
c0004e24:	b8 06 00 00 00       	mov    eax,0x6
c0004e29:	f6 44 24 4b a0       	test   BYTE PTR [esp+0x4b],0xa0
c0004e2e:	75 2a                	jne    c0004e5a <f_utime+0x94>
c0004e30:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004e34:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004e38:	c1 e2 10             	shl    edx,0x10
c0004e3b:	09 c2                	or     edx,eax
c0004e3d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004e41:	83 c0 16             	add    eax,0x16
c0004e44:	e8 1f cf ff ff       	call   c0001d68 <st_dword>
c0004e49:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e51:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e55:	e8 4b de ff ff       	call   c0002ca5 <sync_fs>
c0004e5a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e5e:	83 ec 0c             	sub    esp,0xc
c0004e61:	53                   	push   ebx
c0004e62:	e8 3d 0c 00 00       	call   c0005aa4 <ff_memfree>
c0004e67:	83 c4 10             	add    esp,0x10
c0004e6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e6e:	83 c4 54             	add    esp,0x54
c0004e71:	5b                   	pop    ebx
c0004e72:	5e                   	pop    esi
c0004e73:	c3                   	ret    

c0004e74 <f_getlabel>:
c0004e74:	55                   	push   ebp
c0004e75:	31 c9                	xor    ecx,ecx
c0004e77:	57                   	push   edi
c0004e78:	56                   	push   esi
c0004e79:	53                   	push   ebx
c0004e7a:	83 ec 5c             	sub    esp,0x5c
c0004e7d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e81:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004e85:	e8 2e d5 ff ff       	call   c00023b8 <mount_volume>
c0004e8a:	89 c6                	mov    esi,eax
c0004e8c:	85 c0                	test   eax,eax
c0004e8e:	0f 85 27 01 00 00    	jne    c0004fbb <f_getlabel+0x147>
c0004e94:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004e99:	0f 84 d1 00 00 00    	je     c0004f70 <f_getlabel+0xfc>
c0004e9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ea3:	31 d2                	xor    edx,edx
c0004ea5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004ea9:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0004eb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004eb5:	e8 79 e3 ff ff       	call   c0003233 <dir_sdi>
c0004eba:	85 c0                	test   eax,eax
c0004ebc:	0f 85 a2 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ec2:	ba 01 00 00 00       	mov    edx,0x1
c0004ec7:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ecb:	e8 54 e7 ff ff       	call   c0003624 <dir_read>
c0004ed0:	85 c0                	test   eax,eax
c0004ed2:	0f 85 8c 00 00 00    	jne    c0004f64 <f_getlabel+0xf0>
c0004ed8:	31 db                	xor    ebx,ebx
c0004eda:	31 c9                	xor    ecx,ecx
c0004edc:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0004ee0:	8d 79 01             	lea    edi,[ecx+0x1]
c0004ee3:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0004ee8:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0004eed:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ef1:	e8 ca ce ff ff       	call   c0001dc0 <dbc_1st>
c0004ef6:	85 c0                	test   eax,eax
c0004ef8:	74 16                	je     c0004f10 <f_getlabel+0x9c>
c0004efa:	83 ff 0b             	cmp    edi,0xb
c0004efd:	74 11                	je     c0004f10 <f_getlabel+0x9c>
c0004eff:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0004f04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f08:	8d 79 02             	lea    edi,[ecx+0x2]
c0004f0b:	c1 e0 08             	shl    eax,0x8
c0004f0e:	09 c2                	or     edx,eax
c0004f10:	0f b7 d2             	movzx  edx,dx
c0004f13:	50                   	push   eax
c0004f14:	50                   	push   eax
c0004f15:	68 b5 01 00 00       	push   0x1b5
c0004f1a:	52                   	push   edx
c0004f1b:	e8 3c 0c 00 00       	call   c0005b5c <ff_oem2uni>
c0004f20:	83 c4 10             	add    esp,0x10
c0004f23:	66 85 c0             	test   ax,ax
c0004f26:	74 25                	je     c0004f4d <f_getlabel+0xd9>
c0004f28:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0004f2c:	0f b7 c0             	movzx  eax,ax
c0004f2f:	01 da                	add    edx,ebx
c0004f31:	b9 04 00 00 00       	mov    ecx,0x4
c0004f36:	e8 51 cf ff ff       	call   c0001e8c <put_utf>
c0004f3b:	84 c0                	test   al,al
c0004f3d:	74 0e                	je     c0004f4d <f_getlabel+0xd9>
c0004f3f:	0f b6 c0             	movzx  eax,al
c0004f42:	01 c3                	add    ebx,eax
c0004f44:	83 ff 0b             	cmp    edi,0xb
c0004f47:	74 06                	je     c0004f4f <f_getlabel+0xdb>
c0004f49:	89 f9                	mov    ecx,edi
c0004f4b:	eb 8f                	jmp    c0004edc <f_getlabel+0x68>
c0004f4d:	31 db                	xor    ebx,ebx
c0004f4f:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c0004f53:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0004f56:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c0004f5a:	74 14                	je     c0004f70 <f_getlabel+0xfc>
c0004f5c:	4b                   	dec    ebx
c0004f5d:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0004f60:	74 f1                	je     c0004f53 <f_getlabel+0xdf>
c0004f62:	eb 0c                	jmp    c0004f70 <f_getlabel+0xfc>
c0004f64:	83 f8 04             	cmp    eax,0x4
c0004f67:	75 50                	jne    c0004fb9 <f_getlabel+0x145>
c0004f69:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0004f6d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f70:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c0004f75:	74 44                	je     c0004fbb <f_getlabel+0x147>
c0004f77:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f7b:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0004f7e:	e8 e2 d2 ff ff       	call   c0002265 <move_window>
c0004f83:	89 c6                	mov    esi,eax
c0004f85:	85 c0                	test   eax,eax
c0004f87:	75 32                	jne    c0004fbb <f_getlabel+0x147>
c0004f89:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004f8d:	b8 43 00 00 00       	mov    eax,0x43
c0004f92:	8a 0a                	mov    cl,BYTE PTR [edx]
c0004f94:	80 f9 03             	cmp    cl,0x3
c0004f97:	74 0f                	je     c0004fa8 <f_getlabel+0x134>
c0004f99:	31 c0                	xor    eax,eax
c0004f9b:	80 f9 04             	cmp    cl,0x4
c0004f9e:	0f 94 c0             	sete   al
c0004fa1:	48                   	dec    eax
c0004fa2:	83 e0 c3             	and    eax,0xffffffc3
c0004fa5:	83 c0 64             	add    eax,0x64
c0004fa8:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0004fac:	e8 9b cd ff ff       	call   c0001d4c <ld_dword>
c0004fb1:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0004fb5:	89 07                	mov    DWORD PTR [edi],eax
c0004fb7:	eb 02                	jmp    c0004fbb <f_getlabel+0x147>
c0004fb9:	89 c6                	mov    esi,eax
c0004fbb:	83 c4 5c             	add    esp,0x5c
c0004fbe:	89 f0                	mov    eax,esi
c0004fc0:	5b                   	pop    ebx
c0004fc1:	5e                   	pop    esi
c0004fc2:	5f                   	pop    edi
c0004fc3:	5d                   	pop    ebp
c0004fc4:	c3                   	ret    

c0004fc5 <f_setlabel>:
c0004fc5:	56                   	push   esi
c0004fc6:	b9 02 00 00 00       	mov    ecx,0x2
c0004fcb:	53                   	push   ebx
c0004fcc:	83 ec 54             	sub    esp,0x54
c0004fcf:	8d 54 24 04          	lea    edx,[esp+0x4]
c0004fd3:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004fd7:	e8 dc d3 ff ff       	call   c00023b8 <mount_volume>
c0004fdc:	89 c6                	mov    esi,eax
c0004fde:	85 c0                	test   eax,eax
c0004fe0:	0f 85 67 01 00 00    	jne    c000514d <f_setlabel+0x188>
c0004fe6:	b9 0b 00 00 00       	mov    ecx,0xb
c0004feb:	ba 20 00 00 00       	mov    edx,0x20
c0004ff0:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0004ff4:	31 db                	xor    ebx,ebx
c0004ff6:	e8 85 cd ff ff       	call   c0001d80 <mem_set>
c0004ffb:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0004fff:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0005002:	76 5b                	jbe    c000505f <f_setlabel+0x9a>
c0005004:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005008:	e8 b9 cd ff ff       	call   c0001dc6 <tchar2uni>
c000500d:	3d ff ff 00 00       	cmp    eax,0xffff
c0005012:	76 0a                	jbe    c000501e <f_setlabel+0x59>
c0005014:	be 06 00 00 00       	mov    esi,0x6
c0005019:	e9 2f 01 00 00       	jmp    c000514d <f_setlabel+0x188>
c000501e:	83 ec 0c             	sub    esp,0xc
c0005021:	50                   	push   eax
c0005022:	e8 ad 0b 00 00       	call   c0005bd4 <ff_wtoupper>
c0005027:	5a                   	pop    edx
c0005028:	59                   	pop    ecx
c0005029:	68 b5 01 00 00       	push   0x1b5
c000502e:	50                   	push   eax
c000502f:	e8 88 0a 00 00       	call   c0005abc <ff_uni2oem>
c0005034:	83 c4 10             	add    esp,0x10
c0005037:	89 c6                	mov    esi,eax
c0005039:	66 85 c0             	test   ax,ax
c000503c:	74 d6                	je     c0005014 <f_setlabel+0x4f>
c000503e:	0f b7 d0             	movzx  edx,ax
c0005041:	b8 30 ca 01 c0       	mov    eax,0xc001ca30
c0005046:	e8 63 cd ff ff       	call   c0001dae <chk_chr>
c000504b:	85 c0                	test   eax,eax
c000504d:	75 c5                	jne    c0005014 <f_setlabel+0x4f>
c000504f:	66 81 fe ff 00       	cmp    si,0xff
c0005054:	0f 87 c9 00 00 00    	ja     c0005123 <f_setlabel+0x15e>
c000505a:	e9 e4 00 00 00       	jmp    c0005143 <f_setlabel+0x17e>
c000505f:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c0005064:	74 ae                	je     c0005014 <f_setlabel+0x4f>
c0005066:	85 db                	test   ebx,ebx
c0005068:	74 0e                	je     c0005078 <f_setlabel+0xb3>
c000506a:	8d 43 ff             	lea    eax,[ebx-0x1]
c000506d:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c0005072:	75 04                	jne    c0005078 <f_setlabel+0xb3>
c0005074:	89 c3                	mov    ebx,eax
c0005076:	eb ee                	jmp    c0005066 <f_setlabel+0xa1>
c0005078:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000507c:	31 d2                	xor    edx,edx
c000507e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005082:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000508a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000508e:	e8 a0 e1 ff ff       	call   c0003233 <dir_sdi>
c0005093:	89 c6                	mov    esi,eax
c0005095:	85 c0                	test   eax,eax
c0005097:	0f 85 b0 00 00 00    	jne    c000514d <f_setlabel+0x188>
c000509d:	ba 01 00 00 00       	mov    edx,0x1
c00050a2:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050a6:	e8 79 e5 ff ff       	call   c0003624 <dir_read>
c00050ab:	85 c0                	test   eax,eax
c00050ad:	75 18                	jne    c00050c7 <f_setlabel+0x102>
c00050af:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050b3:	85 db                	test   ebx,ebx
c00050b5:	74 0b                	je     c00050c2 <f_setlabel+0xfd>
c00050b7:	b9 0b 00 00 00       	mov    ecx,0xb
c00050bc:	8d 54 24 0a          	lea    edx,[esp+0xa]
c00050c0:	eb 47                	jmp    c0005109 <f_setlabel+0x144>
c00050c2:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00050c5:	eb 47                	jmp    c000510e <f_setlabel+0x149>
c00050c7:	83 f8 04             	cmp    eax,0x4
c00050ca:	75 53                	jne    c000511f <f_setlabel+0x15a>
c00050cc:	85 db                	test   ebx,ebx
c00050ce:	74 7d                	je     c000514d <f_setlabel+0x188>
c00050d0:	ba 01 00 00 00       	mov    edx,0x1
c00050d5:	8d 44 24 20          	lea    eax,[esp+0x20]
c00050d9:	e8 e5 e4 ff ff       	call   c00035c3 <dir_alloc>
c00050de:	89 c6                	mov    esi,eax
c00050e0:	85 c0                	test   eax,eax
c00050e2:	75 69                	jne    c000514d <f_setlabel+0x188>
c00050e4:	b9 20 00 00 00       	mov    ecx,0x20
c00050e9:	31 d2                	xor    edx,edx
c00050eb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050ef:	e8 8c cc ff ff       	call   c0001d80 <mem_set>
c00050f4:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00050f8:	b9 0b 00 00 00       	mov    ecx,0xb
c00050fd:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0005101:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005105:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005109:	e8 5d cc ff ff       	call   c0001d6b <mem_cpy>
c000510e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005112:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005116:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000511a:	e8 86 db ff ff       	call   c0002ca5 <sync_fs>
c000511f:	89 c6                	mov    esi,eax
c0005121:	eb 2a                	jmp    c000514d <f_setlabel+0x188>
c0005123:	83 fb 09             	cmp    ebx,0x9
c0005126:	0f 87 e8 fe ff ff    	ja     c0005014 <f_setlabel+0x4f>
c000512c:	89 f0                	mov    eax,esi
c000512e:	66 c1 e8 08          	shr    ax,0x8
c0005132:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005136:	43                   	inc    ebx
c0005137:	89 f0                	mov    eax,esi
c0005139:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c000513d:	43                   	inc    ebx
c000513e:	e9 b8 fe ff ff       	jmp    c0004ffb <f_setlabel+0x36>
c0005143:	83 fb 0a             	cmp    ebx,0xa
c0005146:	76 ef                	jbe    c0005137 <f_setlabel+0x172>
c0005148:	e9 c7 fe ff ff       	jmp    c0005014 <f_setlabel+0x4f>
c000514d:	89 f0                	mov    eax,esi
c000514f:	83 c4 54             	add    esp,0x54
c0005152:	5b                   	pop    ebx
c0005153:	5e                   	pop    esi
c0005154:	c3                   	ret    

c0005155 <f_expand>:
c0005155:	55                   	push   ebp
c0005156:	57                   	push   edi
c0005157:	56                   	push   esi
c0005158:	53                   	push   ebx
c0005159:	83 ec 2c             	sub    esp,0x2c
c000515c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005160:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0005164:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005168:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000516c:	89 d8                	mov    eax,ebx
c000516e:	e8 48 d0 ff ff       	call   c00021bb <validate>
c0005173:	89 c6                	mov    esi,eax
c0005175:	85 c0                	test   eax,eax
c0005177:	0f 85 2e 01 00 00    	jne    c00052ab <f_expand+0x156>
c000517d:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0005181:	85 f6                	test   esi,esi
c0005183:	0f 85 22 01 00 00    	jne    c00052ab <f_expand+0x156>
c0005189:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c000518e:	75 0a                	jne    c000519a <f_expand+0x45>
c0005190:	be 07 00 00 00       	mov    esi,0x7
c0005195:	e9 11 01 00 00       	jmp    c00052ab <f_expand+0x156>
c000519a:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c000519e:	75 f0                	jne    c0005190 <f_expand+0x3b>
c00051a0:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00051a4:	74 ea                	je     c0005190 <f_expand+0x3b>
c00051a6:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c00051aa:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c00051ae:	c1 e1 09             	shl    ecx,0x9
c00051b1:	8d 41 ff             	lea    eax,[ecx-0x1]
c00051b4:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c00051b8:	0f 95 c0             	setne  al
c00051bb:	31 d2                	xor    edx,edx
c00051bd:	0f b6 c0             	movzx  eax,al
c00051c0:	89 c7                	mov    edi,eax
c00051c2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00051c6:	f7 f1                	div    ecx
c00051c8:	01 f8                	add    eax,edi
c00051ca:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c00051cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00051d1:	83 ff 01             	cmp    edi,0x1
c00051d4:	76 05                	jbe    c00051db <f_expand+0x86>
c00051d6:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c00051d9:	77 05                	ja     c00051e0 <f_expand+0x8b>
c00051db:	bf 02 00 00 00       	mov    edi,0x2
c00051e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00051e3:	89 fd                	mov    ebp,edi
c00051e5:	31 c9                	xor    ecx,ecx
c00051e7:	89 ea                	mov    edx,ebp
c00051e9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00051ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c00051ef:	45                   	inc    ebp
c00051f0:	e8 3c df ff ff       	call   c0003131 <get_fat.isra.2>
c00051f5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00051f9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051fd:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c0005200:	77 05                	ja     c0005207 <f_expand+0xb2>
c0005202:	bd 02 00 00 00       	mov    ebp,0x2
c0005207:	83 f8 01             	cmp    eax,0x1
c000520a:	74 20                	je     c000522c <f_expand+0xd7>
c000520c:	83 f8 ff             	cmp    eax,0xffffffff
c000520f:	74 22                	je     c0005233 <f_expand+0xde>
c0005211:	85 c0                	test   eax,eax
c0005213:	75 09                	jne    c000521e <f_expand+0xc9>
c0005215:	41                   	inc    ecx
c0005216:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c000521a:	75 07                	jne    c0005223 <f_expand+0xce>
c000521c:	eb 1c                	jmp    c000523a <f_expand+0xe5>
c000521e:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0005221:	31 c9                	xor    ecx,ecx
c0005223:	39 fd                	cmp    ebp,edi
c0005225:	75 c0                	jne    c00051e7 <f_expand+0x92>
c0005227:	e9 64 ff ff ff       	jmp    c0005190 <f_expand+0x3b>
c000522c:	be 02 00 00 00       	mov    esi,0x2
c0005231:	eb 78                	jmp    c00052ab <f_expand+0x156>
c0005233:	be 01 00 00 00       	mov    esi,0x1
c0005238:	eb 71                	jmp    c00052ab <f_expand+0x156>
c000523a:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000523f:	74 2b                	je     c000526c <f_expand+0x117>
c0005241:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005244:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005248:	85 ed                	test   ebp,ebp
c000524a:	74 24                	je     c0005270 <f_expand+0x11b>
c000524c:	83 c9 ff             	or     ecx,0xffffffff
c000524f:	83 fd 01             	cmp    ebp,0x1
c0005252:	74 03                	je     c0005257 <f_expand+0x102>
c0005254:	8d 4f 01             	lea    ecx,[edi+0x1]
c0005257:	89 fa                	mov    edx,edi
c0005259:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000525d:	e8 59 d4 ff ff       	call   c00026bb <put_fat>
c0005262:	85 c0                	test   eax,eax
c0005264:	75 43                	jne    c00052a9 <f_expand+0x154>
c0005266:	89 f8                	mov    eax,edi
c0005268:	4d                   	dec    ebp
c0005269:	47                   	inc    edi
c000526a:	eb dc                	jmp    c0005248 <f_expand+0xf3>
c000526c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000526f:	48                   	dec    eax
c0005270:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005274:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0005279:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c000527c:	74 2d                	je     c00052ab <f_expand+0x156>
c000527e:	80 4b 10 40          	or     BYTE PTR [ebx+0x10],0x40
c0005282:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005285:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005288:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000528c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000528f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0005292:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c0005295:	8d 4b fe             	lea    ecx,[ebx-0x2]
c0005298:	39 c8                	cmp    eax,ecx
c000529a:	77 0f                	ja     c00052ab <f_expand+0x156>
c000529c:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c00052a0:	80 4a 04 01          	or     BYTE PTR [edx+0x4],0x1
c00052a4:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00052a7:	eb 02                	jmp    c00052ab <f_expand+0x156>
c00052a9:	89 c6                	mov    esi,eax
c00052ab:	83 c4 2c             	add    esp,0x2c
c00052ae:	89 f0                	mov    eax,esi
c00052b0:	5b                   	pop    ebx
c00052b1:	5e                   	pop    esi
c00052b2:	5f                   	pop    edi
c00052b3:	5d                   	pop    ebp
c00052b4:	c3                   	ret    

c00052b5 <f_mkfs>:
c00052b5:	55                   	push   ebp
c00052b6:	57                   	push   edi
c00052b7:	bf 0b 00 00 00       	mov    edi,0xb
c00052bc:	56                   	push   esi
c00052bd:	53                   	push   ebx
c00052be:	83 ec 4c             	sub    esp,0x4c
c00052c1:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c00052c5:	8b 6c 24 68          	mov    ebp,DWORD PTR [esp+0x68]
c00052c9:	8d 44 24 60          	lea    eax,[esp+0x60]
c00052cd:	e8 9c ce ff ff       	call   c000216e <get_ldnumber>
c00052d2:	85 c0                	test   eax,eax
c00052d4:	0f 88 a6 07 00 00    	js     c0005a80 <f_mkfs+0x7cb>
c00052da:	8b 14 85 e0 f8 01 c0 	mov    edx,DWORD PTR [eax*4-0x3ffe0720]
c00052e1:	85 d2                	test   edx,edx
c00052e3:	74 03                	je     c00052e8 <f_mkfs+0x33>
c00052e5:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00052e8:	85 db                	test   ebx,ebx
c00052ea:	75 05                	jne    c00052f1 <f_mkfs+0x3c>
c00052ec:	bb 20 ca 01 c0       	mov    ebx,0xc001ca20
c00052f1:	83 ec 0c             	sub    esp,0xc
c00052f4:	0f b6 c0             	movzx  eax,al
c00052f7:	bf 03 00 00 00       	mov    edi,0x3
c00052fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005300:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005304:	e8 e8 c9 ff ff       	call   c0001cf1 <disk_initialize>
c0005309:	83 c4 10             	add    esp,0x10
c000530c:	a8 01                	test   al,0x1
c000530e:	0f 85 6c 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005314:	bf 0a 00 00 00       	mov    edi,0xa
c0005319:	a8 04                	test   al,0x4
c000531b:	0f 85 5f 07 00 00    	jne    c0005a80 <f_mkfs+0x7cb>
c0005321:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0005324:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005328:	85 c0                	test   eax,eax
c000532a:	75 20                	jne    c000534c <f_mkfs+0x97>
c000532c:	51                   	push   ecx
c000532d:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005331:	50                   	push   eax
c0005332:	6a 03                	push   0x3
c0005334:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005338:	e8 e3 c9 ff ff       	call   c0001d20 <disk_ioctl>
c000533d:	83 c4 10             	add    esp,0x10
c0005340:	85 c0                	test   eax,eax
c0005342:	74 08                	je     c000534c <f_mkfs+0x97>
c0005344:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c000534c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0005350:	8d 42 ff             	lea    eax,[edx-0x1]
c0005353:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005358:	77 04                	ja     c000535e <f_mkfs+0xa9>
c000535a:	85 c2                	test   edx,eax
c000535c:	74 08                	je     c0005366 <f_mkfs+0xb1>
c000535e:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0005366:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0005369:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c000536d:	48                   	dec    eax
c000536e:	3c 01                	cmp    al,0x1
c0005370:	76 05                	jbe    c0005377 <f_mkfs+0xc2>
c0005372:	c6 44 24 2d 01       	mov    BYTE PTR [esp+0x2d],0x1
c0005377:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000537a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000537e:	48                   	dec    eax
c000537f:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0005384:	77 07                	ja     c000538d <f_mkfs+0xd8>
c0005386:	f6 44 24 0c 0f       	test   BYTE PTR [esp+0xc],0xf
c000538b:	74 08                	je     c0005395 <f_mkfs+0xe0>
c000538d:	c7 44 24 0c 00 02 00 00 	mov    DWORD PTR [esp+0xc],0x200
c0005395:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005398:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000539e:	77 07                	ja     c00053a7 <f_mkfs+0xf2>
c00053a0:	8d 47 ff             	lea    eax,[edi-0x1]
c00053a3:	85 f8                	test   eax,edi
c00053a5:	74 02                	je     c00053a9 <f_mkfs+0xf4>
c00053a7:	31 ff                	xor    edi,edi
c00053a9:	81 7c 24 6c ff 01 00 00 	cmp    DWORD PTR [esp+0x6c],0x1ff
c00053b1:	77 0a                	ja     c00053bd <f_mkfs+0x108>
c00053b3:	bf 11 00 00 00       	mov    edi,0x11
c00053b8:	e9 c3 06 00 00       	jmp    c0005a80 <f_mkfs+0x7cb>
c00053bd:	8a 1b                	mov    bl,BYTE PTR [ebx]
c00053bf:	89 ee                	mov    esi,ebp
c00053c1:	85 ed                	test   ebp,ebp
c00053c3:	75 1b                	jne    c00053e0 <f_mkfs+0x12b>
c00053c5:	83 ec 0c             	sub    esp,0xc
c00053c8:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00053cc:	25 00 fe ff ff       	and    eax,0xfffffe00
c00053d1:	50                   	push   eax
c00053d2:	e8 b5 06 00 00       	call   c0005a8c <ff_memalloc>
c00053d7:	83 c4 10             	add    esp,0x10
c00053da:	89 c6                	mov    esi,eax
c00053dc:	85 c0                	test   eax,eax
c00053de:	74 d3                	je     c00053b3 <f_mkfs+0xfe>
c00053e0:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c00053e8:	52                   	push   edx
c00053e9:	8d 44 24 38          	lea    eax,[esp+0x38]
c00053ed:	50                   	push   eax
c00053ee:	6a 01                	push   0x1
c00053f0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00053f4:	e8 27 c9 ff ff       	call   c0001d20 <disk_ioctl>
c00053f9:	83 c4 10             	add    esp,0x10
c00053fc:	85 c0                	test   eax,eax
c00053fe:	0f 85 25 06 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005404:	88 d8                	mov    al,bl
c0005406:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000540e:	24 08                	and    al,0x8
c0005410:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c0005414:	75 18                	jne    c000542e <f_mkfs+0x179>
c0005416:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000541a:	83 f8 3f             	cmp    eax,0x3f
c000541d:	76 0f                	jbe    c000542e <f_mkfs+0x179>
c000541f:	83 e8 3f             	sub    eax,0x3f
c0005422:	c7 44 24 08 3f 00 00 00 	mov    DWORD PTR [esp+0x8],0x3f
c000542a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000542e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0005432:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005436:	83 f8 7f             	cmp    eax,0x7f
c0005439:	0f 86 52 02 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c000543f:	b9 80 00 00 00       	mov    ecx,0x80
c0005444:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c000544a:	77 05                	ja     c0005451 <f_mkfs+0x19c>
c000544c:	89 f9                	mov    ecx,edi
c000544e:	c1 e9 09             	shr    ecx,0x9
c0005451:	88 d8                	mov    al,bl
c0005453:	83 e0 01             	and    eax,0x1
c0005456:	80 e3 02             	and    bl,0x2
c0005459:	88 5c 24 2e          	mov    BYTE PTR [esp+0x2e],bl
c000545d:	74 0a                	je     c0005469 <f_mkfs+0x1b4>
c000545f:	84 c0                	test   al,al
c0005461:	0f 84 4c 01 00 00    	je     c00055b3 <f_mkfs+0x2fe>
c0005467:	eb 38                	jmp    c00054a1 <f_mkfs+0x1ec>
c0005469:	bf 13 00 00 00       	mov    edi,0x13
c000546e:	84 c0                	test   al,al
c0005470:	75 2f                	jne    c00054a1 <f_mkfs+0x1ec>
c0005472:	e9 c9 05 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c0005477:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c000547c:	0f 85 08 02 00 00    	jne    c000568a <f_mkfs+0x3d5>
c0005482:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005487:	0f 86 e1 01 00 00    	jbe    c000566e <f_mkfs+0x3b9>
c000548d:	85 c9                	test   ecx,ecx
c000548f:	0f 85 bd 05 00 00    	jne    c0005a52 <f_mkfs+0x79d>
c0005495:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c0005498:	83 f9 40             	cmp    ecx,0x40
c000549b:	0f 87 c1 05 00 00    	ja     c0005a62 <f_mkfs+0x7ad>
c00054a1:	89 cf                	mov    edi,ecx
c00054a3:	85 c9                	test   ecx,ecx
c00054a5:	75 1d                	jne    c00054c4 <f_mkfs+0x20f>
c00054a7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00054ab:	ba 00 ca 01 c0       	mov    edx,0xc001ca00
c00054b0:	c1 eb 0c             	shr    ebx,0xc
c00054b3:	bf 01 00 00 00       	mov    edi,0x1
c00054b8:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00054bb:	66 85 c0             	test   ax,ax
c00054be:	0f 85 5f 01 00 00    	jne    c0005623 <f_mkfs+0x36e>
c00054c4:	31 d2                	xor    edx,edx
c00054c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00054ca:	f7 f7                	div    edi
c00054cc:	3d f5 0f 00 00       	cmp    eax,0xff5
c00054d1:	0f 86 5e 01 00 00    	jbe    c0005635 <f_mkfs+0x380>
c00054d7:	83 c0 02             	add    eax,0x2
c00054da:	c6 44 24 2c 02       	mov    BYTE PTR [esp+0x2c],0x2
c00054df:	01 c0                	add    eax,eax
c00054e1:	05 ff 01 00 00       	add    eax,0x1ff
c00054e6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00054ee:	c1 e8 09             	shr    eax,0x9
c00054f1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00054f5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00054f9:	c1 e0 05             	shl    eax,0x5
c00054fc:	c1 e8 09             	shr    eax,0x9
c00054ff:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0005503:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0005508:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000550c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005510:	03 44 24 1c          	add    eax,DWORD PTR [esp+0x1c]
c0005514:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000551c:	0f af 44 24 20       	imul   eax,DWORD PTR [esp+0x20]
c0005521:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0005525:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005529:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000552d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005531:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0005535:	8d 5c 18 ff          	lea    ebx,[eax+ebx*1-0x1]
c0005539:	f7 d8                	neg    eax
c000553b:	21 c3                	and    ebx,eax
c000553d:	2b 5c 24 28          	sub    ebx,DWORD PTR [esp+0x28]
c0005541:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c0005546:	0f 85 fc 00 00 00    	jne    c0005648 <f_mkfs+0x393>
c000554c:	01 5c 24 1c          	add    DWORD PTR [esp+0x1c],ebx
c0005550:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c0005554:	89 f8                	mov    eax,edi
c0005556:	c1 e0 04             	shl    eax,0x4
c0005559:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c000555d:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0005561:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0005565:	0f 82 26 01 00 00    	jb     c0005691 <f_mkfs+0x3dc>
c000556b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000556f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005573:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0005577:	0f af 54 24 20       	imul   edx,DWORD PTR [esp+0x20]
c000557c:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c0005580:	29 d0                	sub    eax,edx
c0005582:	31 d2                	xor    edx,edx
c0005584:	f7 f7                	div    edi
c0005586:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000558b:	89 c3                	mov    ebx,eax
c000558d:	0f 85 e4 fe ff ff    	jne    c0005477 <f_mkfs+0x1c2>
c0005593:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0005598:	0f 87 02 01 00 00    	ja     c00056a0 <f_mkfs+0x3eb>
c000559e:	85 c9                	test   ecx,ecx
c00055a0:	0f 85 eb 00 00 00    	jne    c0005691 <f_mkfs+0x3dc>
c00055a6:	83 ff 01             	cmp    edi,0x1
c00055a9:	0f 86 e2 00 00 00    	jbe    c0005691 <f_mkfs+0x3dc>
c00055af:	89 f9                	mov    ecx,edi
c00055b1:	d1 e9                	shr    ecx,1
c00055b3:	89 cb                	mov    ebx,ecx
c00055b5:	85 c9                	test   ecx,ecx
c00055b7:	75 26                	jne    c00055df <f_mkfs+0x32a>
c00055b9:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00055bd:	ba 10 ca 01 c0       	mov    edx,0xc001ca10
c00055c2:	c1 eb 11             	shr    ebx,0x11
c00055c5:	b9 01 00 00 00       	mov    ecx,0x1
c00055ca:	0f b7 02             	movzx  eax,WORD PTR [edx]
c00055cd:	66 85 c0             	test   ax,ax
c00055d0:	74 0b                	je     c00055dd <f_mkfs+0x328>
c00055d2:	83 c2 02             	add    edx,0x2
c00055d5:	39 d8                	cmp    eax,ebx
c00055d7:	77 04                	ja     c00055dd <f_mkfs+0x328>
c00055d9:	01 c9                	add    ecx,ecx
c00055db:	eb ed                	jmp    c00055ca <f_mkfs+0x315>
c00055dd:	31 db                	xor    ebx,ebx
c00055df:	31 d2                	xor    edx,edx
c00055e1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00055e5:	f7 f1                	div    ecx
c00055e7:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c00055ee:	2d f6 ff 00 00       	sub    eax,0xfff6
c00055f3:	c1 ea 09             	shr    edx,0x9
c00055f6:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c00055fb:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00055ff:	0f 87 8c 00 00 00    	ja     c0005691 <f_mkfs+0x3dc>
c0005605:	89 cf                	mov    edi,ecx
c0005607:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c000560f:	89 d9                	mov    ecx,ebx
c0005611:	c7 44 24 1c 20 00 00 00 	mov    DWORD PTR [esp+0x1c],0x20
c0005619:	c6 44 24 2c 03       	mov    BYTE PTR [esp+0x2c],0x3
c000561e:	e9 e0 fe ff ff       	jmp    c0005503 <f_mkfs+0x24e>
c0005623:	83 c2 02             	add    edx,0x2
c0005626:	39 d8                	cmp    eax,ebx
c0005628:	0f 87 96 fe ff ff    	ja     c00054c4 <f_mkfs+0x20f>
c000562e:	01 ff                	add    edi,edi
c0005630:	e9 83 fe ff ff       	jmp    c00054b8 <f_mkfs+0x203>
c0005635:	8d 04 40             	lea    eax,[eax+eax*2]
c0005638:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c000563d:	40                   	inc    eax
c000563e:	d1 e8                	shr    eax,1
c0005640:	83 c0 03             	add    eax,0x3
c0005643:	e9 99 fe ff ff       	jmp    c00054e1 <f_mkfs+0x22c>
c0005648:	31 d2                	xor    edx,edx
c000564a:	89 d8                	mov    eax,ebx
c000564c:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005650:	85 d2                	test   edx,edx
c0005652:	74 09                	je     c000565d <f_mkfs+0x3a8>
c0005654:	4b                   	dec    ebx
c0005655:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0005659:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000565d:	89 d8                	mov    eax,ebx
c000565f:	31 d2                	xor    edx,edx
c0005661:	f7 74 24 20          	div    DWORD PTR [esp+0x20]
c0005665:	01 44 24 10          	add    DWORD PTR [esp+0x10],eax
c0005669:	e9 e6 fe ff ff       	jmp    c0005554 <f_mkfs+0x29f>
c000566e:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005673:	77 2b                	ja     c00056a0 <f_mkfs+0x3eb>
c0005675:	85 c9                	test   ecx,ecx
c0005677:	75 18                	jne    c0005691 <f_mkfs+0x3dc>
c0005679:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000567c:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005682:	0f 86 19 fe ff ff    	jbe    c00054a1 <f_mkfs+0x1ec>
c0005688:	eb 07                	jmp    c0005691 <f_mkfs+0x3dc>
c000568a:	3d f5 0f 00 00       	cmp    eax,0xff5
c000568f:	76 0a                	jbe    c000569b <f_mkfs+0x3e6>
c0005691:	bf 0e 00 00 00       	mov    edi,0xe
c0005696:	e9 a5 03 00 00       	jmp    c0005a40 <f_mkfs+0x78b>
c000569b:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00056a0:	31 d2                	xor    edx,edx
c00056a2:	b9 00 02 00 00       	mov    ecx,0x200
c00056a7:	89 f0                	mov    eax,esi
c00056a9:	e8 d2 c6 ff ff       	call   c0001d80 <mem_set>
c00056ae:	b9 0b 00 00 00       	mov    ecx,0xb
c00056b3:	ba b2 c9 01 c0       	mov    edx,0xc001c9b2
c00056b8:	89 f0                	mov    eax,esi
c00056ba:	e8 ac c6 ff ff       	call   c0001d6b <mem_cpy>
c00056bf:	8d 46 0b             	lea    eax,[esi+0xb]
c00056c2:	ba 00 02 00 00       	mov    edx,0x200
c00056c7:	e8 98 c6 ff ff       	call   c0001d64 <st_word>
c00056cc:	89 f8                	mov    eax,edi
c00056ce:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c00056d3:	88 46 0d             	mov    BYTE PTR [esi+0xd],al
c00056d6:	8d 46 0e             	lea    eax,[esi+0xe]
c00056d9:	e8 86 c6 ff ff       	call   c0001d64 <st_word>
c00056de:	8a 44 24 2d          	mov    al,BYTE PTR [esp+0x2d]
c00056e2:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00056e7:	88 46 10             	mov    BYTE PTR [esi+0x10],al
c00056ea:	75 08                	jne    c00056f4 <f_mkfs+0x43f>
c00056ec:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00056f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00056f8:	8d 46 11             	lea    eax,[esi+0x11]
c00056fb:	e8 64 c6 ff ff       	call   c0001d64 <st_word>
c0005700:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0005704:	81 fa ff ff 00 00    	cmp    edx,0xffff
c000570a:	77 0a                	ja     c0005716 <f_mkfs+0x461>
c000570c:	8d 46 13             	lea    eax,[esi+0x13]
c000570f:	e8 50 c6 ff ff       	call   c0001d64 <st_word>
c0005714:	eb 08                	jmp    c000571e <f_mkfs+0x469>
c0005716:	8d 46 20             	lea    eax,[esi+0x20]
c0005719:	e8 4a c6 ff ff       	call   c0001d68 <st_dword>
c000571e:	8d 46 18             	lea    eax,[esi+0x18]
c0005721:	ba 3f 00 00 00       	mov    edx,0x3f
c0005726:	c6 46 15 f8          	mov    BYTE PTR [esi+0x15],0xf8
c000572a:	e8 35 c6 ff ff       	call   c0001d64 <st_word>
c000572f:	8d 46 1a             	lea    eax,[esi+0x1a]
c0005732:	ba ff 00 00 00       	mov    edx,0xff
c0005737:	e8 28 c6 ff ff       	call   c0001d64 <st_word>
c000573c:	8d 46 1c             	lea    eax,[esi+0x1c]
c000573f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005743:	e8 20 c6 ff ff       	call   c0001d68 <st_dword>
c0005748:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000574d:	75 57                	jne    c00057a6 <f_mkfs+0x4f1>
c000574f:	8d 46 43             	lea    eax,[esi+0x43]
c0005752:	ba 00 00 21 50       	mov    edx,0x50210000
c0005757:	e8 0c c6 ff ff       	call   c0001d68 <st_dword>
c000575c:	8d 46 24             	lea    eax,[esi+0x24]
c000575f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0005763:	e8 00 c6 ff ff       	call   c0001d68 <st_dword>
c0005768:	8d 46 2c             	lea    eax,[esi+0x2c]
c000576b:	ba 02 00 00 00       	mov    edx,0x2
c0005770:	e8 f3 c5 ff ff       	call   c0001d68 <st_dword>
c0005775:	8d 46 30             	lea    eax,[esi+0x30]
c0005778:	ba 01 00 00 00       	mov    edx,0x1
c000577d:	e8 e2 c5 ff ff       	call   c0001d64 <st_word>
c0005782:	8d 46 32             	lea    eax,[esi+0x32]
c0005785:	ba 06 00 00 00       	mov    edx,0x6
c000578a:	e8 d5 c5 ff ff       	call   c0001d64 <st_word>
c000578f:	c6 46 40 80          	mov    BYTE PTR [esi+0x40],0x80
c0005793:	c6 46 42 29          	mov    BYTE PTR [esi+0x42],0x29
c0005797:	8d 46 47             	lea    eax,[esi+0x47]
c000579a:	b9 13 00 00 00       	mov    ecx,0x13
c000579f:	ba be c9 01 c0       	mov    edx,0xc001c9be
c00057a4:	eb 2f                	jmp    c00057d5 <f_mkfs+0x520>
c00057a6:	8d 46 27             	lea    eax,[esi+0x27]
c00057a9:	ba 00 00 21 50       	mov    edx,0x50210000
c00057ae:	e8 b5 c5 ff ff       	call   c0001d68 <st_dword>
c00057b3:	0f b7 54 24 10       	movzx  edx,WORD PTR [esp+0x10]
c00057b8:	8d 46 16             	lea    eax,[esi+0x16]
c00057bb:	e8 a4 c5 ff ff       	call   c0001d64 <st_word>
c00057c0:	c6 46 24 80          	mov    BYTE PTR [esi+0x24],0x80
c00057c4:	c6 46 26 29          	mov    BYTE PTR [esi+0x26],0x29
c00057c8:	8d 46 2b             	lea    eax,[esi+0x2b]
c00057cb:	b9 13 00 00 00       	mov    ecx,0x13
c00057d0:	ba d2 c9 01 c0       	mov    edx,0xc001c9d2
c00057d5:	e8 91 c5 ff ff       	call   c0001d6b <mem_cpy>
c00057da:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c00057e0:	ba 55 aa 00 00       	mov    edx,0xaa55
c00057e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00057e9:	e8 76 c5 ff ff       	call   c0001d64 <st_word>
c00057ee:	6a 01                	push   0x1
c00057f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00057f4:	56                   	push   esi
c00057f5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00057f9:	e8 0c c5 ff ff       	call   c0001d0a <disk_write>
c00057fe:	83 c4 10             	add    esp,0x10
c0005801:	85 c0                	test   eax,eax
c0005803:	0f 85 20 02 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005809:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000580e:	0f 85 98 00 00 00    	jne    c00058ac <f_mkfs+0x5f7>
c0005814:	6a 01                	push   0x1
c0005816:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000581a:	83 c0 06             	add    eax,0x6
c000581d:	50                   	push   eax
c000581e:	56                   	push   esi
c000581f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005823:	e8 e2 c4 ff ff       	call   c0001d0a <disk_write>
c0005828:	b9 00 02 00 00       	mov    ecx,0x200
c000582d:	31 d2                	xor    edx,edx
c000582f:	89 f0                	mov    eax,esi
c0005831:	e8 4a c5 ff ff       	call   c0001d80 <mem_set>
c0005836:	ba 52 52 61 41       	mov    edx,0x41615252
c000583b:	89 f0                	mov    eax,esi
c000583d:	e8 26 c5 ff ff       	call   c0001d68 <st_dword>
c0005842:	8d 86 e4 01 00 00    	lea    eax,[esi+0x1e4]
c0005848:	ba 72 72 41 61       	mov    edx,0x61417272
c000584d:	e8 16 c5 ff ff       	call   c0001d68 <st_dword>
c0005852:	8d 53 ff             	lea    edx,[ebx-0x1]
c0005855:	8d 86 e8 01 00 00    	lea    eax,[esi+0x1e8]
c000585b:	e8 08 c5 ff ff       	call   c0001d68 <st_dword>
c0005860:	8d 86 ec 01 00 00    	lea    eax,[esi+0x1ec]
c0005866:	ba 02 00 00 00       	mov    edx,0x2
c000586b:	e8 f8 c4 ff ff       	call   c0001d68 <st_dword>
c0005870:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005875:	8d 86 fe 01 00 00    	lea    eax,[esi+0x1fe]
c000587b:	e8 e4 c4 ff ff       	call   c0001d64 <st_word>
c0005880:	6a 01                	push   0x1
c0005882:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005886:	83 c0 07             	add    eax,0x7
c0005889:	50                   	push   eax
c000588a:	56                   	push   esi
c000588b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000588f:	e8 76 c4 ff ff       	call   c0001d0a <disk_write>
c0005894:	83 c4 20             	add    esp,0x20
c0005897:	6a 01                	push   0x1
c0005899:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000589d:	40                   	inc    eax
c000589e:	50                   	push   eax
c000589f:	56                   	push   esi
c00058a0:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00058a4:	e8 61 c4 ff ff       	call   c0001d0a <disk_write>
c00058a9:	83 c4 10             	add    esp,0x10
c00058ac:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c00058b0:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c00058b4:	c1 e8 09             	shr    eax,0x9
c00058b7:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c00058bd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00058c1:	31 d2                	xor    edx,edx
c00058c3:	31 db                	xor    ebx,ebx
c00058c5:	89 f0                	mov    eax,esi
c00058c7:	e8 b4 c4 ff ff       	call   c0001d80 <mem_set>
c00058cc:	80 7c 24 2c 01       	cmp    BYTE PTR [esp+0x2c],0x1
c00058d1:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00058d9:	0f 94 c3             	sete   bl
c00058dc:	4b                   	dec    ebx
c00058dd:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00058e3:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00058e9:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00058ee:	75 21                	jne    c0005911 <f_mkfs+0x65c>
c00058f0:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00058f5:	89 f0                	mov    eax,esi
c00058f7:	e8 6c c4 ff ff       	call   c0001d68 <st_dword>
c00058fc:	8d 46 04             	lea    eax,[esi+0x4]
c00058ff:	83 ca ff             	or     edx,0xffffffff
c0005902:	e8 61 c4 ff ff       	call   c0001d68 <st_dword>
c0005907:	8d 46 08             	lea    eax,[esi+0x8]
c000590a:	ba ff ff ff 0f       	mov    edx,0xfffffff
c000590f:	eb 04                	jmp    c0005915 <f_mkfs+0x660>
c0005911:	89 da                	mov    edx,ebx
c0005913:	89 f0                	mov    eax,esi
c0005915:	e8 4e c4 ff ff       	call   c0001d68 <st_dword>
c000591a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000591e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005922:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005926:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000592a:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000592e:	76 08                	jbe    c0005938 <f_mkfs+0x683>
c0005930:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005934:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005938:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000593c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005940:	56                   	push   esi
c0005941:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005945:	e8 c0 c3 ff ff       	call   c0001d0a <disk_write>
c000594a:	83 c4 10             	add    esp,0x10
c000594d:	85 c0                	test   eax,eax
c000594f:	0f 85 d4 00 00 00    	jne    c0005a29 <f_mkfs+0x774>
c0005955:	b9 00 02 00 00       	mov    ecx,0x200
c000595a:	31 d2                	xor    edx,edx
c000595c:	89 f0                	mov    eax,esi
c000595e:	e8 1d c4 ff ff       	call   c0001d80 <mem_set>
c0005963:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005967:	01 4c 24 18          	add    DWORD PTR [esp+0x18],ecx
c000596b:	29 4c 24 14          	sub    DWORD PTR [esp+0x14],ecx
c000596f:	75 b1                	jne    c0005922 <f_mkfs+0x66d>
c0005971:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005975:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c000597d:	40                   	inc    eax
c000597e:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0005982:	0f 87 61 ff ff ff    	ja     c00058e9 <f_mkfs+0x634>
c0005988:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c000598d:	74 04                	je     c0005993 <f_mkfs+0x6de>
c000598f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0005993:	89 fb                	mov    ebx,edi
c0005995:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c0005999:	76 04                	jbe    c000599f <f_mkfs+0x6ea>
c000599b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000599f:	53                   	push   ebx
c00059a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00059a4:	56                   	push   esi
c00059a5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00059a9:	e8 5c c3 ff ff       	call   c0001d0a <disk_write>
c00059ae:	83 c4 10             	add    esp,0x10
c00059b1:	85 c0                	test   eax,eax
c00059b3:	75 74                	jne    c0005a29 <f_mkfs+0x774>
c00059b5:	01 5c 24 18          	add    DWORD PTR [esp+0x18],ebx
c00059b9:	29 df                	sub    edi,ebx
c00059bb:	75 d6                	jne    c0005993 <f_mkfs+0x6de>
c00059bd:	b1 0c                	mov    cl,0xc
c00059bf:	80 7c 24 2c 03       	cmp    BYTE PTR [esp+0x2c],0x3
c00059c4:	74 18                	je     c00059de <f_mkfs+0x729>
c00059c6:	b1 06                	mov    cl,0x6
c00059c8:	81 7c 24 34 ff ff 00 00 	cmp    DWORD PTR [esp+0x34],0xffff
c00059d0:	77 0c                	ja     c00059de <f_mkfs+0x729>
c00059d2:	80 7c 24 2c 02       	cmp    BYTE PTR [esp+0x2c],0x2
c00059d7:	0f 94 c1             	sete   cl
c00059da:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00059de:	80 7c 24 2f 00       	cmp    BYTE PTR [esp+0x2f],0x0
c00059e3:	75 2d                	jne    c0005a12 <f_mkfs+0x75d>
c00059e5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00059e9:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00059f1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00059f5:	0f b6 c9             	movzx  ecx,cl
c00059f8:	83 ec 0c             	sub    esp,0xc
c00059fb:	56                   	push   esi
c00059fc:	8d 54 24 48          	lea    edx,[esp+0x48]
c0005a00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a04:	e8 4c d3 ff ff       	call   c0002d55 <create_partition>
c0005a09:	83 c4 10             	add    esp,0x10
c0005a0c:	89 c7                	mov    edi,eax
c0005a0e:	85 c0                	test   eax,eax
c0005a10:	75 2e                	jne    c0005a40 <f_mkfs+0x78b>
c0005a12:	31 ff                	xor    edi,edi
c0005a14:	50                   	push   eax
c0005a15:	6a 00                	push   0x0
c0005a17:	6a 00                	push   0x0
c0005a19:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0005a1d:	e8 fe c2 ff ff       	call   c0001d20 <disk_ioctl>
c0005a22:	83 c4 10             	add    esp,0x10
c0005a25:	85 c0                	test   eax,eax
c0005a27:	74 17                	je     c0005a40 <f_mkfs+0x78b>
c0005a29:	85 ed                	test   ebp,ebp
c0005a2b:	75 0c                	jne    c0005a39 <f_mkfs+0x784>
c0005a2d:	83 ec 0c             	sub    esp,0xc
c0005a30:	56                   	push   esi
c0005a31:	e8 6e 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a36:	83 c4 10             	add    esp,0x10
c0005a39:	bf 01 00 00 00       	mov    edi,0x1
c0005a3e:	eb 40                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a40:	85 ed                	test   ebp,ebp
c0005a42:	75 3c                	jne    c0005a80 <f_mkfs+0x7cb>
c0005a44:	83 ec 0c             	sub    esp,0xc
c0005a47:	56                   	push   esi
c0005a48:	e8 57 00 00 00       	call   c0005aa4 <ff_memfree>
c0005a4d:	83 c4 10             	add    esp,0x10
c0005a50:	eb 2e                	jmp    c0005a80 <f_mkfs+0x7cb>
c0005a52:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a57:	0f 85 56 fb ff ff    	jne    c00055b3 <f_mkfs+0x2fe>
c0005a5d:	e9 2f fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a62:	80 7c 24 2e 00       	cmp    BYTE PTR [esp+0x2e],0x0
c0005a67:	0f 85 4c fb ff ff    	jne    c00055b9 <f_mkfs+0x304>
c0005a6d:	89 cf                	mov    edi,ecx
c0005a6f:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005a75:	0f 86 49 fa ff ff    	jbe    c00054c4 <f_mkfs+0x20f>
c0005a7b:	e9 11 fc ff ff       	jmp    c0005691 <f_mkfs+0x3dc>
c0005a80:	83 c4 4c             	add    esp,0x4c
c0005a83:	89 f8                	mov    eax,edi
c0005a85:	5b                   	pop    ebx
c0005a86:	5e                   	pop    esi
c0005a87:	5f                   	pop    edi
c0005a88:	5d                   	pop    ebp
c0005a89:	c3                   	ret    
c0005a8a:	66 90                	xchg   ax,ax

c0005a8c <ff_memalloc>:
c0005a8c:	83 ec 0c             	sub    esp,0xc
c0005a8f:	83 ec 0c             	sub    esp,0xc
c0005a92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005a96:	e8 fe 1e 00 00       	call   c0007999 <malloc>
c0005a9b:	83 c4 10             	add    esp,0x10
c0005a9e:	83 c4 0c             	add    esp,0xc
c0005aa1:	c3                   	ret    
c0005aa2:	66 90                	xchg   ax,ax

c0005aa4 <ff_memfree>:
c0005aa4:	83 ec 0c             	sub    esp,0xc
c0005aa7:	83 ec 0c             	sub    esp,0xc
c0005aaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005aae:	e8 f6 1e 00 00       	call   c00079a9 <free>
c0005ab3:	83 c4 10             	add    esp,0x10
c0005ab6:	90                   	nop
c0005ab7:	83 c4 0c             	add    esp,0xc
c0005aba:	c3                   	ret    
c0005abb:	90                   	nop

c0005abc <ff_uni2oem>:
c0005abc:	83 ec 14             	sub    esp,0x14
c0005abf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ac3:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005ac7:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005ace:	c7 44 24 0c 00 ce 01 c0 	mov    DWORD PTR [esp+0xc],0xc001ce00
c0005ad6:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005adb:	77 0b                	ja     c0005ae8 <ff_uni2oem+0x2c>
c0005add:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ae1:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ae6:	eb 68                	jmp    c0005b50 <ff_uni2oem+0x94>
c0005ae8:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005af0:	77 5e                	ja     c0005b50 <ff_uni2oem+0x94>
c0005af2:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005af8:	75 56                	jne    c0005b50 <ff_uni2oem+0x94>
c0005afa:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005b01:	eb 0d                	jmp    c0005b10 <ff_uni2oem+0x54>
c0005b03:	90                   	nop
c0005b04:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b09:	40                   	inc    eax
c0005b0a:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b0f:	90                   	nop
c0005b10:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0005b16:	77 24                	ja     c0005b3c <ff_uni2oem+0x80>
c0005b18:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b1d:	25 ff ff 00 00       	and    eax,0xffff
c0005b22:	01 c0                	add    eax,eax
c0005b24:	89 c2                	mov    edx,eax
c0005b26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005b2a:	01 d0                	add    eax,edx
c0005b2c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005b2f:	25 ff ff 00 00       	and    eax,0xffff
c0005b34:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005b38:	75 ca                	jne    c0005b04 <ff_uni2oem+0x48>
c0005b3a:	66 90                	xchg   ax,ax
c0005b3c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b41:	83 e8 80             	sub    eax,0xffffff80
c0005b44:	25 ff 00 00 00       	and    eax,0xff
c0005b49:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005b4e:	66 90                	xchg   ax,ax
c0005b50:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005b55:	83 c4 14             	add    esp,0x14
c0005b58:	c3                   	ret    
c0005b59:	8d 76 00             	lea    esi,[esi+0x0]

c0005b5c <ff_oem2uni>:
c0005b5c:	83 ec 18             	sub    esp,0x18
c0005b5f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005b63:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005b67:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005b6c:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005b70:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005b77:	c7 44 24 10 00 ce 01 c0 	mov    DWORD PTR [esp+0x10],0xc001ce00
c0005b7f:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c0005b85:	77 0d                	ja     c0005b94 <ff_oem2uni+0x38>
c0005b87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005b8b:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005b90:	eb 36                	jmp    c0005bc8 <ff_oem2uni+0x6c>
c0005b92:	66 90                	xchg   ax,ax
c0005b94:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c0005b9a:	75 2c                	jne    c0005bc8 <ff_oem2uni+0x6c>
c0005b9c:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0005ba3:	77 23                	ja     c0005bc8 <ff_oem2uni+0x6c>
c0005ba5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005ba9:	25 ff ff 00 00       	and    eax,0xffff
c0005bae:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005bb3:	01 c0                	add    eax,eax
c0005bb5:	89 c2                	mov    edx,eax
c0005bb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005bbb:	01 d0                	add    eax,edx
c0005bbd:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005bc0:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005bc5:	8d 76 00             	lea    esi,[esi+0x0]
c0005bc8:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005bcd:	83 c4 18             	add    esp,0x18
c0005bd0:	c3                   	ret    
c0005bd1:	8d 76 00             	lea    esi,[esi+0x0]

c0005bd4 <ff_wtoupper>:
c0005bd4:	83 ec 10             	sub    esp,0x10
c0005bd7:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005bdf:	0f 87 77 01 00 00    	ja     c0005d5c <ff_wtoupper+0x188>
c0005be5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005be9:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005bee:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c0005bf5:	77 09                	ja     c0005c00 <ff_wtoupper+0x2c>
c0005bf7:	b8 00 cc 01 c0       	mov    eax,0xc001cc00
c0005bfc:	eb 0a                	jmp    c0005c08 <ff_wtoupper+0x34>
c0005bfe:	66 90                	xchg   ax,ax
c0005c00:	b8 40 cb 01 c0       	mov    eax,0xc001cb40
c0005c05:	8d 76 00             	lea    esi,[esi+0x0]
c0005c08:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005c0c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c10:	8d 50 02             	lea    edx,[eax+0x2]
c0005c13:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c17:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c1a:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005c1f:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0005c25:	0f 84 21 01 00 00    	je     c0005d4c <ff_wtoupper+0x178>
c0005c2b:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c30:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0005c35:	0f 82 11 01 00 00    	jb     c0005d4c <ff_wtoupper+0x178>
c0005c3b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c3f:	8d 50 02             	lea    edx,[eax+0x2]
c0005c42:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c46:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005c49:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005c4e:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c53:	66 c1 e8 08          	shr    ax,0x8
c0005c57:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005c5c:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0005c63:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005c68:	31 d2                	xor    edx,edx
c0005c6a:	66 89 c2             	mov    dx,ax
c0005c6d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c71:	31 c9                	xor    ecx,ecx
c0005c73:	66 89 c1             	mov    cx,ax
c0005c76:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005c7b:	25 ff ff 00 00       	and    eax,0xffff
c0005c80:	01 c8                	add    eax,ecx
c0005c82:	39 c2                	cmp    edx,eax
c0005c84:	0f 8d 9a 00 00 00    	jge    c0005d24 <ff_wtoupper+0x150>
c0005c8a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c8e:	25 ff ff 00 00       	and    eax,0xffff
c0005c93:	83 f8 08             	cmp    eax,0x8
c0005c96:	0f 87 ac 00 00 00    	ja     c0005d48 <ff_wtoupper+0x174>
c0005c9c:	8b 04 85 00 cb 01 c0 	mov    eax,DWORD PTR [eax*4-0x3ffe3500]
c0005ca3:	ff e0                	jmp    eax
c0005ca5:	8d 76 00             	lea    esi,[esi+0x0]
c0005ca8:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cad:	31 d2                	xor    edx,edx
c0005caf:	66 89 c2             	mov    dx,ax
c0005cb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005cb6:	25 ff ff 00 00       	and    eax,0xffff
c0005cbb:	29 c2                	sub    edx,eax
c0005cbd:	89 d0                	mov    eax,edx
c0005cbf:	01 c0                	add    eax,eax
c0005cc1:	89 c2                	mov    edx,eax
c0005cc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc7:	01 d0                	add    eax,edx
c0005cc9:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005ccc:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005cd1:	eb 4d                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cd3:	90                   	nop
c0005cd4:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005cd9:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0005cdd:	83 e0 01             	and    eax,0x1
c0005ce0:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c0005ce5:	eb 39                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005ce7:	90                   	nop
c0005ce8:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0005cee:	eb 30                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf0:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c0005cf6:	eb 28                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005cf8:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c0005cfe:	eb 20                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d00:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c0005d06:	eb 18                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d08:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c0005d0e:	eb 10                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d10:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c0005d16:	eb 08                	jmp    c0005d20 <ff_wtoupper+0x14c>
c0005d18:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c0005d1f:	90                   	nop
c0005d20:	eb 26                	jmp    c0005d48 <ff_wtoupper+0x174>
c0005d22:	66 90                	xchg   ax,ax
c0005d24:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c0005d2a:	0f 85 dc fe ff ff    	jne    c0005c0c <ff_wtoupper+0x38>
c0005d30:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005d35:	25 ff ff 00 00       	and    eax,0xffff
c0005d3a:	01 c0                	add    eax,eax
c0005d3c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005d40:	e9 c7 fe ff ff       	jmp    c0005c0c <ff_wtoupper+0x38>
c0005d45:	8d 76 00             	lea    esi,[esi+0x0]
c0005d48:	90                   	nop
c0005d49:	8d 76 00             	lea    esi,[esi+0x0]
c0005d4c:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005d51:	25 ff ff 00 00       	and    eax,0xffff
c0005d56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005d5a:	66 90                	xchg   ax,ax
c0005d5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d60:	83 c4 10             	add    esp,0x10
c0005d63:	c3                   	ret    

c0005d64 <utf2ucs>:
c0005d64:	57                   	push   edi
c0005d65:	31 c9                	xor    ecx,ecx
c0005d67:	56                   	push   esi
c0005d68:	89 d7                	mov    edi,edx
c0005d6a:	53                   	push   ebx
c0005d6b:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005d6f:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005d73:	89 de                	mov    esi,ebx
c0005d75:	c1 fe 08             	sar    esi,0x8
c0005d78:	89 f2                	mov    edx,esi
c0005d7a:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005d7d:	41                   	inc    ecx
c0005d7e:	85 db                	test   ebx,ebx
c0005d80:	75 e9                	jne    c0005d6b <utf2ucs+0x7>
c0005d82:	5b                   	pop    ebx
c0005d83:	5e                   	pop    esi
c0005d84:	5f                   	pop    edi
c0005d85:	c3                   	ret    

c0005d86 <ucs2utfn>:
c0005d86:	83 e1 fe             	and    ecx,0xfffffffe
c0005d89:	01 d1                	add    ecx,edx
c0005d8b:	39 d1                	cmp    ecx,edx
c0005d8d:	75 04                	jne    c0005d93 <ucs2utfn+0xd>
c0005d8f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005d92:	c3                   	ret    
c0005d93:	57                   	push   edi
c0005d94:	56                   	push   esi
c0005d95:	53                   	push   ebx
c0005d96:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005d99:	83 c2 02             	add    edx,0x2
c0005d9c:	89 de                	mov    esi,ebx
c0005d9e:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005da2:	c1 e6 08             	shl    esi,0x8
c0005da5:	09 f3                	or     ebx,esi
c0005da7:	83 fb 3b             	cmp    ebx,0x3b
c0005daa:	74 51                	je     c0005dfd <ucs2utfn+0x77>
c0005dac:	83 fb 7f             	cmp    ebx,0x7f
c0005daf:	7f 05                	jg     c0005db6 <ucs2utfn+0x30>
c0005db1:	88 18                	mov    BYTE PTR [eax],bl
c0005db3:	40                   	inc    eax
c0005db4:	eb 43                	jmp    c0005df9 <ucs2utfn+0x73>
c0005db6:	89 de                	mov    esi,ebx
c0005db8:	89 df                	mov    edi,ebx
c0005dba:	c1 fe 06             	sar    esi,0x6
c0005dbd:	83 e7 3f             	and    edi,0x3f
c0005dc0:	83 cf 80             	or     edi,0xffffff80
c0005dc3:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005dc9:	7f 12                	jg     c0005ddd <ucs2utfn+0x57>
c0005dcb:	89 f3                	mov    ebx,esi
c0005dcd:	83 c0 02             	add    eax,0x2
c0005dd0:	83 cb c0             	or     ebx,0xffffffc0
c0005dd3:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005dd6:	89 fb                	mov    ebx,edi
c0005dd8:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005ddb:	eb 1c                	jmp    c0005df9 <ucs2utfn+0x73>
c0005ddd:	c1 fb 0c             	sar    ebx,0xc
c0005de0:	83 e6 3f             	and    esi,0x3f
c0005de3:	83 cb e0             	or     ebx,0xffffffe0
c0005de6:	83 c0 03             	add    eax,0x3
c0005de9:	88 58 fd             	mov    BYTE PTR [eax-0x3],bl
c0005dec:	89 f3                	mov    ebx,esi
c0005dee:	83 cb 80             	or     ebx,0xffffff80
c0005df1:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005df4:	89 fb                	mov    ebx,edi
c0005df6:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005df9:	39 d1                	cmp    ecx,edx
c0005dfb:	75 99                	jne    c0005d96 <ucs2utfn+0x10>
c0005dfd:	5b                   	pop    ebx
c0005dfe:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005e01:	5e                   	pop    esi
c0005e02:	5f                   	pop    edi
c0005e03:	c3                   	ret    

c0005e04 <isjoliet>:
c0005e04:	31 d2                	xor    edx,edx
c0005e06:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005e09:	75 22                	jne    c0005e2d <isjoliet+0x29>
c0005e0b:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005e0f:	75 1c                	jne    c0005e2d <isjoliet+0x29>
c0005e11:	8a 40 02             	mov    al,BYTE PTR [eax+0x2]
c0005e14:	ba 02 00 00 00       	mov    edx,0x2
c0005e19:	3c 43                	cmp    al,0x43
c0005e1b:	74 10                	je     c0005e2d <isjoliet+0x29>
c0005e1d:	ba 03 00 00 00       	mov    edx,0x3
c0005e22:	3c 45                	cmp    al,0x45
c0005e24:	74 07                	je     c0005e2d <isjoliet+0x29>
c0005e26:	31 d2                	xor    edx,edx
c0005e28:	3c 40                	cmp    al,0x40
c0005e2a:	0f 94 c2             	sete   dl
c0005e2d:	89 d0                	mov    eax,edx
c0005e2f:	c3                   	ret    

c0005e30 <htohl_32>:
c0005e30:	8b 00                	mov    eax,DWORD PTR [eax]
c0005e32:	c3                   	ret    

c0005e33 <iso_733>:
c0005e33:	eb fb                	jmp    c0005e30 <htohl_32>

c0005e35 <bclear_cache>:
c0005e35:	31 d2                	xor    edx,edx
c0005e37:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e3a:	42                   	inc    edx
c0005e3b:	c7 01 ff ff ff ff    	mov    DWORD PTR [ecx],0xffffffff
c0005e41:	83 fa 10             	cmp    edx,0x10
c0005e44:	75 f1                	jne    c0005e37 <bclear_cache+0x2>
c0005e46:	c3                   	ret    

c0005e47 <bgrad_cache>:
c0005e47:	83 fa 0e             	cmp    edx,0xe
c0005e4a:	77 16                	ja     c0005e62 <bgrad_cache+0x1b>
c0005e4c:	53                   	push   ebx
c0005e4d:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0005e50:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c0005e54:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0005e57:	42                   	inc    edx
c0005e58:	83 fa 0f             	cmp    edx,0xf
c0005e5b:	75 f3                	jne    c0005e50 <bgrad_cache+0x9>
c0005e5d:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0005e60:	5b                   	pop    ebx
c0005e61:	c3                   	ret    
c0005e62:	c3                   	ret    

c0005e63 <bclear>:
c0005e63:	b8 00 03 02 c0       	mov    eax,0xc0020300
c0005e68:	e8 c8 ff ff ff       	call   c0005e35 <bclear_cache>
c0005e6d:	b8 40 03 02 c0       	mov    eax,0xc0020340
c0005e72:	eb c1                	jmp    c0005e35 <bclear_cache>

c0005e74 <iso_break_all>:
c0005e74:	31 c0                	xor    eax,eax
c0005e76:	c7 80 10 fa 01 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffe05f0],0x1
c0005e80:	05 94 00 00 00       	add    eax,0x94
c0005e85:	3d 40 09 00 00       	cmp    eax,0x940
c0005e8a:	75 ea                	jne    c0005e76 <iso_break_all+0x2>
c0005e8c:	c3                   	ret    

c0005e8d <ucscompare>:
c0005e8d:	55                   	push   ebp
c0005e8e:	57                   	push   edi
c0005e8f:	89 c7                	mov    edi,eax
c0005e91:	56                   	push   esi
c0005e92:	89 d6                	mov    esi,edx
c0005e94:	53                   	push   ebx
c0005e95:	31 d2                	xor    edx,edx
c0005e97:	83 ec 1c             	sub    esp,0x1c
c0005e9a:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c0005e9e:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0005ea3:	c1 e3 08             	shl    ebx,0x8
c0005ea6:	09 c3                	or     ebx,eax
c0005ea8:	39 ca                	cmp    edx,ecx
c0005eaa:	7d 42                	jge    c0005eee <ucscompare+0x61>
c0005eac:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c0005eb0:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0005eb5:	c1 e0 08             	shl    eax,0x8
c0005eb8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005ebc:	09 e8                	or     eax,ebp
c0005ebe:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005ec2:	83 f8 3b             	cmp    eax,0x3b
c0005ec5:	74 27                	je     c0005eee <ucscompare+0x61>
c0005ec7:	83 ec 0c             	sub    esp,0xc
c0005eca:	50                   	push   eax
c0005ecb:	e8 20 aa ff ff       	call   c00008f0 <tolower>
c0005ed0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0005ed3:	89 c5                	mov    ebp,eax
c0005ed5:	e8 16 aa ff ff       	call   c00008f0 <tolower>
c0005eda:	83 c4 10             	add    esp,0x10
c0005edd:	39 c5                	cmp    ebp,eax
c0005edf:	75 20                	jne    c0005f01 <ucscompare+0x74>
c0005ee1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005ee5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005ee9:	83 c2 02             	add    edx,0x2
c0005eec:	eb ac                	jmp    c0005e9a <ucscompare+0xd>
c0005eee:	85 db                	test   ebx,ebx
c0005ef0:	0f 95 c2             	setne  dl
c0005ef3:	31 c0                	xor    eax,eax
c0005ef5:	83 fb 2f             	cmp    ebx,0x2f
c0005ef8:	0f 95 c0             	setne  al
c0005efb:	21 d0                	and    eax,edx
c0005efd:	f7 d8                	neg    eax
c0005eff:	eb 03                	jmp    c0005f04 <ucscompare+0x77>
c0005f01:	83 c8 ff             	or     eax,0xffffffff
c0005f04:	83 c4 1c             	add    esp,0x1c
c0005f07:	5b                   	pop    ebx
c0005f08:	5e                   	pop    esi
c0005f09:	5f                   	pop    edi
c0005f0a:	5d                   	pop    ebp
c0005f0b:	c3                   	ret    

c0005f0c <fncompare>:
c0005f0c:	55                   	push   ebp
c0005f0d:	57                   	push   edi
c0005f0e:	89 c7                	mov    edi,eax
c0005f10:	56                   	push   esi
c0005f11:	89 ce                	mov    esi,ecx
c0005f13:	53                   	push   ebx
c0005f14:	31 db                	xor    ebx,ebx
c0005f16:	83 ec 1c             	sub    esp,0x1c
c0005f19:	39 d3                	cmp    ebx,edx
c0005f1b:	7d 43                	jge    c0005f60 <fncompare+0x54>
c0005f1d:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0005f21:	3c 3b                	cmp    al,0x3b
c0005f23:	74 3b                	je     c0005f60 <fncompare+0x54>
c0005f25:	3c 2e                	cmp    al,0x2e
c0005f27:	75 0e                	jne    c0005f37 <fncompare+0x2b>
c0005f29:	8d 4a ff             	lea    ecx,[edx-0x1]
c0005f2c:	39 d9                	cmp    ecx,ebx
c0005f2e:	74 30                	je     c0005f60 <fncompare+0x54>
c0005f30:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c0005f35:	74 29                	je     c0005f60 <fncompare+0x54>
c0005f37:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005f3b:	83 ec 0c             	sub    esp,0xc
c0005f3e:	50                   	push   eax
c0005f3f:	e8 ac a9 ff ff       	call   c00008f0 <tolower>
c0005f44:	89 c5                	mov    ebp,eax
c0005f46:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c0005f4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0005f4d:	e8 9e a9 ff ff       	call   c00008f0 <tolower>
c0005f52:	83 c4 10             	add    esp,0x10
c0005f55:	39 c5                	cmp    ebp,eax
c0005f57:	75 1d                	jne    c0005f76 <fncompare+0x6a>
c0005f59:	43                   	inc    ebx
c0005f5a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005f5e:	eb b9                	jmp    c0005f19 <fncompare+0xd>
c0005f60:	8a 14 1e             	mov    dl,BYTE PTR [esi+ebx*1]
c0005f63:	84 d2                	test   dl,dl
c0005f65:	0f 95 c1             	setne  cl
c0005f68:	31 c0                	xor    eax,eax
c0005f6a:	80 fa 2f             	cmp    dl,0x2f
c0005f6d:	0f 95 c0             	setne  al
c0005f70:	21 c8                	and    eax,ecx
c0005f72:	f7 d8                	neg    eax
c0005f74:	eb 03                	jmp    c0005f79 <fncompare+0x6d>
c0005f76:	83 c8 ff             	or     eax,0xffffffff
c0005f79:	83 c4 1c             	add    esp,0x1c
c0005f7c:	5b                   	pop    ebx
c0005f7d:	5e                   	pop    esi
c0005f7e:	5f                   	pop    edi
c0005f7f:	5d                   	pop    ebp
c0005f80:	c3                   	ret    

c0005f81 <isoReadDiscSector>:
c0005f81:	83 ec 0c             	sub    esp,0xc
c0005f84:	0f be 05 00 f5 01 c0 	movsx  eax,BYTE PTR ds:0xc001f500
c0005f8b:	50                   	push   eax
c0005f8c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005f98:	e8 1b 15 01 00       	call   c00174b8 <isoReadDiscSectorHelper>
c0005f9d:	83 c4 1c             	add    esp,0x1c
c0005fa0:	c3                   	ret    

c0005fa1 <bread_cache>:
c0005fa1:	55                   	push   ebp
c0005fa2:	57                   	push   edi
c0005fa3:	89 d7                	mov    edi,edx
c0005fa5:	56                   	push   esi
c0005fa6:	ba 0f 00 00 00       	mov    edx,0xf
c0005fab:	53                   	push   ebx
c0005fac:	89 c6                	mov    esi,eax
c0005fae:	83 ec 0c             	sub    esp,0xc
c0005fb1:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c0005fb4:	39 38                	cmp    DWORD PTR [eax],edi
c0005fb6:	74 3c                	je     c0005ff4 <bread_cache+0x53>
c0005fb8:	4a                   	dec    edx
c0005fb9:	83 fa ff             	cmp    edx,0xffffffff
c0005fbc:	75 f3                	jne    c0005fb1 <bread_cache+0x10>
c0005fbe:	31 db                	xor    ebx,ebx
c0005fc0:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c0005fc3:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c0005fc6:	74 08                	je     c0005fd0 <bread_cache+0x2f>
c0005fc8:	43                   	inc    ebx
c0005fc9:	83 fb 10             	cmp    ebx,0x10
c0005fcc:	75 f2                	jne    c0005fc0 <bread_cache+0x1f>
c0005fce:	31 db                	xor    ebx,ebx
c0005fd0:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c0005fd3:	50                   	push   eax
c0005fd4:	6a 01                	push   0x1
c0005fd6:	57                   	push   edi
c0005fd7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005fda:	83 c0 04             	add    eax,0x4
c0005fdd:	50                   	push   eax
c0005fde:	e8 9e ff ff ff       	call   c0005f81 <isoReadDiscSector>
c0005fe3:	83 c4 10             	add    esp,0x10
c0005fe6:	83 c9 ff             	or     ecx,0xffffffff
c0005fe9:	85 c0                	test   eax,eax
c0005feb:	78 13                	js     c0006000 <bread_cache+0x5f>
c0005fed:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0005ff0:	89 da                	mov    edx,ebx
c0005ff2:	89 38                	mov    DWORD PTR [eax],edi
c0005ff4:	89 f0                	mov    eax,esi
c0005ff6:	e8 4c fe ff ff       	call   c0005e47 <bgrad_cache>
c0005ffb:	b9 0f 00 00 00       	mov    ecx,0xf
c0006000:	83 c4 0c             	add    esp,0xc
c0006003:	89 c8                	mov    eax,ecx
c0006005:	5b                   	pop    ebx
c0006006:	5e                   	pop    esi
c0006007:	5f                   	pop    edi
c0006008:	5d                   	pop    ebp
c0006009:	c3                   	ret    

c000600a <biread>:
c000600a:	89 c2                	mov    edx,eax
c000600c:	b8 40 03 02 c0       	mov    eax,0xc0020340
c0006011:	eb 8e                	jmp    c0005fa1 <bread_cache>

c0006013 <bdread>:
c0006013:	89 c2                	mov    edx,eax
c0006015:	b8 00 03 02 c0       	mov    eax,0xc0020300
c000601a:	eb 85                	jmp    c0005fa1 <bread_cache>

c000601c <strnicmp>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	56                   	push   esi
c000601f:	31 f6                	xor    esi,esi
c0006021:	53                   	push   ebx
c0006022:	83 ec 0c             	sub    esp,0xc
c0006025:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0006029:	3b 74 24 28          	cmp    esi,DWORD PTR [esp+0x28]
c000602d:	74 42                	je     c0006071 <strnicmp+0x55>
c000602f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006033:	0f be 04 30          	movsx  eax,BYTE PTR [eax+esi*1]
c0006037:	84 c0                	test   al,al
c0006039:	74 36                	je     c0006071 <strnicmp+0x55>
c000603b:	8a 14 33             	mov    dl,BYTE PTR [ebx+esi*1]
c000603e:	84 d2                	test   dl,dl
c0006040:	74 2f                	je     c0006071 <strnicmp+0x55>
c0006042:	38 d0                	cmp    al,dl
c0006044:	8d 6e 01             	lea    ebp,[esi+0x1]
c0006047:	75 04                	jne    c000604d <strnicmp+0x31>
c0006049:	89 ee                	mov    esi,ebp
c000604b:	eb dc                	jmp    c0006029 <strnicmp+0xd>
c000604d:	83 ec 0c             	sub    esp,0xc
c0006050:	50                   	push   eax
c0006051:	e8 9a a8 ff ff       	call   c00008f0 <tolower>
c0006056:	89 c7                	mov    edi,eax
c0006058:	0f be 04 33          	movsx  eax,BYTE PTR [ebx+esi*1]
c000605c:	89 ee                	mov    esi,ebp
c000605e:	89 04 24             	mov    DWORD PTR [esp],eax
c0006061:	e8 8a a8 ff ff       	call   c00008f0 <tolower>
c0006066:	83 c4 10             	add    esp,0x10
c0006069:	29 c7                	sub    edi,eax
c000606b:	89 f8                	mov    eax,edi
c000606d:	74 ba                	je     c0006029 <strnicmp+0xd>
c000606f:	eb 02                	jmp    c0006073 <strnicmp+0x57>
c0006071:	31 c0                	xor    eax,eax
c0006073:	83 c4 0c             	add    esp,0xc
c0006076:	5b                   	pop    ebx
c0006077:	5e                   	pop    esi
c0006078:	5f                   	pop    edi
c0006079:	5d                   	pop    ebp
c000607a:	c3                   	ret    

c000607b <find_object>:
c000607b:	55                   	push   ebp
c000607c:	89 c5                	mov    ebp,eax
c000607e:	57                   	push   edi
c000607f:	56                   	push   esi
c0006080:	53                   	push   ebx
c0006081:	89 d3                	mov    ebx,edx
c0006083:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006089:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006090:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006094:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006098:	83 3d 80 03 02 c0 00 	cmp    DWORD PTR ds:0xc0020380,0x0
c000609f:	74 0b                	je     c00060ac <find_object+0x31>
c00060a1:	89 ea                	mov    edx,ebp
c00060a3:	8d 44 24 20          	lea    eax,[esp+0x20]
c00060a7:	e8 b8 fc ff ff       	call   c0005d64 <utf2ucs>
c00060ac:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00060af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00060b3:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c00060b8:	7e 11                	jle    c00060cb <find_object+0x50>
c00060ba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00060be:	e8 47 ff ff ff       	call   c000600a <biread>
c00060c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00060c7:	85 c0                	test   eax,eax
c00060c9:	79 07                	jns    c00060d2 <find_object+0x57>
c00060cb:	31 db                	xor    ebx,ebx
c00060cd:	e9 5b 01 00 00       	jmp    c000622d <find_object+0x1b2>
c00060d2:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00060da:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00060de:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00060e2:	8b 04 85 40 03 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfcc0]
c00060e9:	8d 5c 38 04          	lea    ebx,[eax+edi*1+0x4]
c00060ed:	8a 03                	mov    al,BYTE PTR [ebx]
c00060ef:	84 c0                	test   al,al
c00060f1:	75 0e                	jne    c0006101 <find_object+0x86>
c00060f3:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00060f7:	81 6c 24 10 00 08 00 00 	sub    DWORD PTR [esp+0x10],0x800
c00060ff:	eb b2                	jmp    c00060b3 <find_object+0x38>
c0006101:	8b 35 80 03 02 c0    	mov    esi,DWORD PTR ds:0xc0020380
c0006107:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c000610b:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000610f:	89 ca                	mov    edx,ecx
c0006111:	85 f6                	test   esi,esi
c0006113:	74 2b                	je     c0006140 <find_object+0xc5>
c0006115:	8d 43 21             	lea    eax,[ebx+0x21]
c0006118:	8d 54 24 20          	lea    edx,[esp+0x20]
c000611c:	e8 6c fd ff ff       	call   c0005e8d <ucscompare>
c0006121:	85 c0                	test   eax,eax
c0006123:	0f 84 c1 00 00 00    	je     c00061ea <find_object+0x16f>
c0006129:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c000612c:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0006130:	81 7c 24 0c ff 07 00 00 	cmp    DWORD PTR [esp+0xc],0x7ff
c0006138:	0f 8e dc 00 00 00    	jle    c000621a <find_object+0x19f>
c000613e:	eb b3                	jmp    c00060f3 <find_object+0x78>
c0006140:	0f b6 f0             	movzx  esi,al
c0006143:	8d 7c 0b 21          	lea    edi,[ebx+ecx*1+0x21]
c0006147:	29 ce                	sub    esi,ecx
c0006149:	80 e2 01             	and    dl,0x1
c000614c:	74 05                	je     c0006153 <find_object+0xd8>
c000614e:	83 ee 21             	sub    esi,0x21
c0006151:	eb 55                	jmp    c00061a8 <find_object+0x12d>
c0006153:	47                   	inc    edi
c0006154:	83 ee 22             	sub    esi,0x22
c0006157:	eb 4f                	jmp    c00061a8 <find_object+0x12d>
c0006159:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000615c:	48                   	dec    eax
c000615d:	3c 01                	cmp    al,0x1
c000615f:	77 4c                	ja     c00061ad <find_object+0x132>
c0006161:	50                   	push   eax
c0006162:	6a 02                	push   0x2
c0006164:	68 00 cf 01 c0       	push   0xc001cf00
c0006169:	57                   	push   edi
c000616a:	e8 11 a6 ff ff       	call   c0000780 <strncmp>
c000616f:	83 c4 10             	add    esp,0x10
c0006172:	85 c0                	test   eax,eax
c0006174:	75 2a                	jne    c00061a0 <find_object+0x125>
c0006176:	0f be 57 02          	movsx  edx,BYTE PTR [edi+0x2]
c000617a:	8d 42 fb             	lea    eax,[edx-0x5]
c000617d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006181:	50                   	push   eax
c0006182:	8d 47 05             	lea    eax,[edi+0x5]
c0006185:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0006189:	50                   	push   eax
c000618a:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000618e:	50                   	push   eax
c000618f:	e8 bc a4 ff ff       	call   c0000650 <strncpy>
c0006194:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0006198:	c6 44 04 30 00       	mov    BYTE PTR [esp+eax*1+0x30],0x0
c000619d:	83 c4 10             	add    esp,0x10
c00061a0:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00061a4:	29 c6                	sub    esi,eax
c00061a6:	01 c7                	add    edi,eax
c00061a8:	83 fe 03             	cmp    esi,0x3
c00061ab:	7f ac                	jg     c0006159 <find_object+0xde>
c00061ad:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00061b2:	7e 40                	jle    c00061f4 <find_object+0x179>
c00061b4:	51                   	push   ecx
c00061b5:	51                   	push   ecx
c00061b6:	6a 2f                	push   0x2f
c00061b8:	55                   	push   ebp
c00061b9:	e8 92 a5 ff ff       	call   c0000750 <strchr>
c00061be:	83 c4 10             	add    esp,0x10
c00061c1:	85 c0                	test   eax,eax
c00061c3:	74 04                	je     c00061c9 <find_object+0x14e>
c00061c5:	29 e8                	sub    eax,ebp
c00061c7:	eb 0c                	jmp    c00061d5 <find_object+0x15a>
c00061c9:	83 ec 0c             	sub    esp,0xc
c00061cc:	55                   	push   ebp
c00061cd:	e8 8e a3 ff ff       	call   c0000560 <strlen>
c00061d2:	83 c4 10             	add    esp,0x10
c00061d5:	52                   	push   edx
c00061d6:	50                   	push   eax
c00061d7:	55                   	push   ebp
c00061d8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00061dc:	50                   	push   eax
c00061dd:	e8 3a fe ff ff       	call   c000601c <strnicmp>
c00061e2:	83 c4 10             	add    esp,0x10
c00061e5:	e9 37 ff ff ff       	jmp    c0006121 <find_object+0xa6>
c00061ea:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00061ee:	3b 44 24 14          	cmp    eax,DWORD PTR [esp+0x14]
c00061f2:	eb 1e                	jmp    c0006212 <find_object+0x197>
c00061f4:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00061f8:	8d 43 21             	lea    eax,[ebx+0x21]
c00061fb:	89 e9                	mov    ecx,ebp
c00061fd:	e8 0a fd ff ff       	call   c0005f0c <fncompare>
c0006202:	85 c0                	test   eax,eax
c0006204:	0f 85 1f ff ff ff    	jne    c0006129 <find_object+0xae>
c000620a:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c000620e:	39 44 24 14          	cmp    DWORD PTR [esp+0x14],eax
c0006212:	0f 85 11 ff ff ff    	jne    c0006129 <find_object+0xae>
c0006218:	eb 13                	jmp    c000622d <find_object+0x1b2>
c000621a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000621e:	39 4c 24 10          	cmp    DWORD PTR [esp+0x10],ecx
c0006222:	0f 8f b2 fe ff ff    	jg     c00060da <find_object+0x5f>
c0006228:	e9 c6 fe ff ff       	jmp    c00060f3 <find_object+0x78>
c000622d:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006233:	89 d8                	mov    eax,ebx
c0006235:	5b                   	pop    ebx
c0006236:	5e                   	pop    esi
c0006237:	5f                   	pop    edi
c0006238:	5d                   	pop    ebp
c0006239:	c3                   	ret    

c000623a <find_object_path>:
c000623a:	55                   	push   ebp
c000623b:	57                   	push   edi
c000623c:	89 d7                	mov    edi,edx
c000623e:	56                   	push   esi
c000623f:	89 c6                	mov    esi,eax
c0006241:	53                   	push   ebx
c0006242:	89 cb                	mov    ebx,ecx
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	50                   	push   eax
c0006249:	6a 2f                	push   0x2f
c000624b:	56                   	push   esi
c000624c:	e8 ff a4 ff ff       	call   c0000750 <strchr>
c0006251:	83 c4 10             	add    esp,0x10
c0006254:	89 c5                	mov    ebp,eax
c0006256:	85 c0                	test   eax,eax
c0006258:	74 3a                	je     c0006294 <find_object_path+0x5a>
c000625a:	39 ee                	cmp    esi,ebp
c000625c:	74 31                	je     c000628f <find_object_path+0x55>
c000625e:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006261:	e8 cd fb ff ff       	call   c0005e33 <iso_733>
c0006266:	89 c2                	mov    edx,eax
c0006268:	8d 43 02             	lea    eax,[ebx+0x2]
c000626b:	e8 c3 fb ff ff       	call   c0005e33 <iso_733>
c0006270:	83 ec 0c             	sub    esp,0xc
c0006273:	89 c1                	mov    ecx,eax
c0006275:	52                   	push   edx
c0006276:	89 f0                	mov    eax,esi
c0006278:	ba 01 00 00 00       	mov    edx,0x1
c000627d:	e8 f9 fd ff ff       	call   c000607b <find_object>
c0006282:	83 c4 10             	add    esp,0x10
c0006285:	89 c3                	mov    ebx,eax
c0006287:	85 c0                	test   eax,eax
c0006289:	75 04                	jne    c000628f <find_object_path+0x55>
c000628b:	31 db                	xor    ebx,ebx
c000628d:	eb 36                	jmp    c00062c5 <find_object_path+0x8b>
c000628f:	8d 75 01             	lea    esi,[ebp+0x1]
c0006292:	eb b3                	jmp    c0006247 <find_object_path+0xd>
c0006294:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006297:	74 28                	je     c00062c1 <find_object_path+0x87>
c0006299:	8d 43 0a             	lea    eax,[ebx+0xa]
c000629c:	e8 92 fb ff ff       	call   c0005e33 <iso_733>
c00062a1:	89 c2                	mov    edx,eax
c00062a3:	8d 43 02             	lea    eax,[ebx+0x2]
c00062a6:	e8 88 fb ff ff       	call   c0005e33 <iso_733>
c00062ab:	83 ec 0c             	sub    esp,0xc
c00062ae:	89 c1                	mov    ecx,eax
c00062b0:	52                   	push   edx
c00062b1:	89 f0                	mov    eax,esi
c00062b3:	89 fa                	mov    edx,edi
c00062b5:	e8 c1 fd ff ff       	call   c000607b <find_object>
c00062ba:	83 c4 10             	add    esp,0x10
c00062bd:	89 c3                	mov    ebx,eax
c00062bf:	eb 04                	jmp    c00062c5 <find_object_path+0x8b>
c00062c1:	85 ff                	test   edi,edi
c00062c3:	74 c6                	je     c000628b <find_object_path+0x51>
c00062c5:	83 c4 0c             	add    esp,0xc
c00062c8:	89 d8                	mov    eax,ebx
c00062ca:	5b                   	pop    ebx
c00062cb:	5e                   	pop    esi
c00062cc:	5f                   	pop    edi
c00062cd:	5d                   	pop    ebp
c00062ce:	c3                   	ret    

c00062cf <stricmp>:
c00062cf:	57                   	push   edi
c00062d0:	56                   	push   esi
c00062d1:	31 f6                	xor    esi,esi
c00062d3:	53                   	push   ebx
c00062d4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d8:	83 ec 0c             	sub    esp,0xc
c00062db:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00062df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00062e3:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00062e7:	50                   	push   eax
c00062e8:	e8 e3 a5 ff ff       	call   c00008d0 <toupper>
c00062ed:	89 04 24             	mov    DWORD PTR [esp],eax
c00062f0:	e8 fb a5 ff ff       	call   c00008f0 <tolower>
c00062f5:	89 3c 24             	mov    DWORD PTR [esp],edi
c00062f8:	89 c3                	mov    ebx,eax
c00062fa:	e8 d1 a5 ff ff       	call   c00008d0 <toupper>
c00062ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0006302:	e8 e9 a5 ff ff       	call   c00008f0 <tolower>
c0006307:	83 c4 10             	add    esp,0x10
c000630a:	39 c3                	cmp    ebx,eax
c000630c:	75 05                	jne    c0006313 <stricmp+0x44>
c000630e:	46                   	inc    esi
c000630f:	85 db                	test   ebx,ebx
c0006311:	75 c1                	jne    c00062d4 <stricmp+0x5>
c0006313:	29 c3                	sub    ebx,eax
c0006315:	89 d8                	mov    eax,ebx
c0006317:	5b                   	pop    ebx
c0006318:	5e                   	pop    esi
c0006319:	5f                   	pop    edi
c000631a:	c3                   	ret    

c000631b <iso_open>:
c000631b:	56                   	push   esi
c000631c:	31 d2                	xor    edx,edx
c000631e:	53                   	push   ebx
c000631f:	51                   	push   ecx
c0006320:	b9 c0 02 02 c0       	mov    ecx,0xc00202c0
c0006325:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006329:	e8 0c ff ff ff       	call   c000623a <find_object_path>
c000632e:	83 ca ff             	or     edx,0xffffffff
c0006331:	85 c0                	test   eax,eax
c0006333:	74 62                	je     c0006397 <iso_open+0x7c>
c0006335:	89 c1                	mov    ecx,eax
c0006337:	31 d2                	xor    edx,edx
c0006339:	69 f2 94 00 00 00    	imul   esi,edx,0x94
c000633f:	83 be 80 f9 01 c0 00 	cmp    DWORD PTR [esi-0x3ffe0680],0x0
c0006346:	75 46                	jne    c000638e <iso_open+0x73>
c0006348:	8d 41 02             	lea    eax,[ecx+0x2]
c000634b:	c7 86 80 f9 01 c0 ff ff ff ff 	mov    DWORD PTR [esi-0x3ffe0680],0xffffffff
c0006355:	e8 d9 fa ff ff       	call   c0005e33 <iso_733>
c000635a:	c7 86 84 f9 01 c0 00 00 00 00 	mov    DWORD PTR [esi-0x3ffe067c],0x0
c0006364:	89 86 80 f9 01 c0    	mov    DWORD PTR [esi-0x3ffe0680],eax
c000636a:	c7 86 88 f9 01 c0 00 00 00 00 	mov    DWORD PTR [esi-0x3ffe0678],0x0
c0006374:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006377:	e8 b7 fa ff ff       	call   c0005e33 <iso_733>
c000637c:	c7 86 10 fa 01 c0 00 00 00 00 	mov    DWORD PTR [esi-0x3ffe05f0],0x0
c0006386:	89 86 8c f9 01 c0    	mov    DWORD PTR [esi-0x3ffe0674],eax
c000638c:	eb 09                	jmp    c0006397 <iso_open+0x7c>
c000638e:	42                   	inc    edx
c000638f:	83 fa 10             	cmp    edx,0x10
c0006392:	75 a5                	jne    c0006339 <iso_open+0x1e>
c0006394:	83 ca ff             	or     edx,0xffffffff
c0006397:	89 d0                	mov    eax,edx
c0006399:	5a                   	pop    edx
c000639a:	5b                   	pop    ebx
c000639b:	5e                   	pop    esi
c000639c:	c3                   	ret    

c000639d <iso_close>:
c000639d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00063a1:	83 f8 0f             	cmp    eax,0xf
c00063a4:	7f 10                	jg     c00063b6 <iso_close+0x19>
c00063a6:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00063ac:	c7 80 80 f9 01 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffe0680],0x0
c00063b6:	c3                   	ret    

c00063b7 <iso_read>:
c00063b7:	55                   	push   ebp
c00063b8:	57                   	push   edi
c00063b9:	56                   	push   esi
c00063ba:	53                   	push   ebx
c00063bb:	83 ec 1c             	sub    esp,0x1c
c00063be:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00063c2:	83 fd 0f             	cmp    ebp,0xf
c00063c5:	7e 0a                	jle    c00063d1 <iso_read+0x1a>
c00063c7:	83 c8 ff             	or     eax,0xffffffff
c00063ca:	89 c2                	mov    edx,eax
c00063cc:	e9 f4 00 00 00       	jmp    c00064c5 <iso_read+0x10e>
c00063d1:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00063d7:	83 bd 80 f9 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0680],0x0
c00063de:	74 e7                	je     c00063c7 <iso_read+0x10>
c00063e0:	8b 95 10 fa 01 c0    	mov    edx,DWORD PTR [ebp-0x3ffe05f0]
c00063e6:	85 d2                	test   edx,edx
c00063e8:	75 dd                	jne    c00063c7 <iso_read+0x10>
c00063ea:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00063ef:	0f 84 cd 00 00 00    	je     c00064c2 <iso_read+0x10b>
c00063f5:	8b 85 88 f9 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0678]
c00063fb:	8b 8d 8c f9 01 c0    	mov    ecx,DWORD PTR [ebp-0x3ffe0674]
c0006401:	29 c1                	sub    ecx,eax
c0006403:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006407:	76 04                	jbe    c000640d <iso_read+0x56>
c0006409:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000640d:	85 c9                	test   ecx,ecx
c000640f:	0f 84 ad 00 00 00    	je     c00064c2 <iso_read+0x10b>
c0006415:	89 c6                	mov    esi,eax
c0006417:	bb 00 08 00 00       	mov    ebx,0x800
c000641c:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006422:	c1 e8 0b             	shr    eax,0xb
c0006425:	29 f3                	sub    ebx,esi
c0006427:	03 85 80 f9 01 c0    	add    eax,DWORD PTR [ebp-0x3ffe0680]
c000642d:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006433:	7e 3f                	jle    c0006474 <iso_read+0xbd>
c0006435:	81 fb 00 08 00 00    	cmp    ebx,0x800
c000643b:	75 37                	jne    c0006474 <iso_read+0xbd>
c000643d:	be 20 00 00 00       	mov    esi,0x20
c0006442:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006448:	7f 05                	jg     c000644f <iso_read+0x98>
c000644a:	89 ce                	mov    esi,ecx
c000644c:	c1 fe 0b             	sar    esi,0xb
c000644f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006453:	89 f3                	mov    ebx,esi
c0006455:	c1 e3 0b             	shl    ebx,0xb
c0006458:	52                   	push   edx
c0006459:	56                   	push   esi
c000645a:	50                   	push   eax
c000645b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000645f:	e8 1d fb ff ff       	call   c0005f81 <isoReadDiscSector>
c0006464:	83 c4 10             	add    esp,0x10
c0006467:	85 c0                	test   eax,eax
c0006469:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000646d:	7f 3e                	jg     c00064ad <iso_read+0xf6>
c000646f:	e9 53 ff ff ff       	jmp    c00063c7 <iso_read+0x10>
c0006474:	39 cb                	cmp    ebx,ecx
c0006476:	7e 02                	jle    c000647a <iso_read+0xc3>
c0006478:	89 cb                	mov    ebx,ecx
c000647a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000647e:	e8 90 fb ff ff       	call   c0006013 <bdread>
c0006483:	85 c0                	test   eax,eax
c0006485:	0f 88 3c ff ff ff    	js     c00063c7 <iso_read+0x10>
c000648b:	8b 0c 85 00 03 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdfd00]
c0006492:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006496:	8b 85 88 f9 01 c0    	mov    eax,DWORD PTR [ebp-0x3ffe0678]
c000649c:	25 ff 07 00 00       	and    eax,0x7ff
c00064a1:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00064a5:	89 d9                	mov    ecx,ebx
c00064a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00064a9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00064ad:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00064b1:	01 9d 88 f9 01 c0    	add    DWORD PTR [ebp-0x3ffe0678],ebx
c00064b7:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00064bb:	01 da                	add    edx,ebx
c00064bd:	e9 28 ff ff ff       	jmp    c00063ea <iso_read+0x33>
c00064c2:	89 d0                	mov    eax,edx
c00064c4:	99                   	cdq    
c00064c5:	83 c4 1c             	add    esp,0x1c
c00064c8:	5b                   	pop    ebx
c00064c9:	5e                   	pop    esi
c00064ca:	5f                   	pop    edi
c00064cb:	5d                   	pop    ebp
c00064cc:	c3                   	ret    

c00064cd <iso_seek>:
c00064cd:	55                   	push   ebp
c00064ce:	83 c8 ff             	or     eax,0xffffffff
c00064d1:	57                   	push   edi
c00064d2:	89 c2                	mov    edx,eax
c00064d4:	56                   	push   esi
c00064d5:	53                   	push   ebx
c00064d6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00064da:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00064de:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00064e2:	83 fe 0f             	cmp    esi,0xf
c00064e5:	7f 65                	jg     c000654c <iso_seek+0x7f>
c00064e7:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00064ed:	8d 8d 80 f9 01 c0    	lea    ecx,[ebp-0x3ffe0680]
c00064f3:	83 bd 80 f9 01 c0 00 	cmp    DWORD PTR [ebp-0x3ffe0680],0x0
c00064fa:	74 50                	je     c000654c <iso_seek+0x7f>
c00064fc:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006503:	75 47                	jne    c000654c <iso_seek+0x7f>
c0006505:	83 fb 01             	cmp    ebx,0x1
c0006508:	74 0e                	je     c0006518 <iso_seek+0x4b>
c000650a:	83 fb 02             	cmp    ebx,0x2
c000650d:	74 0e                	je     c000651d <iso_seek+0x50>
c000650f:	85 db                	test   ebx,ebx
c0006511:	75 39                	jne    c000654c <iso_seek+0x7f>
c0006513:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006516:	eb 0d                	jmp    c0006525 <iso_seek+0x58>
c0006518:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c000651b:	eb 08                	jmp    c0006525 <iso_seek+0x58>
c000651d:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c0006520:	01 f8                	add    eax,edi
c0006522:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006525:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c000652b:	8b 88 8c f9 01 c0    	mov    ecx,DWORD PTR [eax-0x3ffe0674]
c0006531:	05 80 f9 01 c0       	add    eax,0xc001f980
c0006536:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006539:	76 03                	jbe    c000653e <iso_seek+0x71>
c000653b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000653e:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006544:	8b 82 88 f9 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0678]
c000654a:	31 d2                	xor    edx,edx
c000654c:	5b                   	pop    ebx
c000654d:	5e                   	pop    esi
c000654e:	5f                   	pop    edi
c000654f:	5d                   	pop    ebp
c0006550:	c3                   	ret    

c0006551 <iso_tell>:
c0006551:	83 c8 ff             	or     eax,0xffffffff
c0006554:	53                   	push   ebx
c0006555:	89 c2                	mov    edx,eax
c0006557:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000655b:	83 f9 0f             	cmp    ecx,0xf
c000655e:	7f 20                	jg     c0006580 <iso_tell+0x2f>
c0006560:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006566:	83 bb 80 f9 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe0680],0x0
c000656d:	74 11                	je     c0006580 <iso_tell+0x2f>
c000656f:	83 bb 10 fa 01 c0 00 	cmp    DWORD PTR [ebx-0x3ffe05f0],0x0
c0006576:	75 08                	jne    c0006580 <iso_tell+0x2f>
c0006578:	8b 83 88 f9 01 c0    	mov    eax,DWORD PTR [ebx-0x3ffe0678]
c000657e:	31 d2                	xor    edx,edx
c0006580:	5b                   	pop    ebx
c0006581:	c3                   	ret    

c0006582 <iso_total>:
c0006582:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006586:	83 c8 ff             	or     eax,0xffffffff
c0006589:	83 fa 0f             	cmp    edx,0xf
c000658c:	7f 1e                	jg     c00065ac <iso_total+0x2a>
c000658e:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006594:	83 ba 80 f9 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe0680],0x0
c000659b:	74 0f                	je     c00065ac <iso_total+0x2a>
c000659d:	83 ba 10 fa 01 c0 00 	cmp    DWORD PTR [edx-0x3ffe05f0],0x0
c00065a4:	75 06                	jne    c00065ac <iso_total+0x2a>
c00065a6:	8b 82 8c f9 01 c0    	mov    eax,DWORD PTR [edx-0x3ffe0674]
c00065ac:	c3                   	ret    

c00065ad <fn_postprocess>:
c00065ad:	53                   	push   ebx
c00065ae:	83 ec 08             	sub    esp,0x8
c00065b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00065b5:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c00065b8:	3c 3b                	cmp    al,0x3b
c00065ba:	74 16                	je     c00065d2 <fn_postprocess+0x25>
c00065bc:	84 c0                	test   al,al
c00065be:	74 12                	je     c00065d2 <fn_postprocess+0x25>
c00065c0:	83 ec 0c             	sub    esp,0xc
c00065c3:	43                   	inc    ebx
c00065c4:	50                   	push   eax
c00065c5:	e8 26 a3 ff ff       	call   c00008f0 <tolower>
c00065ca:	83 c4 10             	add    esp,0x10
c00065cd:	88 43 ff             	mov    BYTE PTR [ebx-0x1],al
c00065d0:	eb e3                	jmp    c00065b5 <fn_postprocess+0x8>
c00065d2:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00065d5:	3b 5c 24 10          	cmp    ebx,DWORD PTR [esp+0x10]
c00065d9:	76 0a                	jbe    c00065e5 <fn_postprocess+0x38>
c00065db:	80 7b ff 2e          	cmp    BYTE PTR [ebx-0x1],0x2e
c00065df:	75 04                	jne    c00065e5 <fn_postprocess+0x38>
c00065e1:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00065e5:	83 c4 08             	add    esp,0x8
c00065e8:	5b                   	pop    ebx
c00065e9:	c3                   	ret    

c00065ea <iso_readdir>:
c00065ea:	55                   	push   ebp
c00065eb:	57                   	push   edi
c00065ec:	56                   	push   esi
c00065ed:	53                   	push   ebx
c00065ee:	83 ec 1c             	sub    esp,0x1c
c00065f1:	83 7c 24 30 0f       	cmp    DWORD PTR [esp+0x30],0xf
c00065f6:	7e 07                	jle    c00065ff <iso_readdir+0x15>
c00065f8:	31 c0                	xor    eax,eax
c00065fa:	e9 d4 01 00 00       	jmp    c00067d3 <iso_readdir+0x1e9>
c00065ff:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c0006607:	8d b0 80 f9 01 c0    	lea    esi,[eax-0x3ffe0680]
c000660d:	83 b8 80 f9 01 c0 00 	cmp    DWORD PTR [eax-0x3ffe0680],0x0
c0006614:	74 e2                	je     c00065f8 <iso_readdir+0xe>
c0006616:	83 7e 04 00          	cmp    DWORD PTR [esi+0x4],0x0
c000661a:	74 dc                	je     c00065f8 <iso_readdir+0xe>
c000661c:	83 be 90 00 00 00 00 	cmp    DWORD PTR [esi+0x90],0x0
c0006623:	75 d3                	jne    c00065f8 <iso_readdir+0xe>
c0006625:	31 db                	xor    ebx,ebx
c0006627:	83 c8 ff             	or     eax,0xffffffff
c000662a:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000662d:	3b 56 0c             	cmp    edx,DWORD PTR [esi+0xc]
c0006630:	73 3c                	jae    c000666e <iso_readdir+0x84>
c0006632:	c1 ea 0b             	shr    edx,0xb
c0006635:	8b 06                	mov    eax,DWORD PTR [esi]
c0006637:	01 d0                	add    eax,edx
c0006639:	e8 cc f9 ff ff       	call   c000600a <biread>
c000663e:	85 c0                	test   eax,eax
c0006640:	78 b6                	js     c00065f8 <iso_readdir+0xe>
c0006642:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0006645:	8b 1c 85 40 03 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdfcc0]
c000664c:	89 d1                	mov    ecx,edx
c000664e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006654:	8d 5c 0b 04          	lea    ebx,[ebx+ecx*1+0x4]
c0006658:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c000665b:	75 11                	jne    c000666e <iso_readdir+0x84>
c000665d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006663:	81 c2 00 08 00 00    	add    edx,0x800
c0006669:	89 56 08             	mov    DWORD PTR [esi+0x8],edx
c000666c:	eb bc                	jmp    c000662a <iso_readdir+0x40>
c000666e:	69 54 24 30 94 00 00 00 	imul   edx,DWORD PTR [esp+0x30],0x94
c0006676:	8b b2 88 f9 01 c0    	mov    esi,DWORD PTR [edx-0x3ffe0678]
c000667c:	81 c2 80 f9 01 c0    	add    edx,0xc001f980
c0006682:	3b 72 0c             	cmp    esi,DWORD PTR [edx+0xc]
c0006685:	0f 83 6d ff ff ff    	jae    c00065f8 <iso_readdir+0xe>
c000668b:	80 7b 21 00          	cmp    BYTE PTR [ebx+0x21],0x0
c000668f:	75 38                	jne    c00066c9 <iso_readdir+0xdf>
c0006691:	80 7b 20 01          	cmp    BYTE PTR [ebx+0x20],0x1
c0006695:	75 32                	jne    c00066c9 <iso_readdir+0xdf>
c0006697:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000669a:	8b 1c 85 40 03 02 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffdfcc0]
c00066a1:	01 f1                	add    ecx,esi
c00066a3:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00066a6:	89 c8                	mov    eax,ecx
c00066a8:	25 ff 07 00 00       	and    eax,0x7ff
c00066ad:	0f b6 44 03 04       	movzx  eax,BYTE PTR [ebx+eax*1+0x4]
c00066b2:	01 c8                	add    eax,ecx
c00066b4:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00066b7:	25 ff 07 00 00       	and    eax,0x7ff
c00066bc:	8d 5c 03 04          	lea    ebx,[ebx+eax*1+0x4]
c00066c0:	80 3b 00             	cmp    BYTE PTR [ebx],0x0
c00066c3:	0f 84 2f ff ff ff    	je     c00065f8 <iso_readdir+0xe>
c00066c9:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c00066d1:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c00066d5:	8d 53 21             	lea    edx,[ebx+0x21]
c00066d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00066dc:	8d a8 98 f9 01 c0    	lea    ebp,[eax-0x3ffe0668]
c00066e2:	83 3d 80 03 02 c0 00 	cmp    DWORD PTR ds:0xc0020380,0x0
c00066e9:	74 0c                	je     c00066f7 <iso_readdir+0x10d>
c00066eb:	89 e8                	mov    eax,ebp
c00066ed:	e8 94 f6 ff ff       	call   c0005d86 <ucs2utfn>
c00066f2:	e9 9e 00 00 00       	jmp    c0006795 <iso_readdir+0x1ab>
c00066f7:	56                   	push   esi
c00066f8:	51                   	push   ecx
c00066f9:	52                   	push   edx
c00066fa:	55                   	push   ebp
c00066fb:	e8 50 9f ff ff       	call   c0000650 <strncpy>
c0006700:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c0006704:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0006708:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000670b:	c6 84 07 98 f9 01 c0 00 	mov    BYTE PTR [edi+eax*1-0x3ffe0668],0x0
c0006713:	e8 95 fe ff ff       	call   c00065ad <fn_postprocess>
c0006718:	0f b6 43 20          	movzx  eax,BYTE PTR [ebx+0x20]
c000671c:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c000671f:	83 c4 10             	add    esp,0x10
c0006722:	29 c6                	sub    esi,eax
c0006724:	8d 7c 03 21          	lea    edi,[ebx+eax*1+0x21]
c0006728:	f6 43 20 01          	test   BYTE PTR [ebx+0x20],0x1
c000672c:	74 05                	je     c0006733 <iso_readdir+0x149>
c000672e:	83 ee 21             	sub    esi,0x21
c0006731:	eb 04                	jmp    c0006737 <iso_readdir+0x14d>
c0006733:	47                   	inc    edi
c0006734:	83 ee 22             	sub    esi,0x22
c0006737:	69 44 24 30 94 00 00 00 	imul   eax,DWORD PTR [esp+0x30],0x94
c000673f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006743:	83 fe 03             	cmp    esi,0x3
c0006746:	7e 4d                	jle    c0006795 <iso_readdir+0x1ab>
c0006748:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c000674b:	48                   	dec    eax
c000674c:	3c 01                	cmp    al,0x1
c000674e:	77 45                	ja     c0006795 <iso_readdir+0x1ab>
c0006750:	52                   	push   edx
c0006751:	6a 02                	push   0x2
c0006753:	68 00 cf 01 c0       	push   0xc001cf00
c0006758:	57                   	push   edi
c0006759:	e8 22 a0 ff ff       	call   c0000780 <strncmp>
c000675e:	83 c4 10             	add    esp,0x10
c0006761:	85 c0                	test   eax,eax
c0006763:	75 26                	jne    c000678b <iso_readdir+0x1a1>
c0006765:	50                   	push   eax
c0006766:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c000676a:	83 e8 05             	sub    eax,0x5
c000676d:	50                   	push   eax
c000676e:	8d 47 05             	lea    eax,[edi+0x5]
c0006771:	50                   	push   eax
c0006772:	55                   	push   ebp
c0006773:	e8 d8 9e ff ff       	call   c0000650 <strncpy>
c0006778:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000677c:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c0006780:	83 c4 10             	add    esp,0x10
c0006783:	c6 84 08 93 f9 01 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffe066d],0x0
c000678b:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c000678f:	29 c6                	sub    esi,eax
c0006791:	01 c7                	add    edi,eax
c0006793:	eb ae                	jmp    c0006743 <iso_readdir+0x159>
c0006795:	83 c8 ff             	or     eax,0xffffffff
c0006798:	f6 43 19 02          	test   BYTE PTR [ebx+0x19],0x2
c000679c:	89 c2                	mov    edx,eax
c000679e:	75 0a                	jne    c00067aa <iso_readdir+0x1c0>
c00067a0:	8d 43 0a             	lea    eax,[ebx+0xa]
c00067a3:	e8 8b f6 ff ff       	call   c0005e33 <iso_733>
c00067a8:	31 d2                	xor    edx,edx
c00067aa:	69 4c 24 30 94 00 00 00 	imul   ecx,DWORD PTR [esp+0x30],0x94
c00067b2:	89 81 90 f9 01 c0    	mov    DWORD PTR [ecx-0x3ffe0670],eax
c00067b8:	89 91 94 f9 01 c0    	mov    DWORD PTR [ecx-0x3ffe066c],edx
c00067be:	81 c1 80 f9 01 c0    	add    ecx,0xc001f980
c00067c4:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c00067c7:	01 41 08             	add    DWORD PTR [ecx+0x8],eax
c00067ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ce:	05 90 f9 01 c0       	add    eax,0xc001f990
c00067d3:	83 c4 1c             	add    esp,0x1c
c00067d6:	5b                   	pop    ebx
c00067d7:	5e                   	pop    esi
c00067d8:	5f                   	pop    edi
c00067d9:	5d                   	pop    ebp
c00067da:	c3                   	ret    

c00067db <iso_reset>:
c00067db:	e8 94 f6 ff ff       	call   c0005e74 <iso_break_all>
c00067e0:	e8 7e f6 ff ff       	call   c0005e63 <bclear>
c00067e5:	31 c0                	xor    eax,eax
c00067e7:	c3                   	ret    

c00067e8 <init_percd>:
c00067e8:	57                   	push   edi
c00067e9:	56                   	push   esi
c00067ea:	53                   	push   ebx
c00067eb:	bb 01 00 00 00       	mov    ebx,0x1
c00067f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00067f4:	a2 00 f5 01 c0       	mov    ds:0xc001f500,al
c00067f9:	e8 dd ff ff ff       	call   c00067db <iso_reset>
c00067fe:	c7 05 80 03 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0020380,0x0
c0006808:	a1 ec 02 02 c0       	mov    eax,ds:0xc00202ec
c000680d:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006811:	e8 f4 f7 ff ff       	call   c000600a <biread>
c0006816:	89 c6                	mov    esi,eax
c0006818:	85 c0                	test   eax,eax
c000681a:	0f 88 ba 00 00 00    	js     c00068da <init_percd+0xf2>
c0006820:	8b 04 85 40 03 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfcc0]
c0006827:	83 c0 04             	add    eax,0x4
c000682a:	52                   	push   edx
c000682b:	6a 06                	push   0x6
c000682d:	68 03 cf 01 c0       	push   0xc001cf03
c0006832:	50                   	push   eax
c0006833:	e8 78 9b ff ff       	call   c00003b0 <memcmp>
c0006838:	83 c4 10             	add    esp,0x10
c000683b:	85 c0                	test   eax,eax
c000683d:	74 08                	je     c0006847 <init_percd+0x5f>
c000683f:	43                   	inc    ebx
c0006840:	83 fb 04             	cmp    ebx,0x4
c0006843:	75 c3                	jne    c0006808 <init_percd+0x20>
c0006845:	eb 1a                	jmp    c0006861 <init_percd+0x79>
c0006847:	8b 04 b5 40 03 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdfcc0]
c000684e:	83 c0 5c             	add    eax,0x5c
c0006851:	e8 ae f5 ff ff       	call   c0005e04 <isjoliet>
c0006856:	a3 80 03 02 c0       	mov    ds:0xc0020380,eax
c000685b:	85 c0                	test   eax,eax
c000685d:	74 e0                	je     c000683f <init_percd+0x57>
c000685f:	eb 3e                	jmp    c000689f <init_percd+0xb7>
c0006861:	83 3d 80 03 02 c0 00 	cmp    DWORD PTR ds:0xc0020380,0x0
c0006868:	75 35                	jne    c000689f <init_percd+0xb7>
c000686a:	a1 ec 02 02 c0       	mov    eax,ds:0xc00202ec
c000686f:	83 c0 10             	add    eax,0x10
c0006872:	e8 93 f7 ff ff       	call   c000600a <biread>
c0006877:	89 c6                	mov    esi,eax
c0006879:	85 c0                	test   eax,eax
c000687b:	78 5f                	js     c00068dc <init_percd+0xf4>
c000687d:	83 cb ff             	or     ebx,0xffffffff
c0006880:	50                   	push   eax
c0006881:	8b 04 b5 40 03 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdfcc0]
c0006888:	6a 06                	push   0x6
c000688a:	83 c0 04             	add    eax,0x4
c000688d:	68 0a cf 01 c0       	push   0xc001cf0a
c0006892:	50                   	push   eax
c0006893:	e8 18 9b ff ff       	call   c00003b0 <memcmp>
c0006898:	83 c4 10             	add    esp,0x10
c000689b:	85 c0                	test   eax,eax
c000689d:	75 3d                	jne    c00068dc <init_percd+0xf4>
c000689f:	8b 34 b5 40 03 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdfcc0]
c00068a6:	bf c0 02 02 c0       	mov    edi,0xc00202c0
c00068ab:	81 c6 a0 00 00 00    	add    esi,0xa0
c00068b1:	b9 22 00 00 00       	mov    ecx,0x22
c00068b6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00068b8:	b8 c2 02 02 c0       	mov    eax,0xc00202c2
c00068bd:	31 db                	xor    ebx,ebx
c00068bf:	e8 6f f5 ff ff       	call   c0005e33 <iso_733>
c00068c4:	a3 e8 02 02 c0       	mov    ds:0xc00202e8,eax
c00068c9:	b8 ca 02 02 c0       	mov    eax,0xc00202ca
c00068ce:	e8 60 f5 ff ff       	call   c0005e33 <iso_733>
c00068d3:	a3 e4 02 02 c0       	mov    ds:0xc00202e4,eax
c00068d8:	eb 02                	jmp    c00068dc <init_percd+0xf4>
c00068da:	89 c3                	mov    ebx,eax
c00068dc:	89 d8                	mov    eax,ebx
c00068de:	5b                   	pop    ebx
c00068df:	5e                   	pop    esi
c00068e0:	5f                   	pop    edi
c00068e1:	c3                   	ret    

c00068e2 <iso_ioctl>:
c00068e2:	e8 f4 fe ff ff       	call   c00067db <iso_reset>
c00068e7:	31 c0                	xor    eax,eax
c00068e9:	c3                   	ret    

c00068ea <fs_iso9660_init>:
c00068ea:	53                   	push   ebx
c00068eb:	31 db                	xor    ebx,ebx
c00068ed:	83 ec 0c             	sub    esp,0xc
c00068f0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068f4:	68 40 09 00 00       	push   0x940
c00068f9:	a2 00 f5 01 c0       	mov    ds:0xc001f500,al
c00068fe:	6a 00                	push   0x0
c0006900:	68 80 f9 01 c0       	push   0xc001f980
c0006905:	e8 e6 9b ff ff       	call   c00004f0 <memset>
c000690a:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006911:	c7 05 80 f9 01 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc001f980,0xffffffff
c000691b:	e8 79 10 00 00       	call   c0007999 <malloc>
c0006920:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006927:	a3 f0 02 02 c0       	mov    ds:0xc00202f0,eax
c000692c:	e8 68 10 00 00       	call   c0007999 <malloc>
c0006931:	83 c4 10             	add    esp,0x10
c0006934:	a3 60 f9 01 c0       	mov    ds:0xc001f960,eax
c0006939:	83 ec 0c             	sub    esp,0xc
c000693c:	68 04 08 00 00       	push   0x804
c0006941:	e8 53 10 00 00       	call   c0007999 <malloc>
c0006946:	89 04 9d 40 03 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdfcc0],eax
c000694d:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006953:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c000695a:	e8 3a 10 00 00       	call   c0007999 <malloc>
c000695f:	83 c4 10             	add    esp,0x10
c0006962:	89 04 9d 00 03 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdfd00],eax
c0006969:	43                   	inc    ebx
c000696a:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006970:	83 fb 10             	cmp    ebx,0x10
c0006973:	75 c4                	jne    c0006939 <fs_iso9660_init+0x4f>
c0006975:	31 c0                	xor    eax,eax
c0006977:	83 c4 08             	add    esp,0x8
c000697a:	5b                   	pop    ebx
c000697b:	c3                   	ret    

c000697c <fs_iso9660_shutdown>:
c000697c:	53                   	push   ebx
c000697d:	31 db                	xor    ebx,ebx
c000697f:	83 ec 08             	sub    esp,0x8
c0006982:	83 ec 0c             	sub    esp,0xc
c0006985:	ff 34 9d 40 03 02 c0 	push   DWORD PTR [ebx*4-0x3ffdfcc0]
c000698c:	e8 18 10 00 00       	call   c00079a9 <free>
c0006991:	58                   	pop    eax
c0006992:	ff 34 9d 00 03 02 c0 	push   DWORD PTR [ebx*4-0x3ffdfd00]
c0006999:	43                   	inc    ebx
c000699a:	e8 0a 10 00 00       	call   c00079a9 <free>
c000699f:	83 c4 10             	add    esp,0x10
c00069a2:	83 fb 10             	cmp    ebx,0x10
c00069a5:	75 db                	jne    c0006982 <fs_iso9660_shutdown+0x6>
c00069a7:	a1 f0 02 02 c0       	mov    eax,ds:0xc00202f0
c00069ac:	85 c0                	test   eax,eax
c00069ae:	74 0c                	je     c00069bc <fs_iso9660_shutdown+0x40>
c00069b0:	83 ec 0c             	sub    esp,0xc
c00069b3:	50                   	push   eax
c00069b4:	e8 f0 0f 00 00       	call   c00079a9 <free>
c00069b9:	83 c4 10             	add    esp,0x10
c00069bc:	a1 60 f9 01 c0       	mov    eax,ds:0xc001f960
c00069c1:	85 c0                	test   eax,eax
c00069c3:	74 0c                	je     c00069d1 <fs_iso9660_shutdown+0x55>
c00069c5:	83 ec 0c             	sub    esp,0xc
c00069c8:	50                   	push   eax
c00069c9:	e8 db 0f 00 00       	call   c00079a9 <free>
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c7 05 60 f9 01 c0 00 00 00 00 	mov    DWORD PTR ds:0xc001f960,0x0
c00069db:	c7 05 f0 02 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00202f0,0x0
c00069e5:	31 c0                	xor    eax,eax
c00069e7:	83 c4 08             	add    esp,0x8
c00069ea:	5b                   	pop    ebx
c00069eb:	c3                   	ret    

c00069ec <CPU::current()>:
c00069ec:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c00069f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00069f7:	c3                   	ret    

c00069f8 <operator new(unsigned long)>:
c00069f8:	e9 9c 0f 00 00       	jmp    c0007999 <malloc>

c00069fd <operator delete(void*)>:
c00069fd:	e9 b7 0f 00 00       	jmp    c00079b9 <rfree>

c0006a02 <disableIRQs()>:
c0006a02:	fa                   	cli    
c0006a03:	c3                   	ret    

c0006a04 <enableIRQs()>:
c0006a04:	fb                   	sti    
c0006a05:	c3                   	ret    

c0006a06 <lockScheduler()>:
c0006a06:	fa                   	cli    
c0006a07:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0006a0d:	c3                   	ret    

c0006a0e <unlockScheduler()>:
c0006a0e:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0006a13:	48                   	dec    eax
c0006a14:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0006a19:	75 01                	jne    c0006a1c <unlockScheduler()+0xe>
c0006a1b:	fb                   	sti    
c0006a1c:	c3                   	ret    

c0006a1d <lockStuff()>:
c0006a1d:	fa                   	cli    
c0006a1e:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0006a24:	ff 05 44 38 02 c0    	inc    DWORD PTR ds:0xc0023844
c0006a2a:	c3                   	ret    

c0006a2b <unlockStuff()>:
c0006a2b:	83 ec 0c             	sub    esp,0xc
c0006a2e:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0006a33:	48                   	dec    eax
c0006a34:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c0006a39:	75 18                	jne    c0006a53 <unlockStuff()+0x28>
c0006a3b:	83 3d 40 38 02 c0 00 	cmp    DWORD PTR ds:0xc0023840,0x0
c0006a42:	74 0f                	je     c0006a53 <unlockStuff()+0x28>
c0006a44:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c0006a4e:	e8 79 cb 00 00       	call   c00135cc <schedule()>
c0006a53:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0006a58:	48                   	dec    eax
c0006a59:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0006a5e:	75 01                	jne    c0006a61 <unlockStuff()+0x36>
c0006a60:	fb                   	sti    
c0006a61:	83 c4 0c             	add    esp,0xc
c0006a64:	c3                   	ret    

c0006a65 <Virt::getAKernelVAS()>:
c0006a65:	a1 70 04 02 c0       	mov    eax,ds:0xc0020470
c0006a6a:	c3                   	ret    

c0006a6b <__not_memcpy>:
c0006a6b:	57                   	push   edi
c0006a6c:	56                   	push   esi
c0006a6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006a71:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0006a75:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006a79:	89 c7                	mov    edi,eax
c0006a7b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006a7d:	5e                   	pop    esi
c0006a7e:	5f                   	pop    edi
c0006a7f:	c3                   	ret    

c0006a80 <Krnl::resolveCompatibilitySymbol(char*)>:
c0006a80:	83 ec 0c             	sub    esp,0xc
c0006a83:	83 ec 08             	sub    esp,0x8
c0006a86:	68 11 cf 01 c0       	push   0xc001cf11
c0006a8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006a8f:	e8 6c 9c ff ff       	call   c0000700 <strcmp>
c0006a94:	83 c4 10             	add    esp,0x10
c0006a97:	85 c0                	test   eax,eax
c0006a99:	0f 94 c0             	sete   al
c0006a9c:	84 c0                	test   al,al
c0006a9e:	74 0c                	je     c0006aac <Krnl::resolveCompatibilitySymbol(char*)+0x2c>
c0006aa0:	b8 84 03 02 c0       	mov    eax,0xc0020384
c0006aa5:	e9 ea 00 00 00       	jmp    c0006b94 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006aaa:	66 90                	xchg   ax,ax
c0006aac:	83 ec 08             	sub    esp,0x8
c0006aaf:	68 1a cf 01 c0       	push   0xc001cf1a
c0006ab4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006ab8:	e8 43 9c ff ff       	call   c0000700 <strcmp>
c0006abd:	83 c4 10             	add    esp,0x10
c0006ac0:	85 c0                	test   eax,eax
c0006ac2:	0f 94 c0             	sete   al
c0006ac5:	84 c0                	test   al,al
c0006ac7:	74 0b                	je     c0006ad4 <Krnl::resolveCompatibilitySymbol(char*)+0x54>
c0006ac9:	b8 a0 bb 01 c0       	mov    eax,0xc001bba0
c0006ace:	e9 c1 00 00 00       	jmp    c0006b94 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006ad3:	90                   	nop
c0006ad4:	83 ec 08             	sub    esp,0x8
c0006ad7:	68 24 cf 01 c0       	push   0xc001cf24
c0006adc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006ae0:	e8 1b 9c ff ff       	call   c0000700 <strcmp>
c0006ae5:	83 c4 10             	add    esp,0x10
c0006ae8:	85 c0                	test   eax,eax
c0006aea:	0f 94 c0             	sete   al
c0006aed:	84 c0                	test   al,al
c0006aef:	74 0b                	je     c0006afc <Krnl::resolveCompatibilitySymbol(char*)+0x7c>
c0006af1:	b8 d4 b8 01 c0       	mov    eax,0xc001b8d4
c0006af6:	e9 99 00 00 00       	jmp    c0006b94 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006afb:	90                   	nop
c0006afc:	83 ec 08             	sub    esp,0x8
c0006aff:	68 2d cf 01 c0       	push   0xc001cf2d
c0006b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b08:	e8 f3 9b ff ff       	call   c0000700 <strcmp>
c0006b0d:	83 c4 10             	add    esp,0x10
c0006b10:	85 c0                	test   eax,eax
c0006b12:	0f 94 c0             	sete   al
c0006b15:	84 c0                	test   al,al
c0006b17:	74 07                	je     c0006b20 <Krnl::resolveCompatibilitySymbol(char*)+0xa0>
c0006b19:	b8 a0 bc 01 c0       	mov    eax,0xc001bca0
c0006b1e:	eb 74                	jmp    c0006b94 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006b20:	83 ec 08             	sub    esp,0x8
c0006b23:	68 37 cf 01 c0       	push   0xc001cf37
c0006b28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b2c:	e8 cf 9b ff ff       	call   c0000700 <strcmp>
c0006b31:	83 c4 10             	add    esp,0x10
c0006b34:	85 c0                	test   eax,eax
c0006b36:	0f 94 c0             	sete   al
c0006b39:	84 c0                	test   al,al
c0006b3b:	74 07                	je     c0006b44 <Krnl::resolveCompatibilitySymbol(char*)+0xc4>
c0006b3d:	b8 20 ba 01 c0       	mov    eax,0xc001ba20
c0006b42:	eb 50                	jmp    c0006b94 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006b44:	83 ec 08             	sub    esp,0x8
c0006b47:	68 40 cf 01 c0       	push   0xc001cf40
c0006b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b50:	e8 ab 9b ff ff       	call   c0000700 <strcmp>
c0006b55:	83 c4 10             	add    esp,0x10
c0006b58:	85 c0                	test   eax,eax
c0006b5a:	0f 94 c0             	sete   al
c0006b5d:	84 c0                	test   al,al
c0006b5f:	74 07                	je     c0006b68 <Krnl::resolveCompatibilitySymbol(char*)+0xe8>
c0006b61:	b8 88 03 02 c0       	mov    eax,0xc0020388
c0006b66:	eb 2c                	jmp    c0006b94 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006b68:	83 ec 08             	sub    esp,0x8
c0006b6b:	68 4d cf 01 c0       	push   0xc001cf4d
c0006b70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006b74:	e8 87 9b ff ff       	call   c0000700 <strcmp>
c0006b79:	83 c4 10             	add    esp,0x10
c0006b7c:	85 c0                	test   eax,eax
c0006b7e:	0f 94 c0             	sete   al
c0006b81:	84 c0                	test   al,al
c0006b83:	74 07                	je     c0006b8c <Krnl::resolveCompatibilitySymbol(char*)+0x10c>
c0006b85:	b8 89 03 02 c0       	mov    eax,0xc0020389
c0006b8a:	eb 08                	jmp    c0006b94 <Krnl::resolveCompatibilitySymbol(char*)+0x114>
c0006b8c:	b8 00 00 00 00       	mov    eax,0x0
c0006b91:	8d 76 00             	lea    esi,[esi+0x0]
c0006b94:	83 c4 0c             	add    esp,0xc
c0006b97:	c3                   	ret    

c0006b98 <Computer::close(int, int, void*)>:
c0006b98:	57                   	push   edi
c0006b99:	56                   	push   esi
c0006b9a:	53                   	push   ebx
c0006b9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006b9f:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006ba3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006ba7:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006bad:	83 ec 0c             	sub    esp,0xc
c0006bb0:	50                   	push   eax
c0006bb1:	e8 d0 50 00 00       	call   c000bc86 <Device::closeAll()>
c0006bb6:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006bbc:	83 c4 10             	add    esp,0x10
c0006bbf:	8b 10                	mov    edx,DWORD PTR [eax]
c0006bc1:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006bc5:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006bcd:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006bd1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006bd5:	5b                   	pop    ebx
c0006bd6:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006bd9:	5e                   	pop    esi
c0006bda:	5f                   	pop    edi
c0006bdb:	ff e0                	jmp    eax

c0006bdd <Krnl::firstTask()>:
c0006bdd:	53                   	push   ebx
c0006bde:	83 ec 14             	sub    esp,0x14
c0006be1:	fb                   	sti    
c0006be2:	68 5a cf 01 c0       	push   0xc001cf5a
c0006be7:	e8 07 0e 00 00       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c0006bec:	c7 04 24 1f 07 00 00 	mov    DWORD PTR [esp],0x71f
c0006bf3:	e8 a1 0d 00 00       	call   c0007999 <malloc>
c0006bf8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006bff:	89 c3                	mov    ebx,eax
c0006c01:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0006c06:	50                   	push   eax
c0006c07:	68 73 cf 01 c0       	push   0xc001cf73
c0006c0c:	6a 01                	push   0x1
c0006c0e:	53                   	push   ebx
c0006c0f:	e8 8c c5 00 00       	call   c00131a0 <Process::Process(bool, char const*, Process*, char**)>
c0006c14:	83 c4 20             	add    esp,0x20
c0006c17:	68 ff 00 00 00       	push   0xff
c0006c1c:	6a 00                	push   0x0
c0006c1e:	68 f3 73 00 c0       	push   0xc00073f3
c0006c23:	53                   	push   ebx
c0006c24:	e8 83 c7 00 00       	call   c00133ac <Process::createThread(void (*)(void*), void*, int)>
c0006c29:	8b 15 70 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023870
c0006c2f:	6a 7a                	push   0x7a
c0006c31:	6a 00                	push   0x0
c0006c33:	68 00 3e 01 c0       	push   0xc0013e00
c0006c38:	52                   	push   edx
c0006c39:	e8 6e c7 00 00       	call   c00133ac <Process::createThread(void (*)(void*), void*, int)>
c0006c3e:	83 c4 14             	add    esp,0x14
c0006c41:	a3 28 38 02 c0       	mov    ds:0xc0023828,eax
c0006c46:	68 70 d0 01 c0       	push   0xc001d070
c0006c4b:	c6 05 89 03 02 c0 01 	mov    BYTE PTR ds:0xc0020389,0x1
c0006c52:	e8 9c 0d 00 00       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c0006c57:	e8 83 d5 00 00       	call   c00141df <Vm::initialise8086()>
c0006c5c:	e8 69 3e 00 00       	call   c000aaca <Fs::initVFS()>
c0006c61:	c7 04 24 80 cf 01 c0 	mov    DWORD PTR [esp],0xc001cf80
c0006c68:	e8 86 0d 00 00       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c0006c6d:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0006c72:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006c78:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c7a:	6a 00                	push   0x0
c0006c7c:	6a 00                	push   0x0
c0006c7e:	6a 00                	push   0x0
c0006c80:	50                   	push   eax
c0006c81:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006c84:	83 c4 14             	add    esp,0x14
c0006c87:	68 70 d0 01 c0       	push   0xc001d070
c0006c8c:	e8 62 0d 00 00       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c0006c91:	e8 9c ad 00 00       	call   c0011a32 <Sys::loadSyscalls()>
c0006c96:	e8 d3 94 00 00       	call   c001016e <Krnl::loadSystemEnv()>
c0006c9b:	e8 98 97 00 00       	call   c0010438 <Krnl::setupPowerManager()>
c0006ca0:	83 c4 0c             	add    esp,0xc
c0006ca3:	6a 3a                	push   0x3a
c0006ca5:	68 9a cf 01 c0       	push   0xc001cf9a
c0006caa:	68 a3 cf 01 c0       	push   0xc001cfa3
c0006caf:	e8 ae 9c 00 00       	call   c0010962 <Reg::readIntWithDefault(char*, char*, int)>
c0006cb4:	89 04 24             	mov    DWORD PTR [esp],eax
c0006cb7:	e8 1c 49 00 00       	call   c000b5d8 <User::loadClockSettings(int)>
c0006cbc:	c7 04 24 94 d0 01 c0 	mov    DWORD PTR [esp],0xc001d094
c0006cc3:	e8 2b 0d 00 00       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c0006cc8:	59                   	pop    ecx
c0006cc9:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0006cce:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006cd4:	53                   	push   ebx
c0006cd5:	e8 aa 4f 00 00       	call   c000bc84 <Device::loadDriversForAll()>
c0006cda:	c7 04 24 ab cf 01 c0 	mov    DWORD PTR [esp],0xc001cfab
c0006ce1:	e8 0d 0d 00 00       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c0006ce6:	58                   	pop    eax
c0006ce7:	8b 1d 84 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020384
c0006ced:	5a                   	pop    edx
c0006cee:	6a 01                	push   0x1
c0006cf0:	68 bc cf 01 c0       	push   0xc001cfbc
c0006cf5:	e8 e0 be 00 00       	call   c0012bda <Thr::loadDLL(char const*, bool)>
c0006cfa:	59                   	pop    ecx
c0006cfb:	5a                   	pop    edx
c0006cfc:	53                   	push   ebx
c0006cfd:	50                   	push   eax
c0006cfe:	e8 08 c1 00 00       	call   c0012e0b <Thr::executeDLL(unsigned long, void*)>
c0006d03:	83 c4 10             	add    esp,0x10
c0006d06:	83 ec 0c             	sub    esp,0xc
c0006d09:	6a 02                	push   0x2
c0006d0b:	e8 b8 ca 00 00       	call   c00137c8 <blockTask(TaskState)>
c0006d10:	83 c4 10             	add    esp,0x10
c0006d13:	eb f1                	jmp    c0006d06 <Krnl::firstTask()+0x129>
c0006d15:	90                   	nop

c0006d16 <Computer::Computer()>:
c0006d16:	83 ec 0c             	sub    esp,0xc
c0006d19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d1d:	83 ec 08             	sub    esp,0x8
c0006d20:	68 d8 cf 01 c0       	push   0xc001cfd8
c0006d25:	50                   	push   eax
c0006d26:	e8 d5 4f 00 00       	call   c000bd00 <Device::Device(char const*)>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	ba e0 d0 01 c0       	mov    edx,0xc001d0e0
c0006d33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d37:	89 10                	mov    DWORD PTR [eax],edx
c0006d39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d3d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006d47:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d4b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006d55:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d59:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006d5f:	83 ca 04             	or     edx,0x4
c0006d62:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006d68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006d72:	31 d2                	xor    edx,edx
c0006d74:	88 c2                	mov    dl,al
c0006d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d7a:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006d81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d85:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006d8b:	31 d2                	xor    edx,edx
c0006d8d:	88 c2                	mov    dl,al
c0006d8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d93:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006d98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d9c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006da2:	8d 50 01             	lea    edx,[eax+0x1]
c0006da5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0006da9:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0006daf:	31 d2                	xor    edx,edx
c0006db1:	88 c2                	mov    dl,al
c0006db3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006db7:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006dbb:	83 e1 3f             	and    ecx,0x3f
c0006dbe:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006dc2:	90                   	nop
c0006dc3:	83 c4 0c             	add    esp,0xc
c0006dc6:	c3                   	ret    
c0006dc7:	90                   	nop

c0006dc8 <Computer::setBootMessage(char const*)>:
c0006dc8:	c3                   	ret    
c0006dc9:	90                   	nop

c0006dca <Computer::detectFeatures()>:
c0006dca:	55                   	push   ebp
c0006dcb:	57                   	push   edi
c0006dcc:	56                   	push   esi
c0006dcd:	53                   	push   ebx
c0006dce:	83 ec 1c             	sub    esp,0x1c
c0006dd1:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006dd5:	81 a3 6c 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x16c],0xfffc0004
c0006ddf:	e8 35 94 ff ff       	call   c0000219 <detectCPUID>
c0006de4:	85 c0                	test   eax,eax
c0006de6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006dec:	0f 95 c2             	setne  dl
c0006def:	83 e0 fd             	and    eax,0xfffffffd
c0006df2:	01 d2                	add    edx,edx
c0006df4:	09 d0                	or     eax,edx
c0006df6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006dfc:	a8 02                	test   al,0x2
c0006dfe:	75 46                	jne    c0006e46 <Computer::detectFeatures()+0x7c>
c0006e00:	f6 05 9d 03 02 c0 04 	test   BYTE PTR ds:0xc002039d,0x4
c0006e07:	74 07                	je     c0006e10 <Computer::detectFeatures()+0x46>
c0006e09:	80 a3 6c 01 00 00 fb 	and    BYTE PTR [ebx+0x16c],0xfb
c0006e10:	e8 51 4a 01 00       	call   c001b866 <x87Detect>
c0006e15:	83 e0 01             	and    eax,0x1
c0006e18:	c1 e0 04             	shl    eax,0x4
c0006e1b:	88 c2                	mov    dl,al
c0006e1d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e23:	83 e0 ef             	and    eax,0xffffffef
c0006e26:	09 d0                	or     eax,edx
c0006e28:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e2e:	a8 10                	test   al,0x10
c0006e30:	0f 85 2a 01 00 00    	jne    c0006f60 <Computer::detectFeatures()+0x196>
c0006e36:	84 c0                	test   al,al
c0006e38:	0f 88 45 01 00 00    	js     c0006f83 <Computer::detectFeatures()+0x1b9>
c0006e3e:	83 c4 1c             	add    esp,0x1c
c0006e41:	5b                   	pop    ebx
c0006e42:	5e                   	pop    esi
c0006e43:	5f                   	pop    edi
c0006e44:	5d                   	pop    ebp
c0006e45:	c3                   	ret    
c0006e46:	83 ec 0c             	sub    esp,0xc
c0006e49:	6a 20                	push   0x20
c0006e4b:	e8 40 84 00 00       	call   c000f290 <CPU::cpuidCheckEDX(unsigned int)>
c0006e50:	83 e0 01             	and    eax,0x1
c0006e53:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006e5a:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006e60:	83 e0 f7             	and    eax,0xfffffff7
c0006e63:	09 d0                	or     eax,edx
c0006e65:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006e6b:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006e72:	e8 19 84 00 00       	call   c000f290 <CPU::cpuidCheckEDX(unsigned int)>
c0006e77:	83 e0 01             	and    eax,0x1
c0006e7a:	88 c2                	mov    dl,al
c0006e7c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006e82:	83 e0 fe             	and    eax,0xfffffffe
c0006e85:	09 d0                	or     eax,edx
c0006e87:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006e8d:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006e94:	e8 f7 83 00 00       	call   c000f290 <CPU::cpuidCheckEDX(unsigned int)>
c0006e99:	c1 e0 07             	shl    eax,0x7
c0006e9c:	88 c2                	mov    dl,al
c0006e9e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006ea4:	83 e0 7f             	and    eax,0x7f
c0006ea7:	09 d0                	or     eax,edx
c0006ea9:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006eaf:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006eb6:	e8 d5 83 00 00       	call   c000f290 <CPU::cpuidCheckEDX(unsigned int)>
c0006ebb:	83 c4 10             	add    esp,0x10
c0006ebe:	83 e0 01             	and    eax,0x1
c0006ec1:	c1 e0 05             	shl    eax,0x5
c0006ec4:	88 c2                	mov    dl,al
c0006ec6:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ecc:	83 e0 df             	and    eax,0xffffffdf
c0006ecf:	09 d0                	or     eax,edx
c0006ed1:	f7 05 9c 03 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002039c,0x401
c0006edb:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ee1:	0f 84 c2 00 00 00    	je     c0006fa9 <Computer::detectFeatures()+0x1df>
c0006ee7:	83 e0 fe             	and    eax,0xfffffffe
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ef6:	88 c2                	mov    dl,al
c0006ef8:	83 e2 09             	and    edx,0x9
c0006efb:	fe ca                	dec    dl
c0006efd:	75 09                	jne    c0006f08 <Computer::detectFeatures()+0x13e>
c0006eff:	83 e0 fe             	and    eax,0xfffffffe
c0006f02:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f08:	83 ec 0c             	sub    esp,0xc
c0006f0b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006f0f:	50                   	push   eax
c0006f10:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006f14:	55                   	push   ebp
c0006f15:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006f19:	57                   	push   edi
c0006f1a:	8d 74 24 18          	lea    esi,[esp+0x18]
c0006f1e:	56                   	push   esi
c0006f1f:	68 00 00 00 80       	push   0x80000000
c0006f24:	e8 e3 82 00 00       	call   c000f20c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006f29:	83 c4 20             	add    esp,0x20
c0006f2c:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0006f33:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006f37:	0f 86 c3 fe ff ff    	jbe    c0006e00 <Computer::detectFeatures()+0x36>
c0006f3d:	83 ec 0c             	sub    esp,0xc
c0006f40:	50                   	push   eax
c0006f41:	55                   	push   ebp
c0006f42:	57                   	push   edi
c0006f43:	56                   	push   esi
c0006f44:	68 01 00 00 80       	push   0x80000001
c0006f49:	e8 be 82 00 00       	call   c000f20c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0006f4e:	81 a3 6c 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x16c],0xfffcffbf
c0006f58:	83 c4 20             	add    esp,0x20
c0006f5b:	e9 a0 fe ff ff       	jmp    c0006e00 <Computer::detectFeatures()+0x36>
c0006f60:	e8 bb 48 01 00       	call   c001b820 <absolutelyNoChanceInHell>
c0006f65:	88 c2                	mov    dl,al
c0006f67:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f6d:	c1 e2 07             	shl    edx,0x7
c0006f70:	83 e0 7f             	and    eax,0x7f
c0006f73:	09 d0                	or     eax,edx
c0006f75:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f7b:	84 c0                	test   al,al
c0006f7d:	0f 89 bb fe ff ff    	jns    c0006e3e <Computer::detectFeatures()+0x74>
c0006f83:	e8 18 46 01 00       	call   c001b5a0 <avxDetect>
c0006f88:	83 e0 01             	and    eax,0x1
c0006f8b:	c1 e0 05             	shl    eax,0x5
c0006f8e:	88 c2                	mov    dl,al
c0006f90:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f96:	83 e0 df             	and    eax,0xffffffdf
c0006f99:	09 d0                	or     eax,edx
c0006f9b:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006fa1:	83 c4 1c             	add    esp,0x1c
c0006fa4:	5b                   	pop    ebx
c0006fa5:	5e                   	pop    esi
c0006fa6:	5f                   	pop    edi
c0006fa7:	5d                   	pop    ebp
c0006fa8:	c3                   	ret    
c0006fa9:	83 ec 0c             	sub    esp,0xc
c0006fac:	68 00 02 00 00       	push   0x200
c0006fb1:	e8 da 82 00 00       	call   c000f290 <CPU::cpuidCheckEDX(unsigned int)>
c0006fb6:	83 c4 10             	add    esp,0x10
c0006fb9:	83 e0 01             	and    eax,0x1
c0006fbc:	88 c2                	mov    dl,al
c0006fbe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fc4:	83 e0 fe             	and    eax,0xfffffffe
c0006fc7:	09 d0                	or     eax,edx
c0006fc9:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fcf:	e9 1c ff ff ff       	jmp    c0006ef0 <Computer::detectFeatures()+0x126>

c0006fd4 <Computer::displayFeatures()>:
c0006fd4:	c3                   	ret    
c0006fd5:	90                   	nop

c0006fd6 <Computer::rdmsr(unsigned int)>:
c0006fd6:	83 ec 0c             	sub    esp,0xc
c0006fd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006fdd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0006fe4:	74 0a                	je     c0006ff0 <Computer::rdmsr(unsigned int)+0x1a>
c0006fe6:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0006fea:	0f 32                	rdmsr  
c0006fec:	83 c4 0c             	add    esp,0xc
c0006fef:	c3                   	ret    
c0006ff0:	83 ec 0c             	sub    esp,0xc
c0006ff3:	68 e1 cf 01 c0       	push   0xc001cfe1
c0006ff8:	e8 7a 92 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0006ffd:	83 c4 10             	add    esp,0x10
c0007000:	eb e4                	jmp    c0006fe6 <Computer::rdmsr(unsigned int)+0x10>

c0007002 <Computer::wrmsr(unsigned int, unsigned long long)>:
c0007002:	57                   	push   edi
c0007003:	56                   	push   esi
c0007004:	52                   	push   edx
c0007005:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007009:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000700d:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0007011:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007018:	74 0e                	je     c0007028 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000701a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000701e:	89 f0                	mov    eax,esi
c0007020:	89 fa                	mov    edx,edi
c0007022:	0f 30                	wrmsr  
c0007024:	58                   	pop    eax
c0007025:	5e                   	pop    esi
c0007026:	5f                   	pop    edi
c0007027:	c3                   	ret    
c0007028:	83 ec 0c             	sub    esp,0xc
c000702b:	68 e7 cf 01 c0       	push   0xc001cfe7
c0007030:	e8 42 92 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0007035:	83 c4 10             	add    esp,0x10
c0007038:	eb e0                	jmp    c000701a <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000703a <Computer::shutdown()>:
c000703a:	83 ec 0c             	sub    esp,0xc
c000703d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007041:	8b 10                	mov    edx,DWORD PTR [eax]
c0007043:	6a 00                	push   0x0
c0007045:	6a 00                	push   0x0
c0007047:	6a 00                	push   0x0
c0007049:	50                   	push   eax
c000704a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000704d:	83 c4 1c             	add    esp,0x1c
c0007050:	c3                   	ret    
c0007051:	90                   	nop

c0007052 <Computer::restart()>:
c0007052:	83 ec 0c             	sub    esp,0xc
c0007055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007059:	8b 10                	mov    edx,DWORD PTR [eax]
c000705b:	6a 00                	push   0x0
c000705d:	6a 00                	push   0x0
c000705f:	6a 01                	push   0x1
c0007061:	50                   	push   eax
c0007062:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007065:	83 c4 1c             	add    esp,0x1c
c0007068:	c3                   	ret    
c0007069:	90                   	nop

c000706a <Computer::sleep()>:
c000706a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000706e:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007074:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007078:	e9 8b 7c 00 00       	jmp    c000ed08 <ACPI::sleep()>
c000707d:	90                   	nop

c000707e <Computer::nmiEnabled()>:
c000707e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007082:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007088:	c3                   	ret    
c0007089:	90                   	nop

c000708a <Computer::readCMOS(unsigned char)>:
c000708a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000708e:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c0007095:	19 c0                	sbb    eax,eax
c0007097:	83 e0 80             	and    eax,0xffffff80
c000709a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000709e:	e6 70                	out    0x70,al
c00070a0:	e4 71                	in     al,0x71
c00070a2:	c3                   	ret    
c00070a3:	90                   	nop

c00070a4 <Computer::enableNMI(bool)>:
c00070a4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00070ac:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00070b2:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00070ba:	eb ce                	jmp    c000708a <Computer::readCMOS(unsigned char)>

c00070bc <Computer::open(int, int, void*)>:
c00070bc:	56                   	push   esi
c00070bd:	53                   	push   ebx
c00070be:	83 ec 10             	sub    esp,0x10
c00070c1:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00070c5:	f6 05 9c 03 02 c0 04 	test   BYTE PTR ds:0xc002039c,0x4
c00070cc:	68 ed cf 01 c0       	push   0xc001cfed
c00070d1:	0f 94 05 80 f2 01 c0 	sete   BYTE PTR ds:0xc001f280
c00070d8:	e8 16 09 00 00       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c00070dd:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00070e4:	e8 b0 08 00 00       	call   c0007999 <malloc>
c00070e9:	89 04 24             	mov    DWORD PTR [esp],eax
c00070ec:	89 c6                	mov    esi,eax
c00070ee:	e8 ad 77 00 00       	call   c000e8a0 <ACPI::ACPI()>
c00070f3:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00070f9:	58                   	pop    eax
c00070fa:	5a                   	pop    edx
c00070fb:	56                   	push   esi
c00070fc:	53                   	push   ebx
c00070fd:	e8 66 4a 00 00       	call   c000bb68 <Device::addChild(Device*)>
c0007102:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007105:	e8 c0 fc ff ff       	call   c0006dca <Computer::detectFeatures()>
c000710a:	59                   	pop    ecx
c000710b:	5e                   	pop    esi
c000710c:	6a 01                	push   0x1
c000710e:	53                   	push   ebx
c000710f:	e8 90 ff ff ff       	call   c00070a4 <Computer::enableNMI(bool)>
c0007114:	c7 04 24 05 d0 01 c0 	mov    DWORD PTR [esp],0xc001d005
c000711b:	e8 d3 08 00 00       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c0007120:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007127:	e8 6d 08 00 00       	call   c0007999 <malloc>
c000712c:	89 04 24             	mov    DWORD PTR [esp],eax
c000712f:	89 c6                	mov    esi,eax
c0007131:	e8 12 82 00 00       	call   c000f348 <CPU::CPU()>
c0007136:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000713c:	58                   	pop    eax
c000713d:	5a                   	pop    edx
c000713e:	56                   	push   esi
c000713f:	53                   	push   ebx
c0007140:	e8 23 4a 00 00       	call   c000bb68 <Device::addChild(Device*)>
c0007145:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000714b:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000714f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007151:	51                   	push   ecx
c0007152:	6a 00                	push   0x0
c0007154:	6a 00                	push   0x0
c0007156:	50                   	push   eax
c0007157:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000715a:	83 c4 14             	add    esp,0x14
c000715d:	68 b4 d0 01 c0       	push   0xc001d0b4
c0007162:	e8 8c 08 00 00       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c0007167:	e8 34 e1 00 00       	call   c00152a0 <HalInitialiseCoprocessor()>
c000716c:	c7 04 24 1f d0 01 c0 	mov    DWORD PTR [esp],0xc001d01f
c0007173:	e8 7b 08 00 00       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c0007178:	c7 04 24 dd 6b 00 c0 	mov    DWORD PTR [esp],0xc0006bdd
c000717f:	e8 40 c3 00 00       	call   c00134c4 <setupMultitasking(void (*)())>
c0007184:	83 c4 14             	add    esp,0x14
c0007187:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000718c:	5b                   	pop    ebx
c000718d:	5e                   	pop    esi
c000718e:	c3                   	ret    
c000718f:	90                   	nop

c0007190 <Computer::disableNMI()>:
c0007190:	6a 00                	push   0x0
c0007192:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007196:	50                   	push   eax
c0007197:	e8 08 ff ff ff       	call   c00070a4 <Computer::enableNMI(bool)>
c000719c:	5a                   	pop    edx
c000719d:	59                   	pop    ecx
c000719e:	c3                   	ret    
c000719f:	90                   	nop

c00071a0 <Computer::writeCMOS(unsigned char, unsigned char)>:
c00071a0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00071a4:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c00071ab:	19 c0                	sbb    eax,eax
c00071ad:	83 e0 80             	and    eax,0xffffff80
c00071b0:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00071b4:	e6 70                	out    0x70,al
c00071b6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00071ba:	e6 71                	out    0x71,al
c00071bc:	c3                   	ret    
c00071bd:	90                   	nop

c00071be <Computer::handleNMI()>:
c00071be:	56                   	push   esi
c00071bf:	53                   	push   ebx
c00071c0:	83 ec 10             	sub    esp,0x10
c00071c3:	e4 92                	in     al,0x92
c00071c5:	89 c6                	mov    esi,eax
c00071c7:	e4 61                	in     al,0x61
c00071c9:	68 3a d0 01 c0       	push   0xc001d03a
c00071ce:	88 c3                	mov    bl,al
c00071d0:	e8 53 35 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c00071d5:	83 c4 10             	add    esp,0x10
c00071d8:	83 e6 10             	and    esi,0x10
c00071db:	75 0d                	jne    c00071ea <Computer::handleNMI()+0x2c>
c00071dd:	f6 c3 40             	test   bl,0x40
c00071e0:	75 1d                	jne    c00071ff <Computer::handleNMI()+0x41>
c00071e2:	84 db                	test   bl,bl
c00071e4:	78 2d                	js     c0007213 <Computer::handleNMI()+0x55>
c00071e6:	58                   	pop    eax
c00071e7:	5b                   	pop    ebx
c00071e8:	5e                   	pop    esi
c00071e9:	c3                   	ret    
c00071ea:	83 ec 0c             	sub    esp,0xc
c00071ed:	68 4b d0 01 c0       	push   0xc001d04b
c00071f2:	e8 80 90 00 00       	call   c0010277 <Krnl::panic(char const*)>
c00071f7:	83 c4 10             	add    esp,0x10
c00071fa:	f6 c3 40             	test   bl,0x40
c00071fd:	74 e3                	je     c00071e2 <Computer::handleNMI()+0x24>
c00071ff:	83 ec 0c             	sub    esp,0xc
c0007202:	68 58 d0 01 c0       	push   0xc001d058
c0007207:	e8 6b 90 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000720c:	83 c4 10             	add    esp,0x10
c000720f:	84 db                	test   bl,bl
c0007211:	79 d3                	jns    c00071e6 <Computer::handleNMI()+0x28>
c0007213:	c7 44 24 10 62 d0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d062
c000721b:	5a                   	pop    edx
c000721c:	5b                   	pop    ebx
c000721d:	5e                   	pop    esi
c000721e:	e9 54 90 00 00       	jmp    c0010277 <Krnl::panic(char const*)>
c0007223:	90                   	nop

c0007224 <GDTEntry::setBase(unsigned int)>:
c0007224:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007228:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000722c:	89 c1                	mov    ecx,eax
c000722e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007232:	c1 e9 10             	shr    ecx,0x10
c0007235:	c1 e8 18             	shr    eax,0x18
c0007238:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000723b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000723e:	c3                   	ret    
c000723f:	90                   	nop

c0007240 <GDTEntry::setLimit(unsigned int)>:
c0007240:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007244:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007248:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000724b:	66 89 01             	mov    WORD PTR [ecx],ax
c000724e:	83 e2 f0             	and    edx,0xfffffff0
c0007251:	c1 e8 10             	shr    eax,0x10
c0007254:	83 e0 0f             	and    eax,0xf
c0007257:	09 d0                	or     eax,edx
c0007259:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000725c:	c3                   	ret    
c000725d:	90                   	nop

c000725e <GDT::GDT()>:
c000725e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007262:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007268:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000726c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007272:	90                   	nop
c0007273:	c3                   	ret    

c0007274 <GDT::addEntry(GDTEntry)>:
c0007274:	53                   	push   ebx
c0007275:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007279:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000727d:	8b 02                	mov    eax,DWORD PTR [edx]
c000727f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007283:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007287:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c000728b:	8d 48 01             	lea    ecx,[eax+0x1]
c000728e:	c1 e0 03             	shl    eax,0x3
c0007291:	89 0a                	mov    DWORD PTR [edx],ecx
c0007293:	5b                   	pop    ebx
c0007294:	c3                   	ret    
c0007295:	90                   	nop

c0007296 <GDT::getNumberOfEntries()>:
c0007296:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000729a:	8b 00                	mov    eax,DWORD PTR [eax]
c000729c:	c3                   	ret    
c000729d:	90                   	nop

c000729e <GDT::flush()>:
c000729e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00072a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00072a4:	83 c0 04             	add    eax,0x4
c00072a7:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00072ae:	a3 8e 03 02 c0       	mov    ds:0xc002038e,eax
c00072b3:	66 89 15 8c 03 02 c0 	mov    WORD PTR ds:0xc002038c,dx
c00072ba:	e9 be 90 ff ff       	jmp    c000037d <loadGDT>
c00072bf:	90                   	nop

c00072c0 <GDT::setup()>:
c00072c0:	57                   	push   edi
c00072c1:	56                   	push   esi
c00072c2:	53                   	push   ebx
c00072c3:	83 ec 30             	sub    esp,0x30
c00072c6:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00072ca:	6a 00                	push   0x0
c00072cc:	8d 74 24 14          	lea    esi,[esp+0x14]
c00072d0:	56                   	push   esi
c00072d1:	e8 4e ff ff ff       	call   c0007224 <GDTEntry::setBase(unsigned int)>
c00072d6:	6a 00                	push   0x0
c00072d8:	56                   	push   esi
c00072d9:	e8 62 ff ff ff       	call   c0007240 <GDTEntry::setLimit(unsigned int)>
c00072de:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00072e6:	6a 00                	push   0x0
c00072e8:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00072ec:	56                   	push   esi
c00072ed:	e8 32 ff ff ff       	call   c0007224 <GDTEntry::setBase(unsigned int)>
c00072f2:	68 ff ff ff 00       	push   0xffffff
c00072f7:	56                   	push   esi
c00072f8:	e8 43 ff ff ff       	call   c0007240 <GDTEntry::setLimit(unsigned int)>
c00072fd:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0007301:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007305:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007309:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000730d:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007312:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007317:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000731b:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000731f:	89 f8                	mov    eax,edi
c0007321:	89 fa                	mov    edx,edi
c0007323:	80 e4 f7             	and    ah,0xf7
c0007326:	80 ce 60             	or     dh,0x60
c0007329:	89 c7                	mov    edi,eax
c000732b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000732f:	80 cc 60             	or     ah,0x60
c0007332:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007336:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000733a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000733e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007342:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007346:	83 c4 20             	add    esp,0x20
c0007349:	6a 00                	push   0x0
c000734b:	8d 44 24 24          	lea    eax,[esp+0x24]
c000734f:	50                   	push   eax
c0007350:	e8 cf fe ff ff       	call   c0007224 <GDTEntry::setBase(unsigned int)>
c0007355:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0007359:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000735d:	80 64 24 2e 3f       	and    BYTE PTR [esp+0x2e],0x3f
c0007362:	6a 00                	push   0x0
c0007364:	8d 44 24 34          	lea    eax,[esp+0x34]
c0007368:	50                   	push   eax
c0007369:	e8 b6 fe ff ff       	call   c0007224 <GDTEntry::setBase(unsigned int)>
c000736e:	80 64 24 3e 3f       	and    BYTE PTR [esp+0x3e],0x3f
c0007373:	83 c4 0c             	add    esp,0xc
c0007376:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000737e:	53                   	push   ebx
c000737f:	e8 f0 fe ff ff       	call   c0007274 <GDT::addEntry(GDTEntry)>
c0007384:	83 c4 0c             	add    esp,0xc
c0007387:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000738b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000738f:	53                   	push   ebx
c0007390:	e8 df fe ff ff       	call   c0007274 <GDT::addEntry(GDTEntry)>
c0007395:	83 c4 0c             	add    esp,0xc
c0007398:	57                   	push   edi
c0007399:	56                   	push   esi
c000739a:	53                   	push   ebx
c000739b:	e8 d4 fe ff ff       	call   c0007274 <GDT::addEntry(GDTEntry)>
c00073a0:	83 c4 0c             	add    esp,0xc
c00073a3:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00073a7:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00073ab:	53                   	push   ebx
c00073ac:	e8 c3 fe ff ff       	call   c0007274 <GDT::addEntry(GDTEntry)>
c00073b1:	83 c4 0c             	add    esp,0xc
c00073b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00073b8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00073bc:	53                   	push   ebx
c00073bd:	e8 b2 fe ff ff       	call   c0007274 <GDT::addEntry(GDTEntry)>
c00073c2:	83 c4 0c             	add    esp,0xc
c00073c5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00073c9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00073cd:	53                   	push   ebx
c00073ce:	e8 a1 fe ff ff       	call   c0007274 <GDT::addEntry(GDTEntry)>
c00073d3:	83 c4 0c             	add    esp,0xc
c00073d6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00073da:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00073de:	53                   	push   ebx
c00073df:	e8 90 fe ff ff       	call   c0007274 <GDT::addEntry(GDTEntry)>
c00073e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00073e7:	e8 b2 fe ff ff       	call   c000729e <GDT::flush()>
c00073ec:	83 c4 40             	add    esp,0x40
c00073ef:	5b                   	pop    ebx
c00073f0:	5e                   	pop    esi
c00073f1:	5f                   	pop    edi
c00073f2:	c3                   	ret    

c00073f3 <idleFunction(void*)>:
c00073f3:	83 ec 0c             	sub    esp,0xc
c00073f6:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00073fb:	48                   	dec    eax
c00073fc:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0007401:	75 01                	jne    c0007404 <idleFunction(void*)+0x11>
c0007403:	fb                   	sti    
c0007404:	f4                   	hlt    
c0007405:	e8 18 4a 01 00       	call   c001be22 <idleCommon()>
c000740a:	eb f8                	jmp    c0007404 <idleFunction(void*)+0x11>

c000740c <IDTEntry::IDTEntry(bool)>:
c000740c:	83 ec 04             	sub    esp,0x4
c000740f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007413:	88 04 24             	mov    BYTE PTR [esp],al
c0007416:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000741a:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007420:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007424:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007428:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000742c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000742f:	83 e2 f0             	and    edx,0xfffffff0
c0007432:	83 ca 0e             	or     edx,0xe
c0007435:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007438:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000743c:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000743f:	83 e2 ef             	and    edx,0xffffffef
c0007442:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007445:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c0007449:	74 05                	je     c0007450 <IDTEntry::IDTEntry(bool)+0x44>
c000744b:	b2 03                	mov    dl,0x3
c000744d:	eb 05                	jmp    c0007454 <IDTEntry::IDTEntry(bool)+0x48>
c000744f:	90                   	nop
c0007450:	b2 00                	mov    dl,0x0
c0007452:	66 90                	xchg   ax,ax
c0007454:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007458:	83 e2 03             	and    edx,0x3
c000745b:	88 d1                	mov    cl,dl
c000745d:	c1 e1 05             	shl    ecx,0x5
c0007460:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007463:	83 e2 9f             	and    edx,0xffffff9f
c0007466:	09 ca                	or     edx,ecx
c0007468:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000746b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000746f:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007472:	83 ca 80             	or     edx,0xffffff80
c0007475:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007478:	90                   	nop
c0007479:	83 c4 04             	add    esp,0x4
c000747c:	c3                   	ret    
c000747d:	90                   	nop

c000747e <IDTEntry::setOffset(unsigned int)>:
c000747e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0007482:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007486:	66 89 02             	mov    WORD PTR [edx],ax
c0007489:	c1 e8 10             	shr    eax,0x10
c000748c:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c0007490:	c3                   	ret    
c0007491:	90                   	nop
c0007492:	66 90                	xchg   ax,ax

c0007494 <IDT::IDT()>:
c0007494:	90                   	nop
c0007495:	c3                   	ret    

c0007496 <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c0007496:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000749a:	83 c0 30             	add    eax,0x30
c000749d:	c3                   	ret    

c000749e <IDT::addEntry(IDTEntry, int)>:
c000749e:	53                   	push   ebx
c000749f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00074a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00074a7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00074ab:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00074af:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00074b2:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00074b6:	5b                   	pop    ebx
c00074b7:	c3                   	ret    

c00074b8 <IDT::addEntry(int, void (*)(), bool)>:
c00074b8:	53                   	push   ebx
c00074b9:	83 ec 10             	sub    esp,0x10
c00074bc:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00074c1:	50                   	push   eax
c00074c2:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00074c6:	53                   	push   ebx
c00074c7:	e8 40 ff ff ff       	call   c000740c <IDTEntry::IDTEntry(bool)>
c00074cc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d0:	53                   	push   ebx
c00074d1:	e8 a8 ff ff ff       	call   c000747e <IDTEntry::setOffset(unsigned int)>
c00074d6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00074da:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074de:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00074e2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00074e6:	e8 b3 ff ff ff       	call   c000749e <IDT::addEntry(IDTEntry, int)>
c00074eb:	83 c4 30             	add    esp,0x30
c00074ee:	5b                   	pop    ebx
c00074ef:	c3                   	ret    

c00074f0 <IDT::flush()>:
c00074f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00074f4:	66 c7 05 94 03 02 c0 ff 07 	mov    WORD PTR ds:0xc0020394,0x7ff
c00074fd:	a3 96 03 02 c0       	mov    ds:0xc0020396,eax
c0007502:	0f 01 1d 94 03 02 c0 	lidtd  ds:0xc0020394
c0007509:	c3                   	ret    

c000750a <IDT::setup()>:
c000750a:	57                   	push   edi
c000750b:	56                   	push   esi
c000750c:	53                   	push   ebx
c000750d:	83 ec 10             	sub    esp,0x10
c0007510:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007514:	6a 00                	push   0x0
c0007516:	68 30 b6 01 c0       	push   0xc001b630
c000751b:	6a 00                	push   0x0
c000751d:	53                   	push   ebx
c000751e:	e8 95 ff ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007523:	6a 00                	push   0x0
c0007525:	68 40 b6 01 c0       	push   0xc001b640
c000752a:	6a 01                	push   0x1
c000752c:	53                   	push   ebx
c000752d:	e8 86 ff ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007532:	83 c4 20             	add    esp,0x20
c0007535:	6a 00                	push   0x0
c0007537:	68 4a b6 01 c0       	push   0xc001b64a
c000753c:	6a 02                	push   0x2
c000753e:	53                   	push   ebx
c000753f:	e8 74 ff ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007544:	6a 00                	push   0x0
c0007546:	68 54 b6 01 c0       	push   0xc001b654
c000754b:	6a 03                	push   0x3
c000754d:	53                   	push   ebx
c000754e:	e8 65 ff ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007553:	83 c4 20             	add    esp,0x20
c0007556:	6a 00                	push   0x0
c0007558:	68 5e b6 01 c0       	push   0xc001b65e
c000755d:	6a 04                	push   0x4
c000755f:	53                   	push   ebx
c0007560:	e8 53 ff ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007565:	6a 00                	push   0x0
c0007567:	68 68 b6 01 c0       	push   0xc001b668
c000756c:	6a 05                	push   0x5
c000756e:	53                   	push   ebx
c000756f:	e8 44 ff ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007574:	83 c4 20             	add    esp,0x20
c0007577:	6a 00                	push   0x0
c0007579:	68 72 b6 01 c0       	push   0xc001b672
c000757e:	6a 06                	push   0x6
c0007580:	53                   	push   ebx
c0007581:	e8 32 ff ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007586:	6a 00                	push   0x0
c0007588:	68 7c b6 01 c0       	push   0xc001b67c
c000758d:	6a 07                	push   0x7
c000758f:	53                   	push   ebx
c0007590:	e8 23 ff ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007595:	83 c4 20             	add    esp,0x20
c0007598:	6a 00                	push   0x0
c000759a:	68 86 b6 01 c0       	push   0xc001b686
c000759f:	6a 08                	push   0x8
c00075a1:	53                   	push   ebx
c00075a2:	e8 11 ff ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00075a7:	6a 00                	push   0x0
c00075a9:	68 8e b6 01 c0       	push   0xc001b68e
c00075ae:	6a 09                	push   0x9
c00075b0:	53                   	push   ebx
c00075b1:	e8 02 ff ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00075b6:	83 c4 20             	add    esp,0x20
c00075b9:	6a 00                	push   0x0
c00075bb:	68 98 b6 01 c0       	push   0xc001b698
c00075c0:	6a 0a                	push   0xa
c00075c2:	53                   	push   ebx
c00075c3:	e8 f0 fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00075c8:	6a 00                	push   0x0
c00075ca:	68 a0 b6 01 c0       	push   0xc001b6a0
c00075cf:	6a 0b                	push   0xb
c00075d1:	53                   	push   ebx
c00075d2:	e8 e1 fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00075d7:	83 c4 20             	add    esp,0x20
c00075da:	6a 00                	push   0x0
c00075dc:	68 a8 b6 01 c0       	push   0xc001b6a8
c00075e1:	6a 0c                	push   0xc
c00075e3:	53                   	push   ebx
c00075e4:	e8 cf fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00075e9:	6a 00                	push   0x0
c00075eb:	68 b0 b6 01 c0       	push   0xc001b6b0
c00075f0:	6a 0d                	push   0xd
c00075f2:	53                   	push   ebx
c00075f3:	e8 c0 fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00075f8:	83 c4 20             	add    esp,0x20
c00075fb:	6a 00                	push   0x0
c00075fd:	68 b8 b6 01 c0       	push   0xc001b6b8
c0007602:	6a 0e                	push   0xe
c0007604:	53                   	push   ebx
c0007605:	e8 ae fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c000760a:	6a 00                	push   0x0
c000760c:	68 c0 b6 01 c0       	push   0xc001b6c0
c0007611:	6a 0f                	push   0xf
c0007613:	53                   	push   ebx
c0007614:	e8 9f fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007619:	83 c4 20             	add    esp,0x20
c000761c:	6a 00                	push   0x0
c000761e:	68 ca b6 01 c0       	push   0xc001b6ca
c0007623:	6a 10                	push   0x10
c0007625:	53                   	push   ebx
c0007626:	e8 8d fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c000762b:	6a 00                	push   0x0
c000762d:	68 d4 b6 01 c0       	push   0xc001b6d4
c0007632:	6a 11                	push   0x11
c0007634:	53                   	push   ebx
c0007635:	e8 7e fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c000763a:	83 c4 20             	add    esp,0x20
c000763d:	6a 00                	push   0x0
c000763f:	68 de b6 01 c0       	push   0xc001b6de
c0007644:	6a 12                	push   0x12
c0007646:	53                   	push   ebx
c0007647:	e8 6c fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c000764c:	6a 01                	push   0x1
c000764e:	68 78 b7 01 c0       	push   0xc001b778
c0007653:	6a 60                	push   0x60
c0007655:	53                   	push   ebx
c0007656:	e8 5d fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c000765b:	83 c4 20             	add    esp,0x20
c000765e:	6a 00                	push   0x0
c0007660:	68 7f b7 01 c0       	push   0xc001b77f
c0007665:	6a 20                	push   0x20
c0007667:	53                   	push   ebx
c0007668:	e8 4b fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c000766d:	6a 00                	push   0x0
c000766f:	68 6a b7 01 c0       	push   0xc001b76a
c0007674:	6a 21                	push   0x21
c0007676:	53                   	push   ebx
c0007677:	e8 3c fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c000767c:	83 c4 20             	add    esp,0x20
c000767f:	6a 00                	push   0x0
c0007681:	68 71 b7 01 c0       	push   0xc001b771
c0007686:	6a 22                	push   0x22
c0007688:	53                   	push   ebx
c0007689:	e8 2a fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c000768e:	6a 00                	push   0x0
c0007690:	68 e8 b6 01 c0       	push   0xc001b6e8
c0007695:	6a 23                	push   0x23
c0007697:	53                   	push   ebx
c0007698:	e8 1b fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c000769d:	83 c4 20             	add    esp,0x20
c00076a0:	6a 00                	push   0x0
c00076a2:	68 f2 b6 01 c0       	push   0xc001b6f2
c00076a7:	6a 24                	push   0x24
c00076a9:	53                   	push   ebx
c00076aa:	e8 09 fe ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00076af:	6a 00                	push   0x0
c00076b1:	68 fc b6 01 c0       	push   0xc001b6fc
c00076b6:	6a 25                	push   0x25
c00076b8:	53                   	push   ebx
c00076b9:	e8 fa fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00076be:	83 c4 20             	add    esp,0x20
c00076c1:	6a 00                	push   0x0
c00076c3:	68 06 b7 01 c0       	push   0xc001b706
c00076c8:	6a 26                	push   0x26
c00076ca:	53                   	push   ebx
c00076cb:	e8 e8 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00076d0:	6a 00                	push   0x0
c00076d2:	68 10 b7 01 c0       	push   0xc001b710
c00076d7:	6a 27                	push   0x27
c00076d9:	53                   	push   ebx
c00076da:	e8 d9 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00076df:	83 c4 20             	add    esp,0x20
c00076e2:	6a 00                	push   0x0
c00076e4:	68 1a b7 01 c0       	push   0xc001b71a
c00076e9:	6a 28                	push   0x28
c00076eb:	53                   	push   ebx
c00076ec:	e8 c7 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00076f1:	6a 00                	push   0x0
c00076f3:	68 24 b7 01 c0       	push   0xc001b724
c00076f8:	6a 29                	push   0x29
c00076fa:	53                   	push   ebx
c00076fb:	e8 b8 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007700:	83 c4 20             	add    esp,0x20
c0007703:	6a 00                	push   0x0
c0007705:	68 2e b7 01 c0       	push   0xc001b72e
c000770a:	6a 2a                	push   0x2a
c000770c:	53                   	push   ebx
c000770d:	e8 a6 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007712:	6a 00                	push   0x0
c0007714:	68 38 b7 01 c0       	push   0xc001b738
c0007719:	6a 2b                	push   0x2b
c000771b:	53                   	push   ebx
c000771c:	e8 97 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007721:	83 c4 20             	add    esp,0x20
c0007724:	6a 00                	push   0x0
c0007726:	68 42 b7 01 c0       	push   0xc001b742
c000772b:	6a 2c                	push   0x2c
c000772d:	53                   	push   ebx
c000772e:	e8 85 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007733:	6a 00                	push   0x0
c0007735:	68 4c b7 01 c0       	push   0xc001b74c
c000773a:	6a 2d                	push   0x2d
c000773c:	53                   	push   ebx
c000773d:	e8 76 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007742:	83 c4 20             	add    esp,0x20
c0007745:	6a 00                	push   0x0
c0007747:	68 56 b7 01 c0       	push   0xc001b756
c000774c:	6a 2e                	push   0x2e
c000774e:	53                   	push   ebx
c000774f:	e8 64 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007754:	6a 00                	push   0x0
c0007756:	68 60 b7 01 c0       	push   0xc001b760
c000775b:	6a 2f                	push   0x2f
c000775d:	53                   	push   ebx
c000775e:	e8 55 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007763:	83 c4 20             	add    esp,0x20
c0007766:	6a 00                	push   0x0
c0007768:	68 b6 b7 01 c0       	push   0xc001b7b6
c000776d:	6a 30                	push   0x30
c000776f:	53                   	push   ebx
c0007770:	e8 43 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007775:	6a 00                	push   0x0
c0007777:	68 c0 b7 01 c0       	push   0xc001b7c0
c000777c:	6a 31                	push   0x31
c000777e:	53                   	push   ebx
c000777f:	e8 34 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007784:	83 c4 20             	add    esp,0x20
c0007787:	6a 00                	push   0x0
c0007789:	68 ca b7 01 c0       	push   0xc001b7ca
c000778e:	6a 32                	push   0x32
c0007790:	53                   	push   ebx
c0007791:	e8 22 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c0007796:	6a 00                	push   0x0
c0007798:	68 d4 b7 01 c0       	push   0xc001b7d4
c000779d:	6a 33                	push   0x33
c000779f:	53                   	push   ebx
c00077a0:	e8 13 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00077a5:	83 c4 20             	add    esp,0x20
c00077a8:	6a 00                	push   0x0
c00077aa:	68 de b7 01 c0       	push   0xc001b7de
c00077af:	6a 34                	push   0x34
c00077b1:	53                   	push   ebx
c00077b2:	e8 01 fd ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00077b7:	6a 00                	push   0x0
c00077b9:	68 e8 b7 01 c0       	push   0xc001b7e8
c00077be:	6a 35                	push   0x35
c00077c0:	53                   	push   ebx
c00077c1:	e8 f2 fc ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00077c6:	83 c4 20             	add    esp,0x20
c00077c9:	6a 00                	push   0x0
c00077cb:	68 f2 b7 01 c0       	push   0xc001b7f2
c00077d0:	6a 36                	push   0x36
c00077d2:	53                   	push   ebx
c00077d3:	e8 e0 fc ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00077d8:	6a 00                	push   0x0
c00077da:	68 fc b7 01 c0       	push   0xc001b7fc
c00077df:	6a 37                	push   0x37
c00077e1:	53                   	push   ebx
c00077e2:	e8 d1 fc ff ff       	call   c00074b8 <IDT::addEntry(int, void (*)(), bool)>
c00077e7:	83 c4 1c             	add    esp,0x1c
c00077ea:	6a 03                	push   0x3
c00077ec:	6a 02                	push   0x2
c00077ee:	ff 35 70 04 02 c0    	push   DWORD PTR ds:0xc0020470
c00077f4:	e8 75 24 00 00       	call   c0009c6e <VAS::allocatePages(int, int)>
c00077f9:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007800:	89 c6                	mov    esi,eax
c0007802:	e8 92 01 00 00       	call   c0007999 <malloc>
c0007807:	81 c6 00 20 00 00    	add    esi,0x2000
c000780d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007810:	89 c7                	mov    edi,eax
c0007812:	e8 01 16 00 00       	call   c0008e18 <TSS::TSS()>
c0007817:	83 c4 0c             	add    esp,0xc
c000781a:	68 86 b6 01 c0       	push   0xc001b686
c000781f:	56                   	push   esi
c0007820:	57                   	push   edi
c0007821:	e8 36 16 00 00       	call   c0008e5c <TSS::setup(unsigned long, unsigned long)>
c0007826:	89 c6                	mov    esi,eax
c0007828:	58                   	pop    eax
c0007829:	5a                   	pop    edx
c000782a:	6a 00                	push   0x0
c000782c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007830:	50                   	push   eax
c0007831:	e8 d6 fb ff ff       	call   c000740c <IDTEntry::IDTEntry(bool)>
c0007836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000783a:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000783f:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c0007846:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000784c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007850:	80 ce 05             	or     dh,0x5
c0007853:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c0007856:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000785a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000785e:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007861:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007864:	e8 87 fc ff ff       	call   c00074f0 <IDT::flush()>
c0007869:	83 c4 20             	add    esp,0x20
c000786c:	5b                   	pop    ebx
c000786d:	5e                   	pop    esi
c000786e:	5f                   	pop    edi
c000786f:	c3                   	ret    

c0007870 <sbrk>:
c0007870:	55                   	push   ebp
c0007871:	57                   	push   edi
c0007872:	56                   	push   esi
c0007873:	53                   	push   ebx
c0007874:	83 ec 1c             	sub    esp,0x1c
c0007877:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000787b:	85 c0                	test   eax,eax
c000787d:	74 5f                	je     c00078de <sbrk+0x6e>
c000787f:	78 64                	js     c00078e5 <sbrk+0x75>
c0007881:	8b 15 08 f1 01 c0    	mov    edx,DWORD PTR ds:0xc001f108
c0007887:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000788b:	05 ff 0f 00 00       	add    eax,0xfff
c0007890:	89 c5                	mov    ebp,eax
c0007892:	78 69                	js     c00078fd <sbrk+0x8d>
c0007894:	c1 fd 0c             	sar    ebp,0xc
c0007897:	bb 00 00 00 00       	mov    ebx,0x0
c000789c:	8b 35 70 04 02 c0    	mov    esi,DWORD PTR ds:0xc0020470
c00078a2:	8b 3d 08 f1 01 c0    	mov    edi,DWORD PTR ds:0xc001f108
c00078a8:	e8 b9 04 00 00       	call   c0007d66 <Phys::allocatePage()>
c00078ad:	68 01 04 00 00       	push   0x401
c00078b2:	57                   	push   edi
c00078b3:	50                   	push   eax
c00078b4:	56                   	push   esi
c00078b5:	e8 b0 22 00 00       	call   c0009b6a <VAS::mapPage(unsigned long, unsigned long, int)>
c00078ba:	81 05 08 f1 01 c0 00 10 00 00 	add    DWORD PTR ds:0xc001f108,0x1000
c00078c4:	43                   	inc    ebx
c00078c5:	83 c4 10             	add    esp,0x10
c00078c8:	39 dd                	cmp    ebp,ebx
c00078ca:	75 d0                	jne    c000789c <sbrk+0x2c>
c00078cc:	0f 20 d8             	mov    eax,cr3
c00078cf:	0f 22 d8             	mov    cr3,eax
c00078d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00078d6:	83 c4 1c             	add    esp,0x1c
c00078d9:	5b                   	pop    ebx
c00078da:	5e                   	pop    esi
c00078db:	5f                   	pop    edi
c00078dc:	5d                   	pop    ebp
c00078dd:	c3                   	ret    
c00078de:	a1 08 f1 01 c0       	mov    eax,ds:0xc001f108
c00078e3:	eb f1                	jmp    c00078d6 <sbrk+0x66>
c00078e5:	83 ec 08             	sub    esp,0x8
c00078e8:	50                   	push   eax
c00078e9:	68 04 d1 01 c0       	push   0xc001d104
c00078ee:	e8 35 2e 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c00078f3:	83 c4 10             	add    esp,0x10
c00078f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00078fb:	eb d9                	jmp    c00078d6 <sbrk+0x66>
c00078fd:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007903:	eb 8f                	jmp    c0007894 <sbrk+0x24>

c0007905 <mmap>:
c0007905:	83 ec 18             	sub    esp,0x18
c0007908:	68 34 d1 01 c0       	push   0xc001d134
c000790d:	e8 65 89 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0007912:	b8 00 00 00 00       	mov    eax,0x0
c0007917:	83 c4 1c             	add    esp,0x1c
c000791a:	c3                   	ret    

c000791b <munmap>:
c000791b:	83 ec 18             	sub    esp,0x18
c000791e:	68 39 d1 01 c0       	push   0xc001d139
c0007923:	e8 4f 89 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0007928:	b8 00 00 00 00       	mov    eax,0x0
c000792d:	83 c4 1c             	add    esp,0x1c
c0007930:	c3                   	ret    

c0007931 <liballoc_lock()>:
c0007931:	fa                   	cli    
c0007932:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0007938:	b8 00 00 00 00       	mov    eax,0x0
c000793d:	c3                   	ret    

c000793e <liballoc_unlock()>:
c000793e:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0007943:	48                   	dec    eax
c0007944:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0007949:	75 01                	jne    c000794c <liballoc_unlock()+0xe>
c000794b:	fb                   	sti    
c000794c:	b8 00 00 00 00       	mov    eax,0x0
c0007951:	c3                   	ret    

c0007952 <liballoc_alloc(int)>:
c0007952:	83 ec 10             	sub    esp,0x10
c0007955:	6a 01                	push   0x1
c0007957:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000795b:	ff 35 70 04 02 c0    	push   DWORD PTR ds:0xc0020470
c0007961:	e8 08 23 00 00       	call   c0009c6e <VAS::allocatePages(int, int)>
c0007966:	83 c4 1c             	add    esp,0x1c
c0007969:	c3                   	ret    

c000796a <liballoc_free(void*, int)>:
c000796a:	83 ec 14             	sub    esp,0x14
c000796d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007971:	ff 35 70 04 02 c0    	push   DWORD PTR ds:0xc0020470
c0007977:	e8 ae 1f 00 00       	call   c000992a <VAS::freeAllocatedPages(unsigned long)>
c000797c:	b8 00 00 00 00       	mov    eax,0x0
c0007981:	83 c4 1c             	add    esp,0x1c
c0007984:	c3                   	ret    

c0007985 <realloc>:
c0007985:	83 ec 14             	sub    esp,0x14
c0007988:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000798c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007990:	e8 bc 9b ff ff       	call   c0001551 <dlrealloc>
c0007995:	83 c4 1c             	add    esp,0x1c
c0007998:	c3                   	ret    

c0007999 <malloc>:
c0007999:	83 ec 18             	sub    esp,0x18
c000799c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00079a0:	e8 6f 96 ff ff       	call   c0001014 <dlmalloc>
c00079a5:	83 c4 1c             	add    esp,0x1c
c00079a8:	c3                   	ret    

c00079a9 <free>:
c00079a9:	83 ec 18             	sub    esp,0x18
c00079ac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00079b0:	e8 04 93 ff ff       	call   c0000cb9 <dlfree>
c00079b5:	83 c4 1c             	add    esp,0x1c
c00079b8:	c3                   	ret    

c00079b9 <rfree>:
c00079b9:	83 ec 18             	sub    esp,0x18
c00079bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00079c0:	e8 f4 92 ff ff       	call   c0000cb9 <dlfree>
c00079c5:	83 c4 1c             	add    esp,0x1c
c00079c8:	c3                   	ret    

c00079c9 <calloc>:
c00079c9:	56                   	push   esi
c00079ca:	53                   	push   ebx
c00079cb:	83 ec 10             	sub    esp,0x10
c00079ce:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00079d2:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c00079d7:	53                   	push   ebx
c00079d8:	e8 bc ff ff ff       	call   c0007999 <malloc>
c00079dd:	89 c6                	mov    esi,eax
c00079df:	83 c4 0c             	add    esp,0xc
c00079e2:	53                   	push   ebx
c00079e3:	6a 00                	push   0x0
c00079e5:	50                   	push   eax
c00079e6:	e8 05 8b ff ff       	call   c00004f0 <memset>
c00079eb:	89 f0                	mov    eax,esi
c00079ed:	83 c4 14             	add    esp,0x14
c00079f0:	5b                   	pop    ebx
c00079f1:	5e                   	pop    esi
c00079f2:	c3                   	ret    

c00079f3 <Krnl::setBootMessage(char const*)>:
c00079f3:	57                   	push   edi
c00079f4:	56                   	push   esi
c00079f5:	53                   	push   ebx
c00079f6:	81 ec a4 00 00 00    	sub    esp,0xa4
c00079fc:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0007a03:	68 9e 00 00 00       	push   0x9e
c0007a08:	6a 00                	push   0x0
c0007a0a:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0007a0e:	56                   	push   esi
c0007a0f:	e8 dc 8a ff ff       	call   c00004f0 <memset>
c0007a14:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0007a17:	e8 44 8b ff ff       	call   c0000560 <strlen>
c0007a1c:	ba 50 00 00 00       	mov    edx,0x50
c0007a21:	83 c4 10             	add    esp,0x10
c0007a24:	29 c2                	sub    edx,eax
c0007a26:	66 0f be 03          	movsx  ax,BYTE PTR [ebx]
c0007a2a:	d1 ea                	shr    edx,1
c0007a2c:	84 c0                	test   al,al
c0007a2e:	74 19                	je     c0007a49 <Krnl::setBootMessage(char const*)+0x56>
c0007a30:	01 d2                	add    edx,edx
c0007a32:	43                   	inc    ebx
c0007a33:	01 f2                	add    edx,esi
c0007a35:	80 cc 0f             	or     ah,0xf
c0007a38:	83 c2 02             	add    edx,0x2
c0007a3b:	66 89 42 fe          	mov    WORD PTR [edx-0x2],ax
c0007a3f:	43                   	inc    ebx
c0007a40:	66 0f be 43 ff       	movsx  ax,BYTE PTR [ebx-0x1]
c0007a45:	84 c0                	test   al,al
c0007a47:	75 ec                	jne    c0007a35 <Krnl::setBootMessage(char const*)+0x42>
c0007a49:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0007a4e:	b9 9e 00 00 00       	mov    ecx,0x9e
c0007a53:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0007a55:	81 c4 a0 00 00 00    	add    esp,0xa0
c0007a5b:	5b                   	pop    ebx
c0007a5c:	5e                   	pop    esi
c0007a5d:	5f                   	pop    edi
c0007a5e:	c3                   	ret    

c0007a5f <kernel_main>:
c0007a5f:	55                   	push   ebp
c0007a60:	57                   	push   edi
c0007a61:	bf f9 03 00 00       	mov    edi,0x3f9
c0007a66:	56                   	push   esi
c0007a67:	89 fa                	mov    edx,edi
c0007a69:	53                   	push   ebx
c0007a6a:	31 f6                	xor    esi,esi
c0007a6c:	83 ec 38             	sub    esp,0x38
c0007a6f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007a74:	a3 9c 03 02 c0       	mov    ds:0xc002039c,eax
c0007a79:	89 f0                	mov    eax,esi
c0007a7b:	ee                   	out    dx,al
c0007a7c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007a81:	b0 80                	mov    al,0x80
c0007a83:	89 da                	mov    edx,ebx
c0007a85:	ee                   	out    dx,al
c0007a86:	b1 03                	mov    cl,0x3
c0007a88:	ba f8 03 00 00       	mov    edx,0x3f8
c0007a8d:	88 c8                	mov    al,cl
c0007a8f:	ee                   	out    dx,al
c0007a90:	89 f0                	mov    eax,esi
c0007a92:	89 fa                	mov    edx,edi
c0007a94:	ee                   	out    dx,al
c0007a95:	88 c8                	mov    al,cl
c0007a97:	89 da                	mov    edx,ebx
c0007a99:	ee                   	out    dx,al
c0007a9a:	b0 c7                	mov    al,0xc7
c0007a9c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007aa1:	ee                   	out    dx,al
c0007aa2:	b0 0b                	mov    al,0xb
c0007aa4:	ba fc 03 00 00       	mov    edx,0x3fc
c0007aa9:	ee                   	out    dx,al
c0007aaa:	68 40 d1 01 c0       	push   0xc001d140
c0007aaf:	e8 74 2c 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0007ab4:	0f be 05 20 f1 01 c0 	movsx  eax,BYTE PTR ds:0xc001f120
c0007abb:	83 c4 10             	add    esp,0x10
c0007abe:	84 c0                	test   al,al
c0007ac0:	74 5c                	je     c0007b1e <kernel_main+0xbf>
c0007ac2:	31 db                	xor    ebx,ebx
c0007ac4:	bd 0a 00 00 00       	mov    ebp,0xa
c0007ac9:	bf 05 00 00 00       	mov    edi,0x5
c0007ace:	31 f6                	xor    esi,esi
c0007ad0:	eb 14                	jmp    c0007ae6 <kernel_main+0x87>
c0007ad2:	47                   	inc    edi
c0007ad3:	bd 0a 00 00 00       	mov    ebp,0xa
c0007ad8:	31 f6                	xor    esi,esi
c0007ada:	43                   	inc    ebx
c0007adb:	0f be 83 20 f1 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0ee0]
c0007ae2:	84 c0                	test   al,al
c0007ae4:	74 38                	je     c0007b1e <kernel_main+0xbf>
c0007ae6:	80 be 56 f1 01 c0 db 	cmp    BYTE PTR [esi-0x3ffe0eaa],0xdb
c0007aed:	0f 84 97 00 00 00    	je     c0007b8a <kernel_main+0x12b>
c0007af3:	3c 0d                	cmp    al,0xd
c0007af5:	74 e3                	je     c0007ada <kernel_main+0x7b>
c0007af7:	3c 0a                	cmp    al,0xa
c0007af9:	74 d7                	je     c0007ad2 <kernel_main+0x73>
c0007afb:	83 ec 0c             	sub    esp,0xc
c0007afe:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c0007b02:	57                   	push   edi
c0007b03:	43                   	inc    ebx
c0007b04:	52                   	push   edx
c0007b05:	46                   	inc    esi
c0007b06:	6a 00                	push   0x0
c0007b08:	6a 0e                	push   0xe
c0007b0a:	50                   	push   eax
c0007b0b:	e8 c4 e4 00 00       	call   c0015fd4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0007b10:	83 c4 20             	add    esp,0x20
c0007b13:	0f be 83 20 f1 01 c0 	movsx  eax,BYTE PTR [ebx-0x3ffe0ee0]
c0007b1a:	84 c0                	test   al,al
c0007b1c:	75 c8                	jne    c0007ae6 <kernel_main+0x87>
c0007b1e:	83 ec 0c             	sub    esp,0xc
c0007b21:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b26:	05 ff 0f 00 00       	add    eax,0xfff
c0007b2b:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b30:	50                   	push   eax
c0007b31:	e8 82 03 00 00       	call   c0007eb8 <Phys::physicalMemorySetup(unsigned int)>
c0007b36:	e8 59 1b 00 00       	call   c0009694 <Virt::virtualMemorySetup()>
c0007b3b:	58                   	pop    eax
c0007b3c:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b40:	53                   	push   ebx
c0007b41:	e8 0a 1c 00 00       	call   c0009750 <VAS::VAS()>
c0007b46:	89 1d 70 04 02 c0    	mov    DWORD PTR ds:0xc0020470,ebx
c0007b4c:	e8 cf 84 ff ff       	call   c0000020 <callGlobalConstructors>
c0007b51:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007b58:	e8 3c fe ff ff       	call   c0007999 <malloc>
c0007b5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b60:	89 c6                	mov    esi,eax
c0007b62:	e8 af f1 ff ff       	call   c0006d16 <Computer::Computer()>
c0007b67:	6a 00                	push   0x0
c0007b69:	89 35 84 03 02 c0    	mov    DWORD PTR ds:0xc0020384,esi
c0007b6f:	6a 00                	push   0x0
c0007b71:	6a 00                	push   0x0
c0007b73:	56                   	push   esi
c0007b74:	e8 43 f5 ff ff       	call   c00070bc <Computer::open(int, int, void*)>
c0007b79:	83 c4 14             	add    esp,0x14
c0007b7c:	53                   	push   ebx
c0007b7d:	e8 84 1e 00 00       	call   c0009a06 <VAS::~VAS()>
c0007b82:	83 c4 3c             	add    esp,0x3c
c0007b85:	5b                   	pop    ebx
c0007b86:	5e                   	pop    esi
c0007b87:	5f                   	pop    edi
c0007b88:	5d                   	pop    ebp
c0007b89:	c3                   	ret    
c0007b8a:	31 d2                	xor    edx,edx
c0007b8c:	8a 96 55 f1 01 c0    	mov    dl,BYTE PTR [esi-0x3ffe0eab]
c0007b92:	83 e2 fe             	and    edx,0xfffffffe
c0007b95:	81 fa ba 00 00 00    	cmp    edx,0xba
c0007b9b:	0f 85 52 ff ff ff    	jne    c0007af3 <kernel_main+0x94>
c0007ba1:	45                   	inc    ebp
c0007ba2:	e9 4c ff ff ff       	jmp    c0007af3 <kernel_main+0x94>

c0007ba7 <Phys::allocateDMA(unsigned long)>:
c0007ba7:	55                   	push   ebp
c0007ba8:	31 ed                	xor    ebp,ebp
c0007baa:	57                   	push   edi
c0007bab:	56                   	push   esi
c0007bac:	53                   	push   ebx
c0007bad:	31 db                	xor    ebx,ebx
c0007baf:	83 ec 1c             	sub    esp,0x1c
c0007bb2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007bb6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bbe:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bc4:	31 c0                	xor    eax,eax
c0007bc6:	c1 ef 0c             	shr    edi,0xc
c0007bc9:	eb 19                	jmp    c0007be4 <Phys::allocateDMA(unsigned long)+0x3d>
c0007bcb:	85 c0                	test   eax,eax
c0007bcd:	75 06                	jne    c0007bd5 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bcf:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007bd3:	89 dd                	mov    ebp,ebx
c0007bd5:	8d 70 01             	lea    esi,[eax+0x1]
c0007bd8:	39 f7                	cmp    edi,esi
c0007bda:	74 33                	je     c0007c0f <Phys::allocateDMA(unsigned long)+0x68>
c0007bdc:	89 f0                	mov    eax,esi
c0007bde:	43                   	inc    ebx
c0007bdf:	83 fb 0f             	cmp    ebx,0xf
c0007be2:	7f 11                	jg     c0007bf5 <Phys::allocateDMA(unsigned long)+0x4e>
c0007be4:	80 bb b8 03 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffdfc48],0x0
c0007beb:	74 de                	je     c0007bcb <Phys::allocateDMA(unsigned long)+0x24>
c0007bed:	31 c0                	xor    eax,eax
c0007bef:	43                   	inc    ebx
c0007bf0:	83 fb 0f             	cmp    ebx,0xf
c0007bf3:	7e ef                	jle    c0007be4 <Phys::allocateDMA(unsigned long)+0x3d>
c0007bf5:	83 ec 0c             	sub    esp,0xc
c0007bf8:	68 58 d1 01 c0       	push   0xc001d158
c0007bfd:	e8 75 86 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0007c02:	83 c4 10             	add    esp,0x10
c0007c05:	31 c0                	xor    eax,eax
c0007c07:	83 c4 1c             	add    esp,0x1c
c0007c0a:	5b                   	pop    ebx
c0007c0b:	5e                   	pop    esi
c0007c0c:	5f                   	pop    edi
c0007c0d:	5d                   	pop    ebp
c0007c0e:	c3                   	ret    
c0007c0f:	89 e9                	mov    ecx,ebp
c0007c11:	c1 f9 04             	sar    ecx,0x4
c0007c14:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c18:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c1c:	89 ca                	mov    edx,ecx
c0007c1e:	4a                   	dec    edx
c0007c1f:	79 03                	jns    c0007c24 <Phys::allocateDMA(unsigned long)+0x7d>
c0007c21:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c24:	c1 fa 04             	sar    edx,0x4
c0007c27:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c2b:	74 08                	je     c0007c35 <Phys::allocateDMA(unsigned long)+0x8e>
c0007c2d:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c31:	31 c0                	xor    eax,eax
c0007c33:	eb ba                	jmp    c0007bef <Phys::allocateDMA(unsigned long)+0x48>
c0007c35:	85 f6                	test   esi,esi
c0007c37:	74 15                	je     c0007c4e <Phys::allocateDMA(unsigned long)+0xa7>
c0007c39:	8d 95 b8 03 02 c0    	lea    edx,[ebp-0x3ffdfc48]
c0007c3f:	8d 84 05 b9 03 02 c0 	lea    eax,[ebp+eax*1-0x3ffdfc47]
c0007c46:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c49:	42                   	inc    edx
c0007c4a:	39 d0                	cmp    eax,edx
c0007c4c:	75 f8                	jne    c0007c46 <Phys::allocateDMA(unsigned long)+0x9f>
c0007c4e:	01 3d b0 03 02 c0    	add    DWORD PTR ds:0xc00203b0,edi
c0007c54:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007c58:	85 c0                	test   eax,eax
c0007c5a:	74 17                	je     c0007c73 <Phys::allocateDMA(unsigned long)+0xcc>
c0007c5c:	83 ec 0c             	sub    esp,0xc
c0007c5f:	68 58 d1 01 c0       	push   0xc001d158
c0007c64:	e8 0e 86 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0007c69:	83 c4 10             	add    esp,0x10
c0007c6c:	89 f0                	mov    eax,esi
c0007c6e:	e9 6b ff ff ff       	jmp    c0007bde <Phys::allocateDMA(unsigned long)+0x37>
c0007c73:	c1 e5 0c             	shl    ebp,0xc
c0007c76:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007c7c:	eb 89                	jmp    c0007c07 <Phys::allocateDMA(unsigned long)+0x60>

c0007c7e <Phys::freeDMA(unsigned long, unsigned long)>:
c0007c7e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007c82:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007c8c:	c1 ea 0c             	shr    edx,0xc
c0007c8f:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007c94:	29 15 b0 03 02 c0    	sub    DWORD PTR ds:0xc00203b0,edx
c0007c9a:	c1 e8 0c             	shr    eax,0xc
c0007c9d:	85 d2                	test   edx,edx
c0007c9f:	74 0f                	je     c0007cb0 <Phys::freeDMA(unsigned long, unsigned long)+0x32>
c0007ca1:	05 b8 03 02 c0       	add    eax,0xc00203b8
c0007ca6:	01 c2                	add    edx,eax
c0007ca8:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cab:	40                   	inc    eax
c0007cac:	39 d0                	cmp    eax,edx
c0007cae:	75 f8                	jne    c0007ca8 <Phys::freeDMA(unsigned long, unsigned long)+0x2a>
c0007cb0:	c3                   	ret    

c0007cb1 <Phys::setPageState(unsigned long, bool)>:
c0007cb1:	56                   	push   esi
c0007cb2:	ba 01 00 00 00       	mov    edx,0x1
c0007cb7:	53                   	push   ebx
c0007cb8:	8b 35 64 f2 01 c0    	mov    esi,DWORD PTR ds:0xc001f264
c0007cbe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007cc2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007cc6:	89 c8                	mov    eax,ecx
c0007cc8:	83 e1 07             	and    ecx,0x7
c0007ccb:	c1 e8 03             	shr    eax,0x3
c0007cce:	d3 e3                	shl    ebx,cl
c0007cd0:	01 c6                	add    esi,eax
c0007cd2:	d3 e2                	shl    edx,cl
c0007cd4:	f7 d2                	not    edx
c0007cd6:	20 16                	and    BYTE PTR [esi],dl
c0007cd8:	03 05 64 f2 01 c0    	add    eax,DWORD PTR ds:0xc001f264
c0007cde:	08 18                	or     BYTE PTR [eax],bl
c0007ce0:	5b                   	pop    ebx
c0007ce1:	5e                   	pop    esi
c0007ce2:	c3                   	ret    

c0007ce3 <Phys::getPageState(unsigned long)>:
c0007ce3:	53                   	push   ebx
c0007ce4:	8b 15 64 f2 01 c0    	mov    edx,DWORD PTR ds:0xc001f264
c0007cea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0007cee:	31 db                	xor    ebx,ebx
c0007cf0:	89 c8                	mov    eax,ecx
c0007cf2:	83 e1 07             	and    ecx,0x7
c0007cf5:	c1 e8 03             	shr    eax,0x3
c0007cf8:	8a 1c 02             	mov    bl,BYTE PTR [edx+eax*1]
c0007cfb:	89 d8                	mov    eax,ebx
c0007cfd:	5b                   	pop    ebx
c0007cfe:	d3 f8                	sar    eax,cl
c0007d00:	83 e0 01             	and    eax,0x1
c0007d03:	c3                   	ret    

c0007d04 <Phys::freePage(unsigned long)>:
c0007d04:	53                   	push   ebx
c0007d05:	83 ec 08             	sub    esp,0x8
c0007d08:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d0c:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d12:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d18:	76 3a                	jbe    c0007d54 <Phys::freePage(unsigned long)+0x50>
c0007d1a:	c1 e8 0c             	shr    eax,0xc
c0007d1d:	50                   	push   eax
c0007d1e:	89 c3                	mov    ebx,eax
c0007d20:	e8 be ff ff ff       	call   c0007ce3 <Phys::getPageState(unsigned long)>
c0007d25:	5a                   	pop    edx
c0007d26:	84 c0                	test   al,al
c0007d28:	74 19                	je     c0007d43 <Phys::freePage(unsigned long)+0x3f>
c0007d2a:	83 ec 08             	sub    esp,0x8
c0007d2d:	ff 0d b0 03 02 c0    	dec    DWORD PTR ds:0xc00203b0
c0007d33:	6a 00                	push   0x0
c0007d35:	53                   	push   ebx
c0007d36:	e8 76 ff ff ff       	call   c0007cb1 <Phys::setPageState(unsigned long, bool)>
c0007d3b:	83 c4 10             	add    esp,0x10
c0007d3e:	83 c4 08             	add    esp,0x8
c0007d41:	5b                   	pop    ebx
c0007d42:	c3                   	ret    
c0007d43:	c7 44 24 10 fd d1 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d1fd
c0007d4b:	83 c4 08             	add    esp,0x8
c0007d4e:	5b                   	pop    ebx
c0007d4f:	e9 23 85 00 00       	jmp    c0010277 <Krnl::panic(char const*)>
c0007d54:	68 00 10 00 00       	push   0x1000
c0007d59:	50                   	push   eax
c0007d5a:	e8 1f ff ff ff       	call   c0007c7e <Phys::freeDMA(unsigned long, unsigned long)>
c0007d5f:	59                   	pop    ecx
c0007d60:	5b                   	pop    ebx
c0007d61:	83 c4 08             	add    esp,0x8
c0007d64:	5b                   	pop    ebx
c0007d65:	c3                   	ret    

c0007d66 <Phys::allocatePage()>:
c0007d66:	56                   	push   esi
c0007d67:	53                   	push   ebx
c0007d68:	83 ec 14             	sub    esp,0x14
c0007d6b:	8b 35 a4 03 02 c0    	mov    esi,DWORD PTR ds:0xc00203a4
c0007d71:	89 f3                	mov    ebx,esi
c0007d73:	eb 0a                	jmp    c0007d7f <Phys::allocatePage()+0x19>
c0007d75:	89 1d a4 03 02 c0    	mov    DWORD PTR ds:0xc00203a4,ebx
c0007d7b:	39 de                	cmp    esi,ebx
c0007d7d:	74 24                	je     c0007da3 <Phys::allocatePage()+0x3d>
c0007d7f:	53                   	push   ebx
c0007d80:	e8 5e ff ff ff       	call   c0007ce3 <Phys::getPageState(unsigned long)>
c0007d85:	5a                   	pop    edx
c0007d86:	84 c0                	test   al,al
c0007d88:	74 5f                	je     c0007de9 <Phys::allocatePage()+0x83>
c0007d8a:	43                   	inc    ebx
c0007d8b:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007d91:	75 e2                	jne    c0007d75 <Phys::allocatePage()+0xf>
c0007d93:	31 db                	xor    ebx,ebx
c0007d95:	c7 05 a4 03 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00203a4,0x0
c0007d9f:	39 de                	cmp    esi,ebx
c0007da1:	75 dc                	jne    c0007d7f <Phys::allocatePage()+0x19>
c0007da3:	83 ec 0c             	sub    esp,0xc
c0007da6:	80 35 c8 03 02 c0 01 	xor    BYTE PTR ds:0xc00203c8,0x1
c0007dad:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007db2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007db5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007dbb:	50                   	push   eax
c0007dbc:	e8 87 26 00 00       	call   c000a448 <VAS::scanForEviction()>
c0007dc1:	83 c4 10             	add    esp,0x10
c0007dc4:	85 c0                	test   eax,eax
c0007dc6:	75 3f                	jne    c0007e07 <Phys::allocatePage()+0xa1>
c0007dc8:	83 ec 0c             	sub    esp,0xc
c0007dcb:	68 80 d1 01 c0       	push   0xc001d180
c0007dd0:	e8 a2 84 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0007dd5:	83 c4 10             	add    esp,0x10
c0007dd8:	8b 1d a4 03 02 c0    	mov    ebx,DWORD PTR ds:0xc00203a4
c0007dde:	53                   	push   ebx
c0007ddf:	e8 ff fe ff ff       	call   c0007ce3 <Phys::getPageState(unsigned long)>
c0007de4:	5a                   	pop    edx
c0007de5:	84 c0                	test   al,al
c0007de7:	75 a1                	jne    c0007d8a <Phys::allocatePage()+0x24>
c0007de9:	6a 01                	push   0x1
c0007deb:	53                   	push   ebx
c0007dec:	e8 c0 fe ff ff       	call   c0007cb1 <Phys::setPageState(unsigned long, bool)>
c0007df1:	a1 a4 03 02 c0       	mov    eax,ds:0xc00203a4
c0007df6:	5a                   	pop    edx
c0007df7:	ff 05 b0 03 02 c0    	inc    DWORD PTR ds:0xc00203b0
c0007dfd:	c1 e0 0c             	shl    eax,0xc
c0007e00:	59                   	pop    ecx
c0007e01:	83 c4 14             	add    esp,0x14
c0007e04:	5b                   	pop    ebx
c0007e05:	5e                   	pop    esi
c0007e06:	c3                   	ret    
c0007e07:	83 ec 08             	sub    esp,0x8
c0007e0a:	89 c2                	mov    edx,eax
c0007e0c:	6a 01                	push   0x1
c0007e0e:	c1 ea 0c             	shr    edx,0xc
c0007e11:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e15:	52                   	push   edx
c0007e16:	e8 96 fe ff ff       	call   c0007cb1 <Phys::setPageState(unsigned long, bool)>
c0007e1b:	83 c4 10             	add    esp,0x10
c0007e1e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e22:	eb dd                	jmp    c0007e01 <Phys::allocatePage()+0x9b>

c0007e24 <Phys::allocateContiguousPages(int)>:
c0007e24:	57                   	push   edi
c0007e25:	56                   	push   esi
c0007e26:	53                   	push   ebx
c0007e27:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e2b:	fa                   	cli    
c0007e2c:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0007e32:	31 db                	xor    ebx,ebx
c0007e34:	85 db                	test   ebx,ebx
c0007e36:	75 11                	jne    c0007e49 <Phys::allocateContiguousPages(int)+0x25>
c0007e38:	e8 29 ff ff ff       	call   c0007d66 <Phys::allocatePage()>
c0007e3d:	83 fe 01             	cmp    esi,0x1
c0007e40:	89 c7                	mov    edi,eax
c0007e42:	74 21                	je     c0007e65 <Phys::allocateContiguousPages(int)+0x41>
c0007e44:	bb 01 00 00 00       	mov    ebx,0x1
c0007e49:	e8 18 ff ff ff       	call   c0007d66 <Phys::allocatePage()>
c0007e4e:	89 da                	mov    edx,ebx
c0007e50:	c1 e2 0c             	shl    edx,0xc
c0007e53:	01 fa                	add    edx,edi
c0007e55:	39 c2                	cmp    edx,eax
c0007e57:	74 20                	je     c0007e79 <Phys::allocateContiguousPages(int)+0x55>
c0007e59:	bb 01 00 00 00       	mov    ebx,0x1
c0007e5e:	89 c7                	mov    edi,eax
c0007e60:	83 fe 01             	cmp    esi,0x1
c0007e63:	75 e4                	jne    c0007e49 <Phys::allocateContiguousPages(int)+0x25>
c0007e65:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0007e6a:	48                   	dec    eax
c0007e6b:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0007e70:	75 01                	jne    c0007e73 <Phys::allocateContiguousPages(int)+0x4f>
c0007e72:	fb                   	sti    
c0007e73:	89 f8                	mov    eax,edi
c0007e75:	5b                   	pop    ebx
c0007e76:	5e                   	pop    esi
c0007e77:	5f                   	pop    edi
c0007e78:	c3                   	ret    
c0007e79:	43                   	inc    ebx
c0007e7a:	39 f3                	cmp    ebx,esi
c0007e7c:	75 b6                	jne    c0007e34 <Phys::allocateContiguousPages(int)+0x10>
c0007e7e:	eb e5                	jmp    c0007e65 <Phys::allocateContiguousPages(int)+0x41>

c0007e80 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007e80:	56                   	push   esi
c0007e81:	53                   	push   ebx
c0007e82:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007e86:	39 1d a8 03 02 c0    	cmp    DWORD PTR ds:0xc00203a8,ebx
c0007e8c:	73 06                	jae    c0007e94 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007e8e:	89 1d a8 03 02 c0    	mov    DWORD PTR ds:0xc00203a8,ebx
c0007e94:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e98:	c1 eb 0c             	shr    ebx,0xc
c0007e9b:	c1 e8 0c             	shr    eax,0xc
c0007e9e:	39 d8                	cmp    eax,ebx
c0007ea0:	73 13                	jae    c0007eb5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007ea2:	6a 00                	push   0x0
c0007ea4:	8d 70 01             	lea    esi,[eax+0x1]
c0007ea7:	50                   	push   eax
c0007ea8:	e8 04 fe ff ff       	call   c0007cb1 <Phys::setPageState(unsigned long, bool)>
c0007ead:	5a                   	pop    edx
c0007eae:	89 f0                	mov    eax,esi
c0007eb0:	59                   	pop    ecx
c0007eb1:	39 f3                	cmp    ebx,esi
c0007eb3:	75 ed                	jne    c0007ea2 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007eb5:	5b                   	pop    ebx
c0007eb6:	5e                   	pop    esi
c0007eb7:	c3                   	ret    

c0007eb8 <Phys::physicalMemorySetup(unsigned int)>:
c0007eb8:	55                   	push   ebp
c0007eb9:	57                   	push   edi
c0007eba:	56                   	push   esi
c0007ebb:	53                   	push   ebx
c0007ebc:	31 db                	xor    ebx,ebx
c0007ebe:	83 ec 40             	sub    esp,0x40
c0007ec1:	6a 10                	push   0x10
c0007ec3:	6a 00                	push   0x0
c0007ec5:	68 b8 03 02 c0       	push   0xc00203b8
c0007eca:	e8 21 86 ff ff       	call   c00004f0 <memset>
c0007ecf:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007ed3:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007ed8:	05 00 10 00 00       	add    eax,0x1000
c0007edd:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007ee1:	5a                   	pop    edx
c0007ee2:	59                   	pop    ecx
c0007ee3:	50                   	push   eax
c0007ee4:	68 13 d2 01 c0       	push   0xc001d213
c0007ee9:	e8 3a 28 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0007eee:	83 c4 10             	add    esp,0x10
c0007ef1:	83 ec 08             	sub    esp,0x8
c0007ef4:	6a 01                	push   0x1
c0007ef6:	53                   	push   ebx
c0007ef7:	43                   	inc    ebx
c0007ef8:	e8 b4 fd ff ff       	call   c0007cb1 <Phys::setPageState(unsigned long, bool)>
c0007efd:	83 c4 10             	add    esp,0x10
c0007f00:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f06:	75 e9                	jne    c0007ef1 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f08:	66 a1 13 05 00 c2    	mov    ax,ds:0xc2000513
c0007f0e:	66 85 c0             	test   ax,ax
c0007f11:	0f 84 97 01 00 00    	je     c00080ae <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c0007f17:	89 c7                	mov    edi,eax
c0007f19:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007f21:	81 e7 ff ff 00 00    	and    edi,0xffff
c0007f27:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007f2c:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c0007f30:	eb 15                	jmp    c0007f47 <Phys::physicalMemorySetup(unsigned int)+0x8f>
c0007f32:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0007f36:	83 c3 18             	add    ebx,0x18
c0007f39:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007f3d:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007f41:	0f 84 77 01 00 00    	je     c00080be <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007f47:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007f4a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007f4d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007f50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007f54:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007f58:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007f5a:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007f5d:	01 f0                	add    eax,esi
c0007f5f:	55                   	push   ebp
c0007f60:	11 fa                	adc    edx,edi
c0007f62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007f66:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007f6a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f6e:	50                   	push   eax
c0007f6f:	56                   	push   esi
c0007f70:	68 b0 d1 01 c0       	push   0xc001d1b0
c0007f75:	e8 ae 27 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0007f7a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0007f7e:	83 c4 10             	add    esp,0x10
c0007f81:	09 f8                	or     eax,edi
c0007f83:	0f 85 35 01 00 00    	jne    c00080be <Phys::physicalMemorySetup(unsigned int)+0x206>
c0007f89:	4d                   	dec    ebp
c0007f8a:	75 a6                	jne    c0007f32 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0007f8c:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0007f90:	ba 00 00 08 00       	mov    edx,0x80000
c0007f95:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0007f99:	39 f2                	cmp    edx,esi
c0007f9b:	89 c1                	mov    ecx,eax
c0007f9d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fa5:	19 f9                	sbb    ecx,edi
c0007fa7:	0f 82 a7 00 00 00    	jb     c0008054 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007fad:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0007fb1:	89 c1                	mov    ecx,eax
c0007fb3:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0007fb7:	0f 83 97 00 00 00    	jae    c0008054 <Phys::physicalMemorySetup(unsigned int)+0x19c>
c0007fbd:	ba 00 00 0a 00       	mov    edx,0xa0000
c0007fc2:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fc6:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007fca:	39 fa                	cmp    edx,edi
c0007fcc:	19 e8                	sbb    eax,ebp
c0007fce:	0f 82 9a 01 00 00    	jb     c000816e <Phys::physicalMemorySetup(unsigned int)+0x2b6>
c0007fd4:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fd8:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0007fdc:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0007fe2:	ba ff 1f 00 00       	mov    edx,0x1fff
c0007fe7:	83 d5 ff             	adc    ebp,0xffffffff
c0007fea:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0007fee:	31 c0                	xor    eax,eax
c0007ff0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0007ff4:	39 fa                	cmp    edx,edi
c0007ff6:	89 c1                	mov    ecx,eax
c0007ff8:	19 e9                	sbb    ecx,ebp
c0007ffa:	0f 83 32 ff ff ff    	jae    c0007f32 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008000:	be 00 00 08 00       	mov    esi,0x80000
c0008005:	51                   	push   ecx
c0008006:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000800a:	57                   	push   edi
c000800b:	56                   	push   esi
c000800c:	68 d4 d1 01 c0       	push   0xc001d1d4
c0008011:	e8 12 27 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0008016:	5d                   	pop    ebp
c0008017:	58                   	pop    eax
c0008018:	57                   	push   edi
c0008019:	56                   	push   esi
c000801a:	e8 61 fe ff ff       	call   c0007e80 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c000801f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0008023:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0008027:	83 c4 0c             	add    esp,0xc
c000802a:	0f ac d0 0c          	shrd   eax,edx,0xc
c000802e:	03 05 b4 03 02 c0    	add    eax,DWORD PTR ds:0xc00203b4
c0008034:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000803b:	a3 b4 03 02 c0       	mov    ds:0xc00203b4,eax
c0008040:	52                   	push   edx
c0008041:	50                   	push   eax
c0008042:	68 39 d2 01 c0       	push   0xc001d239
c0008047:	e8 dc 26 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000804c:	83 c4 10             	add    esp,0x10
c000804f:	e9 de fe ff ff       	jmp    c0007f32 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c0008054:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0008058:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000805c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008060:	39 ea                	cmp    edx,ebp
c0008062:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0008066:	0f 82 c6 fe ff ff    	jb     c0007f32 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000806c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008071:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0008075:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0008079:	0f 83 b3 fe ff ff    	jae    c0007f32 <Phys::physicalMemorySetup(unsigned int)+0x7a>
c000807f:	39 ee                	cmp    esi,ebp
c0008081:	89 f8                	mov    eax,edi
c0008083:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0008087:	0f 83 78 ff ff ff    	jae    c0008005 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c000808d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008091:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008095:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0008099:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000809d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c00080a1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00080a5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00080a9:	e9 57 ff ff ff       	jmp    c0008005 <Phys::physicalMemorySetup(unsigned int)+0x14d>
c00080ae:	83 ec 0c             	sub    esp,0xc
c00080b1:	68 2b d2 01 c0       	push   0xc001d22b
c00080b6:	e8 bc 81 00 00       	call   c0010277 <Krnl::panic(char const*)>
c00080bb:	83 c4 10             	add    esp,0x10
c00080be:	83 ec 08             	sub    esp,0x8
c00080c1:	bb 60 00 00 00       	mov    ebx,0x60
c00080c6:	6a 00                	push   0x0
c00080c8:	6a 06                	push   0x6
c00080ca:	e8 e2 fb ff ff       	call   c0007cb1 <Phys::setPageState(unsigned long, bool)>
c00080cf:	58                   	pop    eax
c00080d0:	5a                   	pop    edx
c00080d1:	6a 00                	push   0x0
c00080d3:	6a 07                	push   0x7
c00080d5:	e8 d7 fb ff ff       	call   c0007cb1 <Phys::setPageState(unsigned long, bool)>
c00080da:	83 05 b4 03 02 c0 02 	add    DWORD PTR ds:0xc00203b4,0x2
c00080e1:	83 c4 10             	add    esp,0x10
c00080e4:	83 ec 08             	sub    esp,0x8
c00080e7:	6a 00                	push   0x0
c00080e9:	53                   	push   ebx
c00080ea:	43                   	inc    ebx
c00080eb:	e8 c1 fb ff ff       	call   c0007cb1 <Phys::setPageState(unsigned long, bool)>
c00080f0:	83 c4 10             	add    esp,0x10
c00080f3:	81 fb 80 00 00 00    	cmp    ebx,0x80
c00080f9:	75 e9                	jne    c00080e4 <Phys::physicalMemorySetup(unsigned int)+0x22c>
c00080fb:	a1 b4 03 02 c0       	mov    eax,ds:0xc00203b4
c0008100:	bb 40 01 00 00       	mov    ebx,0x140
c0008105:	83 c0 20             	add    eax,0x20
c0008108:	a3 b4 03 02 c0       	mov    ds:0xc00203b4,eax
c000810d:	eb 22                	jmp    c0008131 <Phys::physicalMemorySetup(unsigned int)+0x279>
c000810f:	83 ec 08             	sub    esp,0x8
c0008112:	6a 00                	push   0x0
c0008114:	53                   	push   ebx
c0008115:	43                   	inc    ebx
c0008116:	e8 96 fb ff ff       	call   c0007cb1 <Phys::setPageState(unsigned long, bool)>
c000811b:	a1 b4 03 02 c0       	mov    eax,ds:0xc00203b4
c0008120:	83 c4 10             	add    esp,0x10
c0008123:	40                   	inc    eax
c0008124:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c000812a:	a3 b4 03 02 c0       	mov    ds:0xc00203b4,eax
c000812f:	74 07                	je     c0008138 <Phys::physicalMemorySetup(unsigned int)+0x280>
c0008131:	3d ff 03 00 00       	cmp    eax,0x3ff
c0008136:	7e d7                	jle    c000810f <Phys::physicalMemorySetup(unsigned int)+0x257>
c0008138:	bb d0 01 00 00       	mov    ebx,0x1d0
c000813d:	3d ff 07 00 00       	cmp    eax,0x7ff
c0008142:	7f 22                	jg     c0008166 <Phys::physicalMemorySetup(unsigned int)+0x2ae>
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	6a 00                	push   0x0
c0008149:	53                   	push   ebx
c000814a:	43                   	inc    ebx
c000814b:	e8 61 fb ff ff       	call   c0007cb1 <Phys::setPageState(unsigned long, bool)>
c0008150:	a1 b4 03 02 c0       	mov    eax,ds:0xc00203b4
c0008155:	83 c4 10             	add    esp,0x10
c0008158:	40                   	inc    eax
c0008159:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c000815f:	a3 b4 03 02 c0       	mov    ds:0xc00203b4,eax
c0008164:	75 d7                	jne    c000813d <Phys::physicalMemorySetup(unsigned int)+0x285>
c0008166:	83 c4 3c             	add    esp,0x3c
c0008169:	5b                   	pop    ebx
c000816a:	5e                   	pop    esi
c000816b:	5f                   	pop    edi
c000816c:	5d                   	pop    ebp
c000816d:	c3                   	ret    
c000816e:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c0008176:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000817e:	e9 51 fe ff ff       	jmp    c0007fd4 <Phys::physicalMemorySetup(unsigned int)+0x11c>
c0008183:	90                   	nop

c0008184 <Pipe::isAtty()>:
c0008184:	31 c0                	xor    eax,eax
c0008186:	c3                   	ret    
c0008187:	90                   	nop

c0008188 <Pipe::~Pipe()>:
c0008188:	83 ec 0c             	sub    esp,0xc
c000818b:	ba 98 d2 01 c0       	mov    edx,0xc001d298
c0008190:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008194:	89 10                	mov    DWORD PTR [eax],edx
c0008196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000819a:	83 ec 0c             	sub    esp,0xc
c000819d:	50                   	push   eax
c000819e:	e8 d1 10 00 00       	call   c0009274 <UnixFile::~UnixFile()>
c00081a3:	83 c4 10             	add    esp,0x10
c00081a6:	90                   	nop
c00081a7:	83 c4 0c             	add    esp,0xc
c00081aa:	c3                   	ret    
c00081ab:	90                   	nop

c00081ac <Pipe::~Pipe()>:
c00081ac:	83 ec 0c             	sub    esp,0xc
c00081af:	83 ec 0c             	sub    esp,0xc
c00081b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081b6:	e8 cd ff ff ff       	call   c0008188 <Pipe::~Pipe()>
c00081bb:	83 c4 10             	add    esp,0x10
c00081be:	83 ec 08             	sub    esp,0x8
c00081c1:	6a 20                	push   0x20
c00081c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00081c7:	e8 66 24 00 00       	call   c000a632 <operator delete(void*, unsigned long)>
c00081cc:	83 c4 10             	add    esp,0x10
c00081cf:	83 c4 0c             	add    esp,0xc
c00081d2:	c3                   	ret    
c00081d3:	90                   	nop

c00081d4 <Pipe::write(unsigned long long, void*, int*)>:
c00081d4:	55                   	push   ebp
c00081d5:	57                   	push   edi
c00081d6:	56                   	push   esi
c00081d7:	53                   	push   ebx
c00081d8:	83 ec 1c             	sub    esp,0x1c
c00081db:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00081df:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00081e3:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00081e6:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00081ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00081ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00081f1:	89 d8                	mov    eax,ebx
c00081f3:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00081f6:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00081fa:	89 d6                	mov    esi,edx
c00081fc:	89 d7                	mov    edi,edx
c00081fe:	c1 ff 1f             	sar    edi,0x1f
c0008201:	03 34 24             	add    esi,DWORD PTR [esp]
c0008204:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0008208:	c1 f8 1f             	sar    eax,0x1f
c000820b:	39 f3                	cmp    ebx,esi
c000820d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008211:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008215:	19 f8                	sbb    eax,edi
c0008217:	b8 01 00 00 00       	mov    eax,0x1
c000821c:	72 6e                	jb     c000828c <Pipe::write(unsigned long long, void*, int*)+0xb8>
c000821e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0008221:	01 d0                	add    eax,edx
c0008223:	99                   	cdq    
c0008224:	f7 fb                	idiv   ebx
c0008226:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000822a:	29 d3                	sub    ebx,edx
c000822c:	89 d7                	mov    edi,edx
c000822e:	89 de                	mov    esi,ebx
c0008230:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008233:	c1 fb 1f             	sar    ebx,0x1f
c0008236:	39 f2                	cmp    edx,esi
c0008238:	19 d8                	sbb    eax,ebx
c000823a:	b8 00 00 00 00       	mov    eax,0x0
c000823f:	72 04                	jb     c0008245 <Pipe::write(unsigned long long, void*, int*)+0x71>
c0008241:	89 d0                	mov    eax,edx
c0008243:	29 f0                	sub    eax,esi
c0008245:	89 d3                	mov    ebx,edx
c0008247:	29 c3                	sub    ebx,eax
c0008249:	74 0b                	je     c0008256 <Pipe::write(unsigned long long, void*, int*)+0x82>
c000824b:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c000824e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0008252:	89 d9                	mov    ecx,ebx
c0008254:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008256:	85 c0                	test   eax,eax
c0008258:	74 0d                	je     c0008267 <Pipe::write(unsigned long long, void*, int*)+0x93>
c000825a:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000825e:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0008261:	89 de                	mov    esi,ebx
c0008263:	89 c1                	mov    ecx,eax
c0008265:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008267:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c000826a:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000826f:	75 10                	jne    c0008281 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008271:	83 ec 0c             	sub    esp,0xc
c0008274:	68 55 d2 01 c0       	push   0xc001d255
c0008279:	e8 f9 7f 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000827e:	83 c4 10             	add    esp,0x10
c0008281:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008285:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008288:	89 08                	mov    DWORD PTR [eax],ecx
c000828a:	31 c0                	xor    eax,eax
c000828c:	83 c4 1c             	add    esp,0x1c
c000828f:	5b                   	pop    ebx
c0008290:	5e                   	pop    esi
c0008291:	5f                   	pop    edi
c0008292:	5d                   	pop    ebp
c0008293:	c3                   	ret    

c0008294 <Pipe::read(unsigned long long, void*, int*)>:
c0008294:	55                   	push   ebp
c0008295:	57                   	push   edi
c0008296:	56                   	push   esi
c0008297:	53                   	push   ebx
c0008298:	83 ec 1c             	sub    esp,0x1c
c000829b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000829f:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00082a3:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00082a7:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c00082aa:	89 c8                	mov    eax,ecx
c00082ac:	99                   	cdq    
c00082ad:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c00082b1:	74 24                	je     c00082d7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00082b3:	39 f9                	cmp    ecx,edi
c00082b5:	89 d1                	mov    ecx,edx
c00082b7:	19 f1                	sbb    ecx,esi
c00082b9:	73 1c                	jae    c00082d7 <Pipe::read(unsigned long long, void*, int*)+0x43>
c00082bb:	fa                   	cli    
c00082bc:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00082c2:	e8 05 b3 00 00       	call   c00135cc <schedule()>
c00082c7:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00082cc:	48                   	dec    eax
c00082cd:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00082d2:	75 d3                	jne    c00082a7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00082d4:	fb                   	sti    
c00082d5:	eb d0                	jmp    c00082a7 <Pipe::read(unsigned long long, void*, int*)+0x13>
c00082d7:	39 f8                	cmp    eax,edi
c00082d9:	89 d1                	mov    ecx,edx
c00082db:	89 3c 24             	mov    DWORD PTR [esp],edi
c00082de:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00082e2:	19 f1                	sbb    ecx,esi
c00082e4:	73 07                	jae    c00082ed <Pipe::read(unsigned long long, void*, int*)+0x59>
c00082e6:	89 04 24             	mov    DWORD PTR [esp],eax
c00082e9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00082ed:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c00082f0:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c00082f3:	29 f7                	sub    edi,esi
c00082f5:	89 f8                	mov    eax,edi
c00082f7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00082fb:	99                   	cdq    
c00082fc:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00082ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008303:	19 d0                	sbb    eax,edx
c0008305:	73 07                	jae    c000830e <Pipe::read(unsigned long long, void*, int*)+0x7a>
c0008307:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000830a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000830e:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c0008311:	89 ea                	mov    edx,ebp
c0008313:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c0008317:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000831c:	74 0d                	je     c000832b <Pipe::read(unsigned long long, void*, int*)+0x97>
c000831e:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008321:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0008325:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008329:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000832b:	85 d2                	test   edx,edx
c000832d:	74 11                	je     c0008340 <Pipe::read(unsigned long long, void*, int*)+0xac>
c000832f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008333:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c0008336:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000833a:	89 d1                	mov    ecx,edx
c000833c:	89 c7                	mov    edi,eax
c000833e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008340:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0008343:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c0008346:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0008349:	99                   	cdq    
c000834a:	89 f7                	mov    edi,esi
c000834c:	03 04 24             	add    eax,DWORD PTR [esp]
c000834f:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c0008353:	c1 ff 1f             	sar    edi,0x1f
c0008356:	57                   	push   edi
c0008357:	56                   	push   esi
c0008358:	52                   	push   edx
c0008359:	50                   	push   eax
c000835a:	e8 41 39 01 00       	call   c001bca0 <__umoddi3>
c000835f:	83 c4 10             	add    esp,0x10
c0008362:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008365:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c000836a:	75 10                	jne    c000837c <Pipe::read(unsigned long long, void*, int*)+0xe8>
c000836c:	83 ec 0c             	sub    esp,0xc
c000836f:	68 72 d2 01 c0       	push   0xc001d272
c0008374:	e8 fe 7e 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0008379:	83 c4 10             	add    esp,0x10
c000837c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008380:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0008383:	89 10                	mov    DWORD PTR [eax],edx
c0008385:	83 c4 1c             	add    esp,0x1c
c0008388:	31 c0                	xor    eax,eax
c000838a:	5b                   	pop    ebx
c000838b:	5e                   	pop    esi
c000838c:	5f                   	pop    edi
c000838d:	5d                   	pop    ebp
c000838e:	c3                   	ret    
c000838f:	90                   	nop

c0008390 <Pipe::Pipe(int)>:
c0008390:	83 ec 0c             	sub    esp,0xc
c0008393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008397:	83 ec 08             	sub    esp,0x8
c000839a:	6a 00                	push   0x0
c000839c:	50                   	push   eax
c000839d:	e8 f0 0c 00 00       	call   c0009092 <UnixFile::UnixFile(int)>
c00083a2:	83 c4 10             	add    esp,0x10
c00083a5:	ba 98 d2 01 c0       	mov    edx,0xc001d298
c00083aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083ae:	89 10                	mov    DWORD PTR [eax],edx
c00083b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083b4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00083b8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00083bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083bf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00083c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083ca:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00083d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00083d5:	83 ec 0c             	sub    esp,0xc
c00083d8:	50                   	push   eax
c00083d9:	e8 bb f5 ff ff       	call   c0007999 <malloc>
c00083de:	83 c4 10             	add    esp,0x10
c00083e1:	89 c2                	mov    edx,eax
c00083e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00083ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00083ee:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c00083f2:	90                   	nop
c00083f3:	83 c4 0c             	add    esp,0xc
c00083f6:	c3                   	ret    
c00083f7:	90                   	nop

c00083f8 <VgaText::isAtty()>:
c00083f8:	b0 01                	mov    al,0x1
c00083fa:	c3                   	ret    
c00083fb:	90                   	nop

c00083fc <VgaText::~VgaText()>:
c00083fc:	83 ec 0c             	sub    esp,0xc
c00083ff:	ba 20 d3 01 c0       	mov    edx,0xc001d320
c0008404:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008408:	89 10                	mov    DWORD PTR [eax],edx
c000840a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000840e:	83 ec 0c             	sub    esp,0xc
c0008411:	50                   	push   eax
c0008412:	e8 5d 0e 00 00       	call   c0009274 <UnixFile::~UnixFile()>
c0008417:	83 c4 10             	add    esp,0x10
c000841a:	90                   	nop
c000841b:	83 c4 0c             	add    esp,0xc
c000841e:	c3                   	ret    
c000841f:	90                   	nop

c0008420 <VgaText::~VgaText()>:
c0008420:	83 ec 0c             	sub    esp,0xc
c0008423:	83 ec 0c             	sub    esp,0xc
c0008426:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000842a:	e8 cd ff ff ff       	call   c00083fc <VgaText::~VgaText()>
c000842f:	83 c4 10             	add    esp,0x10
c0008432:	83 ec 08             	sub    esp,0x8
c0008435:	68 34 01 00 00       	push   0x134
c000843a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000843e:	e8 ef 21 00 00       	call   c000a632 <operator delete(void*, unsigned long)>
c0008443:	83 c4 10             	add    esp,0x10
c0008446:	83 c4 0c             	add    esp,0xc
c0008449:	c3                   	ret    

c000844a <VgaText::read(unsigned long long, void*, int*)>:
c000844a:	83 ec 10             	sub    esp,0x10
c000844d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008451:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008455:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008459:	e8 24 45 00 00       	call   c000c982 <readKeyboard(VgaText*, char*, unsigned long)>
c000845e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0008462:	89 02                	mov    DWORD PTR [edx],eax
c0008464:	31 c0                	xor    eax,eax
c0008466:	83 c4 1c             	add    esp,0x1c
c0008469:	c3                   	ret    

c000846a <setTerminalScrollLock(bool)>:
c000846a:	c3                   	ret    

c000846b <doTerminalCycle()>:
c000846b:	c3                   	ret    

c000846c <addToTerminalCycle(VgaText*)>:
c000846c:	c3                   	ret    

c000846d <scrollTerminalScrollLock(int)>:
c000846d:	c3                   	ret    

c000846e <VgaText::updateTitle()>:
c000846e:	c3                   	ret    
c000846f:	90                   	nop

c0008470 <VgaText::load()>:
c0008470:	c3                   	ret    
c0008471:	90                   	nop

c0008472 <VgaText::updateCursor()>:
c0008472:	83 ec 14             	sub    esp,0x14
c0008475:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008479:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000847c:	ff 70 14             	push   DWORD PTR [eax+0x14]
c000847f:	e8 bc db 00 00       	call   c0016040 <HalConsoleCursorUpdate(int, int)>
c0008484:	83 c4 1c             	add    esp,0x1c
c0008487:	c3                   	ret    

c0008488 <VgaText::doANSI_SGR(int)>:
c0008488:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000848c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008490:	85 d2                	test   edx,edx
c0008492:	75 0b                	jne    c000849f <VgaText::doANSI_SGR(int)+0x17>
c0008494:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0008497:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000849a:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c000849d:	eb 59                	jmp    c00084f8 <VgaText::doANSI_SGR(int)+0x70>
c000849f:	83 fa 07             	cmp    edx,0x7
c00084a2:	75 0b                	jne    c00084af <VgaText::doANSI_SGR(int)+0x27>
c00084a4:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00084a7:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c00084aa:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c00084ad:	eb 49                	jmp    c00084f8 <VgaText::doANSI_SGR(int)+0x70>
c00084af:	83 fa 1b             	cmp    edx,0x1b
c00084b2:	74 e0                	je     c0008494 <VgaText::doANSI_SGR(int)+0xc>
c00084b4:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00084b7:	83 f9 07             	cmp    ecx,0x7
c00084ba:	77 09                	ja     c00084c5 <VgaText::doANSI_SGR(int)+0x3d>
c00084bc:	8b 14 8d a0 f2 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0d60]
c00084c3:	eb 20                	jmp    c00084e5 <VgaText::doANSI_SGR(int)+0x5d>
c00084c5:	8d 4a d8             	lea    ecx,[edx-0x28]
c00084c8:	83 f9 07             	cmp    ecx,0x7
c00084cb:	77 09                	ja     c00084d6 <VgaText::doANSI_SGR(int)+0x4e>
c00084cd:	8b 14 8d a0 f2 01 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffe0d60]
c00084d4:	eb 22                	jmp    c00084f8 <VgaText::doANSI_SGR(int)+0x70>
c00084d6:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00084d9:	83 f9 07             	cmp    ecx,0x7
c00084dc:	77 0b                	ja     c00084e9 <VgaText::doANSI_SGR(int)+0x61>
c00084de:	8b 14 95 58 f1 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0ea8]
c00084e5:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00084e8:	c3                   	ret    
c00084e9:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00084ec:	83 f9 07             	cmp    ecx,0x7
c00084ef:	77 0a                	ja     c00084fb <VgaText::doANSI_SGR(int)+0x73>
c00084f1:	8b 14 95 30 f1 01 c0 	mov    edx,DWORD PTR [edx*4-0x3ffe0ed0]
c00084f8:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00084fb:	c3                   	ret    

c00084fc <VgaText::setDefaultBgColour(VgaColour)>:
c00084fc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008500:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008504:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0008507:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c000850a:	c3                   	ret    
c000850b:	90                   	nop

c000850c <VgaText::setDefaultFgColour(VgaColour)>:
c000850c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008510:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008514:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0008517:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c000851a:	c3                   	ret    
c000851b:	90                   	nop

c000851c <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c000851c:	53                   	push   ebx
c000851d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0008521:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0008525:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0008529:	51                   	push   ecx
c000852a:	e8 cd ff ff ff       	call   c00084fc <VgaText::setDefaultBgColour(VgaColour)>
c000852f:	58                   	pop    eax
c0008530:	5a                   	pop    edx
c0008531:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0008535:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0008539:	5b                   	pop    ebx
c000853a:	eb d0                	jmp    c000850c <VgaText::setDefaultFgColour(VgaColour)>

c000853c <VgaText::setTitleTextColour(VgaColour)>:
c000853c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008540:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008544:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0008547:	c3                   	ret    

c0008548 <VgaText::setTitleColour(VgaColour)>:
c0008548:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000854c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008550:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008553:	c3                   	ret    

c0008554 <VgaText::setTitle(char*)>:
c0008554:	c3                   	ret    
c0008555:	90                   	nop

c0008556 <VgaText::combineColours(unsigned char, unsigned char)>:
c0008556:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c000855a:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c000855f:	83 e0 0f             	and    eax,0xf
c0008562:	c1 e2 04             	shl    edx,0x4
c0008565:	09 d0                	or     eax,edx
c0008567:	c3                   	ret    

c0008568 <VgaText::scrollScreen()>:
c0008568:	55                   	push   ebp
c0008569:	b9 01 00 00 00       	mov    ecx,0x1
c000856e:	57                   	push   edi
c000856f:	56                   	push   esi
c0008570:	53                   	push   ebx
c0008571:	83 ec 0c             	sub    esp,0xc
c0008574:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008578:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c000857e:	31 ff                	xor    edi,edi
c0008580:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008583:	83 f9 18             	cmp    ecx,0x18
c0008586:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c0008589:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0008590:	75 27                	jne    c00085b9 <VgaText::scrollScreen()+0x51>
c0008592:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008595:	01 f5                	add    ebp,esi
c0008597:	f7 c7 01 00 00 00    	test   edi,0x1
c000859d:	74 16                	je     c00085b5 <VgaText::scrollScreen()+0x4d>
c000859f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00085a3:	50                   	push   eax
c00085a4:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00085a8:	50                   	push   eax
c00085a9:	e8 a8 ff ff ff       	call   c0008556 <VgaText::combineColours(unsigned char, unsigned char)>
c00085ae:	5a                   	pop    edx
c00085af:	5a                   	pop    edx
c00085b0:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c00085b3:	eb 04                	jmp    c00085b9 <VgaText::scrollScreen()+0x51>
c00085b5:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c00085b9:	47                   	inc    edi
c00085ba:	46                   	inc    esi
c00085bb:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00085c1:	75 bd                	jne    c0008580 <VgaText::scrollScreen()+0x18>
c00085c3:	41                   	inc    ecx
c00085c4:	83 f9 19             	cmp    ecx,0x19
c00085c7:	75 af                	jne    c0008578 <VgaText::scrollScreen()+0x10>
c00085c9:	39 1d d0 03 02 c0    	cmp    DWORD PTR ds:0xc00203d0,ebx
c00085cf:	75 1f                	jne    c00085f0 <VgaText::scrollScreen()+0x88>
c00085d1:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00085d5:	74 05                	je     c00085dc <VgaText::scrollScreen()+0x74>
c00085d7:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00085da:	eb 14                	jmp    c00085f0 <VgaText::scrollScreen()+0x88>
c00085dc:	50                   	push   eax
c00085dd:	50                   	push   eax
c00085de:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c00085e2:	50                   	push   eax
c00085e3:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c00085e7:	50                   	push   eax
c00085e8:	e8 df d8 00 00       	call   c0015ecc <HalConsoleScroll(int, int)>
c00085ed:	83 c4 10             	add    esp,0x10
c00085f0:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00085f4:	83 c4 0c             	add    esp,0xc
c00085f7:	5b                   	pop    ebx
c00085f8:	5e                   	pop    esi
c00085f9:	5f                   	pop    edi
c00085fa:	5d                   	pop    ebp
c00085fb:	e9 72 fe ff ff       	jmp    c0008472 <VgaText::updateCursor()>

c0008600 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008600:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008605:	c1 e0 08             	shl    eax,0x8
c0008608:	89 c2                	mov    edx,eax
c000860a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c000860f:	09 d0                	or     eax,edx
c0008611:	c3                   	ret    

c0008612 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c0008612:	55                   	push   ebp
c0008613:	57                   	push   edi
c0008614:	56                   	push   esi
c0008615:	53                   	push   ebx
c0008616:	83 ec 1c             	sub    esp,0x1c
c0008619:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000861d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0008621:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0008625:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0008629:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000862d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0008631:	0f b6 c3             	movzx  eax,bl
c0008634:	50                   	push   eax
c0008635:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c000863a:	50                   	push   eax
c000863b:	e8 16 ff ff ff       	call   c0008556 <VgaText::combineColours(unsigned char, unsigned char)>
c0008640:	5a                   	pop    edx
c0008641:	0f b6 c0             	movzx  eax,al
c0008644:	59                   	pop    ecx
c0008645:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c000864a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000864e:	50                   	push   eax
c000864f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0008653:	e8 a8 ff ff ff       	call   c0008600 <VgaText::combineCharAndColour(char, unsigned char)>
c0008658:	5a                   	pop    edx
c0008659:	66 6b d7 50          	imul   dx,di,0x50
c000865d:	59                   	pop    ecx
c000865e:	01 f2                	add    edx,esi
c0008660:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0008663:	0f b7 d2             	movzx  edx,dx
c0008666:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c000866a:	39 2d d0 03 02 c0    	cmp    DWORD PTR ds:0xc00203d0,ebp
c0008670:	75 28                	jne    c000869a <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x88>
c0008672:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008676:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c000867a:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000867e:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008682:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008686:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000868a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000868e:	83 c4 1c             	add    esp,0x1c
c0008691:	5b                   	pop    ebx
c0008692:	5e                   	pop    esi
c0008693:	5f                   	pop    edi
c0008694:	5d                   	pop    ebp
c0008695:	e9 3a d9 00 00       	jmp    c0015fd4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c000869a:	83 c4 1c             	add    esp,0x1c
c000869d:	5b                   	pop    ebx
c000869e:	5e                   	pop    esi
c000869f:	5f                   	pop    edi
c00086a0:	5d                   	pop    ebp
c00086a1:	c3                   	ret    

c00086a2 <VgaText::getCursorX()>:
c00086a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086a6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00086a9:	c3                   	ret    

c00086aa <VgaText::getCursorY()>:
c00086aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086ae:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00086b1:	c3                   	ret    

c00086b2 <VgaText::setCursor(int, int)>:
c00086b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00086b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00086ba:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00086bd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00086c1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00086c4:	e9 a9 fd ff ff       	jmp    c0008472 <VgaText::updateCursor()>

c00086c9 <setActiveTerminal(VgaText*)>:
c00086c9:	53                   	push   ebx
c00086ca:	83 ec 08             	sub    esp,0x8
c00086cd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00086d1:	85 db                	test   ebx,ebx
c00086d3:	75 11                	jne    c00086e6 <setActiveTerminal(VgaText*)+0x1d>
c00086d5:	c7 44 24 10 ac d2 01 c0 	mov    DWORD PTR [esp+0x10],0xc001d2ac
c00086dd:	83 c4 08             	add    esp,0x8
c00086e0:	5b                   	pop    ebx
c00086e1:	e9 91 7b 00 00       	jmp    c0010277 <Krnl::panic(char const*)>
c00086e6:	a1 d0 03 02 c0       	mov    eax,ds:0xc00203d0
c00086eb:	85 c0                	test   eax,eax
c00086ed:	74 0c                	je     c00086fb <setActiveTerminal(VgaText*)+0x32>
c00086ef:	83 ec 0c             	sub    esp,0xc
c00086f2:	50                   	push   eax
c00086f3:	e8 7a fd ff ff       	call   c0008472 <VgaText::updateCursor()>
c00086f8:	83 c4 10             	add    esp,0x10
c00086fb:	89 1d d0 03 02 c0    	mov    DWORD PTR ds:0xc00203d0,ebx
c0008701:	50                   	push   eax
c0008702:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008705:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008708:	53                   	push   ebx
c0008709:	e8 a4 ff ff ff       	call   c00086b2 <VgaText::setCursor(int, int)>
c000870e:	83 c4 18             	add    esp,0x18
c0008711:	5b                   	pop    ebx
c0008712:	c3                   	ret    
c0008713:	90                   	nop

c0008714 <VgaText::clearScreen()>:
c0008714:	57                   	push   edi
c0008715:	56                   	push   esi
c0008716:	31 f6                	xor    esi,esi
c0008718:	53                   	push   ebx
c0008719:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000871d:	52                   	push   edx
c000871e:	6a 00                	push   0x0
c0008720:	6a 00                	push   0x0
c0008722:	53                   	push   ebx
c0008723:	e8 8a ff ff ff       	call   c00086b2 <VgaText::setCursor(int, int)>
c0008728:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c000872f:	83 c4 10             	add    esp,0x10
c0008732:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0008735:	7e 20                	jle    c0008757 <VgaText::clearScreen()+0x43>
c0008737:	31 ff                	xor    edi,edi
c0008739:	50                   	push   eax
c000873a:	50                   	push   eax
c000873b:	56                   	push   esi
c000873c:	57                   	push   edi
c000873d:	47                   	inc    edi
c000873e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008741:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008744:	6a 20                	push   0x20
c0008746:	53                   	push   ebx
c0008747:	e8 c6 fe ff ff       	call   c0008612 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000874c:	83 c4 20             	add    esp,0x20
c000874f:	83 ff 50             	cmp    edi,0x50
c0008752:	75 e5                	jne    c0008739 <VgaText::clearScreen()+0x25>
c0008754:	46                   	inc    esi
c0008755:	eb db                	jmp    c0008732 <VgaText::clearScreen()+0x1e>
c0008757:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c000875e:	5b                   	pop    ebx
c000875f:	5e                   	pop    esi
c0008760:	5f                   	pop    edi
c0008761:	c3                   	ret    

c0008762 <VgaText::setCursorX(int)>:
c0008762:	83 ec 10             	sub    esp,0x10
c0008765:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008769:	ff 70 18             	push   DWORD PTR [eax+0x18]
c000876c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008770:	50                   	push   eax
c0008771:	e8 3c ff ff ff       	call   c00086b2 <VgaText::setCursor(int, int)>
c0008776:	83 c4 1c             	add    esp,0x1c
c0008779:	c3                   	ret    

c000877a <VgaText::setCursorY(int)>:
c000877a:	83 ec 10             	sub    esp,0x10
c000877d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008781:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008785:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008788:	50                   	push   eax
c0008789:	e8 24 ff ff ff       	call   c00086b2 <VgaText::setCursor(int, int)>
c000878e:	83 c4 1c             	add    esp,0x1c
c0008791:	c3                   	ret    

c0008792 <VgaText::incrementCursor(bool)>:
c0008792:	56                   	push   esi
c0008793:	53                   	push   ebx
c0008794:	51                   	push   ecx
c0008795:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008799:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000879d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00087a0:	40                   	inc    eax
c00087a1:	83 f8 50             	cmp    eax,0x50
c00087a4:	74 05                	je     c00087ab <VgaText::incrementCursor(bool)+0x19>
c00087a6:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00087a9:	eb 24                	jmp    c00087cf <VgaText::incrementCursor(bool)+0x3d>
c00087ab:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00087ae:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00087b5:	8d 50 01             	lea    edx,[eax+0x1]
c00087b8:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00087bb:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00087be:	75 0f                	jne    c00087cf <VgaText::incrementCursor(bool)+0x3d>
c00087c0:	83 ec 0c             	sub    esp,0xc
c00087c3:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00087c6:	53                   	push   ebx
c00087c7:	e8 9c fd ff ff       	call   c0008568 <VgaText::scrollScreen()>
c00087cc:	83 c4 10             	add    esp,0x10
c00087cf:	89 f0                	mov    eax,esi
c00087d1:	84 c0                	test   al,al
c00087d3:	74 0c                	je     c00087e1 <VgaText::incrementCursor(bool)+0x4f>
c00087d5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00087d9:	5a                   	pop    edx
c00087da:	5b                   	pop    ebx
c00087db:	5e                   	pop    esi
c00087dc:	e9 91 fc ff ff       	jmp    c0008472 <VgaText::updateCursor()>
c00087e1:	58                   	pop    eax
c00087e2:	5b                   	pop    ebx
c00087e3:	5e                   	pop    esi
c00087e4:	c3                   	ret    
c00087e5:	90                   	nop

c00087e6 <VgaText::decrementCursor(bool)>:
c00087e6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00087ea:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00087ee:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00087f1:	85 c0                	test   eax,eax
c00087f3:	74 04                	je     c00087f9 <VgaText::decrementCursor(bool)+0x13>
c00087f5:	48                   	dec    eax
c00087f6:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c00087f9:	84 c9                	test   cl,cl
c00087fb:	74 09                	je     c0008806 <VgaText::decrementCursor(bool)+0x20>
c00087fd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008801:	e9 6c fc ff ff       	jmp    c0008472 <VgaText::updateCursor()>
c0008806:	c3                   	ret    
c0008807:	90                   	nop

c0008808 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008808:	53                   	push   ebx
c0008809:	83 ec 08             	sub    esp,0x8
c000880c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008810:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008814:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008818:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000881c:	3c 07                	cmp    al,0x7
c000881e:	75 21                	jne    c0008841 <VgaText::putchar(char, VgaColour, VgaColour)+0x39>
c0008820:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0008828:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c0008830:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c0008838:	83 c4 08             	add    esp,0x8
c000883b:	5b                   	pop    ebx
c000883c:	e9 3e 2d 00 00       	jmp    c000b57f <Krnl::beep(int, int, bool)>
c0008841:	3c 0d                	cmp    al,0xd
c0008843:	75 09                	jne    c000884e <VgaText::putchar(char, VgaColour, VgaColour)+0x46>
c0008845:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000884c:	eb 2c                	jmp    c000887a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c000884e:	3c 0a                	cmp    al,0xa
c0008850:	75 31                	jne    c0008883 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0008852:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008855:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000885c:	8d 50 01             	lea    edx,[eax+0x1]
c000885f:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0008862:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0008865:	75 0f                	jne    c0008876 <VgaText::putchar(char, VgaColour, VgaColour)+0x6e>
c0008867:	83 ec 0c             	sub    esp,0xc
c000886a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000886d:	53                   	push   ebx
c000886e:	e8 f5 fc ff ff       	call   c0008568 <VgaText::scrollScreen()>
c0008873:	83 c4 10             	add    esp,0x10
c0008876:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000887a:	83 c4 08             	add    esp,0x8
c000887d:	5b                   	pop    ebx
c000887e:	e9 ef fb ff ff       	jmp    c0008472 <VgaText::updateCursor()>
c0008883:	3c 08                	cmp    al,0x8
c0008885:	75 25                	jne    c00088ac <VgaText::putchar(char, VgaColour, VgaColour)+0xa4>
c0008887:	50                   	push   eax
c0008888:	50                   	push   eax
c0008889:	6a 01                	push   0x1
c000888b:	53                   	push   ebx
c000888c:	e8 55 ff ff ff       	call   c00087e6 <VgaText::decrementCursor(bool)>
c0008891:	5a                   	pop    edx
c0008892:	59                   	pop    ecx
c0008893:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008896:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008899:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c000889c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000889f:	6a 20                	push   0x20
c00088a1:	53                   	push   ebx
c00088a2:	e8 6b fd ff ff       	call   c0008612 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00088a7:	83 c4 28             	add    esp,0x28
c00088aa:	5b                   	pop    ebx
c00088ab:	c3                   	ret    
c00088ac:	83 ec 08             	sub    esp,0x8
c00088af:	0f be c0             	movsx  eax,al
c00088b2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c00088b5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c00088b8:	51                   	push   ecx
c00088b9:	52                   	push   edx
c00088ba:	50                   	push   eax
c00088bb:	53                   	push   ebx
c00088bc:	e8 51 fd ff ff       	call   c0008612 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00088c1:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c00088c5:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c00088cd:	83 c4 28             	add    esp,0x28
c00088d0:	5b                   	pop    ebx
c00088d1:	e9 bc fe ff ff       	jmp    c0008792 <VgaText::incrementCursor(bool)>

c00088d6 <VgaText::putchar(char)>:
c00088d6:	56                   	push   esi
c00088d7:	53                   	push   ebx
c00088d8:	83 ec 14             	sub    esp,0x14
c00088db:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00088df:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00088e3:	3c 5b                	cmp    al,0x5b
c00088e5:	75 18                	jne    c00088ff <VgaText::putchar(char)+0x29>
c00088e7:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c00088eb:	74 1f                	je     c000890c <VgaText::putchar(char)+0x36>
c00088ed:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c00088f3:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c00088fa:	e9 bd 00 00 00       	jmp    c00089bc <VgaText::putchar(char)+0xe6>
c00088ff:	3c 1b                	cmp    al,0x1b
c0008901:	75 09                	jne    c000890c <VgaText::putchar(char)+0x36>
c0008903:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0008907:	e9 b0 00 00 00       	jmp    c00089bc <VgaText::putchar(char)+0xe6>
c000890c:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c000890f:	84 c9                	test   cl,cl
c0008911:	0f 84 92 00 00 00    	je     c00089a9 <VgaText::putchar(char)+0xd3>
c0008917:	8d 50 c0             	lea    edx,[eax-0x40]
c000891a:	80 fa 3e             	cmp    dl,0x3e
c000891d:	77 76                	ja     c0008995 <VgaText::putchar(char)+0xbf>
c000891f:	3c 6d                	cmp    al,0x6d
c0008921:	75 47                	jne    c000896a <VgaText::putchar(char)+0x94>
c0008923:	31 f6                	xor    esi,esi
c0008925:	31 d2                	xor    edx,edx
c0008927:	31 c0                	xor    eax,eax
c0008929:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c000892c:	7e 2d                	jle    c000895b <VgaText::putchar(char)+0x85>
c000892e:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0008933:	80 fa 3b             	cmp    dl,0x3b
c0008936:	75 17                	jne    c000894f <VgaText::putchar(char)+0x79>
c0008938:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c000893c:	50                   	push   eax
c000893d:	53                   	push   ebx
c000893e:	e8 45 fb ff ff       	call   c0008488 <VgaText::doANSI_SGR(int)>
c0008943:	59                   	pop    ecx
c0008944:	31 d2                	xor    edx,edx
c0008946:	58                   	pop    eax
c0008947:	31 c0                	xor    eax,eax
c0008949:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c000894d:	eb 09                	jmp    c0008958 <VgaText::putchar(char)+0x82>
c000894f:	6b c0 0a             	imul   eax,eax,0xa
c0008952:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0008956:	88 ca                	mov    dl,cl
c0008958:	46                   	inc    esi
c0008959:	eb ce                	jmp    c0008929 <VgaText::putchar(char)+0x53>
c000895b:	84 d2                	test   dl,dl
c000895d:	74 2e                	je     c000898d <VgaText::putchar(char)+0xb7>
c000895f:	50                   	push   eax
c0008960:	53                   	push   ebx
c0008961:	e8 22 fb ff ff       	call   c0008488 <VgaText::doANSI_SGR(int)>
c0008966:	58                   	pop    eax
c0008967:	5a                   	pop    edx
c0008968:	eb 23                	jmp    c000898d <VgaText::putchar(char)+0xb7>
c000896a:	3c 4a                	cmp    al,0x4a
c000896c:	75 1f                	jne    c000898d <VgaText::putchar(char)+0xb7>
c000896e:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008972:	75 19                	jne    c000898d <VgaText::putchar(char)+0xb7>
c0008974:	83 ec 0c             	sub    esp,0xc
c0008977:	53                   	push   ebx
c0008978:	e8 97 fd ff ff       	call   c0008714 <VgaText::clearScreen()>
c000897d:	83 c4 0c             	add    esp,0xc
c0008980:	6a 00                	push   0x0
c0008982:	6a 00                	push   0x0
c0008984:	53                   	push   ebx
c0008985:	e8 28 fd ff ff       	call   c00086b2 <VgaText::setCursor(int, int)>
c000898a:	83 c4 10             	add    esp,0x10
c000898d:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008993:	eb 27                	jmp    c00089bc <VgaText::putchar(char)+0xe6>
c0008995:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0008998:	83 fa 0e             	cmp    edx,0xe
c000899b:	7f 1f                	jg     c00089bc <VgaText::putchar(char)+0xe6>
c000899d:	8d 4a 01             	lea    ecx,[edx+0x1]
c00089a0:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c00089a3:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c00089a7:	eb 13                	jmp    c00089bc <VgaText::putchar(char)+0xe6>
c00089a9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089ac:	0f be c0             	movsx  eax,al
c00089af:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00089b2:	50                   	push   eax
c00089b3:	53                   	push   ebx
c00089b4:	e8 4f fe ff ff       	call   c0008808 <VgaText::putchar(char, VgaColour, VgaColour)>
c00089b9:	83 c4 10             	add    esp,0x10
c00089bc:	83 c4 14             	add    esp,0x14
c00089bf:	5b                   	pop    ebx
c00089c0:	5e                   	pop    esi
c00089c1:	c3                   	ret    

c00089c2 <VgaText::putx(unsigned int)>:
c00089c2:	57                   	push   edi
c00089c3:	b9 11 00 00 00       	mov    ecx,0x11
c00089c8:	56                   	push   esi
c00089c9:	be ba d2 01 c0       	mov    esi,0xc001d2ba
c00089ce:	53                   	push   ebx
c00089cf:	83 ec 20             	sub    esp,0x20
c00089d2:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00089d6:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c00089da:	fc                   	cld    
c00089db:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00089dd:	be 08 00 00 00       	mov    esi,0x8
c00089e2:	50                   	push   eax
c00089e3:	50                   	push   eax
c00089e4:	89 d8                	mov    eax,ebx
c00089e6:	c1 e3 04             	shl    ebx,0x4
c00089e9:	c1 e8 1c             	shr    eax,0x1c
c00089ec:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00089f1:	50                   	push   eax
c00089f2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00089f6:	e8 db fe ff ff       	call   c00088d6 <VgaText::putchar(char)>
c00089fb:	83 c4 10             	add    esp,0x10
c00089fe:	4e                   	dec    esi
c00089ff:	75 e1                	jne    c00089e2 <VgaText::putx(unsigned int)+0x20>
c0008a01:	83 c4 20             	add    esp,0x20
c0008a04:	5b                   	pop    ebx
c0008a05:	5e                   	pop    esi
c0008a06:	5f                   	pop    edi
c0008a07:	c3                   	ret    

c0008a08 <VgaText::puts(char const*)>:
c0008a08:	53                   	push   ebx
c0008a09:	83 ec 08             	sub    esp,0x8
c0008a0c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008a10:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008a13:	84 c0                	test   al,al
c0008a15:	74 12                	je     c0008a29 <VgaText::puts(char const*)+0x21>
c0008a17:	43                   	inc    ebx
c0008a18:	51                   	push   ecx
c0008a19:	51                   	push   ecx
c0008a1a:	50                   	push   eax
c0008a1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008a1f:	e8 b2 fe ff ff       	call   c00088d6 <VgaText::putchar(char)>
c0008a24:	83 c4 10             	add    esp,0x10
c0008a27:	eb e7                	jmp    c0008a10 <VgaText::puts(char const*)+0x8>
c0008a29:	83 c4 08             	add    esp,0x8
c0008a2c:	5b                   	pop    ebx
c0008a2d:	c3                   	ret    

c0008a2e <VgaText::write(unsigned long long, void*, int*)>:
c0008a2e:	55                   	push   ebp
c0008a2f:	57                   	push   edi
c0008a30:	56                   	push   esi
c0008a31:	53                   	push   ebx
c0008a32:	83 ec 0c             	sub    esp,0xc
c0008a35:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008a39:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008a3d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008a41:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008a48:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008a4b:	39 eb                	cmp    ebx,ebp
c0008a4d:	74 13                	je     c0008a62 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008a4f:	43                   	inc    ebx
c0008a50:	50                   	push   eax
c0008a51:	50                   	push   eax
c0008a52:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008a56:	50                   	push   eax
c0008a57:	56                   	push   esi
c0008a58:	e8 79 fe ff ff       	call   c00088d6 <VgaText::putchar(char)>
c0008a5d:	83 c4 10             	add    esp,0x10
c0008a60:	eb e9                	jmp    c0008a4b <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008a62:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008a69:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008a6d:	89 38                	mov    DWORD PTR [eax],edi
c0008a6f:	83 c4 0c             	add    esp,0xc
c0008a72:	31 c0                	xor    eax,eax
c0008a74:	5b                   	pop    ebx
c0008a75:	5e                   	pop    esi
c0008a76:	5f                   	pop    edi
c0008a77:	5d                   	pop    ebp
c0008a78:	c3                   	ret    
c0008a79:	90                   	nop

c0008a7a <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008a7a:	55                   	push   ebp
c0008a7b:	57                   	push   edi
c0008a7c:	56                   	push   esi
c0008a7d:	53                   	push   ebx
c0008a7e:	83 ec 0c             	sub    esp,0xc
c0008a81:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008a85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008a8a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008a91:	50                   	push   eax
c0008a92:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008a97:	50                   	push   eax
c0008a98:	e8 b9 fa ff ff       	call   c0008556 <VgaText::combineColours(unsigned char, unsigned char)>
c0008a9d:	5a                   	pop    edx
c0008a9e:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008aa3:	59                   	pop    ecx
c0008aa4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008aa7:	89 c5                	mov    ebp,eax
c0008aa9:	0f b7 f6             	movzx  esi,si
c0008aac:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008ab0:	01 f6                	add    esi,esi
c0008ab2:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008ab5:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008ab8:	84 c0                	test   al,al
c0008aba:	0f 84 f4 00 00 00    	je     c0008bb4 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13a>
c0008ac0:	3c 0d                	cmp    al,0xd
c0008ac2:	75 0c                	jne    c0008ad0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x56>
c0008ac4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008acb:	e9 de 00 00 00       	jmp    c0008bae <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008ad0:	3c 0a                	cmp    al,0xa
c0008ad2:	75 45                	jne    c0008b19 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0008ad4:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008ad7:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008ade:	8d 48 01             	lea    ecx,[eax+0x1]
c0008ae1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008ae4:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008ae7:	75 0f                	jne    c0008af8 <VgaText::puts(char const*, VgaColour, VgaColour)+0x7e>
c0008ae9:	83 ec 0c             	sub    esp,0xc
c0008aec:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008aef:	53                   	push   ebx
c0008af0:	e8 73 fa ff ff       	call   c0008568 <VgaText::scrollScreen()>
c0008af5:	83 c4 10             	add    esp,0x10
c0008af8:	83 ec 0c             	sub    esp,0xc
c0008afb:	53                   	push   ebx
c0008afc:	e8 71 f9 ff ff       	call   c0008472 <VgaText::updateCursor()>
c0008b01:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008b06:	83 c4 10             	add    esp,0x10
c0008b09:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b0c:	0f b7 f6             	movzx  esi,si
c0008b0f:	01 f6                	add    esi,esi
c0008b11:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b14:	e9 95 00 00 00       	jmp    c0008bae <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008b19:	3c 08                	cmp    al,0x8
c0008b1b:	75 35                	jne    c0008b52 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd8>
c0008b1d:	51                   	push   ecx
c0008b1e:	51                   	push   ecx
c0008b1f:	6a 01                	push   0x1
c0008b21:	53                   	push   ebx
c0008b22:	e8 bf fc ff ff       	call   c00087e6 <VgaText::decrementCursor(bool)>
c0008b27:	5e                   	pop    esi
c0008b28:	58                   	pop    eax
c0008b29:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008b2c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008b2f:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008b32:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008b35:	6a 20                	push   0x20
c0008b37:	53                   	push   ebx
c0008b38:	e8 d5 fa ff ff       	call   c0008612 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008b3d:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008b42:	83 c4 20             	add    esp,0x20
c0008b45:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	01 f6                	add    esi,esi
c0008b4d:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b50:	eb 5c                	jmp    c0008bae <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008b52:	52                   	push   edx
c0008b53:	52                   	push   edx
c0008b54:	89 ea                	mov    edx,ebp
c0008b56:	0f b6 ca             	movzx  ecx,dl
c0008b59:	51                   	push   ecx
c0008b5a:	50                   	push   eax
c0008b5b:	e8 a0 fa ff ff       	call   c0008600 <VgaText::combineCharAndColour(char, unsigned char)>
c0008b60:	83 c4 10             	add    esp,0x10
c0008b63:	66 89 06             	mov    WORD PTR [esi],ax
c0008b66:	39 1d d0 03 02 c0    	cmp    DWORD PTR ds:0xc00203d0,ebx
c0008b6c:	75 1d                	jne    c0008b8b <VgaText::puts(char const*, VgaColour, VgaColour)+0x111>
c0008b6e:	83 ec 0c             	sub    esp,0xc
c0008b71:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008b74:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008b77:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008b7b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008b7f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b82:	50                   	push   eax
c0008b83:	e8 4c d4 00 00       	call   c0015fd4 <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008b88:	83 c4 20             	add    esp,0x20
c0008b8b:	83 c6 02             	add    esi,0x2
c0008b8e:	50                   	push   eax
c0008b8f:	50                   	push   eax
c0008b90:	6a 00                	push   0x0
c0008b92:	53                   	push   ebx
c0008b93:	e8 fa fb ff ff       	call   c0008792 <VgaText::incrementCursor(bool)>
c0008b98:	83 c4 10             	add    esp,0x10
c0008b9b:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008b9f:	75 0d                	jne    c0008bae <VgaText::puts(char const*, VgaColour, VgaColour)+0x134>
c0008ba1:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0008ba6:	0f b7 f6             	movzx  esi,si
c0008ba9:	01 f6                	add    esi,esi
c0008bab:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bae:	47                   	inc    edi
c0008baf:	e9 01 ff ff ff       	jmp    c0008ab5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008bb4:	83 ec 0c             	sub    esp,0xc
c0008bb7:	53                   	push   ebx
c0008bb8:	e8 b5 f8 ff ff       	call   c0008472 <VgaText::updateCursor()>
c0008bbd:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008bc4:	83 c4 1c             	add    esp,0x1c
c0008bc7:	5b                   	pop    ebx
c0008bc8:	5e                   	pop    esi
c0008bc9:	5f                   	pop    edi
c0008bca:	5d                   	pop    ebp
c0008bcb:	c3                   	ret    

c0008bcc <VgaText::VgaText(char const*)>:
c0008bcc:	56                   	push   esi
c0008bcd:	53                   	push   ebx
c0008bce:	83 ec 04             	sub    esp,0x4
c0008bd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bd5:	83 ec 08             	sub    esp,0x8
c0008bd8:	6a 00                	push   0x0
c0008bda:	50                   	push   eax
c0008bdb:	e8 b2 04 00 00       	call   c0009092 <UnixFile::UnixFile(int)>
c0008be0:	83 c4 10             	add    esp,0x10
c0008be3:	ba 20 d3 01 c0       	mov    edx,0xc001d320
c0008be8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bec:	89 10                	mov    DWORD PTR [eax],edx
c0008bee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bf2:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008bf9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008bfd:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c08:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008c0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c10:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c18:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008c1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c23:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008c2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c2e:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008c35:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c39:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008c40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c44:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008c4b:	83 ec 0c             	sub    esp,0xc
c0008c4e:	6a 01                	push   0x1
c0008c50:	e8 80 08 00 00       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c0008c55:	83 c4 10             	add    esp,0x10
c0008c58:	89 c2                	mov    edx,eax
c0008c5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c5e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008c61:	8b 1d 70 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020470
c0008c67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008c6e:	89 c6                	mov    esi,eax
c0008c70:	e8 f1 f0 ff ff       	call   c0007d66 <Phys::allocatePage()>
c0008c75:	68 05 0c 00 00       	push   0xc05
c0008c7a:	56                   	push   esi
c0008c7b:	50                   	push   eax
c0008c7c:	53                   	push   ebx
c0008c7d:	e8 e8 0e 00 00       	call   c0009b6a <VAS::mapPage(unsigned long, unsigned long, int)>
c0008c82:	83 c4 10             	add    esp,0x10
c0008c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c89:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008c8c:	83 ec 04             	sub    esp,0x4
c0008c8f:	68 a0 0f 00 00       	push   0xfa0
c0008c94:	6a 00                	push   0x0
c0008c96:	50                   	push   eax
c0008c97:	e8 54 78 ff ff       	call   c00004f0 <memset>
c0008c9c:	83 c4 10             	add    esp,0x10
c0008c9f:	83 ec 04             	sub    esp,0x4
c0008ca2:	6a 00                	push   0x0
c0008ca4:	6a 07                	push   0x7
c0008ca6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008caa:	e8 6d f8 ff ff       	call   c000851c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008caf:	83 c4 10             	add    esp,0x10
c0008cb2:	83 ec 04             	sub    esp,0x4
c0008cb5:	6a 00                	push   0x0
c0008cb7:	6a 00                	push   0x0
c0008cb9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008cbd:	e8 f0 f9 ff ff       	call   c00086b2 <VgaText::setCursor(int, int)>
c0008cc2:	83 c4 10             	add    esp,0x10
c0008cc5:	83 ec 0c             	sub    esp,0xc
c0008cc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008ccc:	e8 43 fa ff ff       	call   c0008714 <VgaText::clearScreen()>
c0008cd1:	83 c4 10             	add    esp,0x10
c0008cd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd8:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008cdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ce0:	05 82 00 00 00       	add    eax,0x82
c0008ce5:	83 ec 04             	sub    esp,0x4
c0008ce8:	6a 30                	push   0x30
c0008cea:	6a 00                	push   0x0
c0008cec:	50                   	push   eax
c0008ced:	e8 fe 77 ff ff       	call   c00004f0 <memset>
c0008cf2:	83 c4 10             	add    esp,0x10
c0008cf5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf9:	05 b2 00 00 00       	add    eax,0xb2
c0008cfe:	83 ec 04             	sub    esp,0x4
c0008d01:	68 80 00 00 00       	push   0x80
c0008d06:	6a 00                	push   0x0
c0008d08:	50                   	push   eax
c0008d09:	e8 e2 77 ff ff       	call   c00004f0 <memset>
c0008d0e:	83 c4 10             	add    esp,0x10
c0008d11:	90                   	nop
c0008d12:	83 c4 04             	add    esp,0x4
c0008d15:	5b                   	pop    ebx
c0008d16:	5e                   	pop    esi
c0008d17:	c3                   	ret    

c0008d18 <VgaText::receiveKey(unsigned char)>:
c0008d18:	57                   	push   edi
c0008d19:	56                   	push   esi
c0008d1a:	53                   	push   ebx
c0008d1b:	83 ec 10             	sub    esp,0x10
c0008d1e:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0008d22:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008d26:	84 db                	test   bl,bl
c0008d28:	0f 84 ba 00 00 00    	je     c0008de8 <VgaText::receiveKey(unsigned char)+0xd0>
c0008d2e:	8d be 82 00 00 00    	lea    edi,[esi+0x82]
c0008d34:	80 fb 08             	cmp    bl,0x8
c0008d37:	75 2c                	jne    c0008d65 <VgaText::receiveKey(unsigned char)+0x4d>
c0008d39:	83 ec 0c             	sub    esp,0xc
c0008d3c:	57                   	push   edi
c0008d3d:	e8 1e 78 ff ff       	call   c0000560 <strlen>
c0008d42:	83 c4 10             	add    esp,0x10
c0008d45:	85 c0                	test   eax,eax
c0008d47:	74 41                	je     c0008d8a <VgaText::receiveKey(unsigned char)+0x72>
c0008d49:	50                   	push   eax
c0008d4a:	50                   	push   eax
c0008d4b:	6a 08                	push   0x8
c0008d4d:	56                   	push   esi
c0008d4e:	e8 83 fb ff ff       	call   c00088d6 <VgaText::putchar(char)>
c0008d53:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008d56:	e8 05 78 ff ff       	call   c0000560 <strlen>
c0008d5b:	c6 84 06 81 00 00 00 00 	mov    BYTE PTR [esi+eax*1+0x81],0x0
c0008d63:	eb 22                	jmp    c0008d87 <VgaText::receiveKey(unsigned char)+0x6f>
c0008d65:	0f be c3             	movsx  eax,bl
c0008d68:	52                   	push   edx
c0008d69:	52                   	push   edx
c0008d6a:	50                   	push   eax
c0008d6b:	56                   	push   esi
c0008d6c:	e8 65 fb ff ff       	call   c00088d6 <VgaText::putchar(char)>
c0008d71:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c0008d75:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008d7a:	59                   	pop    ecx
c0008d7b:	58                   	pop    eax
c0008d7c:	8d 44 24 16          	lea    eax,[esp+0x16]
c0008d80:	50                   	push   eax
c0008d81:	57                   	push   edi
c0008d82:	e8 59 7a ff ff       	call   c00007e0 <strcat>
c0008d87:	83 c4 10             	add    esp,0x10
c0008d8a:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c0008d91:	75 05                	jne    c0008d98 <VgaText::receiveKey(unsigned char)+0x80>
c0008d93:	80 fb 0a             	cmp    bl,0xa
c0008d96:	75 50                	jne    c0008de8 <VgaText::receiveKey(unsigned char)+0xd0>
c0008d98:	83 ec 0c             	sub    esp,0xc
c0008d9b:	81 c6 b2 00 00 00    	add    esi,0xb2
c0008da1:	56                   	push   esi
c0008da2:	e8 b9 77 ff ff       	call   c0000560 <strlen>
c0008da7:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008daa:	89 c3                	mov    ebx,eax
c0008dac:	e8 af 77 ff ff       	call   c0000560 <strlen>
c0008db1:	83 c4 10             	add    esp,0x10
c0008db4:	8d 44 03 04          	lea    eax,[ebx+eax*1+0x4]
c0008db8:	3d 80 00 00 00       	cmp    eax,0x80
c0008dbd:	76 10                	jbe    c0008dcf <VgaText::receiveKey(unsigned char)+0xb7>
c0008dbf:	83 ec 0c             	sub    esp,0xc
c0008dc2:	68 cb d2 01 c0       	push   0xc001d2cb
c0008dc7:	e8 ab 74 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0008dcc:	83 c4 10             	add    esp,0x10
c0008dcf:	50                   	push   eax
c0008dd0:	50                   	push   eax
c0008dd1:	57                   	push   edi
c0008dd2:	56                   	push   esi
c0008dd3:	e8 08 7a ff ff       	call   c00007e0 <strcat>
c0008dd8:	83 c4 0c             	add    esp,0xc
c0008ddb:	6a 30                	push   0x30
c0008ddd:	6a 00                	push   0x0
c0008ddf:	57                   	push   edi
c0008de0:	e8 0b 77 ff ff       	call   c00004f0 <memset>
c0008de5:	83 c4 10             	add    esp,0x10
c0008de8:	83 c4 10             	add    esp,0x10
c0008deb:	5b                   	pop    ebx
c0008dec:	5e                   	pop    esi
c0008ded:	5f                   	pop    edi
c0008dee:	c3                   	ret    
c0008def:	90                   	nop

c0008df0 <VgaText::doUpdate()>:
c0008df0:	c3                   	ret    

c0008df1 <newTerminal(char*)>:
c0008df1:	83 ec 28             	sub    esp,0x28
c0008df4:	68 34 01 00 00       	push   0x134
c0008df9:	e8 9b eb ff ff       	call   c0007999 <malloc>
c0008dfe:	5a                   	pop    edx
c0008dff:	59                   	pop    ecx
c0008e00:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008e04:	50                   	push   eax
c0008e05:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e09:	e8 be fd ff ff       	call   c0008bcc <VgaText::VgaText(char const*)>
c0008e0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008e12:	83 c4 2c             	add    esp,0x2c
c0008e15:	c3                   	ret    
c0008e16:	66 90                	xchg   ax,ax

c0008e18 <TSS::TSS()>:
c0008e18:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008e1c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008e23:	90                   	nop
c0008e24:	c3                   	ret    
c0008e25:	90                   	nop
c0008e26:	66 90                	xchg   ax,ax

c0008e28 <TSS::setESP(unsigned long)>:
c0008e28:	55                   	push   ebp
c0008e29:	89 e5                	mov    ebp,esp
c0008e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e2e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e31:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008e34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008e37:	90                   	nop
c0008e38:	5d                   	pop    ebp
c0008e39:	c3                   	ret    
c0008e3a:	66 90                	xchg   ax,ax

c0008e3c <TSS::flush()>:
c0008e3c:	55                   	push   ebp
c0008e3d:	89 e5                	mov    ebp,esp
c0008e3f:	83 ec 10             	sub    esp,0x10
c0008e42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e45:	8b 00                	mov    eax,DWORD PTR [eax]
c0008e47:	83 c8 03             	or     eax,0x3
c0008e4a:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008e4e:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008e52:	66 89 d0             	mov    ax,dx
c0008e55:	0f 00 d8             	ltr    ax
c0008e58:	90                   	nop
c0008e59:	c9                   	leave  
c0008e5a:	c3                   	ret    
c0008e5b:	90                   	nop

c0008e5c <TSS::setup(unsigned long, unsigned long)>:
c0008e5c:	55                   	push   ebp
c0008e5d:	89 e5                	mov    ebp,esp
c0008e5f:	83 ec 18             	sub    esp,0x18
c0008e62:	83 ec 0c             	sub    esp,0xc
c0008e65:	6a 68                	push   0x68
c0008e67:	e8 2d eb ff ff       	call   c0007999 <malloc>
c0008e6c:	83 c4 10             	add    esp,0x10
c0008e6f:	89 c2                	mov    edx,eax
c0008e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e74:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e7a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e7d:	83 ec 04             	sub    esp,0x4
c0008e80:	6a 68                	push   0x68
c0008e82:	6a 00                	push   0x0
c0008e84:	50                   	push   eax
c0008e85:	e8 66 76 ff ff       	call   c00004f0 <memset>
c0008e8a:	83 c4 10             	add    esp,0x10
c0008e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e90:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e93:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008e9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008e9f:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008ea5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ea8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008eab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008eae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008eb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008eb4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008eb7:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008ebd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ec0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ec3:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ecc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ecf:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0008ed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ed8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008edb:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0008ee1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ee4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ee7:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0008eed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ef0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ef3:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0008ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008efc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008eff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0008f02:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0008f05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f0b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f0e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0008f11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f14:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f17:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0008f1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f21:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f24:	0f 20 da             	mov    edx,cr3
c0008f27:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0008f2a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0008f2d:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0008f30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f33:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f36:	83 ec 08             	sub    esp,0x8
c0008f39:	50                   	push   eax
c0008f3a:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008f3d:	50                   	push   eax
c0008f3e:	e8 e1 e2 ff ff       	call   c0007224 <GDTEntry::setBase(unsigned int)>
c0008f43:	83 c4 10             	add    esp,0x10
c0008f46:	83 ec 08             	sub    esp,0x8
c0008f49:	6a 68                	push   0x68
c0008f4b:	8d 45 ec             	lea    eax,[ebp-0x14]
c0008f4e:	50                   	push   eax
c0008f4f:	e8 ec e2 ff ff       	call   c0007240 <GDTEntry::setLimit(unsigned int)>
c0008f54:	83 c4 10             	add    esp,0x10
c0008f57:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0008f5b:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008f5e:	83 e0 0f             	and    eax,0xf
c0008f61:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008f64:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0008f67:	83 c8 40             	or     eax,0x40
c0008f6a:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0008f6d:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0008f72:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008f78:	05 78 01 00 00       	add    eax,0x178
c0008f7d:	83 ec 04             	sub    esp,0x4
c0008f80:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0008f83:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c0008f86:	50                   	push   eax
c0008f87:	e8 e8 e2 ff ff       	call   c0007274 <GDT::addEntry(GDTEntry)>
c0008f8c:	83 c4 10             	add    esp,0x10
c0008f8f:	89 c2                	mov    edx,eax
c0008f91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f94:	89 10                	mov    DWORD PTR [eax],edx
c0008f96:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0008f9b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0008fa1:	05 78 01 00 00       	add    eax,0x178
c0008fa6:	83 ec 0c             	sub    esp,0xc
c0008fa9:	50                   	push   eax
c0008faa:	e8 ef e2 ff ff       	call   c000729e <GDT::flush()>
c0008faf:	83 c4 10             	add    esp,0x10
c0008fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fb5:	8b 00                	mov    eax,DWORD PTR [eax]
c0008fb7:	c9                   	leave  
c0008fb8:	c3                   	ret    
c0008fb9:	90                   	nop

c0008fba <ReservedFilename::read(unsigned long long, void*, int*)>:
c0008fba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008fbe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008fc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fc5:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0008fca:	75 08                	jne    c0008fd4 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0008fcc:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0008fd2:	eb 38                	jmp    c000900c <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0008fd4:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0008fd9:	75 17                	jne    c0008ff2 <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0008fdb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0008fe0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0008fe3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0008fe9:	8b 10                	mov    edx,DWORD PTR [eax]
c0008feb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0008fef:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c0008ff2:	89 c1                	mov    ecx,eax
c0008ff4:	83 e1 fd             	and    ecx,0xfffffffd
c0008ff7:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0008ffd:	74 cd                	je     c0008fcc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0008fff:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009004:	83 e0 ef             	and    eax,0xffffffef
c0009007:	83 f8 08             	cmp    eax,0x8
c000900a:	76 c0                	jbe    c0008fcc <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000900c:	31 c0                	xor    eax,eax
c000900e:	c3                   	ret    
c000900f:	90                   	nop

c0009010 <ReservedFilename::isAtty()>:
c0009010:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009014:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009017:	31 c0                	xor    eax,eax
c0009019:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000901f:	74 09                	je     c000902a <ReservedFilename::isAtty()+0x1a>
c0009021:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009027:	0f 94 c0             	sete   al
c000902a:	c3                   	ret    
c000902b:	90                   	nop

c000902c <ReservedFilename::write(unsigned long long, void*, int*)>:
c000902c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009030:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000903b:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0009040:	75 08                	jne    c000904a <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c0009042:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009048:	eb 3d                	jmp    c0009087 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000904a:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000904f:	75 17                	jne    c0009068 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c0009051:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009056:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009059:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000905f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009061:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009065:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009068:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c000906d:	75 04                	jne    c0009073 <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000906f:	89 0a                	mov    DWORD PTR [edx],ecx
c0009071:	eb 14                	jmp    c0009087 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009073:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0009078:	74 c8                	je     c0009042 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c000907a:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c000907f:	83 e0 ef             	and    eax,0xffffffef
c0009082:	83 f8 08             	cmp    eax,0x8
c0009085:	76 bb                	jbe    c0009042 <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0009087:	31 c0                	xor    eax,eax
c0009089:	c3                   	ret    

c000908a <UnixFile::getFileDescriptor()>:
c000908a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000908e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009091:	c3                   	ret    

c0009092 <UnixFile::UnixFile(int)>:
c0009092:	53                   	push   ebx
c0009093:	83 ec 28             	sub    esp,0x28
c0009096:	ba e8 d3 01 c0       	mov    edx,0xc001d3e8
c000909b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000909f:	89 10                	mov    DWORD PTR [eax],edx
c00090a1:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00090a9:	0f 8f 8c 01 00 00    	jg     c000923b <UnixFile::UnixFile(int)+0x1a9>
c00090af:	a1 e0 f2 01 c0       	mov    eax,ds:0xc001f2e0
c00090b4:	8d 50 01             	lea    edx,[eax+0x1]
c00090b7:	89 15 e0 f2 01 c0    	mov    DWORD PTR ds:0xc001f2e0,edx
c00090bd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00090c1:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00090c4:	83 ec 08             	sub    esp,0x8
c00090c7:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00090cb:	68 58 04 02 c0       	push   0xc0020458
c00090d0:	e8 b3 2d 01 00       	call   c001be88 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00090d5:	83 c4 10             	add    esp,0x10
c00090d8:	a0 54 04 02 c0       	mov    al,ds:0xc0020454
c00090dd:	83 f0 01             	xor    eax,0x1
c00090e0:	84 c0                	test   al,al
c00090e2:	0f 84 54 01 00 00    	je     c000923c <UnixFile::UnixFile(int)+0x1aa>
c00090e8:	c6 05 54 04 02 c0 01 	mov    BYTE PTR ds:0xc0020454,0x1
c00090ef:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00090f7:	83 ec 0c             	sub    esp,0xc
c00090fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00090fe:	e8 96 e8 ff ff       	call   c0007999 <malloc>
c0009103:	83 c4 10             	add    esp,0x10
c0009106:	89 c3                	mov    ebx,eax
c0009108:	83 ec 08             	sub    esp,0x8
c000910b:	68 03 ff ff 0f       	push   0xfffff03
c0009110:	53                   	push   ebx
c0009111:	e8 2c 01 00 00       	call   c0009242 <ReservedFilename::ReservedFilename(int)>
c0009116:	83 c4 10             	add    esp,0x10
c0009119:	89 1d 4c 04 02 c0    	mov    DWORD PTR ds:0xc002044c,ebx
c000911f:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009127:	83 ec 0c             	sub    esp,0xc
c000912a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000912e:	e8 66 e8 ff ff       	call   c0007999 <malloc>
c0009133:	83 c4 10             	add    esp,0x10
c0009136:	89 c3                	mov    ebx,eax
c0009138:	83 ec 08             	sub    esp,0x8
c000913b:	68 01 ff ff 0f       	push   0xfffff01
c0009140:	53                   	push   ebx
c0009141:	e8 fc 00 00 00       	call   c0009242 <ReservedFilename::ReservedFilename(int)>
c0009146:	83 c4 10             	add    esp,0x10
c0009149:	89 1d 50 04 02 c0    	mov    DWORD PTR ds:0xc0020450,ebx
c000914f:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009157:	83 ec 0c             	sub    esp,0xc
c000915a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000915e:	e8 36 e8 ff ff       	call   c0007999 <malloc>
c0009163:	83 c4 10             	add    esp,0x10
c0009166:	89 c3                	mov    ebx,eax
c0009168:	83 ec 08             	sub    esp,0x8
c000916b:	68 00 ff ff 0f       	push   0xfffff00
c0009170:	53                   	push   ebx
c0009171:	e8 cc 00 00 00       	call   c0009242 <ReservedFilename::ReservedFilename(int)>
c0009176:	83 c4 10             	add    esp,0x10
c0009179:	89 1d 44 04 02 c0    	mov    DWORD PTR ds:0xc0020444,ebx
c000917f:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0009187:	83 ec 0c             	sub    esp,0xc
c000918a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000918e:	e8 06 e8 ff ff       	call   c0007999 <malloc>
c0009193:	83 c4 10             	add    esp,0x10
c0009196:	89 c3                	mov    ebx,eax
c0009198:	83 ec 08             	sub    esp,0x8
c000919b:	68 02 ff ff 0f       	push   0xfffff02
c00091a0:	53                   	push   ebx
c00091a1:	e8 9c 00 00 00       	call   c0009242 <ReservedFilename::ReservedFilename(int)>
c00091a6:	83 c4 10             	add    esp,0x10
c00091a9:	89 1d 48 04 02 c0    	mov    DWORD PTR ds:0xc0020448,ebx
c00091af:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00091b7:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00091bc:	7f 7e                	jg     c000923c <UnixFile::UnixFile(int)+0x1aa>
c00091be:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00091c6:	83 ec 0c             	sub    esp,0xc
c00091c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00091cd:	e8 c7 e7 ff ff       	call   c0007999 <malloc>
c00091d2:	83 c4 10             	add    esp,0x10
c00091d5:	89 c3                	mov    ebx,eax
c00091d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091db:	05 10 ff ff 0f       	add    eax,0xfffff10
c00091e0:	83 ec 08             	sub    esp,0x8
c00091e3:	50                   	push   eax
c00091e4:	53                   	push   ebx
c00091e5:	e8 58 00 00 00       	call   c0009242 <ReservedFilename::ReservedFilename(int)>
c00091ea:	83 c4 10             	add    esp,0x10
c00091ed:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00091f1:	89 1c 85 20 04 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfbe0],ebx
c00091f8:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c0009200:	83 ec 0c             	sub    esp,0xc
c0009203:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009207:	e8 8d e7 ff ff       	call   c0007999 <malloc>
c000920c:	83 c4 10             	add    esp,0x10
c000920f:	89 c3                	mov    ebx,eax
c0009211:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009215:	05 20 ff ff 0f       	add    eax,0xfffff20
c000921a:	83 ec 08             	sub    esp,0x8
c000921d:	50                   	push   eax
c000921e:	53                   	push   ebx
c000921f:	e8 1e 00 00 00       	call   c0009242 <ReservedFilename::ReservedFilename(int)>
c0009224:	83 c4 10             	add    esp,0x10
c0009227:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000922b:	89 1c 85 e0 03 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfc20],ebx
c0009232:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009236:	e9 7c ff ff ff       	jmp    c00091b7 <UnixFile::UnixFile(int)+0x125>
c000923b:	90                   	nop
c000923c:	83 c4 28             	add    esp,0x28
c000923f:	5b                   	pop    ebx
c0009240:	c3                   	ret    
c0009241:	90                   	nop

c0009242 <ReservedFilename::ReservedFilename(int)>:
c0009242:	83 ec 0c             	sub    esp,0xc
c0009245:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009249:	83 ec 08             	sub    esp,0x8
c000924c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009250:	50                   	push   eax
c0009251:	e8 3c fe ff ff       	call   c0009092 <UnixFile::UnixFile(int)>
c0009256:	83 c4 10             	add    esp,0x10
c0009259:	ba 04 d4 01 c0       	mov    edx,0xc001d404
c000925e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009262:	89 10                	mov    DWORD PTR [eax],edx
c0009264:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009268:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000926c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000926f:	90                   	nop
c0009270:	83 c4 0c             	add    esp,0xc
c0009273:	c3                   	ret    

c0009274 <UnixFile::~UnixFile()>:
c0009274:	83 ec 1c             	sub    esp,0x1c
c0009277:	ba e8 d3 01 c0       	mov    edx,0xc001d3e8
c000927c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009280:	89 10                	mov    DWORD PTR [eax],edx
c0009282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0009286:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009289:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c000928e:	7f 73                	jg     c0009303 <UnixFile::~UnixFile()+0x8f>
c0009290:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009298:	83 ec 0c             	sub    esp,0xc
c000929b:	68 58 04 02 c0       	push   0xc0020458
c00092a0:	e8 b7 2c 01 00       	call   c001bf5c <LinkedList<UnixFile>::getFirstElement()>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00092ac:	83 ec 0c             	sub    esp,0xc
c00092af:	68 58 04 02 c0       	push   0xc0020458
c00092b4:	e8 ab 2c 01 00       	call   c001bf64 <LinkedList<UnixFile>::removeFirst()>
c00092b9:	83 c4 10             	add    esp,0x10
c00092bc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00092c0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00092c4:	74 40                	je     c0009306 <UnixFile::~UnixFile()+0x92>
c00092c6:	83 ec 08             	sub    esp,0x8
c00092c9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092cd:	68 58 04 02 c0       	push   0xc0020458
c00092d2:	e8 b1 2b 01 00       	call   c001be88 <LinkedList<UnixFile>::addElement(UnixFile*)>
c00092d7:	83 c4 10             	add    esp,0x10
c00092da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00092de:	8d 50 01             	lea    edx,[eax+0x1]
c00092e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00092e5:	3d 88 13 00 00       	cmp    eax,0x1388
c00092ea:	0f 94 c0             	sete   al
c00092ed:	84 c0                	test   al,al
c00092ef:	74 a7                	je     c0009298 <UnixFile::~UnixFile()+0x24>
c00092f1:	83 ec 0c             	sub    esp,0xc
c00092f4:	68 c0 d3 01 c0       	push   0xc001d3c0
c00092f9:	e8 79 6f 00 00       	call   c0010277 <Krnl::panic(char const*)>
c00092fe:	83 c4 10             	add    esp,0x10
c0009301:	eb 95                	jmp    c0009298 <UnixFile::~UnixFile()+0x24>
c0009303:	90                   	nop
c0009304:	eb 01                	jmp    c0009307 <UnixFile::~UnixFile()+0x93>
c0009306:	90                   	nop
c0009307:	90                   	nop
c0009308:	83 c4 1c             	add    esp,0x1c
c000930b:	c3                   	ret    

c000930c <UnixFile::~UnixFile()>:
c000930c:	83 ec 0c             	sub    esp,0xc
c000930f:	83 ec 0c             	sub    esp,0xc
c0009312:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009316:	e8 59 ff ff ff       	call   c0009274 <UnixFile::~UnixFile()>
c000931b:	83 c4 10             	add    esp,0x10
c000931e:	83 ec 08             	sub    esp,0x8
c0009321:	6a 0c                	push   0xc
c0009323:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009327:	e8 06 13 00 00       	call   c000a632 <operator delete(void*, unsigned long)>
c000932c:	83 c4 10             	add    esp,0x10
c000932f:	83 c4 0c             	add    esp,0xc
c0009332:	c3                   	ret    
c0009333:	90                   	nop

c0009334 <ReservedFilename::~ReservedFilename()>:
c0009334:	83 ec 0c             	sub    esp,0xc
c0009337:	ba 04 d4 01 c0       	mov    edx,0xc001d404
c000933c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009340:	89 10                	mov    DWORD PTR [eax],edx
c0009342:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009346:	83 ec 0c             	sub    esp,0xc
c0009349:	50                   	push   eax
c000934a:	e8 25 ff ff ff       	call   c0009274 <UnixFile::~UnixFile()>
c000934f:	83 c4 10             	add    esp,0x10
c0009352:	90                   	nop
c0009353:	83 c4 0c             	add    esp,0xc
c0009356:	c3                   	ret    
c0009357:	90                   	nop

c0009358 <ReservedFilename::~ReservedFilename()>:
c0009358:	83 ec 0c             	sub    esp,0xc
c000935b:	83 ec 0c             	sub    esp,0xc
c000935e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009362:	e8 cd ff ff ff       	call   c0009334 <ReservedFilename::~ReservedFilename()>
c0009367:	83 c4 10             	add    esp,0x10
c000936a:	83 ec 08             	sub    esp,0x8
c000936d:	6a 0c                	push   0xc
c000936f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009373:	e8 ba 12 00 00       	call   c000a632 <operator delete(void*, unsigned long)>
c0009378:	83 c4 10             	add    esp,0x10
c000937b:	83 c4 0c             	add    esp,0xc
c000937e:	c3                   	ret    

c000937f <getFromFileDescriptor(int)>:
c000937f:	53                   	push   ebx
c0009380:	83 ec 08             	sub    esp,0x8
c0009383:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009387:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c000938d:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0009393:	7f 2c                	jg     c00093c1 <getFromFileDescriptor(int)+0x42>
c0009395:	83 ec 0c             	sub    esp,0xc
c0009398:	68 58 04 02 c0       	push   0xc0020458
c000939d:	e8 ba 2b 01 00       	call   c001bf5c <LinkedList<UnixFile>::getFirstElement()>
c00093a2:	83 c4 10             	add    esp,0x10
c00093a5:	85 c0                	test   eax,eax
c00093a7:	75 04                	jne    c00093ad <getFromFileDescriptor(int)+0x2e>
c00093a9:	31 c0                	xor    eax,eax
c00093ab:	eb 6e                	jmp    c000941b <getFromFileDescriptor(int)+0x9c>
c00093ad:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00093b0:	74 69                	je     c000941b <getFromFileDescriptor(int)+0x9c>
c00093b2:	52                   	push   edx
c00093b3:	52                   	push   edx
c00093b4:	50                   	push   eax
c00093b5:	68 58 04 02 c0       	push   0xc0020458
c00093ba:	e8 47 2c 01 00       	call   c001c006 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00093bf:	eb e1                	jmp    c00093a2 <getFromFileDescriptor(int)+0x23>
c00093c1:	a1 4c 04 02 c0       	mov    eax,ds:0xc002044c
c00093c6:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c00093cc:	74 4d                	je     c000941b <getFromFileDescriptor(int)+0x9c>
c00093ce:	a1 50 04 02 c0       	mov    eax,ds:0xc0020450
c00093d3:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c00093d9:	74 40                	je     c000941b <getFromFileDescriptor(int)+0x9c>
c00093db:	a1 48 04 02 c0       	mov    eax,ds:0xc0020448
c00093e0:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c00093e6:	74 33                	je     c000941b <getFromFileDescriptor(int)+0x9c>
c00093e8:	a1 44 04 02 c0       	mov    eax,ds:0xc0020444
c00093ed:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c00093f3:	74 26                	je     c000941b <getFromFileDescriptor(int)+0x9c>
c00093f5:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c00093fb:	83 f8 08             	cmp    eax,0x8
c00093fe:	77 09                	ja     c0009409 <getFromFileDescriptor(int)+0x8a>
c0009400:	8b 04 85 20 04 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdfbe0]
c0009407:	eb 12                	jmp    c000941b <getFromFileDescriptor(int)+0x9c>
c0009409:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c000940f:	83 fb 08             	cmp    ebx,0x8
c0009412:	77 95                	ja     c00093a9 <getFromFileDescriptor(int)+0x2a>
c0009414:	8b 04 9d e0 03 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdfc20]
c000941b:	83 c4 08             	add    esp,0x8
c000941e:	5b                   	pop    ebx
c000941f:	c3                   	ret    

c0009420 <__static_initialization_and_destruction_0(int, int)>:
c0009420:	83 ec 0c             	sub    esp,0xc
c0009423:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0009428:	75 34                	jne    c000945e <__static_initialization_and_destruction_0(int, int)+0x3e>
c000942a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009432:	75 2a                	jne    c000945e <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009434:	83 ec 0c             	sub    esp,0xc
c0009437:	68 58 04 02 c0       	push   0xc0020458
c000943c:	e8 05 2a 01 00       	call   c001be46 <LinkedList<UnixFile>::LinkedList()>
c0009441:	83 c4 10             	add    esp,0x10
c0009444:	83 ec 04             	sub    esp,0x4
c0009447:	68 04 f1 01 c0       	push   0xc001f104
c000944c:	68 58 04 02 c0       	push   0xc0020458
c0009451:	68 44 be 01 c0       	push   0xc001be44
c0009456:	e8 87 11 00 00       	call   c000a5e2 <__cxa_atexit>
c000945b:	83 c4 10             	add    esp,0x10
c000945e:	90                   	nop
c000945f:	83 c4 0c             	add    esp,0xc
c0009462:	c3                   	ret    

c0009463 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009463:	83 ec 0c             	sub    esp,0xc
c0009466:	83 ec 08             	sub    esp,0x8
c0009469:	68 ff ff 00 00       	push   0xffff
c000946e:	6a 01                	push   0x1
c0009470:	e8 ab ff ff ff       	call   c0009420 <__static_initialization_and_destruction_0(int, int)>
c0009475:	83 c4 10             	add    esp,0x10
c0009478:	83 c4 0c             	add    esp,0xc
c000947b:	c3                   	ret    

c000947c <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c000947c:	53                   	push   ebx
c000947d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009481:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009485:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c000948b:	89 c8                	mov    eax,ecx
c000948d:	d1 e8                	shr    eax,1
c000948f:	03 05 e8 f2 01 c0    	add    eax,DWORD PTR ds:0xc001f2e8
c0009495:	83 e1 01             	and    ecx,0x1
c0009498:	8a 10                	mov    dl,BYTE PTR [eax]
c000949a:	75 09                	jne    c00094a5 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c000949c:	83 e2 f0             	and    edx,0xfffffff0
c000949f:	09 da                	or     edx,ebx
c00094a1:	88 10                	mov    BYTE PTR [eax],dl
c00094a3:	5b                   	pop    ebx
c00094a4:	c3                   	ret    
c00094a5:	c1 e3 04             	shl    ebx,0x4
c00094a8:	83 e2 0f             	and    edx,0xf
c00094ab:	09 da                	or     edx,ebx
c00094ad:	88 10                	mov    BYTE PTR [eax],dl
c00094af:	5b                   	pop    ebx
c00094b0:	c3                   	ret    

c00094b1 <Virt::getPageState(unsigned long)>:
c00094b1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00094b5:	8b 0d e8 f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2e8
c00094bb:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00094c1:	89 d0                	mov    eax,edx
c00094c3:	d1 e8                	shr    eax,1
c00094c5:	83 e2 01             	and    edx,0x1
c00094c8:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c00094cb:	75 04                	jne    c00094d1 <Virt::getPageState(unsigned long)+0x20>
c00094cd:	83 e0 0f             	and    eax,0xf
c00094d0:	c3                   	ret    
c00094d1:	c0 e8 04             	shr    al,0x4
c00094d4:	c3                   	ret    

c00094d5 <Virt::allocateKernelVirtualPages(int)>:
c00094d5:	55                   	push   ebp
c00094d6:	31 ed                	xor    ebp,ebp
c00094d8:	57                   	push   edi
c00094d9:	56                   	push   esi
c00094da:	53                   	push   ebx
c00094db:	31 db                	xor    ebx,ebx
c00094dd:	83 ec 1c             	sub    esp,0x1c
c00094e0:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00094e4:	8b 3d e4 f2 01 c0    	mov    edi,DWORD PTR ds:0xc001f2e4
c00094ea:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00094ef:	57                   	push   edi
c00094f0:	e8 bc ff ff ff       	call   c00094b1 <Virt::getPageState(unsigned long)>
c00094f5:	5a                   	pop    edx
c00094f6:	84 c0                	test   al,al
c00094f8:	75 3a                	jne    c0009534 <Virt::allocateKernelVirtualPages(int)+0x5f>
c00094fa:	85 db                	test   ebx,ebx
c00094fc:	75 02                	jne    c0009500 <Virt::allocateKernelVirtualPages(int)+0x2b>
c00094fe:	89 fd                	mov    ebp,edi
c0009500:	43                   	inc    ebx
c0009501:	39 f3                	cmp    ebx,esi
c0009503:	74 5a                	je     c000955f <Virt::allocateKernelVirtualPages(int)+0x8a>
c0009505:	47                   	inc    edi
c0009506:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000950c:	76 31                	jbe    c000953f <Virt::allocateKernelVirtualPages(int)+0x6a>
c000950e:	c7 05 e4 f2 01 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc001f2e4,0xc8000
c0009518:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c000951d:	75 28                	jne    c0009547 <Virt::allocateKernelVirtualPages(int)+0x72>
c000951f:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0009524:	bf 00 80 0c 00       	mov    edi,0xc8000
c0009529:	57                   	push   edi
c000952a:	e8 82 ff ff ff       	call   c00094b1 <Virt::getPageState(unsigned long)>
c000952f:	5a                   	pop    edx
c0009530:	84 c0                	test   al,al
c0009532:	74 c6                	je     c00094fa <Virt::allocateKernelVirtualPages(int)+0x25>
c0009534:	31 db                	xor    ebx,ebx
c0009536:	47                   	inc    edi
c0009537:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c000953d:	77 cf                	ja     c000950e <Virt::allocateKernelVirtualPages(int)+0x39>
c000953f:	89 3d e4 f2 01 c0    	mov    DWORD PTR ds:0xc001f2e4,edi
c0009545:	eb a8                	jmp    c00094ef <Virt::allocateKernelVirtualPages(int)+0x1a>
c0009547:	83 ec 0c             	sub    esp,0xc
c000954a:	68 18 d4 01 c0       	push   0xc001d418
c000954f:	e8 23 6d 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0009554:	8b 3d e4 f2 01 c0    	mov    edi,DWORD PTR ds:0xc001f2e4
c000955a:	83 c4 10             	add    esp,0x10
c000955d:	eb 90                	jmp    c00094ef <Virt::allocateKernelVirtualPages(int)+0x1a>
c000955f:	89 2d e4 f2 01 c0    	mov    DWORD PTR ds:0xc001f2e4,ebp
c0009565:	4b                   	dec    ebx
c0009566:	74 5f                	je     c00095c7 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0009568:	85 f6                	test   esi,esi
c000956a:	74 3d                	je     c00095a9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c000956c:	89 e8                	mov    eax,ebp
c000956e:	31 db                	xor    ebx,ebx
c0009570:	8d 7e ff             	lea    edi,[esi-0x1]
c0009573:	eb 14                	jmp    c0009589 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0009575:	6a 01                	push   0x1
c0009577:	43                   	inc    ebx
c0009578:	50                   	push   eax
c0009579:	e8 fe fe ff ff       	call   c000947c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000957e:	58                   	pop    eax
c000957f:	39 f3                	cmp    ebx,esi
c0009581:	5a                   	pop    edx
c0009582:	74 25                	je     c00095a9 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0009584:	a1 e4 f2 01 c0       	mov    eax,ds:0xc001f2e4
c0009589:	8d 50 01             	lea    edx,[eax+0x1]
c000958c:	85 db                	test   ebx,ebx
c000958e:	89 15 e4 f2 01 c0    	mov    DWORD PTR ds:0xc001f2e4,edx
c0009594:	74 20                	je     c00095b6 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0009596:	39 df                	cmp    edi,ebx
c0009598:	75 db                	jne    c0009575 <Virt::allocateKernelVirtualPages(int)+0xa0>
c000959a:	6a 03                	push   0x3
c000959c:	43                   	inc    ebx
c000959d:	50                   	push   eax
c000959e:	e8 d9 fe ff ff       	call   c000947c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00095a3:	59                   	pop    ecx
c00095a4:	39 f3                	cmp    ebx,esi
c00095a6:	58                   	pop    eax
c00095a7:	75 db                	jne    c0009584 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00095a9:	83 c4 1c             	add    esp,0x1c
c00095ac:	89 e8                	mov    eax,ebp
c00095ae:	5b                   	pop    ebx
c00095af:	c1 e0 0c             	shl    eax,0xc
c00095b2:	5e                   	pop    esi
c00095b3:	5f                   	pop    edi
c00095b4:	5d                   	pop    ebp
c00095b5:	c3                   	ret    
c00095b6:	6a 02                	push   0x2
c00095b8:	bb 01 00 00 00       	mov    ebx,0x1
c00095bd:	50                   	push   eax
c00095be:	e8 b9 fe ff ff       	call   c000947c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00095c3:	58                   	pop    eax
c00095c4:	5a                   	pop    edx
c00095c5:	eb bd                	jmp    c0009584 <Virt::allocateKernelVirtualPages(int)+0xaf>
c00095c7:	6a 04                	push   0x4
c00095c9:	8d 45 01             	lea    eax,[ebp+0x1]
c00095cc:	55                   	push   ebp
c00095cd:	a3 e4 f2 01 c0       	mov    ds:0xc001f2e4,eax
c00095d2:	e8 a5 fe ff ff       	call   c000947c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00095d7:	59                   	pop    ecx
c00095d8:	89 e8                	mov    eax,ebp
c00095da:	5b                   	pop    ebx
c00095db:	c1 e0 0c             	shl    eax,0xc
c00095de:	83 c4 1c             	add    esp,0x1c
c00095e1:	5b                   	pop    ebx
c00095e2:	5e                   	pop    esi
c00095e3:	5f                   	pop    edi
c00095e4:	5d                   	pop    ebp
c00095e5:	c3                   	ret    

c00095e6 <Virt::freeSwapfilePage(unsigned long)>:
c00095e6:	53                   	push   ebx
c00095e7:	8b 15 6c 04 02 c0    	mov    edx,DWORD PTR ds:0xc002046c
c00095ed:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00095f1:	b8 01 00 00 00       	mov    eax,0x1
c00095f6:	89 cb                	mov    ebx,ecx
c00095f8:	d3 e0                	shl    eax,cl
c00095fa:	c1 eb 05             	shr    ebx,0x5
c00095fd:	f7 d0                	not    eax
c00095ff:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0009602:	5b                   	pop    ebx
c0009603:	c3                   	ret    

c0009604 <Virt::swapIDToSector(unsigned long)>:
c0009604:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009608:	0f af 05 ec f2 01 c0 	imul   eax,DWORD PTR ds:0xc001f2ec
c000960f:	03 05 f4 f2 01 c0    	add    eax,DWORD PTR ds:0xc001f2f4
c0009615:	c3                   	ret    

c0009616 <Virt::allocateSwapfilePage()>:
c0009616:	55                   	push   ebp
c0009617:	31 d2                	xor    edx,edx
c0009619:	57                   	push   edi
c000961a:	56                   	push   esi
c000961b:	53                   	push   ebx
c000961c:	83 ec 0c             	sub    esp,0xc
c000961f:	8b 0d ec f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2ec
c0009625:	a1 f0 f2 01 c0       	mov    eax,ds:0xc001f2f0
c000962a:	f7 f1                	div    ecx
c000962c:	39 0d f0 f2 01 c0    	cmp    DWORD PTR ds:0xc001f2f0,ecx
c0009632:	72 2d                	jb     c0009661 <Virt::allocateSwapfilePage()+0x4b>
c0009634:	8b 35 6c 04 02 c0    	mov    esi,DWORD PTR ds:0xc002046c
c000963a:	8b 16                	mov    edx,DWORD PTR [esi]
c000963c:	f6 c2 01             	test   dl,0x1
c000963f:	74 3c                	je     c000967d <Virt::allocateSwapfilePage()+0x67>
c0009641:	31 c9                	xor    ecx,ecx
c0009643:	bf 01 00 00 00       	mov    edi,0x1
c0009648:	eb 12                	jmp    c000965c <Virt::allocateSwapfilePage()+0x46>
c000964a:	89 fd                	mov    ebp,edi
c000964c:	89 ca                	mov    edx,ecx
c000964e:	d3 e5                	shl    ebp,cl
c0009650:	c1 ea 05             	shr    edx,0x5
c0009653:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0009656:	8b 13                	mov    edx,DWORD PTR [ebx]
c0009658:	85 ea                	test   edx,ebp
c000965a:	74 2a                	je     c0009686 <Virt::allocateSwapfilePage()+0x70>
c000965c:	41                   	inc    ecx
c000965d:	39 c8                	cmp    eax,ecx
c000965f:	77 e9                	ja     c000964a <Virt::allocateSwapfilePage()+0x34>
c0009661:	83 ec 0c             	sub    esp,0xc
c0009664:	68 7f d5 01 c0       	push   0xc001d57f
c0009669:	e8 09 6c 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000966e:	83 c4 10             	add    esp,0x10
c0009671:	31 c9                	xor    ecx,ecx
c0009673:	83 c4 0c             	add    esp,0xc
c0009676:	89 c8                	mov    eax,ecx
c0009678:	5b                   	pop    ebx
c0009679:	5e                   	pop    esi
c000967a:	5f                   	pop    edi
c000967b:	5d                   	pop    ebp
c000967c:	c3                   	ret    
c000967d:	89 f3                	mov    ebx,esi
c000967f:	bd 01 00 00 00       	mov    ebp,0x1
c0009684:	31 c9                	xor    ecx,ecx
c0009686:	09 ea                	or     edx,ebp
c0009688:	89 c8                	mov    eax,ecx
c000968a:	89 13                	mov    DWORD PTR [ebx],edx
c000968c:	83 c4 0c             	add    esp,0xc
c000968f:	5b                   	pop    ebx
c0009690:	5e                   	pop    esi
c0009691:	5f                   	pop    edi
c0009692:	5d                   	pop    ebp
c0009693:	c3                   	ret    

c0009694 <Virt::virtualMemorySetup()>:
c0009694:	53                   	push   ebx
c0009695:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000969a:	6a 0f                	push   0xf
c000969c:	53                   	push   ebx
c000969d:	43                   	inc    ebx
c000969e:	e8 d9 fd ff ff       	call   c000947c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096a3:	58                   	pop    eax
c00096a4:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00096aa:	5a                   	pop    edx
c00096ab:	75 ed                	jne    c000969a <Virt::virtualMemorySetup()+0x6>
c00096ad:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00096b2:	6a 00                	push   0x0
c00096b4:	53                   	push   ebx
c00096b5:	43                   	inc    ebx
c00096b6:	e8 c1 fd ff ff       	call   c000947c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096bb:	59                   	pop    ecx
c00096bc:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c00096c2:	58                   	pop    eax
c00096c3:	75 ed                	jne    c00096b2 <Virt::virtualMemorySetup()+0x1e>
c00096c5:	bb 00 00 0d 00       	mov    ebx,0xd0000
c00096ca:	6a 0f                	push   0xf
c00096cc:	53                   	push   ebx
c00096cd:	43                   	inc    ebx
c00096ce:	e8 a9 fd ff ff       	call   c000947c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096d3:	58                   	pop    eax
c00096d4:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c00096da:	5a                   	pop    edx
c00096db:	75 ed                	jne    c00096ca <Virt::virtualMemorySetup()+0x36>
c00096dd:	5b                   	pop    ebx
c00096de:	c3                   	ret    

c00096df <Virt::setupPageSwapping(int)>:
c00096df:	53                   	push   ebx
c00096e0:	83 ec 0c             	sub    esp,0xc
c00096e3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00096e7:	a1 e8 28 02 c0       	mov    eax,ds:0xc00228e8
c00096ec:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00096f2:	8b 10                	mov    edx,DWORD PTR [eax]
c00096f4:	53                   	push   ebx
c00096f5:	c1 e3 0b             	shl    ebx,0xb
c00096f8:	68 96 d5 01 c0       	push   0xc001d596
c00096fd:	50                   	push   eax
c00096fe:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0009701:	89 1d f0 f2 01 c0    	mov    DWORD PTR ds:0xc001f2f0,ebx
c0009707:	c6 05 f8 f2 01 c0 43 	mov    BYTE PTR ds:0xc001f2f8,0x43
c000970e:	c1 eb 08             	shr    ebx,0x8
c0009711:	a3 f4 f2 01 c0       	mov    ds:0xc001f2f4,eax
c0009716:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009719:	c7 05 ec f2 01 c0 08 00 00 00 	mov    DWORD PTR ds:0xc001f2ec,0x8
c0009723:	e8 71 e2 ff ff       	call   c0007999 <malloc>
c0009728:	83 c4 0c             	add    esp,0xc
c000972b:	89 c1                	mov    ecx,eax
c000972d:	a3 6c 04 02 c0       	mov    ds:0xc002046c,eax
c0009732:	31 d2                	xor    edx,edx
c0009734:	a1 f0 f2 01 c0       	mov    eax,ds:0xc001f2f0
c0009739:	f7 35 ec f2 01 c0    	div    DWORD PTR ds:0xc001f2ec
c000973f:	c1 e8 05             	shr    eax,0x5
c0009742:	50                   	push   eax
c0009743:	6a 00                	push   0x0
c0009745:	51                   	push   ecx
c0009746:	e8 a5 6d ff ff       	call   c00004f0 <memset>
c000974b:	83 c4 18             	add    esp,0x18
c000974e:	5b                   	pop    ebx
c000974f:	c3                   	ret    

c0009750 <VAS::VAS()>:
c0009750:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009754:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000975b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000975f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009766:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000976a:	a3 70 04 02 c0       	mov    ds:0xc0020470,eax
c000976f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009773:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009777:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000977b:	c6 00 01             	mov    BYTE PTR [eax],0x1
c000977e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009782:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009789:	90                   	nop
c000978a:	c3                   	ret    
c000978b:	90                   	nop

c000978c <VAS::VAS(VAS*)>:
c000978c:	83 ec 0c             	sub    esp,0xc
c000978f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009793:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000979a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000979e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00097a5:	83 ec 0c             	sub    esp,0xc
c00097a8:	68 38 d4 01 c0       	push   0xc001d438
c00097ad:	e8 c5 6a 00 00       	call   c0010277 <Krnl::panic(char const*)>
c00097b2:	83 c4 10             	add    esp,0x10
c00097b5:	90                   	nop
c00097b6:	83 c4 0c             	add    esp,0xc
c00097b9:	c3                   	ret    

c00097ba <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00097ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00097be:	89 c2                	mov    edx,eax
c00097c0:	c1 e8 0a             	shr    eax,0xa
c00097c3:	c1 ea 16             	shr    edx,0x16
c00097c6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00097cb:	19 c9                	sbb    ecx,ecx
c00097cd:	c1 e2 0c             	shl    edx,0xc
c00097d0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00097d6:	25 fc 0f 00 00       	and    eax,0xffc
c00097db:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c00097e2:	01 d0                	add    eax,edx
c00097e4:	c3                   	ret    
c00097e5:	90                   	nop

c00097e6 <VAS::getPageTableEntry(unsigned long)>:
c00097e6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00097ea:	89 ca                	mov    edx,ecx
c00097ec:	c1 e9 0a             	shr    ecx,0xa
c00097ef:	c1 ea 16             	shr    edx,0x16
c00097f2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c00097f8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c00097fe:	c1 e0 0c             	shl    eax,0xc
c0009801:	8d 04 08             	lea    eax,[eax+ecx*1]
c0009804:	c3                   	ret    

c0009805 <Virt::freeKernelVirtualPages(unsigned long)>:
c0009805:	57                   	push   edi
c0009806:	56                   	push   esi
c0009807:	be 01 00 00 00       	mov    esi,0x1
c000980c:	53                   	push   ebx
c000980d:	83 ec 10             	sub    esp,0x10
c0009810:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0009814:	c1 eb 0c             	shr    ebx,0xc
c0009817:	eb 3f                	jmp    c0009858 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0009819:	83 ec 08             	sub    esp,0x8
c000981c:	a1 70 04 02 c0       	mov    eax,ds:0xc0020470
c0009821:	57                   	push   edi
c0009822:	50                   	push   eax
c0009823:	e8 be ff ff ff       	call   c00097e6 <VAS::getPageTableEntry(unsigned long)>
c0009828:	83 c4 10             	add    esp,0x10
c000982b:	8b 00                	mov    eax,DWORD PTR [eax]
c000982d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009831:	f6 c4 04             	test   ah,0x4
c0009834:	75 60                	jne    c0009896 <Virt::freeKernelVirtualPages(unsigned long)+0x91>
c0009836:	80 fa 04             	cmp    dl,0x4
c0009839:	74 79                	je     c00098b4 <Virt::freeKernelVirtualPages(unsigned long)+0xaf>
c000983b:	80 fa 02             	cmp    dl,0x2
c000983e:	0f 84 89 00 00 00    	je     c00098cd <Virt::freeKernelVirtualPages(unsigned long)+0xc8>
c0009844:	80 fa 03             	cmp    dl,0x3
c0009847:	0f 84 ae 00 00 00    	je     c00098fb <Virt::freeKernelVirtualPages(unsigned long)+0xf6>
c000984d:	fe ca                	dec    dl
c000984f:	0f 84 93 00 00 00    	je     c00098e8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c0009855:	43                   	inc    ebx
c0009856:	31 f6                	xor    esi,esi
c0009858:	53                   	push   ebx
c0009859:	89 df                	mov    edi,ebx
c000985b:	e8 51 fc ff ff       	call   c00094b1 <Virt::getPageState(unsigned long)>
c0009860:	c1 e7 0c             	shl    edi,0xc
c0009863:	5a                   	pop    edx
c0009864:	84 c0                	test   al,al
c0009866:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000986a:	75 ad                	jne    c0009819 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c000986c:	83 ec 0c             	sub    esp,0xc
c000986f:	68 ad d5 01 c0       	push   0xc001d5ad
c0009874:	e8 fe 69 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0009879:	5a                   	pop    edx
c000987a:	59                   	pop    ecx
c000987b:	57                   	push   edi
c000987c:	8b 3d 70 04 02 c0    	mov    edi,DWORD PTR ds:0xc0020470
c0009882:	57                   	push   edi
c0009883:	e8 5e ff ff ff       	call   c00097e6 <VAS::getPageTableEntry(unsigned long)>
c0009888:	83 c4 10             	add    esp,0x10
c000988b:	8b 00                	mov    eax,DWORD PTR [eax]
c000988d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0009891:	f6 c4 04             	test   ah,0x4
c0009894:	74 bf                	je     c0009855 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0009896:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c000989a:	25 00 f0 ff ff       	and    eax,0xfffff000
c000989f:	83 ec 0c             	sub    esp,0xc
c00098a2:	50                   	push   eax
c00098a3:	e8 5c e4 ff ff       	call   c0007d04 <Phys::freePage(unsigned long)>
c00098a8:	83 c4 10             	add    esp,0x10
c00098ab:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00098af:	80 fa 04             	cmp    dl,0x4
c00098b2:	75 87                	jne    c000983b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c00098b4:	89 f0                	mov    eax,esi
c00098b6:	84 c0                	test   al,al
c00098b8:	75 47                	jne    c0009901 <Virt::freeKernelVirtualPages(unsigned long)+0xfc>
c00098ba:	c7 44 24 20 5c d4 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d45c
c00098c2:	83 c4 10             	add    esp,0x10
c00098c5:	5b                   	pop    ebx
c00098c6:	5e                   	pop    esi
c00098c7:	5f                   	pop    edi
c00098c8:	e9 aa 69 00 00       	jmp    c0010277 <Krnl::panic(char const*)>
c00098cd:	89 f0                	mov    eax,esi
c00098cf:	84 c0                	test   al,al
c00098d1:	75 15                	jne    c00098e8 <Virt::freeKernelVirtualPages(unsigned long)+0xe3>
c00098d3:	83 ec 0c             	sub    esp,0xc
c00098d6:	68 c9 d5 01 c0       	push   0xc001d5c9
c00098db:	e8 97 69 00 00       	call   c0010277 <Krnl::panic(char const*)>
c00098e0:	83 c4 10             	add    esp,0x10
c00098e3:	e9 6d ff ff ff       	jmp    c0009855 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00098e8:	83 ec 08             	sub    esp,0x8
c00098eb:	6a 00                	push   0x0
c00098ed:	53                   	push   ebx
c00098ee:	e8 89 fb ff ff       	call   c000947c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00098f3:	83 c4 10             	add    esp,0x10
c00098f6:	e9 5a ff ff ff       	jmp    c0009855 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c00098fb:	89 f0                	mov    eax,esi
c00098fd:	84 c0                	test   al,al
c00098ff:	75 15                	jne    c0009916 <Virt::freeKernelVirtualPages(unsigned long)+0x111>
c0009901:	83 ec 08             	sub    esp,0x8
c0009904:	6a 00                	push   0x0
c0009906:	53                   	push   ebx
c0009907:	e8 70 fb ff ff       	call   c000947c <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000990c:	83 c4 10             	add    esp,0x10
c000990f:	83 c4 10             	add    esp,0x10
c0009912:	5b                   	pop    ebx
c0009913:	5e                   	pop    esi
c0009914:	5f                   	pop    edi
c0009915:	c3                   	ret    
c0009916:	c7 44 24 20 e5 d5 01 c0 	mov    DWORD PTR [esp+0x20],0xc001d5e5
c000991e:	83 c4 10             	add    esp,0x10
c0009921:	5b                   	pop    ebx
c0009922:	5e                   	pop    esi
c0009923:	5f                   	pop    edi
c0009924:	e9 4e 69 00 00       	jmp    c0010277 <Krnl::panic(char const*)>
c0009929:	90                   	nop

c000992a <VAS::freeAllocatedPages(unsigned long)>:
c000992a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000992e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009932:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009936:	74 09                	je     c0009941 <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009938:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000993c:	e9 c4 fe ff ff       	jmp    c0009805 <Virt::freeKernelVirtualPages(unsigned long)>
c0009941:	c7 44 24 04 80 d4 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d480
c0009949:	e9 da 0d 00 00       	jmp    c000a728 <Dbg::kprintf(char const*, ...)>

c000994e <VAS::virtualToPhysical(unsigned long)>:
c000994e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009952:	50                   	push   eax
c0009953:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009957:	52                   	push   edx
c0009958:	e8 89 fe ff ff       	call   c00097e6 <VAS::getPageTableEntry(unsigned long)>
c000995d:	59                   	pop    ecx
c000995e:	8b 00                	mov    eax,DWORD PTR [eax]
c0009960:	5a                   	pop    edx
c0009961:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009966:	c3                   	ret    
c0009967:	90                   	nop

c0009968 <VAS::reflagRange(unsigned long, int, int, int)>:
c0009968:	55                   	push   ebp
c0009969:	57                   	push   edi
c000996a:	56                   	push   esi
c000996b:	53                   	push   ebx
c000996c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009970:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009974:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009978:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000997c:	85 db                	test   ebx,ebx
c000997e:	7e 22                	jle    c00099a2 <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0009980:	c1 e3 0c             	shl    ebx,0xc
c0009983:	01 f3                	add    ebx,esi
c0009985:	56                   	push   esi
c0009986:	81 c6 00 10 00 00    	add    esi,0x1000
c000998c:	55                   	push   ebp
c000998d:	e8 54 fe ff ff       	call   c00097e6 <VAS::getPageTableEntry(unsigned long)>
c0009992:	5a                   	pop    edx
c0009993:	59                   	pop    ecx
c0009994:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009996:	21 f9                	and    ecx,edi
c0009998:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c000999c:	39 f3                	cmp    ebx,esi
c000999e:	89 08                	mov    DWORD PTR [eax],ecx
c00099a0:	75 e3                	jne    c0009985 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c00099a2:	5b                   	pop    ebx
c00099a3:	5e                   	pop    esi
c00099a4:	5f                   	pop    edi
c00099a5:	5d                   	pop    ebp
c00099a6:	c3                   	ret    
c00099a7:	90                   	nop

c00099a8 <VAS::setToWriteCombining(unsigned long, int)>:
c00099a8:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c00099ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00099b3:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c00099ba:	75 01                	jne    c00099bd <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00099bc:	c3                   	ret    
c00099bd:	68 80 00 00 00       	push   0x80
c00099c2:	6a ff                	push   0xffffffff
c00099c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00099c8:	50                   	push   eax
c00099c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00099cd:	52                   	push   edx
c00099ce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00099d2:	51                   	push   ecx
c00099d3:	e8 90 ff ff ff       	call   c0009968 <VAS::reflagRange(unsigned long, int, int, int)>
c00099d8:	83 c4 14             	add    esp,0x14
c00099db:	c3                   	ret    

c00099dc <VAS::mapOtherVASIn(bool, VAS*)>:
c00099dc:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00099e1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e5:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00099e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00099ec:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00099ef:	19 c0                	sbb    eax,eax
c00099f1:	83 ca 03             	or     edx,0x3
c00099f4:	83 e0 fc             	and    eax,0xfffffffc
c00099f7:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00099fe:	0f 20 d8             	mov    eax,cr3
c0009a01:	0f 22 d8             	mov    cr3,eax
c0009a04:	c3                   	ret    
c0009a05:	90                   	nop

c0009a06 <VAS::~VAS()>:
c0009a06:	83 ec 2c             	sub    esp,0x2c
c0009a09:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009a11:	fa                   	cli    
c0009a12:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0009a17:	40                   	inc    eax
c0009a18:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0009a1d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009a22:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a24:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009a27:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009a2d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009a31:	6a 01                	push   0x1
c0009a33:	50                   	push   eax
c0009a34:	e8 a3 ff ff ff       	call   c00099dc <VAS::mapOtherVASIn(bool, VAS*)>
c0009a39:	83 c4 0c             	add    esp,0xc
c0009a3c:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009a44:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009a4c:	0f 8f d4 00 00 00    	jg     c0009b26 <VAS::~VAS()+0x120>
c0009a52:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009a56:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009a59:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009a5d:	c1 e2 02             	shl    edx,0x2
c0009a60:	01 d0                	add    eax,edx
c0009a62:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a64:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009a68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009a6c:	83 e0 01             	and    eax,0x1
c0009a6f:	0f 84 a8 00 00 00    	je     c0009b1d <VAS::~VAS()+0x117>
c0009a75:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a7d:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009a85:	7f 72                	jg     c0009af9 <VAS::~VAS()+0xf3>
c0009a87:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009a8b:	c1 e0 0a             	shl    eax,0xa
c0009a8e:	89 c2                	mov    edx,eax
c0009a90:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009a94:	01 d0                	add    eax,edx
c0009a96:	c1 e0 0c             	shl    eax,0xc
c0009a99:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009a9d:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009aa2:	8b 00                	mov    eax,DWORD PTR [eax]
c0009aa4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009aa7:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009aad:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009ab1:	6a 01                	push   0x1
c0009ab3:	50                   	push   eax
c0009ab4:	e8 01 fd ff ff       	call   c00097ba <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009ab9:	83 c4 0c             	add    esp,0xc
c0009abc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ac0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009ac4:	8b 00                	mov    eax,DWORD PTR [eax]
c0009ac6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009aca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ace:	25 01 04 00 00       	and    eax,0x401
c0009ad3:	3d 01 04 00 00       	cmp    eax,0x401
c0009ad8:	75 19                	jne    c0009af3 <VAS::~VAS()+0xed>
c0009ada:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009ade:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009ae3:	83 ec 0c             	sub    esp,0xc
c0009ae6:	50                   	push   eax
c0009ae7:	e8 18 e2 ff ff       	call   c0007d04 <Phys::freePage(unsigned long)>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009af3:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0009af7:	eb 84                	jmp    c0009a7d <VAS::~VAS()+0x77>
c0009af9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009afd:	25 00 04 00 00       	and    eax,0x400
c0009b02:	74 19                	je     c0009b1d <VAS::~VAS()+0x117>
c0009b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009b08:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009b0d:	83 ec 0c             	sub    esp,0xc
c0009b10:	50                   	push   eax
c0009b11:	e8 ee e1 ff ff       	call   c0007d04 <Phys::freePage(unsigned long)>
c0009b16:	83 c4 10             	add    esp,0x10
c0009b19:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009b1d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0009b21:	e9 1e ff ff ff       	jmp    c0009a44 <VAS::~VAS()+0x3e>
c0009b26:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009b2d:	83 ec 0c             	sub    esp,0xc
c0009b30:	50                   	push   eax
c0009b31:	e8 cf fc ff ff       	call   c0009805 <Virt::freeKernelVirtualPages(unsigned long)>
c0009b36:	83 c4 10             	add    esp,0x10
c0009b39:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009b3d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009b40:	83 ec 0c             	sub    esp,0xc
c0009b43:	50                   	push   eax
c0009b44:	e8 bb e1 ff ff       	call   c0007d04 <Phys::freePage(unsigned long)>
c0009b49:	83 c4 10             	add    esp,0x10
c0009b4c:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0009b50:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0009b55:	48                   	dec    eax
c0009b56:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0009b5b:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0009b60:	85 c0                	test   eax,eax
c0009b62:	75 01                	jne    c0009b65 <VAS::~VAS()+0x15f>
c0009b64:	fb                   	sti    
c0009b65:	90                   	nop
c0009b66:	83 c4 2c             	add    esp,0x2c
c0009b69:	c3                   	ret    

c0009b6a <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009b6a:	55                   	push   ebp
c0009b6b:	57                   	push   edi
c0009b6c:	56                   	push   esi
c0009b6d:	53                   	push   ebx
c0009b6e:	83 ec 1c             	sub    esp,0x1c
c0009b71:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009b75:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009b79:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009b7f:	77 0b                	ja     c0009b8c <VAS::mapPage(unsigned long, unsigned long, int)+0x22>
c0009b81:	0f 20 d8             	mov    eax,cr3
c0009b84:	0f 20 d8             	mov    eax,cr3
c0009b87:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009b8a:	75 47                	jne    c0009bd3 <VAS::mapPage(unsigned long, unsigned long, int)+0x69>
c0009b8c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009b90:	09 d8                	or     eax,ebx
c0009b92:	a9 ff 0f 00 00       	test   eax,0xfff
c0009b97:	75 57                	jne    c0009bf0 <VAS::mapPage(unsigned long, unsigned long, int)+0x86>
c0009b99:	89 de                	mov    esi,ebx
c0009b9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009b9e:	c1 ee 16             	shr    esi,0x16
c0009ba1:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009ba8:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009bac:	74 54                	je     c0009c02 <VAS::mapPage(unsigned long, unsigned long, int)+0x98>
c0009bae:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009bb2:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009bb8:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0009bbc:	c1 e6 0c             	shl    esi,0xc
c0009bbf:	c1 eb 0a             	shr    ebx,0xa
c0009bc2:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009bc8:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009bcb:	83 c4 1c             	add    esp,0x1c
c0009bce:	5b                   	pop    ebx
c0009bcf:	5e                   	pop    esi
c0009bd0:	5f                   	pop    edi
c0009bd1:	5d                   	pop    ebp
c0009bd2:	c3                   	ret    
c0009bd3:	83 ec 0c             	sub    esp,0xc
c0009bd6:	68 a4 d4 01 c0       	push   0xc001d4a4
c0009bdb:	e8 48 0b 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0009be0:	83 c4 10             	add    esp,0x10
c0009be3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009be7:	09 d8                	or     eax,ebx
c0009be9:	a9 ff 0f 00 00       	test   eax,0xfff
c0009bee:	74 a9                	je     c0009b99 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009bf0:	83 ec 0c             	sub    esp,0xc
c0009bf3:	68 0c d5 01 c0       	push   0xc001d50c
c0009bf8:	e8 7a 66 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0009bfd:	83 c4 10             	add    esp,0x10
c0009c00:	eb 97                	jmp    c0009b99 <VAS::mapPage(unsigned long, unsigned long, int)+0x2f>
c0009c02:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009c06:	e8 5b e1 ff ff       	call   c0007d66 <Phys::allocatePage()>
c0009c0b:	83 ec 0c             	sub    esp,0xc
c0009c0e:	89 c5                	mov    ebp,eax
c0009c10:	8b 0d 70 04 02 c0    	mov    ecx,DWORD PTR ds:0xc0020470
c0009c16:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009c1a:	6a 01                	push   0x1
c0009c1c:	e8 b4 f8 ff ff       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c0009c21:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009c28:	6a 01                	push   0x1
c0009c2a:	50                   	push   eax
c0009c2b:	55                   	push   ebp
c0009c2c:	81 cd 07 04 00 00    	or     ebp,0x407
c0009c32:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009c36:	51                   	push   ecx
c0009c37:	e8 28 02 00 00       	call   c0009e64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009c3c:	83 c4 1c             	add    esp,0x1c
c0009c3f:	68 00 10 00 00       	push   0x1000
c0009c44:	6a 00                	push   0x0
c0009c46:	50                   	push   eax
c0009c47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009c4b:	e8 a0 68 ff ff       	call   c00004f0 <memset>
c0009c50:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009c54:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c57:	e8 a9 fb ff ff       	call   c0009805 <Virt::freeKernelVirtualPages(unsigned long)>
c0009c5c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009c60:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009c63:	83 c4 10             	add    esp,0x10
c0009c66:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009c69:	e9 40 ff ff ff       	jmp    c0009bae <VAS::mapPage(unsigned long, unsigned long, int)+0x44>

c0009c6e <VAS::allocatePages(int, int)>:
c0009c6e:	55                   	push   ebp
c0009c6f:	57                   	push   edi
c0009c70:	56                   	push   esi
c0009c71:	53                   	push   ebx
c0009c72:	83 ec 1c             	sub    esp,0x1c
c0009c75:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009c79:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0009c7e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009c84:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009c8a:	83 e0 01             	and    eax,0x1
c0009c8d:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c0009c91:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009c95:	0f 85 cc 00 00 00    	jne    c0009d67 <VAS::allocatePages(int, int)+0xf9>
c0009c9b:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009c9e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ca2:	85 c0                	test   eax,eax
c0009ca4:	0f 84 a1 00 00 00    	je     c0009d4b <VAS::allocatePages(int, int)+0xdd>
c0009caa:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0009cae:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009cb2:	c1 e6 0c             	shl    esi,0xc
c0009cb5:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0009cb9:	85 c0                	test   eax,eax
c0009cbb:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0009cbe:	7e 33                	jle    c0009cf3 <VAS::allocatePages(int, int)+0x85>
c0009cc0:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0009cc4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009cc8:	81 cd 00 04 00 00    	or     ebp,0x400
c0009cce:	e8 93 e0 ff ff       	call   c0007d66 <Phys::allocatePage()>
c0009cd3:	55                   	push   ebp
c0009cd4:	53                   	push   ebx
c0009cd5:	50                   	push   eax
c0009cd6:	57                   	push   edi
c0009cd7:	e8 8e fe ff ff       	call   c0009b6a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009cdc:	83 c4 10             	add    esp,0x10
c0009cdf:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ce4:	74 03                	je     c0009ce9 <VAS::allocatePages(int, int)+0x7b>
c0009ce6:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ce9:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009cef:	39 de                	cmp    esi,ebx
c0009cf1:	75 db                	jne    c0009cce <VAS::allocatePages(int, int)+0x60>
c0009cf3:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009cf8:	75 12                	jne    c0009d0c <VAS::allocatePages(int, int)+0x9e>
c0009cfa:	0f 20 d8             	mov    eax,cr3
c0009cfd:	0f 22 d8             	mov    cr3,eax
c0009d00:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d04:	83 c4 1c             	add    esp,0x1c
c0009d07:	5b                   	pop    ebx
c0009d08:	5e                   	pop    esi
c0009d09:	5f                   	pop    edi
c0009d0a:	5d                   	pop    ebp
c0009d0b:	c3                   	ret    
c0009d0c:	c1 ee 0a             	shr    esi,0xa
c0009d0f:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009d13:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0009d19:	c1 eb 0a             	shr    ebx,0xa
c0009d1c:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0009d22:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009d28:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009d2e:	39 c3                	cmp    ebx,eax
c0009d30:	77 ce                	ja     c0009d00 <VAS::allocatePages(int, int)+0x92>
c0009d32:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009d35:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009d3b:	39 d8                	cmp    eax,ebx
c0009d3d:	73 f3                	jae    c0009d32 <VAS::allocatePages(int, int)+0xc4>
c0009d3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009d43:	83 c4 1c             	add    esp,0x1c
c0009d46:	5b                   	pop    ebx
c0009d47:	5e                   	pop    esi
c0009d48:	5f                   	pop    edi
c0009d49:	5d                   	pop    ebp
c0009d4a:	c3                   	ret    
c0009d4b:	83 ec 0c             	sub    esp,0xc
c0009d4e:	68 30 d5 01 c0       	push   0xc001d530
c0009d53:	e8 1f 65 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0009d58:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0009d5b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009d5f:	83 c4 10             	add    esp,0x10
c0009d62:	e9 43 ff ff ff       	jmp    c0009caa <VAS::allocatePages(int, int)+0x3c>
c0009d67:	83 ec 0c             	sub    esp,0xc
c0009d6a:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0009d6e:	51                   	push   ecx
c0009d6f:	e8 61 f7 ff ff       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c0009d74:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009d78:	83 c4 10             	add    esp,0x10
c0009d7b:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009d80:	0f 87 9b 00 00 00    	ja     c0009e21 <VAS::allocatePages(int, int)+0x1b3>
c0009d86:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d8a:	85 d2                	test   edx,edx
c0009d8c:	7e 3c                	jle    c0009dca <VAS::allocatePages(int, int)+0x15c>
c0009d8e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009d92:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0009d96:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009d9a:	c1 e5 0c             	shl    ebp,0xc
c0009d9d:	81 ce 00 04 00 00    	or     esi,0x400
c0009da3:	01 dd                	add    ebp,ebx
c0009da5:	e8 bc df ff ff       	call   c0007d66 <Phys::allocatePage()>
c0009daa:	56                   	push   esi
c0009dab:	53                   	push   ebx
c0009dac:	50                   	push   eax
c0009dad:	57                   	push   edi
c0009dae:	e8 b7 fd ff ff       	call   c0009b6a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009db3:	83 c4 10             	add    esp,0x10
c0009db6:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009dbb:	74 03                	je     c0009dc0 <VAS::allocatePages(int, int)+0x152>
c0009dbd:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009dc0:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009dc6:	39 dd                	cmp    ebp,ebx
c0009dc8:	75 db                	jne    c0009da5 <VAS::allocatePages(int, int)+0x137>
c0009dca:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009dcf:	0f 84 25 ff ff ff    	je     c0009cfa <VAS::allocatePages(int, int)+0x8c>
c0009dd5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0009dd9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009ddd:	89 d3                	mov    ebx,edx
c0009ddf:	c1 e0 0c             	shl    eax,0xc
c0009de2:	c1 eb 0a             	shr    ebx,0xa
c0009de5:	01 d0                	add    eax,edx
c0009de7:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ded:	c1 e8 0a             	shr    eax,0xa
c0009df0:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009df6:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009dfb:	2d 00 00 40 00       	sub    eax,0x400000
c0009e00:	39 c3                	cmp    ebx,eax
c0009e02:	0f 87 f8 fe ff ff    	ja     c0009d00 <VAS::allocatePages(int, int)+0x92>
c0009e08:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009e0b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e11:	39 d8                	cmp    eax,ebx
c0009e13:	73 f3                	jae    c0009e08 <VAS::allocatePages(int, int)+0x19a>
c0009e15:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e19:	83 c4 1c             	add    esp,0x1c
c0009e1c:	5b                   	pop    ebx
c0009e1d:	5e                   	pop    esi
c0009e1e:	5f                   	pop    edi
c0009e1f:	5d                   	pop    ebp
c0009e20:	c3                   	ret    
c0009e21:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0009e26:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e2c:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009e33:	0f 84 4d ff ff ff    	je     c0009d86 <VAS::allocatePages(int, int)+0x118>
c0009e39:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c0009e41:	e9 40 ff ff ff       	jmp    c0009d86 <VAS::allocatePages(int, int)+0x118>

c0009e46 <VAS::setCPUSpecific(unsigned long)>:
c0009e46:	83 ec 0c             	sub    esp,0xc
c0009e49:	6a 05                	push   0x5
c0009e4b:	68 00 00 40 c2       	push   0xc2400000
c0009e50:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009e54:	50                   	push   eax
c0009e55:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e59:	52                   	push   edx
c0009e5a:	e8 0b fd ff ff       	call   c0009b6a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e5f:	83 c4 1c             	add    esp,0x1c
c0009e62:	c3                   	ret    
c0009e63:	90                   	nop

c0009e64 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009e64:	55                   	push   ebp
c0009e65:	57                   	push   edi
c0009e66:	56                   	push   esi
c0009e67:	53                   	push   ebx
c0009e68:	83 ec 1c             	sub    esp,0x1c
c0009e6b:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0009e70:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009e74:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009e7a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009e7e:	8a 80 8d 11 00 00    	mov    al,BYTE PTR [eax+0x118d]
c0009e84:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0009e88:	83 e0 01             	and    eax,0x1
c0009e8b:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0009e8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009e93:	85 c0                	test   eax,eax
c0009e95:	7e 39                	jle    c0009ed0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0009e97:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009e9b:	89 f3                	mov    ebx,esi
c0009e9d:	c1 e0 0c             	shl    eax,0xc
c0009ea0:	01 f0                	add    eax,esi
c0009ea2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009ea6:	55                   	push   ebp
c0009ea7:	53                   	push   ebx
c0009ea8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009eac:	29 f0                	sub    eax,esi
c0009eae:	01 d8                	add    eax,ebx
c0009eb0:	50                   	push   eax
c0009eb1:	57                   	push   edi
c0009eb2:	e8 b3 fc ff ff       	call   c0009b6a <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ebf:	74 03                	je     c0009ec4 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c0009ec1:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009ec4:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009eca:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c0009ece:	75 d6                	jne    c0009ea6 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c0009ed0:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0009ed5:	75 10                	jne    c0009ee7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c0009ed7:	0f 20 d8             	mov    eax,cr3
c0009eda:	0f 22 d8             	mov    cr3,eax
c0009edd:	83 c4 1c             	add    esp,0x1c
c0009ee0:	89 f0                	mov    eax,esi
c0009ee2:	5b                   	pop    ebx
c0009ee3:	5e                   	pop    esi
c0009ee4:	5f                   	pop    edi
c0009ee5:	5d                   	pop    ebp
c0009ee6:	c3                   	ret    
c0009ee7:	89 f3                	mov    ebx,esi
c0009ee9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009eed:	c1 eb 0a             	shr    ebx,0xa
c0009ef0:	c1 e0 0c             	shl    eax,0xc
c0009ef3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0009ef9:	01 f0                	add    eax,esi
c0009efb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0009f01:	c1 e8 0a             	shr    eax,0xa
c0009f04:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009f09:	2d 00 00 40 00       	sub    eax,0x400000
c0009f0e:	39 c3                	cmp    ebx,eax
c0009f10:	77 cb                	ja     c0009edd <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c0009f12:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0009f15:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009f1b:	39 d8                	cmp    eax,ebx
c0009f1d:	73 f3                	jae    c0009f12 <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0009f1f:	83 c4 1c             	add    esp,0x1c
c0009f22:	89 f0                	mov    eax,esi
c0009f24:	5b                   	pop    ebx
c0009f25:	5e                   	pop    esi
c0009f26:	5f                   	pop    edi
c0009f27:	5d                   	pop    ebp
c0009f28:	c3                   	ret    
c0009f29:	90                   	nop

c0009f2a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f2a:	55                   	push   ebp
c0009f2b:	57                   	push   edi
c0009f2c:	56                   	push   esi
c0009f2d:	53                   	push   ebx
c0009f2e:	83 ec 1c             	sub    esp,0x1c
c0009f31:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f35:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f39:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0009f3d:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009f41:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f46:	75 4a                	jne    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0009f48:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f4c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009f4f:	c1 eb 16             	shr    ebx,0x16
c0009f52:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0009f59:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0009f5d:	74 4d                	je     c0009fac <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0009f5f:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f63:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009f67:	c1 e8 0a             	shr    eax,0xa
c0009f6a:	80 fa 01             	cmp    dl,0x1
c0009f6d:	19 d2                	sbb    edx,edx
c0009f6f:	c1 e3 0c             	shl    ebx,0xc
c0009f72:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0009f76:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009f7c:	25 fc 0f 00 00       	and    eax,0xffc
c0009f81:	01 d8                	add    eax,ebx
c0009f83:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009f8a:	83 c4 1c             	add    esp,0x1c
c0009f8d:	5b                   	pop    ebx
c0009f8e:	5e                   	pop    esi
c0009f8f:	5f                   	pop    edi
c0009f90:	5d                   	pop    ebp
c0009f91:	c3                   	ret    
c0009f92:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f96:	83 ec 0c             	sub    esp,0xc
c0009f99:	68 5c d5 01 c0       	push   0xc001d55c
c0009f9e:	e8 d4 62 00 00       	call   c0010277 <Krnl::panic(char const*)>
c0009fa3:	83 c4 10             	add    esp,0x10
c0009fa6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009faa:	eb 9c                	jmp    c0009f48 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0009fac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fb0:	e8 b1 dd ff ff       	call   c0007d66 <Phys::allocatePage()>
c0009fb5:	83 ec 0c             	sub    esp,0xc
c0009fb8:	89 c5                	mov    ebp,eax
c0009fba:	8b 0d 70 04 02 c0    	mov    ecx,DWORD PTR ds:0xc0020470
c0009fc0:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009fc4:	6a 01                	push   0x1
c0009fc6:	e8 0a f5 ff ff       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c0009fcb:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009fd2:	6a 01                	push   0x1
c0009fd4:	50                   	push   eax
c0009fd5:	55                   	push   ebp
c0009fd6:	81 cd 07 04 00 00    	or     ebp,0x407
c0009fdc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009fe0:	51                   	push   ecx
c0009fe1:	e8 7e fe ff ff       	call   c0009e64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009fe6:	83 c4 1c             	add    esp,0x1c
c0009fe9:	68 00 10 00 00       	push   0x1000
c0009fee:	6a 00                	push   0x0
c0009ff0:	50                   	push   eax
c0009ff1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff5:	e8 f6 64 ff ff       	call   c00004f0 <memset>
c0009ffa:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009ffe:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a001:	e8 ff f7 ff ff       	call   c0009805 <Virt::freeKernelVirtualPages(unsigned long)>
c000a006:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a009:	83 c4 10             	add    esp,0x10
c000a00c:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c000a00f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a013:	e9 47 ff ff ff       	jmp    c0009f5f <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c000a018 <VAS::VAS(bool)>:
c000a018:	53                   	push   ebx
c000a019:	83 ec 28             	sub    esp,0x28
c000a01c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a020:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a024:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a028:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a02f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a033:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a03a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a03e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a042:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a045:	e8 1c dd ff ff       	call   c0007d66 <Phys::allocatePage()>
c000a04a:	89 c2                	mov    edx,eax
c000a04c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a050:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a053:	8b 1d 70 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020470
c000a059:	83 ec 0c             	sub    esp,0xc
c000a05c:	6a 01                	push   0x1
c000a05e:	e8 72 f4 ff ff       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c000a063:	83 c4 10             	add    esp,0x10
c000a066:	89 c2                	mov    edx,eax
c000a068:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a06c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a06f:	83 ec 0c             	sub    esp,0xc
c000a072:	6a 03                	push   0x3
c000a074:	6a 01                	push   0x1
c000a076:	52                   	push   edx
c000a077:	50                   	push   eax
c000a078:	53                   	push   ebx
c000a079:	e8 e6 fd ff ff       	call   c0009e64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a07e:	83 c4 20             	add    esp,0x20
c000a081:	89 c2                	mov    edx,eax
c000a083:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a087:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a08a:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a092:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a09a:	7f 1c                	jg     c000a0b8 <VAS::VAS(bool)+0xa0>
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0a3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0a7:	c1 e2 02             	shl    edx,0x2
c000a0aa:	01 d0                	add    eax,edx
c000a0ac:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a0b2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c000a0b6:	eb da                	jmp    c000a092 <VAS::VAS(bool)+0x7a>
c000a0b8:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a0c0:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a0c8:	7f 7a                	jg     c000a144 <VAS::VAS(bool)+0x12c>
c000a0ca:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a0ce:	2d 00 02 00 00       	sub    eax,0x200
c000a0d3:	c1 e0 0c             	shl    eax,0xc
c000a0d6:	83 c8 03             	or     eax,0x3
c000a0d9:	89 c2                	mov    edx,eax
c000a0db:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000a0e0:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a0e6:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a0ec:	83 e0 10             	and    eax,0x10
c000a0ef:	84 c0                	test   al,al
c000a0f1:	74 07                	je     c000a0fa <VAS::VAS(bool)+0xe2>
c000a0f3:	b8 00 01 00 00       	mov    eax,0x100
c000a0f8:	eb 05                	jmp    c000a0ff <VAS::VAS(bool)+0xe7>
c000a0fa:	b8 00 00 00 00       	mov    eax,0x0
c000a0ff:	09 d0                	or     eax,edx
c000a101:	89 c1                	mov    ecx,eax
c000a103:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a107:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a10a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a10e:	c1 e2 02             	shl    edx,0x2
c000a111:	01 d0                	add    eax,edx
c000a113:	89 ca                	mov    edx,ecx
c000a115:	89 10                	mov    DWORD PTR [eax],edx
c000a117:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11b:	2d 40 03 00 00       	sub    eax,0x340
c000a120:	83 f8 7f             	cmp    eax,0x7f
c000a123:	77 16                	ja     c000a13b <VAS::VAS(bool)+0x123>
c000a125:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a129:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a12c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a130:	c1 e2 02             	shl    edx,0x2
c000a133:	01 d0                	add    eax,edx
c000a135:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a13b:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000a13f:	e9 7c ff ff ff       	jmp    c000a0c0 <VAS::VAS(bool)+0xa8>
c000a144:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000a149:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a14f:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a155:	83 e0 10             	and    eax,0x10
c000a158:	84 c0                	test   al,al
c000a15a:	74 07                	je     c000a163 <VAS::VAS(bool)+0x14b>
c000a15c:	b8 03 41 00 00       	mov    eax,0x4103
c000a161:	eb 05                	jmp    c000a168 <VAS::VAS(bool)+0x150>
c000a163:	b8 03 40 00 00       	mov    eax,0x4003
c000a168:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a16c:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a16f:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a175:	89 02                	mov    DWORD PTR [edx],eax
c000a177:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000a17c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a182:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000a188:	83 ec 08             	sub    esp,0x8
c000a18b:	50                   	push   eax
c000a18c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a190:	e8 b1 fc ff ff       	call   c0009e46 <VAS::setCPUSpecific(unsigned long)>
c000a195:	83 c4 10             	add    esp,0x10
c000a198:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a19c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a19f:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000a1a4:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1aa:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1b0:	83 e0 10             	and    eax,0x10
c000a1b3:	84 c0                	test   al,al
c000a1b5:	74 07                	je     c000a1be <VAS::VAS(bool)+0x1a6>
c000a1b7:	b8 00 01 00 00       	mov    eax,0x100
c000a1bc:	eb 05                	jmp    c000a1c3 <VAS::VAS(bool)+0x1ab>
c000a1be:	b8 00 00 00 00       	mov    eax,0x0
c000a1c3:	09 c2                	or     edx,eax
c000a1c5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1c9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a1cc:	05 fc 0f 00 00       	add    eax,0xffc
c000a1d1:	83 ca 03             	or     edx,0x3
c000a1d4:	89 10                	mov    DWORD PTR [eax],edx
c000a1d6:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	83 ec 0c             	sub    esp,0xc
c000a1e4:	50                   	push   eax
c000a1e5:	e8 12 1c 00 00       	call   c000bdfc <Device::getName()>
c000a1ea:	83 c4 10             	add    esp,0x10
c000a1ed:	83 ec 08             	sub    esp,0x8
c000a1f0:	68 ff d5 01 c0       	push   0xc001d5ff
c000a1f5:	50                   	push   eax
c000a1f6:	e8 05 65 ff ff       	call   c0000700 <strcmp>
c000a1fb:	83 c4 10             	add    esp,0x10
c000a1fe:	85 c0                	test   eax,eax
c000a200:	0f 94 c0             	sete   al
c000a203:	84 c0                	test   al,al
c000a205:	0f 84 87 00 00 00    	je     c000a292 <VAS::VAS(bool)+0x27a>
c000a20b:	fa                   	cli    
c000a20c:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000a211:	40                   	inc    eax
c000a212:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000a217:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000a21c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a222:	05 7c 09 00 00       	add    eax,0x97c
c000a227:	83 ec 0c             	sub    esp,0xc
c000a22a:	50                   	push   eax
c000a22b:	e8 66 d2 ff ff       	call   c0007496 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a230:	83 c4 10             	add    esp,0x10
c000a233:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a238:	89 c3                	mov    ebx,eax
c000a23a:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000a23f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a245:	05 7c 09 00 00       	add    eax,0x97c
c000a24a:	83 ec 0c             	sub    esp,0xc
c000a24d:	50                   	push   eax
c000a24e:	e8 43 d2 ff ff       	call   c0007496 <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a253:	83 c4 10             	add    esp,0x10
c000a256:	83 ec 08             	sub    esp,0x8
c000a259:	50                   	push   eax
c000a25a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a25e:	e8 83 f5 ff ff       	call   c00097e6 <VAS::getPageTableEntry(unsigned long)>
c000a263:	83 c4 10             	add    esp,0x10
c000a266:	8b 00                	mov    eax,DWORD PTR [eax]
c000a268:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a26d:	6a 11                	push   0x11
c000a26f:	53                   	push   ebx
c000a270:	50                   	push   eax
c000a271:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a275:	e8 f0 f8 ff ff       	call   c0009b6a <VAS::mapPage(unsigned long, unsigned long, int)>
c000a27a:	83 c4 10             	add    esp,0x10
c000a27d:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000a282:	48                   	dec    eax
c000a283:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000a288:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000a28d:	85 c0                	test   eax,eax
c000a28f:	75 01                	jne    c000a292 <VAS::VAS(bool)+0x27a>
c000a291:	fb                   	sti    
c000a292:	90                   	nop
c000a293:	83 c4 28             	add    esp,0x28
c000a296:	5b                   	pop    ebx
c000a297:	c3                   	ret    

c000a298 <VAS::evict(unsigned long)>:
c000a298:	55                   	push   ebp
c000a299:	57                   	push   edi
c000a29a:	56                   	push   esi
c000a29b:	53                   	push   ebx
c000a29c:	83 ec 1c             	sub    esp,0x1c
c000a29f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2a3:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2ab:	e8 66 f3 ff ff       	call   c0009616 <Virt::allocateSwapfilePage()>
c000a2b0:	8b 0d ec f2 01 c0    	mov    ecx,DWORD PTR ds:0xc001f2ec
c000a2b6:	89 c7                	mov    edi,eax
c000a2b8:	85 c9                	test   ecx,ecx
c000a2ba:	7e 3e                	jle    c000a2fa <VAS::evict(unsigned long)+0x62>
c000a2bc:	89 ee                	mov    esi,ebp
c000a2be:	31 db                	xor    ebx,ebx
c000a2c0:	83 ec 0c             	sub    esp,0xc
c000a2c3:	57                   	push   edi
c000a2c4:	e8 3b f3 ff ff       	call   c0009604 <Virt::swapIDToSector(unsigned long)>
c000a2c9:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2cc:	01 d8                	add    eax,ebx
c000a2ce:	6a 01                	push   0x1
c000a2d0:	31 d2                	xor    edx,edx
c000a2d2:	43                   	inc    ebx
c000a2d3:	52                   	push   edx
c000a2d4:	81 c6 00 02 00 00    	add    esi,0x200
c000a2da:	50                   	push   eax
c000a2db:	0f be 05 f8 f2 01 c0 	movsx  eax,BYTE PTR ds:0xc001f2f8
c000a2e2:	8b 14 85 dc 27 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd824]
c000a2e9:	52                   	push   edx
c000a2ea:	e8 8d 2b 00 00       	call   c000ce7c <LogicalDisk::write(unsigned long long, int, void*)>
c000a2ef:	83 c4 20             	add    esp,0x20
c000a2f2:	39 1d ec f2 01 c0    	cmp    DWORD PTR ds:0xc001f2ec,ebx
c000a2f8:	7f c6                	jg     c000a2c0 <VAS::evict(unsigned long)+0x28>
c000a2fa:	83 ec 08             	sub    esp,0x8
c000a2fd:	c1 e7 0b             	shl    edi,0xb
c000a300:	55                   	push   ebp
c000a301:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a305:	50                   	push   eax
c000a306:	e8 db f4 ff ff       	call   c00097e6 <VAS::getPageTableEntry(unsigned long)>
c000a30b:	8b 10                	mov    edx,DWORD PTR [eax]
c000a30d:	89 d1                	mov    ecx,edx
c000a30f:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000a315:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c000a31b:	09 cf                	or     edi,ecx
c000a31d:	89 38                	mov    DWORD PTR [eax],edi
c000a31f:	89 14 24             	mov    DWORD PTR [esp],edx
c000a322:	ff 05 68 04 02 c0    	inc    DWORD PTR ds:0xc0020468
c000a328:	e8 d7 d9 ff ff       	call   c0007d04 <Phys::freePage(unsigned long)>
c000a32d:	0f 20 d8             	mov    eax,cr3
c000a330:	0f 22 d8             	mov    cr3,eax
c000a333:	a1 64 04 02 c0       	mov    eax,ds:0xc0020464
c000a338:	c7 44 24 40 0d d6 01 c0 	mov    DWORD PTR [esp+0x40],0xc001d60d
c000a340:	8d 50 01             	lea    edx,[eax+0x1]
c000a343:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a347:	89 15 64 04 02 c0    	mov    DWORD PTR ds:0xc0020464,edx
c000a34d:	83 c4 2c             	add    esp,0x2c
c000a350:	5b                   	pop    ebx
c000a351:	5e                   	pop    esi
c000a352:	5f                   	pop    edi
c000a353:	5d                   	pop    ebp
c000a354:	e9 cf 03 00 00       	jmp    c000a728 <Dbg::kprintf(char const*, ...)>
c000a359:	90                   	nop

c000a35a <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a35a:	55                   	push   ebp
c000a35b:	57                   	push   edi
c000a35c:	56                   	push   esi
c000a35d:	53                   	push   ebx
c000a35e:	83 ec 14             	sub    esp,0x14
c000a361:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c000a365:	53                   	push   ebx
c000a366:	68 1e d6 01 c0       	push   0xc001d61e
c000a36b:	e8 b8 03 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000a370:	83 c4 10             	add    esp,0x10
c000a373:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a379:	74 21                	je     c000a39c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a37b:	83 ec 08             	sub    esp,0x8
c000a37e:	53                   	push   ebx
c000a37f:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000a383:	57                   	push   edi
c000a384:	e8 5d f4 ff ff       	call   c00097e6 <VAS::getPageTableEntry(unsigned long)>
c000a389:	83 c4 10             	add    esp,0x10
c000a38c:	89 c6                	mov    esi,eax
c000a38e:	85 c0                	test   eax,eax
c000a390:	74 0a                	je     c000a39c <VAS::tryLoadBackOffDisk(unsigned long)+0x42>
c000a392:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a394:	f7 c5 01 00 00 00    	test   ebp,0x1
c000a39a:	74 0a                	je     c000a3a6 <VAS::tryLoadBackOffDisk(unsigned long)+0x4c>
c000a39c:	31 c0                	xor    eax,eax
c000a39e:	83 c4 0c             	add    esp,0xc
c000a3a1:	5b                   	pop    ebx
c000a3a2:	5e                   	pop    esi
c000a3a3:	5f                   	pop    edi
c000a3a4:	5d                   	pop    ebp
c000a3a5:	c3                   	ret    
c000a3a6:	e8 bb d9 ff ff       	call   c0007d66 <Phys::allocatePage()>
c000a3ab:	c1 ed 0b             	shr    ebp,0xb
c000a3ae:	8b 16                	mov    edx,DWORD PTR [esi]
c000a3b0:	81 e2 ff 0f 00 00    	and    edx,0xfff
c000a3b6:	09 c2                	or     edx,eax
c000a3b8:	81 ca 01 08 00 00    	or     edx,0x801
c000a3be:	89 16                	mov    DWORD PTR [esi],edx
c000a3c0:	8b 35 ec f2 01 c0    	mov    esi,DWORD PTR ds:0xc001f2ec
c000a3c6:	85 f6                	test   esi,esi
c000a3c8:	7e 3e                	jle    c000a408 <VAS::tryLoadBackOffDisk(unsigned long)+0xae>
c000a3ca:	89 df                	mov    edi,ebx
c000a3cc:	31 f6                	xor    esi,esi
c000a3ce:	83 ec 0c             	sub    esp,0xc
c000a3d1:	55                   	push   ebp
c000a3d2:	e8 2d f2 ff ff       	call   c0009604 <Virt::swapIDToSector(unsigned long)>
c000a3d7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a3da:	01 f0                	add    eax,esi
c000a3dc:	6a 01                	push   0x1
c000a3de:	31 d2                	xor    edx,edx
c000a3e0:	46                   	inc    esi
c000a3e1:	52                   	push   edx
c000a3e2:	81 c7 00 02 00 00    	add    edi,0x200
c000a3e8:	50                   	push   eax
c000a3e9:	0f be 05 f8 f2 01 c0 	movsx  eax,BYTE PTR ds:0xc001f2f8
c000a3f0:	8b 0c 85 dc 27 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd824]
c000a3f7:	51                   	push   ecx
c000a3f8:	e8 13 2a 00 00       	call   c000ce10 <LogicalDisk::read(unsigned long long, int, void*)>
c000a3fd:	83 c4 20             	add    esp,0x20
c000a400:	39 35 ec f2 01 c0    	cmp    DWORD PTR ds:0xc001f2ec,esi
c000a406:	7f c6                	jg     c000a3ce <VAS::tryLoadBackOffDisk(unsigned long)+0x74>
c000a408:	a1 68 04 02 c0       	mov    eax,ds:0xc0020468
c000a40d:	48                   	dec    eax
c000a40e:	52                   	push   edx
c000a40f:	a3 68 04 02 c0       	mov    ds:0xc0020468,eax
c000a414:	50                   	push   eax
c000a415:	53                   	push   ebx
c000a416:	68 31 d6 01 c0       	push   0xc001d631
c000a41b:	e8 08 03 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000a420:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a423:	e8 be f1 ff ff       	call   c00095e6 <Virt::freeSwapfilePage(unsigned long)>
c000a428:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000a42d:	83 c4 10             	add    esp,0x10
c000a430:	48                   	dec    eax
c000a431:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000a436:	85 c0                	test   eax,eax
c000a438:	75 01                	jne    c000a43b <VAS::tryLoadBackOffDisk(unsigned long)+0xe1>
c000a43a:	fb                   	sti    
c000a43b:	0f 20 d8             	mov    eax,cr3
c000a43e:	0f 22 d8             	mov    cr3,eax
c000a441:	b0 01                	mov    al,0x1
c000a443:	e9 56 ff ff ff       	jmp    c000a39e <VAS::tryLoadBackOffDisk(unsigned long)+0x44>

c000a448 <VAS::scanForEviction()>:
c000a448:	57                   	push   edi
c000a449:	31 ff                	xor    edi,edi
c000a44b:	56                   	push   esi
c000a44c:	53                   	push   ebx
c000a44d:	83 ec 10             	sub    esp,0x10
c000a450:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c000a454:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a457:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a45d:	75 0e                	jne    c000a46d <VAS::scanForEviction()+0x25>
c000a45f:	89 da                	mov    edx,ebx
c000a461:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a464:	c1 ea 16             	shr    edx,0x16
c000a467:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a46b:	74 4e                	je     c000a4bb <VAS::scanForEviction()+0x73>
c000a46d:	53                   	push   ebx
c000a46e:	56                   	push   esi
c000a46f:	e8 72 f3 ff ff       	call   c00097e6 <VAS::getPageTableEntry(unsigned long)>
c000a474:	5a                   	pop    edx
c000a475:	8b 10                	mov    edx,DWORD PTR [eax]
c000a477:	59                   	pop    ecx
c000a478:	89 d1                	mov    ecx,edx
c000a47a:	81 e1 01 08 00 00    	and    ecx,0x801
c000a480:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a486:	74 3e                	je     c000a4c6 <VAS::scanForEviction()+0x7e>
c000a488:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a48e:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a494:	76 2b                	jbe    c000a4c1 <VAS::scanForEviction()+0x79>
c000a496:	47                   	inc    edi
c000a497:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c000a49e:	83 ff 03             	cmp    edi,0x3
c000a4a1:	74 32                	je     c000a4d5 <VAS::scanForEviction()+0x8d>
c000a4a3:	31 db                	xor    ebx,ebx
c000a4a5:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a4ab:	75 c0                	jne    c000a46d <VAS::scanForEviction()+0x25>
c000a4ad:	89 da                	mov    edx,ebx
c000a4af:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a4b2:	c1 ea 16             	shr    edx,0x16
c000a4b5:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a4b9:	75 b2                	jne    c000a46d <VAS::scanForEviction()+0x25>
c000a4bb:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a4c1:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c000a4c4:	eb 91                	jmp    c000a457 <VAS::scanForEviction()+0xf>
c000a4c6:	f6 c2 20             	test   dl,0x20
c000a4c9:	74 13                	je     c000a4de <VAS::scanForEviction()+0x96>
c000a4cb:	83 e2 df             	and    edx,0xffffffdf
c000a4ce:	89 10                	mov    DWORD PTR [eax],edx
c000a4d0:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c000a4d3:	eb b3                	jmp    c000a488 <VAS::scanForEviction()+0x40>
c000a4d5:	83 c4 10             	add    esp,0x10
c000a4d8:	31 c0                	xor    eax,eax
c000a4da:	5b                   	pop    ebx
c000a4db:	5e                   	pop    esi
c000a4dc:	5f                   	pop    edi
c000a4dd:	c3                   	ret    
c000a4de:	83 ec 08             	sub    esp,0x8
c000a4e1:	89 d0                	mov    eax,edx
c000a4e3:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a4e8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a4ec:	53                   	push   ebx
c000a4ed:	68 46 d6 01 c0       	push   0xc001d646
c000a4f2:	e8 31 02 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000a4f7:	58                   	pop    eax
c000a4f8:	8b 4e 08             	mov    ecx,DWORD PTR [esi+0x8]
c000a4fb:	5a                   	pop    edx
c000a4fc:	51                   	push   ecx
c000a4fd:	56                   	push   esi
c000a4fe:	e8 95 fd ff ff       	call   c000a298 <VAS::evict(unsigned long)>
c000a503:	5b                   	pop    ebx
c000a504:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000a507:	5f                   	pop    edi
c000a508:	50                   	push   eax
c000a509:	68 5a d6 01 c0       	push   0xc001d65a
c000a50e:	e8 15 02 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000a513:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c000a51a:	83 c4 10             	add    esp,0x10
c000a51d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a521:	83 c4 10             	add    esp,0x10
c000a524:	5b                   	pop    ebx
c000a525:	5e                   	pop    esi
c000a526:	5f                   	pop    edi
c000a527:	c3                   	ret    

c000a528 <mapVASFirstTime>:
c000a528:	55                   	push   ebp
c000a529:	57                   	push   edi
c000a52a:	56                   	push   esi
c000a52b:	53                   	push   ebx
c000a52c:	83 ec 0c             	sub    esp,0xc
c000a52f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a534:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a537:	4a                   	dec    edx
c000a538:	0f 84 8c 00 00 00    	je     c000a5ca <mapVASFirstTime+0xa2>
c000a53e:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a541:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a544:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a549:	c1 e5 15             	shl    ebp,0x15
c000a54c:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a551:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a557:	29 eb                	sub    ebx,ebp
c000a559:	29 ef                	sub    edi,ebp
c000a55b:	e8 06 d8 ff ff       	call   c0007d66 <Phys::allocatePage()>
c000a560:	83 ec 0c             	sub    esp,0xc
c000a563:	68 03 04 00 00       	push   0x403
c000a568:	6a 01                	push   0x1
c000a56a:	53                   	push   ebx
c000a56b:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a571:	50                   	push   eax
c000a572:	56                   	push   esi
c000a573:	e8 ec f8 ff ff       	call   c0009e64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a578:	83 c4 20             	add    esp,0x20
c000a57b:	39 fb                	cmp    ebx,edi
c000a57d:	75 dc                	jne    c000a55b <mapVASFirstTime+0x33>
c000a57f:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a584:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a589:	29 eb                	sub    ebx,ebp
c000a58b:	29 ef                	sub    edi,ebp
c000a58d:	e8 d4 d7 ff ff       	call   c0007d66 <Phys::allocatePage()>
c000a592:	80 7e 01 01          	cmp    BYTE PTR [esi+0x1],0x1
c000a596:	19 d2                	sbb    edx,edx
c000a598:	83 ec 0c             	sub    esp,0xc
c000a59b:	83 e2 04             	and    edx,0x4
c000a59e:	81 c2 03 04 00 00    	add    edx,0x403
c000a5a4:	52                   	push   edx
c000a5a5:	6a 01                	push   0x1
c000a5a7:	53                   	push   ebx
c000a5a8:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a5ae:	50                   	push   eax
c000a5af:	56                   	push   esi
c000a5b0:	e8 af f8 ff ff       	call   c0009e64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a5b5:	83 c4 20             	add    esp,0x20
c000a5b8:	39 df                	cmp    edi,ebx
c000a5ba:	75 d1                	jne    c000a58d <mapVASFirstTime+0x65>
c000a5bc:	0f 20 d8             	mov    eax,cr3
c000a5bf:	0f 22 d8             	mov    cr3,eax
c000a5c2:	83 c4 0c             	add    esp,0xc
c000a5c5:	5b                   	pop    ebx
c000a5c6:	5e                   	pop    esi
c000a5c7:	5f                   	pop    edi
c000a5c8:	5d                   	pop    ebp
c000a5c9:	c3                   	ret    
c000a5ca:	83 ec 0c             	sub    esp,0xc
c000a5cd:	68 6d d6 01 c0       	push   0xc001d66d
c000a5d2:	e8 51 01 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000a5d7:	83 c4 10             	add    esp,0x10
c000a5da:	83 c4 0c             	add    esp,0xc
c000a5dd:	5b                   	pop    ebx
c000a5de:	5e                   	pop    esi
c000a5df:	5f                   	pop    edi
c000a5e0:	5d                   	pop    ebp
c000a5e1:	c3                   	ret    

c000a5e2 <__cxa_atexit>:
c000a5e2:	31 c0                	xor    eax,eax
c000a5e4:	c3                   	ret    

c000a5e5 <__cxa_finalize>:
c000a5e5:	c3                   	ret    

c000a5e6 <__stack_chk_fail>:
c000a5e6:	55                   	push   ebp
c000a5e7:	89 e5                	mov    ebp,esp
c000a5e9:	83 ec 10             	sub    esp,0x10
c000a5ec:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a5ef:	68 86 d6 01 c0       	push   0xc001d686
c000a5f4:	e8 2f 01 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000a5f9:	58                   	pop    eax
c000a5fa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a5fd:	5a                   	pop    edx
c000a5fe:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a601:	68 86 d6 01 c0       	push   0xc001d686
c000a606:	e8 1d 01 00 00       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000a60b:	c7 04 24 8e d6 01 c0 	mov    DWORD PTR [esp],0xc001d68e
c000a612:	e8 60 5c 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000a617:	83 c4 10             	add    esp,0x10
c000a61a:	c9                   	leave  
c000a61b:	c3                   	ret    

c000a61c <__cxa_pure_virtual>:
c000a61c:	83 ec 18             	sub    esp,0x18
c000a61f:	68 a6 d6 01 c0       	push   0xc001d6a6
c000a624:	e8 4e 5c 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000a629:	83 c4 1c             	add    esp,0x1c
c000a62c:	c3                   	ret    

c000a62d <operator new[](unsigned long)>:
c000a62d:	e9 67 d3 ff ff       	jmp    c0007999 <malloc>

c000a632 <operator delete(void*, unsigned long)>:
c000a632:	e9 82 d3 ff ff       	jmp    c00079b9 <rfree>

c000a637 <operator delete[](void*)>:
c000a637:	e9 7d d3 ff ff       	jmp    c00079b9 <rfree>

c000a63c <operator delete[](void*, unsigned long)>:
c000a63c:	e9 78 d3 ff ff       	jmp    c00079b9 <rfree>

c000a641 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a641:	55                   	push   ebp
c000a642:	b9 04 00 00 00       	mov    ecx,0x4
c000a647:	57                   	push   edi
c000a648:	56                   	push   esi
c000a649:	be bb d2 01 c0       	mov    esi,0xc001d2bb
c000a64e:	53                   	push   ebx
c000a64f:	83 ec 20             	sub    esp,0x20
c000a652:	a1 ba d2 01 c0       	mov    eax,ds:0xc001d2ba
c000a657:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a65b:	89 44 24 0f          	mov    DWORD PTR [esp+0xf],eax
c000a65f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a663:	a1 c7 d2 01 c0       	mov    eax,ds:0xc001d2c7
c000a668:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a66c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a670:	fc                   	cld    
c000a671:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a673:	89 ee                	mov    esi,ebp
c000a675:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a679:	eb 02                	jmp    c000a67d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3c>
c000a67b:	89 c6                	mov    esi,eax
c000a67d:	31 d2                	xor    edx,edx
c000a67f:	41                   	inc    ecx
c000a680:	89 f0                	mov    eax,esi
c000a682:	f7 f3                	div    ebx
c000a684:	39 de                	cmp    esi,ebx
c000a686:	73 f3                	jae    c000a67b <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x3a>
c000a688:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a68b:	eb 02                	jmp    c000a68f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4e>
c000a68d:	89 c5                	mov    ebp,eax
c000a68f:	31 d2                	xor    edx,edx
c000a691:	49                   	dec    ecx
c000a692:	89 e8                	mov    eax,ebp
c000a694:	f7 f3                	div    ebx
c000a696:	39 dd                	cmp    ebp,ebx
c000a698:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a69c:	88 11                	mov    BYTE PTR [ecx],dl
c000a69e:	73 ed                	jae    c000a68d <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x4c>
c000a6a0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a6a4:	83 c4 20             	add    esp,0x20
c000a6a7:	5b                   	pop    ebx
c000a6a8:	5e                   	pop    esi
c000a6a9:	5f                   	pop    edi
c000a6aa:	5d                   	pop    ebp
c000a6ab:	c3                   	ret    

c000a6ac <Dbg::logc(char)>:
c000a6ac:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a6b0:	f6 05 9c 03 02 c0 10 	test   BYTE PTR ds:0xc002039c,0x10
c000a6b7:	75 12                	jne    c000a6cb <Dbg::logc(char)+0x1f>
c000a6b9:	ba fd 03 00 00       	mov    edx,0x3fd
c000a6be:	ec                   	in     al,dx
c000a6bf:	a8 20                	test   al,0x20
c000a6c1:	74 fb                	je     c000a6be <Dbg::logc(char)+0x12>
c000a6c3:	ba f8 03 00 00       	mov    edx,0x3f8
c000a6c8:	88 c8                	mov    al,cl
c000a6ca:	ee                   	out    dx,al
c000a6cb:	c3                   	ret    

c000a6cc <Dbg::logs(char*)>:
c000a6cc:	53                   	push   ebx
c000a6cd:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a6d1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a6d4:	84 c0                	test   al,al
c000a6d6:	74 0f                	je     c000a6e7 <Dbg::logs(char*)+0x1b>
c000a6d8:	50                   	push   eax
c000a6d9:	43                   	inc    ebx
c000a6da:	e8 cd ff ff ff       	call   c000a6ac <Dbg::logc(char)>
c000a6df:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a6e2:	5a                   	pop    edx
c000a6e3:	84 c0                	test   al,al
c000a6e5:	75 f1                	jne    c000a6d8 <Dbg::logs(char*)+0xc>
c000a6e7:	5b                   	pop    ebx
c000a6e8:	c3                   	ret    

c000a6e9 <Dbg::logWriteInt(unsigned int)>:
c000a6e9:	83 ec 10             	sub    esp,0x10
c000a6ec:	6a 0a                	push   0xa
c000a6ee:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a6f2:	50                   	push   eax
c000a6f3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a6f7:	50                   	push   eax
c000a6f8:	e8 44 ff ff ff       	call   c000a641 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a6fd:	50                   	push   eax
c000a6fe:	e8 c9 ff ff ff       	call   c000a6cc <Dbg::logs(char*)>
c000a703:	83 c4 20             	add    esp,0x20
c000a706:	c3                   	ret    

c000a707 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a707:	83 ec 10             	sub    esp,0x10
c000a70a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a70e:	50                   	push   eax
c000a70f:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a713:	50                   	push   eax
c000a714:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a718:	52                   	push   edx
c000a719:	e8 23 ff ff ff       	call   c000a641 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a71e:	50                   	push   eax
c000a71f:	e8 a8 ff ff ff       	call   c000a6cc <Dbg::logs(char*)>
c000a724:	83 c4 20             	add    esp,0x20
c000a727:	c3                   	ret    

c000a728 <Dbg::kprintf(char const*, ...)>:
c000a728:	55                   	push   ebp
c000a729:	57                   	push   edi
c000a72a:	56                   	push   esi
c000a72b:	53                   	push   ebx
c000a72c:	83 ec 0c             	sub    esp,0xc
c000a72f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a733:	f6 05 9c 03 02 c0 10 	test   BYTE PTR ds:0xc002039c,0x10
c000a73a:	74 08                	je     c000a744 <Dbg::kprintf(char const*, ...)+0x1c>
c000a73c:	83 c4 0c             	add    esp,0xc
c000a73f:	5b                   	pop    ebx
c000a740:	5e                   	pop    esi
c000a741:	5f                   	pop    edi
c000a742:	5d                   	pop    ebp
c000a743:	c3                   	ret    
c000a744:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a748:	31 ff                	xor    edi,edi
c000a74a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a74e:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a751:	84 c0                	test   al,al
c000a753:	74 e7                	je     c000a73c <Dbg::kprintf(char const*, ...)+0x14>
c000a755:	8d 77 01             	lea    esi,[edi+0x1]
c000a758:	3c 25                	cmp    al,0x25
c000a75a:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a75d:	75 47                	jne    c000a7a6 <Dbg::kprintf(char const*, ...)+0x7e>
c000a75f:	83 c7 02             	add    edi,0x2
c000a762:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a765:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a768:	83 e8 25             	sub    eax,0x25
c000a76b:	3c 53                	cmp    al,0x53
c000a76d:	0f 87 d2 00 00 00    	ja     c000a845 <Dbg::kprintf(char const*, ...)+0x11d>
c000a773:	25 ff 00 00 00       	and    eax,0xff
c000a778:	ff 24 85 bc d6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe2944]
c000a77f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a783:	89 c8                	mov    eax,ecx
c000a785:	83 c1 04             	add    ecx,0x4
c000a788:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a78c:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a78e:	55                   	push   ebp
c000a78f:	e8 55 ff ff ff       	call   c000a6e9 <Dbg::logWriteInt(unsigned int)>
c000a794:	58                   	pop    eax
c000a795:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a798:	84 c0                	test   al,al
c000a79a:	74 a0                	je     c000a73c <Dbg::kprintf(char const*, ...)+0x14>
c000a79c:	8d 77 01             	lea    esi,[edi+0x1]
c000a79f:	3c 25                	cmp    al,0x25
c000a7a1:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a7a4:	74 b9                	je     c000a75f <Dbg::kprintf(char const*, ...)+0x37>
c000a7a6:	50                   	push   eax
c000a7a7:	89 f7                	mov    edi,esi
c000a7a9:	e8 fe fe ff ff       	call   c000a6ac <Dbg::logc(char)>
c000a7ae:	89 ee                	mov    esi,ebp
c000a7b0:	58                   	pop    eax
c000a7b1:	eb e2                	jmp    c000a795 <Dbg::kprintf(char const*, ...)+0x6d>
c000a7b3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a7b7:	89 c8                	mov    eax,ecx
c000a7b9:	83 c1 04             	add    ecx,0x4
c000a7bc:	8b 00                	mov    eax,DWORD PTR [eax]
c000a7be:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a7c2:	50                   	push   eax
c000a7c3:	e8 04 ff ff ff       	call   c000a6cc <Dbg::logs(char*)>
c000a7c8:	58                   	pop    eax
c000a7c9:	eb ca                	jmp    c000a795 <Dbg::kprintf(char const*, ...)+0x6d>
c000a7cb:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a7cf:	89 d0                	mov    eax,edx
c000a7d1:	83 c2 04             	add    edx,0x4
c000a7d4:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a7d8:	8b 00                	mov    eax,DWORD PTR [eax]
c000a7da:	50                   	push   eax
c000a7db:	e8 09 ff ff ff       	call   c000a6e9 <Dbg::logWriteInt(unsigned int)>
c000a7e0:	58                   	pop    eax
c000a7e1:	eb b2                	jmp    c000a795 <Dbg::kprintf(char const*, ...)+0x6d>
c000a7e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a7e7:	89 d0                	mov    eax,edx
c000a7e9:	83 c2 04             	add    edx,0x4
c000a7ec:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000a7ef:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a7f3:	50                   	push   eax
c000a7f4:	e8 b3 fe ff ff       	call   c000a6ac <Dbg::logc(char)>
c000a7f9:	58                   	pop    eax
c000a7fa:	eb 99                	jmp    c000a795 <Dbg::kprintf(char const*, ...)+0x6d>
c000a7fc:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a800:	89 c8                	mov    eax,ecx
c000a802:	83 c1 04             	add    ecx,0x4
c000a805:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a809:	6a 10                	push   0x10
c000a80b:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a80d:	51                   	push   ecx
c000a80e:	e8 f4 fe ff ff       	call   c000a707 <Dbg::logWriteIntBase(unsigned int, int)>
c000a813:	5d                   	pop    ebp
c000a814:	58                   	pop    eax
c000a815:	e9 7b ff ff ff       	jmp    c000a795 <Dbg::kprintf(char const*, ...)+0x6d>
c000a81a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a81e:	89 d0                	mov    eax,edx
c000a820:	83 c2 08             	add    edx,0x8
c000a823:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a827:	6a 10                	push   0x10
c000a829:	8b 00                	mov    eax,DWORD PTR [eax]
c000a82b:	50                   	push   eax
c000a82c:	e8 d6 fe ff ff       	call   c000a707 <Dbg::logWriteIntBase(unsigned int, int)>
c000a831:	58                   	pop    eax
c000a832:	5a                   	pop    edx
c000a833:	e9 5d ff ff ff       	jmp    c000a795 <Dbg::kprintf(char const*, ...)+0x6d>
c000a838:	6a 25                	push   0x25
c000a83a:	e8 6d fe ff ff       	call   c000a6ac <Dbg::logc(char)>
c000a83f:	5a                   	pop    edx
c000a840:	e9 50 ff ff ff       	jmp    c000a795 <Dbg::kprintf(char const*, ...)+0x6d>
c000a845:	6a 25                	push   0x25
c000a847:	e8 60 fe ff ff       	call   c000a6ac <Dbg::logc(char)>
c000a84c:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000a850:	50                   	push   eax
c000a851:	e8 56 fe ff ff       	call   c000a6ac <Dbg::logc(char)>
c000a856:	5a                   	pop    edx
c000a857:	59                   	pop    ecx
c000a858:	e9 38 ff ff ff       	jmp    c000a795 <Dbg::kprintf(char const*, ...)+0x6d>
c000a85d:	90                   	nop

c000a85e <File::read(unsigned long long, void*, int*)>:
c000a85e:	53                   	push   ebx
c000a85f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a863:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a867:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a86e:	3c 19                	cmp    al,0x19
c000a870:	77 35                	ja     c000a8a7 <File::read(unsigned long long, void*, int*)+0x49>
c000a872:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c000a879:	85 c0                	test   eax,eax
c000a87b:	74 2a                	je     c000a8a7 <File::read(unsigned long long, void*, int*)+0x49>
c000a87d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a883:	85 c0                	test   eax,eax
c000a885:	74 20                	je     c000a8a7 <File::read(unsigned long long, void*, int*)+0x49>
c000a887:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a88b:	74 21                	je     c000a8ae <File::read(unsigned long long, void*, int*)+0x50>
c000a88d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a88f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a893:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a899:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a89d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8a1:	5b                   	pop    ebx
c000a8a2:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000a8a5:	ff e0                	jmp    eax
c000a8a7:	b8 0b 00 00 00       	mov    eax,0xb
c000a8ac:	eb 05                	jmp    c000a8b3 <File::read(unsigned long long, void*, int*)+0x55>
c000a8ae:	b8 05 00 00 00       	mov    eax,0x5
c000a8b3:	5b                   	pop    ebx
c000a8b4:	c3                   	ret    
c000a8b5:	90                   	nop

c000a8b6 <File::write(unsigned long long, void*, int*)>:
c000a8b6:	53                   	push   ebx
c000a8b7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a8bb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a8bf:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a8c6:	3c 19                	cmp    al,0x19
c000a8c8:	77 35                	ja     c000a8ff <File::write(unsigned long long, void*, int*)+0x49>
c000a8ca:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c000a8d1:	85 c0                	test   eax,eax
c000a8d3:	74 2a                	je     c000a8ff <File::write(unsigned long long, void*, int*)+0x49>
c000a8d5:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a8db:	85 c0                	test   eax,eax
c000a8dd:	74 20                	je     c000a8ff <File::write(unsigned long long, void*, int*)+0x49>
c000a8df:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a8e3:	74 21                	je     c000a906 <File::write(unsigned long long, void*, int*)+0x50>
c000a8e5:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a8e7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a8eb:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a8f1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a8f5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a8f9:	5b                   	pop    ebx
c000a8fa:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000a8fd:	ff e0                	jmp    eax
c000a8ff:	b8 0b 00 00 00       	mov    eax,0xb
c000a904:	eb 05                	jmp    c000a90b <File::write(unsigned long long, void*, int*)+0x55>
c000a906:	b8 05 00 00 00       	mov    eax,0x5
c000a90b:	5b                   	pop    ebx
c000a90c:	c3                   	ret    
c000a90d:	90                   	nop

c000a90e <Directory::read(unsigned long long, void*, int*)>:
c000a90e:	53                   	push   ebx
c000a90f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000a913:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000a917:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000a91e:	3c 19                	cmp    al,0x19
c000a920:	77 35                	ja     c000a957 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a922:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c000a929:	85 c0                	test   eax,eax
c000a92b:	74 2a                	je     c000a957 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a92d:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000a933:	85 c0                	test   eax,eax
c000a935:	74 20                	je     c000a957 <Directory::read(unsigned long long, void*, int*)+0x49>
c000a937:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000a93b:	74 21                	je     c000a95e <Directory::read(unsigned long long, void*, int*)+0x50>
c000a93d:	8b 08                	mov    ecx,DWORD PTR [eax]
c000a93f:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000a943:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000a949:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a94d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a951:	5b                   	pop    ebx
c000a952:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c000a955:	ff e0                	jmp    eax
c000a957:	b8 0b 00 00 00       	mov    eax,0xb
c000a95c:	eb 05                	jmp    c000a963 <Directory::read(unsigned long long, void*, int*)+0x55>
c000a95e:	b8 05 00 00 00       	mov    eax,0x5
c000a963:	5b                   	pop    ebx
c000a964:	c3                   	ret    
c000a965:	90                   	nop

c000a966 <Directory::write(unsigned long long, void*, int*)>:
c000a966:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000a96a:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000a971:	b8 0b 00 00 00       	mov    eax,0xb
c000a976:	80 fa 19             	cmp    dl,0x19
c000a979:	77 18                	ja     c000a993 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a97b:	8b 14 95 e0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd720]
c000a982:	85 d2                	test   edx,edx
c000a984:	74 0d                	je     c000a993 <Directory::write(unsigned long long, void*, int*)+0x2d>
c000a986:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c000a98d:	19 c0                	sbb    eax,eax
c000a98f:	83 e0 0a             	and    eax,0xa
c000a992:	40                   	inc    eax
c000a993:	c3                   	ret    

c000a994 <File::isAtty()>:
c000a994:	31 c0                	xor    eax,eax
c000a996:	c3                   	ret    
c000a997:	90                   	nop

c000a998 <Directory::isAtty()>:
c000a998:	31 c0                	xor    eax,eax
c000a99a:	c3                   	ret    
c000a99b:	90                   	nop

c000a99c <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000a99c:	b8 0a 00 00 00       	mov    eax,0xa
c000a9a1:	c3                   	ret    

c000a9a2 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000a9a2:	b8 0a 00 00 00       	mov    eax,0xa
c000a9a7:	c3                   	ret    

c000a9a8 <Filesystem::allocateSwapfile(char const*, int)>:
c000a9a8:	31 c0                	xor    eax,eax
c000a9aa:	31 d2                	xor    edx,edx
c000a9ac:	c3                   	ret    
c000a9ad:	90                   	nop

c000a9ae <File::~File()>:
c000a9ae:	83 ec 0c             	sub    esp,0xc
c000a9b1:	ba 7c d8 01 c0       	mov    edx,0xc001d87c
c000a9b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9ba:	89 10                	mov    DWORD PTR [eax],edx
c000a9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000a9c0:	83 ec 0c             	sub    esp,0xc
c000a9c3:	50                   	push   eax
c000a9c4:	e8 ab e8 ff ff       	call   c0009274 <UnixFile::~UnixFile()>
c000a9c9:	83 c4 10             	add    esp,0x10
c000a9cc:	90                   	nop
c000a9cd:	83 c4 0c             	add    esp,0xc
c000a9d0:	c3                   	ret    
c000a9d1:	90                   	nop

c000a9d2 <File::~File()>:
c000a9d2:	83 ec 0c             	sub    esp,0xc
c000a9d5:	83 ec 0c             	sub    esp,0xc
c000a9d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9dc:	e8 cd ff ff ff       	call   c000a9ae <File::~File()>
c000a9e1:	83 c4 10             	add    esp,0x10
c000a9e4:	83 ec 08             	sub    esp,0x8
c000a9e7:	68 14 01 00 00       	push   0x114
c000a9ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a9f0:	e8 3d fc ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000a9f5:	83 c4 10             	add    esp,0x10
c000a9f8:	83 c4 0c             	add    esp,0xc
c000a9fb:	c3                   	ret    

c000a9fc <Directory::~Directory()>:
c000a9fc:	83 ec 0c             	sub    esp,0xc
c000a9ff:	ba 98 d8 01 c0       	mov    edx,0xc001d898
c000aa04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa08:	89 10                	mov    DWORD PTR [eax],edx
c000aa0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aa0e:	83 ec 0c             	sub    esp,0xc
c000aa11:	50                   	push   eax
c000aa12:	e8 5d e8 ff ff       	call   c0009274 <UnixFile::~UnixFile()>
c000aa17:	83 c4 10             	add    esp,0x10
c000aa1a:	90                   	nop
c000aa1b:	83 c4 0c             	add    esp,0xc
c000aa1e:	c3                   	ret    
c000aa1f:	90                   	nop

c000aa20 <Directory::~Directory()>:
c000aa20:	83 ec 0c             	sub    esp,0xc
c000aa23:	83 ec 0c             	sub    esp,0xc
c000aa26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa2a:	e8 cd ff ff ff       	call   c000a9fc <Directory::~Directory()>
c000aa2f:	83 c4 10             	add    esp,0x10
c000aa32:	83 ec 08             	sub    esp,0x8
c000aa35:	68 14 01 00 00       	push   0x114
c000aa3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa3e:	e8 ef fb ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000aa43:	83 c4 10             	add    esp,0x10
c000aa46:	83 c4 0c             	add    esp,0xc
c000aa49:	c3                   	ret    

c000aa4a <Filesystem::Filesystem()>:
c000aa4a:	ba 14 d8 01 c0       	mov    edx,0xc001d814
c000aa4f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa53:	89 10                	mov    DWORD PTR [eax],edx
c000aa55:	8b 15 74 04 02 c0    	mov    edx,DWORD PTR ds:0xc0020474
c000aa5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa5f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000aa62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa66:	a3 74 04 02 c0       	mov    ds:0xc0020474,eax
c000aa6b:	90                   	nop
c000aa6c:	c3                   	ret    
c000aa6d:	90                   	nop

c000aa6e <Filesystem::~Filesystem()>:
c000aa6e:	ba 14 d8 01 c0       	mov    edx,0xc001d814
c000aa73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000aa77:	89 10                	mov    DWORD PTR [eax],edx
c000aa79:	90                   	nop
c000aa7a:	c3                   	ret    
c000aa7b:	90                   	nop

c000aa7c <Filesystem::~Filesystem()>:
c000aa7c:	83 ec 0c             	sub    esp,0xc
c000aa7f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000aa83:	e8 e6 ff ff ff       	call   c000aa6e <Filesystem::~Filesystem()>
c000aa88:	83 c4 04             	add    esp,0x4
c000aa8b:	83 ec 08             	sub    esp,0x8
c000aa8e:	6a 08                	push   0x8
c000aa90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aa94:	e8 99 fb ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000aa99:	83 c4 10             	add    esp,0x10
c000aa9c:	83 c4 0c             	add    esp,0xc
c000aa9f:	c3                   	ret    

c000aaa0 <Fs::getcwd(Process*, char*, int)>:
c000aaa0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000aaa4:	31 c0                	xor    eax,eax
c000aaa6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000aaa9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000aaad:	7d 15                	jge    c000aac4 <Fs::getcwd(Process*, char*, int)+0x24>
c000aaaf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aab3:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000aaba:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000aabd:	84 c9                	test   cl,cl
c000aabf:	74 06                	je     c000aac7 <Fs::getcwd(Process*, char*, int)+0x27>
c000aac1:	40                   	inc    eax
c000aac2:	eb e2                	jmp    c000aaa6 <Fs::getcwd(Process*, char*, int)+0x6>
c000aac4:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000aac7:	31 c0                	xor    eax,eax
c000aac9:	c3                   	ret    

c000aaca <Fs::initVFS()>:
c000aaca:	83 ec 18             	sub    esp,0x18
c000aacd:	6a 08                	push   0x8
c000aacf:	e8 c5 ce ff ff       	call   c0007999 <malloc>
c000aad4:	89 04 24             	mov    DWORD PTR [esp],eax
c000aad7:	e8 a4 c2 00 00       	call   c0016d80 <FAT::FAT()>
c000aadc:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000aae3:	e8 b1 ce ff ff       	call   c0007999 <malloc>
c000aae8:	89 04 24             	mov    DWORD PTR [esp],eax
c000aaeb:	e8 1a ce 00 00       	call   c001790a <ISO9660::ISO9660()>
c000aaf0:	83 c4 1c             	add    esp,0x1c
c000aaf3:	c3                   	ret    

c000aaf4 <Fs::standardiseFiles(char*, char const*, char const*)>:
c000aaf4:	55                   	push   ebp
c000aaf5:	57                   	push   edi
c000aaf6:	56                   	push   esi
c000aaf7:	53                   	push   ebx
c000aaf8:	81 ec 10 04 00 00    	sub    esp,0x410
c000aafe:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000ab05:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000ab0c:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000ab13:	68 00 04 00 00       	push   0x400
c000ab18:	6a 00                	push   0x0
c000ab1a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000ab1e:	56                   	push   esi
c000ab1f:	e8 cc 59 ff ff       	call   c00004f0 <memset>
c000ab24:	83 c4 10             	add    esp,0x10
c000ab27:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000ab2b:	75 0b                	jne    c000ab38 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000ab2d:	50                   	push   eax
c000ab2e:	50                   	push   eax
c000ab2f:	57                   	push   edi
c000ab30:	56                   	push   esi
c000ab31:	e8 ea 5a ff ff       	call   c0000620 <strcpy>
c000ab36:	eb 41                	jmp    c000ab79 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c000ab38:	8a 07                	mov    al,BYTE PTR [edi]
c000ab3a:	3c 5c                	cmp    al,0x5c
c000ab3c:	74 04                	je     c000ab42 <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c000ab3e:	3c 2f                	cmp    al,0x2f
c000ab40:	75 18                	jne    c000ab5a <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c000ab42:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000ab45:	3c 60                	cmp    al,0x60
c000ab47:	7e 03                	jle    c000ab4c <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c000ab49:	83 e8 20             	sub    eax,0x20
c000ab4c:	88 04 24             	mov    BYTE PTR [esp],al
c000ab4f:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ab56:	50                   	push   eax
c000ab57:	50                   	push   eax
c000ab58:	eb 18                	jmp    c000ab72 <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c000ab5a:	50                   	push   eax
c000ab5b:	50                   	push   eax
c000ab5c:	55                   	push   ebp
c000ab5d:	56                   	push   esi
c000ab5e:	e8 bd 5a ff ff       	call   c0000620 <strcpy>
c000ab63:	5a                   	pop    edx
c000ab64:	59                   	pop    ecx
c000ab65:	68 bf e4 01 c0       	push   0xc001e4bf
c000ab6a:	56                   	push   esi
c000ab6b:	e8 70 5c ff ff       	call   c00007e0 <strcat>
c000ab70:	5d                   	pop    ebp
c000ab71:	58                   	pop    eax
c000ab72:	57                   	push   edi
c000ab73:	56                   	push   esi
c000ab74:	e8 67 5c ff ff       	call   c00007e0 <strcat>
c000ab79:	83 c4 10             	add    esp,0x10
c000ab7c:	8a 04 24             	mov    al,BYTE PTR [esp]
c000ab7f:	3c 60                	cmp    al,0x60
c000ab81:	7e 03                	jle    c000ab86 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c000ab83:	83 e8 20             	sub    eax,0x20
c000ab86:	88 04 24             	mov    BYTE PTR [esp],al
c000ab89:	88 03                	mov    BYTE PTR [ebx],al
c000ab8b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000ab92:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000ab98:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000ab9c:	bf 03 00 00 00       	mov    edi,0x3
c000aba1:	b8 03 00 00 00       	mov    eax,0x3
c000aba6:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c000aba9:	84 d2                	test   dl,dl
c000abab:	0f 84 91 00 00 00    	je     c000ac42 <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c000abb1:	8d 4f 01             	lea    ecx,[edi+0x1]
c000abb4:	80 fa 5c             	cmp    dl,0x5c
c000abb7:	74 05                	je     c000abbe <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c000abb9:	80 fa 2f             	cmp    dl,0x2f
c000abbc:	75 12                	jne    c000abd0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000abbe:	89 c5                	mov    ebp,eax
c000abc0:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000abc5:	74 09                	je     c000abd0 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c000abc7:	40                   	inc    eax
c000abc8:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000abcc:	89 cf                	mov    edi,ecx
c000abce:	eb d6                	jmp    c000aba6 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c000abd0:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000abd5:	75 5b                	jne    c000ac32 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000abd7:	80 fa 2e             	cmp    dl,0x2e
c000abda:	75 56                	jne    c000ac32 <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c000abdc:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000abe0:	74 19                	je     c000abfb <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c000abe2:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000abe7:	74 53                	je     c000ac3c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000abe9:	89 f9                	mov    ecx,edi
c000abeb:	41                   	inc    ecx
c000abec:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000abef:	80 fa 2f             	cmp    dl,0x2f
c000abf2:	74 f7                	je     c000abeb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000abf4:	80 fa 5c             	cmp    dl,0x5c
c000abf7:	74 f2                	je     c000abeb <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c000abf9:	eb d1                	jmp    c000abcc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000abfb:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c000ac00:	74 3a                	je     c000ac3c <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c000ac02:	83 f8 03             	cmp    eax,0x3
c000ac05:	74 c5                	je     c000abcc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ac07:	41                   	inc    ecx
c000ac08:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c000ac0b:	80 fa 2f             	cmp    dl,0x2f
c000ac0e:	74 f7                	je     c000ac07 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ac10:	80 fa 5c             	cmp    dl,0x5c
c000ac13:	74 f2                	je     c000ac07 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c000ac15:	48                   	dec    eax
c000ac16:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ac1a:	75 06                	jne    c000ac22 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ac1c:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ac20:	eb f3                	jmp    c000ac15 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c000ac22:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000ac26:	74 07                	je     c000ac2f <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c000ac28:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ac2c:	48                   	dec    eax
c000ac2d:	eb f3                	jmp    c000ac22 <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c000ac2f:	40                   	inc    eax
c000ac30:	eb 9a                	jmp    c000abcc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ac32:	80 fa 2f             	cmp    dl,0x2f
c000ac35:	74 95                	je     c000abcc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ac37:	80 fa 5c             	cmp    dl,0x5c
c000ac3a:	74 90                	je     c000abcc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ac3c:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000ac3f:	40                   	inc    eax
c000ac40:	eb 8a                	jmp    c000abcc <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c000ac42:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000ac46:	83 ec 0c             	sub    esp,0xc
c000ac49:	53                   	push   ebx
c000ac4a:	e8 11 59 ff ff       	call   c0000560 <strlen>
c000ac4f:	83 c4 10             	add    esp,0x10
c000ac52:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000ac57:	75 26                	jne    c000ac7f <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c000ac59:	83 ec 0c             	sub    esp,0xc
c000ac5c:	53                   	push   ebx
c000ac5d:	e8 fe 58 ff ff       	call   c0000560 <strlen>
c000ac62:	83 c4 10             	add    esp,0x10
c000ac65:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000ac6a:	74 26                	je     c000ac92 <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c000ac6c:	83 ec 0c             	sub    esp,0xc
c000ac6f:	53                   	push   ebx
c000ac70:	e8 eb 58 ff ff       	call   c0000560 <strlen>
c000ac75:	83 c4 10             	add    esp,0x10
c000ac78:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000ac7d:	eb c7                	jmp    c000ac46 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c000ac7f:	83 ec 0c             	sub    esp,0xc
c000ac82:	53                   	push   ebx
c000ac83:	e8 d8 58 ff ff       	call   c0000560 <strlen>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000ac90:	74 c7                	je     c000ac59 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c000ac92:	81 c4 0c 04 00 00    	add    esp,0x40c
c000ac98:	5b                   	pop    ebx
c000ac99:	5e                   	pop    esi
c000ac9a:	5f                   	pop    edi
c000ac9b:	5d                   	pop    ebp
c000ac9c:	c3                   	ret    
c000ac9d:	90                   	nop

c000ac9e <File::File(char const*, Process*)>:
c000ac9e:	83 ec 0c             	sub    esp,0xc
c000aca1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000aca5:	83 ec 08             	sub    esp,0x8
c000aca8:	6a 00                	push   0x0
c000acaa:	50                   	push   eax
c000acab:	e8 e2 e3 ff ff       	call   c0009092 <UnixFile::UnixFile(int)>
c000acb0:	83 c4 10             	add    esp,0x10
c000acb3:	ba 7c d8 01 c0       	mov    edx,0xc001d87c
c000acb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acbc:	89 10                	mov    DWORD PTR [eax],edx
c000acbe:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000acc2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000acc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000accc:	83 c0 0d             	add    eax,0xd
c000accf:	83 ec 04             	sub    esp,0x4
c000acd2:	52                   	push   edx
c000acd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000acd7:	50                   	push   eax
c000acd8:	e8 17 fe ff ff       	call   c000aaf4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000acdd:	83 c4 10             	add    esp,0x10
c000ace0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ace4:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000ace7:	8d 50 bf             	lea    edx,[eax-0x41]
c000acea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acee:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000acf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000acf8:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000acfc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad00:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ad06:	25 ff 00 00 00       	and    eax,0xff
c000ad0b:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c000ad12:	85 c0                	test   eax,eax
c000ad14:	74 42                	je     c000ad58 <File::File(char const*, Process*)+0xba>
c000ad16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad1a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ad20:	25 ff 00 00 00       	and    eax,0xff
c000ad25:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c000ad2c:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ad32:	85 c0                	test   eax,eax
c000ad34:	75 22                	jne    c000ad58 <File::File(char const*, Process*)+0xba>
c000ad36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad3a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000ad40:	25 ff 00 00 00       	and    eax,0xff
c000ad45:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c000ad4c:	83 ec 0c             	sub    esp,0xc
c000ad4f:	50                   	push   eax
c000ad50:	e8 f9 1f 00 00       	call   c000cd4e <LogicalDisk::mount()>
c000ad55:	83 c4 10             	add    esp,0x10
c000ad58:	90                   	nop
c000ad59:	83 c4 0c             	add    esp,0xc
c000ad5c:	c3                   	ret    
c000ad5d:	90                   	nop

c000ad5e <File::open(FileOpenMode)>:
c000ad5e:	53                   	push   ebx
c000ad5f:	b8 0b 00 00 00       	mov    eax,0xb
c000ad64:	83 ec 08             	sub    esp,0x8
c000ad67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000ad6b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000ad72:	80 fa 19             	cmp    dl,0x19
c000ad75:	77 40                	ja     c000adb7 <File::open(FileOpenMode)+0x59>
c000ad77:	8b 14 95 e0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd720]
c000ad7e:	85 d2                	test   edx,edx
c000ad80:	74 35                	je     c000adb7 <File::open(FileOpenMode)+0x59>
c000ad82:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ad88:	85 d2                	test   edx,edx
c000ad8a:	74 2b                	je     c000adb7 <File::open(FileOpenMode)+0x59>
c000ad8c:	b8 06 00 00 00       	mov    eax,0x6
c000ad91:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000ad95:	75 20                	jne    c000adb7 <File::open(FileOpenMode)+0x59>
c000ad97:	8b 02                	mov    eax,DWORD PTR [edx]
c000ad99:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000ad9f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ada3:	51                   	push   ecx
c000ada4:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000ada7:	51                   	push   ecx
c000ada8:	52                   	push   edx
c000ada9:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000adac:	83 c4 10             	add    esp,0x10
c000adaf:	85 c0                	test   eax,eax
c000adb1:	75 04                	jne    c000adb7 <File::open(FileOpenMode)+0x59>
c000adb3:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000adb7:	83 c4 08             	add    esp,0x8
c000adba:	5b                   	pop    ebx
c000adbb:	c3                   	ret    

c000adbc <File::close()>:
c000adbc:	53                   	push   ebx
c000adbd:	b8 0b 00 00 00       	mov    eax,0xb
c000adc2:	83 ec 08             	sub    esp,0x8
c000adc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000adc9:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000add0:	80 fa 19             	cmp    dl,0x19
c000add3:	77 41                	ja     c000ae16 <File::close()+0x5a>
c000add5:	8b 1c 95 e0 28 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd720]
c000addc:	85 db                	test   ebx,ebx
c000adde:	74 36                	je     c000ae16 <File::close()+0x5a>
c000ade0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000ade7:	74 2d                	je     c000ae16 <File::close()+0x5a>
c000ade9:	b8 05 00 00 00       	mov    eax,0x5
c000adee:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000adf2:	74 22                	je     c000ae16 <File::close()+0x5a>
c000adf4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000adf8:	8b 04 95 e0 28 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd720]
c000adff:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000ae05:	53                   	push   ebx
c000ae06:	53                   	push   ebx
c000ae07:	8b 10                	mov    edx,DWORD PTR [eax]
c000ae09:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000ae0f:	50                   	push   eax
c000ae10:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c000ae13:	83 c4 10             	add    esp,0x10
c000ae16:	83 c4 08             	add    esp,0x8
c000ae19:	5b                   	pop    ebx
c000ae1a:	c3                   	ret    
c000ae1b:	90                   	nop

c000ae1c <File::seek(unsigned long long)>:
c000ae1c:	56                   	push   esi
c000ae1d:	53                   	push   ebx
c000ae1e:	b8 0b 00 00 00       	mov    eax,0xb
c000ae23:	51                   	push   ecx
c000ae24:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ae28:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ae2c:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000ae33:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ae37:	80 fa 19             	cmp    dl,0x19
c000ae3a:	77 31                	ja     c000ae6d <File::seek(unsigned long long)+0x51>
c000ae3c:	8b 14 95 e0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd720]
c000ae43:	85 d2                	test   edx,edx
c000ae45:	74 26                	je     c000ae6d <File::seek(unsigned long long)+0x51>
c000ae47:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ae4d:	85 d2                	test   edx,edx
c000ae4f:	74 1c                	je     c000ae6d <File::seek(unsigned long long)+0x51>
c000ae51:	b8 05 00 00 00       	mov    eax,0x5
c000ae56:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000ae5a:	74 11                	je     c000ae6d <File::seek(unsigned long long)+0x51>
c000ae5c:	8b 02                	mov    eax,DWORD PTR [edx]
c000ae5e:	53                   	push   ebx
c000ae5f:	51                   	push   ecx
c000ae60:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000ae66:	52                   	push   edx
c000ae67:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000ae6a:	83 c4 10             	add    esp,0x10
c000ae6d:	5a                   	pop    edx
c000ae6e:	5b                   	pop    ebx
c000ae6f:	5e                   	pop    esi
c000ae70:	c3                   	ret    
c000ae71:	90                   	nop

c000ae72 <File::tell(unsigned long long*)>:
c000ae72:	83 ec 0c             	sub    esp,0xc
c000ae75:	b8 0b 00 00 00       	mov    eax,0xb
c000ae7a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000ae7e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000ae85:	80 fa 19             	cmp    dl,0x19
c000ae88:	77 34                	ja     c000aebe <File::tell(unsigned long long*)+0x4c>
c000ae8a:	8b 14 95 e0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd720]
c000ae91:	85 d2                	test   edx,edx
c000ae93:	74 29                	je     c000aebe <File::tell(unsigned long long*)+0x4c>
c000ae95:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000ae9b:	85 d2                	test   edx,edx
c000ae9d:	74 1f                	je     c000aebe <File::tell(unsigned long long*)+0x4c>
c000ae9f:	b8 05 00 00 00       	mov    eax,0x5
c000aea4:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000aea8:	74 14                	je     c000aebe <File::tell(unsigned long long*)+0x4c>
c000aeaa:	50                   	push   eax
c000aeab:	8b 02                	mov    eax,DWORD PTR [edx]
c000aead:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aeb1:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000aeb7:	52                   	push   edx
c000aeb8:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000aebb:	83 c4 10             	add    esp,0x10
c000aebe:	83 c4 0c             	add    esp,0xc
c000aec1:	c3                   	ret    

c000aec2 <File::rewind()>:
c000aec2:	83 ec 10             	sub    esp,0x10
c000aec5:	6a 00                	push   0x0
c000aec7:	6a 00                	push   0x0
c000aec9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000aecd:	e8 4a ff ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c000aed2:	83 c4 1c             	add    esp,0x1c
c000aed5:	c3                   	ret    

c000aed6 <File::unlink()>:
c000aed6:	83 ec 0c             	sub    esp,0xc
c000aed9:	b8 0b 00 00 00       	mov    eax,0xb
c000aede:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000aee2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000aee9:	80 f9 19             	cmp    cl,0x19
c000aeec:	77 2f                	ja     c000af1d <File::unlink()+0x47>
c000aeee:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000aef5:	85 c9                	test   ecx,ecx
c000aef7:	74 24                	je     c000af1d <File::unlink()+0x47>
c000aef9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000aeff:	85 c9                	test   ecx,ecx
c000af01:	74 1a                	je     c000af1d <File::unlink()+0x47>
c000af03:	b8 06 00 00 00       	mov    eax,0x6
c000af08:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af0c:	75 0f                	jne    c000af1d <File::unlink()+0x47>
c000af0e:	83 c2 0d             	add    edx,0xd
c000af11:	50                   	push   eax
c000af12:	50                   	push   eax
c000af13:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af15:	52                   	push   edx
c000af16:	51                   	push   ecx
c000af17:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000af1a:	83 c4 10             	add    esp,0x10
c000af1d:	83 c4 0c             	add    esp,0xc
c000af20:	c3                   	ret    
c000af21:	90                   	nop

c000af22 <File::rename(char const*)>:
c000af22:	83 ec 0c             	sub    esp,0xc
c000af25:	b8 0b 00 00 00       	mov    eax,0xb
c000af2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af2e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af35:	80 f9 19             	cmp    cl,0x19
c000af38:	77 32                	ja     c000af6c <File::rename(char const*)+0x4a>
c000af3a:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000af41:	85 c9                	test   ecx,ecx
c000af43:	74 27                	je     c000af6c <File::rename(char const*)+0x4a>
c000af45:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000af4b:	85 c9                	test   ecx,ecx
c000af4d:	74 1d                	je     c000af6c <File::rename(char const*)+0x4a>
c000af4f:	b8 06 00 00 00       	mov    eax,0x6
c000af54:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000af58:	75 12                	jne    c000af6c <File::rename(char const*)+0x4a>
c000af5a:	83 c2 0d             	add    edx,0xd
c000af5d:	50                   	push   eax
c000af5e:	8b 01                	mov    eax,DWORD PTR [ecx]
c000af60:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000af64:	52                   	push   edx
c000af65:	51                   	push   ecx
c000af66:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000af69:	83 c4 10             	add    esp,0x10
c000af6c:	83 c4 0c             	add    esp,0xc
c000af6f:	c3                   	ret    

c000af70 <File::chfatattr(unsigned char, unsigned char)>:
c000af70:	57                   	push   edi
c000af71:	b8 0b 00 00 00       	mov    eax,0xb
c000af76:	56                   	push   esi
c000af77:	53                   	push   ebx
c000af78:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000af7c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000af80:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000af87:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000af8b:	80 f9 19             	cmp    cl,0x19
c000af8e:	77 37                	ja     c000afc7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000af90:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000af97:	85 c9                	test   ecx,ecx
c000af99:	74 2c                	je     c000afc7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000af9b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000afa1:	85 c9                	test   ecx,ecx
c000afa3:	74 22                	je     c000afc7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000afa5:	b8 06 00 00 00       	mov    eax,0x6
c000afaa:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000afae:	75 17                	jne    c000afc7 <File::chfatattr(unsigned char, unsigned char)+0x57>
c000afb0:	8b 39                	mov    edi,DWORD PTR [ecx]
c000afb2:	89 f0                	mov    eax,esi
c000afb4:	83 c2 0d             	add    edx,0xd
c000afb7:	0f b6 f0             	movzx  esi,al
c000afba:	0f b6 db             	movzx  ebx,bl
c000afbd:	56                   	push   esi
c000afbe:	53                   	push   ebx
c000afbf:	52                   	push   edx
c000afc0:	51                   	push   ecx
c000afc1:	ff 57 34             	call   DWORD PTR [edi+0x34]
c000afc4:	83 c4 10             	add    esp,0x10
c000afc7:	5b                   	pop    ebx
c000afc8:	5e                   	pop    esi
c000afc9:	5f                   	pop    edi
c000afca:	c3                   	ret    
c000afcb:	90                   	nop

c000afcc <File::exists()>:
c000afcc:	83 ec 0c             	sub    esp,0xc
c000afcf:	31 c0                	xor    eax,eax
c000afd1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000afd5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000afdc:	80 f9 19             	cmp    cl,0x19
c000afdf:	77 24                	ja     c000b005 <File::exists()+0x39>
c000afe1:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000afe8:	85 c9                	test   ecx,ecx
c000afea:	74 19                	je     c000b005 <File::exists()+0x39>
c000afec:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000aff2:	85 c9                	test   ecx,ecx
c000aff4:	74 0f                	je     c000b005 <File::exists()+0x39>
c000aff6:	83 c2 0d             	add    edx,0xd
c000aff9:	50                   	push   eax
c000affa:	50                   	push   eax
c000affb:	8b 01                	mov    eax,DWORD PTR [ecx]
c000affd:	52                   	push   edx
c000affe:	51                   	push   ecx
c000afff:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b002:	83 c4 10             	add    esp,0x10
c000b005:	83 c4 0c             	add    esp,0xc
c000b008:	c3                   	ret    
c000b009:	90                   	nop

c000b00a <File::stat(unsigned long long*, bool*)>:
c000b00a:	56                   	push   esi
c000b00b:	53                   	push   ebx
c000b00c:	50                   	push   eax
c000b00d:	b8 0b 00 00 00       	mov    eax,0xb
c000b012:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b016:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b01a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b021:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b025:	80 f9 19             	cmp    cl,0x19
c000b028:	77 3d                	ja     c000b067 <File::stat(unsigned long long*, bool*)+0x5d>
c000b02a:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000b031:	85 c9                	test   ecx,ecx
c000b033:	74 32                	je     c000b067 <File::stat(unsigned long long*, bool*)+0x5d>
c000b035:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b03b:	85 c9                	test   ecx,ecx
c000b03d:	74 28                	je     c000b067 <File::stat(unsigned long long*, bool*)+0x5d>
c000b03f:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b041:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b045:	74 13                	je     c000b05a <File::stat(unsigned long long*, bool*)+0x50>
c000b047:	83 ec 04             	sub    esp,0x4
c000b04a:	56                   	push   esi
c000b04b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b051:	51                   	push   ecx
c000b052:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b055:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000b058:	eb 0a                	jmp    c000b064 <File::stat(unsigned long long*, bool*)+0x5a>
c000b05a:	53                   	push   ebx
c000b05b:	83 c2 0d             	add    edx,0xd
c000b05e:	56                   	push   esi
c000b05f:	52                   	push   edx
c000b060:	51                   	push   ecx
c000b061:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000b064:	83 c4 10             	add    esp,0x10
c000b067:	5a                   	pop    edx
c000b068:	5b                   	pop    ebx
c000b069:	5e                   	pop    esi
c000b06a:	c3                   	ret    

c000b06b <Fs::setcwd(Process*, char*)>:
c000b06b:	55                   	push   ebp
c000b06c:	57                   	push   edi
c000b06d:	56                   	push   esi
c000b06e:	53                   	push   ebx
c000b06f:	81 ec 20 02 00 00    	sub    esp,0x220
c000b075:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000b07c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000b082:	57                   	push   edi
c000b083:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000b08a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000b08e:	56                   	push   esi
c000b08f:	e8 60 fa ff ff       	call   c000aaf4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b094:	89 34 24             	mov    DWORD PTR [esp],esi
c000b097:	e8 c4 54 ff ff       	call   c0000560 <strlen>
c000b09c:	83 c4 10             	add    esp,0x10
c000b09f:	83 f8 02             	cmp    eax,0x2
c000b0a2:	77 15                	ja     c000b0b9 <Fs::setcwd(Process*, char*)+0x4e>
c000b0a4:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000b0a9:	83 eb 41             	sub    ebx,0x41
c000b0ac:	8b 04 9d e0 28 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdd720]
c000b0b3:	85 c0                	test   eax,eax
c000b0b5:	75 1c                	jne    c000b0d3 <Fs::setcwd(Process*, char*)+0x68>
c000b0b7:	eb 2f                	jmp    c000b0e8 <Fs::setcwd(Process*, char*)+0x7d>
c000b0b9:	83 ec 0c             	sub    esp,0xc
c000b0bc:	56                   	push   esi
c000b0bd:	e8 9e 54 ff ff       	call   c0000560 <strlen>
c000b0c2:	83 c4 10             	add    esp,0x10
c000b0c5:	83 f8 03             	cmp    eax,0x3
c000b0c8:	75 57                	jne    c000b121 <Fs::setcwd(Process*, char*)+0xb6>
c000b0ca:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000b0cf:	75 50                	jne    c000b121 <Fs::setcwd(Process*, char*)+0xb6>
c000b0d1:	eb d1                	jmp    c000b0a4 <Fs::setcwd(Process*, char*)+0x39>
c000b0d3:	83 b8 70 01 00 00 00 	cmp    DWORD PTR [eax+0x170],0x0
c000b0da:	75 0c                	jne    c000b0e8 <Fs::setcwd(Process*, char*)+0x7d>
c000b0dc:	83 ec 0c             	sub    esp,0xc
c000b0df:	50                   	push   eax
c000b0e0:	e8 69 1c 00 00       	call   c000cd4e <LogicalDisk::mount()>
c000b0e5:	83 c4 10             	add    esp,0x10
c000b0e8:	b8 03 00 00 00       	mov    eax,0x3
c000b0ed:	83 fb 19             	cmp    ebx,0x19
c000b0f0:	0f 87 c6 00 00 00    	ja     c000b1bc <Fs::setcwd(Process*, char*)+0x151>
c000b0f6:	8b 14 9d e0 28 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffdd720]
c000b0fd:	b8 05 00 00 00       	mov    eax,0x5
c000b102:	85 d2                	test   edx,edx
c000b104:	0f 84 b2 00 00 00    	je     c000b1bc <Fs::setcwd(Process*, char*)+0x151>
c000b10a:	b8 06 00 00 00       	mov    eax,0x6
c000b10f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b116:	0f 85 92 00 00 00    	jne    c000b1ae <Fs::setcwd(Process*, char*)+0x143>
c000b11c:	e9 9b 00 00 00       	jmp    c000b1bc <Fs::setcwd(Process*, char*)+0x151>
c000b121:	83 ec 0c             	sub    esp,0xc
c000b124:	68 14 01 00 00       	push   0x114
c000b129:	e8 6b c8 ff ff       	call   c0007999 <malloc>
c000b12e:	83 c4 0c             	add    esp,0xc
c000b131:	89 c3                	mov    ebx,eax
c000b133:	55                   	push   ebp
c000b134:	56                   	push   esi
c000b135:	50                   	push   eax
c000b136:	e8 63 fb ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c000b13b:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000b140:	83 c4 0c             	add    esp,0xc
c000b143:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000b147:	50                   	push   eax
c000b148:	8d 44 24 10          	lea    eax,[esp+0x10]
c000b14c:	50                   	push   eax
c000b14d:	53                   	push   ebx
c000b14e:	e8 b7 fe ff ff       	call   c000b00a <File::stat(unsigned long long*, bool*)>
c000b153:	83 c4 10             	add    esp,0x10
c000b156:	83 f8 02             	cmp    eax,0x2
c000b159:	74 04                	je     c000b15f <Fs::setcwd(Process*, char*)+0xf4>
c000b15b:	85 c0                	test   eax,eax
c000b15d:	74 1c                	je     c000b17b <Fs::setcwd(Process*, char*)+0x110>
c000b15f:	b8 01 00 00 00       	mov    eax,0x1
c000b164:	85 db                	test   ebx,ebx
c000b166:	74 54                	je     c000b1bc <Fs::setcwd(Process*, char*)+0x151>
c000b168:	83 ec 0c             	sub    esp,0xc
c000b16b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b16d:	53                   	push   ebx
c000b16e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b171:	83 c4 10             	add    esp,0x10
c000b174:	b8 01 00 00 00       	mov    eax,0x1
c000b179:	eb 41                	jmp    c000b1bc <Fs::setcwd(Process*, char*)+0x151>
c000b17b:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000b180:	75 1c                	jne    c000b19e <Fs::setcwd(Process*, char*)+0x133>
c000b182:	b8 02 00 00 00       	mov    eax,0x2
c000b187:	85 db                	test   ebx,ebx
c000b189:	74 31                	je     c000b1bc <Fs::setcwd(Process*, char*)+0x151>
c000b18b:	83 ec 0c             	sub    esp,0xc
c000b18e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b190:	53                   	push   ebx
c000b191:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b194:	83 c4 10             	add    esp,0x10
c000b197:	b8 02 00 00 00       	mov    eax,0x2
c000b19c:	eb 1e                	jmp    c000b1bc <Fs::setcwd(Process*, char*)+0x151>
c000b19e:	85 db                	test   ebx,ebx
c000b1a0:	74 0c                	je     c000b1ae <Fs::setcwd(Process*, char*)+0x143>
c000b1a2:	83 ec 0c             	sub    esp,0xc
c000b1a5:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1a7:	53                   	push   ebx
c000b1a8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b1ab:	83 c4 10             	add    esp,0x10
c000b1ae:	50                   	push   eax
c000b1af:	50                   	push   eax
c000b1b0:	56                   	push   esi
c000b1b1:	57                   	push   edi
c000b1b2:	e8 69 54 ff ff       	call   c0000620 <strcpy>
c000b1b7:	83 c4 10             	add    esp,0x10
c000b1ba:	31 c0                	xor    eax,eax
c000b1bc:	81 c4 1c 02 00 00    	add    esp,0x21c
c000b1c2:	5b                   	pop    ebx
c000b1c3:	5e                   	pop    esi
c000b1c4:	5f                   	pop    edi
c000b1c5:	5d                   	pop    ebp
c000b1c6:	c3                   	ret    
c000b1c7:	90                   	nop

c000b1c8 <Directory::Directory(char const*, Process*)>:
c000b1c8:	83 ec 0c             	sub    esp,0xc
c000b1cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1cf:	83 ec 08             	sub    esp,0x8
c000b1d2:	6a 00                	push   0x0
c000b1d4:	50                   	push   eax
c000b1d5:	e8 b8 de ff ff       	call   c0009092 <UnixFile::UnixFile(int)>
c000b1da:	83 c4 10             	add    esp,0x10
c000b1dd:	ba 98 d8 01 c0       	mov    edx,0xc001d898
c000b1e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1e6:	89 10                	mov    DWORD PTR [eax],edx
c000b1e8:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b1ec:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b1f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b1f6:	83 c0 0d             	add    eax,0xd
c000b1f9:	83 ec 04             	sub    esp,0x4
c000b1fc:	52                   	push   edx
c000b1fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b201:	50                   	push   eax
c000b202:	e8 ed f8 ff ff       	call   c000aaf4 <Fs::standardiseFiles(char*, char const*, char const*)>
c000b207:	83 c4 10             	add    esp,0x10
c000b20a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b20e:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b211:	8d 50 bf             	lea    edx,[eax-0x41]
c000b214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b218:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b21e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b222:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b226:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b22a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b230:	25 ff 00 00 00       	and    eax,0xff
c000b235:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c000b23c:	85 c0                	test   eax,eax
c000b23e:	74 42                	je     c000b282 <Directory::Directory(char const*, Process*)+0xba>
c000b240:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b244:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b24a:	25 ff 00 00 00       	and    eax,0xff
c000b24f:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c000b256:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b25c:	85 c0                	test   eax,eax
c000b25e:	75 22                	jne    c000b282 <Directory::Directory(char const*, Process*)+0xba>
c000b260:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b264:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b26a:	25 ff 00 00 00       	and    eax,0xff
c000b26f:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c000b276:	83 ec 0c             	sub    esp,0xc
c000b279:	50                   	push   eax
c000b27a:	e8 cf 1a 00 00       	call   c000cd4e <LogicalDisk::mount()>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	90                   	nop
c000b283:	83 c4 0c             	add    esp,0xc
c000b286:	c3                   	ret    
c000b287:	90                   	nop

c000b288 <Directory::open()>:
c000b288:	53                   	push   ebx
c000b289:	b8 0b 00 00 00       	mov    eax,0xb
c000b28e:	83 ec 08             	sub    esp,0x8
c000b291:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b295:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b29c:	80 fa 19             	cmp    dl,0x19
c000b29f:	77 3d                	ja     c000b2de <Directory::open()+0x56>
c000b2a1:	8b 14 95 e0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd720]
c000b2a8:	85 d2                	test   edx,edx
c000b2aa:	74 32                	je     c000b2de <Directory::open()+0x56>
c000b2ac:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c000b2b2:	85 d2                	test   edx,edx
c000b2b4:	74 28                	je     c000b2de <Directory::open()+0x56>
c000b2b6:	b8 06 00 00 00       	mov    eax,0x6
c000b2bb:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b2bf:	75 1d                	jne    c000b2de <Directory::open()+0x56>
c000b2c1:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b2c7:	50                   	push   eax
c000b2c8:	8b 02                	mov    eax,DWORD PTR [edx]
c000b2ca:	51                   	push   ecx
c000b2cb:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b2ce:	51                   	push   ecx
c000b2cf:	52                   	push   edx
c000b2d0:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c000b2d3:	83 c4 10             	add    esp,0x10
c000b2d6:	85 c0                	test   eax,eax
c000b2d8:	75 04                	jne    c000b2de <Directory::open()+0x56>
c000b2da:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b2de:	83 c4 08             	add    esp,0x8
c000b2e1:	5b                   	pop    ebx
c000b2e2:	c3                   	ret    
c000b2e3:	90                   	nop

c000b2e4 <Directory::close()>:
c000b2e4:	53                   	push   ebx
c000b2e5:	b8 0b 00 00 00       	mov    eax,0xb
c000b2ea:	83 ec 08             	sub    esp,0x8
c000b2ed:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b2f1:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b2f8:	80 fa 19             	cmp    dl,0x19
c000b2fb:	77 41                	ja     c000b33e <Directory::close()+0x5a>
c000b2fd:	8b 1c 95 e0 28 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffdd720]
c000b304:	85 db                	test   ebx,ebx
c000b306:	74 36                	je     c000b33e <Directory::close()+0x5a>
c000b308:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c000b30f:	74 2d                	je     c000b33e <Directory::close()+0x5a>
c000b311:	b8 05 00 00 00       	mov    eax,0x5
c000b316:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b31a:	74 22                	je     c000b33e <Directory::close()+0x5a>
c000b31c:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c000b320:	8b 04 95 e0 28 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdd720]
c000b327:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c000b32d:	53                   	push   ebx
c000b32e:	53                   	push   ebx
c000b32f:	8b 10                	mov    edx,DWORD PTR [eax]
c000b331:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b337:	50                   	push   eax
c000b338:	ff 52 20             	call   DWORD PTR [edx+0x20]
c000b33b:	83 c4 10             	add    esp,0x10
c000b33e:	83 c4 08             	add    esp,0x8
c000b341:	5b                   	pop    ebx
c000b342:	c3                   	ret    
c000b343:	90                   	nop

c000b344 <Directory::unlink()>:
c000b344:	83 ec 0c             	sub    esp,0xc
c000b347:	b8 0b 00 00 00       	mov    eax,0xb
c000b34c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b350:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b357:	80 f9 19             	cmp    cl,0x19
c000b35a:	77 2f                	ja     c000b38b <Directory::unlink()+0x47>
c000b35c:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000b363:	85 c9                	test   ecx,ecx
c000b365:	74 24                	je     c000b38b <Directory::unlink()+0x47>
c000b367:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b36d:	85 c9                	test   ecx,ecx
c000b36f:	74 1a                	je     c000b38b <Directory::unlink()+0x47>
c000b371:	b8 06 00 00 00       	mov    eax,0x6
c000b376:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b37a:	75 0f                	jne    c000b38b <Directory::unlink()+0x47>
c000b37c:	83 c2 0d             	add    edx,0xd
c000b37f:	50                   	push   eax
c000b380:	50                   	push   eax
c000b381:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b383:	52                   	push   edx
c000b384:	51                   	push   ecx
c000b385:	ff 50 38             	call   DWORD PTR [eax+0x38]
c000b388:	83 c4 10             	add    esp,0x10
c000b38b:	83 c4 0c             	add    esp,0xc
c000b38e:	c3                   	ret    
c000b38f:	90                   	nop

c000b390 <Directory::rename(char const*)>:
c000b390:	83 ec 0c             	sub    esp,0xc
c000b393:	b8 0b 00 00 00       	mov    eax,0xb
c000b398:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b39c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3a3:	80 f9 19             	cmp    cl,0x19
c000b3a6:	77 32                	ja     c000b3da <Directory::rename(char const*)+0x4a>
c000b3a8:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000b3af:	85 c9                	test   ecx,ecx
c000b3b1:	74 27                	je     c000b3da <Directory::rename(char const*)+0x4a>
c000b3b3:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b3b9:	85 c9                	test   ecx,ecx
c000b3bb:	74 1d                	je     c000b3da <Directory::rename(char const*)+0x4a>
c000b3bd:	b8 06 00 00 00       	mov    eax,0x6
c000b3c2:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3c6:	75 12                	jne    c000b3da <Directory::rename(char const*)+0x4a>
c000b3c8:	83 c2 0d             	add    edx,0xd
c000b3cb:	50                   	push   eax
c000b3cc:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b3ce:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b3d2:	52                   	push   edx
c000b3d3:	51                   	push   ecx
c000b3d4:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000b3d7:	83 c4 10             	add    esp,0x10
c000b3da:	83 c4 0c             	add    esp,0xc
c000b3dd:	c3                   	ret    

c000b3de <Directory::exists()>:
c000b3de:	83 ec 0c             	sub    esp,0xc
c000b3e1:	31 c0                	xor    eax,eax
c000b3e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b3e7:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b3ee:	80 f9 19             	cmp    cl,0x19
c000b3f1:	77 24                	ja     c000b417 <Directory::exists()+0x39>
c000b3f3:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000b3fa:	85 c9                	test   ecx,ecx
c000b3fc:	74 19                	je     c000b417 <Directory::exists()+0x39>
c000b3fe:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b404:	85 c9                	test   ecx,ecx
c000b406:	74 0f                	je     c000b417 <Directory::exists()+0x39>
c000b408:	83 c2 0d             	add    edx,0xd
c000b40b:	50                   	push   eax
c000b40c:	50                   	push   eax
c000b40d:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b40f:	52                   	push   edx
c000b410:	51                   	push   ecx
c000b411:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000b414:	83 c4 10             	add    esp,0x10
c000b417:	83 c4 0c             	add    esp,0xc
c000b41a:	c3                   	ret    
c000b41b:	90                   	nop

c000b41c <Directory::read(dirent*)>:
c000b41c:	83 ec 1c             	sub    esp,0x1c
c000b41f:	b8 0b 00 00 00       	mov    eax,0xb
c000b424:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b428:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b42f:	80 fa 19             	cmp    dl,0x19
c000b432:	77 30                	ja     c000b464 <Directory::read(dirent*)+0x48>
c000b434:	8b 14 95 e0 28 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd720]
c000b43b:	85 d2                	test   edx,edx
c000b43d:	74 25                	je     c000b464 <Directory::read(dirent*)+0x48>
c000b43f:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c000b446:	74 1c                	je     c000b464 <Directory::read(dirent*)+0x48>
c000b448:	83 ec 0c             	sub    esp,0xc
c000b44b:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b44d:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b451:	52                   	push   edx
c000b452:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b456:	6a 00                	push   0x0
c000b458:	68 10 01 00 00       	push   0x110
c000b45d:	51                   	push   ecx
c000b45e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b461:	83 c4 20             	add    esp,0x20
c000b464:	83 c4 1c             	add    esp,0x1c
c000b467:	c3                   	ret    

c000b468 <Directory::create()>:
c000b468:	83 ec 0c             	sub    esp,0xc
c000b46b:	b8 0b 00 00 00       	mov    eax,0xb
c000b470:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b474:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b47b:	80 f9 19             	cmp    cl,0x19
c000b47e:	77 2f                	ja     c000b4af <Directory::create()+0x47>
c000b480:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c000b487:	85 c9                	test   ecx,ecx
c000b489:	74 24                	je     c000b4af <Directory::create()+0x47>
c000b48b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c000b491:	85 c9                	test   ecx,ecx
c000b493:	74 1a                	je     c000b4af <Directory::create()+0x47>
c000b495:	b8 06 00 00 00       	mov    eax,0x6
c000b49a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b49e:	75 0f                	jne    c000b4af <Directory::create()+0x47>
c000b4a0:	83 c2 0d             	add    edx,0xd
c000b4a3:	50                   	push   eax
c000b4a4:	50                   	push   eax
c000b4a5:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b4a7:	52                   	push   edx
c000b4a8:	51                   	push   ecx
c000b4a9:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000b4ac:	83 c4 10             	add    esp,0x10
c000b4af:	83 c4 0c             	add    esp,0xc
c000b4b2:	c3                   	ret    
c000b4b3:	90                   	nop

c000b4b4 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000b4b4:	b8 0a 00 00 00       	mov    eax,0xa
c000b4b9:	c3                   	ret    
c000b4ba:	66 90                	xchg   ax,ax

c000b4bc <Bus::Bus(char const*)>:
c000b4bc:	83 ec 0c             	sub    esp,0xc
c000b4bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4c3:	83 ec 08             	sub    esp,0x8
c000b4c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4ca:	50                   	push   eax
c000b4cb:	e8 30 08 00 00       	call   c000bd00 <Device::Device(char const*)>
c000b4d0:	83 c4 10             	add    esp,0x10
c000b4d3:	ba b4 d8 01 c0       	mov    edx,0xc001d8b4
c000b4d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4dc:	89 10                	mov    DWORD PTR [eax],edx
c000b4de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4e2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000b4ec:	90                   	nop
c000b4ed:	83 c4 0c             	add    esp,0xc
c000b4f0:	c3                   	ret    
c000b4f1:	90                   	nop
c000b4f2:	66 90                	xchg   ax,ax

c000b4f4 <Bus::~Bus()>:
c000b4f4:	83 ec 0c             	sub    esp,0xc
c000b4f7:	ba b4 d8 01 c0       	mov    edx,0xc001d8b4
c000b4fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b500:	89 10                	mov    DWORD PTR [eax],edx
c000b502:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b506:	83 ec 0c             	sub    esp,0xc
c000b509:	50                   	push   eax
c000b50a:	e8 5b 05 00 00       	call   c000ba6a <Device::~Device()>
c000b50f:	83 c4 10             	add    esp,0x10
c000b512:	90                   	nop
c000b513:	83 c4 0c             	add    esp,0xc
c000b516:	c3                   	ret    
c000b517:	90                   	nop

c000b518 <Bus::~Bus()>:
c000b518:	83 ec 0c             	sub    esp,0xc
c000b51b:	83 ec 0c             	sub    esp,0xc
c000b51e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b522:	e8 cd ff ff ff       	call   c000b4f4 <Bus::~Bus()>
c000b527:	83 c4 10             	add    esp,0x10
c000b52a:	83 ec 08             	sub    esp,0x8
c000b52d:	68 58 01 00 00       	push   0x158
c000b532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b536:	e8 f7 f0 ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000b53b:	83 c4 10             	add    esp,0x10
c000b53e:	83 c4 0c             	add    esp,0xc
c000b541:	c3                   	ret    

c000b542 <beepThread(void*)>:
c000b542:	83 ec 0c             	sub    esp,0xc
c000b545:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000b54a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b54e:	48                   	dec    eax
c000b54f:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000b554:	75 01                	jne    c000b557 <beepThread(void*)+0x15>
c000b556:	fb                   	sti    
c000b557:	83 ec 0c             	sub    esp,0xc
c000b55a:	6b c2 0a             	imul   eax,edx,0xa
c000b55d:	50                   	push   eax
c000b55e:	e8 69 83 00 00       	call   c00138cc <milliTenthSleep(unsigned int)>
c000b563:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000b56a:	e8 a5 9f 00 00       	call   c0015514 <HalMakeBeep(int)>
c000b56f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000b577:	83 c4 1c             	add    esp,0x1c
c000b57a:	e9 49 82 00 00       	jmp    c00137c8 <blockTask(TaskState)>

c000b57f <Krnl::beep(int, int, bool)>:
c000b57f:	56                   	push   esi
c000b580:	53                   	push   ebx
c000b581:	83 ec 10             	sub    esp,0x10
c000b584:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000b588:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000b58c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b590:	e8 7f 9f 00 00       	call   c0015514 <HalMakeBeep(int)>
c000b595:	83 c4 10             	add    esp,0x10
c000b598:	89 f0                	mov    eax,esi
c000b59a:	84 c0                	test   al,al
c000b59c:	74 1e                	je     c000b5bc <Krnl::beep(int, int, bool)+0x3d>
c000b59e:	83 ec 0c             	sub    esp,0xc
c000b5a1:	6b db 0a             	imul   ebx,ebx,0xa
c000b5a4:	53                   	push   ebx
c000b5a5:	e8 22 83 00 00       	call   c00138cc <milliTenthSleep(unsigned int)>
c000b5aa:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000b5b2:	83 c4 14             	add    esp,0x14
c000b5b5:	5b                   	pop    ebx
c000b5b6:	5e                   	pop    esi
c000b5b7:	e9 58 9f 00 00       	jmp    c0015514 <HalMakeBeep(int)>
c000b5bc:	68 e6 00 00 00       	push   0xe6
c000b5c1:	53                   	push   ebx
c000b5c2:	68 42 b5 00 c0       	push   0xc000b542
c000b5c7:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c000b5cd:	e8 da 7d 00 00       	call   c00133ac <Process::createThread(void (*)(void*), void*, int)>
c000b5d2:	83 c4 14             	add    esp,0x14
c000b5d5:	5b                   	pop    ebx
c000b5d6:	5e                   	pop    esi
c000b5d7:	c3                   	ret    

c000b5d8 <User::loadClockSettings(int)>:
c000b5d8:	53                   	push   ebx
c000b5d9:	83 ec 14             	sub    esp,0x14
c000b5dc:	68 14 01 00 00       	push   0x114
c000b5e1:	e8 b3 c3 ff ff       	call   c0007999 <malloc>
c000b5e6:	83 c4 0c             	add    esp,0xc
c000b5e9:	89 c3                	mov    ebx,eax
c000b5eb:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c000b5f1:	68 d8 d8 01 c0       	push   0xc001d8d8
c000b5f6:	50                   	push   eax
c000b5f7:	e8 a2 f6 ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c000b5fc:	58                   	pop    eax
c000b5fd:	5a                   	pop    edx
c000b5fe:	6a 01                	push   0x1
c000b600:	53                   	push   ebx
c000b601:	e8 58 f7 ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c000b606:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b609:	e8 ae f7 ff ff       	call   c000adbc <File::close()>
c000b60e:	83 c4 10             	add    esp,0x10
c000b611:	85 db                	test   ebx,ebx
c000b613:	74 0f                	je     c000b624 <User::loadClockSettings(int)+0x4c>
c000b615:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b617:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b61b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000b61e:	83 c4 08             	add    esp,0x8
c000b621:	5b                   	pop    ebx
c000b622:	ff e0                	jmp    eax
c000b624:	83 c4 08             	add    esp,0x8
c000b627:	5b                   	pop    ebx
c000b628:	c3                   	ret    
c000b629:	90                   	nop

c000b62a <Clock::Clock(char const*)>:
c000b62a:	83 ec 0c             	sub    esp,0xc
c000b62d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b631:	83 ec 08             	sub    esp,0x8
c000b634:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b638:	50                   	push   eax
c000b639:	e8 c2 06 00 00       	call   c000bd00 <Device::Device(char const*)>
c000b63e:	83 c4 10             	add    esp,0x10
c000b641:	ba 00 d9 01 c0       	mov    edx,0xc001d900
c000b646:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b64a:	89 10                	mov    DWORD PTR [eax],edx
c000b64c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b650:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000b65a:	90                   	nop
c000b65b:	83 c4 0c             	add    esp,0xc
c000b65e:	c3                   	ret    
c000b65f:	90                   	nop

c000b660 <Clock::~Clock()>:
c000b660:	83 ec 0c             	sub    esp,0xc
c000b663:	ba 00 d9 01 c0       	mov    edx,0xc001d900
c000b668:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b66c:	89 10                	mov    DWORD PTR [eax],edx
c000b66e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b672:	83 ec 0c             	sub    esp,0xc
c000b675:	50                   	push   eax
c000b676:	e8 ef 03 00 00       	call   c000ba6a <Device::~Device()>
c000b67b:	83 c4 10             	add    esp,0x10
c000b67e:	90                   	nop
c000b67f:	83 c4 0c             	add    esp,0xc
c000b682:	c3                   	ret    
c000b683:	90                   	nop

c000b684 <Clock::~Clock()>:
c000b684:	83 ec 0c             	sub    esp,0xc
c000b687:	83 ec 0c             	sub    esp,0xc
c000b68a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b68e:	e8 cd ff ff ff       	call   c000b660 <Clock::~Clock()>
c000b693:	83 c4 10             	add    esp,0x10
c000b696:	83 ec 08             	sub    esp,0x8
c000b699:	68 58 01 00 00       	push   0x158
c000b69e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a2:	e8 8b ef ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000b6a7:	83 c4 10             	add    esp,0x10
c000b6aa:	83 c4 0c             	add    esp,0xc
c000b6ad:	c3                   	ret    

c000b6ae <Clock::timeInSecondsLocal()>:
c000b6ae:	53                   	push   ebx
c000b6af:	83 ec 14             	sub    esp,0x14
c000b6b2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b6b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000b6b8:	50                   	push   eax
c000b6b9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000b6bc:	0f b6 0d 78 04 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020478
c000b6c3:	03 0d 7c 04 02 c0    	add    ecx,DWORD PTR ds:0xc002047c
c000b6c9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b6cf:	89 cb                	mov    ebx,ecx
c000b6d1:	c1 fb 1f             	sar    ebx,0x1f
c000b6d4:	01 c8                	add    eax,ecx
c000b6d6:	11 da                	adc    edx,ebx
c000b6d8:	83 c4 10             	add    esp,0x10
c000b6db:	31 c9                	xor    ecx,ecx
c000b6dd:	80 3d 79 04 02 c0 00 	cmp    BYTE PTR ds:0xc0020479,0x0
c000b6e4:	74 05                	je     c000b6eb <Clock::timeInSecondsLocal()+0x3d>
c000b6e6:	b9 08 07 00 00       	mov    ecx,0x708
c000b6eb:	31 db                	xor    ebx,ebx
c000b6ed:	01 c8                	add    eax,ecx
c000b6ef:	11 da                	adc    edx,ebx
c000b6f1:	83 c4 08             	add    esp,0x8
c000b6f4:	5b                   	pop    ebx
c000b6f5:	c3                   	ret    

c000b6f6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000b6f6:	57                   	push   edi
c000b6f7:	56                   	push   esi
c000b6f8:	53                   	push   ebx
c000b6f9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b6fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000b701:	8b 01                	mov    eax,DWORD PTR [ecx]
c000b703:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000b707:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000b70a:	0f b6 05 78 04 02 c0 	movzx  eax,BYTE PTR ds:0xc0020478
c000b711:	03 05 7c 04 02 c0    	add    eax,DWORD PTR ds:0xc002047c
c000b717:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000b71d:	99                   	cdq    
c000b71e:	29 c6                	sub    esi,eax
c000b720:	19 d7                	sbb    edi,edx
c000b722:	89 f0                	mov    eax,esi
c000b724:	89 fa                	mov    edx,edi
c000b726:	31 f6                	xor    esi,esi
c000b728:	80 3d 79 04 02 c0 00 	cmp    BYTE PTR ds:0xc0020479,0x0
c000b72f:	74 05                	je     c000b736 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000b731:	be 08 07 00 00       	mov    esi,0x708
c000b736:	31 ff                	xor    edi,edi
c000b738:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000b73c:	29 f0                	sub    eax,esi
c000b73e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b742:	19 fa                	sbb    edx,edi
c000b744:	89 d8                	mov    eax,ebx
c000b746:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b74a:	5b                   	pop    ebx
c000b74b:	5e                   	pop    esi
c000b74c:	5f                   	pop    edi
c000b74d:	ff e0                	jmp    eax

c000b74f <datetimeToSeconds(datetime_t)>:
c000b74f:	55                   	push   ebp
c000b750:	57                   	push   edi
c000b751:	56                   	push   esi
c000b752:	53                   	push   ebx
c000b753:	83 ec 14             	sub    esp,0x14
c000b756:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000b75a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000b75e:	89 d3                	mov    ebx,edx
c000b760:	0f b6 c6             	movzx  eax,dh
c000b763:	c1 eb 10             	shr    ebx,0x10
c000b766:	48                   	dec    eax
c000b767:	66 81 eb 6c 07       	sub    bx,0x76c
c000b76c:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c000b770:	0f b6 f5             	movzx  esi,ch
c000b773:	89 cf                	mov    edi,ecx
c000b775:	6b f6 3c             	imul   esi,esi,0x3c
c000b778:	c1 ef 10             	shr    edi,0x10
c000b77b:	0f b6 c9             	movzx  ecx,cl
c000b77e:	89 f8                	mov    eax,edi
c000b780:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b786:	0f b6 f8             	movzx  edi,al
c000b789:	0f b6 d2             	movzx  edx,dl
c000b78c:	01 fe                	add    esi,edi
c000b78e:	01 f1                	add    ecx,esi
c000b790:	0f b7 f3             	movzx  esi,bx
c000b793:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000b797:	c1 f9 1f             	sar    ecx,0x1f
c000b79a:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c000b79f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000b7a3:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c000b7a8:	8b 0c 8d 40 d9 01 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffe26c0]
c000b7af:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000b7b3:	76 29                	jbe    c000b7de <datetimeToSeconds(datetime_t)+0x8f>
c000b7b5:	f6 c3 03             	test   bl,0x3
c000b7b8:	75 24                	jne    c000b7de <datetimeToSeconds(datetime_t)+0x8f>
c000b7ba:	31 d2                	xor    edx,edx
c000b7bc:	bf 64 00 00 00       	mov    edi,0x64
c000b7c1:	89 d8                	mov    eax,ebx
c000b7c3:	66 f7 f7             	div    di
c000b7c6:	66 85 d2             	test   dx,dx
c000b7c9:	75 12                	jne    c000b7dd <datetimeToSeconds(datetime_t)+0x8e>
c000b7cb:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000b7d1:	bf 90 01 00 00       	mov    edi,0x190
c000b7d6:	99                   	cdq    
c000b7d7:	f7 ff                	idiv   edi
c000b7d9:	85 d2                	test   edx,edx
c000b7db:	75 01                	jne    c000b7de <datetimeToSeconds(datetime_t)+0x8f>
c000b7dd:	41                   	inc    ecx
c000b7de:	66 83 fb 46          	cmp    bx,0x46
c000b7e2:	76 45                	jbe    c000b829 <datetimeToSeconds(datetime_t)+0xda>
c000b7e4:	bb 46 00 00 00       	mov    ebx,0x46
c000b7e9:	bf 64 00 00 00       	mov    edi,0x64
c000b7ee:	bd 90 01 00 00       	mov    ebp,0x190
c000b7f3:	b8 6d 01 00 00       	mov    eax,0x16d
c000b7f8:	f6 c3 03             	test   bl,0x3
c000b7fb:	75 23                	jne    c000b820 <datetimeToSeconds(datetime_t)+0xd1>
c000b7fd:	89 d8                	mov    eax,ebx
c000b7ff:	99                   	cdq    
c000b800:	f7 ff                	idiv   edi
c000b802:	b8 6e 01 00 00       	mov    eax,0x16e
c000b807:	85 d2                	test   edx,edx
c000b809:	75 15                	jne    c000b820 <datetimeToSeconds(datetime_t)+0xd1>
c000b80b:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000b811:	99                   	cdq    
c000b812:	f7 fd                	idiv   ebp
c000b814:	31 c0                	xor    eax,eax
c000b816:	85 d2                	test   edx,edx
c000b818:	0f 94 c0             	sete   al
c000b81b:	05 6d 01 00 00       	add    eax,0x16d
c000b820:	01 c1                	add    ecx,eax
c000b822:	43                   	inc    ebx
c000b823:	39 f3                	cmp    ebx,esi
c000b825:	7c cc                	jl     c000b7f3 <datetimeToSeconds(datetime_t)+0xa4>
c000b827:	eb 3b                	jmp    c000b864 <datetimeToSeconds(datetime_t)+0x115>
c000b829:	74 39                	je     c000b864 <datetimeToSeconds(datetime_t)+0x115>
c000b82b:	b8 45 00 00 00       	mov    eax,0x45
c000b830:	89 c2                	mov    edx,eax
c000b832:	83 e2 03             	and    edx,0x3
c000b835:	39 f0                	cmp    eax,esi
c000b837:	7e 13                	jle    c000b84c <datetimeToSeconds(datetime_t)+0xfd>
c000b839:	85 d2                	test   edx,edx
c000b83b:	0f 94 c2             	sete   dl
c000b83e:	48                   	dec    eax
c000b83f:	0f b6 d2             	movzx  edx,dl
c000b842:	81 c2 6d 01 00 00    	add    edx,0x16d
c000b848:	29 d1                	sub    ecx,edx
c000b84a:	eb e4                	jmp    c000b830 <datetimeToSeconds(datetime_t)+0xe1>
c000b84c:	b8 6d 01 00 00       	mov    eax,0x16d
c000b851:	85 d2                	test   edx,edx
c000b853:	75 0d                	jne    c000b862 <datetimeToSeconds(datetime_t)+0x113>
c000b855:	31 c0                	xor    eax,eax
c000b857:	66 85 db             	test   bx,bx
c000b85a:	0f 95 c0             	setne  al
c000b85d:	05 6d 01 00 00       	add    eax,0x16d
c000b862:	29 c1                	sub    ecx,eax
c000b864:	b8 80 51 01 00       	mov    eax,0x15180
c000b869:	f7 e9                	imul   ecx
c000b86b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000b86f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000b873:	83 c4 14             	add    esp,0x14
c000b876:	5b                   	pop    ebx
c000b877:	5e                   	pop    esi
c000b878:	5f                   	pop    edi
c000b879:	5d                   	pop    ebp
c000b87a:	c3                   	ret    
c000b87b:	90                   	nop

c000b87c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000b87c:	57                   	push   edi
c000b87d:	56                   	push   esi
c000b87e:	53                   	push   ebx
c000b87f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b883:	8b 06                	mov    eax,DWORD PTR [esi]
c000b885:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000b888:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b88c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b890:	e8 ba fe ff ff       	call   c000b74f <datetimeToSeconds(datetime_t)>
c000b895:	59                   	pop    ecx
c000b896:	0f b6 0d 78 04 02 c0 	movzx  ecx,BYTE PTR ds:0xc0020478
c000b89d:	5b                   	pop    ebx
c000b89e:	03 0d 7c 04 02 c0    	add    ecx,DWORD PTR ds:0xc002047c
c000b8a4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000b8aa:	89 cb                	mov    ebx,ecx
c000b8ac:	c1 fb 1f             	sar    ebx,0x1f
c000b8af:	29 c8                	sub    eax,ecx
c000b8b1:	19 da                	sbb    edx,ebx
c000b8b3:	31 c9                	xor    ecx,ecx
c000b8b5:	80 3d 79 04 02 c0 00 	cmp    BYTE PTR ds:0xc0020479,0x0
c000b8bc:	74 05                	je     c000b8c3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000b8be:	b9 08 07 00 00       	mov    ecx,0x708
c000b8c3:	31 db                	xor    ebx,ebx
c000b8c5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000b8c9:	29 c8                	sub    eax,ecx
c000b8cb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b8cf:	19 da                	sbb    edx,ebx
c000b8d1:	89 f8                	mov    eax,edi
c000b8d3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b8d7:	5b                   	pop    ebx
c000b8d8:	5e                   	pop    esi
c000b8d9:	5f                   	pop    edi
c000b8da:	ff e0                	jmp    eax

c000b8dc <secondsToDatetime(unsigned long long)>:
c000b8dc:	55                   	push   ebp
c000b8dd:	57                   	push   edi
c000b8de:	56                   	push   esi
c000b8df:	53                   	push   ebx
c000b8e0:	83 ec 1c             	sub    esp,0x1c
c000b8e3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000b8e7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b8eb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000b8ef:	6a 00                	push   0x0
c000b8f1:	68 80 51 01 00       	push   0x15180
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	e8 a3 02 01 00       	call   c001bba0 <__udivdi3>
c000b8fd:	83 c4 10             	add    esp,0x10
c000b900:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000b906:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b90a:	6a 00                	push   0x0
c000b90c:	68 80 51 01 00       	push   0x15180
c000b911:	55                   	push   ebp
c000b912:	57                   	push   edi
c000b913:	bf 10 0e 00 00       	mov    edi,0xe10
c000b918:	e8 83 03 01 00       	call   c001bca0 <__umoddi3>
c000b91d:	83 c4 10             	add    esp,0x10
c000b920:	99                   	cdq    
c000b921:	f7 ff                	idiv   edi
c000b923:	bf 3c 00 00 00       	mov    edi,0x3c
c000b928:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000b92b:	89 d0                	mov    eax,edx
c000b92d:	99                   	cdq    
c000b92e:	f7 ff                	idiv   edi
c000b930:	85 db                	test   ebx,ebx
c000b932:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000b935:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000b938:	79 11                	jns    c000b94b <secondsToDatetime(unsigned long long)+0x6f>
c000b93a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000b93e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000b944:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b949:	eb 07                	jmp    c000b952 <secondsToDatetime(unsigned long long)+0x76>
c000b94b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000b950:	89 d8                	mov    eax,ebx
c000b952:	bf b4 05 00 00       	mov    edi,0x5b4
c000b957:	99                   	cdq    
c000b958:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000b95d:	f7 f9                	idiv   ecx
c000b95f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000b964:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b968:	31 d2                	xor    edx,edx
c000b96a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000b972:	01 c3                	add    ebx,eax
c000b974:	89 d8                	mov    eax,ebx
c000b976:	f7 f1                	div    ecx
c000b978:	31 d2                	xor    edx,edx
c000b97a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000b97d:	89 d8                	mov    eax,ebx
c000b97f:	f7 f7                	div    edi
c000b981:	31 d2                	xor    edx,edx
c000b983:	29 c1                	sub    ecx,eax
c000b985:	89 d8                	mov    eax,ebx
c000b987:	f7 f5                	div    ebp
c000b989:	bd 6d 01 00 00       	mov    ebp,0x16d
c000b98e:	29 c1                	sub    ecx,eax
c000b990:	31 d2                	xor    edx,edx
c000b992:	89 c8                	mov    eax,ecx
c000b994:	f7 f5                	div    ebp
c000b996:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000b99b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000b99f:	31 d2                	xor    edx,edx
c000b9a1:	89 c8                	mov    eax,ecx
c000b9a3:	f7 f5                	div    ebp
c000b9a5:	31 d2                	xor    edx,edx
c000b9a7:	01 c3                	add    ebx,eax
c000b9a9:	89 c8                	mov    eax,ecx
c000b9ab:	f7 f7                	div    edi
c000b9ad:	bf 99 00 00 00       	mov    edi,0x99
c000b9b2:	29 c3                	sub    ebx,eax
c000b9b4:	31 d2                	xor    edx,edx
c000b9b6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000b9be:	29 c3                	sub    ebx,eax
c000b9c0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000b9c3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000b9c6:	bb 05 00 00 00       	mov    ebx,0x5
c000b9cb:	83 c1 02             	add    ecx,0x2
c000b9ce:	89 c8                	mov    eax,ecx
c000b9d0:	f7 f7                	div    edi
c000b9d2:	31 d2                	xor    edx,edx
c000b9d4:	89 c7                	mov    edi,eax
c000b9d6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000b9dc:	83 c0 02             	add    eax,0x2
c000b9df:	f7 f3                	div    ebx
c000b9e1:	89 eb                	mov    ebx,ebp
c000b9e3:	29 c3                	sub    ebx,eax
c000b9e5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000b9eb:	88 1e                	mov    BYTE PTR [esi],bl
c000b9ed:	19 c0                	sbb    eax,eax
c000b9ef:	31 d2                	xor    edx,edx
c000b9f1:	83 e0 0c             	and    eax,0xc
c000b9f4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000b9f8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000ba00:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000ba04:	83 f9 01             	cmp    ecx,0x1
c000ba07:	0f 96 c2             	setbe  dl
c000ba0a:	41                   	inc    ecx
c000ba0b:	01 d0                	add    eax,edx
c000ba0d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000ba10:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000ba14:	83 c4 1c             	add    esp,0x1c
c000ba17:	89 f0                	mov    eax,esi
c000ba19:	5b                   	pop    ebx
c000ba1a:	5e                   	pop    esi
c000ba1b:	5f                   	pop    edi
c000ba1c:	5d                   	pop    ebp
c000ba1d:	c2 04 00             	ret    0x4

c000ba20 <Clock::timeInDatetimeLocal()>:
c000ba20:	53                   	push   ebx
c000ba21:	83 ec 14             	sub    esp,0x14
c000ba24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ba28:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000ba2c:	e8 7d fc ff ff       	call   c000b6ae <Clock::timeInSecondsLocal()>
c000ba31:	83 c4 0c             	add    esp,0xc
c000ba34:	52                   	push   edx
c000ba35:	50                   	push   eax
c000ba36:	53                   	push   ebx
c000ba37:	e8 a0 fe ff ff       	call   c000b8dc <secondsToDatetime(unsigned long long)>
c000ba3c:	89 d8                	mov    eax,ebx
c000ba3e:	83 c4 14             	add    esp,0x14
c000ba41:	5b                   	pop    ebx
c000ba42:	c2 04 00             	ret    0x4
c000ba45:	90                   	nop

c000ba46 <Device::hibernate()>:
c000ba46:	c3                   	ret    
c000ba47:	90                   	nop

c000ba48 <Device::wake()>:
c000ba48:	c3                   	ret    
c000ba49:	90                   	nop

c000ba4a <Device::detect()>:
c000ba4a:	c3                   	ret    
c000ba4b:	90                   	nop

c000ba4c <Device::disableLegacy()>:
c000ba4c:	c3                   	ret    
c000ba4d:	90                   	nop

c000ba4e <Device::powerSaving(PowerSavingLevel)>:
c000ba4e:	c3                   	ret    
c000ba4f:	90                   	nop

c000ba50 <DriverlessDevice::close(int, int, void*)>:
c000ba50:	31 c0                	xor    eax,eax
c000ba52:	c3                   	ret    
c000ba53:	90                   	nop

c000ba54 <DriverlessDevice::detect()>:
c000ba54:	c3                   	ret    
c000ba55:	90                   	nop

c000ba56 <DriverlessDevice::open(int, int, void*)>:
c000ba56:	83 ec 18             	sub    esp,0x18
c000ba59:	68 70 d9 01 c0       	push   0xc001d970
c000ba5e:	e8 14 48 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000ba63:	83 c8 ff             	or     eax,0xffffffff
c000ba66:	83 c4 1c             	add    esp,0x1c
c000ba69:	c3                   	ret    

c000ba6a <Device::~Device()>:
c000ba6a:	ba d0 d9 01 c0       	mov    edx,0xc001d9d0
c000ba6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ba73:	89 10                	mov    DWORD PTR [eax],edx
c000ba75:	90                   	nop
c000ba76:	c3                   	ret    
c000ba77:	90                   	nop

c000ba78 <Device::~Device()>:
c000ba78:	83 ec 0c             	sub    esp,0xc
c000ba7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ba7f:	e8 e6 ff ff ff       	call   c000ba6a <Device::~Device()>
c000ba84:	83 c4 04             	add    esp,0x4
c000ba87:	83 ec 08             	sub    esp,0x8
c000ba8a:	68 58 01 00 00       	push   0x158
c000ba8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ba93:	e8 9a eb ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000ba98:	83 c4 10             	add    esp,0x10
c000ba9b:	83 c4 0c             	add    esp,0xc
c000ba9e:	c3                   	ret    
c000ba9f:	90                   	nop

c000baa0 <Device::findAndLoadDriver()>:
c000baa0:	c7 44 24 04 8e d9 01 c0 	mov    DWORD PTR [esp+0x4],0xc001d98e
c000baa8:	e9 7b ec ff ff       	jmp    c000a728 <Dbg::kprintf(char const*, ...)>
c000baad:	90                   	nop

c000baae <Device::preOpenPCI(PCIDeviceInfo)>:
c000baae:	57                   	push   edi
c000baaf:	b9 09 00 00 00       	mov    ecx,0x9
c000bab4:	56                   	push   esi
c000bab5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000bab9:	8d 74 24 10          	lea    esi,[esp+0x10]
c000babd:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000bac7:	81 c7 18 01 00 00    	add    edi,0x118
c000bacd:	fc                   	cld    
c000bace:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000bad0:	5e                   	pop    esi
c000bad1:	5f                   	pop    edi
c000bad2:	c3                   	ret    
c000bad3:	90                   	nop

c000bad4 <Device::preOpenACPI(void*, char*, char*)>:
c000bad4:	57                   	push   edi
c000bad5:	b9 1e 00 00 00       	mov    ecx,0x1e
c000bada:	56                   	push   esi
c000badb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000badf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bae3:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000baed:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000baf3:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000baf9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bafd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000baff:	b9 0e 00 00 00       	mov    ecx,0xe
c000bb04:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000bb0a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000bb0e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000bb10:	5e                   	pop    esi
c000bb11:	5f                   	pop    edi
c000bb12:	c3                   	ret    
c000bb13:	90                   	nop

c000bb14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000bb14:	53                   	push   ebx
c000bb15:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb19:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000bb1d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bb21:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb25:	0f b6 c0             	movzx  eax,al
c000bb28:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000bb2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bb30:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bb34:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bb38:	5b                   	pop    ebx
c000bb39:	e9 a6 05 00 00       	jmp    c000c0e4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000bb3e <Device::getParent()>:
c000bb3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000bb42:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000bb48:	c3                   	ret    
c000bb49:	90                   	nop

c000bb4a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000bb4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bb4e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bb52:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000bb57:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000bb5b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000bb5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000bb63:	e9 e8 06 00 00       	jmp    c000c250 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000bb68 <Device::addChild(Device*)>:
c000bb68:	53                   	push   ebx
c000bb69:	83 ec 08             	sub    esp,0x8
c000bb6c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb70:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000bb74:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000bb7a:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000bb80:	8b 13                	mov    edx,DWORD PTR [ebx]
c000bb82:	85 d2                	test   edx,edx
c000bb84:	74 04                	je     c000bb8a <Device::addChild(Device*)+0x22>
c000bb86:	89 d3                	mov    ebx,edx
c000bb88:	eb f6                	jmp    c000bb80 <Device::addChild(Device*)+0x18>
c000bb8a:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000bb8d:	83 ec 0c             	sub    esp,0xc
c000bb90:	6a 08                	push   0x8
c000bb92:	e8 02 be ff ff       	call   c0007999 <malloc>
c000bb97:	89 03                	mov    DWORD PTR [ebx],eax
c000bb99:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bb9f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bba6:	83 c4 18             	add    esp,0x18
c000bba9:	5b                   	pop    ebx
c000bbaa:	c3                   	ret    
c000bbab:	90                   	nop

c000bbac <Device::removeAllChildren()>:
c000bbac:	56                   	push   esi
c000bbad:	53                   	push   ebx
c000bbae:	52                   	push   edx
c000bbaf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000bbb3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000bbb9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bbbc:	74 17                	je     c000bbd5 <Device::removeAllChildren()+0x29>
c000bbbe:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000bbc1:	85 c0                	test   eax,eax
c000bbc3:	74 0c                	je     c000bbd1 <Device::removeAllChildren()+0x25>
c000bbc5:	83 ec 0c             	sub    esp,0xc
c000bbc8:	8b 10                	mov    edx,DWORD PTR [eax]
c000bbca:	50                   	push   eax
c000bbcb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000bbce:	83 c4 10             	add    esp,0x10
c000bbd1:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bbd3:	eb e4                	jmp    c000bbb9 <Device::removeAllChildren()+0xd>
c000bbd5:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bbdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bbe1:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000bbe7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bbee:	58                   	pop    eax
c000bbef:	5b                   	pop    ebx
c000bbf0:	5e                   	pop    esi
c000bbf1:	c3                   	ret    

c000bbf2 <Device::hibernateAll()>:
c000bbf2:	53                   	push   ebx
c000bbf3:	83 ec 14             	sub    esp,0x14
c000bbf6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bbfa:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bbfc:	53                   	push   ebx
c000bbfd:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000bc00:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc06:	83 c4 10             	add    esp,0x10
c000bc09:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc0c:	74 0f                	je     c000bc1d <Device::hibernateAll()+0x2b>
c000bc0e:	83 ec 0c             	sub    esp,0xc
c000bc11:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc14:	e8 d9 ff ff ff       	call   c000bbf2 <Device::hibernateAll()>
c000bc19:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc1b:	eb e9                	jmp    c000bc06 <Device::hibernateAll()+0x14>
c000bc1d:	83 c4 08             	add    esp,0x8
c000bc20:	5b                   	pop    ebx
c000bc21:	c3                   	ret    

c000bc22 <Device::wakeAll()>:
c000bc22:	53                   	push   ebx
c000bc23:	83 ec 14             	sub    esp,0x14
c000bc26:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc2a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc2c:	53                   	push   ebx
c000bc2d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000bc30:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc3c:	74 0f                	je     c000bc4d <Device::wakeAll()+0x2b>
c000bc3e:	83 ec 0c             	sub    esp,0xc
c000bc41:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc44:	e8 d9 ff ff ff       	call   c000bc22 <Device::wakeAll()>
c000bc49:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc4b:	eb e9                	jmp    c000bc36 <Device::wakeAll()+0x14>
c000bc4d:	83 c4 08             	add    esp,0x8
c000bc50:	5b                   	pop    ebx
c000bc51:	c3                   	ret    

c000bc52 <Device::detectAll()>:
c000bc52:	53                   	push   ebx
c000bc53:	83 ec 14             	sub    esp,0x14
c000bc56:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bc5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc5c:	53                   	push   ebx
c000bc5d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000bc60:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bc66:	83 c4 10             	add    esp,0x10
c000bc69:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bc6c:	74 0f                	je     c000bc7d <Device::detectAll()+0x2b>
c000bc6e:	83 ec 0c             	sub    esp,0xc
c000bc71:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bc74:	e8 d9 ff ff ff       	call   c000bc52 <Device::detectAll()>
c000bc79:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bc7b:	eb e9                	jmp    c000bc66 <Device::detectAll()+0x14>
c000bc7d:	83 c4 08             	add    esp,0x8
c000bc80:	5b                   	pop    ebx
c000bc81:	c3                   	ret    

c000bc82 <Device::disableLegacyAll()>:
c000bc82:	c3                   	ret    
c000bc83:	90                   	nop

c000bc84 <Device::loadDriversForAll()>:
c000bc84:	c3                   	ret    
c000bc85:	90                   	nop

c000bc86 <Device::closeAll()>:
c000bc86:	53                   	push   ebx
c000bc87:	83 ec 08             	sub    esp,0x8
c000bc8a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bc8e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc90:	6a 00                	push   0x0
c000bc92:	6a 00                	push   0x0
c000bc94:	6a 00                	push   0x0
c000bc96:	53                   	push   ebx
c000bc97:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bc9a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bca0:	83 c4 10             	add    esp,0x10
c000bca3:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bca6:	74 0f                	je     c000bcb7 <Device::closeAll()+0x31>
c000bca8:	83 ec 0c             	sub    esp,0xc
c000bcab:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bcae:	e8 d3 ff ff ff       	call   c000bc86 <Device::closeAll()>
c000bcb3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bcb5:	eb e9                	jmp    c000bca0 <Device::closeAll()+0x1a>
c000bcb7:	83 c4 08             	add    esp,0x8
c000bcba:	5b                   	pop    ebx
c000bcbb:	c3                   	ret    

c000bcbc <Device::powerSavingAll(PowerSavingLevel)>:
c000bcbc:	56                   	push   esi
c000bcbd:	53                   	push   ebx
c000bcbe:	83 ec 0c             	sub    esp,0xc
c000bcc1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bcc5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000bcc9:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bccb:	56                   	push   esi
c000bccc:	53                   	push   ebx
c000bccd:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000bcd0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000bcd6:	83 c4 10             	add    esp,0x10
c000bcd9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000bcdc:	74 0f                	je     c000bced <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000bcde:	52                   	push   edx
c000bcdf:	52                   	push   edx
c000bce0:	56                   	push   esi
c000bce1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bce4:	e8 d3 ff ff ff       	call   c000bcbc <Device::powerSavingAll(PowerSavingLevel)>
c000bce9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000bceb:	eb e9                	jmp    c000bcd6 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000bced:	58                   	pop    eax
c000bcee:	5b                   	pop    ebx
c000bcef:	5e                   	pop    esi
c000bcf0:	c3                   	ret    
c000bcf1:	90                   	nop

c000bcf2 <Device::setName(char const*)>:
c000bcf2:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000bcfa:	e9 21 49 ff ff       	jmp    c0000620 <strcpy>
c000bcff:	90                   	nop

c000bd00 <Device::Device(char const*)>:
c000bd00:	83 ec 1c             	sub    esp,0x1c
c000bd03:	ba d0 d9 01 c0       	mov    edx,0xc001d9d0
c000bd08:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd0c:	89 10                	mov    DWORD PTR [eax],edx
c000bd0e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd12:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000bd1c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd20:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bd2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd2e:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bd38:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd3c:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bd46:	83 ec 08             	sub    esp,0x8
c000bd49:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd4d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bd51:	e8 9c ff ff ff       	call   c000bcf2 <Device::setName(char const*)>
c000bd56:	83 c4 10             	add    esp,0x10
c000bd59:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000bd61:	83 ec 0c             	sub    esp,0xc
c000bd64:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bd68:	e8 2c bc ff ff       	call   c0007999 <malloc>
c000bd6d:	83 c4 10             	add    esp,0x10
c000bd70:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bd76:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bd7d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bd81:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000bd87:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd8b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bd91:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000bd97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bd9b:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000bda1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000bda8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdac:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000bdb3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdb7:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000bdbe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdc2:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000bdcc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdd0:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000bdda:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdde:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000bde8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000bdec:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000bdf6:	90                   	nop
c000bdf7:	83 c4 1c             	add    esp,0x1c
c000bdfa:	c3                   	ret    
c000bdfb:	90                   	nop

c000bdfc <Device::getName()>:
c000bdfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000be00:	05 d0 00 00 00       	add    eax,0xd0
c000be05:	c3                   	ret    

c000be06 <DriverlessDevice::DriverlessDevice(char const*)>:
c000be06:	83 ec 0c             	sub    esp,0xc
c000be09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be0d:	83 ec 08             	sub    esp,0x8
c000be10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000be14:	50                   	push   eax
c000be15:	e8 e6 fe ff ff       	call   c000bd00 <Device::Device(char const*)>
c000be1a:	83 c4 10             	add    esp,0x10
c000be1d:	ba fc d9 01 c0       	mov    edx,0xc001d9fc
c000be22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be26:	89 10                	mov    DWORD PTR [eax],edx
c000be28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000be2c:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c000be36:	90                   	nop
c000be37:	83 c4 0c             	add    esp,0xc
c000be3a:	c3                   	ret    
c000be3b:	90                   	nop

c000be3c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000be3c:	57                   	push   edi
c000be3d:	56                   	push   esi
c000be3e:	53                   	push   ebx
c000be3f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000be43:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000be47:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000be4b:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000be51:	75 0c                	jne    c000be5f <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000be53:	52                   	push   edx
c000be54:	52                   	push   edx
c000be55:	53                   	push   ebx
c000be56:	56                   	push   esi
c000be57:	e8 f6 01 01 00       	call   c001c052 <LinkedList<Device>::addElement(Device*)>
c000be5c:	83 c4 10             	add    esp,0x10
c000be5f:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000be65:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000be68:	74 12                	je     c000be7c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000be6a:	50                   	push   eax
c000be6b:	57                   	push   edi
c000be6c:	56                   	push   esi
c000be6d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000be70:	e8 c7 ff ff ff       	call   c000be3c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000be75:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000be77:	83 c4 10             	add    esp,0x10
c000be7a:	eb e9                	jmp    c000be65 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000be7c:	5b                   	pop    ebx
c000be7d:	5e                   	pop    esi
c000be7e:	5f                   	pop    edi
c000be7f:	c3                   	ret    

c000be80 <getDevicesOfType(DeviceType)>:
c000be80:	53                   	push   ebx
c000be81:	83 ec 14             	sub    esp,0x14
c000be84:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000be88:	53                   	push   ebx
c000be89:	e8 a0 02 01 00       	call   c001c12e <LinkedList<Device>::LinkedList()>
c000be8e:	83 c4 0c             	add    esp,0xc
c000be91:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000be95:	53                   	push   ebx
c000be96:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c000be9c:	e8 9b ff ff ff       	call   c000be3c <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000bea1:	89 d8                	mov    eax,ebx
c000bea3:	83 c4 18             	add    esp,0x18
c000bea6:	5b                   	pop    ebx
c000bea7:	c2 04 00             	ret    0x4
c000beaa:	66 90                	xchg   ax,ax

c000beac <HardDiskController::HardDiskController(char const*)>:
c000beac:	83 ec 0c             	sub    esp,0xc
c000beaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000beb3:	83 ec 08             	sub    esp,0x8
c000beb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000beba:	50                   	push   eax
c000bebb:	e8 40 fe ff ff       	call   c000bd00 <Device::Device(char const*)>
c000bec0:	83 c4 10             	add    esp,0x10
c000bec3:	ba 28 da 01 c0       	mov    edx,0xc001da28
c000bec8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000becc:	89 10                	mov    DWORD PTR [eax],edx
c000bece:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bed2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000bedc:	90                   	nop
c000bedd:	83 c4 0c             	add    esp,0xc
c000bee0:	c3                   	ret    
c000bee1:	90                   	nop
c000bee2:	66 90                	xchg   ax,ax

c000bee4 <HardDiskController::~HardDiskController()>:
c000bee4:	83 ec 0c             	sub    esp,0xc
c000bee7:	ba 28 da 01 c0       	mov    edx,0xc001da28
c000beec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bef0:	89 10                	mov    DWORD PTR [eax],edx
c000bef2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bef6:	83 ec 0c             	sub    esp,0xc
c000bef9:	50                   	push   eax
c000befa:	e8 6b fb ff ff       	call   c000ba6a <Device::~Device()>
c000beff:	83 c4 10             	add    esp,0x10
c000bf02:	90                   	nop
c000bf03:	83 c4 0c             	add    esp,0xc
c000bf06:	c3                   	ret    
c000bf07:	90                   	nop

c000bf08 <HardDiskController::~HardDiskController()>:
c000bf08:	83 ec 0c             	sub    esp,0xc
c000bf0b:	83 ec 0c             	sub    esp,0xc
c000bf0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf12:	e8 cd ff ff ff       	call   c000bee4 <HardDiskController::~HardDiskController()>
c000bf17:	83 c4 10             	add    esp,0x10
c000bf1a:	83 ec 08             	sub    esp,0x8
c000bf1d:	68 58 01 00 00       	push   0x158
c000bf22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf26:	e8 07 e7 ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000bf2b:	83 c4 10             	add    esp,0x10
c000bf2e:	83 c4 0c             	add    esp,0xc
c000bf31:	c3                   	ret    

c000bf32 <PhysicalDisk::eject()>:
c000bf32:	83 c8 ff             	or     eax,0xffffffff
c000bf35:	c3                   	ret    

c000bf36 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000bf36:	83 ec 0c             	sub    esp,0xc
c000bf39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf3d:	83 ec 08             	sub    esp,0x8
c000bf40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf44:	50                   	push   eax
c000bf45:	e8 b6 fd ff ff       	call   c000bd00 <Device::Device(char const*)>
c000bf4a:	83 c4 10             	add    esp,0x10
c000bf4d:	ba 54 da 01 c0       	mov    edx,0xc001da54
c000bf52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf56:	89 10                	mov    DWORD PTR [eax],edx
c000bf58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf5c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000bf63:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf67:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000bf6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf72:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000bf7c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf80:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000bf84:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000bf8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bf8e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000bf98:	90                   	nop
c000bf99:	83 c4 0c             	add    esp,0xc
c000bf9c:	c3                   	ret    
c000bf9d:	90                   	nop

c000bf9e <PhysicalDisk::startCache()>:
c000bf9e:	56                   	push   esi
c000bf9f:	53                   	push   ebx
c000bfa0:	83 ec 10             	sub    esp,0x10
c000bfa3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000bfa7:	6a 44                	push   0x44
c000bfa9:	e8 eb b9 ff ff       	call   c0007999 <malloc>
c000bfae:	89 c6                	mov    esi,eax
c000bfb0:	58                   	pop    eax
c000bfb1:	5a                   	pop    edx
c000bfb2:	53                   	push   ebx
c000bfb3:	56                   	push   esi
c000bfb4:	e8 ab 15 00 00       	call   c000d564 <VCache::VCache(PhysicalDisk*)>
c000bfb9:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000bfbf:	83 c4 14             	add    esp,0x14
c000bfc2:	5b                   	pop    ebx
c000bfc3:	5e                   	pop    esi
c000bfc4:	c3                   	ret    
c000bfc5:	90                   	nop

c000bfc6 <PhysicalDisk::~PhysicalDisk()>:
c000bfc6:	83 ec 0c             	sub    esp,0xc
c000bfc9:	ba 54 da 01 c0       	mov    edx,0xc001da54
c000bfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfd2:	89 10                	mov    DWORD PTR [eax],edx
c000bfd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfd8:	83 ec 0c             	sub    esp,0xc
c000bfdb:	50                   	push   eax
c000bfdc:	e8 89 fa ff ff       	call   c000ba6a <Device::~Device()>
c000bfe1:	83 c4 10             	add    esp,0x10
c000bfe4:	90                   	nop
c000bfe5:	83 c4 0c             	add    esp,0xc
c000bfe8:	c3                   	ret    
c000bfe9:	90                   	nop

c000bfea <PhysicalDisk::~PhysicalDisk()>:
c000bfea:	83 ec 0c             	sub    esp,0xc
c000bfed:	83 ec 0c             	sub    esp,0xc
c000bff0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bff4:	e8 cd ff ff ff       	call   c000bfc6 <PhysicalDisk::~PhysicalDisk()>
c000bff9:	83 c4 10             	add    esp,0x10
c000bffc:	83 ec 08             	sub    esp,0x8
c000bfff:	68 6c 01 00 00       	push   0x16c
c000c004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c008:	e8 25 e6 ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000c00d:	83 c4 10             	add    esp,0x10
c000c010:	83 c4 0c             	add    esp,0xc
c000c013:	c3                   	ret    

c000c014 <int_handler>:
c000c014:	55                   	push   ebp
c000c015:	57                   	push   edi
c000c016:	56                   	push   esi
c000c017:	53                   	push   ebx
c000c018:	83 ec 0c             	sub    esp,0xc
c000c01b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000c01f:	80 3d 00 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022e00,0x0
c000c026:	74 0b                	je     c000c033 <int_handler+0x1f>
c000c028:	fa                   	cli    
c000c029:	f4                   	hlt    
c000c02a:	80 3d 00 2e 02 c0 00 	cmp    BYTE PTR ds:0xc0022e00,0x0
c000c031:	75 f5                	jne    c000c028 <int_handler+0x14>
c000c033:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000c036:	8d 46 e0             	lea    eax,[esi-0x20]
c000c039:	83 f8 17             	cmp    eax,0x17
c000c03c:	76 3e                	jbe    c000c07c <int_handler+0x68>
c000c03e:	c1 e6 04             	shl    esi,0x4
c000c041:	31 db                	xor    ebx,ebx
c000c043:	8d ae 80 14 02 c0    	lea    ebp,[esi-0x3ffdeb80]
c000c049:	81 c6 80 04 02 c0    	add    esi,0xc0020480
c000c04f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000c053:	85 c0                	test   eax,eax
c000c055:	74 13                	je     c000c06a <int_handler+0x56>
c000c057:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000c05a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000c05e:	74 2a                	je     c000c08a <int_handler+0x76>
c000c060:	83 ec 08             	sub    esp,0x8
c000c063:	52                   	push   edx
c000c064:	57                   	push   edi
c000c065:	ff d0                	call   eax
c000c067:	83 c4 10             	add    esp,0x10
c000c06a:	43                   	inc    ebx
c000c06b:	83 fb 04             	cmp    ebx,0x4
c000c06e:	75 df                	jne    c000c04f <int_handler+0x3b>
c000c070:	83 c4 0c             	add    esp,0xc
c000c073:	31 c0                	xor    eax,eax
c000c075:	5b                   	pop    ebx
c000c076:	31 d2                	xor    edx,edx
c000c078:	5e                   	pop    esi
c000c079:	5f                   	pop    edi
c000c07a:	5d                   	pop    ebp
c000c07b:	c3                   	ret    
c000c07c:	83 ec 0c             	sub    esp,0xc
c000c07f:	50                   	push   eax
c000c080:	e8 cc 94 00 00       	call   c0015551 <HalEndOfInterrupt(int)>
c000c085:	83 c4 10             	add    esp,0x10
c000c088:	eb b4                	jmp    c000c03e <int_handler+0x2a>
c000c08a:	83 ec 08             	sub    esp,0x8
c000c08d:	52                   	push   edx
c000c08e:	57                   	push   edi
c000c08f:	ff d0                	call   eax
c000c091:	83 c4 10             	add    esp,0x10
c000c094:	83 c4 0c             	add    esp,0xc
c000c097:	5b                   	pop    ebx
c000c098:	5e                   	pop    esi
c000c099:	5f                   	pop    edi
c000c09a:	5d                   	pop    ebp
c000c09b:	c3                   	ret    

c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000c09c:	56                   	push   esi
c000c09d:	31 c0                	xor    eax,eax
c000c09f:	53                   	push   ebx
c000c0a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000c0a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c0a8:	89 ca                	mov    edx,ecx
c000c0aa:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c0ae:	c1 e2 04             	shl    edx,0x4
c000c0b1:	83 bc 82 80 14 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffdeb80],0x0
c000c0b9:	74 15                	je     c000c0d0 <installISRHandler(int, void (*)(regs*, void*), void*)+0x34>
c000c0bb:	40                   	inc    eax
c000c0bc:	83 f8 04             	cmp    eax,0x4
c000c0bf:	75 f0                	jne    c000c0b1 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000c0c1:	c7 44 24 0c 84 da 01 c0 	mov    DWORD PTR [esp+0xc],0xc001da84
c000c0c9:	5b                   	pop    ebx
c000c0ca:	5e                   	pop    esi
c000c0cb:	e9 a7 41 00 00       	jmp    c0010277 <Krnl::panic(char const*)>
c000c0d0:	8d 04 88             	lea    eax,[eax+ecx*4]
c000c0d3:	89 1c 85 80 14 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeb80],ebx
c000c0da:	89 34 85 80 04 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb80],esi
c000c0e1:	5b                   	pop    ebx
c000c0e2:	5e                   	pop    esi
c000c0e3:	c3                   	ret    

c000c0e4 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c0e4:	57                   	push   edi
c000c0e5:	8b 15 84 03 02 c0    	mov    edx,DWORD PTR ds:0xc0020384
c000c0eb:	56                   	push   esi
c000c0ec:	53                   	push   ebx
c000c0ed:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c0f1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c0f5:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c0fc:	74 5b                	je     c000c159 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c0fe:	89 c7                	mov    edi,eax
c000c100:	84 c0                	test   al,al
c000c102:	74 24                	je     c000c128 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c104:	83 fe 0f             	cmp    esi,0xf
c000c107:	0f 8f d9 00 00 00    	jg     c000c1e6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x102>
c000c10d:	8a 86 00 f3 01 c0    	mov    al,BYTE PTR [esi-0x3ffe0d00]
c000c113:	25 ff 00 00 00       	and    eax,0xff
c000c118:	66 8b bc 00 20 2c 02 c0 	mov    di,WORD PTR [eax+eax*1-0x3ffdd3e0]
c000c120:	89 c6                	mov    esi,eax
c000c122:	66 d1 ef             	shr    di,1
c000c125:	83 e7 01             	and    edi,0x1
c000c128:	83 ec 08             	sub    esp,0x8
c000c12b:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c000c130:	31 db                	xor    ebx,ebx
c000c132:	50                   	push   eax
c000c133:	68 91 da 01 c0       	push   0xc001da91
c000c138:	e8 eb e5 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000c13d:	83 c4 10             	add    esp,0x10
c000c140:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c000c145:	85 c0                	test   eax,eax
c000c147:	7f 51                	jg     c000c19a <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb6>
c000c149:	83 ec 0c             	sub    esp,0xc
c000c14c:	68 a8 da 01 c0       	push   0xc001daa8
c000c151:	e8 21 41 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000c156:	83 c4 10             	add    esp,0x10
c000c159:	8d 4e 20             	lea    ecx,[esi+0x20]
c000c15c:	31 d2                	xor    edx,edx
c000c15e:	89 c8                	mov    eax,ecx
c000c160:	c1 e0 04             	shl    eax,0x4
c000c163:	8b 9c 90 80 14 02 c0 	mov    ebx,DWORD PTR [eax+edx*4-0x3ffdeb80]
c000c16a:	85 db                	test   ebx,ebx
c000c16c:	0f 84 8b 00 00 00    	je     c000c1fd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x119>
c000c172:	42                   	inc    edx
c000c173:	83 fa 04             	cmp    edx,0x4
c000c176:	75 eb                	jne    c000c163 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x7f>
c000c178:	83 ec 0c             	sub    esp,0xc
c000c17b:	68 fc da 01 c0       	push   0xc001dafc
c000c180:	e8 f2 40 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000c185:	83 c4 10             	add    esp,0x10
c000c188:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000c18d:	5b                   	pop    ebx
c000c18e:	5e                   	pop    esi
c000c18f:	5f                   	pop    edi
c000c190:	c3                   	ret    
c000c191:	43                   	inc    ebx
c000c192:	39 1d 40 42 02 c0    	cmp    DWORD PTR ds:0xc0024240,ebx
c000c198:	7e af                	jle    c000c149 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x65>
c000c19a:	83 ec 08             	sub    esp,0x8
c000c19d:	8b 04 9d 60 42 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbda0]
c000c1a4:	56                   	push   esi
c000c1a5:	50                   	push   eax
c000c1a6:	e8 cb ee 00 00       	call   c001b076 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000c1ab:	83 c4 10             	add    esp,0x10
c000c1ae:	84 c0                	test   al,al
c000c1b0:	74 df                	je     c000c191 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xad>
c000c1b2:	81 e7 ff 00 00 00    	and    edi,0xff
c000c1b8:	50                   	push   eax
c000c1b9:	8d 46 20             	lea    eax,[esi+0x20]
c000c1bc:	57                   	push   edi
c000c1bd:	25 ff 00 00 00       	and    eax,0xff
c000c1c2:	6a 00                	push   0x0
c000c1c4:	50                   	push   eax
c000c1c5:	89 f0                	mov    eax,esi
c000c1c7:	6a 00                	push   0x0
c000c1c9:	25 ff 00 00 00       	and    eax,0xff
c000c1ce:	6a 00                	push   0x0
c000c1d0:	50                   	push   eax
c000c1d1:	8b 04 9d 60 42 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffdbda0]
c000c1d8:	50                   	push   eax
c000c1d9:	e8 12 f0 00 00       	call   c001b1f0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000c1de:	83 c4 20             	add    esp,0x20
c000c1e1:	e9 73 ff ff ff       	jmp    c000c159 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x75>
c000c1e6:	83 ec 0c             	sub    esp,0xc
c000c1e9:	31 ff                	xor    edi,edi
c000c1eb:	68 c4 da 01 c0       	push   0xc001dac4
c000c1f0:	e8 82 40 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000c1f5:	83 c4 10             	add    esp,0x10
c000c1f8:	e9 2b ff ff ff       	jmp    c000c128 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x44>
c000c1fd:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000c200:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c204:	89 14 85 80 14 02 c0 	mov    DWORD PTR [eax*4-0x3ffdeb80],edx
c000c20b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c20f:	5b                   	pop    ebx
c000c210:	89 14 85 80 04 02 c0 	mov    DWORD PTR [eax*4-0x3ffdfb80],edx
c000c217:	89 f0                	mov    eax,esi
c000c219:	5e                   	pop    esi
c000c21a:	5f                   	pop    edi
c000c21b:	c3                   	ret    

c000c21c <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000c21c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c220:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c224:	c1 e0 04             	shl    eax,0x4
c000c227:	8d 50 10             	lea    edx,[eax+0x10]
c000c22a:	39 88 80 14 02 c0    	cmp    DWORD PTR [eax-0x3ffdeb80],ecx
c000c230:	74 08                	je     c000c23a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000c232:	83 c0 04             	add    eax,0x4
c000c235:	39 d0                	cmp    eax,edx
c000c237:	75 f1                	jne    c000c22a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000c239:	c3                   	ret    
c000c23a:	c7 80 80 14 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeb80],0x0
c000c244:	c7 80 80 04 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb80],0x0
c000c24e:	eb e2                	jmp    c000c232 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000c250 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c250:	53                   	push   ebx
c000c251:	83 ec 08             	sub    esp,0x8
c000c254:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000c258:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000c25d:	74 0e                	je     c000c26d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c25f:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000c264:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000c26b:	75 37                	jne    c000c2a4 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000c26d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c271:	83 c0 20             	add    eax,0x20
c000c274:	c1 e0 04             	shl    eax,0x4
c000c277:	8d 50 10             	lea    edx,[eax+0x10]
c000c27a:	39 98 80 14 02 c0    	cmp    DWORD PTR [eax-0x3ffdeb80],ebx
c000c280:	74 0c                	je     c000c28e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000c282:	83 c0 04             	add    eax,0x4
c000c285:	39 d0                	cmp    eax,edx
c000c287:	75 f1                	jne    c000c27a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000c289:	83 c4 08             	add    esp,0x8
c000c28c:	5b                   	pop    ebx
c000c28d:	c3                   	ret    
c000c28e:	c7 80 80 14 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeb80],0x0
c000c298:	c7 80 80 04 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb80],0x0
c000c2a2:	eb de                	jmp    c000c282 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000c2a4:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000c2a9:	7f 12                	jg     c000c2bd <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6d>
c000c2ab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c2af:	31 c0                	xor    eax,eax
c000c2b1:	8a 81 00 f3 01 c0    	mov    al,BYTE PTR [ecx-0x3ffe0d00]
c000c2b7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c2bb:	eb b0                	jmp    c000c26d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000c2bd:	83 ec 0c             	sub    esp,0xc
c000c2c0:	68 b5 da 01 c0       	push   0xc001dab5
c000c2c5:	e8 ad 3f 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000c2ca:	83 c4 10             	add    esp,0x10
c000c2cd:	eb 9e                	jmp    c000c26d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000c2cf <setupINTS()>:
c000c2cf:	31 c0                	xor    eax,eax
c000c2d1:	c7 80 80 14 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeb80],0x0
c000c2db:	c7 80 80 04 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb80],0x0
c000c2e5:	c7 80 84 14 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeb7c],0x0
c000c2ef:	c7 80 84 04 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb7c],0x0
c000c2f9:	c7 80 88 14 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeb78],0x0
c000c303:	c7 80 88 04 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb78],0x0
c000c30d:	c7 80 8c 14 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdeb74],0x0
c000c317:	c7 80 8c 04 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdfb74],0x0
c000c321:	83 c0 10             	add    eax,0x10
c000c324:	3d 00 10 00 00       	cmp    eax,0x1000
c000c329:	75 a6                	jne    c000c2d1 <setupINTS()+0x2>
c000c32b:	c3                   	ret    

c000c32c <convertLegacyIRQNumber(int)>:
c000c32c:	83 ec 0c             	sub    esp,0xc
c000c32f:	8b 15 84 03 02 c0    	mov    edx,DWORD PTR ds:0xc0020384
c000c335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c339:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000c340:	74 0f                	je     c000c351 <convertLegacyIRQNumber(int)+0x25>
c000c342:	83 f8 0f             	cmp    eax,0xf
c000c345:	7f 0e                	jg     c000c355 <convertLegacyIRQNumber(int)+0x29>
c000c347:	31 c9                	xor    ecx,ecx
c000c349:	8a 88 00 f3 01 c0    	mov    cl,BYTE PTR [eax-0x3ffe0d00]
c000c34f:	89 c8                	mov    eax,ecx
c000c351:	83 c4 0c             	add    esp,0xc
c000c354:	c3                   	ret    
c000c355:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c359:	83 ec 0c             	sub    esp,0xc
c000c35c:	68 c4 da 01 c0       	push   0xc001dac4
c000c361:	e8 11 3f 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000c366:	83 c4 10             	add    esp,0x10
c000c369:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c36d:	83 c4 0c             	add    esp,0xc
c000c370:	c3                   	ret    
c000c371:	90                   	nop

c000c372 <startGUI(void*)>:
c000c372:	55                   	push   ebp
c000c373:	89 e5                	mov    ebp,esp
c000c375:	53                   	push   ebx
c000c376:	83 ec 04             	sub    esp,0x4
c000c379:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000c37e:	48                   	dec    eax
c000c37f:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000c384:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000c389:	85 c0                	test   eax,eax
c000c38b:	75 01                	jne    c000c38e <startGUI(void*)+0x1c>
c000c38d:	fb                   	sti    
c000c38e:	8b 1d 84 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020384
c000c394:	83 ec 08             	sub    esp,0x8
c000c397:	6a 01                	push   0x1
c000c399:	68 21 db 01 c0       	push   0xc001db21
c000c39e:	e8 37 68 00 00       	call   c0012bda <Thr::loadDLL(char const*, bool)>
c000c3a3:	83 c4 10             	add    esp,0x10
c000c3a6:	83 ec 08             	sub    esp,0x8
c000c3a9:	53                   	push   ebx
c000c3aa:	50                   	push   eax
c000c3ab:	e8 5b 6a 00 00       	call   c0012e0b <Thr::executeDLL(unsigned long, void*)>
c000c3b0:	83 c4 10             	add    esp,0x10
c000c3b3:	8b 1d 84 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020384
c000c3b9:	83 ec 08             	sub    esp,0x8
c000c3bc:	6a 01                	push   0x1
c000c3be:	68 3b db 01 c0       	push   0xc001db3b
c000c3c3:	e8 12 68 00 00       	call   c0012bda <Thr::loadDLL(char const*, bool)>
c000c3c8:	83 c4 10             	add    esp,0x10
c000c3cb:	83 ec 08             	sub    esp,0x8
c000c3ce:	53                   	push   ebx
c000c3cf:	50                   	push   eax
c000c3d0:	e8 36 6a 00 00       	call   c0012e0b <Thr::executeDLL(unsigned long, void*)>
c000c3d5:	83 c4 10             	add    esp,0x10
c000c3d8:	90                   	nop
c000c3d9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c3dc:	c9                   	leave  
c000c3dd:	c3                   	ret    

c000c3de <startGUIVESA(void*)>:
c000c3de:	55                   	push   ebp
c000c3df:	89 e5                	mov    ebp,esp
c000c3e1:	53                   	push   ebx
c000c3e2:	83 ec 04             	sub    esp,0x4
c000c3e5:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000c3ea:	48                   	dec    eax
c000c3eb:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000c3f0:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000c3f5:	85 c0                	test   eax,eax
c000c3f7:	75 01                	jne    c000c3fa <startGUIVESA(void*)+0x1c>
c000c3f9:	fb                   	sti    
c000c3fa:	8b 1d 84 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020384
c000c400:	83 ec 08             	sub    esp,0x8
c000c403:	6a 01                	push   0x1
c000c405:	68 59 db 01 c0       	push   0xc001db59
c000c40a:	e8 cb 67 00 00       	call   c0012bda <Thr::loadDLL(char const*, bool)>
c000c40f:	83 c4 10             	add    esp,0x10
c000c412:	83 ec 08             	sub    esp,0x8
c000c415:	53                   	push   ebx
c000c416:	50                   	push   eax
c000c417:	e8 ef 69 00 00       	call   c0012e0b <Thr::executeDLL(unsigned long, void*)>
c000c41c:	83 c4 10             	add    esp,0x10
c000c41f:	8b 1d 84 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020384
c000c425:	83 ec 08             	sub    esp,0x8
c000c428:	6a 01                	push   0x1
c000c42a:	68 3b db 01 c0       	push   0xc001db3b
c000c42f:	e8 a6 67 00 00       	call   c0012bda <Thr::loadDLL(char const*, bool)>
c000c434:	83 c4 10             	add    esp,0x10
c000c437:	83 ec 08             	sub    esp,0x8
c000c43a:	53                   	push   ebx
c000c43b:	50                   	push   eax
c000c43c:	e8 ca 69 00 00       	call   c0012e0b <Thr::executeDLL(unsigned long, void*)>
c000c441:	83 c4 10             	add    esp,0x10
c000c444:	90                   	nop
c000c445:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000c448:	c9                   	leave  
c000c449:	c3                   	ret    

c000c44a <sendKeyToTerminal(unsigned char)>:
c000c44a:	55                   	push   ebp
c000c44b:	89 e5                	mov    ebp,esp
c000c44d:	83 ec 28             	sub    esp,0x28
c000c450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c453:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000c456:	8b 15 d0 03 02 c0    	mov    edx,DWORD PTR ds:0xc00203d0
c000c45c:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c000c45f:	25 ff 00 00 00       	and    eax,0xff
c000c464:	83 ec 08             	sub    esp,0x8
c000c467:	50                   	push   eax
c000c468:	52                   	push   edx
c000c469:	e8 aa c8 ff ff       	call   c0008d18 <VgaText::receiveKey(unsigned char)>
c000c46e:	83 c4 10             	add    esp,0x10
c000c471:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c000c475:	0f 85 8f 00 00 00    	jne    c000c50a <sendKeyToTerminal(unsigned char)+0xc0>
c000c47b:	fa                   	cli    
c000c47c:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000c481:	40                   	inc    eax
c000c482:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000c487:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c000c48c:	40                   	inc    eax
c000c48d:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c000c492:	a1 80 24 02 c0       	mov    eax,ds:0xc0022480
c000c497:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c49a:	c7 05 80 24 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022480,0x0
c000c4a4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000c4a8:	74 1f                	je     c000c4c9 <sendKeyToTerminal(unsigned char)+0x7f>
c000c4aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000c4ad:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000c4b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c4b3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000c4b6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000c4b9:	83 ec 0c             	sub    esp,0xc
c000c4bc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000c4bf:	e8 cc 75 00 00       	call   c0013a90 <unblockTask(ThreadControlBlock*)>
c000c4c4:	83 c4 10             	add    esp,0x10
c000c4c7:	eb db                	jmp    c000c4a4 <sendKeyToTerminal(unsigned char)+0x5a>
c000c4c9:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c000c4ce:	48                   	dec    eax
c000c4cf:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c000c4d4:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c000c4d9:	85 c0                	test   eax,eax
c000c4db:	75 18                	jne    c000c4f5 <sendKeyToTerminal(unsigned char)+0xab>
c000c4dd:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c000c4e2:	85 c0                	test   eax,eax
c000c4e4:	74 0f                	je     c000c4f5 <sendKeyToTerminal(unsigned char)+0xab>
c000c4e6:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c000c4f0:	e8 d7 70 00 00       	call   c00135cc <schedule()>
c000c4f5:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000c4fa:	48                   	dec    eax
c000c4fb:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000c500:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000c505:	85 c0                	test   eax,eax
c000c507:	75 01                	jne    c000c50a <sendKeyToTerminal(unsigned char)+0xc0>
c000c509:	fb                   	sti    
c000c50a:	90                   	nop
c000c50b:	c9                   	leave  
c000c50c:	c3                   	ret    

c000c50d <sendKeyboardToken(KeyboardToken)>:
c000c50d:	55                   	push   ebp
c000c50e:	89 e5                	mov    ebp,esp
c000c510:	83 ec 18             	sub    esp,0x18
c000c513:	e8 ab 3e 00 00       	call   c00103c3 <Krnl::userIOReceived()>
c000c518:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000c51b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c51e:	25 ff ff 00 00       	and    eax,0xffff
c000c523:	83 f2 01             	xor    edx,0x1
c000c526:	88 90 a0 24 02 c0    	mov    BYTE PTR [eax-0x3ffddb60],dl
c000c52c:	a1 88 24 02 c0       	mov    eax,ds:0xc0022488
c000c531:	85 c0                	test   eax,eax
c000c533:	74 24                	je     c000c559 <sendKeyboardToken(KeyboardToken)+0x4c>
c000c535:	8b 0d 88 24 02 c0    	mov    ecx,DWORD PTR ds:0xc0022488
c000c53b:	83 ec 04             	sub    esp,0x4
c000c53e:	68 a0 24 02 c0       	push   0xc00224a0
c000c543:	83 ec 08             	sub    esp,0x8
c000c546:	89 e2                	mov    edx,esp
c000c548:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c54b:	89 02                	mov    DWORD PTR [edx],eax
c000c54d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000c550:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c554:	ff d1                	call   ecx
c000c556:	83 c4 10             	add    esp,0x10
c000c559:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000c55d:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000c560:	a0 a8 28 02 c0       	mov    al,ds:0xc00228a8
c000c565:	38 c2                	cmp    dl,al
c000c567:	74 1e                	je     c000c587 <sendKeyboardToken(KeyboardToken)+0x7a>
c000c569:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000c56c:	a2 a8 28 02 c0       	mov    ds:0xc00228a8,al
c000c571:	a0 a8 28 02 c0       	mov    al,ds:0xc00228a8
c000c576:	25 ff 00 00 00       	and    eax,0xff
c000c57b:	83 ec 0c             	sub    esp,0xc
c000c57e:	50                   	push   eax
c000c57f:	e8 e6 be ff ff       	call   c000846a <setTerminalScrollLock(bool)>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000c58a:	84 c0                	test   al,al
c000c58c:	0f 84 ae 00 00 00    	je     c000c640 <sendKeyboardToken(KeyboardToken)+0x133>
c000c592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c595:	66 3d 10 03          	cmp    ax,0x310
c000c599:	75 06                	jne    c000c5a1 <sendKeyboardToken(KeyboardToken)+0x94>
c000c59b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000c5a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5a4:	66 3d 11 03          	cmp    ax,0x311
c000c5a8:	75 06                	jne    c000c5b0 <sendKeyboardToken(KeyboardToken)+0xa3>
c000c5aa:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000c5b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5b3:	66 3d 12 03          	cmp    ax,0x312
c000c5b7:	75 06                	jne    c000c5bf <sendKeyboardToken(KeyboardToken)+0xb2>
c000c5b9:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000c5bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5c2:	66 3d 13 03          	cmp    ax,0x313
c000c5c6:	75 06                	jne    c000c5ce <sendKeyboardToken(KeyboardToken)+0xc1>
c000c5c8:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000c5ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5d1:	66 3d 14 03          	cmp    ax,0x314
c000c5d5:	75 06                	jne    c000c5dd <sendKeyboardToken(KeyboardToken)+0xd0>
c000c5d7:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000c5dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5e0:	66 3d 15 03          	cmp    ax,0x315
c000c5e4:	75 06                	jne    c000c5ec <sendKeyboardToken(KeyboardToken)+0xdf>
c000c5e6:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c5ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5ef:	66 3d 16 03          	cmp    ax,0x316
c000c5f3:	75 06                	jne    c000c5fb <sendKeyboardToken(KeyboardToken)+0xee>
c000c5f5:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000c5fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c5fe:	66 3d 17 03          	cmp    ax,0x317
c000c602:	75 06                	jne    c000c60a <sendKeyboardToken(KeyboardToken)+0xfd>
c000c604:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000c60a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c60d:	66 3d 18 03          	cmp    ax,0x318
c000c611:	75 06                	jne    c000c619 <sendKeyboardToken(KeyboardToken)+0x10c>
c000c613:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000c619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c61c:	66 3d 19 03          	cmp    ax,0x319
c000c620:	75 06                	jne    c000c628 <sendKeyboardToken(KeyboardToken)+0x11b>
c000c622:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000c628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c62b:	66 3d 1a 03          	cmp    ax,0x31a
c000c62f:	0f 85 c9 00 00 00    	jne    c000c6fe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c635:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000c63b:	e9 be 00 00 00       	jmp    c000c6fe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c643:	66 3d 10 03          	cmp    ax,0x310
c000c647:	75 0a                	jne    c000c653 <sendKeyboardToken(KeyboardToken)+0x146>
c000c649:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000c64f:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c653:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c656:	66 3d 11 03          	cmp    ax,0x311
c000c65a:	75 0a                	jne    c000c666 <sendKeyboardToken(KeyboardToken)+0x159>
c000c65c:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000c662:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c669:	66 3d 12 03          	cmp    ax,0x312
c000c66d:	75 0a                	jne    c000c679 <sendKeyboardToken(KeyboardToken)+0x16c>
c000c66f:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000c675:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c679:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c67c:	66 3d 13 03          	cmp    ax,0x313
c000c680:	75 0a                	jne    c000c68c <sendKeyboardToken(KeyboardToken)+0x17f>
c000c682:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000c688:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c68c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c68f:	66 3d 14 03          	cmp    ax,0x314
c000c693:	75 0a                	jne    c000c69f <sendKeyboardToken(KeyboardToken)+0x192>
c000c695:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000c69b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c69f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6a2:	66 3d 15 03          	cmp    ax,0x315
c000c6a6:	75 0a                	jne    c000c6b2 <sendKeyboardToken(KeyboardToken)+0x1a5>
c000c6a8:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000c6ae:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c6b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6b5:	66 3d 16 03          	cmp    ax,0x316
c000c6b9:	75 0a                	jne    c000c6c5 <sendKeyboardToken(KeyboardToken)+0x1b8>
c000c6bb:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000c6c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c6c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6c8:	66 3d 17 03          	cmp    ax,0x317
c000c6cc:	75 0a                	jne    c000c6d8 <sendKeyboardToken(KeyboardToken)+0x1cb>
c000c6ce:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000c6d4:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c6d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6db:	66 3d 18 03          	cmp    ax,0x318
c000c6df:	75 0a                	jne    c000c6eb <sendKeyboardToken(KeyboardToken)+0x1de>
c000c6e1:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000c6e7:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c6eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c6ee:	66 3d 19 03          	cmp    ax,0x319
c000c6f2:	75 0a                	jne    c000c6fe <sendKeyboardToken(KeyboardToken)+0x1f1>
c000c6f4:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000c6fa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000c6fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c701:	66 3d 00 02          	cmp    ax,0x200
c000c705:	75 2c                	jne    c000c733 <sendKeyboardToken(KeyboardToken)+0x226>
c000c707:	a0 a0 28 02 c0       	mov    al,ds:0xc00228a0
c000c70c:	83 f0 01             	xor    eax,0x1
c000c70f:	84 c0                	test   al,al
c000c711:	74 20                	je     c000c733 <sendKeyboardToken(KeyboardToken)+0x226>
c000c713:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c000c718:	6a 01                	push   0x1
c000c71a:	6a 00                	push   0x0
c000c71c:	68 72 c3 00 c0       	push   0xc000c372
c000c721:	50                   	push   eax
c000c722:	e8 85 6c 00 00       	call   c00133ac <Process::createThread(void (*)(void*), void*, int)>
c000c727:	83 c4 10             	add    esp,0x10
c000c72a:	c6 05 a0 28 02 c0 01 	mov    BYTE PTR ds:0xc00228a0,0x1
c000c731:	eb 33                	jmp    c000c766 <sendKeyboardToken(KeyboardToken)+0x259>
c000c733:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c736:	66 3d 01 02          	cmp    ax,0x201
c000c73a:	75 2a                	jne    c000c766 <sendKeyboardToken(KeyboardToken)+0x259>
c000c73c:	a0 a0 28 02 c0       	mov    al,ds:0xc00228a0
c000c741:	83 f0 01             	xor    eax,0x1
c000c744:	84 c0                	test   al,al
c000c746:	74 1e                	je     c000c766 <sendKeyboardToken(KeyboardToken)+0x259>
c000c748:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c000c74d:	6a 01                	push   0x1
c000c74f:	6a 00                	push   0x0
c000c751:	68 de c3 00 c0       	push   0xc000c3de
c000c756:	50                   	push   eax
c000c757:	e8 50 6c 00 00       	call   c00133ac <Process::createThread(void (*)(void*), void*, int)>
c000c75c:	83 c4 10             	add    esp,0x10
c000c75f:	c6 05 a0 28 02 c0 01 	mov    BYTE PTR ds:0xc00228a0,0x1
c000c766:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c769:	66 3d 1d 03          	cmp    ax,0x31d
c000c76d:	75 06                	jne    c000c775 <sendKeyboardToken(KeyboardToken)+0x268>
c000c76f:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000c775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c778:	66 3d 1c 03          	cmp    ax,0x31c
c000c77c:	75 06                	jne    c000c784 <sendKeyboardToken(KeyboardToken)+0x277>
c000c77e:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000c784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c787:	66 3d 1b 03          	cmp    ax,0x31b
c000c78b:	75 06                	jne    c000c793 <sendKeyboardToken(KeyboardToken)+0x286>
c000c78d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000c793:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c796:	66 3d 1e 03          	cmp    ax,0x31e
c000c79a:	75 06                	jne    c000c7a2 <sendKeyboardToken(KeyboardToken)+0x295>
c000c79c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000c7a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7a5:	66 3d 1f 03          	cmp    ax,0x31f
c000c7a9:	75 06                	jne    c000c7b1 <sendKeyboardToken(KeyboardToken)+0x2a4>
c000c7ab:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000c7b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7b4:	66 3d 1a 03          	cmp    ax,0x31a
c000c7b8:	75 06                	jne    c000c7c0 <sendKeyboardToken(KeyboardToken)+0x2b3>
c000c7ba:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000c7c0:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000c7c4:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c7c7:	83 f0 01             	xor    eax,0x1
c000c7ca:	84 c0                	test   al,al
c000c7cc:	74 7b                	je     c000c849 <sendKeyboardToken(KeyboardToken)+0x33c>
c000c7ce:	a0 a1 25 02 c0       	mov    al,ds:0xc00225a1
c000c7d3:	84 c0                	test   al,al
c000c7d5:	74 43                	je     c000c81a <sendKeyboardToken(KeyboardToken)+0x30d>
c000c7d7:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c7db:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c000c7df:	74 2d                	je     c000c80e <sendKeyboardToken(KeyboardToken)+0x301>
c000c7e1:	8b 15 a4 28 02 c0    	mov    edx,DWORD PTR ds:0xc00228a4
c000c7e7:	89 d0                	mov    eax,edx
c000c7e9:	c1 e0 02             	shl    eax,0x2
c000c7ec:	01 d0                	add    eax,edx
c000c7ee:	01 c0                	add    eax,eax
c000c7f0:	a3 a4 28 02 c0       	mov    ds:0xc00228a4,eax
c000c7f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c7f8:	25 ff ff 00 00       	and    eax,0xffff
c000c7fd:	8d 50 d0             	lea    edx,[eax-0x30]
c000c800:	a1 a4 28 02 c0       	mov    eax,ds:0xc00228a4
c000c805:	01 d0                	add    eax,edx
c000c807:	a3 a4 28 02 c0       	mov    ds:0xc00228a4,eax
c000c80c:	eb 71                	jmp    c000c87f <sendKeyboardToken(KeyboardToken)+0x372>
c000c80e:	c7 05 a4 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228a4,0x0
c000c818:	eb 65                	jmp    c000c87f <sendKeyboardToken(KeyboardToken)+0x372>
c000c81a:	a1 a4 28 02 c0       	mov    eax,ds:0xc00228a4
c000c81f:	85 c0                	test   eax,eax
c000c821:	74 1a                	je     c000c83d <sendKeyboardToken(KeyboardToken)+0x330>
c000c823:	a1 a4 28 02 c0       	mov    eax,ds:0xc00228a4
c000c828:	25 ff 00 00 00       	and    eax,0xff
c000c82d:	83 ec 0c             	sub    esp,0xc
c000c830:	50                   	push   eax
c000c831:	e8 14 fc ff ff       	call   c000c44a <sendKeyToTerminal(unsigned char)>
c000c836:	83 c4 10             	add    esp,0x10
c000c839:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c83d:	c7 05 a4 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228a4,0x0
c000c847:	eb 36                	jmp    c000c87f <sendKeyboardToken(KeyboardToken)+0x372>
c000c849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c84c:	66 3d 01 01          	cmp    ax,0x101
c000c850:	75 2d                	jne    c000c87f <sendKeyboardToken(KeyboardToken)+0x372>
c000c852:	a1 a4 28 02 c0       	mov    eax,ds:0xc00228a4
c000c857:	85 c0                	test   eax,eax
c000c859:	74 1a                	je     c000c875 <sendKeyboardToken(KeyboardToken)+0x368>
c000c85b:	a1 a4 28 02 c0       	mov    eax,ds:0xc00228a4
c000c860:	25 ff 00 00 00       	and    eax,0xff
c000c865:	83 ec 0c             	sub    esp,0xc
c000c868:	50                   	push   eax
c000c869:	e8 dc fb ff ff       	call   c000c44a <sendKeyToTerminal(unsigned char)>
c000c86e:	83 c4 10             	add    esp,0x10
c000c871:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000c875:	c7 05 a4 28 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00228a4,0x0
c000c87f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c882:	83 f0 01             	xor    eax,0x1
c000c885:	84 c0                	test   al,al
c000c887:	74 4e                	je     c000c8d7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c889:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c88c:	83 f0 01             	xor    eax,0x1
c000c88f:	84 c0                	test   al,al
c000c891:	74 44                	je     c000c8d7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c893:	a0 a0 25 02 c0       	mov    al,ds:0xc00225a0
c000c898:	83 f0 01             	xor    eax,0x1
c000c89b:	84 c0                	test   al,al
c000c89d:	74 38                	je     c000c8d7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c89f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8a2:	66 83 f8 1f          	cmp    ax,0x1f
c000c8a6:	76 09                	jbe    c000c8b1 <sendKeyboardToken(KeyboardToken)+0x3a4>
c000c8a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8ab:	66 83 f8 7e          	cmp    ax,0x7e
c000c8af:	76 12                	jbe    c000c8c3 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c8b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8b4:	66 83 f8 0a          	cmp    ax,0xa
c000c8b8:	74 09                	je     c000c8c3 <sendKeyboardToken(KeyboardToken)+0x3b6>
c000c8ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8bd:	66 83 f8 08          	cmp    ax,0x8
c000c8c1:	75 14                	jne    c000c8d7 <sendKeyboardToken(KeyboardToken)+0x3ca>
c000c8c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8c6:	25 ff 00 00 00       	and    eax,0xff
c000c8cb:	83 ec 0c             	sub    esp,0xc
c000c8ce:	50                   	push   eax
c000c8cf:	e8 76 fb ff ff       	call   c000c44a <sendKeyToTerminal(unsigned char)>
c000c8d4:	83 c4 10             	add    esp,0x10
c000c8d7:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000c8da:	83 f0 01             	xor    eax,0x1
c000c8dd:	84 c0                	test   al,al
c000c8df:	74 51                	je     c000c932 <sendKeyboardToken(KeyboardToken)+0x425>
c000c8e1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c8e4:	83 f0 01             	xor    eax,0x1
c000c8e7:	84 c0                	test   al,al
c000c8e9:	74 47                	je     c000c932 <sendKeyboardToken(KeyboardToken)+0x425>
c000c8eb:	a0 a0 25 02 c0       	mov    al,ds:0xc00225a0
c000c8f0:	84 c0                	test   al,al
c000c8f2:	74 3e                	je     c000c932 <sendKeyboardToken(KeyboardToken)+0x425>
c000c8f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c8f7:	66 83 f8 3f          	cmp    ax,0x3f
c000c8fb:	76 35                	jbe    c000c932 <sendKeyboardToken(KeyboardToken)+0x425>
c000c8fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c900:	66 83 f8 7f          	cmp    ax,0x7f
c000c904:	77 2c                	ja     c000c932 <sendKeyboardToken(KeyboardToken)+0x425>
c000c906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c909:	88 c2                	mov    dl,al
c000c90b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c90e:	66 83 f8 5f          	cmp    ax,0x5f
c000c912:	76 04                	jbe    c000c918 <sendKeyboardToken(KeyboardToken)+0x40b>
c000c914:	b0 20                	mov    al,0x20
c000c916:	eb 02                	jmp    c000c91a <sendKeyboardToken(KeyboardToken)+0x40d>
c000c918:	b0 00                	mov    al,0x0
c000c91a:	29 c2                	sub    edx,eax
c000c91c:	88 d0                	mov    al,dl
c000c91e:	83 e8 40             	sub    eax,0x40
c000c921:	25 ff 00 00 00       	and    eax,0xff
c000c926:	83 ec 0c             	sub    esp,0xc
c000c929:	50                   	push   eax
c000c92a:	e8 1b fb ff ff       	call   c000c44a <sendKeyToTerminal(unsigned char)>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c935:	66 3d 00 03          	cmp    ax,0x300
c000c939:	75 0f                	jne    c000c94a <sendKeyboardToken(KeyboardToken)+0x43d>
c000c93b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000c93e:	83 f0 01             	xor    eax,0x1
c000c941:	84 c0                	test   al,al
c000c943:	74 05                	je     c000c94a <sendKeyboardToken(KeyboardToken)+0x43d>
c000c945:	e8 21 bb ff ff       	call   c000846b <doTerminalCycle()>
c000c94a:	90                   	nop
c000c94b:	c9                   	leave  
c000c94c:	c3                   	ret    

c000c94d <clearInternalKeybuffer(VgaText*)>:
c000c94d:	55                   	push   ebp
c000c94e:	89 e5                	mov    ebp,esp
c000c950:	83 ec 08             	sub    esp,0x8
c000c953:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c956:	05 b2 00 00 00       	add    eax,0xb2
c000c95b:	83 ec 0c             	sub    esp,0xc
c000c95e:	50                   	push   eax
c000c95f:	e8 fc 3b ff ff       	call   c0000560 <strlen>
c000c964:	83 c4 10             	add    esp,0x10
c000c967:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000c96a:	81 c2 b2 00 00 00    	add    edx,0xb2
c000c970:	83 ec 04             	sub    esp,0x4
c000c973:	50                   	push   eax
c000c974:	6a 00                	push   0x0
c000c976:	52                   	push   edx
c000c977:	e8 74 3b ff ff       	call   c00004f0 <memset>
c000c97c:	83 c4 10             	add    esp,0x10
c000c97f:	90                   	nop
c000c980:	c9                   	leave  
c000c981:	c3                   	ret    

c000c982 <readKeyboard(VgaText*, char*, unsigned long)>:
c000c982:	55                   	push   ebp
c000c983:	89 e5                	mov    ebp,esp
c000c985:	83 ec 18             	sub    esp,0x18
c000c988:	a1 88 24 02 c0       	mov    eax,ds:0xc0022488
c000c98d:	85 c0                	test   eax,eax
c000c98f:	74 2a                	je     c000c9bb <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000c991:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000c997:	8b 0d 88 24 02 c0    	mov    ecx,DWORD PTR ds:0xc0022488
c000c99d:	83 ec 04             	sub    esp,0x4
c000c9a0:	68 a0 24 02 c0       	push   0xc00224a0
c000c9a5:	83 ec 08             	sub    esp,0x8
c000c9a8:	89 e2                	mov    edx,esp
c000c9aa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000c9ad:	89 02                	mov    DWORD PTR [edx],eax
c000c9af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000c9b2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000c9b6:	ff d1                	call   ecx
c000c9b8:	83 c4 10             	add    esp,0x10
c000c9bb:	fb                   	sti    
c000c9bc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000c9c3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000c9c7:	0f 84 a1 00 00 00    	je     c000ca6e <readKeyboard(VgaText*, char*, unsigned long)+0xec>
c000c9cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9d0:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000c9d6:	84 c0                	test   al,al
c000c9d8:	75 28                	jne    c000ca02 <readKeyboard(VgaText*, char*, unsigned long)+0x80>
c000c9da:	fa                   	cli    
c000c9db:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000c9e0:	40                   	inc    eax
c000c9e1:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000c9e6:	e8 e1 6b 00 00       	call   c00135cc <schedule()>
c000c9eb:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000c9f0:	48                   	dec    eax
c000c9f1:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000c9f6:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000c9fb:	85 c0                	test   eax,eax
c000c9fd:	75 ce                	jne    c000c9cd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000c9ff:	fb                   	sti    
c000ca00:	eb cb                	jmp    c000c9cd <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000ca02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000ca05:	8d 50 01             	lea    edx,[eax+0x1]
c000ca08:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000ca0b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ca0e:	8a 92 b2 00 00 00    	mov    dl,BYTE PTR [edx+0xb2]
c000ca14:	88 10                	mov    BYTE PTR [eax],dl
c000ca16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca19:	8a 80 b2 00 00 00    	mov    al,BYTE PTR [eax+0xb2]
c000ca1f:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000ca22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000ca25:	05 b2 00 00 00       	add    eax,0xb2
c000ca2a:	83 ec 0c             	sub    esp,0xc
c000ca2d:	50                   	push   eax
c000ca2e:	e8 2d 3b ff ff       	call   c0000560 <strlen>
c000ca33:	83 c4 10             	add    esp,0x10
c000ca36:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ca39:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ca3f:	8d 4a 01             	lea    ecx,[edx+0x1]
c000ca42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000ca45:	81 c2 b2 00 00 00    	add    edx,0xb2
c000ca4b:	83 ec 04             	sub    esp,0x4
c000ca4e:	50                   	push   eax
c000ca4f:	51                   	push   ecx
c000ca50:	52                   	push   edx
c000ca51:	e8 aa 39 ff ff       	call   c0000400 <memmove>
c000ca56:	83 c4 10             	add    esp,0x10
c000ca59:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c000ca5c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c000ca5f:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c000ca63:	0f 85 5a ff ff ff    	jne    c000c9c3 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000ca69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ca6c:	eb 03                	jmp    c000ca71 <readKeyboard(VgaText*, char*, unsigned long)+0xef>
c000ca6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000ca71:	c9                   	leave  
c000ca72:	c3                   	ret    
c000ca73:	90                   	nop

c000ca74 <Keyboard::Keyboard(char const*)>:
c000ca74:	83 ec 0c             	sub    esp,0xc
c000ca77:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca7b:	83 ec 08             	sub    esp,0x8
c000ca7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca82:	50                   	push   eax
c000ca83:	e8 78 f2 ff ff       	call   c000bd00 <Device::Device(char const*)>
c000ca88:	83 c4 10             	add    esp,0x10
c000ca8b:	ba 7c db 01 c0       	mov    edx,0xc001db7c
c000ca90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca94:	89 10                	mov    DWORD PTR [eax],edx
c000ca96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca9a:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000caa4:	c6 05 84 24 02 c0 01 	mov    BYTE PTR ds:0xc0022484,0x1
c000caab:	90                   	nop
c000caac:	83 c4 0c             	add    esp,0xc
c000caaf:	c3                   	ret    

c000cab0 <Keyboard::~Keyboard()>:
c000cab0:	83 ec 0c             	sub    esp,0xc
c000cab3:	ba 7c db 01 c0       	mov    edx,0xc001db7c
c000cab8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cabc:	89 10                	mov    DWORD PTR [eax],edx
c000cabe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cac2:	83 ec 0c             	sub    esp,0xc
c000cac5:	50                   	push   eax
c000cac6:	e8 9f ef ff ff       	call   c000ba6a <Device::~Device()>
c000cacb:	83 c4 10             	add    esp,0x10
c000cace:	90                   	nop
c000cacf:	83 c4 0c             	add    esp,0xc
c000cad2:	c3                   	ret    
c000cad3:	90                   	nop

c000cad4 <Keyboard::~Keyboard()>:
c000cad4:	83 ec 0c             	sub    esp,0xc
c000cad7:	83 ec 0c             	sub    esp,0xc
c000cada:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cade:	e8 cd ff ff ff       	call   c000cab0 <Keyboard::~Keyboard()>
c000cae3:	83 c4 10             	add    esp,0x10
c000cae6:	83 ec 08             	sub    esp,0x8
c000cae9:	68 5c 01 00 00       	push   0x15c
c000caee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000caf2:	e8 3b db ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000caf7:	83 c4 10             	add    esp,0x10
c000cafa:	83 c4 0c             	add    esp,0xc
c000cafd:	c3                   	ret    

c000cafe <LogicalDisk::close(int, int, void*)>:
c000cafe:	83 c8 ff             	or     eax,0xffffffff
c000cb01:	c3                   	ret    

c000cb02 <LogicalDisk::~LogicalDisk()>:
c000cb02:	83 ec 0c             	sub    esp,0xc
c000cb05:	ba f4 db 01 c0       	mov    edx,0xc001dbf4
c000cb0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb0e:	89 10                	mov    DWORD PTR [eax],edx
c000cb10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb14:	83 ec 0c             	sub    esp,0xc
c000cb17:	50                   	push   eax
c000cb18:	e8 4d ef ff ff       	call   c000ba6a <Device::~Device()>
c000cb1d:	83 c4 10             	add    esp,0x10
c000cb20:	90                   	nop
c000cb21:	83 c4 0c             	add    esp,0xc
c000cb24:	c3                   	ret    
c000cb25:	90                   	nop

c000cb26 <LogicalDisk::~LogicalDisk()>:
c000cb26:	83 ec 0c             	sub    esp,0xc
c000cb29:	83 ec 0c             	sub    esp,0xc
c000cb2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb30:	e8 cd ff ff ff       	call   c000cb02 <LogicalDisk::~LogicalDisk()>
c000cb35:	83 c4 10             	add    esp,0x10
c000cb38:	83 ec 08             	sub    esp,0x8
c000cb3b:	68 74 01 00 00       	push   0x174
c000cb40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cb44:	e8 e9 da ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000cb49:	83 c4 10             	add    esp,0x10
c000cb4c:	83 c4 0c             	add    esp,0xc
c000cb4f:	c3                   	ret    

c000cb50 <LogicalDisk::open(int, int, void*)>:
c000cb50:	83 ec 18             	sub    esp,0x18
c000cb53:	68 a8 db 01 c0       	push   0xc001dba8
c000cb58:	e8 1a 37 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000cb5d:	83 c8 ff             	or     eax,0xffffffff
c000cb60:	83 c4 1c             	add    esp,0x1c
c000cb63:	c3                   	ret    

c000cb64 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000cb64:	53                   	push   ebx
c000cb65:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cb69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000cb6d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cb71:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000cb77:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000cb7d:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000cb83:	77 10                	ja     c000cb95 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000cb85:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000cb8b:	89 d3                	mov    ebx,edx
c000cb8d:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000cb93:	72 05                	jb     c000cb9a <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000cb95:	83 c8 ff             	or     eax,0xffffffff
c000cb98:	89 c2                	mov    edx,eax
c000cb9a:	5b                   	pop    ebx
c000cb9b:	c3                   	ret    

c000cb9c <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000cb9c:	56                   	push   esi
c000cb9d:	83 c8 ff             	or     eax,0xffffffff
c000cba0:	53                   	push   ebx
c000cba1:	89 c2                	mov    edx,eax
c000cba3:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cba7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000cbab:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000cbaf:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000cbb5:	77 27                	ja     c000cbde <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cbb7:	89 d8                	mov    eax,ebx
c000cbb9:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000cbbf:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000cbc5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cbca:	89 c2                	mov    edx,eax
c000cbcc:	73 10                	jae    c000cbde <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000cbce:	89 c8                	mov    eax,ecx
c000cbd0:	89 da                	mov    edx,ebx
c000cbd2:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000cbd8:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000cbde:	5b                   	pop    ebx
c000cbdf:	5e                   	pop    esi
c000cbe0:	c3                   	ret    
c000cbe1:	90                   	nop

c000cbe2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cbe2:	83 ec 1c             	sub    esp,0x1c
c000cbe5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000cbe9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cbed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000cbf1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000cbf5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000cbf9:	89 04 24             	mov    DWORD PTR [esp],eax
c000cbfc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cc00:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cc04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc08:	83 ec 08             	sub    esp,0x8
c000cc0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0f:	50                   	push   eax
c000cc10:	e8 eb f0 ff ff       	call   c000bd00 <Device::Device(char const*)>
c000cc15:	83 c4 10             	add    esp,0x10
c000cc18:	ba f4 db 01 c0       	mov    edx,0xc001dbf4
c000cc1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc21:	89 10                	mov    DWORD PTR [eax],edx
c000cc23:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc27:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cc2e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc32:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000cc39:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc3d:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000cc47:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cc4b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cc4f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cc53:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000cc59:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000cc5f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000cc63:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000cc66:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000cc6a:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000cc70:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000cc76:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc7a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000cc7e:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000cc84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000cc88:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cc92:	90                   	nop
c000cc93:	83 c4 1c             	add    esp,0x1c
c000cc96:	c3                   	ret    
c000cc97:	90                   	nop

c000cc98 <LogicalDisk::assignDriveLetter()>:
c000cc98:	55                   	push   ebp
c000cc99:	57                   	push   edi
c000cc9a:	56                   	push   esi
c000cc9b:	53                   	push   ebx
c000cc9c:	83 ec 14             	sub    esp,0x14
c000cc9f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000cca3:	8b 3d c0 28 02 c0    	mov    edi,DWORD PTR ds:0xc00228c0
c000cca9:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000ccaf:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000ccb3:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c000ccb9:	8b 3d c4 28 02 c0    	mov    edi,DWORD PTR ds:0xc00228c4
c000ccbf:	3c 01                	cmp    al,0x1
c000ccc1:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c000ccc5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000ccc9:	19 c0                	sbb    eax,eax
c000cccb:	83 e0 02             	and    eax,0x2
c000ccce:	83 c0 41             	add    eax,0x41
c000ccd1:	0f be e8             	movsx  ebp,al
c000ccd4:	3c 43                	cmp    al,0x43
c000ccd6:	75 10                	jne    c000cce8 <LogicalDisk::assignDriveLetter()+0x50>
c000ccd8:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000ccdf:	75 5d                	jne    c000cd3e <LogicalDisk::assignDriveLetter()+0xa6>
c000cce1:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c000cce6:	75 56                	jne    c000cd3e <LogicalDisk::assignDriveLetter()+0xa6>
c000cce8:	8d 75 bf             	lea    esi,[ebp-0x41]
c000cceb:	ba 01 00 00 00       	mov    edx,0x1
c000ccf0:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000ccf4:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c000ccf8:	d3 e2                	shl    edx,cl
c000ccfa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ccfe:	89 d7                	mov    edi,edx
c000cd00:	89 d6                	mov    esi,edx
c000cd02:	c1 ff 1f             	sar    edi,0x1f
c000cd05:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c000cd09:	21 f9                	and    ecx,edi
c000cd0b:	09 d1                	or     ecx,edx
c000cd0d:	75 2f                	jne    c000cd3e <LogicalDisk::assignDriveLetter()+0xa6>
c000cd0f:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000cd13:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000cd17:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000cd1d:	09 f2                	or     edx,esi
c000cd1f:	89 15 c0 28 02 c0    	mov    DWORD PTR ds:0xc00228c0,edx
c000cd25:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cd29:	09 fa                	or     edx,edi
c000cd2b:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000cd2f:	89 15 c4 28 02 c0    	mov    DWORD PTR ds:0xc00228c4,edx
c000cd35:	89 1c bd e0 28 02 c0 	mov    DWORD PTR [edi*4-0x3ffdd720],ebx
c000cd3c:	eb 08                	jmp    c000cd46 <LogicalDisk::assignDriveLetter()+0xae>
c000cd3e:	45                   	inc    ebp
c000cd3f:	40                   	inc    eax
c000cd40:	3c 5b                	cmp    al,0x5b
c000cd42:	75 90                	jne    c000ccd4 <LogicalDisk::assignDriveLetter()+0x3c>
c000cd44:	31 c0                	xor    eax,eax
c000cd46:	83 c4 14             	add    esp,0x14
c000cd49:	5b                   	pop    ebx
c000cd4a:	5e                   	pop    esi
c000cd4b:	5f                   	pop    edi
c000cd4c:	5d                   	pop    ebp
c000cd4d:	c3                   	ret    

c000cd4e <LogicalDisk::mount()>:
c000cd4e:	56                   	push   esi
c000cd4f:	53                   	push   ebx
c000cd50:	53                   	push   ebx
c000cd51:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cd55:	8b 1d 74 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020474
c000cd5b:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c000cd65:	85 db                	test   ebx,ebx
c000cd67:	74 27                	je     c000cd90 <LogicalDisk::mount()+0x42>
c000cd69:	51                   	push   ecx
c000cd6a:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000cd71:	8b 13                	mov    edx,DWORD PTR [ebx]
c000cd73:	83 e8 41             	sub    eax,0x41
c000cd76:	50                   	push   eax
c000cd77:	56                   	push   esi
c000cd78:	53                   	push   ebx
c000cd79:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000cd7c:	83 c4 10             	add    esp,0x10
c000cd7f:	84 c0                	test   al,al
c000cd81:	74 08                	je     c000cd8b <LogicalDisk::mount()+0x3d>
c000cd83:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c000cd89:	eb 07                	jmp    c000cd92 <LogicalDisk::mount()+0x44>
c000cd8b:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000cd8e:	eb d5                	jmp    c000cd65 <LogicalDisk::mount()+0x17>
c000cd90:	31 c0                	xor    eax,eax
c000cd92:	5a                   	pop    edx
c000cd93:	5b                   	pop    ebx
c000cd94:	5e                   	pop    esi
c000cd95:	c3                   	ret    

c000cd96 <LogicalDisk::unmount()>:
c000cd96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd9a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c000cda4:	c3                   	ret    
c000cda5:	90                   	nop

c000cda6 <LogicalDisk::eject()>:
c000cda6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cdaa:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000cdb0:	8b 10                	mov    edx,DWORD PTR [eax]
c000cdb2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000cdb6:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000cdb9:	90                   	nop

c000cdba <LogicalDisk::unassignDriveLetter()>:
c000cdba:	57                   	push   edi
c000cdbb:	56                   	push   esi
c000cdbc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cdc0:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000cdc7:	84 c9                	test   cl,cl
c000cdc9:	75 0f                	jne    c000cdda <LogicalDisk::unassignDriveLetter()+0x20>
c000cdcb:	c7 44 24 0c cc db 01 c0 	mov    DWORD PTR [esp+0xc],0xc001dbcc
c000cdd3:	5e                   	pop    esi
c000cdd4:	5f                   	pop    edi
c000cdd5:	e9 9d 34 00 00       	jmp    c0010277 <Krnl::panic(char const*)>
c000cdda:	83 e9 41             	sub    ecx,0x41
c000cddd:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000cde4:	b8 01 00 00 00       	mov    eax,0x1
c000cde9:	c7 04 8d e0 28 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffdd720],0x0
c000cdf4:	d3 e0                	shl    eax,cl
c000cdf6:	89 c7                	mov    edi,eax
c000cdf8:	f7 d0                	not    eax
c000cdfa:	c1 ff 1f             	sar    edi,0x1f
c000cdfd:	21 05 c0 28 02 c0    	and    DWORD PTR ds:0xc00228c0,eax
c000ce03:	89 fe                	mov    esi,edi
c000ce05:	f7 d6                	not    esi
c000ce07:	21 35 c4 28 02 c0    	and    DWORD PTR ds:0xc00228c4,esi
c000ce0d:	5e                   	pop    esi
c000ce0e:	5f                   	pop    edi
c000ce0f:	c3                   	ret    

c000ce10 <LogicalDisk::read(unsigned long long, int, void*)>:
c000ce10:	57                   	push   edi
c000ce11:	56                   	push   esi
c000ce12:	53                   	push   ebx
c000ce13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ce17:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ce1b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ce1f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ce23:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ce29:	77 41                	ja     c000ce6c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000ce2b:	99                   	cdq    
c000ce2c:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ce32:	01 c8                	add    eax,ecx
c000ce34:	11 da                	adc    edx,ebx
c000ce36:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000ce3c:	19 d7                	sbb    edi,edx
c000ce3e:	72 33                	jb     c000ce73 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000ce40:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ce46:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ce4c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000ce50:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000ce54:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000ce5a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000ce60:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce64:	5b                   	pop    ebx
c000ce65:	5e                   	pop    esi
c000ce66:	5f                   	pop    edi
c000ce67:	e9 32 0a 00 00       	jmp    c000d89e <VCache::read(unsigned long long, int, void*)>
c000ce6c:	b8 05 00 00 00       	mov    eax,0x5
c000ce71:	eb 05                	jmp    c000ce78 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000ce73:	b8 07 00 00 00       	mov    eax,0x7
c000ce78:	5b                   	pop    ebx
c000ce79:	5e                   	pop    esi
c000ce7a:	5f                   	pop    edi
c000ce7b:	c3                   	ret    

c000ce7c <LogicalDisk::write(unsigned long long, int, void*)>:
c000ce7c:	57                   	push   edi
c000ce7d:	56                   	push   esi
c000ce7e:	53                   	push   ebx
c000ce7f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000ce83:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ce87:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ce8b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ce8f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000ce95:	77 41                	ja     c000ced8 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000ce97:	99                   	cdq    
c000ce98:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000ce9e:	01 c8                	add    eax,ecx
c000cea0:	11 da                	adc    edx,ebx
c000cea2:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000cea8:	19 d7                	sbb    edi,edx
c000ceaa:	72 33                	jb     c000cedf <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000ceac:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000ceb2:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000ceb8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000cebc:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000cec0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000cec6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000cecc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ced0:	5b                   	pop    ebx
c000ced1:	5e                   	pop    esi
c000ced2:	5f                   	pop    edi
c000ced3:	e9 cc 08 00 00       	jmp    c000d7a4 <VCache::write(unsigned long long, int, void*)>
c000ced8:	b8 05 00 00 00       	mov    eax,0x5
c000cedd:	eb 05                	jmp    c000cee4 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000cedf:	b8 07 00 00 00       	mov    eax,0x7
c000cee4:	5b                   	pop    ebx
c000cee5:	5e                   	pop    esi
c000cee6:	5f                   	pop    edi
c000cee7:	c3                   	ret    

c000cee8 <Mouse::Mouse(char const*)>:
c000cee8:	83 ec 0c             	sub    esp,0xc
c000ceeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ceef:	83 ec 08             	sub    esp,0x8
c000cef2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cef6:	50                   	push   eax
c000cef7:	e8 04 ee ff ff       	call   c000bd00 <Device::Device(char const*)>
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	ba 20 dc 01 c0       	mov    edx,0xc001dc20
c000cf04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf08:	89 10                	mov    DWORD PTR [eax],edx
c000cf0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf0e:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000cf18:	90                   	nop
c000cf19:	83 c4 0c             	add    esp,0xc
c000cf1c:	c3                   	ret    
c000cf1d:	90                   	nop
c000cf1e:	66 90                	xchg   ax,ax

c000cf20 <Mouse::~Mouse()>:
c000cf20:	83 ec 0c             	sub    esp,0xc
c000cf23:	ba 20 dc 01 c0       	mov    edx,0xc001dc20
c000cf28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf2c:	89 10                	mov    DWORD PTR [eax],edx
c000cf2e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cf32:	83 ec 0c             	sub    esp,0xc
c000cf35:	50                   	push   eax
c000cf36:	e8 2f eb ff ff       	call   c000ba6a <Device::~Device()>
c000cf3b:	83 c4 10             	add    esp,0x10
c000cf3e:	90                   	nop
c000cf3f:	83 c4 0c             	add    esp,0xc
c000cf42:	c3                   	ret    
c000cf43:	90                   	nop

c000cf44 <Mouse::~Mouse()>:
c000cf44:	83 ec 0c             	sub    esp,0xc
c000cf47:	83 ec 0c             	sub    esp,0xc
c000cf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf4e:	e8 cd ff ff ff       	call   c000cf20 <Mouse::~Mouse()>
c000cf53:	83 c4 10             	add    esp,0x10
c000cf56:	83 ec 08             	sub    esp,0x8
c000cf59:	68 58 01 00 00       	push   0x158
c000cf5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf62:	e8 cb d6 ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000cf67:	83 c4 10             	add    esp,0x10
c000cf6a:	83 c4 0c             	add    esp,0xc
c000cf6d:	c3                   	ret    

c000cf6e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000cf6e:	55                   	push   ebp
c000cf6f:	57                   	push   edi
c000cf70:	56                   	push   esi
c000cf71:	53                   	push   ebx
c000cf72:	81 ec 28 01 00 00    	sub    esp,0x128
c000cf78:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000cf7f:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000cf86:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000cf8d:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000cf94:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf98:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf9c:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000cfa3:	e8 54 ee ff ff       	call   c000bdfc <Device::getName()>
c000cfa8:	5a                   	pop    edx
c000cfa9:	59                   	pop    ecx
c000cfaa:	50                   	push   eax
c000cfab:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000cfaf:	55                   	push   ebp
c000cfb0:	e8 6b 36 ff ff       	call   c0000620 <strcpy>
c000cfb5:	5b                   	pop    ebx
c000cfb6:	58                   	pop    eax
c000cfb7:	68 44 dc 01 c0       	push   0xc001dc44
c000cfbc:	55                   	push   ebp
c000cfbd:	e8 1e 38 ff ff       	call   c00007e0 <strcat>
c000cfc2:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c000cfc9:	e8 cb a9 ff ff       	call   c0007999 <malloc>
c000cfce:	83 c4 0c             	add    esp,0xc
c000cfd1:	89 c3                	mov    ebx,eax
c000cfd3:	57                   	push   edi
c000cfd4:	56                   	push   esi
c000cfd5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000cfdd:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000cfe4:	55                   	push   ebp
c000cfe5:	50                   	push   eax
c000cfe6:	e8 f7 fb ff ff       	call   c000cbe2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000cfeb:	83 c4 14             	add    esp,0x14
c000cfee:	53                   	push   ebx
c000cfef:	e8 a4 fc ff ff       	call   c000cc98 <LogicalDisk::assignDriveLetter()>
c000cff4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000cff7:	e8 52 fd ff ff       	call   c000cd4e <LogicalDisk::mount()>
c000cffc:	58                   	pop    eax
c000cffd:	5a                   	pop    edx
c000cffe:	53                   	push   ebx
c000cfff:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000d006:	e8 5d eb ff ff       	call   c000bb68 <Device::addChild(Device*)>
c000d00b:	81 c4 2c 01 00 00    	add    esp,0x12c
c000d011:	5b                   	pop    ebx
c000d012:	5e                   	pop    esi
c000d013:	5f                   	pop    edi
c000d014:	5d                   	pop    ebp
c000d015:	c3                   	ret    

c000d016 <createPartitionsForDisk(PhysicalDisk*)>:
c000d016:	55                   	push   ebp
c000d017:	57                   	push   edi
c000d018:	56                   	push   esi
c000d019:	53                   	push   ebx
c000d01a:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000d020:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000d027:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000d02d:	3d 00 02 00 00       	cmp    eax,0x200
c000d032:	74 27                	je     c000d05b <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000d034:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000d03a:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000d040:	83 ec 10             	sub    esp,0x10
c000d043:	0f a4 f7 0a          	shld   edi,esi,0xa
c000d047:	99                   	cdq    
c000d048:	c1 e6 0a             	shl    esi,0xa
c000d04b:	52                   	push   edx
c000d04c:	89 fd                	mov    ebp,edi
c000d04e:	50                   	push   eax
c000d04f:	55                   	push   ebp
c000d050:	56                   	push   esi
c000d051:	e8 4a eb 00 00       	call   c001bba0 <__udivdi3>
c000d056:	e9 b1 00 00 00       	jmp    c000d10c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d05b:	83 ec 0c             	sub    esp,0xc
c000d05e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d060:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000d064:	56                   	push   esi
c000d065:	6a 01                	push   0x1
c000d067:	6a 00                	push   0x0
c000d069:	6a 00                	push   0x0
c000d06b:	53                   	push   ebx
c000d06c:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000d06f:	83 c4 20             	add    esp,0x20
c000d072:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000d07a:	75 0a                	jne    c000d086 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000d07c:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000d084:	74 2c                	je     c000d0b2 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000d086:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d08c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d092:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d098:	83 ec 10             	sub    esp,0x10
c000d09b:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d09f:	89 f7                	mov    edi,esi
c000d0a1:	c1 e0 0a             	shl    eax,0xa
c000d0a4:	c1 ff 1f             	sar    edi,0x1f
c000d0a7:	57                   	push   edi
c000d0a8:	56                   	push   esi
c000d0a9:	52                   	push   edx
c000d0aa:	50                   	push   eax
c000d0ab:	e8 f0 ea 00 00       	call   c001bba0 <__udivdi3>
c000d0b0:	eb 5a                	jmp    c000d10c <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c000d0b2:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000d0b9:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c000d0c0:	83 e1 7f             	and    ecx,0x7f
c000d0c3:	83 e0 7f             	and    eax,0x7f
c000d0c6:	01 c1                	add    ecx,eax
c000d0c8:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000d0cf:	83 e0 7f             	and    eax,0x7f
c000d0d2:	01 c1                	add    ecx,eax
c000d0d4:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000d0db:	83 e0 7f             	and    eax,0x7f
c000d0de:	00 c1                	add    cl,al
c000d0e0:	74 41                	je     c000d123 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c000d0e2:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d0e8:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d0ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d0f4:	83 ec 10             	sub    esp,0x10
c000d0f7:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d0fb:	89 f7                	mov    edi,esi
c000d0fd:	c1 e0 0a             	shl    eax,0xa
c000d100:	c1 ff 1f             	sar    edi,0x1f
c000d103:	57                   	push   edi
c000d104:	56                   	push   esi
c000d105:	52                   	push   edx
c000d106:	50                   	push   eax
c000d107:	e8 94 ea 00 00       	call   c001bba0 <__udivdi3>
c000d10c:	83 c4 14             	add    esp,0x14
c000d10f:	52                   	push   edx
c000d110:	50                   	push   eax
c000d111:	6a 00                	push   0x0
c000d113:	6a 00                	push   0x0
c000d115:	53                   	push   ebx
c000d116:	e8 53 fe ff ff       	call   c000cf6e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d11b:	83 c4 20             	add    esp,0x20
c000d11e:	e9 79 01 00 00       	jmp    c000d29c <createPartitionsForDisk(PhysicalDisk*)+0x286>
c000d123:	89 f0                	mov    eax,esi
c000d125:	31 f6                	xor    esi,esi
c000d127:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000d12e:	75 02                	jne    c000d132 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c000d130:	89 f1                	mov    ecx,esi
c000d132:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000d139:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c000d140:	c1 e2 08             	shl    edx,0x8
c000d143:	c1 e7 10             	shl    edi,0x10
c000d146:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c000d14e:	09 fa                	or     edx,edi
c000d150:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c000d158:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c000d15f:	83 c0 10             	add    eax,0x10
c000d162:	09 fa                	or     edx,edi
c000d164:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c000d16b:	c1 e7 18             	shl    edi,0x18
c000d16e:	09 fa                	or     edx,edi
c000d170:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c000d177:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c000d17b:	c1 e7 10             	shl    edi,0x10
c000d17e:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000d185:	c1 e2 08             	shl    edx,0x8
c000d188:	09 fa                	or     edx,edi
c000d18a:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c000d191:	09 fa                	or     edx,edi
c000d193:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c000d19a:	c1 e7 18             	shl    edi,0x18
c000d19d:	09 fa                	or     edx,edi
c000d19f:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c000d1a3:	46                   	inc    esi
c000d1a4:	83 fe 04             	cmp    esi,0x4
c000d1a7:	0f 85 7a ff ff ff    	jne    c000d127 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c000d1ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1b1:	83 f0 01             	xor    eax,0x1
c000d1b4:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000d1b8:	75 57                	jne    c000d211 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d1ba:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d1be:	83 f0 01             	xor    eax,0x1
c000d1c1:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000d1c5:	75 4a                	jne    c000d211 <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000d1c7:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c000d1cb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000d1d3:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000d1db:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000d1e1:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000d1e7:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000d1ed:	0f a4 c2 0a          	shld   edx,eax,0xa
c000d1f1:	89 f7                	mov    edi,esi
c000d1f3:	c1 e0 0a             	shl    eax,0xa
c000d1f6:	c1 ff 1f             	sar    edi,0x1f
c000d1f9:	57                   	push   edi
c000d1fa:	56                   	push   esi
c000d1fb:	52                   	push   edx
c000d1fc:	50                   	push   eax
c000d1fd:	e8 9e e9 00 00       	call   c001bba0 <__udivdi3>
c000d202:	83 c4 10             	add    esp,0x10
c000d205:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d209:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d20d:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000d211:	84 c9                	test   cl,cl
c000d213:	74 53                	je     c000d268 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c000d215:	0f b6 c9             	movzx  ecx,cl
c000d218:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d21c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d220:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d224:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000d228:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d22c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d230:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c000d234:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c000d238:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d23c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d240:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d244:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d248:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c000d24c:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c000d250:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c000d254:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c000d258:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d25c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d260:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c000d264:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c000d268:	31 ed                	xor    ebp,ebp
c000d26a:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000d26e:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000d272:	89 f8                	mov    eax,edi
c000d274:	09 f0                	or     eax,esi
c000d276:	74 1e                	je     c000d296 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d278:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000d27c:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000d280:	89 d1                	mov    ecx,edx
c000d282:	09 c1                	or     ecx,eax
c000d284:	74 10                	je     c000d296 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c000d286:	83 ec 0c             	sub    esp,0xc
c000d289:	57                   	push   edi
c000d28a:	56                   	push   esi
c000d28b:	52                   	push   edx
c000d28c:	50                   	push   eax
c000d28d:	53                   	push   ebx
c000d28e:	e8 db fc ff ff       	call   c000cf6e <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000d293:	83 c4 20             	add    esp,0x20
c000d296:	45                   	inc    ebp
c000d297:	83 fd 04             	cmp    ebp,0x4
c000d29a:	75 ce                	jne    c000d26a <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000d29c:	81 c4 5c 02 00 00    	add    esp,0x25c
c000d2a2:	5b                   	pop    ebx
c000d2a3:	5e                   	pop    esi
c000d2a4:	5f                   	pop    edi
c000d2a5:	5d                   	pop    ebp
c000d2a6:	c3                   	ret    
c000d2a7:	90                   	nop

c000d2a8 <Serial::Serial(char const*)>:
c000d2a8:	83 ec 0c             	sub    esp,0xc
c000d2ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2af:	83 ec 08             	sub    esp,0x8
c000d2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d2b6:	50                   	push   eax
c000d2b7:	e8 44 ea ff ff       	call   c000bd00 <Device::Device(char const*)>
c000d2bc:	83 c4 10             	add    esp,0x10
c000d2bf:	ba 58 dc 01 c0       	mov    edx,0xc001dc58
c000d2c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2c8:	89 10                	mov    DWORD PTR [eax],edx
c000d2ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ce:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000d2d8:	90                   	nop
c000d2d9:	83 c4 0c             	add    esp,0xc
c000d2dc:	c3                   	ret    
c000d2dd:	90                   	nop
c000d2de:	66 90                	xchg   ax,ax

c000d2e0 <Serial::~Serial()>:
c000d2e0:	83 ec 0c             	sub    esp,0xc
c000d2e3:	ba 58 dc 01 c0       	mov    edx,0xc001dc58
c000d2e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2ec:	89 10                	mov    DWORD PTR [eax],edx
c000d2ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d2f2:	83 ec 0c             	sub    esp,0xc
c000d2f5:	50                   	push   eax
c000d2f6:	e8 6f e7 ff ff       	call   c000ba6a <Device::~Device()>
c000d2fb:	83 c4 10             	add    esp,0x10
c000d2fe:	90                   	nop
c000d2ff:	83 c4 0c             	add    esp,0xc
c000d302:	c3                   	ret    
c000d303:	90                   	nop

c000d304 <Serial::~Serial()>:
c000d304:	83 ec 0c             	sub    esp,0xc
c000d307:	83 ec 0c             	sub    esp,0xc
c000d30a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d30e:	e8 cd ff ff ff       	call   c000d2e0 <Serial::~Serial()>
c000d313:	83 c4 10             	add    esp,0x10
c000d316:	83 ec 08             	sub    esp,0x8
c000d319:	68 58 01 00 00       	push   0x158
c000d31e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d322:	e8 0b d3 ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000d327:	83 c4 10             	add    esp,0x10
c000d32a:	83 c4 0c             	add    esp,0xc
c000d32d:	c3                   	ret    
c000d32e:	66 90                	xchg   ax,ax

c000d330 <Timer::Timer(char const*)>:
c000d330:	83 ec 0c             	sub    esp,0xc
c000d333:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d337:	83 ec 08             	sub    esp,0x8
c000d33a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d33e:	50                   	push   eax
c000d33f:	e8 bc e9 ff ff       	call   c000bd00 <Device::Device(char const*)>
c000d344:	83 c4 10             	add    esp,0x10
c000d347:	ba 9c dc 01 c0       	mov    edx,0xc001dc9c
c000d34c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d350:	89 10                	mov    DWORD PTR [eax],edx
c000d352:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d356:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c000d360:	90                   	nop
c000d361:	83 c4 0c             	add    esp,0xc
c000d364:	c3                   	ret    
c000d365:	90                   	nop
c000d366:	66 90                	xchg   ax,ax

c000d368 <Timer::~Timer()>:
c000d368:	83 ec 0c             	sub    esp,0xc
c000d36b:	ba 9c dc 01 c0       	mov    edx,0xc001dc9c
c000d370:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d374:	89 10                	mov    DWORD PTR [eax],edx
c000d376:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d37a:	83 ec 0c             	sub    esp,0xc
c000d37d:	50                   	push   eax
c000d37e:	e8 e7 e6 ff ff       	call   c000ba6a <Device::~Device()>
c000d383:	83 c4 10             	add    esp,0x10
c000d386:	90                   	nop
c000d387:	83 c4 0c             	add    esp,0xc
c000d38a:	c3                   	ret    
c000d38b:	90                   	nop

c000d38c <Timer::~Timer()>:
c000d38c:	83 ec 0c             	sub    esp,0xc
c000d38f:	83 ec 0c             	sub    esp,0xc
c000d392:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d396:	e8 cd ff ff ff       	call   c000d368 <Timer::~Timer()>
c000d39b:	83 c4 10             	add    esp,0x10
c000d39e:	83 ec 08             	sub    esp,0x8
c000d3a1:	68 5c 01 00 00       	push   0x15c
c000d3a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3aa:	e8 83 d2 ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000d3af:	83 c4 10             	add    esp,0x10
c000d3b2:	83 c4 0c             	add    esp,0xc
c000d3b5:	c3                   	ret    

c000d3b6 <Timer::read()>:
c000d3b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d3ba:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000d3c0:	c3                   	ret    

c000d3c1 <setupTimer(int)>:
c000d3c1:	53                   	push   ebx
c000d3c2:	83 ec 14             	sub    esp,0x14
c000d3c5:	68 5c 01 00 00       	push   0x15c
c000d3ca:	e8 ca a5 ff ff       	call   c0007999 <malloc>
c000d3cf:	89 04 24             	mov    DWORD PTR [esp],eax
c000d3d2:	89 c3                	mov    ebx,eax
c000d3d4:	e8 37 e1 00 00       	call   c001b510 <PIT::PIT()>
c000d3d9:	58                   	pop    eax
c000d3da:	5a                   	pop    edx
c000d3db:	53                   	push   ebx
c000d3dc:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c000d3e2:	e8 81 e7 ff ff       	call   c000bb68 <Device::addChild(Device*)>
c000d3e7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000d3e9:	6a 00                	push   0x0
c000d3eb:	6a 00                	push   0x0
c000d3ed:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d3f1:	53                   	push   ebx
c000d3f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000d3f5:	89 d8                	mov    eax,ebx
c000d3f7:	83 c4 28             	add    esp,0x28
c000d3fa:	5b                   	pop    ebx
c000d3fb:	c3                   	ret    

c000d3fc <timerHandler(unsigned int)>:
c000d3fc:	56                   	push   esi
c000d3fd:	53                   	push   ebx
c000d3fe:	51                   	push   ecx
c000d3ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d403:	01 05 4c 29 02 c0    	add    DWORD PTR ds:0xc002294c,eax
c000d409:	80 3d 89 03 02 c0 00 	cmp    BYTE PTR ds:0xc0020389,0x0
c000d410:	0f 84 4a 01 00 00    	je     c000d560 <timerHandler(unsigned int)+0x164>
c000d416:	fa                   	cli    
c000d417:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c000d41d:	83 ec 0c             	sub    esp,0xc
c000d420:	ff 05 44 38 02 c0    	inc    DWORD PTR ds:0xc0023844
c000d426:	68 58 38 02 c0       	push   0xc0023858
c000d42b:	e8 40 ed 00 00       	call   c001c170 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d430:	83 c4 10             	add    esp,0x10
c000d433:	84 c0                	test   al,al
c000d435:	0f 85 a1 00 00 00    	jne    c000d4dc <timerHandler(unsigned int)+0xe0>
c000d43b:	83 ec 0c             	sub    esp,0xc
c000d43e:	68 58 38 02 c0       	push   0xc0023858
c000d443:	e8 44 ed 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d448:	83 c4 10             	add    esp,0x10
c000d44b:	89 c6                	mov    esi,eax
c000d44d:	8d 76 00             	lea    esi,[esi+0x0]
c000d450:	83 ec 0c             	sub    esp,0xc
c000d453:	68 58 38 02 c0       	push   0xc0023858
c000d458:	e8 2f ed 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d45d:	c7 04 24 58 38 02 c0 	mov    DWORD PTR [esp],0xc0023858
c000d464:	89 c3                	mov    ebx,eax
c000d466:	e8 29 ed 00 00       	call   c001c194 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000d46b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000d46e:	83 c4 10             	add    esp,0x10
c000d471:	3b 05 4c 29 02 c0    	cmp    eax,DWORD PTR ds:0xc002294c
c000d477:	77 23                	ja     c000d49c <timerHandler(unsigned int)+0xa0>
c000d479:	83 ec 0c             	sub    esp,0xc
c000d47c:	53                   	push   ebx
c000d47d:	e8 0e 66 00 00       	call   c0013a90 <unblockTask(ThreadControlBlock*)>
c000d482:	83 c4 10             	add    esp,0x10
c000d485:	39 de                	cmp    esi,ebx
c000d487:	75 27                	jne    c000d4b0 <timerHandler(unsigned int)+0xb4>
c000d489:	83 ec 0c             	sub    esp,0xc
c000d48c:	68 58 38 02 c0       	push   0xc0023858
c000d491:	e8 f6 ec 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d496:	89 c6                	mov    esi,eax
c000d498:	eb 12                	jmp    c000d4ac <timerHandler(unsigned int)+0xb0>
c000d49a:	66 90                	xchg   ax,ax
c000d49c:	52                   	push   edx
c000d49d:	52                   	push   edx
c000d49e:	53                   	push   ebx
c000d49f:	68 58 38 02 c0       	push   0xc0023858
c000d4a4:	e8 a3 ed 00 00       	call   c001c24c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000d4a9:	8d 76 00             	lea    esi,[esi+0x0]
c000d4ac:	83 c4 10             	add    esp,0x10
c000d4af:	90                   	nop
c000d4b0:	83 ec 0c             	sub    esp,0xc
c000d4b3:	68 58 38 02 c0       	push   0xc0023858
c000d4b8:	e8 b3 ec 00 00       	call   c001c170 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000d4bd:	83 c4 10             	add    esp,0x10
c000d4c0:	84 c0                	test   al,al
c000d4c2:	75 18                	jne    c000d4dc <timerHandler(unsigned int)+0xe0>
c000d4c4:	83 ec 0c             	sub    esp,0xc
c000d4c7:	68 58 38 02 c0       	push   0xc0023858
c000d4cc:	e8 bb ec 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000d4d1:	83 c4 10             	add    esp,0x10
c000d4d4:	39 f0                	cmp    eax,esi
c000d4d6:	0f 85 74 ff ff ff    	jne    c000d450 <timerHandler(unsigned int)+0x54>
c000d4dc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000d4e1:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000d4e5:	74 41                	je     c000d528 <timerHandler(unsigned int)+0x12c>
c000d4e7:	80 3d 88 03 02 c0 00 	cmp    BYTE PTR ds:0xc0020388,0x0
c000d4ee:	74 38                	je     c000d528 <timerHandler(unsigned int)+0x12c>
c000d4f0:	fa                   	cli    
c000d4f1:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c000d4f7:	a1 4c 29 02 c0       	mov    eax,ds:0xc002294c
c000d4fc:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d502:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000d505:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000d50b:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000d50e:	72 08                	jb     c000d518 <timerHandler(unsigned int)+0x11c>
c000d510:	e8 b7 60 00 00       	call   c00135cc <schedule()>
c000d515:	8d 76 00             	lea    esi,[esi+0x0]
c000d518:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000d51d:	48                   	dec    eax
c000d51e:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000d523:	75 03                	jne    c000d528 <timerHandler(unsigned int)+0x12c>
c000d525:	fb                   	sti    
c000d526:	66 90                	xchg   ax,ax
c000d528:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c000d52d:	48                   	dec    eax
c000d52e:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c000d533:	75 1b                	jne    c000d550 <timerHandler(unsigned int)+0x154>
c000d535:	83 3d 40 38 02 c0 00 	cmp    DWORD PTR ds:0xc0023840,0x0
c000d53c:	74 12                	je     c000d550 <timerHandler(unsigned int)+0x154>
c000d53e:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c000d548:	e8 7f 60 00 00       	call   c00135cc <schedule()>
c000d54d:	8d 76 00             	lea    esi,[esi+0x0]
c000d550:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c000d555:	48                   	dec    eax
c000d556:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c000d55b:	75 03                	jne    c000d560 <timerHandler(unsigned int)+0x164>
c000d55d:	fb                   	sti    
c000d55e:	66 90                	xchg   ax,ax
c000d560:	58                   	pop    eax
c000d561:	5b                   	pop    ebx
c000d562:	5e                   	pop    esi
c000d563:	c3                   	ret    

c000d564 <VCache::VCache(PhysicalDisk*)>:
c000d564:	53                   	push   ebx
c000d565:	83 ec 18             	sub    esp,0x18
c000d568:	ba cc dc 01 c0       	mov    edx,0xc001dccc
c000d56d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d571:	89 10                	mov    DWORD PTR [eax],edx
c000d573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d577:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000d57e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d582:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000d589:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d58d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000d594:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000d59b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d59f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000d5a6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000d5ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5b1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000d5b8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5bc:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d5c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5c4:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000d5cb:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000d5d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5d6:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d5da:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5de:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000d5e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5e6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d5ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d5ee:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d5f5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000d5fd:	83 ec 0c             	sub    esp,0xc
c000d600:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000d604:	e8 90 a3 ff ff       	call   c0007999 <malloc>
c000d609:	83 c4 10             	add    esp,0x10
c000d60c:	89 c3                	mov    ebx,eax
c000d60e:	83 ec 0c             	sub    esp,0xc
c000d611:	53                   	push   ebx
c000d612:	e8 81 5d 00 00       	call   c0013398 <Mutex::Mutex()>
c000d617:	83 c4 10             	add    esp,0x10
c000d61a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d61e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000d621:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d625:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000d629:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000d62c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d630:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000d637:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d63b:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000d641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d645:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000d648:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d64c:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000d652:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000d658:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d65c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000d65f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000d662:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d666:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000d66a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d66e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d674:	05 00 01 00 00       	add    eax,0x100
c000d679:	c1 e0 04             	shl    eax,0x4
c000d67c:	83 ec 0c             	sub    esp,0xc
c000d67f:	50                   	push   eax
c000d680:	e8 14 a3 ff ff       	call   c0007999 <malloc>
c000d685:	83 c4 10             	add    esp,0x10
c000d688:	89 c2                	mov    edx,eax
c000d68a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d68e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000d691:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d695:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000d69c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6a0:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000d6a4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000d6a8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000d6ae:	c1 e0 06             	shl    eax,0x6
c000d6b1:	83 ec 0c             	sub    esp,0xc
c000d6b4:	50                   	push   eax
c000d6b5:	e8 df a2 ff ff       	call   c0007999 <malloc>
c000d6ba:	83 c4 10             	add    esp,0x10
c000d6bd:	89 c2                	mov    edx,eax
c000d6bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d6c3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000d6c6:	90                   	nop
c000d6c7:	83 c4 18             	add    esp,0x18
c000d6ca:	5b                   	pop    ebx
c000d6cb:	c3                   	ret    

c000d6cc <VCache::invalidateReadBuffer()>:
c000d6cc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d6d0:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000d6d6:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000d6da:	c3                   	ret    
c000d6db:	90                   	nop

c000d6dc <VCache::writeWriteBuffer()>:
c000d6dc:	53                   	push   ebx
c000d6dd:	83 ec 08             	sub    esp,0x8
c000d6e0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000d6e4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d6e8:	74 1e                	je     c000d708 <VCache::writeWriteBuffer()+0x2c>
c000d6ea:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d6ed:	83 ec 0c             	sub    esp,0xc
c000d6f0:	8b 10                	mov    edx,DWORD PTR [eax]
c000d6f2:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000d6f5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000d6f8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000d6fb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d6fe:	50                   	push   eax
c000d6ff:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d702:	83 c4 20             	add    esp,0x20
c000d705:	8d 76 00             	lea    esi,[esi+0x0]
c000d708:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000d70f:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000d716:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000d71a:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000d721:	83 c4 08             	add    esp,0x8
c000d724:	5b                   	pop    ebx
c000d725:	c3                   	ret    
c000d726:	66 90                	xchg   ax,ax

c000d728 <VCache::~VCache()>:
c000d728:	83 ec 0c             	sub    esp,0xc
c000d72b:	ba cc dc 01 c0       	mov    edx,0xc001dccc
c000d730:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d734:	89 10                	mov    DWORD PTR [eax],edx
c000d736:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d73a:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000d73d:	84 c0                	test   al,al
c000d73f:	74 0f                	je     c000d750 <VCache::~VCache()+0x28>
c000d741:	83 ec 0c             	sub    esp,0xc
c000d744:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d748:	e8 8f ff ff ff       	call   c000d6dc <VCache::writeWriteBuffer()>
c000d74d:	83 c4 10             	add    esp,0x10
c000d750:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d754:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000d757:	83 ec 0c             	sub    esp,0xc
c000d75a:	50                   	push   eax
c000d75b:	e8 49 a2 ff ff       	call   c00079a9 <free>
c000d760:	83 c4 10             	add    esp,0x10
c000d763:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d767:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000d76a:	83 ec 0c             	sub    esp,0xc
c000d76d:	50                   	push   eax
c000d76e:	e8 36 a2 ff ff       	call   c00079a9 <free>
c000d773:	83 c4 10             	add    esp,0x10
c000d776:	90                   	nop
c000d777:	83 c4 0c             	add    esp,0xc
c000d77a:	c3                   	ret    
c000d77b:	90                   	nop

c000d77c <VCache::~VCache()>:
c000d77c:	83 ec 0c             	sub    esp,0xc
c000d77f:	83 ec 0c             	sub    esp,0xc
c000d782:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d786:	e8 9d ff ff ff       	call   c000d728 <VCache::~VCache()>
c000d78b:	83 c4 10             	add    esp,0x10
c000d78e:	83 ec 08             	sub    esp,0x8
c000d791:	6a 44                	push   0x44
c000d793:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d797:	e8 96 ce ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000d79c:	83 c4 10             	add    esp,0x10
c000d79f:	83 c4 0c             	add    esp,0xc
c000d7a2:	c3                   	ret    
c000d7a3:	90                   	nop

c000d7a4 <VCache::write(unsigned long long, int, void*)>:
c000d7a4:	55                   	push   ebp
c000d7a5:	31 c0                	xor    eax,eax
c000d7a7:	57                   	push   edi
c000d7a8:	56                   	push   esi
c000d7a9:	53                   	push   ebx
c000d7aa:	83 ec 0c             	sub    esp,0xc
c000d7ad:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000d7b1:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000d7b5:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000d7b9:	8d 76 00             	lea    esi,[esi+0x0]
c000d7bc:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c000d7c0:	7d 1a                	jge    c000d7dc <VCache::write(unsigned long long, int, void*)+0x38>
c000d7c2:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d7c5:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d7cb:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000d7cf:	0f af c8             	imul   ecx,eax
c000d7d2:	01 ca                	add    edx,ecx
c000d7d4:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d7d6:	40                   	inc    eax
c000d7d7:	eb e3                	jmp    c000d7bc <VCache::write(unsigned long long, int, void*)+0x18>
c000d7d9:	8d 76 00             	lea    esi,[esi+0x0]
c000d7dc:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d7e0:	74 0a                	je     c000d7ec <VCache::write(unsigned long long, int, void*)+0x48>
c000d7e2:	53                   	push   ebx
c000d7e3:	e8 e4 fe ff ff       	call   c000d6cc <VCache::invalidateReadBuffer()>
c000d7e8:	58                   	pop    eax
c000d7e9:	8d 76 00             	lea    esi,[esi+0x0]
c000d7ec:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d7f0:	74 5e                	je     c000d850 <VCache::write(unsigned long long, int, void*)+0xac>
c000d7f2:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c000d7f5:	89 e8                	mov    eax,ebp
c000d7f7:	99                   	cdq    
c000d7f8:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000d7fb:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000d7fe:	89 c1                	mov    ecx,eax
c000d800:	89 d0                	mov    eax,edx
c000d802:	31 f1                	xor    ecx,esi
c000d804:	31 f8                	xor    eax,edi
c000d806:	09 c1                	or     ecx,eax
c000d808:	75 3a                	jne    c000d844 <VCache::write(unsigned long long, int, void*)+0xa0>
c000d80a:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c000d80f:	75 33                	jne    c000d844 <VCache::write(unsigned long long, int, void*)+0xa0>
c000d811:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d814:	89 ef                	mov    edi,ebp
c000d816:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d81c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d820:	0f af f9             	imul   edi,ecx
c000d823:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c000d826:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d828:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000d82b:	40                   	inc    eax
c000d82c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000d82f:	83 f8 40             	cmp    eax,0x40
c000d832:	75 60                	jne    c000d894 <VCache::write(unsigned long long, int, void*)+0xf0>
c000d834:	83 ec 0c             	sub    esp,0xc
c000d837:	53                   	push   ebx
c000d838:	e8 9f fe ff ff       	call   c000d6dc <VCache::writeWriteBuffer()>
c000d83d:	83 c4 10             	add    esp,0x10
c000d840:	eb 52                	jmp    c000d894 <VCache::write(unsigned long long, int, void*)+0xf0>
c000d842:	66 90                	xchg   ax,ax
c000d844:	83 ec 0c             	sub    esp,0xc
c000d847:	53                   	push   ebx
c000d848:	e8 8f fe ff ff       	call   c000d6dc <VCache::writeWriteBuffer()>
c000d84d:	83 c4 10             	add    esp,0x10
c000d850:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d853:	83 7c 24 2c 3f       	cmp    DWORD PTR [esp+0x2c],0x3f
c000d858:	7f 22                	jg     c000d87c <VCache::write(unsigned long long, int, void*)+0xd8>
c000d85a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c000d85d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c000d860:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000d864:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000d868:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000d86b:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000d86e:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d874:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d878:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d87a:	eb 18                	jmp    c000d894 <VCache::write(unsigned long long, int, void*)+0xf0>
c000d87c:	83 ec 0c             	sub    esp,0xc
c000d87f:	8b 10                	mov    edx,DWORD PTR [eax]
c000d881:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d885:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d889:	57                   	push   edi
c000d88a:	56                   	push   esi
c000d88b:	50                   	push   eax
c000d88c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000d88f:	83 c4 20             	add    esp,0x20
c000d892:	66 90                	xchg   ax,ax
c000d894:	83 c4 0c             	add    esp,0xc
c000d897:	31 c0                	xor    eax,eax
c000d899:	5b                   	pop    ebx
c000d89a:	5e                   	pop    esi
c000d89b:	5f                   	pop    edi
c000d89c:	5d                   	pop    ebp
c000d89d:	c3                   	ret    

c000d89e <VCache::read(unsigned long long, int, void*)>:
c000d89e:	55                   	push   ebp
c000d89f:	31 c0                	xor    eax,eax
c000d8a1:	57                   	push   edi
c000d8a2:	56                   	push   esi
c000d8a3:	53                   	push   ebx
c000d8a4:	83 ec 1c             	sub    esp,0x1c
c000d8a7:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000d8ab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c000d8af:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000d8b3:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000d8b7:	90                   	nop
c000d8b8:	39 e8                	cmp    eax,ebp
c000d8ba:	7d 18                	jge    c000d8d4 <VCache::read(unsigned long long, int, void*)+0x36>
c000d8bc:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c000d8bf:	8b 8a 5c 01 00 00    	mov    ecx,DWORD PTR [edx+0x15c]
c000d8c5:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000d8c9:	0f af c8             	imul   ecx,eax
c000d8cc:	01 ca                	add    edx,ecx
c000d8ce:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000d8d0:	40                   	inc    eax
c000d8d1:	eb e5                	jmp    c000d8b8 <VCache::read(unsigned long long, int, void*)+0x1a>
c000d8d3:	90                   	nop
c000d8d4:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000d8d8:	74 0e                	je     c000d8e8 <VCache::read(unsigned long long, int, void*)+0x4a>
c000d8da:	83 ec 0c             	sub    esp,0xc
c000d8dd:	53                   	push   ebx
c000d8de:	e8 f9 fd ff ff       	call   c000d6dc <VCache::writeWriteBuffer()>
c000d8e3:	83 c4 10             	add    esp,0x10
c000d8e6:	66 90                	xchg   ax,ax
c000d8e8:	83 fd 01             	cmp    ebp,0x1
c000d8eb:	0f 85 87 00 00 00    	jne    c000d978 <VCache::read(unsigned long long, int, void*)+0xda>
c000d8f1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d8f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d8f8:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000d8ff:	75 77                	jne    c000d978 <VCache::read(unsigned long long, int, void*)+0xda>
c000d901:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c000d904:	89 e9                	mov    ecx,ebp
c000d906:	f7 d9                	neg    ecx
c000d908:	89 c8                	mov    eax,ecx
c000d90a:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000d90e:	c1 f8 1f             	sar    eax,0x1f
c000d911:	21 f1                	and    ecx,esi
c000d913:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d917:	89 c8                	mov    eax,ecx
c000d919:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000d91d:	21 f9                	and    ecx,edi
c000d91f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000d923:	89 ca                	mov    edx,ecx
c000d925:	74 0d                	je     c000d934 <VCache::read(unsigned long long, int, void*)+0x96>
c000d927:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c000d92a:	75 08                	jne    c000d934 <VCache::read(unsigned long long, int, void*)+0x96>
c000d92c:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c000d92f:	74 27                	je     c000d958 <VCache::read(unsigned long long, int, void*)+0xba>
c000d931:	8d 76 00             	lea    esi,[esi+0x0]
c000d934:	83 ec 0c             	sub    esp,0xc
c000d937:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c000d93b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d93f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000d942:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d945:	8b 09                	mov    ecx,DWORD PTR [ecx]
c000d947:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000d94a:	55                   	push   ebp
c000d94b:	52                   	push   edx
c000d94c:	50                   	push   eax
c000d94d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000d951:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000d954:	83 c4 20             	add    esp,0x20
c000d957:	90                   	nop
c000d958:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d95b:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d95f:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000d965:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000d968:	48                   	dec    eax
c000d969:	21 c6                	and    esi,eax
c000d96b:	0f af f1             	imul   esi,ecx
c000d96e:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c000d971:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000d973:	eb 23                	jmp    c000d998 <VCache::read(unsigned long long, int, void*)+0xfa>
c000d975:	8d 76 00             	lea    esi,[esi+0x0]
c000d978:	83 ec 0c             	sub    esp,0xc
c000d97b:	53                   	push   ebx
c000d97c:	e8 4b fd ff ff       	call   c000d6cc <VCache::invalidateReadBuffer()>
c000d981:	5a                   	pop    edx
c000d982:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000d985:	8b 10                	mov    edx,DWORD PTR [eax]
c000d987:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000d98b:	55                   	push   ebp
c000d98c:	57                   	push   edi
c000d98d:	56                   	push   esi
c000d98e:	50                   	push   eax
c000d98f:	ff 52 28             	call   DWORD PTR [edx+0x28]
c000d992:	83 c4 20             	add    esp,0x20
c000d995:	8d 76 00             	lea    esi,[esi+0x0]
c000d998:	83 c4 1c             	add    esp,0x1c
c000d99b:	31 c0                	xor    eax,eax
c000d99d:	5b                   	pop    ebx
c000d99e:	5e                   	pop    esi
c000d99f:	5f                   	pop    edi
c000d9a0:	5d                   	pop    ebp
c000d9a1:	c3                   	ret    

c000d9a2 <Video::putrect(int, int, int, int, unsigned int)>:
c000d9a2:	55                   	push   ebp
c000d9a3:	57                   	push   edi
c000d9a4:	56                   	push   esi
c000d9a5:	53                   	push   ebx
c000d9a6:	83 ec 1c             	sub    esp,0x1c
c000d9a9:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000d9ad:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d9b1:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000d9b5:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000d9b9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000d9bd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d9c1:	01 df                	add    edi,ebx
c000d9c3:	39 fb                	cmp    ebx,edi
c000d9c5:	7d 1f                	jge    c000d9e6 <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000d9c7:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000d9cb:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000d9cf:	7d 12                	jge    c000d9e3 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000d9d1:	8b 16                	mov    edx,DWORD PTR [esi]
c000d9d3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000d9d7:	53                   	push   ebx
c000d9d8:	55                   	push   ebp
c000d9d9:	45                   	inc    ebp
c000d9da:	56                   	push   esi
c000d9db:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000d9de:	83 c4 10             	add    esp,0x10
c000d9e1:	eb e8                	jmp    c000d9cb <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000d9e3:	43                   	inc    ebx
c000d9e4:	eb dd                	jmp    c000d9c3 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000d9e6:	83 c4 1c             	add    esp,0x1c
c000d9e9:	5b                   	pop    ebx
c000d9ea:	5e                   	pop    esi
c000d9eb:	5f                   	pop    edi
c000d9ec:	5d                   	pop    ebp
c000d9ed:	c3                   	ret    

c000d9ee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000d9ee:	55                   	push   ebp
c000d9ef:	57                   	push   edi
c000d9f0:	31 ff                	xor    edi,edi
c000d9f2:	56                   	push   esi
c000d9f3:	53                   	push   ebx
c000d9f4:	83 ec 1c             	sub    esp,0x1c
c000d9f7:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000d9fb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000d9ff:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000da06:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000da0b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000da0f:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000da13:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000da17:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000da1a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da1e:	01 f9                	add    ecx,edi
c000da20:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000da24:	7d 2f                	jge    c000da55 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000da26:	31 f6                	xor    esi,esi
c000da28:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000da2c:	01 f2                	add    edx,esi
c000da2e:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000da32:	7d 1a                	jge    c000da4e <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000da34:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000da37:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000da3a:	46                   	inc    esi
c000da3b:	51                   	push   ecx
c000da3c:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da40:	52                   	push   edx
c000da41:	55                   	push   ebp
c000da42:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000da45:	83 c4 10             	add    esp,0x10
c000da48:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000da4c:	eb da                	jmp    c000da28 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000da4e:	47                   	inc    edi
c000da4f:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000da53:	eb c5                	jmp    c000da1a <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000da55:	83 c4 1c             	add    esp,0x1c
c000da58:	5b                   	pop    ebx
c000da59:	5e                   	pop    esi
c000da5a:	5f                   	pop    edi
c000da5b:	5d                   	pop    ebp
c000da5c:	c3                   	ret    
c000da5d:	90                   	nop

c000da5e <Video::blit(unsigned int*, int, int, int, int)>:
c000da5e:	55                   	push   ebp
c000da5f:	57                   	push   edi
c000da60:	56                   	push   esi
c000da61:	53                   	push   ebx
c000da62:	83 ec 1c             	sub    esp,0x1c
c000da65:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000da69:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000da6d:	85 c0                	test   eax,eax
c000da6f:	79 02                	jns    c000da73 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000da71:	31 c0                	xor    eax,eax
c000da73:	c1 e0 02             	shl    eax,0x2
c000da76:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000da7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000da7e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000da82:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000da86:	39 d8                	cmp    eax,ebx
c000da88:	7e 49                	jle    c000dad3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da8a:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000da90:	7c 41                	jl     c000dad3 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000da92:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000da96:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000da9a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000da9e:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000daa2:	39 f9                	cmp    ecx,edi
c000daa4:	7e 22                	jle    c000dac8 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000daa6:	83 c5 04             	add    ebp,0x4
c000daa9:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000daaf:	7c 14                	jl     c000dac5 <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000dab1:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dab3:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000dab6:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000daba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000dabe:	56                   	push   esi
c000dabf:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000dac2:	83 c4 10             	add    esp,0x10
c000dac5:	47                   	inc    edi
c000dac6:	eb d2                	jmp    c000da9a <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000dac8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dacc:	43                   	inc    ebx
c000dacd:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000dad1:	eb ab                	jmp    c000da7e <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000dad3:	83 c4 1c             	add    esp,0x1c
c000dad6:	5b                   	pop    ebx
c000dad7:	5e                   	pop    esi
c000dad8:	5f                   	pop    edi
c000dad9:	5d                   	pop    ebp
c000dada:	c3                   	ret    
c000dadb:	90                   	nop

c000dadc <Video::clearScreen(unsigned int)>:
c000dadc:	57                   	push   edi
c000dadd:	56                   	push   esi
c000dade:	53                   	push   ebx
c000dadf:	31 db                	xor    ebx,ebx
c000dae1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000dae5:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000daeb:	7e 1f                	jle    c000db0c <Video::clearScreen(unsigned int)+0x30>
c000daed:	31 ff                	xor    edi,edi
c000daef:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000daf5:	7e 12                	jle    c000db09 <Video::clearScreen(unsigned int)+0x2d>
c000daf7:	8b 06                	mov    eax,DWORD PTR [esi]
c000daf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dafd:	53                   	push   ebx
c000dafe:	57                   	push   edi
c000daff:	47                   	inc    edi
c000db00:	56                   	push   esi
c000db01:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000db04:	83 c4 10             	add    esp,0x10
c000db07:	eb e6                	jmp    c000daef <Video::clearScreen(unsigned int)+0x13>
c000db09:	43                   	inc    ebx
c000db0a:	eb d9                	jmp    c000dae5 <Video::clearScreen(unsigned int)+0x9>
c000db0c:	5b                   	pop    ebx
c000db0d:	5e                   	pop    esi
c000db0e:	5f                   	pop    edi
c000db0f:	c3                   	ret    

c000db10 <Video::putpixel(int, int, unsigned int)>:
c000db10:	c7 44 24 04 d4 dc 01 c0 	mov    DWORD PTR [esp+0x4],0xc001dcd4
c000db18:	e9 5a 27 00 00       	jmp    c0010277 <Krnl::panic(char const*)>
c000db1d:	90                   	nop

c000db1e <Video::Video(char const*)>:
c000db1e:	83 ec 0c             	sub    esp,0xc
c000db21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db25:	83 ec 08             	sub    esp,0x8
c000db28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db2c:	50                   	push   eax
c000db2d:	e8 ce e1 ff ff       	call   c000bd00 <Device::Device(char const*)>
c000db32:	83 c4 10             	add    esp,0x10
c000db35:	ba 44 dd 01 c0       	mov    edx,0xc001dd44
c000db3a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db3e:	89 10                	mov    DWORD PTR [eax],edx
c000db40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db44:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000db4e:	90                   	nop
c000db4f:	83 c4 0c             	add    esp,0xc
c000db52:	c3                   	ret    
c000db53:	90                   	nop

c000db54 <Video::~Video()>:
c000db54:	83 ec 0c             	sub    esp,0xc
c000db57:	ba 44 dd 01 c0       	mov    edx,0xc001dd44
c000db5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db60:	89 10                	mov    DWORD PTR [eax],edx
c000db62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db66:	83 ec 0c             	sub    esp,0xc
c000db69:	50                   	push   eax
c000db6a:	e8 fb de ff ff       	call   c000ba6a <Device::~Device()>
c000db6f:	83 c4 10             	add    esp,0x10
c000db72:	90                   	nop
c000db73:	83 c4 0c             	add    esp,0xc
c000db76:	c3                   	ret    
c000db77:	90                   	nop

c000db78 <Video::~Video()>:
c000db78:	83 ec 0c             	sub    esp,0xc
c000db7b:	83 ec 0c             	sub    esp,0xc
c000db7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db82:	e8 cd ff ff ff       	call   c000db54 <Video::~Video()>
c000db87:	83 c4 10             	add    esp,0x10
c000db8a:	83 ec 08             	sub    esp,0x8
c000db8d:	68 64 01 00 00       	push   0x164
c000db92:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db96:	e8 97 ca ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c000db9b:	83 c4 10             	add    esp,0x10
c000db9e:	83 c4 0c             	add    esp,0xc
c000dba1:	c3                   	ret    

c000dba2 <Video::isMonochrome()>:
c000dba2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dba6:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000dbac:	c3                   	ret    
c000dbad:	90                   	nop

c000dbae <Video::getWidth()>:
c000dbae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbb2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dbb8:	c3                   	ret    
c000dbb9:	90                   	nop

c000dbba <Video::getHeight()>:
c000dbba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000dbbe:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000dbc4:	c3                   	ret    
c000dbc5:	90                   	nop

c000dbc6 <Video::drawCursor(int, int, unsigned char*, int)>:
c000dbc6:	55                   	push   ebp
c000dbc7:	57                   	push   edi
c000dbc8:	56                   	push   esi
c000dbc9:	53                   	push   ebx
c000dbca:	83 ec 2c             	sub    esp,0x2c
c000dbcd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dbd1:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000dbd5:	83 f8 01             	cmp    eax,0x1
c000dbd8:	19 c9                	sbb    ecx,ecx
c000dbda:	31 db                	xor    ebx,ebx
c000dbdc:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000dbe0:	89 cd                	mov    ebp,ecx
c000dbe2:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000dbea:	f7 d5                	not    ebp
c000dbec:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000dbf2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000dbf6:	01 d8                	add    eax,ebx
c000dbf8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dbfc:	56                   	push   esi
c000dbfd:	e8 b8 ff ff ff       	call   c000dbba <Video::getHeight()>
c000dc02:	59                   	pop    ecx
c000dc03:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000dc07:	7e 70                	jle    c000dc79 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c000dc09:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dc0d:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000dc11:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000dc14:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc18:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000dc1c:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000dc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000dc27:	89 f8                	mov    eax,edi
c000dc29:	83 c0 20             	add    eax,0x20
c000dc2c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000dc30:	56                   	push   esi
c000dc31:	e8 78 ff ff ff       	call   c000dbae <Video::getWidth()>
c000dc36:	5a                   	pop    edx
c000dc37:	39 c7                	cmp    edi,eax
c000dc39:	7d 34                	jge    c000dc6f <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c000dc3b:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000dc40:	74 05                	je     c000dc47 <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c000dc42:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc44:	55                   	push   ebp
c000dc45:	eb 0d                	jmp    c000dc54 <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c000dc47:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000dc4c:	74 12                	je     c000dc60 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c000dc4e:	8b 06                	mov    eax,DWORD PTR [esi]
c000dc50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc54:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000dc58:	57                   	push   edi
c000dc59:	56                   	push   esi
c000dc5a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000dc5d:	83 c4 10             	add    esp,0x10
c000dc60:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000dc64:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000dc68:	47                   	inc    edi
c000dc69:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000dc6d:	75 c1                	jne    c000dc30 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c000dc6f:	43                   	inc    ebx
c000dc70:	83 fb 20             	cmp    ebx,0x20
c000dc73:	0f 85 79 ff ff ff    	jne    c000dbf2 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c000dc79:	83 c4 2c             	add    esp,0x2c
c000dc7c:	5b                   	pop    ebx
c000dc7d:	5e                   	pop    esi
c000dc7e:	5f                   	pop    edi
c000dc7f:	5d                   	pop    ebp
c000dc80:	c3                   	ret    
c000dc81:	90                   	nop

c000dc82 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000dc82:	55                   	push   ebp
c000dc83:	57                   	push   edi
c000dc84:	56                   	push   esi
c000dc85:	53                   	push   ebx
c000dc86:	83 ec 28             	sub    esp,0x28
c000dc89:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000dc8d:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000dc91:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000dc95:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000dc99:	c1 e6 08             	shl    esi,0x8
c000dc9c:	01 c6                	add    esi,eax
c000dc9e:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000dca2:	c1 e0 08             	shl    eax,0x8
c000dca5:	01 d0                	add    eax,edx
c000dca7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dcab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000dcaf:	0f af c6             	imul   eax,esi
c000dcb2:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000dcb9:	50                   	push   eax
c000dcba:	e8 da 9c ff ff       	call   c0007999 <malloc>
c000dcbf:	83 c4 10             	add    esp,0x10
c000dcc2:	89 c7                	mov    edi,eax
c000dcc4:	85 c0                	test   eax,eax
c000dcc6:	75 10                	jne    c000dcd8 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000dcc8:	83 ec 0c             	sub    esp,0xc
c000dccb:	68 f5 dc 01 c0       	push   0xc001dcf5
c000dcd0:	e8 a2 25 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000dcd5:	83 c4 10             	add    esp,0x10
c000dcd8:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000dcdb:	ba 12 00 00 00       	mov    edx,0x12
c000dce0:	84 c0                	test   al,al
c000dce2:	74 11                	je     c000dcf5 <Video::tgaParse(unsigned char*, int, int*, int*)+0x73>
c000dce4:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000dce8:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000dcec:	c1 fa 03             	sar    edx,0x3
c000dcef:	0f af d1             	imul   edx,ecx
c000dcf2:	83 c2 12             	add    edx,0x12
c000dcf5:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000dcf9:	74 04                	je     c000dcff <Video::tgaParse(unsigned char*, int, int*, int*)+0x7d>
c000dcfb:	85 f6                	test   esi,esi
c000dcfd:	75 12                	jne    c000dd11 <Video::tgaParse(unsigned char*, int, int*, int*)+0x8f>
c000dcff:	83 ec 0c             	sub    esp,0xc
c000dd02:	68 05 dd 01 c0       	push   0xc001dd05
c000dd07:	e8 1c ca ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000dd0c:	e9 b8 00 00 00       	jmp    c000ddc9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x147>
c000dd11:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000dd15:	80 f9 02             	cmp    cl,0x2
c000dd18:	0f 85 96 00 00 00    	jne    c000ddb4 <Video::tgaParse(unsigned char*, int, int*, int*)+0x132>
c000dd1e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000dd23:	75 0e                	jne    c000dd33 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd25:	84 c0                	test   al,al
c000dd27:	75 0a                	jne    c000dd33 <Video::tgaParse(unsigned char*, int, int*, int*)+0xb1>
c000dd29:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000dd2c:	83 e8 18             	sub    eax,0x18
c000dd2f:	a8 f7                	test   al,0xf7
c000dd31:	74 0a                	je     c000dd3d <Video::tgaParse(unsigned char*, int, int*, int*)+0xbb>
c000dd33:	83 ec 0c             	sub    esp,0xc
c000dd36:	68 1a dd 01 c0       	push   0xc001dd1a
c000dd3b:	eb 7f                	jmp    c000ddbc <Video::tgaParse(unsigned char*, int, int*, int*)+0x13a>
c000dd3d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000dd45:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000dd4d:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000dd51:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000dd59:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000dd5d:	75 0c                	jne    c000dd6b <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c000dd5f:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000dd64:	c1 e0 18             	shl    eax,0x18
c000dd67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dd6b:	45                   	inc    ebp
c000dd6c:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000dd71:	c1 e1 10             	shl    ecx,0x10
c000dd74:	89 c8                	mov    eax,ecx
c000dd76:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000dd7b:	c1 e1 08             	shl    ecx,0x8
c000dd7e:	09 c1                	or     ecx,eax
c000dd80:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000dd84:	09 c1                	or     ecx,eax
c000dd86:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000dd8a:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000dd8e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000dd92:	c1 f8 03             	sar    eax,0x3
c000dd95:	01 c2                	add    edx,eax
c000dd97:	89 e8                	mov    eax,ebp
c000dd99:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000dd9d:	39 c6                	cmp    esi,eax
c000dd9f:	7f b0                	jg     c000dd51 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcf>
c000dda1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000dda5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000dda9:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ddac:	7e 22                	jle    c000ddd0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14e>
c000ddae:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ddb2:	eb 99                	jmp    c000dd4d <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c000ddb4:	50                   	push   eax
c000ddb5:	50                   	push   eax
c000ddb6:	51                   	push   ecx
c000ddb7:	68 28 dd 01 c0       	push   0xc001dd28
c000ddbc:	e8 67 c9 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000ddc1:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ddc4:	e8 e0 9b ff ff       	call   c00079a9 <free>
c000ddc9:	83 c4 10             	add    esp,0x10
c000ddcc:	31 ff                	xor    edi,edi
c000ddce:	eb 0f                	jmp    c000dddf <Video::tgaParse(unsigned char*, int, int*, int*)+0x15d>
c000ddd0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ddd4:	89 30                	mov    DWORD PTR [eax],esi
c000ddd6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ddda:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000dddd:	89 30                	mov    DWORD PTR [eax],esi
c000dddf:	83 c4 1c             	add    esp,0x1c
c000dde2:	89 f8                	mov    eax,edi
c000dde4:	5b                   	pop    ebx
c000dde5:	5e                   	pop    esi
c000dde6:	5f                   	pop    edi
c000dde7:	5d                   	pop    ebp
c000dde8:	c3                   	ret    
c000dde9:	90                   	nop

c000ddea <Video::putTGA(int, int, unsigned char*, int)>:
c000ddea:	55                   	push   ebp
c000ddeb:	57                   	push   edi
c000ddec:	56                   	push   esi
c000dded:	53                   	push   ebx
c000ddee:	83 ec 28             	sub    esp,0x28
c000ddf1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000ddf5:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ddf9:	50                   	push   eax
c000ddfa:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ddfe:	50                   	push   eax
c000ddff:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de03:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000de07:	56                   	push   esi
c000de08:	e8 75 fe ff ff       	call   c000dc82 <Video::tgaParse(unsigned char*, int, int*, int*)>
c000de0d:	83 c4 20             	add    esp,0x20
c000de10:	85 c0                	test   eax,eax
c000de12:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000de16:	74 35                	je     c000de4d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de18:	89 c7                	mov    edi,eax
c000de1a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000de1e:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000de22:	39 d8                	cmp    eax,ebx
c000de24:	7e 27                	jle    c000de4d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000de26:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000de2a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000de2e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000de32:	39 e8                	cmp    eax,ebp
c000de34:	7e 14                	jle    c000de4a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000de36:	8b 06                	mov    eax,DWORD PTR [esi]
c000de38:	83 c7 04             	add    edi,0x4
c000de3b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000de3e:	53                   	push   ebx
c000de3f:	55                   	push   ebp
c000de40:	45                   	inc    ebp
c000de41:	56                   	push   esi
c000de42:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000de45:	83 c4 10             	add    esp,0x10
c000de48:	eb e0                	jmp    c000de2a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000de4a:	43                   	inc    ebx
c000de4b:	eb cd                	jmp    c000de1a <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000de4d:	83 c4 1c             	add    esp,0x1c
c000de50:	5b                   	pop    ebx
c000de51:	5e                   	pop    esi
c000de52:	5f                   	pop    edi
c000de53:	5d                   	pop    ebp
c000de54:	c3                   	ret    
c000de55:	66 90                	xchg   ax,ax
c000de57:	90                   	nop

c000de58 <ACPI::close(int, int, void*)>:
c000de58:	83 ec 1c             	sub    esp,0x1c
c000de5b:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000de63:	74 0b                	je     c000de70 <ACPI::close(int, int, void*)+0x18>
c000de65:	b8 00 00 00 00       	mov    eax,0x0
c000de6a:	e9 9d 00 00 00       	jmp    c000df0c <ACPI::close(int, int, void*)+0xb4>
c000de6f:	90                   	nop
c000de70:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000de75:	75 29                	jne    c000dea0 <ACPI::close(int, int, void*)+0x48>
c000de77:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000de7c:	85 c0                	test   eax,eax
c000de7e:	74 08                	je     c000de88 <ACPI::close(int, int, void*)+0x30>
c000de80:	a1 68 29 02 c0       	mov    eax,ds:0xc0022968
c000de85:	ff d0                	call   eax
c000de87:	90                   	nop
c000de88:	83 ec 0c             	sub    esp,0xc
c000de8b:	68 84 dd 01 c0       	push   0xc001dd84
c000de90:	e8 e2 23 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000de95:	83 c4 10             	add    esp,0x10
c000de98:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000de9d:	eb 6d                	jmp    c000df0c <ACPI::close(int, int, void*)+0xb4>
c000de9f:	90                   	nop
c000dea0:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000dea5:	75 5d                	jne    c000df04 <ACPI::close(int, int, void*)+0xac>
c000dea7:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000deac:	85 c0                	test   eax,eax
c000deae:	74 08                	je     c000deb8 <ACPI::close(int, int, void*)+0x60>
c000deb0:	a1 64 29 02 c0       	mov    eax,ds:0xc0022964
c000deb5:	ff d0                	call   eax
c000deb7:	90                   	nop
c000deb8:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000debd:	8d 76 00             	lea    esi,[esi+0x0]
c000dec0:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000dec4:	25 ff 00 00 00       	and    eax,0xff
c000dec9:	83 e0 02             	and    eax,0x2
c000decc:	74 1e                	je     c000deec <ACPI::close(int, int, void*)+0x94>
c000dece:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000ded5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ded9:	89 c2                	mov    edx,eax
c000dedb:	ec                   	in     al,dx
c000dedc:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000dee0:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000dee4:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000dee8:	eb d6                	jmp    c000dec0 <ACPI::close(int, int, void*)+0x68>
c000deea:	66 90                	xchg   ax,ax
c000deec:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000def3:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000def8:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000defc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000df00:	ee                   	out    dx,al
c000df01:	8d 76 00             	lea    esi,[esi+0x0]
c000df04:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000df09:	8d 76 00             	lea    esi,[esi+0x0]
c000df0c:	83 c4 1c             	add    esp,0x1c
c000df0f:	c3                   	ret    

c000df10 <findRSDP()>:
c000df10:	83 ec 1c             	sub    esp,0x1c
c000df13:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000df18:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000df1e:	83 e0 04             	and    eax,0x4
c000df21:	84 c0                	test   al,al
c000df23:	75 07                	jne    c000df2c <findRSDP()+0x1c>
c000df25:	b8 00 00 00 00       	mov    eax,0x0
c000df2a:	eb 70                	jmp    c000df9c <findRSDP()+0x8c>
c000df2c:	a1 b4 03 02 c0       	mov    eax,ds:0xc00203b4
c000df31:	3d ff 07 00 00       	cmp    eax,0x7ff
c000df36:	7f 1c                	jg     c000df54 <findRSDP()+0x44>
c000df38:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000df3d:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000df43:	83 e2 fb             	and    edx,0xfffffffb
c000df46:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000df4c:	b8 00 00 00 00       	mov    eax,0x0
c000df51:	eb 49                	jmp    c000df9c <findRSDP()+0x8c>
c000df53:	90                   	nop
c000df54:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000df5c:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000df64:	77 2e                	ja     c000df94 <findRSDP()+0x84>
c000df66:	83 ec 04             	sub    esp,0x4
c000df69:	6a 08                	push   0x8
c000df6b:	68 1f de 01 c0       	push   0xc001de1f
c000df70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000df74:	e8 37 24 ff ff       	call   c00003b0 <memcmp>
c000df79:	83 c4 10             	add    esp,0x10
c000df7c:	85 c0                	test   eax,eax
c000df7e:	0f 94 c0             	sete   al
c000df81:	84 c0                	test   al,al
c000df83:	74 07                	je     c000df8c <findRSDP()+0x7c>
c000df85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000df89:	eb 11                	jmp    c000df9c <findRSDP()+0x8c>
c000df8b:	90                   	nop
c000df8c:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000df91:	eb c9                	jmp    c000df5c <findRSDP()+0x4c>
c000df93:	90                   	nop
c000df94:	b8 00 00 00 00       	mov    eax,0x0
c000df99:	8d 76 00             	lea    esi,[esi+0x0]
c000df9c:	83 c4 1c             	add    esp,0x1c
c000df9f:	c3                   	ret    

c000dfa0 <loadACPITables(unsigned char*)>:
c000dfa0:	57                   	push   edi
c000dfa1:	56                   	push   esi
c000dfa2:	53                   	push   ebx
c000dfa3:	83 ec 60             	sub    esp,0x60
c000dfa6:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000dfab:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000dfb1:	83 e0 04             	and    eax,0x4
c000dfb4:	84 c0                	test   al,al
c000dfb6:	0f 84 3c 02 00 00    	je     c000e1f8 <loadACPITables(unsigned char*)+0x258>
c000dfbc:	a0 80 2b 02 c0       	mov    al,ds:0xc0022b80
c000dfc1:	84 c0                	test   al,al
c000dfc3:	74 77                	je     c000e03c <loadACPITables(unsigned char*)+0x9c>
c000dfc5:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dfc9:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000dfcd:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000dfd1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000dfd4:	83 e8 24             	sub    eax,0x24
c000dfd7:	c1 e8 03             	shr    eax,0x3
c000dfda:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000dfde:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000dfe6:	66 90                	xchg   ax,ax
c000dfe8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000dfec:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000dff0:	0f 8d b6 00 00 00    	jge    c000e0ac <loadACPITables(unsigned char*)+0x10c>
c000dff6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000dffa:	83 c0 24             	add    eax,0x24
c000dffd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000e001:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e005:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e009:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000e00d:	c1 e0 03             	shl    eax,0x3
c000e010:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000e014:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e018:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000e01b:	8b 00                	mov    eax,DWORD PTR [eax]
c000e01d:	89 c1                	mov    ecx,eax
c000e01f:	a1 6c 29 02 c0       	mov    eax,ds:0xc002296c
c000e024:	8d 50 01             	lea    edx,[eax+0x1]
c000e027:	89 15 6c 29 02 c0    	mov    DWORD PTR ds:0xc002296c,edx
c000e02d:	89 ca                	mov    edx,ecx
c000e02f:	89 14 c5 84 29 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd67c],edx
c000e036:	ff 44 24 5c          	inc    DWORD PTR [esp+0x5c]
c000e03a:	eb ac                	jmp    c000dfe8 <loadACPITables(unsigned char*)+0x48>
c000e03c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e040:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e044:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e048:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e04b:	83 e8 24             	sub    eax,0x24
c000e04e:	c1 e8 02             	shr    eax,0x2
c000e051:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e055:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000e05d:	8d 76 00             	lea    esi,[esi+0x0]
c000e060:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e064:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000e068:	7d 42                	jge    c000e0ac <loadACPITables(unsigned char*)+0x10c>
c000e06a:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000e06e:	83 c0 24             	add    eax,0x24
c000e071:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e075:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e079:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000e07d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000e081:	c1 e0 02             	shl    eax,0x2
c000e084:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e088:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e08c:	8b 08                	mov    ecx,DWORD PTR [eax]
c000e08e:	a1 6c 29 02 c0       	mov    eax,ds:0xc002296c
c000e093:	8d 50 01             	lea    edx,[eax+0x1]
c000e096:	89 15 6c 29 02 c0    	mov    DWORD PTR ds:0xc002296c,edx
c000e09c:	89 ca                	mov    edx,ecx
c000e09e:	89 14 c5 84 29 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd67c],edx
c000e0a5:	ff 44 24 58          	inc    DWORD PTR [esp+0x58]
c000e0a9:	eb b5                	jmp    c000e060 <loadACPITables(unsigned char*)+0xc0>
c000e0ab:	90                   	nop
c000e0ac:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000e0b4:	a1 6c 29 02 c0       	mov    eax,ds:0xc002296c
c000e0b9:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000e0bd:	0f 8d 39 01 00 00    	jge    c000e1fc <loadACPITables(unsigned char*)+0x25c>
c000e0c3:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e0c7:	8b 04 c5 84 29 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd67c]
c000e0ce:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e0d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0d6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e0da:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e0de:	25 ff 0f 00 00       	and    eax,0xfff
c000e0e3:	89 c6                	mov    esi,eax
c000e0e5:	8b 1d 70 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020470
c000e0eb:	83 ec 0c             	sub    esp,0xc
c000e0ee:	6a 01                	push   0x1
c000e0f0:	e8 e0 b3 ff ff       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c000e0f5:	83 c4 10             	add    esp,0x10
c000e0f8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e0fc:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e102:	83 ec 0c             	sub    esp,0xc
c000e105:	6a 01                	push   0x1
c000e107:	6a 01                	push   0x1
c000e109:	50                   	push   eax
c000e10a:	52                   	push   edx
c000e10b:	53                   	push   ebx
c000e10c:	e8 53 bd ff ff       	call   c0009e64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e111:	83 c4 20             	add    esp,0x20
c000e114:	09 f0                	or     eax,esi
c000e116:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e11a:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e11e:	c1 e0 03             	shl    eax,0x3
c000e121:	05 80 29 02 c0       	add    eax,0xc0022980
c000e126:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e12a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e12e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e132:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000e13a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000e13e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e142:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e146:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e14a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e14e:	89 c6                	mov    esi,eax
c000e150:	89 d7                	mov    edi,edx
c000e152:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e154:	89 c8                	mov    eax,ecx
c000e156:	89 fa                	mov    edx,edi
c000e158:	89 f3                	mov    ebx,esi
c000e15a:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000e15e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000e162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e166:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e16a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e16d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e171:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e175:	05 00 10 00 00       	add    eax,0x1000
c000e17a:	c1 e8 0c             	shr    eax,0xc
c000e17d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e181:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e185:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e18d:	25 ff 0f 00 00       	and    eax,0xfff
c000e192:	89 c6                	mov    esi,eax
c000e194:	8b 1d 70 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020470
c000e19a:	83 ec 0c             	sub    esp,0xc
c000e19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000e1a1:	e8 2f b3 ff ff       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c000e1a6:	83 c4 10             	add    esp,0x10
c000e1a9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e1ad:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e1b3:	83 ec 0c             	sub    esp,0xc
c000e1b6:	6a 01                	push   0x1
c000e1b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000e1bc:	50                   	push   eax
c000e1bd:	52                   	push   edx
c000e1be:	53                   	push   ebx
c000e1bf:	e8 a0 bc ff ff       	call   c0009e64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e1c4:	83 c4 20             	add    esp,0x20
c000e1c7:	09 f0                	or     eax,esi
c000e1c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e1cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e1d1:	83 ec 0c             	sub    esp,0xc
c000e1d4:	50                   	push   eax
c000e1d5:	e8 2b b6 ff ff       	call   c0009805 <Virt::freeKernelVirtualPages(unsigned long)>
c000e1da:	83 c4 10             	add    esp,0x10
c000e1dd:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000e1e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e1e5:	89 14 c5 84 29 02 c0 	mov    DWORD PTR [eax*8-0x3ffdd67c],edx
c000e1ec:	ff 44 24 54          	inc    DWORD PTR [esp+0x54]
c000e1f0:	e9 bf fe ff ff       	jmp    c000e0b4 <loadACPITables(unsigned char*)+0x114>
c000e1f5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1f8:	90                   	nop
c000e1f9:	8d 76 00             	lea    esi,[esi+0x0]
c000e1fc:	83 c4 60             	add    esp,0x60
c000e1ff:	5b                   	pop    ebx
c000e200:	5e                   	pop    esi
c000e201:	5f                   	pop    edi
c000e202:	c3                   	ret    
c000e203:	90                   	nop

c000e204 <findRSDT(unsigned char*)>:
c000e204:	57                   	push   edi
c000e205:	56                   	push   esi
c000e206:	53                   	push   ebx
c000e207:	83 ec 50             	sub    esp,0x50
c000e20a:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000e20f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e215:	83 e0 04             	and    eax,0x4
c000e218:	84 c0                	test   al,al
c000e21a:	75 0c                	jne    c000e228 <findRSDT(unsigned char*)+0x24>
c000e21c:	b8 00 00 00 00       	mov    eax,0x0
c000e221:	e9 26 01 00 00       	jmp    c000e34c <findRSDT(unsigned char*)+0x148>
c000e226:	66 90                	xchg   ax,ax
c000e228:	89 e0                	mov    eax,esp
c000e22a:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000e22e:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000e232:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000e236:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000e23e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e242:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e246:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000e24a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000e24e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000e252:	89 c6                	mov    esi,eax
c000e254:	89 d7                	mov    edi,edx
c000e256:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e258:	89 c8                	mov    eax,ecx
c000e25a:	89 fa                	mov    edx,edi
c000e25c:	89 f3                	mov    ebx,esi
c000e25e:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000e262:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e266:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e26a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000e26e:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000e272:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000e27a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000e27e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e282:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e28a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e28e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e292:	25 ff 0f 00 00       	and    eax,0xfff
c000e297:	89 c6                	mov    esi,eax
c000e299:	8b 1d 70 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020470
c000e29f:	83 ec 0c             	sub    esp,0xc
c000e2a2:	6a 02                	push   0x2
c000e2a4:	e8 2c b2 ff ff       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c000e2a9:	83 c4 10             	add    esp,0x10
c000e2ac:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000e2b0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2b6:	83 ec 0c             	sub    esp,0xc
c000e2b9:	6a 01                	push   0x1
c000e2bb:	6a 02                	push   0x2
c000e2bd:	50                   	push   eax
c000e2be:	52                   	push   edx
c000e2bf:	53                   	push   ebx
c000e2c0:	e8 9f bb ff ff       	call   c0009e64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e2c5:	83 c4 20             	add    esp,0x20
c000e2c8:	09 f0                	or     eax,esi
c000e2ca:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000e2ce:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e2d2:	25 ff 0f 00 00       	and    eax,0xfff
c000e2d7:	89 c6                	mov    esi,eax
c000e2d9:	8b 1d 70 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020470
c000e2df:	83 ec 0c             	sub    esp,0xc
c000e2e2:	6a 02                	push   0x2
c000e2e4:	e8 ec b1 ff ff       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c000e2e9:	83 c4 10             	add    esp,0x10
c000e2ec:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e2f0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000e2f6:	83 ec 0c             	sub    esp,0xc
c000e2f9:	6a 01                	push   0x1
c000e2fb:	6a 02                	push   0x2
c000e2fd:	50                   	push   eax
c000e2fe:	52                   	push   edx
c000e2ff:	53                   	push   ebx
c000e300:	e8 5f bb ff ff       	call   c0009e64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000e305:	83 c4 20             	add    esp,0x20
c000e308:	09 f0                	or     eax,esi
c000e30a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e30e:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c000e313:	75 13                	jne    c000e328 <findRSDT(unsigned char*)+0x124>
c000e315:	c6 05 80 2b 02 c0 00 	mov    BYTE PTR ds:0xc0022b80,0x0
c000e31c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e320:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e324:	eb 22                	jmp    c000e348 <findRSDT(unsigned char*)+0x144>
c000e326:	66 90                	xchg   ax,ax
c000e328:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c000e32d:	75 11                	jne    c000e340 <findRSDT(unsigned char*)+0x13c>
c000e32f:	c6 05 80 2b 02 c0 01 	mov    BYTE PTR ds:0xc0022b80,0x1
c000e336:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000e33a:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000e33e:	eb 08                	jmp    c000e348 <findRSDT(unsigned char*)+0x144>
c000e340:	b8 00 00 00 00       	mov    eax,0x0
c000e345:	eb 05                	jmp    c000e34c <findRSDT(unsigned char*)+0x148>
c000e347:	90                   	nop
c000e348:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e34c:	83 c4 50             	add    esp,0x50
c000e34f:	5b                   	pop    ebx
c000e350:	5e                   	pop    esi
c000e351:	5f                   	pop    edi
c000e352:	c3                   	ret    
c000e353:	90                   	nop

c000e354 <findDataTable(unsigned char*, char*)>:
c000e354:	83 ec 1c             	sub    esp,0x1c
c000e357:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000e35c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e362:	83 e0 04             	and    eax,0x4
c000e365:	84 c0                	test   al,al
c000e367:	75 07                	jne    c000e370 <findDataTable(unsigned char*, char*)+0x1c>
c000e369:	b8 00 00 00 00       	mov    eax,0x0
c000e36e:	eb 58                	jmp    c000e3c8 <findDataTable(unsigned char*, char*)+0x74>
c000e370:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000e378:	a1 6c 29 02 c0       	mov    eax,ds:0xc002296c
c000e37d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000e381:	7d 3d                	jge    c000e3c0 <findDataTable(unsigned char*, char*)+0x6c>
c000e383:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e387:	c1 e0 03             	shl    eax,0x3
c000e38a:	05 80 29 02 c0       	add    eax,0xc0022980
c000e38f:	83 ec 04             	sub    esp,0x4
c000e392:	6a 04                	push   0x4
c000e394:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e398:	50                   	push   eax
c000e399:	e8 12 20 ff ff       	call   c00003b0 <memcmp>
c000e39e:	83 c4 10             	add    esp,0x10
c000e3a1:	85 c0                	test   eax,eax
c000e3a3:	0f 94 c0             	sete   al
c000e3a6:	84 c0                	test   al,al
c000e3a8:	74 0e                	je     c000e3b8 <findDataTable(unsigned char*, char*)+0x64>
c000e3aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e3ae:	8b 04 c5 84 29 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffdd67c]
c000e3b5:	eb 11                	jmp    c000e3c8 <findDataTable(unsigned char*, char*)+0x74>
c000e3b7:	90                   	nop
c000e3b8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000e3bc:	eb ba                	jmp    c000e378 <findDataTable(unsigned char*, char*)+0x24>
c000e3be:	66 90                	xchg   ax,ax
c000e3c0:	b8 00 00 00 00       	mov    eax,0x0
c000e3c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e3c8:	83 c4 1c             	add    esp,0x1c
c000e3cb:	c3                   	ret    

c000e3cc <scanMADT()>:
c000e3cc:	53                   	push   ebx
c000e3cd:	83 ec 38             	sub    esp,0x38
c000e3d0:	a1 9c 03 02 c0       	mov    eax,ds:0xc002039c
c000e3d5:	25 00 04 00 00       	and    eax,0x400
c000e3da:	74 14                	je     c000e3f0 <scanMADT()+0x24>
c000e3dc:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000e3e1:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e3e7:	83 e2 fb             	and    edx,0xfffffffb
c000e3ea:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e3f0:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000e3f5:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000e3fb:	83 e0 04             	and    eax,0x4
c000e3fe:	84 c0                	test   al,al
c000e400:	0f 84 8a 04 00 00    	je     c000e890 <scanMADT()+0x4c4>
c000e406:	e8 05 fb ff ff       	call   c000df10 <findRSDP()>
c000e40b:	a3 8c 2b 02 c0       	mov    ds:0xc0022b8c,eax
c000e410:	a1 8c 2b 02 c0       	mov    eax,ds:0xc0022b8c
c000e415:	85 c0                	test   eax,eax
c000e417:	75 1b                	jne    c000e434 <scanMADT()+0x68>
c000e419:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000e41e:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e424:	83 e2 fb             	and    edx,0xfffffffb
c000e427:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e42d:	e9 66 04 00 00       	jmp    c000e898 <scanMADT()+0x4cc>
c000e432:	66 90                	xchg   ax,ax
c000e434:	a1 8c 2b 02 c0       	mov    eax,ds:0xc0022b8c
c000e439:	83 ec 0c             	sub    esp,0xc
c000e43c:	50                   	push   eax
c000e43d:	e8 c2 fd ff ff       	call   c000e204 <findRSDT(unsigned char*)>
c000e442:	83 c4 10             	add    esp,0x10
c000e445:	a3 88 2b 02 c0       	mov    ds:0xc0022b88,eax
c000e44a:	a1 88 2b 02 c0       	mov    eax,ds:0xc0022b88
c000e44f:	85 c0                	test   eax,eax
c000e451:	75 19                	jne    c000e46c <scanMADT()+0xa0>
c000e453:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000e458:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e45e:	83 e2 fb             	and    edx,0xfffffffb
c000e461:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e467:	e9 2c 04 00 00       	jmp    c000e898 <scanMADT()+0x4cc>
c000e46c:	a1 88 2b 02 c0       	mov    eax,ds:0xc0022b88
c000e471:	83 ec 0c             	sub    esp,0xc
c000e474:	50                   	push   eax
c000e475:	e8 26 fb ff ff       	call   c000dfa0 <loadACPITables(unsigned char*)>
c000e47a:	83 c4 10             	add    esp,0x10
c000e47d:	a1 88 2b 02 c0       	mov    eax,ds:0xc0022b88
c000e482:	83 ec 08             	sub    esp,0x8
c000e485:	68 28 de 01 c0       	push   0xc001de28
c000e48a:	50                   	push   eax
c000e48b:	e8 c4 fe ff ff       	call   c000e354 <findDataTable(unsigned char*, char*)>
c000e490:	83 c4 10             	add    esp,0x10
c000e493:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e497:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000e49c:	75 1a                	jne    c000e4b8 <scanMADT()+0xec>
c000e49e:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000e4a3:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000e4a9:	83 e2 fe             	and    edx,0xfffffffe
c000e4ac:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000e4b2:	e9 e1 03 00 00       	jmp    c000e898 <scanMADT()+0x4cc>
c000e4b7:	90                   	nop
c000e4b8:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000e4c0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e4c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e4c7:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000e4cb:	0f 87 c7 03 00 00    	ja     c000e898 <scanMADT()+0x4cc>
c000e4d1:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000e4d9:	0f 87 b9 03 00 00    	ja     c000e898 <scanMADT()+0x4cc>
c000e4df:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4e3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e4e7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e4eb:	8d 50 01             	lea    edx,[eax+0x1]
c000e4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e4f2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e4f6:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e4fa:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000e4fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e502:	8d 50 01             	lea    edx,[eax+0x1]
c000e505:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e509:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e50d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e511:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000e515:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c000e51a:	0f 86 74 03 00 00    	jbe    c000e894 <scanMADT()+0x4c8>
c000e520:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c000e525:	75 5d                	jne    c000e584 <scanMADT()+0x1b8>
c000e527:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e52b:	8d 50 01             	lea    edx,[eax+0x1]
c000e52e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e532:	8a 15 80 2d 02 c0    	mov    dl,BYTE PTR ds:0xc0022d80
c000e538:	81 e2 ff 00 00 00    	and    edx,0xff
c000e53e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e542:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e546:	88 82 c0 2d 02 c0    	mov    BYTE PTR [edx-0x3ffdd240],al
c000e54c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e550:	8d 42 01             	lea    eax,[edx+0x1]
c000e553:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e557:	a0 80 2d 02 c0       	mov    al,ds:0xc0022d80
c000e55c:	8d 48 01             	lea    ecx,[eax+0x1]
c000e55f:	88 0d 80 2d 02 c0    	mov    BYTE PTR ds:0xc0022d80,cl
c000e565:	25 ff 00 00 00       	and    eax,0xff
c000e56a:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e56e:	8a 54 11 2c          	mov    dl,BYTE PTR [ecx+edx*1+0x2c]
c000e572:	88 90 a0 2d 02 c0    	mov    BYTE PTR [eax-0x3ffdd260],dl
c000e578:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e57d:	e9 f6 02 00 00       	jmp    c000e878 <scanMADT()+0x4ac>
c000e582:	66 90                	xchg   ax,ax
c000e584:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c000e589:	0f 85 29 01 00 00    	jne    c000e6b8 <scanMADT()+0x2ec>
c000e58f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e593:	8d 50 01             	lea    edx,[eax+0x1]
c000e596:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e59a:	8a 15 40 2c 02 c0    	mov    dl,BYTE PTR ds:0xc0022c40
c000e5a0:	81 e2 ff 00 00 00    	and    edx,0xff
c000e5a6:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000e5aa:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000e5ae:	88 82 60 2c 02 c0    	mov    BYTE PTR [edx-0x3ffdd3a0],al
c000e5b4:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c000e5b8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e5bc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5c0:	01 d0                	add    eax,edx
c000e5c2:	83 c0 2c             	add    eax,0x2c
c000e5c5:	8a 00                	mov    al,BYTE PTR [eax]
c000e5c7:	31 d2                	xor    edx,edx
c000e5c9:	88 c2                	mov    dl,al
c000e5cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5cf:	8d 48 01             	lea    ecx,[eax+0x1]
c000e5d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5d6:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e5da:	25 ff 00 00 00       	and    eax,0xff
c000e5df:	c1 e0 08             	shl    eax,0x8
c000e5e2:	89 d1                	mov    ecx,edx
c000e5e4:	09 c1                	or     ecx,eax
c000e5e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e5ea:	8d 50 02             	lea    edx,[eax+0x2]
c000e5ed:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e5f1:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e5f5:	25 ff 00 00 00       	and    eax,0xff
c000e5fa:	c1 e0 10             	shl    eax,0x10
c000e5fd:	09 c1                	or     ecx,eax
c000e5ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e603:	8d 50 03             	lea    edx,[eax+0x3]
c000e606:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e60a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e60e:	25 ff 00 00 00       	and    eax,0xff
c000e613:	c1 e0 18             	shl    eax,0x18
c000e616:	09 c1                	or     ecx,eax
c000e618:	89 ca                	mov    edx,ecx
c000e61a:	a0 40 2c 02 c0       	mov    al,ds:0xc0022c40
c000e61f:	25 ff 00 00 00       	and    eax,0xff
c000e624:	89 14 85 80 2c 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd380],edx
c000e62b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e630:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e634:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e638:	01 d0                	add    eax,edx
c000e63a:	83 c0 2c             	add    eax,0x2c
c000e63d:	8a 00                	mov    al,BYTE PTR [eax]
c000e63f:	31 d2                	xor    edx,edx
c000e641:	88 c2                	mov    dl,al
c000e643:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e647:	8d 48 01             	lea    ecx,[eax+0x1]
c000e64a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e64e:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e652:	25 ff 00 00 00       	and    eax,0xff
c000e657:	c1 e0 08             	shl    eax,0x8
c000e65a:	89 d1                	mov    ecx,edx
c000e65c:	09 c1                	or     ecx,eax
c000e65e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e662:	8d 50 02             	lea    edx,[eax+0x2]
c000e665:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e669:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e66d:	25 ff 00 00 00       	and    eax,0xff
c000e672:	c1 e0 10             	shl    eax,0x10
c000e675:	09 c1                	or     ecx,eax
c000e677:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e67b:	8d 50 03             	lea    edx,[eax+0x3]
c000e67e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e682:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e686:	25 ff 00 00 00       	and    eax,0xff
c000e68b:	c1 e0 18             	shl    eax,0x18
c000e68e:	09 c1                	or     ecx,eax
c000e690:	89 ca                	mov    edx,ecx
c000e692:	a0 40 2c 02 c0       	mov    al,ds:0xc0022c40
c000e697:	25 ff 00 00 00       	and    eax,0xff
c000e69c:	89 14 85 00 2d 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd300],edx
c000e6a3:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e6a8:	a0 40 2c 02 c0       	mov    al,ds:0xc0022c40
c000e6ad:	40                   	inc    eax
c000e6ae:	a2 40 2c 02 c0       	mov    ds:0xc0022c40,al
c000e6b3:	e9 c0 01 00 00       	jmp    c000e878 <scanMADT()+0x4ac>
c000e6b8:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c000e6bd:	0f 85 fd 00 00 00    	jne    c000e7c0 <scanMADT()+0x3f4>
c000e6c3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6c7:	8d 50 01             	lea    edx,[eax+0x1]
c000e6ca:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6ce:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6d2:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6d6:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000e6da:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6de:	8d 50 01             	lea    edx,[eax+0x1]
c000e6e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e6e5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6e9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e6ed:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000e6f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e6f5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e6f9:	01 d0                	add    eax,edx
c000e6fb:	83 c0 2c             	add    eax,0x2c
c000e6fe:	8a 00                	mov    al,BYTE PTR [eax]
c000e700:	31 d2                	xor    edx,edx
c000e702:	88 c2                	mov    dl,al
c000e704:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e708:	8d 48 01             	lea    ecx,[eax+0x1]
c000e70b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e70f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e713:	25 ff 00 00 00       	and    eax,0xff
c000e718:	c1 e0 08             	shl    eax,0x8
c000e71b:	89 d1                	mov    ecx,edx
c000e71d:	09 c1                	or     ecx,eax
c000e71f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e723:	8d 50 02             	lea    edx,[eax+0x2]
c000e726:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e72a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e72e:	25 ff 00 00 00       	and    eax,0xff
c000e733:	c1 e0 10             	shl    eax,0x10
c000e736:	09 c1                	or     ecx,eax
c000e738:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e73c:	8d 50 03             	lea    edx,[eax+0x3]
c000e73f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e743:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000e747:	25 ff 00 00 00       	and    eax,0xff
c000e74c:	c1 e0 18             	shl    eax,0x18
c000e74f:	09 c8                	or     eax,ecx
c000e751:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e755:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000e75a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e75e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e762:	01 d0                	add    eax,edx
c000e764:	83 c0 2c             	add    eax,0x2c
c000e767:	8a 00                	mov    al,BYTE PTR [eax]
c000e769:	25 ff 00 00 00       	and    eax,0xff
c000e76e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000e772:	8d 4a 01             	lea    ecx,[edx+0x1]
c000e775:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e779:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000e77d:	81 e2 ff 00 00 00    	and    edx,0xff
c000e783:	c1 e2 08             	shl    edx,0x8
c000e786:	09 d0                	or     eax,edx
c000e788:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000e78d:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e792:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e796:	25 ff 00 00 00       	and    eax,0xff
c000e79b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000e79f:	88 90 00 f3 01 c0    	mov    BYTE PTR [eax-0x3ffe0d00],dl
c000e7a5:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c000e7a9:	31 d2                	xor    edx,edx
c000e7ab:	88 c2                	mov    dl,al
c000e7ad:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000e7b2:	66 89 84 12 20 2c 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffdd3e0],ax
c000e7ba:	e9 b9 00 00 00       	jmp    c000e878 <scanMADT()+0x4ac>
c000e7bf:	90                   	nop
c000e7c0:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c000e7c5:	0f 85 a1 00 00 00    	jne    c000e86c <scanMADT()+0x4a0>
c000e7cb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7cf:	8d 50 01             	lea    edx,[eax+0x1]
c000e7d2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e7d6:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7da:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e7de:	25 ff 00 00 00       	and    eax,0xff
c000e7e3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e7e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e7eb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7ef:	01 d0                	add    eax,edx
c000e7f1:	83 c0 2c             	add    eax,0x2c
c000e7f4:	8a 00                	mov    al,BYTE PTR [eax]
c000e7f6:	31 d2                	xor    edx,edx
c000e7f8:	88 c2                	mov    dl,al
c000e7fa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e7fe:	8d 48 01             	lea    ecx,[eax+0x1]
c000e801:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e805:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000e809:	25 ff 00 00 00       	and    eax,0xff
c000e80e:	c1 e0 08             	shl    eax,0x8
c000e811:	09 d0                	or     eax,edx
c000e813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e817:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000e81c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000e820:	8d 50 01             	lea    edx,[eax+0x1]
c000e823:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e827:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000e82b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000e82f:	25 ff 00 00 00       	and    eax,0xff
c000e834:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83c:	c1 e0 08             	shl    eax,0x8
c000e83f:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000e843:	89 c1                	mov    ecx,eax
c000e845:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e849:	c1 e0 18             	shl    eax,0x18
c000e84c:	89 c3                	mov    ebx,eax
c000e84e:	a1 90 2b 02 c0       	mov    eax,ds:0xc0022b90
c000e853:	8d 50 01             	lea    edx,[eax+0x1]
c000e856:	89 15 90 2b 02 c0    	mov    DWORD PTR ds:0xc0022b90,edx
c000e85c:	09 d9                	or     ecx,ebx
c000e85e:	89 ca                	mov    edx,ecx
c000e860:	89 14 85 a0 2b 02 c0 	mov    DWORD PTR [eax*4-0x3ffdd460],edx
c000e867:	eb 0f                	jmp    c000e878 <scanMADT()+0x4ac>
c000e869:	8d 76 00             	lea    esi,[esi+0x0]
c000e86c:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c000e871:	75 05                	jne    c000e878 <scanMADT()+0x4ac>
c000e873:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000e878:	8a 44 24 22          	mov    al,BYTE PTR [esp+0x22]
c000e87c:	31 d2                	xor    edx,edx
c000e87e:	88 c2                	mov    dl,al
c000e880:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e884:	01 d0                	add    eax,edx
c000e886:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000e88a:	e9 31 fc ff ff       	jmp    c000e4c0 <scanMADT()+0xf4>
c000e88f:	90                   	nop
c000e890:	90                   	nop
c000e891:	eb 05                	jmp    c000e898 <scanMADT()+0x4cc>
c000e893:	90                   	nop
c000e894:	90                   	nop
c000e895:	8d 76 00             	lea    esi,[esi+0x0]
c000e898:	83 c4 38             	add    esp,0x38
c000e89b:	5b                   	pop    ebx
c000e89c:	c3                   	ret    
c000e89d:	90                   	nop
c000e89e:	66 90                	xchg   ax,ax

c000e8a0 <ACPI::ACPI()>:
c000e8a0:	83 ec 0c             	sub    esp,0xc
c000e8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a7:	83 ec 08             	sub    esp,0x8
c000e8aa:	68 2d de 01 c0       	push   0xc001de2d
c000e8af:	50                   	push   eax
c000e8b0:	e8 4b d4 ff ff       	call   c000bd00 <Device::Device(char const*)>
c000e8b5:	83 c4 10             	add    esp,0x10
c000e8b8:	ba 64 df 01 c0       	mov    edx,0xc001df64
c000e8bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c1:	89 10                	mov    DWORD PTR [eax],edx
c000e8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c7:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000e8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d2:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000e8dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8e0:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000e8ea:	e8 dd fa ff ff       	call   c000e3cc <scanMADT()>
c000e8ef:	90                   	nop
c000e8f0:	83 c4 0c             	add    esp,0xc
c000e8f3:	c3                   	ret    

c000e8f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000e8f4:	83 ec 2c             	sub    esp,0x2c
c000e8f7:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e8fb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e8ff:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000e903:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000e907:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000e90c:	88 d0                	mov    al,dl
c000e90e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e912:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000e917:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000e91f:	90                   	nop
c000e920:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e924:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000e92a:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000e92e:	0f 8d 9c 00 00 00    	jge    c000e9d0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xdc>
c000e934:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e93c:	83 c2 2a             	add    edx,0x2a
c000e93f:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000e943:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c000e948:	75 7a                	jne    c000e9c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e94a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e94e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e952:	83 c2 2a             	add    edx,0x2a
c000e955:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000e959:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c000e95d:	75 65                	jne    c000e9c4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd0>
c000e95f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000e964:	74 3a                	je     c000e9a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xac>
c000e966:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e96a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e96e:	83 c2 2a             	add    edx,0x2a
c000e971:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000e975:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e979:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000e97c:	39 c2                	cmp    edx,eax
c000e97e:	74 10                	je     c000e990 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9c>
c000e980:	83 ec 0c             	sub    esp,0xc
c000e983:	68 a8 dd 01 c0       	push   0xc001dda8
c000e988:	e8 ea 18 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000e98d:	83 c4 10             	add    esp,0x10
c000e990:	83 ec 0c             	sub    esp,0xc
c000e993:	68 32 de 01 c0       	push   0xc001de32
c000e998:	e8 da 18 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000e99d:	83 c4 10             	add    esp,0x10
c000e9a0:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000e9a4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e9a8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000e9ac:	83 c2 2a             	add    edx,0x2a
c000e9af:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000e9b3:	8b 02                	mov    eax,DWORD PTR [edx]
c000e9b5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000e9b8:	89 01                	mov    DWORD PTR [ecx],eax
c000e9ba:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000e9bd:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000e9c2:	66 90                	xchg   ax,ax
c000e9c4:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c000e9c8:	e9 53 ff ff ff       	jmp    c000e920 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000e9cd:	8d 76 00             	lea    esi,[esi+0x0]
c000e9d0:	90                   	nop
c000e9d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000e9d5:	83 c4 2c             	add    esp,0x2c
c000e9d8:	c2 04 00             	ret    0x4
c000e9db:	90                   	nop

c000e9dc <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000e9dc:	83 ec 1c             	sub    esp,0x1c
c000e9df:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000e9e3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e9e7:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000e9eb:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000e9f0:	88 c8                	mov    al,cl
c000e9f2:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000e9f6:	88 d0                	mov    al,dl
c000e9f8:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000e9fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea00:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea06:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea0a:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea0d:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000ea11:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000ea15:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea19:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea1f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000ea23:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000ea26:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ea2a:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000ea2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea33:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea39:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000ea3d:	8d 48 01             	lea    ecx,[eax+0x1]
c000ea40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea44:	83 c2 2a             	add    edx,0x2a
c000ea47:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000ea4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea4f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000ea55:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea59:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000ea5c:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ea60:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000ea64:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea68:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea6e:	8d 50 01             	lea    edx,[eax+0x1]
c000ea71:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea75:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000ea7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000ea7f:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000ea85:	3d 00 02 00 00       	cmp    eax,0x200
c000ea8a:	75 10                	jne    c000ea9c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c000ea8c:	83 ec 0c             	sub    esp,0xc
c000ea8f:	68 41 de 01 c0       	push   0xc001de41
c000ea94:	e8 de 17 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000ea99:	83 c4 10             	add    esp,0x10
c000ea9c:	90                   	nop
c000ea9d:	83 c4 1c             	add    esp,0x1c
c000eaa0:	c3                   	ret    
c000eaa1:	90                   	nop
c000eaa2:	66 90                	xchg   ax,ax

c000eaa4 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000eaa4:	b8 00 00 00 00       	mov    eax,0x0
c000eaa9:	c3                   	ret    
c000eaaa:	66 90                	xchg   ax,ax

c000eaac <ACPI::detectPCI()>:
c000eaac:	53                   	push   ebx
c000eaad:	83 ec 28             	sub    esp,0x28
c000eab0:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000eab5:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000eaba:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000eabf:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eac5:	83 e0 04             	and    eax,0x4
c000eac8:	84 c0                	test   al,al
c000eaca:	74 2c                	je     c000eaf8 <ACPI::detectPCI()+0x4c>
c000eacc:	a1 88 2b 02 c0       	mov    eax,ds:0xc0022b88
c000ead1:	83 ec 08             	sub    esp,0x8
c000ead4:	68 5e de 01 c0       	push   0xc001de5e
c000ead9:	50                   	push   eax
c000eada:	e8 75 f8 ff ff       	call   c000e354 <findDataTable(unsigned char*, char*)>
c000eadf:	83 c4 10             	add    esp,0x10
c000eae2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000eae6:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000eaeb:	74 0b                	je     c000eaf8 <ACPI::detectPCI()+0x4c>
c000eaed:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eaf2:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eaf7:	90                   	nop
c000eaf8:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000eb00:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb04:	8a 00                	mov    al,BYTE PTR [eax]
c000eb06:	3c 01                	cmp    al,0x1
c000eb08:	75 0e                	jne    c000eb18 <ACPI::detectPCI()+0x6c>
c000eb0a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb0f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb14:	eb 2a                	jmp    c000eb40 <ACPI::detectPCI()+0x94>
c000eb16:	66 90                	xchg   ax,ax
c000eb18:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000eb1c:	8a 00                	mov    al,BYTE PTR [eax]
c000eb1e:	3c 02                	cmp    al,0x2
c000eb20:	75 1e                	jne    c000eb40 <ACPI::detectPCI()+0x94>
c000eb22:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb27:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb2c:	74 12                	je     c000eb40 <ACPI::detectPCI()+0x94>
c000eb2e:	83 ec 0c             	sub    esp,0xc
c000eb31:	68 d8 dd 01 c0       	push   0xc001ddd8
c000eb36:	e8 3c 17 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000eb3b:	83 c4 10             	add    esp,0x10
c000eb3e:	66 90                	xchg   ax,ax
c000eb40:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000eb44:	83 f0 01             	xor    eax,0x1
c000eb47:	84 c0                	test   al,al
c000eb49:	74 41                	je     c000eb8c <ACPI::detectPCI()+0xe0>
c000eb4b:	e8 00 16 ff ff       	call   c0000150 <manualPCIProbe>
c000eb50:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000eb54:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000eb59:	75 0d                	jne    c000eb68 <ACPI::detectPCI()+0xbc>
c000eb5b:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb60:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000eb65:	eb 25                	jmp    c000eb8c <ACPI::detectPCI()+0xe0>
c000eb67:	90                   	nop
c000eb68:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000eb6d:	75 1d                	jne    c000eb8c <ACPI::detectPCI()+0xe0>
c000eb6f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000eb74:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000eb79:	74 11                	je     c000eb8c <ACPI::detectPCI()+0xe0>
c000eb7b:	83 ec 0c             	sub    esp,0xc
c000eb7e:	68 d8 dd 01 c0       	push   0xc001ddd8
c000eb83:	e8 ef 16 00 00       	call   c0010277 <Krnl::panic(char const*)>
c000eb88:	83 c4 10             	add    esp,0x10
c000eb8b:	90                   	nop
c000eb8c:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c000eb91:	0f 84 85 00 00 00    	je     c000ec1c <ACPI::detectPCI()+0x170>
c000eb97:	83 ec 0c             	sub    esp,0xc
c000eb9a:	68 63 de 01 c0       	push   0xc001de63
c000eb9f:	e8 4f 8e ff ff       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c000eba4:	83 c4 10             	add    esp,0x10
c000eba7:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000ebaf:	83 ec 0c             	sub    esp,0xc
c000ebb2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ebb6:	e8 de 8d ff ff       	call   c0007999 <malloc>
c000ebbb:	83 c4 10             	add    esp,0x10
c000ebbe:	89 c3                	mov    ebx,eax
c000ebc0:	83 ec 0c             	sub    esp,0xc
c000ebc3:	53                   	push   ebx
c000ebc4:	e8 6d 93 00 00       	call   c0017f36 <PCI::PCI()>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ebd0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ebd4:	83 ec 08             	sub    esp,0x8
c000ebd7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ebdb:	50                   	push   eax
c000ebdc:	e8 87 cf ff ff       	call   c000bb68 <Device::addChild(Device*)>
c000ebe1:	83 c4 10             	add    esp,0x10
c000ebe4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ebe8:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebea:	83 c0 08             	add    eax,0x8
c000ebed:	8b 00                	mov    eax,DWORD PTR [eax]
c000ebef:	80 7c 24 1e 00       	cmp    BYTE PTR [esp+0x1e],0x0
c000ebf4:	74 0a                	je     c000ec00 <ACPI::detectPCI()+0x154>
c000ebf6:	ba 01 00 00 00       	mov    edx,0x1
c000ebfb:	eb 0b                	jmp    c000ec08 <ACPI::detectPCI()+0x15c>
c000ebfd:	8d 76 00             	lea    esi,[esi+0x0]
c000ec00:	ba 02 00 00 00       	mov    edx,0x2
c000ec05:	8d 76 00             	lea    esi,[esi+0x0]
c000ec08:	6a 00                	push   0x0
c000ec0a:	6a 00                	push   0x0
c000ec0c:	52                   	push   edx
c000ec0d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec11:	ff d0                	call   eax
c000ec13:	83 c4 10             	add    esp,0x10
c000ec16:	e9 91 00 00 00       	jmp    c000ecac <ACPI::detectPCI()+0x200>
c000ec1b:	90                   	nop
c000ec1c:	83 ec 0c             	sub    esp,0xc
c000ec1f:	68 7b de 01 c0       	push   0xc001de7b
c000ec24:	e8 ca 8d ff ff       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c000ec29:	83 c4 10             	add    esp,0x10
c000ec2c:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000ec33:	83 ec 0c             	sub    esp,0xc
c000ec36:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ec3a:	e8 5a 8d ff ff       	call   c0007999 <malloc>
c000ec3f:	83 c4 10             	add    esp,0x10
c000ec42:	89 c3                	mov    ebx,eax
c000ec44:	83 ec 0c             	sub    esp,0xc
c000ec47:	53                   	push   ebx
c000ec48:	e8 15 9e 00 00       	call   c0018a62 <IDE::IDE()>
c000ec4d:	83 c4 10             	add    esp,0x10
c000ec50:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000ec54:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ec58:	83 ec 08             	sub    esp,0x8
c000ec5b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000ec5f:	50                   	push   eax
c000ec60:	e8 03 cf ff ff       	call   c000bb68 <Device::addChild(Device*)>
c000ec65:	83 c4 10             	add    esp,0x10
c000ec68:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec6c:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000ec76:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec7a:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000ec83:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec87:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000ec90:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000ec94:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec96:	83 c0 08             	add    eax,0x8
c000ec99:	8b 00                	mov    eax,DWORD PTR [eax]
c000ec9b:	6a 00                	push   0x0
c000ec9d:	6a 00                	push   0x0
c000ec9f:	6a 00                	push   0x0
c000eca1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000eca5:	ff d0                	call   eax
c000eca7:	83 c4 10             	add    esp,0x10
c000ecaa:	66 90                	xchg   ax,ax
c000ecac:	90                   	nop
c000ecad:	83 c4 28             	add    esp,0x28
c000ecb0:	5b                   	pop    ebx
c000ecb1:	c3                   	ret    
c000ecb2:	66 90                	xchg   ax,ax

c000ecb4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000ecb4:	83 ec 1c             	sub    esp,0x1c
c000ecb7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ecbb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000ecbe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ecc2:	8b 15 84 03 02 c0    	mov    edx,DWORD PTR ds:0xc0020384
c000ecc8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000eccc:	25 ff 00 00 00       	and    eax,0xff
c000ecd1:	83 ec 08             	sub    esp,0x8
c000ecd4:	50                   	push   eax
c000ecd5:	52                   	push   edx
c000ecd6:	e8 af 83 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c000ecdb:	83 c4 10             	add    esp,0x10
c000ecde:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000ece2:	8b 15 84 03 02 c0    	mov    edx,DWORD PTR ds:0xc0020384
c000ece8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ecec:	25 ff 00 00 00       	and    eax,0xff
c000ecf1:	83 ec 04             	sub    esp,0x4
c000ecf4:	6a 01                	push   0x1
c000ecf6:	50                   	push   eax
c000ecf7:	52                   	push   edx
c000ecf8:	e8 a3 84 ff ff       	call   c00071a0 <Computer::writeCMOS(unsigned char, unsigned char)>
c000ecfd:	83 c4 10             	add    esp,0x10
c000ed00:	90                   	nop
c000ed01:	83 c4 1c             	add    esp,0x1c
c000ed04:	c3                   	ret    
c000ed05:	90                   	nop
c000ed06:	66 90                	xchg   ax,ax

c000ed08 <ACPI::sleep()>:
c000ed08:	83 ec 0c             	sub    esp,0xc
c000ed0b:	a1 60 29 02 c0       	mov    eax,ds:0xc0022960
c000ed10:	85 c0                	test   eax,eax
c000ed12:	74 08                	je     c000ed1c <ACPI::sleep()+0x14>
c000ed14:	a1 60 29 02 c0       	mov    eax,ds:0xc0022960
c000ed19:	ff d0                	call   eax
c000ed1b:	90                   	nop
c000ed1c:	90                   	nop
c000ed1d:	83 c4 0c             	add    esp,0xc
c000ed20:	c3                   	ret    
c000ed21:	90                   	nop
c000ed22:	66 90                	xchg   ax,ax

c000ed24 <ACPI::open(int, int, void*)>:
c000ed24:	57                   	push   edi
c000ed25:	56                   	push   esi
c000ed26:	53                   	push   ebx
c000ed27:	81 ec 70 01 00 00    	sub    esp,0x170
c000ed2d:	83 ec 0c             	sub    esp,0xc
c000ed30:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000ed37:	e8 70 fd ff ff       	call   c000eaac <ACPI::detectPCI()>
c000ed3c:	83 c4 10             	add    esp,0x10
c000ed3f:	83 ec 0c             	sub    esp,0xc
c000ed42:	68 00 de 01 c0       	push   0xc001de00
c000ed47:	e8 a7 8c ff ff       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c000ed4c:	83 c4 10             	add    esp,0x10
c000ed4f:	83 ec 0c             	sub    esp,0xc
c000ed52:	68 90 de 01 c0       	push   0xc001de90
c000ed57:	e8 07 34 00 00       	call   c0012163 <Thr::loadKernelSymbolTable(char const*)>
c000ed5c:	83 c4 10             	add    esp,0x10
c000ed5f:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000ed67:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000ed72:	83 ec 0c             	sub    esp,0xc
c000ed75:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000ed7c:	e8 18 8c ff ff       	call   c0007999 <malloc>
c000ed81:	83 c4 10             	add    esp,0x10
c000ed84:	89 c3                	mov    ebx,eax
c000ed86:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c000ed8b:	83 ec 04             	sub    esp,0x4
c000ed8e:	50                   	push   eax
c000ed8f:	68 ae de 01 c0       	push   0xc001deae
c000ed94:	53                   	push   ebx
c000ed95:	e8 04 bf ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c000ed9a:	83 c4 10             	add    esp,0x10
c000ed9d:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000eda4:	83 ec 08             	sub    esp,0x8
c000eda7:	6a 01                	push   0x1
c000eda9:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edb0:	e8 a9 bf ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c000edb5:	83 c4 10             	add    esp,0x10
c000edb8:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000edbf:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000edc7:	75 17                	jne    c000ede0 <ACPI::open(int, int, void*)+0xbc>
c000edc9:	83 ec 0c             	sub    esp,0xc
c000edcc:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000edd3:	e8 e4 bf ff ff       	call   c000adbc <File::close()>
c000edd8:	83 c4 10             	add    esp,0x10
c000eddb:	eb 0b                	jmp    c000ede8 <ACPI::open(int, int, void*)+0xc4>
c000eddd:	8d 76 00             	lea    esi,[esi+0x0]
c000ede0:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000ede8:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000edf0:	74 1e                	je     c000ee10 <ACPI::open(int, int, void*)+0xec>
c000edf2:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000edf9:	8b 00                	mov    eax,DWORD PTR [eax]
c000edfb:	83 c0 08             	add    eax,0x8
c000edfe:	8b 00                	mov    eax,DWORD PTR [eax]
c000ee00:	83 ec 0c             	sub    esp,0xc
c000ee03:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000ee0a:	ff d0                	call   eax
c000ee0c:	83 c4 10             	add    esp,0x10
c000ee0f:	90                   	nop
c000ee10:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000ee17:	83 f0 01             	xor    eax,0x1
c000ee1a:	84 c0                	test   al,al
c000ee1c:	74 42                	je     c000ee60 <ACPI::open(int, int, void*)+0x13c>
c000ee1e:	83 ec 0c             	sub    esp,0xc
c000ee21:	68 cc de 01 c0       	push   0xc001decc
c000ee26:	e8 c8 8b ff ff       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c000ee2b:	83 c4 10             	add    esp,0x10
c000ee2e:	83 ec 04             	sub    esp,0x4
c000ee31:	6a 0c                	push   0xc
c000ee33:	68 e7 de 01 c0       	push   0xc001dee7
c000ee38:	68 f8 de 01 c0       	push   0xc001def8
c000ee3d:	e8 20 1b 00 00       	call   c0010962 <Reg::readIntWithDefault(char*, char*, int)>
c000ee42:	83 c4 10             	add    esp,0x10
c000ee45:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000ee4c:	83 ec 0c             	sub    esp,0xc
c000ee4f:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000ee56:	e8 84 a8 ff ff       	call   c00096df <Virt::setupPageSwapping(int)>
c000ee5b:	83 c4 10             	add    esp,0x10
c000ee5e:	66 90                	xchg   ax,ax
c000ee60:	83 ec 0c             	sub    esp,0xc
c000ee63:	68 80 cf 01 c0       	push   0xc001cf80
c000ee68:	e8 86 8b ff ff       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c000ee6d:	83 c4 10             	add    esp,0x10
c000ee70:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000ee77:	83 ec 08             	sub    esp,0x8
c000ee7a:	6a 12                	push   0x12
c000ee7c:	50                   	push   eax
c000ee7d:	e8 fe cf ff ff       	call   c000be80 <getDevicesOfType(DeviceType)>
c000ee82:	83 c4 0c             	add    esp,0xc
c000ee85:	8d 76 00             	lea    esi,[esi+0x0]
c000ee88:	83 ec 0c             	sub    esp,0xc
c000ee8b:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000ee92:	50                   	push   eax
c000ee93:	e8 e4 d4 00 00       	call   c001c37c <LinkedList<Device>::isEmpty()>
c000ee98:	83 c4 10             	add    esp,0x10
c000ee9b:	83 f0 01             	xor    eax,0x1
c000ee9e:	84 c0                	test   al,al
c000eea0:	0f 84 46 01 00 00    	je     c000efec <ACPI::open(int, int, void*)+0x2c8>
c000eea6:	83 ec 0c             	sub    esp,0xc
c000eea9:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eeb0:	50                   	push   eax
c000eeb1:	e8 e2 d4 00 00       	call   c001c398 <LinkedList<Device>::getFirstElement()>
c000eeb6:	83 c4 10             	add    esp,0x10
c000eeb9:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000eec0:	83 ec 0c             	sub    esp,0xc
c000eec3:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eeca:	50                   	push   eax
c000eecb:	e8 d0 d4 00 00       	call   c001c3a0 <LinkedList<Device>::removeFirst()>
c000eed0:	83 c4 10             	add    esp,0x10
c000eed3:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000eeda:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000eee1:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000eee8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000eeec:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000eef2:	ba 09 00 00 00       	mov    edx,0x9
c000eef7:	fc                   	cld    
c000eef8:	89 c7                	mov    edi,eax
c000eefa:	89 de                	mov    esi,ebx
c000eefc:	89 d1                	mov    ecx,edx
c000eefe:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef00:	83 ec 08             	sub    esp,0x8
c000ef03:	8d 44 24 38          	lea    eax,[esp+0x38]
c000ef07:	50                   	push   eax
c000ef08:	83 ec 24             	sub    esp,0x24
c000ef0b:	89 e0                	mov    eax,esp
c000ef0d:	89 c3                	mov    ebx,eax
c000ef0f:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000ef13:	ba 09 00 00 00       	mov    edx,0x9
c000ef18:	89 df                	mov    edi,ebx
c000ef1a:	89 c6                	mov    esi,eax
c000ef1c:	89 d1                	mov    ecx,edx
c000ef1e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000ef20:	e8 f3 94 00 00       	call   c0018418 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000ef25:	83 c4 30             	add    esp,0x30
c000ef28:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000ef2f:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000ef37:	0f 84 4b ff ff ff    	je     c000ee88 <ACPI::open(int, int, void*)+0x164>
c000ef3d:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000ef52:	e8 42 8a ff ff       	call   c0007999 <malloc>
c000ef57:	83 c4 10             	add    esp,0x10
c000ef5a:	89 c3                	mov    ebx,eax
c000ef5c:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c000ef61:	83 ec 04             	sub    esp,0x4
c000ef64:	50                   	push   eax
c000ef65:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef6c:	53                   	push   ebx
c000ef6d:	e8 2c bd ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c000ef72:	83 c4 10             	add    esp,0x10
c000ef75:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000ef7c:	83 ec 0c             	sub    esp,0xc
c000ef7f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000ef86:	e8 41 c0 ff ff       	call   c000afcc <File::exists()>
c000ef8b:	83 c4 10             	add    esp,0x10
c000ef8e:	84 c0                	test   al,al
c000ef90:	74 2a                	je     c000efbc <ACPI::open(int, int, void*)+0x298>
c000ef92:	83 ec 08             	sub    esp,0x8
c000ef95:	6a 01                	push   0x1
c000ef97:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000ef9e:	e8 37 3c 00 00       	call   c0012bda <Thr::loadDLL(char const*, bool)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 ec 08             	sub    esp,0x8
c000efa9:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000efb0:	50                   	push   eax
c000efb1:	e8 55 3e 00 00       	call   c0012e0b <Thr::executeDLL(unsigned long, void*)>
c000efb6:	83 c4 10             	add    esp,0x10
c000efb9:	8d 76 00             	lea    esi,[esi+0x0]
c000efbc:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000efc4:	0f 84 be fe ff ff    	je     c000ee88 <ACPI::open(int, int, void*)+0x164>
c000efca:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000efd1:	8b 00                	mov    eax,DWORD PTR [eax]
c000efd3:	83 c0 08             	add    eax,0x8
c000efd6:	8b 00                	mov    eax,DWORD PTR [eax]
c000efd8:	83 ec 0c             	sub    esp,0xc
c000efdb:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000efe2:	ff d0                	call   eax
c000efe4:	83 c4 10             	add    esp,0x10
c000efe7:	e9 9c fe ff ff       	jmp    c000ee88 <ACPI::open(int, int, void*)+0x164>
c000efec:	83 ec 0c             	sub    esp,0xc
c000efef:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000eff6:	50                   	push   eax
c000eff7:	e8 7c d3 00 00       	call   c001c378 <LinkedList<Device>::~LinkedList()>
c000effc:	83 c4 10             	add    esp,0x10
c000efff:	8b 1d 84 03 02 c0    	mov    ebx,DWORD PTR ds:0xc0020384
c000f005:	83 ec 08             	sub    esp,0x8
c000f008:	6a 01                	push   0x1
c000f00a:	68 ff de 01 c0       	push   0xc001deff
c000f00f:	e8 c6 3b 00 00       	call   c0012bda <Thr::loadDLL(char const*, bool)>
c000f014:	83 c4 10             	add    esp,0x10
c000f017:	83 ec 08             	sub    esp,0x8
c000f01a:	53                   	push   ebx
c000f01b:	50                   	push   eax
c000f01c:	e8 ea 3d 00 00       	call   c0012e0b <Thr::executeDLL(unsigned long, void*)>
c000f021:	83 c4 10             	add    esp,0x10
c000f024:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000f029:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f02f:	83 e0 04             	and    eax,0x4
c000f032:	84 c0                	test   al,al
c000f034:	0f 84 16 01 00 00    	je     c000f150 <ACPI::open(int, int, void*)+0x42c>
c000f03a:	83 ec 0c             	sub    esp,0xc
c000f03d:	68 1c df 01 c0       	push   0xc001df1c
c000f042:	e8 ac 89 ff ff       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c000f047:	83 c4 10             	add    esp,0x10
c000f04a:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000f055:	83 ec 0c             	sub    esp,0xc
c000f058:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000f05f:	e8 35 89 ff ff       	call   c0007999 <malloc>
c000f064:	83 c4 10             	add    esp,0x10
c000f067:	89 c3                	mov    ebx,eax
c000f069:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c000f06e:	83 ec 04             	sub    esp,0x4
c000f071:	50                   	push   eax
c000f072:	68 39 df 01 c0       	push   0xc001df39
c000f077:	53                   	push   ebx
c000f078:	e8 21 bc ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c000f07d:	83 c4 10             	add    esp,0x10
c000f080:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000f087:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f08f:	74 1b                	je     c000f0ac <ACPI::open(int, int, void*)+0x388>
c000f091:	83 ec 0c             	sub    esp,0xc
c000f094:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f09b:	e8 2c bf ff ff       	call   c000afcc <File::exists()>
c000f0a0:	83 c4 10             	add    esp,0x10
c000f0a3:	84 c0                	test   al,al
c000f0a5:	74 05                	je     c000f0ac <ACPI::open(int, int, void*)+0x388>
c000f0a7:	b0 01                	mov    al,0x1
c000f0a9:	eb 05                	jmp    c000f0b0 <ACPI::open(int, int, void*)+0x38c>
c000f0ab:	90                   	nop
c000f0ac:	b0 00                	mov    al,0x0
c000f0ae:	66 90                	xchg   ax,ax
c000f0b0:	84 c0                	test   al,al
c000f0b2:	74 28                	je     c000f0dc <ACPI::open(int, int, void*)+0x3b8>
c000f0b4:	83 ec 08             	sub    esp,0x8
c000f0b7:	6a 01                	push   0x1
c000f0b9:	68 39 df 01 c0       	push   0xc001df39
c000f0be:	e8 17 3b 00 00       	call   c0012bda <Thr::loadDLL(char const*, bool)>
c000f0c3:	83 c4 10             	add    esp,0x10
c000f0c6:	83 ec 08             	sub    esp,0x8
c000f0c9:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000f0d0:	50                   	push   eax
c000f0d1:	e8 35 3d 00 00       	call   c0012e0b <Thr::executeDLL(unsigned long, void*)>
c000f0d6:	83 c4 10             	add    esp,0x10
c000f0d9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0dc:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0e4:	74 2a                	je     c000f110 <ACPI::open(int, int, void*)+0x3ec>
c000f0e6:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000f0ee:	74 20                	je     c000f110 <ACPI::open(int, int, void*)+0x3ec>
c000f0f0:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000f0f7:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0f9:	83 c0 08             	add    eax,0x8
c000f0fc:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0fe:	83 ec 0c             	sub    esp,0xc
c000f101:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000f108:	ff d0                	call   eax
c000f10a:	83 c4 10             	add    esp,0x10
c000f10d:	8d 76 00             	lea    esi,[esi+0x0]
c000f110:	a1 88 2b 02 c0       	mov    eax,ds:0xc0022b88
c000f115:	83 ec 08             	sub    esp,0x8
c000f118:	68 56 df 01 c0       	push   0xc001df56
c000f11d:	50                   	push   eax
c000f11e:	e8 31 f2 ff ff       	call   c000e354 <findDataTable(unsigned char*, char*)>
c000f123:	83 c4 10             	add    esp,0x10
c000f126:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000f12d:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000f135:	74 19                	je     c000f150 <ACPI::open(int, int, void*)+0x42c>
c000f137:	83 ec 08             	sub    esp,0x8
c000f13a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000f141:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000f148:	e8 67 fb ff ff       	call   c000ecb4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000f14d:	83 c4 10             	add    esp,0x10
c000f150:	b8 00 00 00 00       	mov    eax,0x0
c000f155:	81 c4 70 01 00 00    	add    esp,0x170
c000f15b:	5b                   	pop    ebx
c000f15c:	5e                   	pop    esi
c000f15d:	5f                   	pop    edi
c000f15e:	c3                   	ret    
c000f15f:	90                   	nop

c000f160 <CPU::close(int, int, void*)>:
c000f160:	31 c0                	xor    eax,eax
c000f162:	c3                   	ret    
c000f163:	90                   	nop

c000f164 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000f164:	60                   	pusha  
c000f165:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f169:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f16d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000f171:	9c                   	pushf  
c000f172:	fa                   	cli    
c000f173:	0f 09                	wbinvd 
c000f175:	0f 30                	wrmsr  
c000f177:	9d                   	popf   
c000f178:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000f17c:	89 02                	mov    DWORD PTR [edx],eax
c000f17e:	61                   	popa   
c000f17f:	c3                   	ret    

c000f180 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000f180:	60                   	pusha  
c000f181:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f185:	9c                   	pushf  
c000f186:	fa                   	cli    
c000f187:	0f 09                	wbinvd 
c000f189:	31 c0                	xor    eax,eax
c000f18b:	31 d2                	xor    edx,edx
c000f18d:	0f 32                	rdmsr  
c000f18f:	9d                   	popf   
c000f190:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000f194:	89 02                	mov    DWORD PTR [edx],eax
c000f196:	61                   	popa   
c000f197:	c3                   	ret    

c000f198 <CPU::AMD_K6_writeback(int, int, int)>:
c000f198:	56                   	push   esi
c000f199:	53                   	push   ebx
c000f19a:	83 ec 10             	sub    esp,0x10
c000f19d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f1a1:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000f1a6:	75 5d                	jne    c000f205 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1a8:	83 f8 08             	cmp    eax,0x8
c000f1ab:	75 09                	jne    c000f1b6 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000f1ad:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000f1b2:	7e 13                	jle    c000f1c7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1b4:	eb 30                	jmp    c000f1e6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1b6:	83 f8 06             	cmp    eax,0x6
c000f1b9:	7c 4a                	jl     c000f205 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1bb:	83 f8 07             	cmp    eax,0x7
c000f1be:	7e 07                	jle    c000f1c7 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000f1c0:	83 f8 09             	cmp    eax,0x9
c000f1c3:	74 21                	je     c000f1e6 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000f1c5:	eb 3e                	jmp    c000f205 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000f1c7:	89 e6                	mov    esi,esp
c000f1c9:	8b 1d a8 03 02 c0    	mov    ebx,DWORD PTR ds:0xc00203a8
c000f1cf:	56                   	push   esi
c000f1d0:	c1 eb 15             	shr    ebx,0x15
c000f1d3:	68 82 00 00 c0       	push   0xc0000082
c000f1d8:	83 e3 7e             	and    ebx,0x7e
c000f1db:	e8 a0 ff ff ff       	call   c000f180 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1e0:	56                   	push   esi
c000f1e1:	6a 00                	push   0x0
c000f1e3:	53                   	push   ebx
c000f1e4:	eb 12                	jmp    c000f1f8 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000f1e6:	89 e3                	mov    ebx,esp
c000f1e8:	53                   	push   ebx
c000f1e9:	68 82 00 00 c0       	push   0xc0000082
c000f1ee:	e8 8d ff ff ff       	call   c000f180 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000f1f3:	53                   	push   ebx
c000f1f4:	6a 00                	push   0x0
c000f1f6:	6a 00                	push   0x0
c000f1f8:	68 82 00 00 c0       	push   0xc0000082
c000f1fd:	e8 62 ff ff ff       	call   c000f164 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000f202:	83 c4 18             	add    esp,0x18
c000f205:	83 c4 10             	add    esp,0x10
c000f208:	5b                   	pop    ebx
c000f209:	5e                   	pop    esi
c000f20a:	c3                   	ret    
c000f20b:	90                   	nop

c000f20c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000f20c:	55                   	push   ebp
c000f20d:	57                   	push   edi
c000f20e:	56                   	push   esi
c000f20f:	53                   	push   ebx
c000f210:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f214:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000f218:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000f21c:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000f220:	39 05 10 f3 01 c0    	cmp    DWORD PTR ds:0xc001f310,eax
c000f226:	75 23                	jne    c000f24b <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000f228:	a1 ec 2d 02 c0       	mov    eax,ds:0xc0022dec
c000f22d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f231:	89 06                	mov    DWORD PTR [esi],eax
c000f233:	a1 e8 2d 02 c0       	mov    eax,ds:0xc0022de8
c000f238:	89 07                	mov    DWORD PTR [edi],eax
c000f23a:	a1 e4 2d 02 c0       	mov    eax,ds:0xc0022de4
c000f23f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000f242:	a1 e0 2d 02 c0       	mov    eax,ds:0xc0022de0
c000f247:	89 02                	mov    DWORD PTR [edx],eax
c000f249:	eb 3f                	jmp    c000f28a <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000f24b:	31 c9                	xor    ecx,ecx
c000f24d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f251:	0f a2                	cpuid  
c000f253:	89 06                	mov    DWORD PTR [esi],eax
c000f255:	89 1f                	mov    DWORD PTR [edi],ebx
c000f257:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f25b:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000f25e:	89 10                	mov    DWORD PTR [eax],edx
c000f260:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f264:	a3 10 f3 01 c0       	mov    ds:0xc001f310,eax
c000f269:	8b 06                	mov    eax,DWORD PTR [esi]
c000f26b:	a3 ec 2d 02 c0       	mov    ds:0xc0022dec,eax
c000f270:	8b 07                	mov    eax,DWORD PTR [edi]
c000f272:	a3 e8 2d 02 c0       	mov    ds:0xc0022de8,eax
c000f277:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000f27a:	a3 e4 2d 02 c0       	mov    ds:0xc0022de4,eax
c000f27f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f283:	8b 00                	mov    eax,DWORD PTR [eax]
c000f285:	a3 e0 2d 02 c0       	mov    ds:0xc0022de0,eax
c000f28a:	5b                   	pop    ebx
c000f28b:	5e                   	pop    esi
c000f28c:	5f                   	pop    edi
c000f28d:	5d                   	pop    ebp
c000f28e:	c3                   	ret    
c000f28f:	90                   	nop

c000f290 <CPU::cpuidCheckEDX(unsigned int)>:
c000f290:	83 ec 10             	sub    esp,0x10
c000f293:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f297:	50                   	push   eax
c000f298:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f29c:	50                   	push   eax
c000f29d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2a1:	50                   	push   eax
c000f2a2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2a6:	50                   	push   eax
c000f2a7:	6a 01                	push   0x1
c000f2a9:	e8 5e ff ff ff       	call   c000f20c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2ae:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2b2:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c000f2b6:	0f 95 c0             	setne  al
c000f2b9:	83 c4 24             	add    esp,0x24
c000f2bc:	c3                   	ret    
c000f2bd:	90                   	nop

c000f2be <CPU::cpuidCheckECX(unsigned int)>:
c000f2be:	83 ec 10             	sub    esp,0x10
c000f2c1:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2c5:	50                   	push   eax
c000f2c6:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2ca:	50                   	push   eax
c000f2cb:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2cf:	50                   	push   eax
c000f2d0:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2d4:	50                   	push   eax
c000f2d5:	6a 01                	push   0x1
c000f2d7:	e8 30 ff ff ff       	call   c000f20c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f2dc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2e0:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f2e4:	0f 95 c0             	setne  al
c000f2e7:	83 c4 24             	add    esp,0x24
c000f2ea:	c3                   	ret    
c000f2eb:	90                   	nop

c000f2ec <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c000f2ec:	83 ec 10             	sub    esp,0x10
c000f2ef:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2f3:	50                   	push   eax
c000f2f4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2f8:	50                   	push   eax
c000f2f9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f2fd:	50                   	push   eax
c000f2fe:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f302:	50                   	push   eax
c000f303:	6a 07                	push   0x7
c000f305:	e8 02 ff ff ff       	call   c000f20c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f30a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f30e:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c000f312:	0f 95 c0             	setne  al
c000f315:	83 c4 24             	add    esp,0x24
c000f318:	c3                   	ret    
c000f319:	90                   	nop

c000f31a <CPU::cpuidCheckExtendedECX(unsigned int)>:
c000f31a:	83 ec 10             	sub    esp,0x10
c000f31d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f321:	50                   	push   eax
c000f322:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f326:	50                   	push   eax
c000f327:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f32b:	50                   	push   eax
c000f32c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000f330:	50                   	push   eax
c000f331:	6a 07                	push   0x7
c000f333:	e8 d4 fe ff ff       	call   c000f20c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f338:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f33c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c000f340:	0f 95 c0             	setne  al
c000f343:	83 c4 24             	add    esp,0x24
c000f346:	c3                   	ret    
c000f347:	90                   	nop

c000f348 <CPU::CPU()>:
c000f348:	83 ec 0c             	sub    esp,0xc
c000f34b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f34f:	83 ec 08             	sub    esp,0x8
c000f352:	68 79 e0 01 c0       	push   0xc001e079
c000f357:	50                   	push   eax
c000f358:	e8 a3 c9 ff ff       	call   c000bd00 <Device::Device(char const*)>
c000f35d:	83 c4 10             	add    esp,0x10
c000f360:	ba 00 e1 01 c0       	mov    edx,0xc001e100
c000f365:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f369:	89 10                	mov    DWORD PTR [eax],edx
c000f36b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f36f:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c000f379:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f37d:	05 78 01 00 00       	add    eax,0x178
c000f382:	83 ec 0c             	sub    esp,0xc
c000f385:	50                   	push   eax
c000f386:	e8 d3 7e ff ff       	call   c000725e <GDT::GDT()>
c000f38b:	83 c4 10             	add    esp,0x10
c000f38e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f392:	05 7c 09 00 00       	add    eax,0x97c
c000f397:	83 ec 0c             	sub    esp,0xc
c000f39a:	50                   	push   eax
c000f39b:	e8 f4 80 ff ff       	call   c0007494 <IDT::IDT()>
c000f3a0:	83 c4 10             	add    esp,0x10
c000f3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3a7:	05 7c 11 00 00       	add    eax,0x117c
c000f3ac:	83 ec 0c             	sub    esp,0xc
c000f3af:	50                   	push   eax
c000f3b0:	e8 63 9a ff ff       	call   c0008e18 <TSS::TSS()>
c000f3b5:	83 c4 10             	add    esp,0x10
c000f3b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3bc:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c000f3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f3c7:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c000f3d1:	90                   	nop
c000f3d2:	83 c4 0c             	add    esp,0xc
c000f3d5:	c3                   	ret    

c000f3d6 <CPU::displayFeatures()>:
c000f3d6:	c3                   	ret    
c000f3d7:	90                   	nop

c000f3d8 <CPU::detectFeatures()>:
c000f3d8:	55                   	push   ebp
c000f3d9:	57                   	push   edi
c000f3da:	56                   	push   esi
c000f3db:	53                   	push   ebx
c000f3dc:	83 ec 30             	sub    esp,0x30
c000f3df:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000f3e3:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c000f3ed:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c000f3f4:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c000f3fa:	6a 0d                	push   0xd
c000f3fc:	6a 00                	push   0x0
c000f3fe:	55                   	push   ebp
c000f3ff:	e8 ec 10 ff ff       	call   c00004f0 <memset>
c000f404:	83 c4 10             	add    esp,0x10
c000f407:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000f40c:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c000f413:	0f 84 d5 05 00 00    	je     c000f9ee <CPU::detectFeatures()+0x616>
c000f419:	83 ec 0c             	sub    esp,0xc
c000f41c:	89 ef                	mov    edi,ebp
c000f41e:	6a 10                	push   0x10
c000f420:	e8 6b fe ff ff       	call   c000f290 <CPU::cpuidCheckEDX(unsigned int)>
c000f425:	83 e0 01             	and    eax,0x1
c000f428:	8d 14 00             	lea    edx,[eax+eax*1]
c000f42b:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f431:	83 e0 fd             	and    eax,0xfffffffd
c000f434:	09 d0                	or     eax,edx
c000f436:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f43c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c000f443:	e8 48 fe ff ff       	call   c000f290 <CPU::cpuidCheckEDX(unsigned int)>
c000f448:	83 e0 01             	and    eax,0x1
c000f44b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f452:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f458:	83 e0 fb             	and    eax,0xfffffffb
c000f45b:	09 d0                	or     eax,edx
c000f45d:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f463:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f46a:	e8 21 fe ff ff       	call   c000f290 <CPU::cpuidCheckEDX(unsigned int)>
c000f46f:	83 e0 01             	and    eax,0x1
c000f472:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f479:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f47f:	83 e0 f7             	and    eax,0xfffffff7
c000f482:	09 d0                	or     eax,edx
c000f484:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f48a:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c000f491:	e8 fa fd ff ff       	call   c000f290 <CPU::cpuidCheckEDX(unsigned int)>
c000f496:	83 e0 01             	and    eax,0x1
c000f499:	c1 e0 04             	shl    eax,0x4
c000f49c:	88 c2                	mov    dl,al
c000f49e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4a4:	83 e0 ef             	and    eax,0xffffffef
c000f4a7:	09 d0                	or     eax,edx
c000f4a9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4af:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c000f4b6:	e8 d5 fd ff ff       	call   c000f290 <CPU::cpuidCheckEDX(unsigned int)>
c000f4bb:	83 e0 01             	and    eax,0x1
c000f4be:	c1 e0 05             	shl    eax,0x5
c000f4c1:	88 c2                	mov    dl,al
c000f4c3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f4c9:	83 e0 df             	and    eax,0xffffffdf
c000f4cc:	09 d0                	or     eax,edx
c000f4ce:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f4d4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c000f4db:	e8 b0 fd ff ff       	call   c000f290 <CPU::cpuidCheckEDX(unsigned int)>
c000f4e0:	83 e0 01             	and    eax,0x1
c000f4e3:	8d 14 00             	lea    edx,[eax+eax*1]
c000f4e6:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f4ec:	83 e0 fd             	and    eax,0xfffffffd
c000f4ef:	09 d0                	or     eax,edx
c000f4f1:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f4f7:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c000f4fe:	e8 8d fd ff ff       	call   c000f290 <CPU::cpuidCheckEDX(unsigned int)>
c000f503:	83 e0 01             	and    eax,0x1
c000f506:	c1 e0 06             	shl    eax,0x6
c000f509:	88 c2                	mov    dl,al
c000f50b:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f511:	83 e0 bf             	and    eax,0xffffffbf
c000f514:	09 d0                	or     eax,edx
c000f516:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f51c:	58                   	pop    eax
c000f51d:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f521:	50                   	push   eax
c000f522:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f526:	50                   	push   eax
c000f527:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f52b:	56                   	push   esi
c000f52c:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f530:	50                   	push   eax
c000f531:	6a 00                	push   0x0
c000f533:	e8 d4 fc ff ff       	call   c000f20c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f538:	b8 04 00 00 00       	mov    eax,0x4
c000f53d:	89 c1                	mov    ecx,eax
c000f53f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f541:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c000f547:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c000f54b:	89 c1                	mov    ecx,eax
c000f54d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f54f:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c000f555:	8d 74 24 38          	lea    esi,[esp+0x38]
c000f559:	89 c1                	mov    ecx,eax
c000f55b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000f55d:	83 c4 18             	add    esp,0x18
c000f560:	68 88 df 01 c0       	push   0xc001df88
c000f565:	55                   	push   ebp
c000f566:	e8 95 11 ff ff       	call   c0000700 <strcmp>
c000f56b:	83 c4 10             	add    esp,0x10
c000f56e:	85 c0                	test   eax,eax
c000f570:	75 0f                	jne    c000f581 <CPU::detectFeatures()+0x1a9>
c000f572:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c000f57c:	e9 22 02 00 00       	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f581:	50                   	push   eax
c000f582:	50                   	push   eax
c000f583:	68 95 df 01 c0       	push   0xc001df95
c000f588:	55                   	push   ebp
c000f589:	e8 72 11 ff ff       	call   c0000700 <strcmp>
c000f58e:	83 c4 10             	add    esp,0x10
c000f591:	85 c0                	test   eax,eax
c000f593:	74 dd                	je     c000f572 <CPU::detectFeatures()+0x19a>
c000f595:	50                   	push   eax
c000f596:	50                   	push   eax
c000f597:	68 a2 df 01 c0       	push   0xc001dfa2
c000f59c:	55                   	push   ebp
c000f59d:	e8 5e 11 ff ff       	call   c0000700 <strcmp>
c000f5a2:	83 c4 10             	add    esp,0x10
c000f5a5:	85 c0                	test   eax,eax
c000f5a7:	74 2a                	je     c000f5d3 <CPU::detectFeatures()+0x1fb>
c000f5a9:	50                   	push   eax
c000f5aa:	50                   	push   eax
c000f5ab:	68 af df 01 c0       	push   0xc001dfaf
c000f5b0:	55                   	push   ebp
c000f5b1:	e8 4a 11 ff ff       	call   c0000700 <strcmp>
c000f5b6:	83 c4 10             	add    esp,0x10
c000f5b9:	85 c0                	test   eax,eax
c000f5bb:	74 16                	je     c000f5d3 <CPU::detectFeatures()+0x1fb>
c000f5bd:	50                   	push   eax
c000f5be:	50                   	push   eax
c000f5bf:	68 bc df 01 c0       	push   0xc001dfbc
c000f5c4:	55                   	push   ebp
c000f5c5:	e8 36 11 ff ff       	call   c0000700 <strcmp>
c000f5ca:	83 c4 10             	add    esp,0x10
c000f5cd:	85 c0                	test   eax,eax
c000f5cf:	74 48                	je     c000f619 <CPU::detectFeatures()+0x241>
c000f5d1:	eb 0f                	jmp    c000f5e2 <CPU::detectFeatures()+0x20a>
c000f5d3:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c000f5dd:	e9 c1 01 00 00       	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f5e2:	50                   	push   eax
c000f5e3:	50                   	push   eax
c000f5e4:	68 c9 df 01 c0       	push   0xc001dfc9
c000f5e9:	55                   	push   ebp
c000f5ea:	e8 11 11 ff ff       	call   c0000700 <strcmp>
c000f5ef:	83 c4 10             	add    esp,0x10
c000f5f2:	85 c0                	test   eax,eax
c000f5f4:	74 23                	je     c000f619 <CPU::detectFeatures()+0x241>
c000f5f6:	57                   	push   edi
c000f5f7:	57                   	push   edi
c000f5f8:	68 d6 df 01 c0       	push   0xc001dfd6
c000f5fd:	55                   	push   ebp
c000f5fe:	e8 fd 10 ff ff       	call   c0000700 <strcmp>
c000f603:	83 c4 10             	add    esp,0x10
c000f606:	85 c0                	test   eax,eax
c000f608:	75 1e                	jne    c000f628 <CPU::detectFeatures()+0x250>
c000f60a:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000f614:	e9 8a 01 00 00       	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f619:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c000f623:	e9 7b 01 00 00       	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f628:	56                   	push   esi
c000f629:	56                   	push   esi
c000f62a:	68 e3 df 01 c0       	push   0xc001dfe3
c000f62f:	55                   	push   ebp
c000f630:	e8 cb 10 ff ff       	call   c0000700 <strcmp>
c000f635:	83 c4 10             	add    esp,0x10
c000f638:	85 c0                	test   eax,eax
c000f63a:	75 0f                	jne    c000f64b <CPU::detectFeatures()+0x273>
c000f63c:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c000f646:	e9 58 01 00 00       	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f64b:	51                   	push   ecx
c000f64c:	51                   	push   ecx
c000f64d:	68 a2 df 01 c0       	push   0xc001dfa2
c000f652:	55                   	push   ebp
c000f653:	e8 a8 10 ff ff       	call   c0000700 <strcmp>
c000f658:	83 c4 10             	add    esp,0x10
c000f65b:	85 c0                	test   eax,eax
c000f65d:	75 0f                	jne    c000f66e <CPU::detectFeatures()+0x296>
c000f65f:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c000f669:	e9 35 01 00 00       	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f66e:	52                   	push   edx
c000f66f:	52                   	push   edx
c000f670:	68 f0 df 01 c0       	push   0xc001dff0
c000f675:	55                   	push   ebp
c000f676:	e8 85 10 ff ff       	call   c0000700 <strcmp>
c000f67b:	83 c4 10             	add    esp,0x10
c000f67e:	85 c0                	test   eax,eax
c000f680:	75 0f                	jne    c000f691 <CPU::detectFeatures()+0x2b9>
c000f682:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c000f68c:	e9 12 01 00 00       	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f691:	50                   	push   eax
c000f692:	50                   	push   eax
c000f693:	68 fd df 01 c0       	push   0xc001dffd
c000f698:	55                   	push   ebp
c000f699:	e8 62 10 ff ff       	call   c0000700 <strcmp>
c000f69e:	83 c4 10             	add    esp,0x10
c000f6a1:	85 c0                	test   eax,eax
c000f6a3:	75 0f                	jne    c000f6b4 <CPU::detectFeatures()+0x2dc>
c000f6a5:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c000f6af:	e9 ef 00 00 00       	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f6b4:	50                   	push   eax
c000f6b5:	50                   	push   eax
c000f6b6:	68 0a e0 01 c0       	push   0xc001e00a
c000f6bb:	55                   	push   ebp
c000f6bc:	e8 3f 10 ff ff       	call   c0000700 <strcmp>
c000f6c1:	83 c4 10             	add    esp,0x10
c000f6c4:	85 c0                	test   eax,eax
c000f6c6:	75 0f                	jne    c000f6d7 <CPU::detectFeatures()+0x2ff>
c000f6c8:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c000f6d2:	e9 cc 00 00 00       	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f6d7:	50                   	push   eax
c000f6d8:	50                   	push   eax
c000f6d9:	68 17 e0 01 c0       	push   0xc001e017
c000f6de:	55                   	push   ebp
c000f6df:	e8 1c 10 ff ff       	call   c0000700 <strcmp>
c000f6e4:	83 c4 10             	add    esp,0x10
c000f6e7:	85 c0                	test   eax,eax
c000f6e9:	75 0f                	jne    c000f6fa <CPU::detectFeatures()+0x322>
c000f6eb:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c000f6f5:	e9 a9 00 00 00       	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f6fa:	50                   	push   eax
c000f6fb:	50                   	push   eax
c000f6fc:	68 24 e0 01 c0       	push   0xc001e024
c000f701:	55                   	push   ebp
c000f702:	e8 f9 0f ff ff       	call   c0000700 <strcmp>
c000f707:	83 c4 10             	add    esp,0x10
c000f70a:	85 c0                	test   eax,eax
c000f70c:	75 0f                	jne    c000f71d <CPU::detectFeatures()+0x345>
c000f70e:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c000f718:	e9 86 00 00 00       	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f71d:	50                   	push   eax
c000f71e:	50                   	push   eax
c000f71f:	68 31 e0 01 c0       	push   0xc001e031
c000f724:	55                   	push   ebp
c000f725:	e8 d6 0f ff ff       	call   c0000700 <strcmp>
c000f72a:	83 c4 10             	add    esp,0x10
c000f72d:	85 c0                	test   eax,eax
c000f72f:	75 0c                	jne    c000f73d <CPU::detectFeatures()+0x365>
c000f731:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c000f73b:	eb 66                	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f73d:	50                   	push   eax
c000f73e:	50                   	push   eax
c000f73f:	68 3e e0 01 c0       	push   0xc001e03e
c000f744:	55                   	push   ebp
c000f745:	e8 b6 0f ff ff       	call   c0000700 <strcmp>
c000f74a:	83 c4 10             	add    esp,0x10
c000f74d:	85 c0                	test   eax,eax
c000f74f:	75 0c                	jne    c000f75d <CPU::detectFeatures()+0x385>
c000f751:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c000f75b:	eb 46                	jmp    c000f7a3 <CPU::detectFeatures()+0x3cb>
c000f75d:	57                   	push   edi
c000f75e:	57                   	push   edi
c000f75f:	68 4b e0 01 c0       	push   0xc001e04b
c000f764:	55                   	push   ebp
c000f765:	e8 96 0f ff ff       	call   c0000700 <strcmp>
c000f76a:	83 c4 10             	add    esp,0x10
c000f76d:	85 c0                	test   eax,eax
c000f76f:	74 e0                	je     c000f751 <CPU::detectFeatures()+0x379>
c000f771:	56                   	push   esi
c000f772:	56                   	push   esi
c000f773:	68 58 e0 01 c0       	push   0xc001e058
c000f778:	55                   	push   ebp
c000f779:	e8 82 0f ff ff       	call   c0000700 <strcmp>
c000f77e:	83 c4 10             	add    esp,0x10
c000f781:	85 c0                	test   eax,eax
c000f783:	74 cc                	je     c000f751 <CPU::detectFeatures()+0x379>
c000f785:	51                   	push   ecx
c000f786:	51                   	push   ecx
c000f787:	68 65 e0 01 c0       	push   0xc001e065
c000f78c:	55                   	push   ebp
c000f78d:	e8 6e 0f ff ff       	call   c0000700 <strcmp>
c000f792:	83 c4 10             	add    esp,0x10
c000f795:	85 c0                	test   eax,eax
c000f797:	74 b8                	je     c000f751 <CPU::detectFeatures()+0x379>
c000f799:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c000f7a3:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c000f7a8:	0f 86 be 00 00 00    	jbe    c000f86c <CPU::detectFeatures()+0x494>
c000f7ae:	83 ec 0c             	sub    esp,0xc
c000f7b1:	68 80 00 00 00       	push   0x80
c000f7b6:	e8 31 fb ff ff       	call   c000f2ec <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7bb:	83 e0 01             	and    eax,0x1
c000f7be:	c1 e0 06             	shl    eax,0x6
c000f7c1:	88 c2                	mov    dl,al
c000f7c3:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f7c9:	83 e0 bf             	and    eax,0xffffffbf
c000f7cc:	09 d0                	or     eax,edx
c000f7ce:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f7d4:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c000f7db:	e8 0c fb ff ff       	call   c000f2ec <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f7e0:	83 e0 01             	and    eax,0x1
c000f7e3:	c1 e0 04             	shl    eax,0x4
c000f7e6:	88 c2                	mov    dl,al
c000f7e8:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f7ee:	83 e0 ef             	and    eax,0xffffffef
c000f7f1:	09 d0                	or     eax,edx
c000f7f3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f7f9:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c000f800:	e8 e7 fa ff ff       	call   c000f2ec <CPU::cpuidCheckExtendedEBX(unsigned int)>
c000f805:	c1 e0 07             	shl    eax,0x7
c000f808:	88 c2                	mov    dl,al
c000f80a:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c000f810:	83 e0 7f             	and    eax,0x7f
c000f813:	09 d0                	or     eax,edx
c000f815:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c000f81b:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c000f822:	e8 f3 fa ff ff       	call   c000f31a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f827:	83 e0 01             	and    eax,0x1
c000f82a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f831:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000f837:	83 e0 f7             	and    eax,0xfffffff7
c000f83a:	09 d0                	or     eax,edx
c000f83c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000f842:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c000f849:	e8 cc fa ff ff       	call   c000f31a <CPU::cpuidCheckExtendedECX(unsigned int)>
c000f84e:	83 c4 10             	add    esp,0x10
c000f851:	83 e0 01             	and    eax,0x1
c000f854:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c000f85b:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000f861:	83 e0 fb             	and    eax,0xfffffffb
c000f864:	09 d0                	or     eax,edx
c000f866:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000f86c:	83 ec 0c             	sub    esp,0xc
c000f86f:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f873:	50                   	push   eax
c000f874:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f878:	50                   	push   eax
c000f879:	8d 74 24 28          	lea    esi,[esp+0x28]
c000f87d:	56                   	push   esi
c000f87e:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f882:	50                   	push   eax
c000f883:	6a 01                	push   0x1
c000f885:	e8 82 f9 ff ff       	call   c000f20c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f88a:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f88e:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c000f894:	88 ca                	mov    dl,cl
c000f896:	83 e0 f0             	and    eax,0xfffffff0
c000f899:	83 e2 0f             	and    edx,0xf
c000f89c:	09 d0                	or     eax,edx
c000f89e:	88 ca                	mov    dl,cl
c000f8a0:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c000f8a6:	c0 ea 04             	shr    dl,0x4
c000f8a9:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c000f8ad:	0f b6 c2             	movzx  eax,dl
c000f8b0:	83 c4 20             	add    esp,0x20
c000f8b3:	c1 e0 06             	shl    eax,0x6
c000f8b6:	89 c7                	mov    edi,eax
c000f8b8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000f8be:	66 25 3f c0          	and    ax,0xc03f
c000f8c2:	09 f8                	or     eax,edi
c000f8c4:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c000f8cb:	89 c8                	mov    eax,ecx
c000f8cd:	0f b6 ab 5d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15d]
c000f8d4:	c1 e8 08             	shr    eax,0x8
c000f8d7:	83 e5 3f             	and    ebp,0x3f
c000f8da:	83 e0 0f             	and    eax,0xf
c000f8dd:	89 c7                	mov    edi,eax
c000f8df:	c1 e7 06             	shl    edi,0x6
c000f8e2:	09 ef                	or     edi,ebp
c000f8e4:	0f b6 ab 5e 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x15e]
c000f8eb:	89 fa                	mov    edx,edi
c000f8ed:	83 e5 c0             	and    ebp,0xffffffc0
c000f8f0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c000f8f6:	88 c2                	mov    dl,al
c000f8f8:	c0 ea 02             	shr    dl,0x2
c000f8fb:	89 d7                	mov    edi,edx
c000f8fd:	09 ef                	or     edi,ebp
c000f8ff:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c000f905:	89 fa                	mov    edx,edi
c000f907:	83 e5 cf             	and    ebp,0xffffffcf
c000f90a:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c000f910:	89 cf                	mov    edi,ecx
c000f912:	c1 ef 0c             	shr    edi,0xc
c000f915:	83 e7 03             	and    edi,0x3
c000f918:	c1 e7 04             	shl    edi,0x4
c000f91b:	09 ef                	or     edi,ebp
c000f91d:	3c 06                	cmp    al,0x6
c000f91f:	89 fa                	mov    edx,edi
c000f921:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c000f927:	74 04                	je     c000f92d <CPU::detectFeatures()+0x555>
c000f929:	3c 0f                	cmp    al,0xf
c000f92b:	75 5c                	jne    c000f989 <CPU::detectFeatures()+0x5b1>
c000f92d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c000f931:	89 cf                	mov    edi,ecx
c000f933:	c1 ef 10             	shr    edi,0x10
c000f936:	c1 e7 04             	shl    edi,0x4
c000f939:	09 fa                	or     edx,edi
c000f93b:	8b bb 5c 01 00 00    	mov    edi,DWORD PTR [ebx+0x15c]
c000f941:	0f b6 d2             	movzx  edx,dl
c000f944:	66 81 e7 3f c0       	and    di,0xc03f
c000f949:	c1 e2 06             	shl    edx,0x6
c000f94c:	09 fa                	or     edx,edi
c000f94e:	3c 0f                	cmp    al,0xf
c000f950:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c000f957:	75 30                	jne    c000f989 <CPU::detectFeatures()+0x5b1>
c000f959:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c000f95f:	c1 e9 14             	shr    ecx,0x14
c000f962:	83 e0 3f             	and    eax,0x3f
c000f965:	83 c1 0f             	add    ecx,0xf
c000f968:	88 ca                	mov    dl,cl
c000f96a:	c0 e9 02             	shr    cl,0x2
c000f96d:	c1 e2 06             	shl    edx,0x6
c000f970:	09 d0                	or     eax,edx
c000f972:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c000f978:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c000f97e:	83 e0 c0             	and    eax,0xffffffc0
c000f981:	09 c1                	or     ecx,eax
c000f983:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c000f989:	83 ec 0c             	sub    esp,0xc
c000f98c:	80 8b 8d 11 00 00 07 	or     BYTE PTR [ebx+0x118d],0x7
c000f993:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f997:	50                   	push   eax
c000f998:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c000f99c:	55                   	push   ebp
c000f99d:	56                   	push   esi
c000f99e:	8d 7c 24 28          	lea    edi,[esp+0x28]
c000f9a2:	57                   	push   edi
c000f9a3:	68 00 00 00 80       	push   0x80000000
c000f9a8:	e8 5f f8 ff ff       	call   c000f20c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9ad:	83 c4 20             	add    esp,0x20
c000f9b0:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c000f9b8:	76 22                	jbe    c000f9dc <CPU::detectFeatures()+0x604>
c000f9ba:	83 ec 0c             	sub    esp,0xc
c000f9bd:	8d 44 24 28          	lea    eax,[esp+0x28]
c000f9c1:	50                   	push   eax
c000f9c2:	55                   	push   ebp
c000f9c3:	56                   	push   esi
c000f9c4:	57                   	push   edi
c000f9c5:	68 01 00 00 80       	push   0x80000001
c000f9ca:	e8 3d f8 ff ff       	call   c000f20c <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000f9cf:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c000f9d9:	83 c4 20             	add    esp,0x20
c000f9dc:	52                   	push   edx
c000f9dd:	52                   	push   edx
c000f9de:	68 71 e0 01 c0       	push   0xc001e071
c000f9e3:	53                   	push   ebx
c000f9e4:	e8 09 c3 ff ff       	call   c000bcf2 <Device::setName(char const*)>
c000f9e9:	83 c4 10             	add    esp,0x10
c000f9ec:	eb 67                	jmp    c000fa55 <CPU::detectFeatures()+0x67d>
c000f9ee:	50                   	push   eax
c000f9ef:	50                   	push   eax
c000f9f0:	68 d6 df 01 c0       	push   0xc001dfd6
c000f9f5:	55                   	push   ebp
c000f9f6:	e8 25 0c ff ff       	call   c0000620 <strcpy>
c000f9fb:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c000fa05:	e8 d9 07 ff ff       	call   c00001e3 <is486>
c000fa0a:	83 c4 10             	add    esp,0x10
c000fa0d:	85 c0                	test   eax,eax
c000fa0f:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c000fa15:	74 1d                	je     c000fa34 <CPU::detectFeatures()+0x65c>
c000fa17:	83 c8 07             	or     eax,0x7
c000fa1a:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c000fa20:	0f 20 c0             	mov    eax,cr0
c000fa23:	83 e0 14             	and    eax,0x14
c000fa26:	83 f8 04             	cmp    eax,0x4
c000fa29:	75 0e                	jne    c000fa39 <CPU::detectFeatures()+0x661>
c000fa2b:	80 a3 8e 11 00 00 fd 	and    BYTE PTR [ebx+0x118e],0xfd
c000fa32:	eb 21                	jmp    c000fa55 <CPU::detectFeatures()+0x67d>
c000fa34:	83 e0 f8             	and    eax,0xfffffff8
c000fa37:	eb e1                	jmp    c000fa1a <CPU::detectFeatures()+0x642>
c000fa39:	e8 80 07 ff ff       	call   c00001be <hasLegacyFPU>
c000fa3e:	83 e0 01             	and    eax,0x1
c000fa41:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa44:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa4a:	83 e0 fd             	and    eax,0xfffffffd
c000fa4d:	09 d0                	or     eax,edx
c000fa4f:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa55:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c000fa5c:	74 0e                	je     c000fa6c <CPU::detectFeatures()+0x694>
c000fa5e:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000fa63:	80 88 6c 01 00 00 10 	or     BYTE PTR [eax+0x16c],0x10
c000fa6a:	eb 20                	jmp    c000fa8c <CPU::detectFeatures()+0x6b4>
c000fa6c:	e8 4d 07 ff ff       	call   c00001be <hasLegacyFPU>
c000fa71:	83 e0 01             	and    eax,0x1
c000fa74:	8d 14 00             	lea    edx,[eax+eax*1]
c000fa77:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c000fa7d:	83 e0 fd             	and    eax,0xfffffffd
c000fa80:	09 d0                	or     eax,edx
c000fa82:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c000fa88:	a8 02                	test   al,0x2
c000fa8a:	75 d2                	jne    c000fa5e <CPU::detectFeatures()+0x686>
c000fa8c:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c000fa93:	83 c4 2c             	add    esp,0x2c
c000fa96:	5b                   	pop    ebx
c000fa97:	5e                   	pop    esi
c000fa98:	5f                   	pop    edi
c000fa99:	5d                   	pop    ebp
c000fa9a:	c3                   	ret    
c000fa9b:	90                   	nop

c000fa9c <CPU::setupSMEP()>:
c000fa9c:	0f 20 e0             	mov    eax,cr4
c000fa9f:	0d 00 00 10 00       	or     eax,0x100000
c000faa4:	0f 22 e0             	mov    cr4,eax
c000faa7:	c3                   	ret    

c000faa8 <CPU::setupUMIP()>:
c000faa8:	0f 20 e0             	mov    eax,cr4
c000faab:	80 cc 08             	or     ah,0x8
c000faae:	0f 22 e0             	mov    cr4,eax
c000fab1:	c3                   	ret    

c000fab2 <CPU::setupTSC()>:
c000fab2:	0f 20 e0             	mov    eax,cr4
c000fab5:	83 c8 04             	or     eax,0x4
c000fab8:	0f 22 e0             	mov    cr4,eax
c000fabb:	c3                   	ret    

c000fabc <CPU::setupLargePages()>:
c000fabc:	0f 20 e0             	mov    eax,cr4
c000fabf:	83 c8 10             	or     eax,0x10
c000fac2:	0f 22 e0             	mov    cr4,eax
c000fac5:	c3                   	ret    

c000fac6 <CPU::setupPAT()>:
c000fac6:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c000facb:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c000fad2:	74 2c                	je     c000fb00 <CPU::setupPAT()+0x3a>
c000fad4:	53                   	push   ebx
c000fad5:	83 ec 10             	sub    esp,0x10
c000fad8:	68 77 02 00 00       	push   0x277
c000fadd:	50                   	push   eax
c000fade:	e8 f3 74 ff ff       	call   c0006fd6 <Computer::rdmsr(unsigned int)>
c000fae3:	83 e2 f8             	and    edx,0xfffffff8
c000fae6:	83 ca 01             	or     edx,0x1
c000fae9:	52                   	push   edx
c000faea:	50                   	push   eax
c000faeb:	68 77 02 00 00       	push   0x277
c000faf0:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c000faf6:	e8 07 75 ff ff       	call   c0007002 <Computer::wrmsr(unsigned int, unsigned long long)>
c000fafb:	83 c4 28             	add    esp,0x28
c000fafe:	5b                   	pop    ebx
c000faff:	c3                   	ret    
c000fb00:	c3                   	ret    
c000fb01:	90                   	nop

c000fb02 <CPU::setupMTRR()>:
c000fb02:	c3                   	ret    
c000fb03:	90                   	nop

c000fb04 <CPU::setupGlobalPages()>:
c000fb04:	0f 20 e0             	mov    eax,cr4
c000fb07:	0c 80                	or     al,0x80
c000fb09:	0f 22 e0             	mov    cr4,eax
c000fb0c:	c3                   	ret    
c000fb0d:	90                   	nop

c000fb0e <CPU::allowUsermodeDataAccess()>:
c000fb0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb12:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb19:	74 03                	je     c000fb1e <CPU::allowUsermodeDataAccess()+0x10>
c000fb1b:	0f 01 cb             	stac   
c000fb1e:	c3                   	ret    
c000fb1f:	90                   	nop

c000fb20 <CPU::prohibitUsermodeDataAccess()>:
c000fb20:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fb24:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c000fb2b:	74 03                	je     c000fb30 <CPU::prohibitUsermodeDataAccess()+0x10>
c000fb2d:	0f 01 ca             	clac   
c000fb30:	c3                   	ret    
c000fb31:	90                   	nop

c000fb32 <CPU::setupSMAP()>:
c000fb32:	0f 20 e0             	mov    eax,cr4
c000fb35:	0d 00 00 20 00       	or     eax,0x200000
c000fb3a:	0f 22 e0             	mov    cr4,eax
c000fb3d:	eb e1                	jmp    c000fb20 <CPU::prohibitUsermodeDataAccess()>
c000fb3f:	90                   	nop

c000fb40 <CPU::setupFeatures()>:
c000fb40:	53                   	push   ebx
c000fb41:	83 ec 08             	sub    esp,0x8
c000fb44:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fb48:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c000fb4f:	74 18                	je     c000fb69 <CPU::setupFeatures()+0x29>
c000fb51:	83 ec 0c             	sub    esp,0xc
c000fb54:	68 7d e0 01 c0       	push   0xc001e07d
c000fb59:	e8 ca ab ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000fb5e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb61:	e8 42 ff ff ff       	call   c000faa8 <CPU::setupUMIP()>
c000fb66:	83 c4 10             	add    esp,0x10
c000fb69:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c000fb70:	74 18                	je     c000fb8a <CPU::setupFeatures()+0x4a>
c000fb72:	83 ec 0c             	sub    esp,0xc
c000fb75:	68 87 e0 01 c0       	push   0xc001e087
c000fb7a:	e8 a9 ab ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000fb7f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fb82:	e8 2b ff ff ff       	call   c000fab2 <CPU::setupTSC()>
c000fb87:	83 c4 10             	add    esp,0x10
c000fb8a:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c000fb91:	74 18                	je     c000fbab <CPU::setupFeatures()+0x6b>
c000fb93:	83 ec 0c             	sub    esp,0xc
c000fb96:	68 90 e0 01 c0       	push   0xc001e090
c000fb9b:	e8 88 ab ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000fba0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fba3:	e8 14 ff ff ff       	call   c000fabc <CPU::setupLargePages()>
c000fba8:	83 c4 10             	add    esp,0x10
c000fbab:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c000fbb2:	74 18                	je     c000fbcc <CPU::setupFeatures()+0x8c>
c000fbb4:	83 ec 0c             	sub    esp,0xc
c000fbb7:	68 99 e0 01 c0       	push   0xc001e099
c000fbbc:	e8 67 ab ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000fbc1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbc4:	e8 3b ff ff ff       	call   c000fb04 <CPU::setupGlobalPages()>
c000fbc9:	83 c4 10             	add    esp,0x10
c000fbcc:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c000fbd3:	74 18                	je     c000fbed <CPU::setupFeatures()+0xad>
c000fbd5:	83 ec 0c             	sub    esp,0xc
c000fbd8:	68 ab e0 01 c0       	push   0xc001e0ab
c000fbdd:	e8 46 ab ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c000fbe2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fbe5:	e8 dc fe ff ff       	call   c000fac6 <CPU::setupPAT()>
c000fbea:	83 c4 10             	add    esp,0x10
c000fbed:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c000fbf4:	74 11                	je     c000fc07 <CPU::setupFeatures()+0xc7>
c000fbf6:	c7 44 24 10 b4 e0 01 c0 	mov    DWORD PTR [esp+0x10],0xc001e0b4
c000fbfe:	83 c4 08             	add    esp,0x8
c000fc01:	5b                   	pop    ebx
c000fc02:	e9 21 ab ff ff       	jmp    c000a728 <Dbg::kprintf(char const*, ...)>
c000fc07:	83 c4 08             	add    esp,0x8
c000fc0a:	5b                   	pop    ebx
c000fc0b:	c3                   	ret    

c000fc0c <CPU::open(int, int, void*)>:
c000fc0c:	57                   	push   edi
c000fc0d:	56                   	push   esi
c000fc0e:	53                   	push   ebx
c000fc0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fc13:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000fc17:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c000fc1d:	83 ec 0c             	sub    esp,0xc
c000fc20:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c000fc26:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c000fc2c:	50                   	push   eax
c000fc2d:	e8 8e 76 ff ff       	call   c00072c0 <GDT::setup()>
c000fc32:	83 c4 0c             	add    esp,0xc
c000fc35:	6a 00                	push   0x0
c000fc37:	68 ef be ad de       	push   0xdeadbeef
c000fc3c:	57                   	push   edi
c000fc3d:	e8 1a 92 ff ff       	call   c0008e5c <TSS::setup(unsigned long, unsigned long)>
c000fc42:	89 3c 24             	mov    DWORD PTR [esp],edi
c000fc45:	e8 f2 91 ff ff       	call   c0008e3c <TSS::flush()>
c000fc4a:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c000fc50:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc53:	e8 b2 78 ff ff       	call   c000750a <IDT::setup()>
c000fc58:	b8 00 04 00 00       	mov    eax,0x400
c000fc5d:	0f 23 f8             	mov    db7,eax
c000fc60:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c000fc6a:	e8 f7 80 ff ff       	call   c0007d66 <Phys::allocatePage()>
c000fc6f:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c000fc75:	89 30                	mov    DWORD PTR [eax],esi
c000fc77:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c000fc7d:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000fc80:	58                   	pop    eax
c000fc81:	5a                   	pop    edx
c000fc82:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c000fc88:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000fc8c:	e8 b5 a1 ff ff       	call   c0009e46 <VAS::setCPUSpecific(unsigned long)>
c000fc91:	c7 04 24 be e0 01 c0 	mov    DWORD PTR [esp],0xc001e0be
c000fc98:	e8 56 7d ff ff       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c000fc9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fca0:	e8 33 f7 ff ff       	call   c000f3d8 <CPU::detectFeatures()>
c000fca5:	c7 04 24 e1 e0 01 c0 	mov    DWORD PTR [esp],0xc001e0e1
c000fcac:	e8 42 7d ff ff       	call   c00079f3 <Krnl::setBootMessage(char const*)>
c000fcb1:	e8 b8 56 00 00       	call   c001536e <HalInitialise()>
c000fcb6:	a1 9c 03 02 c0       	mov    eax,ds:0xc002039c
c000fcbb:	83 e0 10             	and    eax,0x10
c000fcbe:	83 f8 01             	cmp    eax,0x1
c000fcc1:	19 c0                	sbb    eax,eax
c000fcc3:	83 e0 46             	and    eax,0x46
c000fcc6:	83 c0 1e             	add    eax,0x1e
c000fcc9:	89 04 24             	mov    DWORD PTR [esp],eax
c000fccc:	e8 f0 d6 ff ff       	call   c000d3c1 <setupTimer(int)>
c000fcd1:	83 c4 10             	add    esp,0x10
c000fcd4:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c000fcda:	f6 05 9c 03 02 c0 20 	test   BYTE PTR ds:0xc002039c,0x20
c000fce1:	74 0c                	je     c000fcef <CPU::open(int, int, void*)+0xe3>
c000fce3:	83 ec 0c             	sub    esp,0xc
c000fce6:	53                   	push   ebx
c000fce7:	e8 54 fe ff ff       	call   c000fb40 <CPU::setupFeatures()>
c000fcec:	83 c4 10             	add    esp,0x10
c000fcef:	5b                   	pop    ebx
c000fcf0:	31 c0                	xor    eax,eax
c000fcf2:	5e                   	pop    esi
c000fcf3:	5f                   	pop    edi
c000fcf4:	c3                   	ret    
c000fcf5:	90                   	nop

c000fcf6 <EnvVarContainer::getEnv(char const*)>:
c000fcf6:	57                   	push   edi
c000fcf7:	56                   	push   esi
c000fcf8:	53                   	push   ebx
c000fcf9:	31 db                	xor    ebx,ebx
c000fcfb:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fcff:	39 1e                	cmp    DWORD PTR [esi],ebx
c000fd01:	7e 2b                	jle    c000fd2e <EnvVarContainer::getEnv(char const*)+0x38>
c000fd03:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c000fd0a:	50                   	push   eax
c000fd0b:	50                   	push   eax
c000fd0c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fd0f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000fd12:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000fd16:	e8 e5 09 ff ff       	call   c0000700 <strcmp>
c000fd1b:	83 c4 10             	add    esp,0x10
c000fd1e:	85 c0                	test   eax,eax
c000fd20:	75 09                	jne    c000fd2b <EnvVarContainer::getEnv(char const*)+0x35>
c000fd22:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000fd25:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c000fd29:	eb 05                	jmp    c000fd30 <EnvVarContainer::getEnv(char const*)+0x3a>
c000fd2b:	43                   	inc    ebx
c000fd2c:	eb d1                	jmp    c000fcff <EnvVarContainer::getEnv(char const*)+0x9>
c000fd2e:	31 c0                	xor    eax,eax
c000fd30:	5b                   	pop    ebx
c000fd31:	5e                   	pop    esi
c000fd32:	5f                   	pop    edi
c000fd33:	c3                   	ret    

c000fd34 <EnvVarContainer::setEnv(char const*, char const*)>:
c000fd34:	55                   	push   ebp
c000fd35:	57                   	push   edi
c000fd36:	56                   	push   esi
c000fd37:	53                   	push   ebx
c000fd38:	83 ec 28             	sub    esp,0x28
c000fd3b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000fd3f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c000fd43:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000fd47:	56                   	push   esi
c000fd48:	e8 13 08 ff ff       	call   c0000560 <strlen>
c000fd4d:	40                   	inc    eax
c000fd4e:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd51:	e8 43 7c ff ff       	call   c0007999 <malloc>
c000fd56:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd59:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000fd5d:	e8 fe 07 ff ff       	call   c0000560 <strlen>
c000fd62:	40                   	inc    eax
c000fd63:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd66:	e8 2e 7c ff ff       	call   c0007999 <malloc>
c000fd6b:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd6e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000fd72:	e8 e9 07 ff ff       	call   c0000560 <strlen>
c000fd77:	83 c4 0c             	add    esp,0xc
c000fd7a:	40                   	inc    eax
c000fd7b:	50                   	push   eax
c000fd7c:	6a 00                	push   0x0
c000fd7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000fd82:	e8 69 07 ff ff       	call   c00004f0 <memset>
c000fd87:	89 34 24             	mov    DWORD PTR [esp],esi
c000fd8a:	e8 d1 07 ff ff       	call   c0000560 <strlen>
c000fd8f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000fd93:	8d 48 01             	lea    ecx,[eax+0x1]
c000fd96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fd98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fd9b:	89 de                	mov    esi,ebx
c000fd9d:	e8 be 07 ff ff       	call   c0000560 <strlen>
c000fda2:	83 c4 0c             	add    esp,0xc
c000fda5:	40                   	inc    eax
c000fda6:	50                   	push   eax
c000fda7:	6a 00                	push   0x0
c000fda9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000fdad:	e8 3e 07 ff ff       	call   c00004f0 <memset>
c000fdb2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fdb5:	e8 a6 07 ff ff       	call   c0000560 <strlen>
c000fdba:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000fdbe:	8d 48 01             	lea    ecx,[eax+0x1]
c000fdc1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fdc3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000fdc6:	40                   	inc    eax
c000fdc7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000fdca:	c1 e0 03             	shl    eax,0x3
c000fdcd:	5a                   	pop    edx
c000fdce:	59                   	pop    ecx
c000fdcf:	50                   	push   eax
c000fdd0:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000fdd3:	e8 ad 7b ff ff       	call   c0007985 <realloc>
c000fdd8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000fddc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000fddf:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000fde2:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000fde6:	b9 08 00 00 00       	mov    ecx,0x8
c000fdeb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000fded:	83 c4 2c             	add    esp,0x2c
c000fdf0:	5b                   	pop    ebx
c000fdf1:	5e                   	pop    esi
c000fdf2:	5f                   	pop    edi
c000fdf3:	5d                   	pop    ebp
c000fdf4:	c3                   	ret    
c000fdf5:	90                   	nop

c000fdf6 <EnvVarContainer::deleteEnv(char const*)>:
c000fdf6:	c3                   	ret    
c000fdf7:	90                   	nop

c000fdf8 <EnvVarContainer::loadFrom(char const*, char const*)>:
c000fdf8:	55                   	push   ebp
c000fdf9:	57                   	push   edi
c000fdfa:	56                   	push   esi
c000fdfb:	53                   	push   ebx
c000fdfc:	81 ec 38 01 00 00    	sub    esp,0x138
c000fe02:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c000fe09:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c000fe10:	68 14 01 00 00       	push   0x114
c000fe15:	e8 7f 7b ff ff       	call   c0007999 <malloc>
c000fe1a:	83 c4 0c             	add    esp,0xc
c000fe1d:	89 c3                	mov    ebx,eax
c000fe1f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c000fe22:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fe29:	50                   	push   eax
c000fe2a:	e8 6f ae ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c000fe2f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fe32:	e8 95 b1 ff ff       	call   c000afcc <File::exists()>
c000fe37:	83 c4 10             	add    esp,0x10
c000fe3a:	84 c0                	test   al,al
c000fe3c:	75 31                	jne    c000fe6f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c000fe3e:	50                   	push   eax
c000fe3f:	50                   	push   eax
c000fe40:	6a 12                	push   0x12
c000fe42:	53                   	push   ebx
c000fe43:	e8 16 af ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c000fe48:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe4a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000fe4d:	89 34 24             	mov    DWORD PTR [esp],esi
c000fe50:	e8 0b 07 ff ff       	call   c0000560 <strlen>
c000fe55:	5a                   	pop    edx
c000fe56:	31 d2                	xor    edx,edx
c000fe58:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fe5c:	51                   	push   ecx
c000fe5d:	56                   	push   esi
c000fe5e:	52                   	push   edx
c000fe5f:	50                   	push   eax
c000fe60:	53                   	push   ebx
c000fe61:	ff d7                	call   edi
c000fe63:	83 c4 14             	add    esp,0x14
c000fe66:	53                   	push   ebx
c000fe67:	e8 50 af ff ff       	call   c000adbc <File::close()>
c000fe6c:	83 c4 10             	add    esp,0x10
c000fe6f:	56                   	push   esi
c000fe70:	31 f6                	xor    esi,esi
c000fe72:	68 00 01 00 00       	push   0x100
c000fe77:	6a 00                	push   0x0
c000fe79:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000fe7d:	50                   	push   eax
c000fe7e:	e8 6d 06 ff ff       	call   c00004f0 <memset>
c000fe83:	5f                   	pop    edi
c000fe84:	58                   	pop    eax
c000fe85:	6a 01                	push   0x1
c000fe87:	53                   	push   ebx
c000fe88:	e8 d1 ae ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c000fe8d:	83 c4 10             	add    esp,0x10
c000fe90:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000fe98:	83 ec 0c             	sub    esp,0xc
c000fe9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000fe9d:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c000fea1:	51                   	push   ecx
c000fea2:	8d 54 24 23          	lea    edx,[esp+0x23]
c000fea6:	52                   	push   edx
c000fea7:	6a 00                	push   0x0
c000fea9:	6a 01                	push   0x1
c000feab:	53                   	push   ebx
c000feac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000feaf:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c000feb3:	83 c4 20             	add    esp,0x20
c000feb6:	3c 0d                	cmp    al,0xd
c000feb8:	0f 84 09 01 00 00    	je     c000ffc7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000febe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c000fec3:	0f 84 ef 00 00 00    	je     c000ffb8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fec9:	3c 0a                	cmp    al,0xa
c000fecb:	74 13                	je     c000fee0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fecd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000fed2:	74 0c                	je     c000fee0 <EnvVarContainer::loadFrom(char const*, char const*)+0xe8>
c000fed4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c000feda:	0f 8e d8 00 00 00    	jle    c000ffb8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1c0>
c000fee0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fee4:	83 ec 0c             	sub    esp,0xc
c000fee7:	8d 78 01             	lea    edi,[eax+0x1]
c000feea:	57                   	push   edi
c000feeb:	e8 a9 7a ff ff       	call   c0007999 <malloc>
c000fef0:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c000fef4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000fef8:	8d 56 04             	lea    edx,[esi+0x4]
c000fefb:	89 14 24             	mov    DWORD PTR [esp],edx
c000fefe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ff02:	e8 92 7a ff ff       	call   c0007999 <malloc>
c000ff07:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000ff0b:	83 c4 0c             	add    esp,0xc
c000ff0e:	57                   	push   edi
c000ff0f:	6a 00                	push   0x0
c000ff11:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ff15:	e8 d6 05 ff ff       	call   c00004f0 <memset>
c000ff1a:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ff1e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c000ff22:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000ff26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff28:	83 c4 0c             	add    esp,0xc
c000ff2b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ff2f:	52                   	push   edx
c000ff30:	6a 00                	push   0x0
c000ff32:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000ff36:	e8 b5 05 ff ff       	call   c00004f0 <memset>
c000ff3b:	8d 74 24 30          	lea    esi,[esp+0x30]
c000ff3f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c000ff43:	89 34 24             	mov    DWORD PTR [esp],esi
c000ff46:	e8 15 06 ff ff       	call   c0000560 <strlen>
c000ff4b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000ff4f:	89 c1                	mov    ecx,eax
c000ff51:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff53:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ff56:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000ff59:	40                   	inc    eax
c000ff5a:	83 c4 10             	add    esp,0x10
c000ff5d:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff60:	85 d2                	test   edx,edx
c000ff62:	75 0c                	jne    c000ff70 <EnvVarContainer::loadFrom(char const*, char const*)+0x178>
c000ff64:	83 ec 0c             	sub    esp,0xc
c000ff67:	6a 08                	push   0x8
c000ff69:	e8 2b 7a ff ff       	call   c0007999 <malloc>
c000ff6e:	eb 0c                	jmp    c000ff7c <EnvVarContainer::loadFrom(char const*, char const*)+0x184>
c000ff70:	c1 e0 03             	shl    eax,0x3
c000ff73:	51                   	push   ecx
c000ff74:	51                   	push   ecx
c000ff75:	50                   	push   eax
c000ff76:	52                   	push   edx
c000ff77:	e8 09 7a ff ff       	call   c0007985 <realloc>
c000ff7c:	83 c4 10             	add    esp,0x10
c000ff7f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000ff82:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c000ff85:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c000ff88:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ff8c:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c000ff90:	b9 08 00 00 00       	mov    ecx,0x8
c000ff95:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ff97:	31 f6                	xor    esi,esi
c000ff99:	50                   	push   eax
c000ff9a:	68 00 01 00 00       	push   0x100
c000ff9f:	6a 00                	push   0x0
c000ffa1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c000ffa5:	50                   	push   eax
c000ffa6:	e8 45 05 ff ff       	call   c00004f0 <memset>
c000ffab:	83 c4 10             	add    esp,0x10
c000ffae:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ffb6:	eb 0f                	jmp    c000ffc7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ffb8:	3c 3d                	cmp    al,0x3d
c000ffba:	74 07                	je     c000ffc3 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cb>
c000ffbc:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c000ffc0:	46                   	inc    esi
c000ffc1:	eb 04                	jmp    c000ffc7 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c000ffc3:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000ffc7:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ffcc:	0f 85 c6 fe ff ff    	jne    c000fe98 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c000ffd2:	81 c4 2c 01 00 00    	add    esp,0x12c
c000ffd8:	5b                   	pop    ebx
c000ffd9:	5e                   	pop    esi
c000ffda:	5f                   	pop    edi
c000ffdb:	5d                   	pop    ebp
c000ffdc:	c3                   	ret    
c000ffdd:	90                   	nop

c000ffde <EnvVarContainer::__loadSystem()>:
c000ffde:	83 ec 10             	sub    esp,0x10
c000ffe1:	68 20 f3 01 c0       	push   0xc001f320
c000ffe6:	68 24 e1 01 c0       	push   0xc001e124
c000ffeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ffef:	e8 04 fe ff ff       	call   c000fdf8 <EnvVarContainer::loadFrom(char const*, char const*)>
c000fff4:	83 c4 1c             	add    esp,0x1c
c000fff7:	c3                   	ret    

c000fff8 <EnvVarContainer::__loadUser()>:
c000fff8:	c3                   	ret    
c000fff9:	90                   	nop

c000fffa <EnvVarContainer::EnvVarContainer(Process*)>:
c000fffa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fffe:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010004:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010008:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001000c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001000f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010013:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001001a:	90                   	nop
c001001b:	c3                   	ret    

c001001c <EnvVarContainer::~EnvVarContainer()>:
c001001c:	83 ec 0c             	sub    esp,0xc
c001001f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010023:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010026:	85 c0                	test   eax,eax
c0010028:	74 1d                	je     c0010047 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001002a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001002e:	8b 00                	mov    eax,DWORD PTR [eax]
c0010030:	85 c0                	test   eax,eax
c0010032:	74 13                	je     c0010047 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010038:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001003b:	83 ec 0c             	sub    esp,0xc
c001003e:	50                   	push   eax
c001003f:	e8 65 79 ff ff       	call   c00079a9 <free>
c0010044:	83 c4 10             	add    esp,0x10
c0010047:	90                   	nop
c0010048:	83 c4 0c             	add    esp,0xc
c001004b:	c3                   	ret    

c001004c <Krnl::getEnv(Process*, char const*)>:
c001004c:	53                   	push   ebx
c001004d:	83 ec 08             	sub    esp,0x8
c0010050:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010054:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010058:	39 05 70 38 02 c0    	cmp    DWORD PTR ds:0xc0023870,eax
c001005e:	74 04                	je     c0010064 <Krnl::getEnv(Process*, char const*)+0x18>
c0010060:	85 c0                	test   eax,eax
c0010062:	75 0b                	jne    c001006f <Krnl::getEnv(Process*, char const*)+0x23>
c0010064:	a1 f0 2d 02 c0       	mov    eax,ds:0xc0022df0
c0010069:	85 c0                	test   eax,eax
c001006b:	75 19                	jne    c0010086 <Krnl::getEnv(Process*, char const*)+0x3a>
c001006d:	eb 27                	jmp    c0010096 <Krnl::getEnv(Process*, char const*)+0x4a>
c001006f:	52                   	push   edx
c0010070:	52                   	push   edx
c0010071:	53                   	push   ebx
c0010072:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010078:	e8 79 fc ff ff       	call   c000fcf6 <EnvVarContainer::getEnv(char const*)>
c001007d:	83 c4 10             	add    esp,0x10
c0010080:	85 c0                	test   eax,eax
c0010082:	75 28                	jne    c00100ac <Krnl::getEnv(Process*, char const*)+0x60>
c0010084:	eb de                	jmp    c0010064 <Krnl::getEnv(Process*, char const*)+0x18>
c0010086:	52                   	push   edx
c0010087:	52                   	push   edx
c0010088:	53                   	push   ebx
c0010089:	50                   	push   eax
c001008a:	e8 67 fc ff ff       	call   c000fcf6 <EnvVarContainer::getEnv(char const*)>
c001008f:	83 c4 10             	add    esp,0x10
c0010092:	85 c0                	test   eax,eax
c0010094:	75 16                	jne    c00100ac <Krnl::getEnv(Process*, char const*)+0x60>
c0010096:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001009a:	a1 f4 2d 02 c0       	mov    eax,ds:0xc0022df4
c001009f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00100a3:	83 c4 08             	add    esp,0x8
c00100a6:	5b                   	pop    ebx
c00100a7:	e9 4a fc ff ff       	jmp    c000fcf6 <EnvVarContainer::getEnv(char const*)>
c00100ac:	83 c4 08             	add    esp,0x8
c00100af:	5b                   	pop    ebx
c00100b0:	c3                   	ret    

c00100b1 <Krnl::setEnvSystem(char const*, char const*)>:
c00100b1:	83 ec 10             	sub    esp,0x10
c00100b4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100b8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100bc:	ff 35 f4 2d 02 c0    	push   DWORD PTR ds:0xc0022df4
c00100c2:	e8 6d fc ff ff       	call   c000fd34 <EnvVarContainer::setEnv(char const*, char const*)>
c00100c7:	83 c4 1c             	add    esp,0x1c
c00100ca:	c3                   	ret    

c00100cb <Krnl::setEnvUser(char const*, char const*)>:
c00100cb:	a1 f0 2d 02 c0       	mov    eax,ds:0xc0022df0
c00100d0:	85 c0                	test   eax,eax
c00100d2:	74 15                	je     c00100e9 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c00100d4:	83 ec 10             	sub    esp,0x10
c00100d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100db:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00100df:	50                   	push   eax
c00100e0:	e8 4f fc ff ff       	call   c000fd34 <EnvVarContainer::setEnv(char const*, char const*)>
c00100e5:	83 c4 1c             	add    esp,0x1c
c00100e8:	c3                   	ret    
c00100e9:	c3                   	ret    

c00100ea <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c00100ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00100ee:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c00100f4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00100f8:	e9 37 fc ff ff       	jmp    c000fd34 <EnvVarContainer::setEnv(char const*, char const*)>

c00100fd <Krnl::deleteEnvSystem(char const*)>:
c00100fd:	c3                   	ret    

c00100fe <Krnl::deleteEnvUser(char const*)>:
c00100fe:	c3                   	ret    

c00100ff <Krnl::deleteEnvProcess(Process*, char const*)>:
c00100ff:	c3                   	ret    

c0010100 <Krnl::newProcessEnv(Process*)>:
c0010100:	83 ec 28             	sub    esp,0x28
c0010103:	6a 0c                	push   0xc
c0010105:	e8 8f 78 ff ff       	call   c0007999 <malloc>
c001010a:	5a                   	pop    edx
c001010b:	59                   	pop    ecx
c001010c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010110:	50                   	push   eax
c0010111:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010115:	e8 e0 fe ff ff       	call   c000fffa <EnvVarContainer::EnvVarContainer(Process*)>
c001011a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001011e:	83 c4 2c             	add    esp,0x2c
c0010121:	c3                   	ret    

c0010122 <Krnl::copyProcessEnv(Process*, Process*)>:
c0010122:	57                   	push   edi
c0010123:	56                   	push   esi
c0010124:	53                   	push   ebx
c0010125:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010129:	83 ec 0c             	sub    esp,0xc
c001012c:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c0010132:	6a 0c                	push   0xc
c0010134:	e8 60 78 ff ff       	call   c0007999 <malloc>
c0010139:	89 c3                	mov    ebx,eax
c001013b:	58                   	pop    eax
c001013c:	5a                   	pop    edx
c001013d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010141:	53                   	push   ebx
c0010142:	e8 b3 fe ff ff       	call   c000fffa <EnvVarContainer::EnvVarContainer(Process*)>
c0010147:	8b 07                	mov    eax,DWORD PTR [edi]
c0010149:	89 03                	mov    DWORD PTR [ebx],eax
c001014b:	c1 e0 03             	shl    eax,0x3
c001014e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010151:	e8 43 78 ff ff       	call   c0007999 <malloc>
c0010156:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0010159:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001015b:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001015e:	c1 e1 03             	shl    ecx,0x3
c0010161:	89 c7                	mov    edi,eax
c0010163:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010165:	83 c4 10             	add    esp,0x10
c0010168:	89 d8                	mov    eax,ebx
c001016a:	5b                   	pop    ebx
c001016b:	5e                   	pop    esi
c001016c:	5f                   	pop    edi
c001016d:	c3                   	ret    

c001016e <Krnl::loadSystemEnv()>:
c001016e:	53                   	push   ebx
c001016f:	83 ec 14             	sub    esp,0x14
c0010172:	6a 0c                	push   0xc
c0010174:	e8 20 78 ff ff       	call   c0007999 <malloc>
c0010179:	89 c3                	mov    ebx,eax
c001017b:	58                   	pop    eax
c001017c:	5a                   	pop    edx
c001017d:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c0010183:	53                   	push   ebx
c0010184:	e8 71 fe ff ff       	call   c000fffa <EnvVarContainer::EnvVarContainer(Process*)>
c0010189:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001018c:	89 1d f4 2d 02 c0    	mov    DWORD PTR ds:0xc0022df4,ebx
c0010192:	e8 47 fe ff ff       	call   c000ffde <EnvVarContainer::__loadSystem()>
c0010197:	83 c4 18             	add    esp,0x18
c001019a:	5b                   	pop    ebx
c001019b:	c3                   	ret    

c001019c <Krnl::loadUserEnv()>:
c001019c:	53                   	push   ebx
c001019d:	83 ec 14             	sub    esp,0x14
c00101a0:	6a 0c                	push   0xc
c00101a2:	e8 f2 77 ff ff       	call   c0007999 <malloc>
c00101a7:	89 c3                	mov    ebx,eax
c00101a9:	58                   	pop    eax
c00101aa:	5a                   	pop    edx
c00101ab:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c00101b1:	53                   	push   ebx
c00101b2:	e8 43 fe ff ff       	call   c000fffa <EnvVarContainer::EnvVarContainer(Process*)>
c00101b7:	89 1d f0 2d 02 c0    	mov    DWORD PTR ds:0xc0022df0,ebx
c00101bd:	83 c4 18             	add    esp,0x18
c00101c0:	5b                   	pop    ebx
c00101c1:	c3                   	ret    

c00101c2 <Krnl::flushEnv()>:
c00101c2:	c3                   	ret    

c00101c3 <Krnl::getProcessTotalEnvCount(Process*)>:
c00101c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00101c7:	8b 15 f0 2d 02 c0    	mov    edx,DWORD PTR ds:0xc0022df0
c00101cd:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00101d3:	a1 f4 2d 02 c0       	mov    eax,ds:0xc0022df4
c00101d8:	8b 00                	mov    eax,DWORD PTR [eax]
c00101da:	03 01                	add    eax,DWORD PTR [ecx]
c00101dc:	85 d2                	test   edx,edx
c00101de:	74 02                	je     c00101e2 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c00101e0:	03 02                	add    eax,DWORD PTR [edx]
c00101e2:	c3                   	ret    

c00101e3 <Krnl::getProcessEnvPair(Process*, int)>:
c00101e3:	57                   	push   edi
c00101e4:	56                   	push   esi
c00101e5:	8b 35 f0 2d 02 c0    	mov    esi,DWORD PTR ds:0xc0022df0
c00101eb:	53                   	push   ebx
c00101ec:	85 f6                	test   esi,esi
c00101ee:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00101f2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00101f6:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c00101fc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010200:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010202:	75 16                	jne    c001021a <Krnl::getProcessEnvPair(Process*, int)+0x37>
c0010204:	39 c2                	cmp    edx,eax
c0010206:	7c 16                	jl     c001021e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c0010208:	8b 0d f4 2d 02 c0    	mov    ecx,DWORD PTR ds:0xc0022df4
c001020e:	8b 31                	mov    esi,DWORD PTR [ecx]
c0010210:	01 c6                	add    esi,eax
c0010212:	39 d6                	cmp    esi,edx
c0010214:	7e 3c                	jle    c0010252 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c0010216:	29 c2                	sub    edx,eax
c0010218:	eb 04                	jmp    c001021e <Krnl::getProcessEnvPair(Process*, int)+0x3b>
c001021a:	39 c2                	cmp    edx,eax
c001021c:	7d 05                	jge    c0010223 <Krnl::getProcessEnvPair(Process*, int)+0x40>
c001021e:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c0010221:	eb 20                	jmp    c0010243 <Krnl::getProcessEnvPair(Process*, int)+0x60>
c0010223:	8b 3e                	mov    edi,DWORD PTR [esi]
c0010225:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0010228:	39 d1                	cmp    ecx,edx
c001022a:	7e 04                	jle    c0010230 <Krnl::getProcessEnvPair(Process*, int)+0x4d>
c001022c:	29 c2                	sub    edx,eax
c001022e:	eb 10                	jmp    c0010240 <Krnl::getProcessEnvPair(Process*, int)+0x5d>
c0010230:	8b 35 f4 2d 02 c0    	mov    esi,DWORD PTR ds:0xc0022df4
c0010236:	03 0e                	add    ecx,DWORD PTR [esi]
c0010238:	39 d1                	cmp    ecx,edx
c001023a:	7e 16                	jle    c0010252 <Krnl::getProcessEnvPair(Process*, int)+0x6f>
c001023c:	29 c2                	sub    edx,eax
c001023e:	29 fa                	sub    edx,edi
c0010240:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010243:	8d 14 d0             	lea    edx,[eax+edx*8]
c0010246:	8b 02                	mov    eax,DWORD PTR [edx]
c0010248:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c001024b:	89 03                	mov    DWORD PTR [ebx],eax
c001024d:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0010250:	eb 1d                	jmp    c001026f <Krnl::getProcessEnvPair(Process*, int)+0x8c>
c0010252:	83 ec 0c             	sub    esp,0xc
c0010255:	68 46 e1 01 c0       	push   0xc001e146
c001025a:	e8 18 00 00 00       	call   c0010277 <Krnl::panic(char const*)>
c001025f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0010265:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001026c:	83 c4 10             	add    esp,0x10
c001026f:	89 d8                	mov    eax,ebx
c0010271:	5b                   	pop    ebx
c0010272:	5e                   	pop    esi
c0010273:	5f                   	pop    edi
c0010274:	c2 04 00             	ret    0x4

c0010277 <Krnl::panic(char const*)>:
c0010277:	53                   	push   ebx
c0010278:	83 ec 10             	sub    esp,0x10
c001027b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001027f:	fa                   	cli    
c0010280:	c6 05 00 2e 02 c0 01 	mov    BYTE PTR ds:0xc0022e00,0x1
c0010287:	53                   	push   ebx
c0010288:	68 60 e1 01 c0       	push   0xc001e160
c001028d:	e8 96 a4 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0010292:	83 c4 0c             	add    esp,0xc
c0010295:	a1 d0 03 02 c0       	mov    eax,ds:0xc00203d0
c001029a:	6a 01                	push   0x1
c001029c:	6a 0f                	push   0xf
c001029e:	50                   	push   eax
c001029f:	e8 78 82 ff ff       	call   c000851c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00102a4:	5a                   	pop    edx
c00102a5:	8b 0d d0 03 02 c0    	mov    ecx,DWORD PTR ds:0xc00203d0
c00102ab:	51                   	push   ecx
c00102ac:	e8 63 84 ff ff       	call   c0008714 <VgaText::clearScreen()>
c00102b1:	58                   	pop    eax
c00102b2:	8b 0d d0 03 02 c0    	mov    ecx,DWORD PTR ds:0xc00203d0
c00102b8:	5a                   	pop    edx
c00102b9:	68 91 e1 01 c0       	push   0xc001e191
c00102be:	51                   	push   ecx
c00102bf:	e8 90 82 ff ff       	call   c0008554 <VgaText::setTitle(char*)>
c00102c4:	83 c4 0c             	add    esp,0xc
c00102c7:	a1 d0 03 02 c0       	mov    eax,ds:0xc00203d0
c00102cc:	6a 01                	push   0x1
c00102ce:	6a 0f                	push   0xf
c00102d0:	50                   	push   eax
c00102d1:	e8 46 82 ff ff       	call   c000851c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00102d6:	58                   	pop    eax
c00102d7:	8b 0d d0 03 02 c0    	mov    ecx,DWORD PTR ds:0xc00203d0
c00102dd:	5a                   	pop    edx
c00102de:	68 79 e1 01 c0       	push   0xc001e179
c00102e3:	51                   	push   ecx
c00102e4:	e8 1f 87 ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c00102e9:	83 c4 0c             	add    esp,0xc
c00102ec:	a1 d0 03 02 c0       	mov    eax,ds:0xc00203d0
c00102f1:	6a 0f                	push   0xf
c00102f3:	6a 01                	push   0x1
c00102f5:	50                   	push   eax
c00102f6:	e8 21 82 ff ff       	call   c000851c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00102fb:	58                   	pop    eax
c00102fc:	8b 0d d0 03 02 c0    	mov    ecx,DWORD PTR ds:0xc00203d0
c0010302:	5a                   	pop    edx
c0010303:	68 82 e1 01 c0       	push   0xc001e182
c0010308:	51                   	push   ecx
c0010309:	e8 fa 86 ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c001030e:	83 c4 0c             	add    esp,0xc
c0010311:	a1 d0 03 02 c0       	mov    eax,ds:0xc00203d0
c0010316:	6a 01                	push   0x1
c0010318:	6a 0f                	push   0xf
c001031a:	50                   	push   eax
c001031b:	e8 fc 81 ff ff       	call   c000851c <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0010320:	58                   	pop    eax
c0010321:	8b 0d d0 03 02 c0    	mov    ecx,DWORD PTR ds:0xc00203d0
c0010327:	5a                   	pop    edx
c0010328:	68 8f e1 01 c0       	push   0xc001e18f
c001032d:	51                   	push   ecx
c001032e:	e8 d5 86 ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0010333:	58                   	pop    eax
c0010334:	8b 0d d0 03 02 c0    	mov    ecx,DWORD PTR ds:0xc00203d0
c001033a:	5a                   	pop    edx
c001033b:	68 a0 e1 01 c0       	push   0xc001e1a0
c0010340:	51                   	push   ecx
c0010341:	e8 c2 86 ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0010346:	58                   	pop    eax
c0010347:	8b 0d d0 03 02 c0    	mov    ecx,DWORD PTR ds:0xc00203d0
c001034d:	5a                   	pop    edx
c001034e:	68 92 e1 01 c0       	push   0xc001e192
c0010353:	51                   	push   ecx
c0010354:	e8 af 86 ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0010359:	58                   	pop    eax
c001035a:	8b 0d d0 03 02 c0    	mov    ecx,DWORD PTR ds:0xc00203d0
c0010360:	5a                   	pop    edx
c0010361:	53                   	push   ebx
c0010362:	51                   	push   ecx
c0010363:	e8 a0 86 ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0010368:	5b                   	pop    ebx
c0010369:	58                   	pop    eax
c001036a:	a1 d0 03 02 c0       	mov    eax,ds:0xc00203d0
c001036f:	68 8f e1 01 c0       	push   0xc001e18f
c0010374:	50                   	push   eax
c0010375:	e8 8e 86 ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c001037a:	83 c4 10             	add    esp,0x10
c001037d:	eb fe                	jmp    c001037d <Krnl::panic(char const*)+0x106>

c001037f <Krnl::powerThread(void*)>:
c001037f:	83 ec 0c             	sub    esp,0xc
c0010382:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0010387:	48                   	dec    eax
c0010388:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c001038d:	75 01                	jne    c0010390 <Krnl::powerThread(void*)+0x11>
c001038f:	fb                   	sti    
c0010390:	83 ec 0c             	sub    esp,0xc
c0010393:	c6 05 20 2e 02 c0 00 	mov    BYTE PTR ds:0xc0022e20,0x0
c001039a:	6a 0a                	push   0xa
c001039c:	e8 3b 35 00 00       	call   c00138dc <sleep(unsigned int)>
c00103a1:	83 05 64 2e 02 c0 0a 	add    DWORD PTR ds:0xc0022e64,0xa
c00103a8:	83 c4 10             	add    esp,0x10
c00103ab:	eb e3                	jmp    c0010390 <Krnl::powerThread(void*)+0x11>

c00103ad <Krnl::changePowerSettings(Krnl::PowerSettings)>:
c00103ad:	57                   	push   edi
c00103ae:	b9 09 00 00 00       	mov    ecx,0x9
c00103b3:	56                   	push   esi
c00103b4:	bf 40 2e 02 c0       	mov    edi,0xc0022e40
c00103b9:	fc                   	cld    
c00103ba:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00103be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00103c0:	5e                   	pop    esi
c00103c1:	5f                   	pop    edi
c00103c2:	c3                   	ret    

c00103c3 <Krnl::userIOReceived()>:
c00103c3:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c00103cd:	c3                   	ret    

c00103ce <Krnl::handlePowerButton()>:
c00103ce:	83 ec 0c             	sub    esp,0xc
c00103d1:	a1 40 2e 02 c0       	mov    eax,ds:0xc0022e40
c00103d6:	83 f8 02             	cmp    eax,0x2
c00103d9:	75 10                	jne    c00103eb <Krnl::handlePowerButton()+0x1d>
c00103db:	83 ec 0c             	sub    esp,0xc
c00103de:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c00103e4:	e8 51 6c ff ff       	call   c000703a <Computer::shutdown()>
c00103e9:	eb 11                	jmp    c00103fc <Krnl::handlePowerButton()+0x2e>
c00103eb:	48                   	dec    eax
c00103ec:	75 11                	jne    c00103ff <Krnl::handlePowerButton()+0x31>
c00103ee:	83 ec 0c             	sub    esp,0xc
c00103f1:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c00103f7:	e8 6e 6c ff ff       	call   c000706a <Computer::sleep()>
c00103fc:	83 c4 10             	add    esp,0x10
c00103ff:	83 c4 0c             	add    esp,0xc
c0010402:	c3                   	ret    

c0010403 <Krnl::handleSleepButton()>:
c0010403:	83 ec 0c             	sub    esp,0xc
c0010406:	a1 44 2e 02 c0       	mov    eax,ds:0xc0022e44
c001040b:	83 f8 02             	cmp    eax,0x2
c001040e:	75 10                	jne    c0010420 <Krnl::handleSleepButton()+0x1d>
c0010410:	83 ec 0c             	sub    esp,0xc
c0010413:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0010419:	e8 1c 6c ff ff       	call   c000703a <Computer::shutdown()>
c001041e:	eb 11                	jmp    c0010431 <Krnl::handleSleepButton()+0x2e>
c0010420:	48                   	dec    eax
c0010421:	75 11                	jne    c0010434 <Krnl::handleSleepButton()+0x31>
c0010423:	83 ec 0c             	sub    esp,0xc
c0010426:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c001042c:	e8 39 6c ff ff       	call   c000706a <Computer::sleep()>
c0010431:	83 c4 10             	add    esp,0x10
c0010434:	83 c4 0c             	add    esp,0xc
c0010437:	c3                   	ret    

c0010438 <Krnl::setupPowerManager()>:
c0010438:	83 ec 0c             	sub    esp,0xc
c001043b:	c7 05 64 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e64,0x0
c0010445:	68 f0 00 00 00       	push   0xf0
c001044a:	c6 05 20 2e 02 c0 00 	mov    BYTE PTR ds:0xc0022e20,0x0
c0010451:	6a 00                	push   0x0
c0010453:	68 7f 03 01 c0       	push   0xc001037f
c0010458:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c001045e:	e8 49 2f 00 00       	call   c00133ac <Process::createThread(void (*)(void*), void*, int)>
c0010463:	c7 05 40 2e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0022e40,0x2
c001046d:	c7 05 44 2e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0022e44,0x1
c0010477:	c7 05 48 2e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0022e48,0x3
c0010481:	c7 05 4c 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e4c,0x0
c001048b:	c7 05 58 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e58,0x0
c0010495:	c7 05 50 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e50,0x0
c001049f:	c7 05 5c 2e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0022e5c,0x0
c00104a9:	c7 05 54 2e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022e54,0x3c
c00104b3:	c7 05 60 2e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0022e60,0x3c
c00104bd:	83 c4 1c             	add    esp,0x1c
c00104c0:	c3                   	ret    

c00104c1 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c00104c1:	55                   	push   ebp
c00104c2:	57                   	push   edi
c00104c3:	56                   	push   esi
c00104c4:	53                   	push   ebx
c00104c5:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00104cb:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c00104d2:	8a 1e                	mov    bl,BYTE PTR [esi]
c00104d4:	8d 6e 01             	lea    ebp,[esi+0x1]
c00104d7:	80 fb 40             	cmp    bl,0x40
c00104da:	75 1b                	jne    c00104f7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c00104dc:	8a 16                	mov    dl,BYTE PTR [esi]
c00104de:	84 d2                	test   dl,dl
c00104e0:	0f 84 f1 00 00 00    	je     c00105d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00104e6:	8d 46 01             	lea    eax,[esi+0x1]
c00104e9:	80 fa 3a             	cmp    dl,0x3a
c00104ec:	74 04                	je     c00104f2 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c00104ee:	89 c6                	mov    esi,eax
c00104f0:	eb ea                	jmp    c00104dc <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c00104f2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00104f5:	89 c6                	mov    esi,eax
c00104f7:	50                   	push   eax
c00104f8:	6a 40                	push   0x40
c00104fa:	6a 00                	push   0x0
c00104fc:	8d 44 24 24          	lea    eax,[esp+0x24]
c0010500:	50                   	push   eax
c0010501:	e8 ea ff fe ff       	call   c00004f0 <memset>
c0010506:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001050d:	31 c0                	xor    eax,eax
c001050f:	83 c4 10             	add    esp,0x10
c0010512:	8a 0f                	mov    cl,BYTE PTR [edi]
c0010514:	84 c9                	test   cl,cl
c0010516:	0f 84 bb 00 00 00    	je     c00105d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001051c:	3d c7 00 00 00       	cmp    eax,0xc7
c0010521:	0f 8f b0 00 00 00    	jg     c00105d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c0010527:	80 f9 0a             	cmp    cl,0xa
c001052a:	0f 85 98 00 00 00    	jne    c00105c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c0010530:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c0010535:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c0010539:	a8 df                	test   al,0xdf
c001053b:	0f 94 c1             	sete   cl
c001053e:	3c 23                	cmp    al,0x23
c0010540:	0f 94 c2             	sete   dl
c0010543:	08 d1                	or     cl,dl
c0010545:	75 4a                	jne    c0010591 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010547:	8d 50 f7             	lea    edx,[eax-0x9]
c001054a:	80 fa 01             	cmp    dl,0x1
c001054d:	76 42                	jbe    c0010591 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001054f:	3c 5b                	cmp    al,0x5b
c0010551:	75 42                	jne    c0010595 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c0010553:	80 fb 40             	cmp    bl,0x40
c0010556:	75 39                	jne    c0010591 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c0010558:	83 ec 0c             	sub    esp,0xc
c001055b:	8d 54 24 65          	lea    edx,[esp+0x65]
c001055f:	52                   	push   edx
c0010560:	e8 fb ff fe ff       	call   c0000560 <strlen>
c0010565:	83 c4 10             	add    esp,0x10
c0010568:	83 f8 3f             	cmp    eax,0x3f
c001056b:	77 6a                	ja     c00105d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001056d:	50                   	push   eax
c001056e:	50                   	push   eax
c001056f:	8d 54 24 61          	lea    edx,[esp+0x61]
c0010573:	52                   	push   edx
c0010574:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010578:	52                   	push   edx
c0010579:	e8 a2 00 ff ff       	call   c0000620 <strcpy>
c001057e:	58                   	pop    eax
c001057f:	8d 54 24 24          	lea    edx,[esp+0x24]
c0010583:	52                   	push   edx
c0010584:	e8 d7 ff fe ff       	call   c0000560 <strlen>
c0010589:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001058e:	83 c4 10             	add    esp,0x10
c0010591:	31 d2                	xor    edx,edx
c0010593:	eb 3a                	jmp    c00105cf <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c0010595:	80 fb 40             	cmp    bl,0x40
c0010598:	74 06                	je     c00105a0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001059a:	8d 44 24 58          	lea    eax,[esp+0x58]
c001059e:	eb 20                	jmp    c00105c0 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c00105a0:	50                   	push   eax
c00105a1:	50                   	push   eax
c00105a2:	55                   	push   ebp
c00105a3:	8d 44 24 24          	lea    eax,[esp+0x24]
c00105a7:	50                   	push   eax
c00105a8:	e8 53 01 ff ff       	call   c0000700 <strcmp>
c00105ad:	83 c4 10             	add    esp,0x10
c00105b0:	85 c0                	test   eax,eax
c00105b2:	75 dd                	jne    c0010591 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00105b4:	eb e4                	jmp    c001059a <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c00105b6:	8d 50 01             	lea    edx,[eax+0x1]
c00105b9:	80 f9 3d             	cmp    cl,0x3d
c00105bc:	74 1d                	je     c00105db <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c00105be:	89 d0                	mov    eax,edx
c00105c0:	8a 08                	mov    cl,BYTE PTR [eax]
c00105c2:	84 c9                	test   cl,cl
c00105c4:	75 f0                	jne    c00105b6 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c00105c6:	eb 0f                	jmp    c00105d7 <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c00105c8:	8d 50 01             	lea    edx,[eax+0x1]
c00105cb:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c00105cf:	47                   	inc    edi
c00105d0:	89 d0                	mov    eax,edx
c00105d2:	e9 3b ff ff ff       	jmp    c0010512 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c00105d7:	31 c0                	xor    eax,eax
c00105d9:	eb 33                	jmp    c001060e <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c00105db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00105df:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00105e2:	50                   	push   eax
c00105e3:	50                   	push   eax
c00105e4:	8d 44 24 60          	lea    eax,[esp+0x60]
c00105e8:	50                   	push   eax
c00105e9:	56                   	push   esi
c00105ea:	e8 11 01 ff ff       	call   c0000700 <strcmp>
c00105ef:	83 c4 10             	add    esp,0x10
c00105f2:	85 c0                	test   eax,eax
c00105f4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00105f8:	75 97                	jne    c0010591 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c00105fa:	51                   	push   ecx
c00105fb:	51                   	push   ecx
c00105fc:	52                   	push   edx
c00105fd:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c0010604:	e8 17 00 ff ff       	call   c0000620 <strcpy>
c0010609:	83 c4 10             	add    esp,0x10
c001060c:	b0 01                	mov    al,0x1
c001060e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0010614:	5b                   	pop    ebx
c0010615:	5e                   	pop    esi
c0010616:	5f                   	pop    edi
c0010617:	5d                   	pop    ebp
c0010618:	c3                   	ret    

c0010619 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c0010619:	57                   	push   edi
c001061a:	56                   	push   esi
c001061b:	53                   	push   ebx
c001061c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0010622:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c0010629:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0010630:	53                   	push   ebx
c0010631:	e8 2a ff fe ff       	call   c0000560 <strlen>
c0010636:	89 34 24             	mov    DWORD PTR [esp],esi
c0010639:	89 c7                	mov    edi,eax
c001063b:	e8 20 ff fe ff       	call   c0000560 <strlen>
c0010640:	83 c4 10             	add    esp,0x10
c0010643:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c0010647:	3d ff 00 00 00       	cmp    eax,0xff
c001064c:	0f 87 d3 00 00 00    	ja     c0010725 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0010652:	57                   	push   edi
c0010653:	57                   	push   edi
c0010654:	56                   	push   esi
c0010655:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0010659:	56                   	push   esi
c001065a:	e8 c1 ff fe ff       	call   c0000620 <strcpy>
c001065f:	58                   	pop    eax
c0010660:	5a                   	pop    edx
c0010661:	68 bf e4 01 c0       	push   0xc001e4bf
c0010666:	56                   	push   esi
c0010667:	e8 74 01 ff ff       	call   c00007e0 <strcat>
c001066c:	59                   	pop    ecx
c001066d:	5f                   	pop    edi
c001066e:	53                   	push   ebx
c001066f:	56                   	push   esi
c0010670:	e8 6b 01 ff ff       	call   c00007e0 <strcat>
c0010675:	58                   	pop    eax
c0010676:	5a                   	pop    edx
c0010677:	68 da e1 01 c0       	push   0xc001e1da
c001067c:	56                   	push   esi
c001067d:	e8 5e 01 ff ff       	call   c00007e0 <strcat>
c0010682:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0010689:	e8 0b 73 ff ff       	call   c0007999 <malloc>
c001068e:	83 c4 0c             	add    esp,0xc
c0010691:	89 c3                	mov    ebx,eax
c0010693:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c0010699:	56                   	push   esi
c001069a:	50                   	push   eax
c001069b:	e8 fe a5 ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c00106a0:	83 c4 10             	add    esp,0x10
c00106a3:	85 db                	test   ebx,ebx
c00106a5:	74 7e                	je     c0010725 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00106a7:	51                   	push   ecx
c00106a8:	51                   	push   ecx
c00106a9:	6a 01                	push   0x1
c00106ab:	53                   	push   ebx
c00106ac:	e8 ad a6 ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c00106b1:	83 c4 10             	add    esp,0x10
c00106b4:	85 c0                	test   eax,eax
c00106b6:	74 08                	je     c00106c0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c00106b8:	83 ec 0c             	sub    esp,0xc
c00106bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106bd:	53                   	push   ebx
c00106be:	eb 5f                	jmp    c001071f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c00106c0:	52                   	push   edx
c00106c1:	8d 44 24 17          	lea    eax,[esp+0x17]
c00106c5:	50                   	push   eax
c00106c6:	8d 44 24 20          	lea    eax,[esp+0x20]
c00106ca:	50                   	push   eax
c00106cb:	53                   	push   ebx
c00106cc:	e8 39 a9 ff ff       	call   c000b00a <File::stat(unsigned long long*, bool*)>
c00106d1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00106d5:	83 c4 10             	add    esp,0x10
c00106d8:	89 c1                	mov    ecx,eax
c00106da:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c00106de:	74 31                	je     c0010711 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00106e0:	83 ec 0c             	sub    esp,0xc
c00106e3:	50                   	push   eax
c00106e4:	e8 b0 72 ff ff       	call   c0007999 <malloc>
c00106e9:	89 c6                	mov    esi,eax
c00106eb:	58                   	pop    eax
c00106ec:	8b 03                	mov    eax,DWORD PTR [ebx]
c00106ee:	8d 54 24 20          	lea    edx,[esp+0x20]
c00106f2:	52                   	push   edx
c00106f3:	56                   	push   esi
c00106f4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00106f8:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00106fc:	53                   	push   ebx
c00106fd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010700:	83 c4 20             	add    esp,0x20
c0010703:	85 c0                	test   eax,eax
c0010705:	75 0a                	jne    c0010711 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c0010707:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001070b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001070f:	74 18                	je     c0010729 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c0010711:	83 ec 0c             	sub    esp,0xc
c0010714:	53                   	push   ebx
c0010715:	e8 a2 a6 ff ff       	call   c000adbc <File::close()>
c001071a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001071c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001071f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010722:	83 c4 10             	add    esp,0x10
c0010725:	31 c0                	xor    eax,eax
c0010727:	eb 3b                	jmp    c0010764 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c0010729:	83 ec 0c             	sub    esp,0xc
c001072c:	53                   	push   ebx
c001072d:	e8 8a a6 ff ff       	call   c000adbc <File::close()>
c0010732:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010734:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010737:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001073a:	83 c4 0c             	add    esp,0xc
c001073d:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0010744:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001074b:	56                   	push   esi
c001074c:	e8 70 fd ff ff       	call   c00104c1 <Reg::findLineFromLoadedData(char*, char*, char*)>
c0010751:	89 34 24             	mov    DWORD PTR [esp],esi
c0010754:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0010758:	e8 4c 72 ff ff       	call   c00079a9 <free>
c001075d:	83 c4 10             	add    esp,0x10
c0010760:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0010764:	81 c4 20 01 00 00    	add    esp,0x120
c001076a:	5b                   	pop    ebx
c001076b:	5e                   	pop    esi
c001076c:	5f                   	pop    edi
c001076d:	c3                   	ret    

c001076e <Reg::getLine(char*, char*, char*)>:
c001076e:	57                   	push   edi
c001076f:	56                   	push   esi
c0010770:	53                   	push   ebx
c0010771:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010775:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010779:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001077d:	57                   	push   edi
c001077e:	56                   	push   esi
c001077f:	53                   	push   ebx
c0010780:	68 df e1 01 c0       	push   0xc001e1df
c0010785:	e8 8f fe ff ff       	call   c0010619 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001078a:	83 c4 10             	add    esp,0x10
c001078d:	84 c0                	test   al,al
c001078f:	75 10                	jne    c00107a1 <Reg::getLine(char*, char*, char*)+0x33>
c0010791:	57                   	push   edi
c0010792:	56                   	push   esi
c0010793:	53                   	push   ebx
c0010794:	68 04 e2 01 c0       	push   0xc001e204
c0010799:	e8 7b fe ff ff       	call   c0010619 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001079e:	83 c4 10             	add    esp,0x10
c00107a1:	5b                   	pop    ebx
c00107a2:	5e                   	pop    esi
c00107a3:	5f                   	pop    edi
c00107a4:	c3                   	ret    

c00107a5 <Reg::readInt(char*, char*, int*)>:
c00107a5:	55                   	push   ebp
c00107a6:	57                   	push   edi
c00107a7:	56                   	push   esi
c00107a8:	53                   	push   ebx
c00107a9:	81 ec f0 00 00 00    	sub    esp,0xf0
c00107af:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c00107b3:	57                   	push   edi
c00107b4:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00107bb:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c00107c2:	e8 a7 ff ff ff       	call   c001076e <Reg::getLine(char*, char*, char*)>
c00107c7:	83 c4 10             	add    esp,0x10
c00107ca:	84 c0                	test   al,al
c00107cc:	0f 84 b3 00 00 00    	je     c0010885 <Reg::readInt(char*, char*, int*)+0xe0>
c00107d2:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c00107d6:	80 fa 2b             	cmp    dl,0x2b
c00107d9:	74 0c                	je     c00107e7 <Reg::readInt(char*, char*, int*)+0x42>
c00107db:	80 fa 2d             	cmp    dl,0x2d
c00107de:	75 0e                	jne    c00107ee <Reg::readInt(char*, char*, int*)+0x49>
c00107e0:	ba 01 00 00 00       	mov    edx,0x1
c00107e5:	eb 0b                	jmp    c00107f2 <Reg::readInt(char*, char*, int*)+0x4d>
c00107e7:	ba 01 00 00 00       	mov    edx,0x1
c00107ec:	eb 02                	jmp    c00107f0 <Reg::readInt(char*, char*, int*)+0x4b>
c00107ee:	31 d2                	xor    edx,edx
c00107f0:	31 c0                	xor    eax,eax
c00107f2:	be 0a 00 00 00       	mov    esi,0xa
c00107f7:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00107fc:	75 20                	jne    c001081e <Reg::readInt(char*, char*, int*)+0x79>
c00107fe:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c0010802:	80 f9 78             	cmp    cl,0x78
c0010805:	75 0a                	jne    c0010811 <Reg::readInt(char*, char*, int*)+0x6c>
c0010807:	83 c2 02             	add    edx,0x2
c001080a:	be 10 00 00 00       	mov    esi,0x10
c001080f:	eb 0d                	jmp    c001081e <Reg::readInt(char*, char*, int*)+0x79>
c0010811:	80 f9 62             	cmp    cl,0x62
c0010814:	75 08                	jne    c001081e <Reg::readInt(char*, char*, int*)+0x79>
c0010816:	83 c2 02             	add    edx,0x2
c0010819:	be 02 00 00 00       	mov    esi,0x2
c001081e:	01 d7                	add    edi,edx
c0010820:	31 d2                	xor    edx,edx
c0010822:	8a 1f                	mov    bl,BYTE PTR [edi]
c0010824:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c0010828:	80 fb 0d             	cmp    bl,0xd
c001082b:	0f 94 c3             	sete   bl
c001082e:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0010833:	0f 94 c1             	sete   cl
c0010836:	08 cb                	or     bl,cl
c0010838:	75 3a                	jne    c0010874 <Reg::readInt(char*, char*, int*)+0xcf>
c001083a:	0f af d6             	imul   edx,esi
c001083d:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c0010842:	83 fe 10             	cmp    esi,0x10
c0010845:	75 26                	jne    c001086d <Reg::readInt(char*, char*, int*)+0xc8>
c0010847:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001084b:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001084e:	89 e9                	mov    ecx,ebp
c0010850:	80 f9 05             	cmp    cl,0x5
c0010853:	77 06                	ja     c001085b <Reg::readInt(char*, char*, int*)+0xb6>
c0010855:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c0010859:	eb 16                	jmp    c0010871 <Reg::readInt(char*, char*, int*)+0xcc>
c001085b:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001085f:	83 e9 61             	sub    ecx,0x61
c0010862:	80 f9 05             	cmp    cl,0x5
c0010865:	77 06                	ja     c001086d <Reg::readInt(char*, char*, int*)+0xc8>
c0010867:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001086b:	eb 04                	jmp    c0010871 <Reg::readInt(char*, char*, int*)+0xcc>
c001086d:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c0010871:	47                   	inc    edi
c0010872:	eb ae                	jmp    c0010822 <Reg::readInt(char*, char*, int*)+0x7d>
c0010874:	84 c0                	test   al,al
c0010876:	74 02                	je     c001087a <Reg::readInt(char*, char*, int*)+0xd5>
c0010878:	f7 da                	neg    edx
c001087a:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c0010881:	89 10                	mov    DWORD PTR [eax],edx
c0010883:	88 d8                	mov    al,bl
c0010885:	81 c4 ec 00 00 00    	add    esp,0xec
c001088b:	5b                   	pop    ebx
c001088c:	5e                   	pop    esi
c001088d:	5f                   	pop    edi
c001088e:	5d                   	pop    ebp
c001088f:	c3                   	ret    

c0010890 <Reg::readString(char*, char*, char*, int)>:
c0010890:	57                   	push   edi
c0010891:	56                   	push   esi
c0010892:	53                   	push   ebx
c0010893:	81 ec d4 00 00 00    	sub    esp,0xd4
c0010899:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c00108a0:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c00108a4:	57                   	push   edi
c00108a5:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00108ac:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c00108b3:	e8 b6 fe ff ff       	call   c001076e <Reg::getLine(char*, char*, char*)>
c00108b8:	83 c4 10             	add    esp,0x10
c00108bb:	89 c6                	mov    esi,eax
c00108bd:	84 c0                	test   al,al
c00108bf:	74 44                	je     c0010905 <Reg::readString(char*, char*, char*, int)+0x75>
c00108c1:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c00108c8:	31 c0                	xor    eax,eax
c00108ca:	4a                   	dec    edx
c00108cb:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c00108ce:	84 c9                	test   cl,cl
c00108d0:	74 0f                	je     c00108e1 <Reg::readString(char*, char*, char*, int)+0x51>
c00108d2:	39 c2                	cmp    edx,eax
c00108d4:	7e 0b                	jle    c00108e1 <Reg::readString(char*, char*, char*, int)+0x51>
c00108d6:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c00108d9:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c00108de:	40                   	inc    eax
c00108df:	eb ea                	jmp    c00108cb <Reg::readString(char*, char*, char*, int)+0x3b>
c00108e1:	83 ec 0c             	sub    esp,0xc
c00108e4:	53                   	push   ebx
c00108e5:	e8 76 fc fe ff       	call   c0000560 <strlen>
c00108ea:	83 c4 10             	add    esp,0x10
c00108ed:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00108f2:	75 11                	jne    c0010905 <Reg::readString(char*, char*, char*, int)+0x75>
c00108f4:	83 ec 0c             	sub    esp,0xc
c00108f7:	53                   	push   ebx
c00108f8:	e8 63 fc fe ff       	call   c0000560 <strlen>
c00108fd:	83 c4 10             	add    esp,0x10
c0010900:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0010905:	81 c4 d0 00 00 00    	add    esp,0xd0
c001090b:	89 f0                	mov    eax,esi
c001090d:	5b                   	pop    ebx
c001090e:	5e                   	pop    esi
c001090f:	5f                   	pop    edi
c0010910:	c3                   	ret    

c0010911 <Reg::readBool(char*, char*, bool*)>:
c0010911:	83 ec 20             	sub    esp,0x20
c0010914:	8d 44 24 10          	lea    eax,[esp+0x10]
c0010918:	50                   	push   eax
c0010919:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001091d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010921:	e8 7f fe ff ff       	call   c00107a5 <Reg::readInt(char*, char*, int*)>
c0010926:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001092b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001092f:	0f 95 02             	setne  BYTE PTR [edx]
c0010932:	83 c4 2c             	add    esp,0x2c
c0010935:	c3                   	ret    

c0010936 <Reg::readBoolWithDefault(char*, char*, bool)>:
c0010936:	53                   	push   ebx
c0010937:	83 ec 1c             	sub    esp,0x1c
c001093a:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001093e:	8d 44 24 13          	lea    eax,[esp+0x13]
c0010942:	50                   	push   eax
c0010943:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010947:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001094b:	e8 c1 ff ff ff       	call   c0010911 <Reg::readBool(char*, char*, bool*)>
c0010950:	83 c4 10             	add    esp,0x10
c0010953:	84 c0                	test   al,al
c0010955:	74 04                	je     c001095b <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0010957:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001095b:	88 d8                	mov    al,bl
c001095d:	83 c4 18             	add    esp,0x18
c0010960:	5b                   	pop    ebx
c0010961:	c3                   	ret    

c0010962 <Reg::readIntWithDefault(char*, char*, int)>:
c0010962:	53                   	push   ebx
c0010963:	83 ec 1c             	sub    esp,0x1c
c0010966:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001096a:	8d 44 24 10          	lea    eax,[esp+0x10]
c001096e:	50                   	push   eax
c001096f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010973:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0010977:	e8 29 fe ff ff       	call   c00107a5 <Reg::readInt(char*, char*, int*)>
c001097c:	83 c4 10             	add    esp,0x10
c001097f:	84 c0                	test   al,al
c0010981:	74 04                	je     c0010987 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0010983:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010987:	89 d8                	mov    eax,ebx
c0010989:	83 c4 18             	add    esp,0x18
c001098c:	5b                   	pop    ebx
c001098d:	c3                   	ret    

c001098e <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001098e:	57                   	push   edi
c001098f:	56                   	push   esi
c0010990:	56                   	push   esi
c0010991:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010995:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0010999:	56                   	push   esi
c001099a:	57                   	push   edi
c001099b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001099f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00109a3:	e8 e8 fe ff ff       	call   c0010890 <Reg::readString(char*, char*, char*, int)>
c00109a8:	83 c4 10             	add    esp,0x10
c00109ab:	84 c0                	test   al,al
c00109ad:	75 1a                	jne    c00109c9 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c00109af:	51                   	push   ecx
c00109b0:	56                   	push   esi
c00109b1:	6a 00                	push   0x0
c00109b3:	57                   	push   edi
c00109b4:	e8 37 fb fe ff       	call   c00004f0 <memset>
c00109b9:	8d 4e ff             	lea    ecx,[esi-0x1]
c00109bc:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00109c0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00109c2:	83 c4 10             	add    esp,0x10
c00109c5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00109c9:	89 f8                	mov    eax,edi
c00109cb:	5a                   	pop    edx
c00109cc:	5e                   	pop    esi
c00109cd:	5f                   	pop    edi
c00109ce:	c3                   	ret    

c00109cf <Sys::eject(regs*)>:
c00109cf:	83 ec 0c             	sub    esp,0xc
c00109d2:	83 ca ff             	or     edx,0xffffffff
c00109d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00109d9:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c00109dc:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c00109e1:	83 e9 41             	sub    ecx,0x41
c00109e4:	83 f9 19             	cmp    ecx,0x19
c00109e7:	77 18                	ja     c0010a01 <Sys::eject(regs*)+0x32>
c00109e9:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c00109f0:	85 c9                	test   ecx,ecx
c00109f2:	74 0d                	je     c0010a01 <Sys::eject(regs*)+0x32>
c00109f4:	83 ec 0c             	sub    esp,0xc
c00109f7:	51                   	push   ecx
c00109f8:	e8 a9 c3 ff ff       	call   c000cda6 <LogicalDisk::eject()>
c00109fd:	83 c4 10             	add    esp,0x10
c0010a00:	99                   	cdq    
c0010a01:	83 c4 0c             	add    esp,0xc
c0010a04:	c3                   	ret    

c0010a05 <Sys::exit(regs*)>:
c0010a05:	83 ec 18             	sub    esp,0x18
c0010a08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0010a0c:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010a0f:	e8 dc 34 00 00       	call   c0013ef0 <terminateTask(int)>
c0010a14:	83 c8 ff             	or     eax,0xffffffff
c0010a17:	83 c4 1c             	add    esp,0x1c
c0010a1a:	89 c2                	mov    edx,eax
c0010a1c:	c3                   	ret    

c0010a1d <Sys::getCwd(regs*)>:
c0010a1d:	83 ec 10             	sub    esp,0x10
c0010a20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010a24:	ff 70 28             	push   DWORD PTR [eax+0x28]
c0010a27:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010a2a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a2f:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010a32:	e8 69 a0 ff ff       	call   c000aaa0 <Fs::getcwd(Process*, char*, int)>
c0010a37:	83 c4 1c             	add    esp,0x1c
c0010a3a:	99                   	cdq    
c0010a3b:	c3                   	ret    

c0010a3c <Sys::getPID(regs*)>:
c0010a3c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010a41:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010a44:	8b 00                	mov    eax,DWORD PTR [eax]
c0010a46:	99                   	cdq    
c0010a47:	c3                   	ret    

c0010a48 <Sys::getRAMData(regs*)>:
c0010a48:	8b 0d b4 03 02 c0    	mov    ecx,DWORD PTR ds:0xc00203b4
c0010a4e:	69 05 b0 03 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc00203b0,0xc8
c0010a58:	99                   	cdq    
c0010a59:	f7 f9                	idiv   ecx
c0010a5b:	c1 e0 18             	shl    eax,0x18
c0010a5e:	09 c8                	or     eax,ecx
c0010a60:	99                   	cdq    
c0010a61:	c3                   	ret    

c0010a62 <Sys::getVGAPtr(regs*)>:
c0010a62:	55                   	push   ebp
c0010a63:	57                   	push   edi
c0010a64:	56                   	push   esi
c0010a65:	53                   	push   ebx
c0010a66:	83 ec 18             	sub    esp,0x18
c0010a69:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010a6d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0010a70:	e8 7b 2f 00 00       	call   c00139f0 <Thr::processFromPID(int)>
c0010a75:	83 c4 10             	add    esp,0x10
c0010a78:	89 c1                	mov    ecx,eax
c0010a7a:	b8 01 00 00 00       	mov    eax,0x1
c0010a7f:	85 c9                	test   ecx,ecx
c0010a81:	74 57                	je     c0010ada <Sys::getVGAPtr(regs*)+0x78>
c0010a83:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0010a89:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0010a8d:	74 0c                	je     c0010a9b <Sys::getVGAPtr(regs*)+0x39>
c0010a8f:	83 ec 0c             	sub    esp,0xc
c0010a92:	55                   	push   ebp
c0010a93:	e8 31 7c ff ff       	call   c00086c9 <setActiveTerminal(VgaText*)>
c0010a98:	83 c4 10             	add    esp,0x10
c0010a9b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0010a9e:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0010aa1:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0010aa6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010aa8:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0010aab:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010aae:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0010ab4:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010ab7:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0010aba:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0010ac0:	50                   	push   eax
c0010ac1:	50                   	push   eax
c0010ac2:	68 1f e2 01 c0       	push   0xc001e21f
c0010ac7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010aca:	05 a8 0f 00 00       	add    eax,0xfa8
c0010acf:	50                   	push   eax
c0010ad0:	e8 4b fb fe ff       	call   c0000620 <strcpy>
c0010ad5:	83 c4 10             	add    esp,0x10
c0010ad8:	31 c0                	xor    eax,eax
c0010ada:	83 c4 0c             	add    esp,0xc
c0010add:	31 d2                	xor    edx,edx
c0010adf:	5b                   	pop    ebx
c0010ae0:	5e                   	pop    esi
c0010ae1:	5f                   	pop    edi
c0010ae2:	5d                   	pop    ebp
c0010ae3:	c3                   	ret    

c0010ae4 <Sys::loadDLL(regs*)>:
c0010ae4:	56                   	push   esi
c0010ae5:	53                   	push   ebx
c0010ae6:	31 d2                	xor    edx,edx
c0010ae8:	51                   	push   ecx
c0010ae9:	b8 01 00 00 00       	mov    eax,0x1
c0010aee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010af2:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0010af6:	0f 84 8c 00 00 00    	je     c0010b88 <Sys::loadDLL(regs*)+0xa4>
c0010afc:	83 ec 0c             	sub    esp,0xc
c0010aff:	68 14 01 00 00       	push   0x114
c0010b04:	e8 90 6e ff ff       	call   c0007999 <malloc>
c0010b09:	83 c4 0c             	add    esp,0xc
c0010b0c:	89 c3                	mov    ebx,eax
c0010b0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010b13:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010b16:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010b19:	53                   	push   ebx
c0010b1a:	e8 7f a1 ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c0010b1f:	83 c4 10             	add    esp,0x10
c0010b22:	31 d2                	xor    edx,edx
c0010b24:	b8 02 00 00 00       	mov    eax,0x2
c0010b29:	85 db                	test   ebx,ebx
c0010b2b:	74 5b                	je     c0010b88 <Sys::loadDLL(regs*)+0xa4>
c0010b2d:	83 ec 0c             	sub    esp,0xc
c0010b30:	53                   	push   ebx
c0010b31:	e8 96 a4 ff ff       	call   c000afcc <File::exists()>
c0010b36:	83 c4 10             	add    esp,0x10
c0010b39:	84 c0                	test   al,al
c0010b3b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010b3d:	75 11                	jne    c0010b50 <Sys::loadDLL(regs*)+0x6c>
c0010b3f:	83 ec 0c             	sub    esp,0xc
c0010b42:	53                   	push   ebx
c0010b43:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b46:	83 c4 10             	add    esp,0x10
c0010b49:	b8 03 00 00 00       	mov    eax,0x3
c0010b4e:	eb 36                	jmp    c0010b86 <Sys::loadDLL(regs*)+0xa2>
c0010b50:	83 ec 0c             	sub    esp,0xc
c0010b53:	53                   	push   ebx
c0010b54:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010b57:	58                   	pop    eax
c0010b58:	5a                   	pop    edx
c0010b59:	6a 00                	push   0x0
c0010b5b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0010b5e:	e8 77 20 00 00       	call   c0012bda <Thr::loadDLL(char const*, bool)>
c0010b63:	83 c4 10             	add    esp,0x10
c0010b66:	89 c1                	mov    ecx,eax
c0010b68:	31 d2                	xor    edx,edx
c0010b6a:	b8 04 00 00 00       	mov    eax,0x4
c0010b6f:	85 c9                	test   ecx,ecx
c0010b71:	74 15                	je     c0010b88 <Sys::loadDLL(regs*)+0xa4>
c0010b73:	53                   	push   ebx
c0010b74:	53                   	push   ebx
c0010b75:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0010b7b:	51                   	push   ecx
c0010b7c:	e8 8a 22 00 00       	call   c0012e0b <Thr::executeDLL(unsigned long, void*)>
c0010b81:	83 c4 10             	add    esp,0x10
c0010b84:	31 c0                	xor    eax,eax
c0010b86:	31 d2                	xor    edx,edx
c0010b88:	59                   	pop    ecx
c0010b89:	5b                   	pop    ebx
c0010b8a:	5e                   	pop    esi
c0010b8b:	c3                   	ret    

c0010b8c <Sys::read(regs*)>:
c0010b8c:	57                   	push   edi
c0010b8d:	56                   	push   esi
c0010b8e:	53                   	push   ebx
c0010b8f:	83 ec 10             	sub    esp,0x10
c0010b92:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010b96:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010b99:	83 f8 02             	cmp    eax,0x2
c0010b9c:	77 10                	ja     c0010bae <Sys::read(regs*)+0x22>
c0010b9e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010ba3:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010ba6:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0010bac:	eb 0e                	jmp    c0010bbc <Sys::read(regs*)+0x30>
c0010bae:	83 ec 0c             	sub    esp,0xc
c0010bb1:	50                   	push   eax
c0010bb2:	e8 c8 87 ff ff       	call   c000937f <getFromFileDescriptor(int)>
c0010bb7:	83 c4 10             	add    esp,0x10
c0010bba:	89 c1                	mov    ecx,eax
c0010bbc:	83 c8 ff             	or     eax,0xffffffff
c0010bbf:	85 c9                	test   ecx,ecx
c0010bc1:	89 c2                	mov    edx,eax
c0010bc3:	74 28                	je     c0010bed <Sys::read(regs*)+0x61>
c0010bc5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010bcd:	31 ff                	xor    edi,edi
c0010bcf:	83 ec 0c             	sub    esp,0xc
c0010bd2:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010bd4:	8d 54 24 18          	lea    edx,[esp+0x18]
c0010bd8:	52                   	push   edx
c0010bd9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010bdc:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0010bdf:	57                   	push   edi
c0010be0:	56                   	push   esi
c0010be1:	51                   	push   ecx
c0010be2:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010be5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010be9:	83 c4 20             	add    esp,0x20
c0010bec:	99                   	cdq    
c0010bed:	83 c4 10             	add    esp,0x10
c0010bf0:	5b                   	pop    ebx
c0010bf1:	5e                   	pop    esi
c0010bf2:	5f                   	pop    edi
c0010bf3:	c3                   	ret    

c0010bf4 <Sys::sbrk(regs*)>:
c0010bf4:	56                   	push   esi
c0010bf5:	53                   	push   ebx
c0010bf6:	50                   	push   eax
c0010bf7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010bfc:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010c00:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010c03:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0010c06:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0010c0c:	85 db                	test   ebx,ebx
c0010c0e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0010c11:	74 02                	je     c0010c15 <Sys::sbrk(regs*)+0x21>
c0010c13:	79 06                	jns    c0010c1b <Sys::sbrk(regs*)+0x27>
c0010c15:	89 f0                	mov    eax,esi
c0010c17:	31 d2                	xor    edx,edx
c0010c19:	eb 2a                	jmp    c0010c45 <Sys::sbrk(regs*)+0x51>
c0010c1b:	83 c8 ff             	or     eax,0xffffffff
c0010c1e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0010c24:	89 c2                	mov    edx,eax
c0010c26:	77 1d                	ja     c0010c45 <Sys::sbrk(regs*)+0x51>
c0010c28:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0010c2e:	50                   	push   eax
c0010c2f:	c1 ea 0c             	shr    edx,0xc
c0010c32:	68 07 0c 00 00       	push   0xc07
c0010c37:	52                   	push   edx
c0010c38:	51                   	push   ecx
c0010c39:	e8 30 90 ff ff       	call   c0009c6e <VAS::allocatePages(int, int)>
c0010c3e:	89 f0                	mov    eax,esi
c0010c40:	31 d2                	xor    edx,edx
c0010c42:	83 c4 10             	add    esp,0x10
c0010c45:	59                   	pop    ecx
c0010c46:	5b                   	pop    ebx
c0010c47:	5e                   	pop    esi
c0010c48:	c3                   	ret    

c0010c49 <Sys::setCwd(regs*)>:
c0010c49:	83 ec 14             	sub    esp,0x14
c0010c4c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0010c50:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0010c53:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010c58:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0010c5b:	e8 0b a4 ff ff       	call   c000b06b <Fs::setcwd(Process*, char*)>
c0010c60:	83 c4 1c             	add    esp,0x1c
c0010c63:	99                   	cdq    
c0010c64:	c3                   	ret    

c0010c65 <Sys::setTime(regs*)>:
c0010c65:	55                   	push   ebp
c0010c66:	31 c9                	xor    ecx,ecx
c0010c68:	57                   	push   edi
c0010c69:	bd 0c 00 00 00       	mov    ebp,0xc
c0010c6e:	56                   	push   esi
c0010c6f:	53                   	push   ebx
c0010c70:	31 db                	xor    ebx,ebx
c0010c72:	83 ec 10             	sub    esp,0x10
c0010c75:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0010c79:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0010c7c:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0010c7f:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0010c82:	89 c2                	mov    edx,eax
c0010c84:	66 81 ef 6c 07       	sub    di,0x76c
c0010c89:	83 e2 1f             	and    edx,0x1f
c0010c8c:	c1 e7 10             	shl    edi,0x10
c0010c8f:	42                   	inc    edx
c0010c90:	c1 e8 05             	shr    eax,0x5
c0010c93:	88 d1                	mov    cl,dl
c0010c95:	31 d2                	xor    edx,edx
c0010c97:	f7 f5                	div    ebp
c0010c99:	89 dd                	mov    ebp,ebx
c0010c9b:	88 d5                	mov    ch,dl
c0010c9d:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0010ca3:	0f b7 c1             	movzx  eax,cx
c0010ca6:	31 d2                	xor    edx,edx
c0010ca8:	09 f8                	or     eax,edi
c0010caa:	bf 3c 00 00 00       	mov    edi,0x3c
c0010caf:	89 c1                	mov    ecx,eax
c0010cb1:	89 f0                	mov    eax,esi
c0010cb3:	f7 f7                	div    edi
c0010cb5:	c1 e2 10             	shl    edx,0x10
c0010cb8:	09 d5                	or     ebp,edx
c0010cba:	31 d2                	xor    edx,edx
c0010cbc:	89 eb                	mov    ebx,ebp
c0010cbe:	f7 f7                	div    edi
c0010cc0:	bf 10 0e 00 00       	mov    edi,0xe10
c0010cc5:	88 d7                	mov    bh,dl
c0010cc7:	89 f0                	mov    eax,esi
c0010cc9:	31 d2                	xor    edx,edx
c0010ccb:	f7 f7                	div    edi
c0010ccd:	bf 18 00 00 00       	mov    edi,0x18
c0010cd2:	31 d2                	xor    edx,edx
c0010cd4:	f7 f7                	div    edi
c0010cd6:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0010cdb:	88 d3                	mov    bl,dl
c0010cdd:	53                   	push   ebx
c0010cde:	51                   	push   ecx
c0010cdf:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0010ce5:	e8 92 ab ff ff       	call   c000b87c <Clock::setTimeInDatetimeLocal(datetime_t)>
c0010cea:	83 c4 1c             	add    esp,0x1c
c0010ced:	83 f0 01             	xor    eax,0x1
c0010cf0:	5b                   	pop    ebx
c0010cf1:	0f b6 c0             	movzx  eax,al
c0010cf4:	5e                   	pop    esi
c0010cf5:	31 d2                	xor    edx,edx
c0010cf7:	5f                   	pop    edi
c0010cf8:	5d                   	pop    ebp
c0010cf9:	c3                   	ret    

c0010cfa <Sys::timezone(regs*)>:
c0010cfa:	53                   	push   ebx
c0010cfb:	83 ec 08             	sub    esp,0x8
c0010cfe:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d02:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0010d06:	75 17                	jne    c0010d1f <Sys::timezone(regs*)+0x25>
c0010d08:	83 ec 0c             	sub    esp,0xc
c0010d0b:	68 29 e2 01 c0       	push   0xc001e229
c0010d10:	e8 13 9a ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0010d15:	83 c8 ff             	or     eax,0xffffffff
c0010d18:	83 c4 10             	add    esp,0x10
c0010d1b:	89 c2                	mov    edx,eax
c0010d1d:	eb 20                	jmp    c0010d3f <Sys::timezone(regs*)+0x45>
c0010d1f:	83 ec 0c             	sub    esp,0xc
c0010d22:	68 3e e2 01 c0       	push   0xc001e23e
c0010d27:	e8 fc 99 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0010d2c:	58                   	pop    eax
c0010d2d:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0010d30:	e8 a3 a8 ff ff       	call   c000b5d8 <User::loadClockSettings(int)>
c0010d35:	83 c4 10             	add    esp,0x10
c0010d38:	b8 01 00 00 00       	mov    eax,0x1
c0010d3d:	31 d2                	xor    edx,edx
c0010d3f:	83 c4 08             	add    esp,0x8
c0010d42:	5b                   	pop    ebx
c0010d43:	c3                   	ret    

c0010d44 <Sys::write(regs*)>:
c0010d44:	57                   	push   edi
c0010d45:	56                   	push   esi
c0010d46:	53                   	push   ebx
c0010d47:	83 ec 10             	sub    esp,0x10
c0010d4a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010d4e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0010d51:	83 f8 02             	cmp    eax,0x2
c0010d54:	77 10                	ja     c0010d66 <Sys::write(regs*)+0x22>
c0010d56:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010d5b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010d5e:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0010d64:	eb 0e                	jmp    c0010d74 <Sys::write(regs*)+0x30>
c0010d66:	83 ec 0c             	sub    esp,0xc
c0010d69:	50                   	push   eax
c0010d6a:	e8 10 86 ff ff       	call   c000937f <getFromFileDescriptor(int)>
c0010d6f:	83 c4 10             	add    esp,0x10
c0010d72:	89 c1                	mov    ecx,eax
c0010d74:	83 c8 ff             	or     eax,0xffffffff
c0010d77:	85 c9                	test   ecx,ecx
c0010d79:	89 c2                	mov    edx,eax
c0010d7b:	74 28                	je     c0010da5 <Sys::write(regs*)+0x61>
c0010d7d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0010d85:	31 ff                	xor    edi,edi
c0010d87:	83 ec 0c             	sub    esp,0xc
c0010d8a:	8b 01                	mov    eax,DWORD PTR [ecx]
c0010d8c:	8d 54 24 18          	lea    edx,[esp+0x18]
c0010d90:	52                   	push   edx
c0010d91:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0010d94:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0010d97:	57                   	push   edi
c0010d98:	56                   	push   esi
c0010d99:	51                   	push   ecx
c0010d9a:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0010d9d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0010da1:	83 c4 20             	add    esp,0x20
c0010da4:	99                   	cdq    
c0010da5:	83 c4 10             	add    esp,0x10
c0010da8:	5b                   	pop    ebx
c0010da9:	5e                   	pop    esi
c0010daa:	5f                   	pop    edi
c0010dab:	c3                   	ret    

c0010dac <Sys::wsbe(regs*)>:
c0010dac:	57                   	push   edi
c0010dad:	b9 0b 00 00 00       	mov    ecx,0xb
c0010db2:	56                   	push   esi
c0010db3:	be 7d e2 01 c0       	mov    esi,0xc001e27d
c0010db8:	53                   	push   ebx
c0010db9:	83 ec 30             	sub    esp,0x30
c0010dbc:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0010dc0:	fc                   	cld    
c0010dc1:	83 ec 0c             	sub    esp,0xc
c0010dc4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0010dc6:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0010dca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010dcf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010dd2:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0010dd8:	8b 06                	mov    eax,DWORD PTR [esi]
c0010dda:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0010ddd:	57                   	push   edi
c0010dde:	e8 7d f7 fe ff       	call   c0000560 <strlen>
c0010de3:	5a                   	pop    edx
c0010de4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0010de8:	52                   	push   edx
c0010de9:	31 d2                	xor    edx,edx
c0010deb:	57                   	push   edi
c0010dec:	52                   	push   edx
c0010ded:	50                   	push   eax
c0010dee:	56                   	push   esi
c0010def:	ff d3                	call   ebx
c0010df1:	83 c4 14             	add    esp,0x14
c0010df4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0010df8:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0010dfb:	e8 f0 30 00 00       	call   c0013ef0 <terminateTask(int)>
c0010e00:	83 c4 40             	add    esp,0x40
c0010e03:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0010e08:	5b                   	pop    ebx
c0010e09:	31 d2                	xor    edx,edx
c0010e0b:	5e                   	pop    esi
c0010e0c:	5f                   	pop    edi
c0010e0d:	c3                   	ret    

c0010e0e <Sys::yield(regs*)>:
c0010e0e:	83 ec 0c             	sub    esp,0xc
c0010e11:	fa                   	cli    
c0010e12:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0010e18:	e8 af 27 00 00       	call   c00135cc <schedule()>
c0010e1d:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0010e22:	48                   	dec    eax
c0010e23:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0010e28:	75 01                	jne    c0010e2b <Sys::yield(regs*)+0x1d>
c0010e2a:	fb                   	sti    
c0010e2b:	31 c0                	xor    eax,eax
c0010e2d:	31 d2                	xor    edx,edx
c0010e2f:	83 c4 0c             	add    esp,0xc
c0010e32:	c3                   	ret    

c0010e33 <sysCallSeekDir(regs*)>:
c0010e33:	31 c0                	xor    eax,eax
c0010e35:	31 d2                	xor    edx,edx
c0010e37:	c3                   	ret    

c0010e38 <sysCallTellDir(regs*)>:
c0010e38:	31 c0                	xor    eax,eax
c0010e3a:	31 d2                	xor    edx,edx
c0010e3c:	c3                   	ret    

c0010e3d <sysCallVerify(regs*)>:
c0010e3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e41:	31 d2                	xor    edx,edx
c0010e43:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010e46:	c3                   	ret    

c0010e47 <sysCallGetArgc(regs*)>:
c0010e47:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0010e4c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0010e4f:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0010e55:	99                   	cdq    
c0010e56:	c3                   	ret    

c0010e57 <sysCallTTYName(regs*)>:
c0010e57:	b8 01 00 00 00       	mov    eax,0x1
c0010e5c:	31 d2                	xor    edx,edx
c0010e5e:	c3                   	ret    

c0010e5f <sysFormatDisk(regs*)>:
c0010e5f:	56                   	push   esi
c0010e60:	53                   	push   ebx
c0010e61:	50                   	push   eax
c0010e62:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010e66:	8b 1d 74 04 02 c0    	mov    ebx,DWORD PTR ds:0xc0020474
c0010e6c:	eb 28                	jmp    c0010e96 <sysFormatDisk(regs*)+0x37>
c0010e6e:	83 ec 0c             	sub    esp,0xc
c0010e71:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0010e74:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c0010e77:	8b 13                	mov    edx,DWORD PTR [ebx]
c0010e79:	51                   	push   ecx
c0010e7a:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0010e7d:	51                   	push   ecx
c0010e7e:	50                   	push   eax
c0010e7f:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c0010e86:	50                   	push   eax
c0010e87:	53                   	push   ebx
c0010e88:	ff 52 48             	call   DWORD PTR [edx+0x48]
c0010e8b:	83 c4 20             	add    esp,0x20
c0010e8e:	83 f8 08             	cmp    eax,0x8
c0010e91:	75 12                	jne    c0010ea5 <sysFormatDisk(regs*)+0x46>
c0010e93:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c0010e96:	85 db                	test   ebx,ebx
c0010e98:	75 d4                	jne    c0010e6e <sysFormatDisk(regs*)+0xf>
c0010e9a:	59                   	pop    ecx
c0010e9b:	b8 03 00 00 00       	mov    eax,0x3
c0010ea0:	31 d2                	xor    edx,edx
c0010ea2:	5b                   	pop    ebx
c0010ea3:	5e                   	pop    esi
c0010ea4:	c3                   	ret    
c0010ea5:	85 c0                	test   eax,eax
c0010ea7:	74 1b                	je     c0010ec4 <sysFormatDisk(regs*)+0x65>
c0010ea9:	83 f8 09             	cmp    eax,0x9
c0010eac:	74 0b                	je     c0010eb9 <sysFormatDisk(regs*)+0x5a>
c0010eae:	59                   	pop    ecx
c0010eaf:	b8 02 00 00 00       	mov    eax,0x2
c0010eb4:	31 d2                	xor    edx,edx
c0010eb6:	5b                   	pop    ebx
c0010eb7:	5e                   	pop    esi
c0010eb8:	c3                   	ret    
c0010eb9:	59                   	pop    ecx
c0010eba:	b8 01 00 00 00       	mov    eax,0x1
c0010ebf:	31 d2                	xor    edx,edx
c0010ec1:	5b                   	pop    ebx
c0010ec2:	5e                   	pop    esi
c0010ec3:	c3                   	ret    
c0010ec4:	59                   	pop    ecx
c0010ec5:	31 c0                	xor    eax,eax
c0010ec7:	31 d2                	xor    edx,edx
c0010ec9:	5b                   	pop    ebx
c0010eca:	5e                   	pop    esi
c0010ecb:	c3                   	ret    

c0010ecc <sysSetDiskVolumeLabel(regs*)>:
c0010ecc:	56                   	push   esi
c0010ecd:	53                   	push   ebx
c0010ece:	53                   	push   ebx
c0010ecf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010ed3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0010ed6:	83 f8 19             	cmp    eax,0x19
c0010ed9:	77 2d                	ja     c0010f08 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010edb:	8b 0c 85 e0 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd720]
c0010ee2:	85 c9                	test   ecx,ecx
c0010ee4:	74 22                	je     c0010f08 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010ee6:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0010ee9:	85 db                	test   ebx,ebx
c0010eeb:	74 1b                	je     c0010f08 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010eed:	8b 91 70 01 00 00    	mov    edx,DWORD PTR [ecx+0x170]
c0010ef3:	85 d2                	test   edx,edx
c0010ef5:	74 11                	je     c0010f08 <sysSetDiskVolumeLabel(regs*)+0x3c>
c0010ef7:	8b 32                	mov    esi,DWORD PTR [edx]
c0010ef9:	53                   	push   ebx
c0010efa:	50                   	push   eax
c0010efb:	51                   	push   ecx
c0010efc:	52                   	push   edx
c0010efd:	ff 56 58             	call   DWORD PTR [esi+0x58]
c0010f00:	83 c4 10             	add    esp,0x10
c0010f03:	99                   	cdq    
c0010f04:	59                   	pop    ecx
c0010f05:	5b                   	pop    ebx
c0010f06:	5e                   	pop    esi
c0010f07:	c3                   	ret    
c0010f08:	59                   	pop    ecx
c0010f09:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010f0e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f13:	5b                   	pop    ebx
c0010f14:	5e                   	pop    esi
c0010f15:	c3                   	ret    

c0010f16 <sysGetDiskVolumeLabel(regs*)>:
c0010f16:	57                   	push   edi
c0010f17:	56                   	push   esi
c0010f18:	53                   	push   ebx
c0010f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f1d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0010f20:	83 fa 19             	cmp    edx,0x19
c0010f23:	77 38                	ja     c0010f5d <sysGetDiskVolumeLabel(regs*)+0x47>
c0010f25:	8b 0c 95 e0 28 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffdd720]
c0010f2c:	85 c9                	test   ecx,ecx
c0010f2e:	74 2d                	je     c0010f5d <sysGetDiskVolumeLabel(regs*)+0x47>
c0010f30:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0010f33:	85 db                	test   ebx,ebx
c0010f35:	74 26                	je     c0010f5d <sysGetDiskVolumeLabel(regs*)+0x47>
c0010f37:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0010f3a:	85 f6                	test   esi,esi
c0010f3c:	74 1f                	je     c0010f5d <sysGetDiskVolumeLabel(regs*)+0x47>
c0010f3e:	8b 81 70 01 00 00    	mov    eax,DWORD PTR [ecx+0x170]
c0010f44:	85 c0                	test   eax,eax
c0010f46:	74 15                	je     c0010f5d <sysGetDiskVolumeLabel(regs*)+0x47>
c0010f48:	83 ec 0c             	sub    esp,0xc
c0010f4b:	8b 38                	mov    edi,DWORD PTR [eax]
c0010f4d:	56                   	push   esi
c0010f4e:	53                   	push   ebx
c0010f4f:	52                   	push   edx
c0010f50:	51                   	push   ecx
c0010f51:	50                   	push   eax
c0010f52:	ff 57 54             	call   DWORD PTR [edi+0x54]
c0010f55:	83 c4 20             	add    esp,0x20
c0010f58:	99                   	cdq    
c0010f59:	5b                   	pop    ebx
c0010f5a:	5e                   	pop    esi
c0010f5b:	5f                   	pop    edi
c0010f5c:	c3                   	ret    
c0010f5d:	5b                   	pop    ebx
c0010f5e:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0010f63:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f68:	5e                   	pop    esi
c0010f69:	5f                   	pop    edi
c0010f6a:	c3                   	ret    

c0010f6b <sysShutdown(regs*)>:
c0010f6b:	83 ec 0c             	sub    esp,0xc
c0010f6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f72:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0010f75:	85 c0                	test   eax,eax
c0010f77:	74 18                	je     c0010f91 <sysShutdown(regs*)+0x26>
c0010f79:	83 f8 01             	cmp    eax,0x1
c0010f7c:	74 38                	je     c0010fb6 <sysShutdown(regs*)+0x4b>
c0010f7e:	83 f8 02             	cmp    eax,0x2
c0010f81:	74 24                	je     c0010fa7 <sysShutdown(regs*)+0x3c>
c0010f83:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0010f88:	ba ff ff ff ff       	mov    edx,0xffffffff
c0010f8d:	83 c4 0c             	add    esp,0xc
c0010f90:	c3                   	ret    
c0010f91:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0010f96:	8b 10                	mov    edx,DWORD PTR [eax]
c0010f98:	6a 00                	push   0x0
c0010f9a:	6a 00                	push   0x0
c0010f9c:	6a 00                	push   0x0
c0010f9e:	50                   	push   eax
c0010f9f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0010fa2:	83 c4 10             	add    esp,0x10
c0010fa5:	eb dc                	jmp    c0010f83 <sysShutdown(regs*)+0x18>
c0010fa7:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0010fac:	8b 10                	mov    edx,DWORD PTR [eax]
c0010fae:	6a 00                	push   0x0
c0010fb0:	6a 00                	push   0x0
c0010fb2:	6a 01                	push   0x1
c0010fb4:	eb e8                	jmp    c0010f9e <sysShutdown(regs*)+0x33>
c0010fb6:	a1 60 29 02 c0       	mov    eax,ds:0xc0022960
c0010fbb:	85 c0                	test   eax,eax
c0010fbd:	74 02                	je     c0010fc1 <sysShutdown(regs*)+0x56>
c0010fbf:	ff d0                	call   eax
c0010fc1:	31 c0                	xor    eax,eax
c0010fc3:	31 d2                	xor    edx,edx
c0010fc5:	83 c4 0c             	add    esp,0xc
c0010fc8:	c3                   	ret    

c0010fc9 <sysCallRealpath(regs*)>:
c0010fc9:	83 ec 0c             	sub    esp,0xc
c0010fcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fd0:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010fd3:	85 d2                	test   edx,edx
c0010fd5:	74 07                	je     c0010fde <sysCallRealpath(regs*)+0x15>
c0010fd7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010fda:	85 c0                	test   eax,eax
c0010fdc:	75 0b                	jne    c0010fe9 <sysCallRealpath(regs*)+0x20>
c0010fde:	b8 01 00 00 00       	mov    eax,0x1
c0010fe3:	31 d2                	xor    edx,edx
c0010fe5:	83 c4 0c             	add    esp,0xc
c0010fe8:	c3                   	ret    
c0010fe9:	51                   	push   ecx
c0010fea:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0010ff0:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0010ff3:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0010ff9:	51                   	push   ecx
c0010ffa:	52                   	push   edx
c0010ffb:	50                   	push   eax
c0010ffc:	e8 f3 9a ff ff       	call   c000aaf4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011001:	83 c4 10             	add    esp,0x10
c0011004:	31 c0                	xor    eax,eax
c0011006:	31 d2                	xor    edx,edx
c0011008:	83 c4 0c             	add    esp,0xc
c001100b:	c3                   	ret    

c001100c <sysCallReadDir(regs*)>:
c001100c:	53                   	push   ebx
c001100d:	83 ec 18             	sub    esp,0x18
c0011010:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011014:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011017:	83 f8 02             	cmp    eax,0x2
c001101a:	76 61                	jbe    c001107d <sysCallReadDir(regs*)+0x71>
c001101c:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011023:	77 49                	ja     c001106e <sysCallReadDir(regs*)+0x62>
c0011025:	83 ec 0c             	sub    esp,0xc
c0011028:	50                   	push   eax
c0011029:	e8 51 83 ff ff       	call   c000937f <getFromFileDescriptor(int)>
c001102e:	83 c4 10             	add    esp,0x10
c0011031:	85 c0                	test   eax,eax
c0011033:	74 39                	je     c001106e <sysCallReadDir(regs*)+0x62>
c0011035:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001103d:	83 ec 0c             	sub    esp,0xc
c0011040:	8b 10                	mov    edx,DWORD PTR [eax]
c0011042:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011046:	51                   	push   ecx
c0011047:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001104a:	51                   	push   ecx
c001104b:	6a 00                	push   0x0
c001104d:	68 10 01 00 00       	push   0x110
c0011052:	50                   	push   eax
c0011053:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011056:	83 c4 20             	add    esp,0x20
c0011059:	85 c0                	test   eax,eax
c001105b:	74 29                	je     c0011086 <sysCallReadDir(regs*)+0x7a>
c001105d:	83 f8 07             	cmp    eax,0x7
c0011060:	74 1b                	je     c001107d <sysCallReadDir(regs*)+0x71>
c0011062:	b8 02 00 00 00       	mov    eax,0x2
c0011067:	31 d2                	xor    edx,edx
c0011069:	83 c4 18             	add    esp,0x18
c001106c:	5b                   	pop    ebx
c001106d:	c3                   	ret    
c001106e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011073:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011078:	83 c4 18             	add    esp,0x18
c001107b:	5b                   	pop    ebx
c001107c:	c3                   	ret    
c001107d:	b8 01 00 00 00       	mov    eax,0x1
c0011082:	31 d2                	xor    edx,edx
c0011084:	eb e3                	jmp    c0011069 <sysCallReadDir(regs*)+0x5d>
c0011086:	31 c0                	xor    eax,eax
c0011088:	31 d2                	xor    edx,edx
c001108a:	eb dd                	jmp    c0011069 <sysCallReadDir(regs*)+0x5d>

c001108c <sysCallIsATTY(regs*)>:
c001108c:	83 ec 0c             	sub    esp,0xc
c001108f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011093:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011096:	83 f8 02             	cmp    eax,0x2
c0011099:	76 07                	jbe    c00110a2 <sysCallIsATTY(regs*)+0x16>
c001109b:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00110a0:	75 28                	jne    c00110ca <sysCallIsATTY(regs*)+0x3e>
c00110a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00110a7:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00110aa:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00110b0:	85 c0                	test   eax,eax
c00110b2:	74 26                	je     c00110da <sysCallIsATTY(regs*)+0x4e>
c00110b4:	83 ec 0c             	sub    esp,0xc
c00110b7:	8b 10                	mov    edx,DWORD PTR [eax]
c00110b9:	50                   	push   eax
c00110ba:	ff 12                	call   DWORD PTR [edx]
c00110bc:	31 d2                	xor    edx,edx
c00110be:	25 ff 00 00 00       	and    eax,0xff
c00110c3:	83 c4 10             	add    esp,0x10
c00110c6:	83 c4 0c             	add    esp,0xc
c00110c9:	c3                   	ret    
c00110ca:	83 ec 0c             	sub    esp,0xc
c00110cd:	50                   	push   eax
c00110ce:	e8 ac 82 ff ff       	call   c000937f <getFromFileDescriptor(int)>
c00110d3:	83 c4 10             	add    esp,0x10
c00110d6:	85 c0                	test   eax,eax
c00110d8:	75 da                	jne    c00110b4 <sysCallIsATTY(regs*)+0x28>
c00110da:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00110df:	ba ff ff ff ff       	mov    edx,0xffffffff
c00110e4:	83 c4 0c             	add    esp,0xc
c00110e7:	c3                   	ret    

c00110e8 <sysCallSeek(regs*)>:
c00110e8:	53                   	push   ebx
c00110e9:	83 ec 08             	sub    esp,0x8
c00110ec:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00110f0:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00110f3:	8d 50 fd             	lea    edx,[eax-0x3]
c00110f6:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00110fc:	77 34                	ja     c0011132 <sysCallSeek(regs*)+0x4a>
c00110fe:	83 ec 0c             	sub    esp,0xc
c0011101:	50                   	push   eax
c0011102:	e8 78 82 ff ff       	call   c000937f <getFromFileDescriptor(int)>
c0011107:	83 c4 0c             	add    esp,0xc
c001110a:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001110d:	31 db                	xor    ebx,ebx
c001110f:	53                   	push   ebx
c0011110:	51                   	push   ecx
c0011111:	50                   	push   eax
c0011112:	e8 05 9d ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c0011117:	83 c4 10             	add    esp,0x10
c001111a:	85 c0                	test   eax,eax
c001111c:	0f 95 c0             	setne  al
c001111f:	31 d2                	xor    edx,edx
c0011121:	25 ff 00 00 00       	and    eax,0xff
c0011126:	f7 d8                	neg    eax
c0011128:	83 d2 00             	adc    edx,0x0
c001112b:	83 c4 08             	add    esp,0x8
c001112e:	f7 da                	neg    edx
c0011130:	5b                   	pop    ebx
c0011131:	c3                   	ret    
c0011132:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011137:	ba ff ff ff ff       	mov    edx,0xffffffff
c001113c:	83 c4 08             	add    esp,0x8
c001113f:	5b                   	pop    ebx
c0011140:	c3                   	ret    

c0011141 <sysCallTell(regs*)>:
c0011141:	53                   	push   ebx
c0011142:	83 ec 08             	sub    esp,0x8
c0011145:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011149:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001114c:	83 f8 02             	cmp    eax,0x2
c001114f:	76 50                	jbe    c00111a1 <sysCallTell(regs*)+0x60>
c0011151:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011156:	76 19                	jbe    c0011171 <sysCallTell(regs*)+0x30>
c0011158:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001115b:	31 d2                	xor    edx,edx
c001115d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011163:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001116a:	31 c0                	xor    eax,eax
c001116c:	83 c4 08             	add    esp,0x8
c001116f:	5b                   	pop    ebx
c0011170:	c3                   	ret    
c0011171:	83 ec 0c             	sub    esp,0xc
c0011174:	50                   	push   eax
c0011175:	e8 05 82 ff ff       	call   c000937f <getFromFileDescriptor(int)>
c001117a:	5a                   	pop    edx
c001117b:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c001117e:	59                   	pop    ecx
c001117f:	53                   	push   ebx
c0011180:	50                   	push   eax
c0011181:	e8 ec 9c ff ff       	call   c000ae72 <File::tell(unsigned long long*)>
c0011186:	83 c4 10             	add    esp,0x10
c0011189:	85 c0                	test   eax,eax
c001118b:	0f 95 c0             	setne  al
c001118e:	31 d2                	xor    edx,edx
c0011190:	25 ff 00 00 00       	and    eax,0xff
c0011195:	f7 d8                	neg    eax
c0011197:	83 d2 00             	adc    edx,0x0
c001119a:	83 c4 08             	add    esp,0x8
c001119d:	f7 da                	neg    edx
c001119f:	5b                   	pop    ebx
c00111a0:	c3                   	ret    
c00111a1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00111a6:	ba ff ff ff ff       	mov    edx,0xffffffff
c00111ab:	83 c4 08             	add    esp,0x8
c00111ae:	5b                   	pop    ebx
c00111af:	c3                   	ret    

c00111b0 <sysCallSize(regs*)>:
c00111b0:	53                   	push   ebx
c00111b1:	83 ec 18             	sub    esp,0x18
c00111b4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00111b8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00111bb:	83 f8 02             	cmp    eax,0x2
c00111be:	76 56                	jbe    c0011216 <sysCallSize(regs*)+0x66>
c00111c0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00111c5:	76 19                	jbe    c00111e0 <sysCallSize(regs*)+0x30>
c00111c7:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c00111ca:	31 d2                	xor    edx,edx
c00111cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00111d2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00111d9:	31 c0                	xor    eax,eax
c00111db:	83 c4 18             	add    esp,0x18
c00111de:	5b                   	pop    ebx
c00111df:	c3                   	ret    
c00111e0:	83 ec 0c             	sub    esp,0xc
c00111e3:	50                   	push   eax
c00111e4:	e8 96 81 ff ff       	call   c000937f <getFromFileDescriptor(int)>
c00111e9:	83 c4 0c             	add    esp,0xc
c00111ec:	8d 54 24 13          	lea    edx,[esp+0x13]
c00111f0:	52                   	push   edx
c00111f1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00111f4:	52                   	push   edx
c00111f5:	50                   	push   eax
c00111f6:	e8 0f 9e ff ff       	call   c000b00a <File::stat(unsigned long long*, bool*)>
c00111fb:	83 c4 10             	add    esp,0x10
c00111fe:	85 c0                	test   eax,eax
c0011200:	0f 95 c0             	setne  al
c0011203:	31 d2                	xor    edx,edx
c0011205:	25 ff 00 00 00       	and    eax,0xff
c001120a:	f7 d8                	neg    eax
c001120c:	83 d2 00             	adc    edx,0x0
c001120f:	83 c4 18             	add    esp,0x18
c0011212:	f7 da                	neg    edx
c0011214:	5b                   	pop    ebx
c0011215:	c3                   	ret    
c0011216:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001121b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011220:	83 c4 18             	add    esp,0x18
c0011223:	5b                   	pop    ebx
c0011224:	c3                   	ret    

c0011225 <sysCallSizeFromFilename(regs*)>:
c0011225:	57                   	push   edi
c0011226:	56                   	push   esi
c0011227:	53                   	push   ebx
c0011228:	83 ec 20             	sub    esp,0x20
c001122b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001122f:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011232:	83 fb 02             	cmp    ebx,0x2
c0011235:	0f 86 8c 00 00 00    	jbe    c00112c7 <sysCallSizeFromFilename(regs*)+0xa2>
c001123b:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011241:	76 1b                	jbe    c001125e <sysCallSizeFromFilename(regs*)+0x39>
c0011243:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011246:	31 d2                	xor    edx,edx
c0011248:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001124e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011255:	83 c4 20             	add    esp,0x20
c0011258:	31 c0                	xor    eax,eax
c001125a:	5b                   	pop    ebx
c001125b:	5e                   	pop    esi
c001125c:	5f                   	pop    edi
c001125d:	c3                   	ret    
c001125e:	83 ec 0c             	sub    esp,0xc
c0011261:	68 14 01 00 00       	push   0x114
c0011266:	e8 2e 67 ff ff       	call   c0007999 <malloc>
c001126b:	83 c4 0c             	add    esp,0xc
c001126e:	89 c7                	mov    edi,eax
c0011270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011275:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011278:	50                   	push   eax
c0011279:	53                   	push   ebx
c001127a:	57                   	push   edi
c001127b:	e8 1e 9a ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c0011280:	83 c4 0c             	add    esp,0xc
c0011283:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011287:	50                   	push   eax
c0011288:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c001128b:	52                   	push   edx
c001128c:	57                   	push   edi
c001128d:	e8 78 9d ff ff       	call   c000b00a <File::stat(unsigned long long*, bool*)>
c0011292:	83 c4 10             	add    esp,0x10
c0011295:	85 ff                	test   edi,edi
c0011297:	74 14                	je     c00112ad <sysCallSizeFromFilename(regs*)+0x88>
c0011299:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001129d:	8b 17                	mov    edx,DWORD PTR [edi]
c001129f:	83 ec 0c             	sub    esp,0xc
c00112a2:	57                   	push   edi
c00112a3:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00112a6:	83 c4 10             	add    esp,0x10
c00112a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00112ad:	85 c0                	test   eax,eax
c00112af:	0f 95 c0             	setne  al
c00112b2:	31 d2                	xor    edx,edx
c00112b4:	25 ff 00 00 00       	and    eax,0xff
c00112b9:	f7 d8                	neg    eax
c00112bb:	83 d2 00             	adc    edx,0x0
c00112be:	83 c4 20             	add    esp,0x20
c00112c1:	f7 da                	neg    edx
c00112c3:	5b                   	pop    ebx
c00112c4:	5e                   	pop    esi
c00112c5:	5f                   	pop    edi
c00112c6:	c3                   	ret    
c00112c7:	83 c4 20             	add    esp,0x20
c00112ca:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00112cf:	5b                   	pop    ebx
c00112d0:	ba ff ff ff ff       	mov    edx,0xffffffff
c00112d5:	5e                   	pop    esi
c00112d6:	5f                   	pop    edi
c00112d7:	c3                   	ret    

c00112d8 <sysCallClose(regs*)>:
c00112d8:	53                   	push   ebx
c00112d9:	83 ec 08             	sub    esp,0x8
c00112dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00112e0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00112e3:	83 f8 02             	cmp    eax,0x2
c00112e6:	76 41                	jbe    c0011329 <sysCallClose(regs*)+0x51>
c00112e8:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c00112ee:	83 fa 01             	cmp    edx,0x1
c00112f1:	76 2d                	jbe    c0011320 <sysCallClose(regs*)+0x48>
c00112f3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00112f8:	77 2f                	ja     c0011329 <sysCallClose(regs*)+0x51>
c00112fa:	83 ec 0c             	sub    esp,0xc
c00112fd:	50                   	push   eax
c00112fe:	e8 7c 80 ff ff       	call   c000937f <getFromFileDescriptor(int)>
c0011303:	89 c3                	mov    ebx,eax
c0011305:	89 04 24             	mov    DWORD PTR [esp],eax
c0011308:	e8 af 9a ff ff       	call   c000adbc <File::close()>
c001130d:	83 c4 10             	add    esp,0x10
c0011310:	85 db                	test   ebx,ebx
c0011312:	74 0c                	je     c0011320 <sysCallClose(regs*)+0x48>
c0011314:	83 ec 0c             	sub    esp,0xc
c0011317:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011319:	53                   	push   ebx
c001131a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001131d:	83 c4 10             	add    esp,0x10
c0011320:	31 c0                	xor    eax,eax
c0011322:	31 d2                	xor    edx,edx
c0011324:	83 c4 08             	add    esp,0x8
c0011327:	5b                   	pop    ebx
c0011328:	c3                   	ret    
c0011329:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001132e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011333:	83 c4 08             	add    esp,0x8
c0011336:	5b                   	pop    ebx
c0011337:	c3                   	ret    

c0011338 <sysCallOpenDir(regs*)>:
c0011338:	56                   	push   esi
c0011339:	53                   	push   ebx
c001133a:	50                   	push   eax
c001133b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001133f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011342:	85 c0                	test   eax,eax
c0011344:	74 5b                	je     c00113a1 <sysCallOpenDir(regs*)+0x69>
c0011346:	83 ec 0c             	sub    esp,0xc
c0011349:	68 14 01 00 00       	push   0x114
c001134e:	e8 46 66 ff ff       	call   c0007999 <malloc>
c0011353:	83 c4 0c             	add    esp,0xc
c0011356:	89 c6                	mov    esi,eax
c0011358:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001135d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011360:	50                   	push   eax
c0011361:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011364:	50                   	push   eax
c0011365:	56                   	push   esi
c0011366:	e8 5d 9e ff ff       	call   c000b1c8 <Directory::Directory(char const*, Process*)>
c001136b:	83 c4 10             	add    esp,0x10
c001136e:	85 f6                	test   esi,esi
c0011370:	74 2f                	je     c00113a1 <sysCallOpenDir(regs*)+0x69>
c0011372:	83 ec 0c             	sub    esp,0xc
c0011375:	56                   	push   esi
c0011376:	e8 0d 9f ff ff       	call   c000b288 <Directory::open()>
c001137b:	83 c4 10             	add    esp,0x10
c001137e:	85 c0                	test   eax,eax
c0011380:	75 1f                	jne    c00113a1 <sysCallOpenDir(regs*)+0x69>
c0011382:	83 ec 0c             	sub    esp,0xc
c0011385:	56                   	push   esi
c0011386:	e8 ff 7c ff ff       	call   c000908a <UnixFile::getFileDescriptor()>
c001138b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001138e:	83 c4 10             	add    esp,0x10
c0011391:	89 02                	mov    DWORD PTR [edx],eax
c0011393:	c1 f8 1f             	sar    eax,0x1f
c0011396:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011399:	31 c0                	xor    eax,eax
c001139b:	59                   	pop    ecx
c001139c:	31 d2                	xor    edx,edx
c001139e:	5b                   	pop    ebx
c001139f:	5e                   	pop    esi
c00113a0:	c3                   	ret    
c00113a1:	59                   	pop    ecx
c00113a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113a7:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113ac:	5b                   	pop    ebx
c00113ad:	5e                   	pop    esi
c00113ae:	c3                   	ret    

c00113af <sysCallCloseDir(regs*)>:
c00113af:	53                   	push   ebx
c00113b0:	83 ec 08             	sub    esp,0x8
c00113b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00113b7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00113ba:	8d 50 fd             	lea    edx,[eax-0x3]
c00113bd:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c00113c3:	77 2f                	ja     c00113f4 <sysCallCloseDir(regs*)+0x45>
c00113c5:	83 ec 0c             	sub    esp,0xc
c00113c8:	50                   	push   eax
c00113c9:	e8 b1 7f ff ff       	call   c000937f <getFromFileDescriptor(int)>
c00113ce:	89 c3                	mov    ebx,eax
c00113d0:	89 04 24             	mov    DWORD PTR [esp],eax
c00113d3:	e8 0c 9f ff ff       	call   c000b2e4 <Directory::close()>
c00113d8:	83 c4 10             	add    esp,0x10
c00113db:	85 db                	test   ebx,ebx
c00113dd:	74 0c                	je     c00113eb <sysCallCloseDir(regs*)+0x3c>
c00113df:	83 ec 0c             	sub    esp,0xc
c00113e2:	8b 03                	mov    eax,DWORD PTR [ebx]
c00113e4:	53                   	push   ebx
c00113e5:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00113e8:	83 c4 10             	add    esp,0x10
c00113eb:	31 c0                	xor    eax,eax
c00113ed:	31 d2                	xor    edx,edx
c00113ef:	83 c4 08             	add    esp,0x8
c00113f2:	5b                   	pop    ebx
c00113f3:	c3                   	ret    
c00113f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00113f9:	ba ff ff ff ff       	mov    edx,0xffffffff
c00113fe:	83 c4 08             	add    esp,0x8
c0011401:	5b                   	pop    ebx
c0011402:	c3                   	ret    

c0011403 <sysCallMakeDir(regs*)>:
c0011403:	56                   	push   esi
c0011404:	53                   	push   ebx
c0011405:	83 ec 10             	sub    esp,0x10
c0011408:	68 14 01 00 00       	push   0x114
c001140d:	e8 87 65 ff ff       	call   c0007999 <malloc>
c0011412:	83 c4 0c             	add    esp,0xc
c0011415:	89 c3                	mov    ebx,eax
c0011417:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001141c:	8b 70 3c             	mov    esi,DWORD PTR [eax+0x3c]
c001141f:	56                   	push   esi
c0011420:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011424:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011427:	50                   	push   eax
c0011428:	53                   	push   ebx
c0011429:	e8 9a 9d ff ff       	call   c000b1c8 <Directory::Directory(char const*, Process*)>
c001142e:	83 c4 10             	add    esp,0x10
c0011431:	85 db                	test   ebx,ebx
c0011433:	74 32                	je     c0011467 <sysCallMakeDir(regs*)+0x64>
c0011435:	83 ec 0c             	sub    esp,0xc
c0011438:	53                   	push   ebx
c0011439:	e8 2a a0 ff ff       	call   c000b468 <Directory::create()>
c001143e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011441:	89 c6                	mov    esi,eax
c0011443:	e8 9c 9e ff ff       	call   c000b2e4 <Directory::close()>
c0011448:	8b 03                	mov    eax,DWORD PTR [ebx]
c001144a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001144d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011450:	83 c4 10             	add    esp,0x10
c0011453:	31 c0                	xor    eax,eax
c0011455:	59                   	pop    ecx
c0011456:	85 f6                	test   esi,esi
c0011458:	5b                   	pop    ebx
c0011459:	0f 95 c0             	setne  al
c001145c:	5e                   	pop    esi
c001145d:	31 d2                	xor    edx,edx
c001145f:	f7 d8                	neg    eax
c0011461:	83 d2 00             	adc    edx,0x0
c0011464:	f7 da                	neg    edx
c0011466:	c3                   	ret    
c0011467:	59                   	pop    ecx
c0011468:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001146d:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011472:	5b                   	pop    ebx
c0011473:	5e                   	pop    esi
c0011474:	c3                   	ret    

c0011475 <sysCallWait(regs*)>:
c0011475:	83 ec 10             	sub    esp,0x10
c0011478:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001147c:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001147f:	52                   	push   edx
c0011480:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011483:	51                   	push   ecx
c0011484:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011487:	50                   	push   eax
c0011488:	e8 6b 23 00 00       	call   c00137f8 <waitTask(int, int*, int)>
c001148d:	83 c4 1c             	add    esp,0x1c
c0011490:	99                   	cdq    
c0011491:	c3                   	ret    

c0011492 <sysCallNotImpl(regs*)>:
c0011492:	83 ec 18             	sub    esp,0x18
c0011495:	68 a9 e2 01 c0       	push   0xc001e2a9
c001149a:	e8 d8 ed ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001149f:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00114a4:	ba ff ff ff ff       	mov    edx,0xffffffff
c00114a9:	83 c4 1c             	add    esp,0x1c
c00114ac:	c3                   	ret    

c00114ad <sysPanic(regs*)>:
c00114ad:	83 ec 18             	sub    esp,0x18
c00114b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114b4:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00114b7:	50                   	push   eax
c00114b8:	e8 ba ed ff ff       	call   c0010277 <Krnl::panic(char const*)>
c00114bd:	b8 01 00 00 00       	mov    eax,0x1
c00114c2:	31 d2                	xor    edx,edx
c00114c4:	83 c4 1c             	add    esp,0x1c
c00114c7:	c3                   	ret    

c00114c8 <sysCallRmdir(regs*)>:
c00114c8:	56                   	push   esi
c00114c9:	53                   	push   ebx
c00114ca:	83 ec 20             	sub    esp,0x20
c00114cd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00114d1:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c00114d4:	68 14 01 00 00       	push   0x114
c00114d9:	e8 bb 64 ff ff       	call   c0007999 <malloc>
c00114de:	83 c4 0c             	add    esp,0xc
c00114e1:	89 c3                	mov    ebx,eax
c00114e3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00114e8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00114eb:	50                   	push   eax
c00114ec:	56                   	push   esi
c00114ed:	53                   	push   ebx
c00114ee:	e8 ab 97 ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c00114f3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00114f6:	e8 db 99 ff ff       	call   c000aed6 <File::unlink()>
c00114fb:	83 c4 10             	add    esp,0x10
c00114fe:	85 db                	test   ebx,ebx
c0011500:	74 14                	je     c0011516 <sysCallRmdir(regs*)+0x4e>
c0011502:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011506:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011508:	83 ec 0c             	sub    esp,0xc
c001150b:	53                   	push   ebx
c001150c:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001150f:	83 c4 10             	add    esp,0x10
c0011512:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011516:	85 c0                	test   eax,eax
c0011518:	0f 95 c0             	setne  al
c001151b:	31 d2                	xor    edx,edx
c001151d:	25 ff 00 00 00       	and    eax,0xff
c0011522:	f7 d8                	neg    eax
c0011524:	83 d2 00             	adc    edx,0x0
c0011527:	83 c4 14             	add    esp,0x14
c001152a:	f7 da                	neg    edx
c001152c:	5b                   	pop    ebx
c001152d:	5e                   	pop    esi
c001152e:	c3                   	ret    

c001152f <sysCallUnlink(regs*)>:
c001152f:	56                   	push   esi
c0011530:	53                   	push   ebx
c0011531:	83 ec 20             	sub    esp,0x20
c0011534:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011538:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001153b:	68 14 01 00 00       	push   0x114
c0011540:	e8 54 64 ff ff       	call   c0007999 <malloc>
c0011545:	83 c4 0c             	add    esp,0xc
c0011548:	89 c3                	mov    ebx,eax
c001154a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001154f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011552:	50                   	push   eax
c0011553:	56                   	push   esi
c0011554:	53                   	push   ebx
c0011555:	e8 44 97 ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c001155a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001155d:	e8 74 99 ff ff       	call   c000aed6 <File::unlink()>
c0011562:	83 c4 10             	add    esp,0x10
c0011565:	85 db                	test   ebx,ebx
c0011567:	74 14                	je     c001157d <sysCallUnlink(regs*)+0x4e>
c0011569:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001156d:	8b 13                	mov    edx,DWORD PTR [ebx]
c001156f:	83 ec 0c             	sub    esp,0xc
c0011572:	53                   	push   ebx
c0011573:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011576:	83 c4 10             	add    esp,0x10
c0011579:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001157d:	85 c0                	test   eax,eax
c001157f:	0f 95 c0             	setne  al
c0011582:	31 d2                	xor    edx,edx
c0011584:	25 ff 00 00 00       	and    eax,0xff
c0011589:	f7 d8                	neg    eax
c001158b:	83 d2 00             	adc    edx,0x0
c001158e:	83 c4 14             	add    esp,0x14
c0011591:	f7 da                	neg    edx
c0011593:	5b                   	pop    ebx
c0011594:	5e                   	pop    esi
c0011595:	c3                   	ret    

c0011596 <sysCallGetArgv(regs*)>:
c0011596:	83 ec 0c             	sub    esp,0xc
c0011599:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001159d:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00115a0:	85 c0                	test   eax,eax
c00115a2:	78 2c                	js     c00115d0 <sysCallGetArgv(regs*)+0x3a>
c00115a4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00115aa:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00115ad:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00115b3:	7d 1b                	jge    c00115d0 <sysCallGetArgv(regs*)+0x3a>
c00115b5:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00115bc:	85 c0                	test   eax,eax
c00115be:	74 18                	je     c00115d8 <sysCallGetArgv(regs*)+0x42>
c00115c0:	83 ec 08             	sub    esp,0x8
c00115c3:	50                   	push   eax
c00115c4:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00115c7:	50                   	push   eax
c00115c8:	e8 53 f0 fe ff       	call   c0000620 <strcpy>
c00115cd:	83 c4 10             	add    esp,0x10
c00115d0:	31 c0                	xor    eax,eax
c00115d2:	31 d2                	xor    edx,edx
c00115d4:	83 c4 0c             	add    esp,0xc
c00115d7:	c3                   	ret    
c00115d8:	b8 01 00 00 00       	mov    eax,0x1
c00115dd:	31 d2                	xor    edx,edx
c00115df:	83 c4 0c             	add    esp,0xc
c00115e2:	c3                   	ret    

c00115e3 <sysCallUSleep(regs*)>:
c00115e3:	83 ec 1c             	sub    esp,0x1c
c00115e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00115ea:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c00115ed:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c00115f0:	6a 00                	push   0x0
c00115f2:	6a 64                	push   0x64
c00115f4:	52                   	push   edx
c00115f5:	50                   	push   eax
c00115f6:	e8 a5 a5 00 00       	call   c001bba0 <__udivdi3>
c00115fb:	83 c4 14             	add    esp,0x14
c00115fe:	50                   	push   eax
c00115ff:	e8 c8 22 00 00       	call   c00138cc <milliTenthSleep(unsigned int)>
c0011604:	31 c0                	xor    eax,eax
c0011606:	31 d2                	xor    edx,edx
c0011608:	83 c4 1c             	add    esp,0x1c
c001160b:	c3                   	ret    

c001160c <sysCallSpawn(regs*)>:
c001160c:	56                   	push   esi
c001160d:	53                   	push   ebx
c001160e:	50                   	push   eax
c001160f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011613:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011616:	85 c0                	test   eax,eax
c0011618:	75 08                	jne    c0011622 <sysCallSpawn(regs*)+0x16>
c001161a:	59                   	pop    ecx
c001161b:	31 c0                	xor    eax,eax
c001161d:	31 d2                	xor    edx,edx
c001161f:	5b                   	pop    ebx
c0011620:	5e                   	pop    esi
c0011621:	c3                   	ret    
c0011622:	83 ec 0c             	sub    esp,0xc
c0011625:	68 1f 07 00 00       	push   0x71f
c001162a:	e8 6a 63 ff ff       	call   c0007999 <malloc>
c001162f:	83 c4 10             	add    esp,0x10
c0011632:	89 c6                	mov    esi,eax
c0011634:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011637:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001163a:	85 c0                	test   eax,eax
c001163c:	75 33                	jne    c0011671 <sysCallSpawn(regs*)+0x65>
c001163e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011643:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011646:	52                   	push   edx
c0011647:	50                   	push   eax
c0011648:	8b 5b 24             	mov    ebx,DWORD PTR [ebx+0x24]
c001164b:	53                   	push   ebx
c001164c:	56                   	push   esi
c001164d:	e8 5e 19 00 00       	call   c0012fb0 <Process::Process(char const*, Process*, char**)>
c0011652:	83 c4 10             	add    esp,0x10
c0011655:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c001165c:	75 bc                	jne    c001161a <sysCallSpawn(regs*)+0xe>
c001165e:	83 ec 0c             	sub    esp,0xc
c0011661:	56                   	push   esi
c0011662:	e8 3d 1e 00 00       	call   c00134a4 <Process::createUserThread()>
c0011667:	8b 06                	mov    eax,DWORD PTR [esi]
c0011669:	83 c4 10             	add    esp,0x10
c001166c:	99                   	cdq    
c001166d:	59                   	pop    ecx
c001166e:	5b                   	pop    ebx
c001166f:	5e                   	pop    esi
c0011670:	c3                   	ret    
c0011671:	31 c0                	xor    eax,eax
c0011673:	eb d1                	jmp    c0011646 <sysCallSpawn(regs*)+0x3a>

c0011675 <sysCallGetEnv(regs*)>:
c0011675:	57                   	push   edi
c0011676:	56                   	push   esi
c0011677:	53                   	push   ebx
c0011678:	83 ec 1c             	sub    esp,0x1c
c001167b:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001167f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011684:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0011687:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001168a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001168d:	50                   	push   eax
c001168e:	e8 30 eb ff ff       	call   c00101c3 <Krnl::getProcessTotalEnvCount(Process*)>
c0011693:	83 c4 10             	add    esp,0x10
c0011696:	39 c7                	cmp    edi,eax
c0011698:	7c 14                	jl     c00116ae <sysCallGetEnv(regs*)+0x39>
c001169a:	85 f6                	test   esi,esi
c001169c:	75 0b                	jne    c00116a9 <sysCallGetEnv(regs*)+0x34>
c001169e:	83 c4 10             	add    esp,0x10
c00116a1:	31 c0                	xor    eax,eax
c00116a3:	5b                   	pop    ebx
c00116a4:	31 d2                	xor    edx,edx
c00116a6:	5e                   	pop    esi
c00116a7:	5f                   	pop    edi
c00116a8:	c3                   	ret    
c00116a9:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00116ac:	eb f0                	jmp    c001169e <sysCallGetEnv(regs*)+0x29>
c00116ae:	8d 44 24 08          	lea    eax,[esp+0x8]
c00116b2:	52                   	push   edx
c00116b3:	57                   	push   edi
c00116b4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00116ba:	8b 4a 3c             	mov    ecx,DWORD PTR [edx+0x3c]
c00116bd:	51                   	push   ecx
c00116be:	50                   	push   eax
c00116bf:	e8 1f eb ff ff       	call   c00101e3 <Krnl::getProcessEnvPair(Process*, int)>
c00116c4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c00116c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00116cb:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00116cf:	83 c4 0c             	add    esp,0xc
c00116d2:	85 db                	test   ebx,ebx
c00116d4:	75 23                	jne    c00116f9 <sysCallGetEnv(regs*)+0x84>
c00116d6:	83 ec 0c             	sub    esp,0xc
c00116d9:	50                   	push   eax
c00116da:	e8 81 ee fe ff       	call   c0000560 <strlen>
c00116df:	89 3c 24             	mov    DWORD PTR [esp],edi
c00116e2:	89 c3                	mov    ebx,eax
c00116e4:	e8 77 ee fe ff       	call   c0000560 <strlen>
c00116e9:	31 d2                	xor    edx,edx
c00116eb:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c00116ef:	83 c4 10             	add    esp,0x10
c00116f2:	83 c4 10             	add    esp,0x10
c00116f5:	5b                   	pop    ebx
c00116f6:	5e                   	pop    esi
c00116f7:	5f                   	pop    edi
c00116f8:	c3                   	ret    
c00116f9:	83 ec 08             	sub    esp,0x8
c00116fc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00116ff:	50                   	push   eax
c0011700:	56                   	push   esi
c0011701:	e8 1a ef fe ff       	call   c0000620 <strcpy>
c0011706:	58                   	pop    eax
c0011707:	5a                   	pop    edx
c0011708:	68 c3 e2 01 c0       	push   0xc001e2c3
c001170d:	56                   	push   esi
c001170e:	e8 cd f0 fe ff       	call   c00007e0 <strcat>
c0011713:	59                   	pop    ecx
c0011714:	5b                   	pop    ebx
c0011715:	57                   	push   edi
c0011716:	56                   	push   esi
c0011717:	e8 c4 f0 fe ff       	call   c00007e0 <strcat>
c001171c:	83 c4 10             	add    esp,0x10
c001171f:	e9 7a ff ff ff       	jmp    c001169e <sysCallGetEnv(regs*)+0x29>

c0011724 <sysSetFatAttrib(regs*)>:
c0011724:	57                   	push   edi
c0011725:	56                   	push   esi
c0011726:	53                   	push   ebx
c0011727:	83 ec 1c             	sub    esp,0x1c
c001172a:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001172e:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0011731:	68 14 01 00 00       	push   0x114
c0011736:	e8 5e 62 ff ff       	call   c0007999 <malloc>
c001173b:	83 c4 0c             	add    esp,0xc
c001173e:	89 c3                	mov    ebx,eax
c0011740:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011745:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011748:	50                   	push   eax
c0011749:	57                   	push   edi
c001174a:	53                   	push   ebx
c001174b:	e8 4e 95 ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c0011750:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011753:	83 c4 0c             	add    esp,0xc
c0011756:	0f b6 d4             	movzx  edx,ah
c0011759:	25 ff 00 00 00       	and    eax,0xff
c001175e:	52                   	push   edx
c001175f:	50                   	push   eax
c0011760:	53                   	push   ebx
c0011761:	e8 0a 98 ff ff       	call   c000af70 <File::chfatattr(unsigned char, unsigned char)>
c0011766:	83 c4 10             	add    esp,0x10
c0011769:	85 db                	test   ebx,ebx
c001176b:	74 14                	je     c0011781 <sysSetFatAttrib(regs*)+0x5d>
c001176d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011771:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011773:	83 ec 0c             	sub    esp,0xc
c0011776:	53                   	push   ebx
c0011777:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001177a:	83 c4 10             	add    esp,0x10
c001177d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011781:	85 c0                	test   eax,eax
c0011783:	0f 95 c0             	setne  al
c0011786:	31 d2                	xor    edx,edx
c0011788:	25 ff 00 00 00       	and    eax,0xff
c001178d:	f7 d8                	neg    eax
c001178f:	83 d2 00             	adc    edx,0x0
c0011792:	83 c4 10             	add    esp,0x10
c0011795:	f7 da                	neg    edx
c0011797:	5b                   	pop    ebx
c0011798:	5e                   	pop    esi
c0011799:	5f                   	pop    edi
c001179a:	c3                   	ret    

c001179b <sysPipe(regs*)>:
c001179b:	57                   	push   edi
c001179c:	56                   	push   esi
c001179d:	53                   	push   ebx
c001179e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117a2:	83 ec 0c             	sub    esp,0xc
c00117a5:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00117a8:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00117ab:	6a 20                	push   0x20
c00117ad:	e8 e7 61 ff ff       	call   c0007999 <malloc>
c00117b2:	89 c3                	mov    ebx,eax
c00117b4:	58                   	pop    eax
c00117b5:	5a                   	pop    edx
c00117b6:	68 00 50 00 00       	push   0x5000
c00117bb:	53                   	push   ebx
c00117bc:	e8 cf 6b ff ff       	call   c0008390 <Pipe::Pipe(int)>
c00117c1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00117c4:	e8 c1 78 ff ff       	call   c000908a <UnixFile::getFileDescriptor()>
c00117c9:	89 07                	mov    DWORD PTR [edi],eax
c00117cb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00117ce:	e8 b7 78 ff ff       	call   c000908a <UnixFile::getFileDescriptor()>
c00117d3:	83 c4 10             	add    esp,0x10
c00117d6:	89 06                	mov    DWORD PTR [esi],eax
c00117d8:	31 d2                	xor    edx,edx
c00117da:	5b                   	pop    ebx
c00117db:	31 c0                	xor    eax,eax
c00117dd:	5e                   	pop    esi
c00117de:	5f                   	pop    edi
c00117df:	c3                   	ret    

c00117e0 <sysGetUnixTime(regs*)>:
c00117e0:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c00117e5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00117eb:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00117ef:	e9 ba 9e ff ff       	jmp    c000b6ae <Clock::timeInSecondsLocal()>

c00117f4 <string_ends_with(char const*, char const*)>:
c00117f4:	57                   	push   edi
c00117f5:	56                   	push   esi
c00117f6:	53                   	push   ebx
c00117f7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00117fb:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00117ff:	83 ec 0c             	sub    esp,0xc
c0011802:	53                   	push   ebx
c0011803:	e8 58 ed fe ff       	call   c0000560 <strlen>
c0011808:	89 3c 24             	mov    DWORD PTR [esp],edi
c001180b:	89 c6                	mov    esi,eax
c001180d:	e8 4e ed fe ff       	call   c0000560 <strlen>
c0011812:	83 c4 10             	add    esp,0x10
c0011815:	39 c6                	cmp    esi,eax
c0011817:	7d 06                	jge    c001181f <string_ends_with(char const*, char const*)+0x2b>
c0011819:	5b                   	pop    ebx
c001181a:	31 c0                	xor    eax,eax
c001181c:	5e                   	pop    esi
c001181d:	5f                   	pop    edi
c001181e:	c3                   	ret    
c001181f:	83 ec 08             	sub    esp,0x8
c0011822:	29 c6                	sub    esi,eax
c0011824:	57                   	push   edi
c0011825:	01 f3                	add    ebx,esi
c0011827:	53                   	push   ebx
c0011828:	e8 d3 ee fe ff       	call   c0000700 <strcmp>
c001182d:	83 c4 10             	add    esp,0x10
c0011830:	85 c0                	test   eax,eax
c0011832:	5b                   	pop    ebx
c0011833:	0f 94 c0             	sete   al
c0011836:	5e                   	pop    esi
c0011837:	25 ff 00 00 00       	and    eax,0xff
c001183c:	5f                   	pop    edi
c001183d:	c3                   	ret    

c001183e <sysCallOpen(regs*)>:
c001183e:	56                   	push   esi
c001183f:	53                   	push   ebx
c0011840:	81 ec 04 01 00 00    	sub    esp,0x104
c0011846:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001184d:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011850:	85 c9                	test   ecx,ecx
c0011852:	0f 84 b9 01 00 00    	je     c0011a11 <sysCallOpen(regs*)+0x1d3>
c0011858:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001185b:	85 c0                	test   eax,eax
c001185d:	0f 84 ae 01 00 00    	je     c0011a11 <sysCallOpen(regs*)+0x1d3>
c0011863:	52                   	push   edx
c0011864:	68 c5 e2 01 c0       	push   0xc001e2c5
c0011869:	50                   	push   eax
c001186a:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001186e:	56                   	push   esi
c001186f:	e8 80 92 ff ff       	call   c000aaf4 <Fs::standardiseFiles(char*, char const*, char const*)>
c0011874:	89 34 24             	mov    DWORD PTR [esp],esi
c0011877:	e8 e4 ec fe ff       	call   c0000560 <strlen>
c001187c:	83 c4 10             	add    esp,0x10
c001187f:	48                   	dec    eax
c0011880:	74 1d                	je     c001189f <sysCallOpen(regs*)+0x61>
c0011882:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c0011885:	eb 0f                	jmp    c0011896 <sysCallOpen(regs*)+0x58>
c0011887:	80 fa 3a             	cmp    dl,0x3a
c001188a:	74 0f                	je     c001189b <sysCallOpen(regs*)+0x5d>
c001188c:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c0011890:	48                   	dec    eax
c0011891:	74 0c                	je     c001189f <sysCallOpen(regs*)+0x61>
c0011893:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c0011896:	80 fa 2e             	cmp    dl,0x2e
c0011899:	75 ec                	jne    c0011887 <sysCallOpen(regs*)+0x49>
c001189b:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001189f:	83 ec 08             	sub    esp,0x8
c00118a2:	68 c9 e2 01 c0       	push   0xc001e2c9
c00118a7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00118aa:	50                   	push   eax
c00118ab:	e8 44 ff ff ff       	call   c00117f4 <string_ends_with(char const*, char const*)>
c00118b0:	83 c4 10             	add    esp,0x10
c00118b3:	85 c0                	test   eax,eax
c00118b5:	74 1d                	je     c00118d4 <sysCallOpen(regs*)+0x96>
c00118b7:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00118ba:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00118c0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00118c7:	81 c4 04 01 00 00    	add    esp,0x104
c00118cd:	31 c0                	xor    eax,eax
c00118cf:	31 d2                	xor    edx,edx
c00118d1:	5b                   	pop    ebx
c00118d2:	5e                   	pop    esi
c00118d3:	c3                   	ret    
c00118d4:	83 ec 08             	sub    esp,0x8
c00118d7:	68 ce e2 01 c0       	push   0xc001e2ce
c00118dc:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00118df:	50                   	push   eax
c00118e0:	e8 0f ff ff ff       	call   c00117f4 <string_ends_with(char const*, char const*)>
c00118e5:	83 c4 10             	add    esp,0x10
c00118e8:	85 c0                	test   eax,eax
c00118ea:	75 cb                	jne    c00118b7 <sysCallOpen(regs*)+0x79>
c00118ec:	83 ec 08             	sub    esp,0x8
c00118ef:	68 ca e2 01 c0       	push   0xc001e2ca
c00118f4:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00118f7:	50                   	push   eax
c00118f8:	e8 03 ee fe ff       	call   c0000700 <strcmp>
c00118fd:	83 c4 10             	add    esp,0x10
c0011900:	85 c0                	test   eax,eax
c0011902:	74 b3                	je     c00118b7 <sysCallOpen(regs*)+0x79>
c0011904:	83 ec 08             	sub    esp,0x8
c0011907:	68 c9 e2 01 c0       	push   0xc001e2c9
c001190c:	56                   	push   esi
c001190d:	e8 e2 fe ff ff       	call   c00117f4 <string_ends_with(char const*, char const*)>
c0011912:	83 c4 10             	add    esp,0x10
c0011915:	85 c0                	test   eax,eax
c0011917:	75 9e                	jne    c00118b7 <sysCallOpen(regs*)+0x79>
c0011919:	83 ec 08             	sub    esp,0x8
c001191c:	68 d3 e2 01 c0       	push   0xc001e2d3
c0011921:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011924:	50                   	push   eax
c0011925:	e8 ca fe ff ff       	call   c00117f4 <string_ends_with(char const*, char const*)>
c001192a:	83 c4 10             	add    esp,0x10
c001192d:	85 c0                	test   eax,eax
c001192f:	0f 85 ef 00 00 00    	jne    c0011a24 <sysCallOpen(regs*)+0x1e6>
c0011935:	83 ec 08             	sub    esp,0x8
c0011938:	68 d8 e2 01 c0       	push   0xc001e2d8
c001193d:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0011940:	50                   	push   eax
c0011941:	e8 ae fe ff ff       	call   c00117f4 <string_ends_with(char const*, char const*)>
c0011946:	83 c4 10             	add    esp,0x10
c0011949:	85 c0                	test   eax,eax
c001194b:	0f 85 d3 00 00 00    	jne    c0011a24 <sysCallOpen(regs*)+0x1e6>
c0011951:	83 ec 08             	sub    esp,0x8
c0011954:	68 d4 e2 01 c0       	push   0xc001e2d4
c0011959:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001195c:	51                   	push   ecx
c001195d:	e8 9e ed fe ff       	call   c0000700 <strcmp>
c0011962:	83 c4 10             	add    esp,0x10
c0011965:	85 c0                	test   eax,eax
c0011967:	0f 84 b7 00 00 00    	je     c0011a24 <sysCallOpen(regs*)+0x1e6>
c001196d:	83 ec 08             	sub    esp,0x8
c0011970:	68 d3 e2 01 c0       	push   0xc001e2d3
c0011975:	56                   	push   esi
c0011976:	e8 79 fe ff ff       	call   c00117f4 <string_ends_with(char const*, char const*)>
c001197b:	83 c4 10             	add    esp,0x10
c001197e:	85 c0                	test   eax,eax
c0011980:	0f 85 9e 00 00 00    	jne    c0011a24 <sysCallOpen(regs*)+0x1e6>
c0011986:	83 ec 0c             	sub    esp,0xc
c0011989:	68 14 01 00 00       	push   0x114
c001198e:	e8 06 60 ff ff       	call   c0007999 <malloc>
c0011993:	83 c4 0c             	add    esp,0xc
c0011996:	89 c6                	mov    esi,eax
c0011998:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001199d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00119a0:	50                   	push   eax
c00119a1:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00119a4:	52                   	push   edx
c00119a5:	56                   	push   esi
c00119a6:	e8 f3 92 ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c00119ab:	83 c4 10             	add    esp,0x10
c00119ae:	85 f6                	test   esi,esi
c00119b0:	74 5f                	je     c0011a11 <sysCallOpen(regs*)+0x1d3>
c00119b2:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00119b5:	89 d0                	mov    eax,edx
c00119b7:	25 ff 00 00 00       	and    eax,0xff
c00119bc:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00119bf:	89 d0                	mov    eax,edx
c00119c1:	83 e0 01             	and    eax,0x1
c00119c4:	f6 c2 02             	test   dl,0x2
c00119c7:	74 03                	je     c00119cc <sysCallOpen(regs*)+0x18e>
c00119c9:	83 c8 02             	or     eax,0x2
c00119cc:	f6 c2 04             	test   dl,0x4
c00119cf:	74 03                	je     c00119d4 <sysCallOpen(regs*)+0x196>
c00119d1:	83 c8 04             	or     eax,0x4
c00119d4:	f6 c2 08             	test   dl,0x8
c00119d7:	74 03                	je     c00119dc <sysCallOpen(regs*)+0x19e>
c00119d9:	83 c8 0a             	or     eax,0xa
c00119dc:	83 e2 10             	and    edx,0x10
c00119df:	74 03                	je     c00119e4 <sysCallOpen(regs*)+0x1a6>
c00119e1:	83 c8 12             	or     eax,0x12
c00119e4:	83 ec 08             	sub    esp,0x8
c00119e7:	50                   	push   eax
c00119e8:	56                   	push   esi
c00119e9:	e8 70 93 ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c00119ee:	83 c4 10             	add    esp,0x10
c00119f1:	85 c0                	test   eax,eax
c00119f3:	75 1c                	jne    c0011a11 <sysCallOpen(regs*)+0x1d3>
c00119f5:	83 ec 0c             	sub    esp,0xc
c00119f8:	56                   	push   esi
c00119f9:	e8 8c 76 ff ff       	call   c000908a <UnixFile::getFileDescriptor()>
c00119fe:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011a01:	83 c4 10             	add    esp,0x10
c0011a04:	89 02                	mov    DWORD PTR [edx],eax
c0011a06:	c1 f8 1f             	sar    eax,0x1f
c0011a09:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011a0c:	e9 b6 fe ff ff       	jmp    c00118c7 <sysCallOpen(regs*)+0x89>
c0011a11:	81 c4 04 01 00 00    	add    esp,0x104
c0011a17:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011a1c:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a21:	5b                   	pop    ebx
c0011a22:	5e                   	pop    esi
c0011a23:	c3                   	ret    
c0011a24:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011a27:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c0011a2d:	e9 8e fe ff ff       	jmp    c00118c0 <sysCallOpen(regs*)+0x82>

c0011a32 <Sys::loadSyscalls()>:
c0011a32:	c7 05 80 2e 02 c0 0e 0e 01 c0 	mov    DWORD PTR ds:0xc0022e80,0xc0010e0e
c0011a3c:	c7 05 84 2e 02 c0 05 0a 01 c0 	mov    DWORD PTR ds:0xc0022e84,0xc0010a05
c0011a46:	c7 05 88 2e 02 c0 f4 0b 01 c0 	mov    DWORD PTR ds:0xc0022e88,0xc0010bf4
c0011a50:	c7 05 8c 2e 02 c0 44 0d 01 c0 	mov    DWORD PTR ds:0xc0022e8c,0xc0010d44
c0011a5a:	c7 05 90 2e 02 c0 8c 0b 01 c0 	mov    DWORD PTR ds:0xc0022e90,0xc0010b8c
c0011a64:	c7 05 94 2e 02 c0 3c 0a 01 c0 	mov    DWORD PTR ds:0xc0022e94,0xc0010a3c
c0011a6e:	c7 05 98 2e 02 c0 1d 0a 01 c0 	mov    DWORD PTR ds:0xc0022e98,0xc0010a1d
c0011a78:	c7 05 9c 2e 02 c0 49 0c 01 c0 	mov    DWORD PTR ds:0xc0022e9c,0xc0010c49
c0011a82:	c7 05 a4 2e 02 c0 d8 12 01 c0 	mov    DWORD PTR ds:0xc0022ea4,0xc00112d8
c0011a8c:	c7 05 a0 2e 02 c0 3e 18 01 c0 	mov    DWORD PTR ds:0xc0022ea0,0xc001183e
c0011a96:	c7 05 a8 2e 02 c0 38 13 01 c0 	mov    DWORD PTR ds:0xc0022ea8,0xc0011338
c0011aa0:	c7 05 ac 2e 02 c0 0c 10 01 c0 	mov    DWORD PTR ds:0xc0022eac,0xc001100c
c0011aaa:	c7 05 b0 2e 02 c0 33 0e 01 c0 	mov    DWORD PTR ds:0xc0022eb0,0xc0010e33
c0011ab4:	c7 05 b4 2e 02 c0 38 0e 01 c0 	mov    DWORD PTR ds:0xc0022eb4,0xc0010e38
c0011abe:	c7 05 b8 2e 02 c0 03 14 01 c0 	mov    DWORD PTR ds:0xc0022eb8,0xc0011403
c0011ac8:	c7 05 bc 2e 02 c0 af 13 01 c0 	mov    DWORD PTR ds:0xc0022ebc,0xc00113af
c0011ad2:	c7 05 c0 2e 02 c0 e8 10 01 c0 	mov    DWORD PTR ds:0xc0022ec0,0xc00110e8
c0011adc:	c7 05 c4 2e 02 c0 41 11 01 c0 	mov    DWORD PTR ds:0xc0022ec4,0xc0011141
c0011ae6:	c7 05 c8 2e 02 c0 b0 11 01 c0 	mov    DWORD PTR ds:0xc0022ec8,0xc00111b0
c0011af0:	c7 05 cc 2e 02 c0 3d 0e 01 c0 	mov    DWORD PTR ds:0xc0022ecc,0xc0010e3d
c0011afa:	c7 05 d0 2e 02 c0 75 14 01 c0 	mov    DWORD PTR ds:0xc0022ed0,0xc0011475
c0011b04:	c7 05 d4 2e 02 c0 92 14 01 c0 	mov    DWORD PTR ds:0xc0022ed4,0xc0011492
c0011b0e:	c7 05 d8 2e 02 c0 92 14 01 c0 	mov    DWORD PTR ds:0xc0022ed8,0xc0011492
c0011b18:	c7 05 dc 2e 02 c0 c8 14 01 c0 	mov    DWORD PTR ds:0xc0022edc,0xc00114c8
c0011b22:	c7 05 e0 2e 02 c0 2f 15 01 c0 	mov    DWORD PTR ds:0xc0022ee0,0xc001152f
c0011b2c:	c7 05 e4 2e 02 c0 47 0e 01 c0 	mov    DWORD PTR ds:0xc0022ee4,0xc0010e47
c0011b36:	c7 05 e8 2e 02 c0 96 15 01 c0 	mov    DWORD PTR ds:0xc0022ee8,0xc0011596
c0011b40:	c7 05 ec 2e 02 c0 c9 0f 01 c0 	mov    DWORD PTR ds:0xc0022eec,0xc0010fc9
c0011b4a:	c7 05 f0 2e 02 c0 57 0e 01 c0 	mov    DWORD PTR ds:0xc0022ef0,0xc0010e57
c0011b54:	c7 05 f4 2e 02 c0 8c 10 01 c0 	mov    DWORD PTR ds:0xc0022ef4,0xc001108c
c0011b5e:	c7 05 f8 2e 02 c0 e3 15 01 c0 	mov    DWORD PTR ds:0xc0022ef8,0xc00115e3
c0011b68:	c7 05 fc 2e 02 c0 25 12 01 c0 	mov    DWORD PTR ds:0xc0022efc,0xc0011225
c0011b72:	c7 05 00 2f 02 c0 0c 16 01 c0 	mov    DWORD PTR ds:0xc0022f00,0xc001160c
c0011b7c:	c7 05 04 2f 02 c0 75 16 01 c0 	mov    DWORD PTR ds:0xc0022f04,0xc0011675
c0011b86:	c7 05 0c 2f 02 c0 5f 0e 01 c0 	mov    DWORD PTR ds:0xc0022f0c,0xc0010e5f
c0011b90:	c7 05 10 2f 02 c0 cc 0e 01 c0 	mov    DWORD PTR ds:0xc0022f10,0xc0010ecc
c0011b9a:	c7 05 14 2f 02 c0 16 0f 01 c0 	mov    DWORD PTR ds:0xc0022f14,0xc0010f16
c0011ba4:	c7 05 18 2f 02 c0 24 17 01 c0 	mov    DWORD PTR ds:0xc0022f18,0xc0011724
c0011bae:	c7 05 1c 2f 02 c0 ad 14 01 c0 	mov    DWORD PTR ds:0xc0022f1c,0xc00114ad
c0011bb8:	c7 05 20 2f 02 c0 6b 0f 01 c0 	mov    DWORD PTR ds:0xc0022f20,0xc0010f6b
c0011bc2:	c7 05 24 2f 02 c0 9b 17 01 c0 	mov    DWORD PTR ds:0xc0022f24,0xc001179b
c0011bcc:	c7 05 28 2f 02 c0 e0 17 01 c0 	mov    DWORD PTR ds:0xc0022f28,0xc00117e0
c0011bd6:	c7 05 2c 2f 02 c0 e4 0a 01 c0 	mov    DWORD PTR ds:0xc0022f2c,0xc0010ae4
c0011be0:	c7 05 30 2f 02 c0 65 0c 01 c0 	mov    DWORD PTR ds:0xc0022f30,0xc0010c65
c0011bea:	c7 05 34 2f 02 c0 fa 0c 01 c0 	mov    DWORD PTR ds:0xc0022f34,0xc0010cfa
c0011bf4:	c7 05 38 2f 02 c0 cf 09 01 c0 	mov    DWORD PTR ds:0xc0022f38,0xc00109cf
c0011bfe:	c7 05 3c 2f 02 c0 ac 0d 01 c0 	mov    DWORD PTR ds:0xc0022f3c,0xc0010dac
c0011c08:	c7 05 40 2f 02 c0 48 0a 01 c0 	mov    DWORD PTR ds:0xc0022f40,0xc0010a48
c0011c12:	c7 05 44 2f 02 c0 62 0a 01 c0 	mov    DWORD PTR ds:0xc0022f44,0xc0010a62
c0011c1c:	c3                   	ret    

c0011c1d <Sys::systemCall(regs*, void*)>:
c0011c1d:	53                   	push   ebx
c0011c1e:	83 ec 08             	sub    esp,0x8
c0011c21:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c25:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0011c28:	83 f8 7f             	cmp    eax,0x7f
c0011c2b:	77 16                	ja     c0011c43 <Sys::systemCall(regs*, void*)+0x26>
c0011c2d:	8b 14 85 80 2e 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd180]
c0011c34:	85 d2                	test   edx,edx
c0011c36:	74 0b                	je     c0011c43 <Sys::systemCall(regs*, void*)+0x26>
c0011c38:	83 ec 0c             	sub    esp,0xc
c0011c3b:	53                   	push   ebx
c0011c3c:	ff d2                	call   edx
c0011c3e:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0011c41:	eb 0d                	jmp    c0011c50 <Sys::systemCall(regs*, void*)+0x33>
c0011c43:	52                   	push   edx
c0011c44:	52                   	push   edx
c0011c45:	50                   	push   eax
c0011c46:	68 dd e2 01 c0       	push   0xc001e2dd
c0011c4b:	e8 d8 8a ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0011c50:	83 c4 10             	add    esp,0x10
c0011c53:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0011c58:	31 d2                	xor    edx,edx
c0011c5a:	83 c4 08             	add    esp,0x8
c0011c5d:	5b                   	pop    ebx
c0011c5e:	c3                   	ret    

c0011c5f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c0011c5f:	55                   	push   ebp
c0011c60:	57                   	push   edi
c0011c61:	56                   	push   esi
c0011c62:	53                   	push   ebx
c0011c63:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0011c69:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0011c71:	0f 95 c2             	setne  dl
c0011c74:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c0011c7c:	0f 94 c0             	sete   al
c0011c7f:	84 c2                	test   dl,al
c0011c81:	74 34                	je     c0011cb7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011c83:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c0011c8e:	74 27                	je     c0011cb7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x58>
c0011c90:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0011c97:	05 00 10 00 00       	add    eax,0x1000
c0011c9c:	89 c1                	mov    ecx,eax
c0011c9e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011ca3:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c0011ca9:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c0011cb0:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c0011cb7:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c0011cbe:	83 ec 0c             	sub    esp,0xc
c0011cc1:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011cc7:	6a 01                	push   0x1
c0011cc9:	e8 07 78 ff ff       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c0011cce:	83 c4 10             	add    esp,0x10
c0011cd1:	89 c3                	mov    ebx,eax
c0011cd3:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011cd9:	0f 86 25 01 00 00    	jbe    c0011e04 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a5>
c0011cdf:	c1 ee 0c             	shr    esi,0xc
c0011ce2:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011ce9:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0011ced:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0011cf5:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c0011cfc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0011d00:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0011d07:	29 ef                	sub    edi,ebp
c0011d09:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0011d0d:	0f 83 f8 00 00 00    	jae    c0011e0b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ac>
c0011d13:	81 ff 00 10 00 00    	cmp    edi,0x1000
c0011d19:	76 05                	jbe    c0011d20 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc1>
c0011d1b:	bf 00 10 00 00       	mov    edi,0x1000
c0011d20:	83 ec 0c             	sub    esp,0xc
c0011d23:	31 d2                	xor    edx,edx
c0011d25:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011d2c:	8b 08                	mov    ecx,DWORD PTR [eax]
c0011d2e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0011d32:	50                   	push   eax
c0011d33:	8d 74 24 30          	lea    esi,[esp+0x30]
c0011d37:	56                   	push   esi
c0011d38:	52                   	push   edx
c0011d39:	57                   	push   edi
c0011d3a:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0011d41:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011d44:	83 c4 20             	add    esp,0x20
c0011d47:	85 c0                	test   eax,eax
c0011d49:	75 06                	jne    c0011d51 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf2>
c0011d4b:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0011d4f:	74 13                	je     c0011d64 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x105>
c0011d51:	83 ec 0c             	sub    esp,0xc
c0011d54:	53                   	push   ebx
c0011d55:	e8 ab 7a ff ff       	call   c0009805 <Virt::freeKernelVirtualPages(unsigned long)>
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	31 c0                	xor    eax,eax
c0011d5f:	e9 7c 01 00 00       	jmp    c0011ee0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x281>
c0011d64:	fa                   	cli    
c0011d65:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0011d6b:	e8 f6 5f ff ff       	call   c0007d66 <Phys::allocatePage()>
c0011d70:	6a 07                	push   0x7
c0011d72:	89 c7                	mov    edi,eax
c0011d74:	53                   	push   ebx
c0011d75:	50                   	push   eax
c0011d76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d7b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d7e:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011d84:	e8 e1 7d ff ff       	call   c0009b6a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011d89:	83 c4 0c             	add    esp,0xc
c0011d8c:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011d93:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011d99:	6a 00                	push   0x0
c0011d9b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011da0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011da3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011da9:	e8 2e 7c ff ff       	call   c00099dc <VAS::mapOtherVASIn(bool, VAS*)>
c0011dae:	58                   	pop    eax
c0011daf:	5a                   	pop    edx
c0011db0:	68 07 0c 00 00       	push   0xc07
c0011db5:	55                   	push   ebp
c0011db6:	57                   	push   edi
c0011db7:	89 df                	mov    edi,ebx
c0011db9:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011dc0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011dc6:	6a 00                	push   0x0
c0011dc8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011dcd:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011dd0:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011dd6:	e8 4f 81 ff ff       	call   c0009f2a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011ddb:	b9 00 10 00 00       	mov    ecx,0x1000
c0011de0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011de2:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0011de7:	83 c4 20             	add    esp,0x20
c0011dea:	48                   	dec    eax
c0011deb:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0011df0:	85 c0                	test   eax,eax
c0011df2:	75 01                	jne    c0011df5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x196>
c0011df4:	fb                   	sti    
c0011df5:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011dfb:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0011dff:	e9 f1 fe ff ff       	jmp    c0011cf5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x96>
c0011e04:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c0011e0b:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0011e12:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0011e18:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c0011e1e:	0f 86 ae 00 00 00    	jbe    c0011ed2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011e24:	fa                   	cli    
c0011e25:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0011e2b:	c1 ee 0c             	shr    esi,0xc
c0011e2e:	51                   	push   ecx
c0011e2f:	31 ff                	xor    edi,edi
c0011e31:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0011e38:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011e3e:	6a 00                	push   0x0
c0011e40:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e45:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e48:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011e4e:	e8 89 7b ff ff       	call   c00099dc <VAS::mapOtherVASIn(bool, VAS*)>
c0011e53:	83 c4 10             	add    esp,0x10
c0011e56:	e8 0b 5f ff ff       	call   c0007d66 <Phys::allocatePage()>
c0011e5b:	47                   	inc    edi
c0011e5c:	6a 07                	push   0x7
c0011e5e:	53                   	push   ebx
c0011e5f:	50                   	push   eax
c0011e60:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0011e64:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0011e6a:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0011e6d:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0011e73:	e8 f2 7c ff ff       	call   c0009b6a <VAS::mapPage(unsigned long, unsigned long, int)>
c0011e78:	58                   	pop    eax
c0011e79:	5a                   	pop    edx
c0011e7a:	68 07 0c 00 00       	push   0xc07
c0011e7f:	55                   	push   ebp
c0011e80:	81 c5 00 10 00 00    	add    ebp,0x1000
c0011e86:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011e8a:	50                   	push   eax
c0011e8b:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0011e92:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011e98:	6a 00                	push   0x0
c0011e9a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e9f:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ea2:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0011ea8:	e8 7d 80 ff ff       	call   c0009f2a <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c0011ead:	83 c4 1c             	add    esp,0x1c
c0011eb0:	68 00 10 00 00       	push   0x1000
c0011eb5:	6a 00                	push   0x0
c0011eb7:	53                   	push   ebx
c0011eb8:	e8 33 e6 fe ff       	call   c00004f0 <memset>
c0011ebd:	83 c4 10             	add    esp,0x10
c0011ec0:	39 fe                	cmp    esi,edi
c0011ec2:	77 92                	ja     c0011e56 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f7>
c0011ec4:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0011ec9:	48                   	dec    eax
c0011eca:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0011ecf:	75 01                	jne    c0011ed2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x273>
c0011ed1:	fb                   	sti    
c0011ed2:	83 ec 0c             	sub    esp,0xc
c0011ed5:	53                   	push   ebx
c0011ed6:	e8 2a 79 ff ff       	call   c0009805 <Virt::freeKernelVirtualPages(unsigned long)>
c0011edb:	83 c4 10             	add    esp,0x10
c0011ede:	b0 01                	mov    al,0x1
c0011ee0:	81 c4 2c 10 00 00    	add    esp,0x102c
c0011ee6:	5b                   	pop    ebx
c0011ee7:	5e                   	pop    esi
c0011ee8:	5f                   	pop    edi
c0011ee9:	5d                   	pop    ebp
c0011eea:	c3                   	ret    

c0011eeb <Thr::loadProgramIntoMemory(Process*, char const*)>:
c0011eeb:	55                   	push   ebp
c0011eec:	57                   	push   edi
c0011eed:	56                   	push   esi
c0011eee:	53                   	push   ebx
c0011eef:	83 ec 48             	sub    esp,0x48
c0011ef2:	68 14 01 00 00       	push   0x114
c0011ef7:	e8 9d 5a ff ff       	call   c0007999 <malloc>
c0011efc:	83 c4 0c             	add    esp,0xc
c0011eff:	89 c6                	mov    esi,eax
c0011f01:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0011f05:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0011f09:	50                   	push   eax
c0011f0a:	e8 8f 8d ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c0011f0f:	58                   	pop    eax
c0011f10:	5a                   	pop    edx
c0011f11:	6a 01                	push   0x1
c0011f13:	56                   	push   esi
c0011f14:	e8 45 8e ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c0011f19:	83 c4 10             	add    esp,0x10
c0011f1c:	85 c0                	test   eax,eax
c0011f1e:	0f 85 47 01 00 00    	jne    c001206b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011f24:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0011f2c:	83 ec 0c             	sub    esp,0xc
c0011f2f:	6a 34                	push   0x34
c0011f31:	e8 63 5a ff ff       	call   c0007999 <malloc>
c0011f36:	89 c3                	mov    ebx,eax
c0011f38:	58                   	pop    eax
c0011f39:	8b 06                	mov    eax,DWORD PTR [esi]
c0011f3b:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0011f3f:	57                   	push   edi
c0011f40:	53                   	push   ebx
c0011f41:	6a 00                	push   0x0
c0011f43:	6a 34                	push   0x34
c0011f45:	56                   	push   esi
c0011f46:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0011f49:	83 c4 20             	add    esp,0x20
c0011f4c:	85 c0                	test   eax,eax
c0011f4e:	0f 85 17 01 00 00    	jne    c001206b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011f54:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c0011f5a:	0f 85 0b 01 00 00    	jne    c001206b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011f60:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011f63:	85 c0                	test   eax,eax
c0011f65:	0f 84 00 01 00 00    	je     c001206b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011f6b:	31 d2                	xor    edx,edx
c0011f6d:	55                   	push   ebp
c0011f6e:	52                   	push   edx
c0011f6f:	50                   	push   eax
c0011f70:	56                   	push   esi
c0011f71:	e8 a6 8e ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c0011f76:	83 c4 10             	add    esp,0x10
c0011f79:	85 c0                	test   eax,eax
c0011f7b:	0f 85 ea 00 00 00    	jne    c001206b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011f81:	83 ec 0c             	sub    esp,0xc
c0011f84:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0011f87:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011f8b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0011f8f:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011f93:	0f af c2             	imul   eax,edx
c0011f96:	50                   	push   eax
c0011f97:	e8 fd 59 ff ff       	call   c0007999 <malloc>
c0011f9c:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011f9e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0011fa2:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011fa5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0011fa9:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c0011fad:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0011fb1:	0f af c2             	imul   eax,edx
c0011fb4:	99                   	cdq    
c0011fb5:	52                   	push   edx
c0011fb6:	50                   	push   eax
c0011fb7:	56                   	push   esi
c0011fb8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0011fbb:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0011fbe:	83 c4 20             	add    esp,0x20
c0011fc1:	85 c0                	test   eax,eax
c0011fc3:	0f 84 a2 00 00 00    	je     c001206b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011fc9:	31 d2                	xor    edx,edx
c0011fcb:	51                   	push   ecx
c0011fcc:	52                   	push   edx
c0011fcd:	50                   	push   eax
c0011fce:	56                   	push   esi
c0011fcf:	e8 48 8e ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c0011fd4:	83 c4 10             	add    esp,0x10
c0011fd7:	85 c0                	test   eax,eax
c0011fd9:	0f 85 8c 00 00 00    	jne    c001206b <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c0011fdf:	83 ec 0c             	sub    esp,0xc
c0011fe2:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0011fe6:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c0011fea:	31 ed                	xor    ebp,ebp
c0011fec:	0f af c2             	imul   eax,edx
c0011fef:	50                   	push   eax
c0011ff0:	e8 a4 59 ff ff       	call   c0007999 <malloc>
c0011ff5:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0011ff7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011ffb:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011ffe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012002:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0012006:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001200a:	0f af c2             	imul   eax,edx
c001200d:	99                   	cdq    
c001200e:	52                   	push   edx
c001200f:	50                   	push   eax
c0012010:	56                   	push   esi
c0012011:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012014:	83 c4 20             	add    esp,0x20
c0012017:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001201f:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c0012023:	0f 86 80 00 00 00    	jbe    c00120a9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c0012029:	0f b7 fd             	movzx  edi,bp
c001202c:	c1 e7 05             	shl    edi,0x5
c001202f:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0012033:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0012036:	75 6b                	jne    c00120a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c0012038:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001203b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001203f:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0012042:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012046:	52                   	push   edx
c0012047:	31 d2                	xor    edx,edx
c0012049:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001204c:	52                   	push   edx
c001204d:	50                   	push   eax
c001204e:	56                   	push   esi
c001204f:	e8 c8 8d ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c0012054:	83 c4 10             	add    esp,0x10
c0012057:	85 c0                	test   eax,eax
c0012059:	74 17                	je     c0012072 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001205b:	83 ec 0c             	sub    esp,0xc
c001205e:	68 f1 e2 01 c0       	push   0xc001e2f1
c0012063:	e8 c0 86 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0012068:	83 c4 10             	add    esp,0x10
c001206b:	31 c0                	xor    eax,eax
c001206d:	e9 87 00 00 00       	jmp    c00120f9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c0012072:	83 ec 0c             	sub    esp,0xc
c0012075:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0012078:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001207b:	50                   	push   eax
c001207c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012080:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012084:	56                   	push   esi
c0012085:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0012089:	e8 d1 fb ff ff       	call   c0011c5f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001208e:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012092:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0012096:	83 c4 20             	add    esp,0x20
c0012099:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001209d:	73 04                	jae    c00120a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001209f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00120a3:	45                   	inc    ebp
c00120a4:	e9 76 ff ff ff       	jmp    c001201f <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00120a9:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00120ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00120b1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00120b5:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00120bb:	83 ec 0c             	sub    esp,0xc
c00120be:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00120c4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00120c9:	05 00 10 00 00       	add    eax,0x1000
c00120ce:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00120d1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00120d5:	e8 cf 58 ff ff       	call   c00079a9 <free>
c00120da:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00120dd:	e8 c7 58 ff ff       	call   c00079a9 <free>
c00120e2:	58                   	pop    eax
c00120e3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00120e7:	e8 bd 58 ff ff       	call   c00079a9 <free>
c00120ec:	89 34 24             	mov    DWORD PTR [esp],esi
c00120ef:	e8 c8 8c ff ff       	call   c000adbc <File::close()>
c00120f4:	83 c4 10             	add    esp,0x10
c00120f7:	b0 01                	mov    al,0x1
c00120f9:	83 c4 3c             	add    esp,0x3c
c00120fc:	5b                   	pop    ebx
c00120fd:	5e                   	pop    esi
c00120fe:	5f                   	pop    edi
c00120ff:	5d                   	pop    ebp
c0012100:	c3                   	ret    

c0012101 <Thr::runtimeReferenceHelper()>:
c0012101:	83 ec 18             	sub    esp,0x18
c0012104:	68 f9 e2 01 c0       	push   0xc001e2f9
c0012109:	e8 1a 86 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001210e:	fa                   	cli    
c001210f:	83 c4 10             	add    esp,0x10
c0012112:	eb fe                	jmp    c0012112 <Thr::runtimeReferenceHelper()+0x11>

c0012114 <Thr::getAddressOfKernelSymbol(char const*)>:
c0012114:	57                   	push   edi
c0012115:	56                   	push   esi
c0012116:	53                   	push   ebx
c0012117:	31 db                	xor    ebx,ebx
c0012119:	39 1d 20 38 02 c0    	cmp    DWORD PTR ds:0xc0023820,ebx
c001211f:	7e 3c                	jle    c001215d <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c0012121:	8b 34 9d a0 37 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffdc860]
c0012128:	31 ff                	xor    edi,edi
c001212a:	39 3c 9d a0 36 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffdc960],edi
c0012131:	7e 27                	jle    c001215a <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0012133:	50                   	push   eax
c0012134:	50                   	push   eax
c0012135:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012139:	8b 06                	mov    eax,DWORD PTR [esi]
c001213b:	03 04 9d 20 37 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffdc8e0]
c0012142:	50                   	push   eax
c0012143:	e8 b8 e5 fe ff       	call   c0000700 <strcmp>
c0012148:	83 c4 10             	add    esp,0x10
c001214b:	85 c0                	test   eax,eax
c001214d:	75 05                	jne    c0012154 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001214f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0012152:	eb 0b                	jmp    c001215f <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0012154:	83 c6 10             	add    esi,0x10
c0012157:	47                   	inc    edi
c0012158:	eb d0                	jmp    c001212a <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001215a:	43                   	inc    ebx
c001215b:	eb bc                	jmp    c0012119 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001215d:	31 c0                	xor    eax,eax
c001215f:	5b                   	pop    ebx
c0012160:	5e                   	pop    esi
c0012161:	5f                   	pop    edi
c0012162:	c3                   	ret    

c0012163 <Thr::loadKernelSymbolTable(char const*)>:
c0012163:	55                   	push   ebp
c0012164:	57                   	push   edi
c0012165:	56                   	push   esi
c0012166:	53                   	push   ebx
c0012167:	83 ec 68             	sub    esp,0x68
c001216a:	8b 35 70 38 02 c0    	mov    esi,DWORD PTR ds:0xc0023870
c0012170:	68 14 01 00 00       	push   0x114
c0012175:	e8 1f 58 ff ff       	call   c0007999 <malloc>
c001217a:	83 c4 0c             	add    esp,0xc
c001217d:	89 c3                	mov    ebx,eax
c001217f:	56                   	push   esi
c0012180:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0012184:	50                   	push   eax
c0012185:	e8 14 8b ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c001218a:	5e                   	pop    esi
c001218b:	5f                   	pop    edi
c001218c:	6a 01                	push   0x1
c001218e:	53                   	push   ebx
c001218f:	e8 ca 8b ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c0012194:	83 c4 10             	add    esp,0x10
c0012197:	85 c0                	test   eax,eax
c0012199:	74 0a                	je     c00121a5 <Thr::loadKernelSymbolTable(char const*)+0x42>
c001219b:	83 ec 0c             	sub    esp,0xc
c001219e:	68 1b e3 01 c0       	push   0xc001e31b
c00121a3:	eb 34                	jmp    c00121d9 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00121a5:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00121ad:	83 ec 0c             	sub    esp,0xc
c00121b0:	6a 34                	push   0x34
c00121b2:	e8 e2 57 ff ff       	call   c0007999 <malloc>
c00121b7:	59                   	pop    ecx
c00121b8:	89 c7                	mov    edi,eax
c00121ba:	8d 74 24 34          	lea    esi,[esp+0x34]
c00121be:	8b 03                	mov    eax,DWORD PTR [ebx]
c00121c0:	56                   	push   esi
c00121c1:	57                   	push   edi
c00121c2:	6a 00                	push   0x0
c00121c4:	6a 34                	push   0x34
c00121c6:	53                   	push   ebx
c00121c7:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00121ca:	83 c4 20             	add    esp,0x20
c00121cd:	85 c0                	test   eax,eax
c00121cf:	74 17                	je     c00121e8 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00121d1:	83 ec 0c             	sub    esp,0xc
c00121d4:	68 32 e3 01 c0       	push   0xc001e332
c00121d9:	e8 99 e0 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c00121de:	83 c4 10             	add    esp,0x10
c00121e1:	31 c0                	xor    eax,eax
c00121e3:	e9 31 02 00 00       	jmp    c0012419 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00121e8:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00121ee:	75 e1                	jne    c00121d1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00121f0:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00121f3:	85 c0                	test   eax,eax
c00121f5:	74 da                	je     c00121d1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00121f7:	52                   	push   edx
c00121f8:	31 d2                	xor    edx,edx
c00121fa:	52                   	push   edx
c00121fb:	50                   	push   eax
c00121fc:	53                   	push   ebx
c00121fd:	e8 1a 8c ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c0012202:	83 c4 10             	add    esp,0x10
c0012205:	85 c0                	test   eax,eax
c0012207:	75 c8                	jne    c00121d1 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0012209:	83 ec 0c             	sub    esp,0xc
c001220c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012210:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012214:	31 ed                	xor    ebp,ebp
c0012216:	0f af c2             	imul   eax,edx
c0012219:	50                   	push   eax
c001221a:	e8 7a 57 ff ff       	call   c0007999 <malloc>
c001221f:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012221:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012225:	89 34 24             	mov    DWORD PTR [esp],esi
c0012228:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001222c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c0012230:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012234:	0f af c2             	imul   eax,edx
c0012237:	99                   	cdq    
c0012238:	52                   	push   edx
c0012239:	50                   	push   eax
c001223a:	53                   	push   ebx
c001223b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001223e:	83 c4 20             	add    esp,0x20
c0012241:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012249:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0012251:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0012259:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012261:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c0012265:	0f 86 aa 00 00 00    	jbe    c0012315 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001226b:	0f b7 f5             	movzx  esi,bp
c001226e:	6b f6 28             	imul   esi,esi,0x28
c0012271:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012275:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012278:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001227c:	50                   	push   eax
c001227d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012281:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0012285:	8b 16                	mov    edx,DWORD PTR [esi]
c0012287:	6b c0 28             	imul   eax,eax,0x28
c001228a:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001228e:	89 d0                	mov    eax,edx
c0012290:	31 d2                	xor    edx,edx
c0012292:	52                   	push   edx
c0012293:	50                   	push   eax
c0012294:	53                   	push   ebx
c0012295:	e8 82 8b ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c001229a:	83 c4 0c             	add    esp,0xc
c001229d:	6a 20                	push   0x20
c001229f:	6a 00                	push   0x0
c00122a1:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00122a5:	52                   	push   edx
c00122a6:	e8 45 e2 fe ff       	call   c00004f0 <memset>
c00122ab:	58                   	pop    eax
c00122ac:	8b 03                	mov    eax,DWORD PTR [ebx]
c00122ae:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00122b2:	51                   	push   ecx
c00122b3:	8d 54 24 40          	lea    edx,[esp+0x40]
c00122b7:	52                   	push   edx
c00122b8:	6a 00                	push   0x0
c00122ba:	6a 1f                	push   0x1f
c00122bc:	53                   	push   ebx
c00122bd:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00122c0:	83 c4 18             	add    esp,0x18
c00122c3:	68 49 e3 01 c0       	push   0xc001e349
c00122c8:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00122cc:	52                   	push   edx
c00122cd:	e8 2e e4 fe ff       	call   c0000700 <strcmp>
c00122d2:	83 c4 10             	add    esp,0x10
c00122d5:	85 c0                	test   eax,eax
c00122d7:	75 0f                	jne    c00122e8 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00122d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00122dc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00122e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00122e4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122e8:	50                   	push   eax
c00122e9:	50                   	push   eax
c00122ea:	68 51 e3 01 c0       	push   0xc001e351
c00122ef:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00122f3:	50                   	push   eax
c00122f4:	e8 07 e4 fe ff       	call   c0000700 <strcmp>
c00122f9:	83 c4 10             	add    esp,0x10
c00122fc:	85 c0                	test   eax,eax
c00122fe:	75 0f                	jne    c001230f <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c0012300:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012303:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012307:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001230b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001230f:	45                   	inc    ebp
c0012310:	e9 4c ff ff ff       	jmp    c0012261 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0012315:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001231a:	75 10                	jne    c001232c <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001231c:	83 ec 0c             	sub    esp,0xc
c001231f:	68 59 e3 01 c0       	push   0xc001e359
c0012324:	e8 4e df ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0012329:	83 c4 10             	add    esp,0x10
c001232c:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c0012331:	75 10                	jne    c0012343 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0012333:	83 ec 0c             	sub    esp,0xc
c0012336:	68 59 e3 01 c0       	push   0xc001e359
c001233b:	e8 37 df ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0012340:	83 c4 10             	add    esp,0x10
c0012343:	31 d2                	xor    edx,edx
c0012345:	50                   	push   eax
c0012346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001234a:	52                   	push   edx
c001234b:	50                   	push   eax
c001234c:	53                   	push   ebx
c001234d:	e8 ca 8a ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c0012352:	5a                   	pop    edx
c0012353:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012357:	e8 3d 56 ff ff       	call   c0007999 <malloc>
c001235c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012360:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012364:	31 c9                	xor    ecx,ecx
c0012366:	5e                   	pop    esi
c0012367:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012369:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001236d:	55                   	push   ebp
c001236e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012372:	51                   	push   ecx
c0012373:	52                   	push   edx
c0012374:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0012378:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001237c:	53                   	push   ebx
c001237d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012380:	83 c4 14             	add    esp,0x14
c0012383:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012387:	e8 0d 56 ff ff       	call   c0007999 <malloc>
c001238c:	89 c6                	mov    esi,eax
c001238e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012390:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012393:	56                   	push   esi
c0012394:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0012398:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001239c:	51                   	push   ecx
c001239d:	52                   	push   edx
c001239e:	53                   	push   ebx
c001239f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00123a2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00123a6:	8b 15 20 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023820
c00123ac:	83 c4 1c             	add    esp,0x1c
c00123af:	c1 e8 04             	shr    eax,0x4
c00123b2:	89 04 95 a0 36 02 c0 	mov    DWORD PTR [edx*4-0x3ffdc960],eax
c00123b9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00123bd:	31 d2                	xor    edx,edx
c00123bf:	52                   	push   edx
c00123c0:	50                   	push   eax
c00123c1:	53                   	push   ebx
c00123c2:	e8 55 8a ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c00123c7:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00123c9:	31 d2                	xor    edx,edx
c00123cb:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00123ce:	56                   	push   esi
c00123cf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00123d3:	52                   	push   edx
c00123d4:	50                   	push   eax
c00123d5:	53                   	push   ebx
c00123d6:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00123d9:	83 c4 14             	add    esp,0x14
c00123dc:	53                   	push   ebx
c00123dd:	e8 da 89 ff ff       	call   c000adbc <File::close()>
c00123e2:	5d                   	pop    ebp
c00123e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00123e7:	e8 bd 55 ff ff       	call   c00079a9 <free>
c00123ec:	89 3c 24             	mov    DWORD PTR [esp],edi
c00123ef:	e8 b5 55 ff ff       	call   c00079a9 <free>
c00123f4:	a1 20 38 02 c0       	mov    eax,ds:0xc0023820
c00123f9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00123fd:	8d 50 01             	lea    edx,[eax+0x1]
c0012400:	89 0c 85 a0 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc860],ecx
c0012407:	89 34 85 20 37 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc8e0],esi
c001240e:	89 15 20 38 02 c0    	mov    DWORD PTR ds:0xc0023820,edx
c0012414:	83 c4 10             	add    esp,0x10
c0012417:	b0 01                	mov    al,0x1
c0012419:	83 c4 5c             	add    esp,0x5c
c001241c:	5b                   	pop    ebx
c001241d:	5e                   	pop    esi
c001241e:	5f                   	pop    edi
c001241f:	5d                   	pop    ebp
c0012420:	c3                   	ret    

c0012421 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c0012421:	55                   	push   ebp
c0012422:	57                   	push   edi
c0012423:	56                   	push   esi
c0012424:	53                   	push   ebx
c0012425:	81 ec 68 03 00 00    	sub    esp,0x368
c001242b:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c0012432:	8b 1d 70 38 02 c0    	mov    ebx,DWORD PTR ds:0xc0023870
c0012438:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001243c:	68 14 01 00 00       	push   0x114
c0012441:	e8 53 55 ff ff       	call   c0007999 <malloc>
c0012446:	83 c4 0c             	add    esp,0xc
c0012449:	89 c5                	mov    ebp,eax
c001244b:	53                   	push   ebx
c001244c:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0012453:	50                   	push   eax
c0012454:	e8 45 88 ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c0012459:	5e                   	pop    esi
c001245a:	5f                   	pop    edi
c001245b:	6a 01                	push   0x1
c001245d:	55                   	push   ebp
c001245e:	e8 fb 88 ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c0012463:	83 c4 10             	add    esp,0x10
c0012466:	85 c0                	test   eax,eax
c0012468:	0f 85 a7 06 00 00    	jne    c0012b15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001246e:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0012476:	83 ec 0c             	sub    esp,0xc
c0012479:	6a 34                	push   0x34
c001247b:	e8 19 55 ff ff       	call   c0007999 <malloc>
c0012480:	5b                   	pop    ebx
c0012481:	89 c7                	mov    edi,eax
c0012483:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0012487:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001248a:	53                   	push   ebx
c001248b:	57                   	push   edi
c001248c:	6a 00                	push   0x0
c001248e:	6a 34                	push   0x34
c0012490:	55                   	push   ebp
c0012491:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0012494:	83 c4 20             	add    esp,0x20
c0012497:	85 c0                	test   eax,eax
c0012499:	0f 85 76 06 00 00    	jne    c0012b15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001249f:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00124a5:	0f 85 6a 06 00 00    	jne    c0012b15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00124ab:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00124ae:	85 c0                	test   eax,eax
c00124b0:	0f 84 5f 06 00 00    	je     c0012b15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00124b6:	31 d2                	xor    edx,edx
c00124b8:	51                   	push   ecx
c00124b9:	52                   	push   edx
c00124ba:	50                   	push   eax
c00124bb:	55                   	push   ebp
c00124bc:	e8 5b 89 ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c00124c1:	83 c4 10             	add    esp,0x10
c00124c4:	85 c0                	test   eax,eax
c00124c6:	0f 85 49 06 00 00    	jne    c0012b15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00124cc:	83 ec 0c             	sub    esp,0xc
c00124cf:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00124d2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00124d6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00124da:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00124de:	0f af c2             	imul   eax,edx
c00124e1:	50                   	push   eax
c00124e2:	e8 b2 54 ff ff       	call   c0007999 <malloc>
c00124e7:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00124ea:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00124ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00124f1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00124f5:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00124f9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00124fd:	0f af c2             	imul   eax,edx
c0012500:	99                   	cdq    
c0012501:	52                   	push   edx
c0012502:	50                   	push   eax
c0012503:	55                   	push   ebp
c0012504:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012507:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001250a:	83 c4 20             	add    esp,0x20
c001250d:	85 c0                	test   eax,eax
c001250f:	0f 84 00 06 00 00    	je     c0012b15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012515:	52                   	push   edx
c0012516:	31 d2                	xor    edx,edx
c0012518:	52                   	push   edx
c0012519:	50                   	push   eax
c001251a:	55                   	push   ebp
c001251b:	e8 fc 88 ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c0012520:	83 c4 10             	add    esp,0x10
c0012523:	85 c0                	test   eax,eax
c0012525:	0f 85 ea 05 00 00    	jne    c0012b15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001252b:	83 ec 0c             	sub    esp,0xc
c001252e:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012532:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012536:	31 f6                	xor    esi,esi
c0012538:	0f af c2             	imul   eax,edx
c001253b:	50                   	push   eax
c001253c:	e8 58 54 ff ff       	call   c0007999 <malloc>
c0012541:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012544:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0012548:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001254b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001254f:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0012553:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0012557:	0f af c2             	imul   eax,edx
c001255a:	99                   	cdq    
c001255b:	52                   	push   edx
c001255c:	50                   	push   eax
c001255d:	55                   	push   ebp
c001255e:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012561:	83 c4 20             	add    esp,0x20
c0012564:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c0012568:	0f 86 8a 00 00 00    	jbe    c00125f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001256e:	0f b7 de             	movzx  ebx,si
c0012571:	c1 e3 05             	shl    ebx,0x5
c0012574:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0012578:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001257b:	75 75                	jne    c00125f2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001257d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0012580:	31 d2                	xor    edx,edx
c0012582:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012586:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0012589:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001258d:	50                   	push   eax
c001258e:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0012591:	52                   	push   edx
c0012592:	50                   	push   eax
c0012593:	55                   	push   ebp
c0012594:	e8 83 88 ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c0012599:	83 c4 10             	add    esp,0x10
c001259c:	85 c0                	test   eax,eax
c001259e:	0f 85 71 05 00 00    	jne    c0012b15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c00125a4:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c00125ab:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00125ae:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c00125b2:	31 d2                	xor    edx,edx
c00125b4:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00125b8:	83 ec 0c             	sub    esp,0xc
c00125bb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00125bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c00125c6:	50                   	push   eax
c00125c7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00125cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00125cf:	52                   	push   edx
c00125d0:	50                   	push   eax
c00125d1:	55                   	push   ebp
c00125d2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00125d5:	83 c4 1c             	add    esp,0x1c
c00125d8:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00125db:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c00125de:	50                   	push   eax
c00125df:	6a 00                	push   0x0
c00125e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00125e5:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00125e9:	50                   	push   eax
c00125ea:	e8 01 df fe ff       	call   c00004f0 <memset>
c00125ef:	83 c4 10             	add    esp,0x10
c00125f2:	46                   	inc    esi
c00125f3:	e9 6c ff ff ff       	jmp    c0012564 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c00125f8:	53                   	push   ebx
c00125f9:	31 db                	xor    ebx,ebx
c00125fb:	68 00 01 00 00       	push   0x100
c0012600:	6a 00                	push   0x0
c0012602:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0012606:	50                   	push   eax
c0012607:	e8 e4 de fe ff       	call   c00004f0 <memset>
c001260c:	83 c4 0c             	add    esp,0xc
c001260f:	68 00 01 00 00       	push   0x100
c0012614:	6a 00                	push   0x0
c0012616:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001261d:	50                   	push   eax
c001261e:	e8 cd de fe ff       	call   c00004f0 <memset>
c0012623:	83 c4 10             	add    esp,0x10
c0012626:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001262e:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012636:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001263e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012646:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001264e:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c0012652:	0f 86 30 01 00 00    	jbe    c0012788 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0012658:	0f b7 f3             	movzx  esi,bx
c001265b:	6b f6 28             	imul   esi,esi,0x28
c001265e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0012662:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0012665:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012669:	52                   	push   edx
c001266a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001266e:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0012672:	8b 06                	mov    eax,DWORD PTR [esi]
c0012674:	6b d2 28             	imul   edx,edx,0x28
c0012677:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001267b:	31 d2                	xor    edx,edx
c001267d:	52                   	push   edx
c001267e:	50                   	push   eax
c001267f:	55                   	push   ebp
c0012680:	e8 97 87 ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c0012685:	83 c4 0c             	add    esp,0xc
c0012688:	6a 20                	push   0x20
c001268a:	6a 00                	push   0x0
c001268c:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0012693:	51                   	push   ecx
c0012694:	e8 57 de fe ff       	call   c00004f0 <memset>
c0012699:	59                   	pop    ecx
c001269a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001269d:	8d 54 24 58          	lea    edx,[esp+0x58]
c00126a1:	52                   	push   edx
c00126a2:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c00126a9:	51                   	push   ecx
c00126aa:	6a 00                	push   0x0
c00126ac:	6a 1f                	push   0x1f
c00126ae:	55                   	push   ebp
c00126af:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00126b2:	83 c4 1c             	add    esp,0x1c
c00126b5:	6a 09                	push   0x9
c00126b7:	68 73 e3 01 c0       	push   0xc001e373
c00126bc:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c00126c3:	51                   	push   ecx
c00126c4:	e8 e7 dc fe ff       	call   c00003b0 <memcmp>
c00126c9:	83 c4 10             	add    esp,0x10
c00126cc:	85 c0                	test   eax,eax
c00126ce:	75 21                	jne    c00126f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c00126d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00126d4:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126d8:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c00126dc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00126e0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00126e3:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c00126ea:	89 d0                	mov    eax,edx
c00126ec:	40                   	inc    eax
c00126ed:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00126f1:	50                   	push   eax
c00126f2:	6a 09                	push   0x9
c00126f4:	68 7d e3 01 c0       	push   0xc001e37d
c00126f9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012700:	50                   	push   eax
c0012701:	e8 aa dc fe ff       	call   c00003b0 <memcmp>
c0012706:	83 c4 10             	add    esp,0x10
c0012709:	85 c0                	test   eax,eax
c001270b:	75 21                	jne    c001272e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001270d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012711:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012715:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0012719:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001271d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012720:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0012727:	89 d0                	mov    eax,edx
c0012729:	40                   	inc    eax
c001272a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001272e:	50                   	push   eax
c001272f:	50                   	push   eax
c0012730:	68 49 e3 01 c0       	push   0xc001e349
c0012735:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001273c:	50                   	push   eax
c001273d:	e8 be df fe ff       	call   c0000700 <strcmp>
c0012742:	83 c4 10             	add    esp,0x10
c0012745:	85 c0                	test   eax,eax
c0012747:	75 0f                	jne    c0012758 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0012749:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001274c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0012750:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012758:	50                   	push   eax
c0012759:	50                   	push   eax
c001275a:	68 51 e3 01 c0       	push   0xc001e351
c001275f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012766:	50                   	push   eax
c0012767:	e8 94 df fe ff       	call   c0000700 <strcmp>
c001276c:	83 c4 10             	add    esp,0x10
c001276f:	85 c0                	test   eax,eax
c0012771:	75 0f                	jne    c0012782 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0012773:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0012776:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001277a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001277e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0012782:	43                   	inc    ebx
c0012783:	e9 c6 fe ff ff       	jmp    c001264e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0012788:	31 d2                	xor    edx,edx
c001278a:	50                   	push   eax
c001278b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001278f:	52                   	push   edx
c0012790:	50                   	push   eax
c0012791:	55                   	push   ebp
c0012792:	e8 85 86 ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c0012797:	58                   	pop    eax
c0012798:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001279c:	e8 f8 51 ff ff       	call   c0007999 <malloc>
c00127a1:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00127a4:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00127a8:	31 d2                	xor    edx,edx
c00127aa:	58                   	pop    eax
c00127ab:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c00127af:	53                   	push   ebx
c00127b0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00127b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127b8:	52                   	push   edx
c00127b9:	50                   	push   eax
c00127ba:	55                   	push   ebp
c00127bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00127be:	83 c4 14             	add    esp,0x14
c00127c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00127c5:	e8 cf 51 ff ff       	call   c0007999 <malloc>
c00127ca:	31 d2                	xor    edx,edx
c00127cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00127d0:	83 c4 0c             	add    esp,0xc
c00127d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00127d7:	52                   	push   edx
c00127d8:	50                   	push   eax
c00127d9:	55                   	push   ebp
c00127da:	e8 3d 86 ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c00127df:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00127e2:	31 d2                	xor    edx,edx
c00127e4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00127e7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00127eb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00127ef:	52                   	push   edx
c00127f0:	50                   	push   eax
c00127f1:	55                   	push   ebp
c00127f2:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00127f5:	83 c4 20             	add    esp,0x20
c00127f8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012800:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012804:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0012808:	0f 84 0b 03 00 00    	je     c0012b19 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001280e:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0012815:	31 d2                	xor    edx,edx
c0012817:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001281b:	c1 e8 03             	shr    eax,0x3
c001281e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0012822:	51                   	push   ecx
c0012823:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012827:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001282b:	52                   	push   edx
c001282c:	50                   	push   eax
c001282d:	55                   	push   ebp
c001282e:	e8 e9 85 ff ff       	call   c000ae1c <File::seek(unsigned long long)>
c0012833:	5b                   	pop    ebx
c0012834:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012838:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001283f:	e8 55 51 ff ff       	call   c0007999 <malloc>
c0012844:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0012847:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001284b:	31 d2                	xor    edx,edx
c001284d:	5e                   	pop    esi
c001284e:	8d 44 24 58          	lea    eax,[esp+0x58]
c0012852:	50                   	push   eax
c0012853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012857:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001285b:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0012862:	52                   	push   edx
c0012863:	50                   	push   eax
c0012864:	55                   	push   ebp
c0012865:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0012868:	83 c4 20             	add    esp,0x20
c001286b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0012873:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012877:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001287b:	0f 8d 7c 02 00 00    	jge    c0012afd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c0012881:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012885:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012889:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001288e:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c0012891:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0012895:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012899:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001289d:	89 d8                	mov    eax,ebx
c001289f:	c1 e8 08             	shr    eax,0x8
c00128a2:	89 c6                	mov    esi,eax
c00128a4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00128a8:	c1 e6 04             	shl    esi,0x4
c00128ab:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c00128af:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c00128b2:	85 d2                	test   edx,edx
c00128b4:	0f 85 bf 00 00 00    	jne    c0012979 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00128ba:	83 ec 0c             	sub    esp,0xc
c00128bd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00128c1:	03 06                	add    eax,DWORD PTR [esi]
c00128c3:	50                   	push   eax
c00128c4:	e8 4b f8 ff ff       	call   c0012114 <Thr::getAddressOfKernelSymbol(char const*)>
c00128c9:	83 c4 10             	add    esp,0x10
c00128cc:	89 c2                	mov    edx,eax
c00128ce:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c00128d3:	85 c0                	test   eax,eax
c00128d5:	0f 85 9e 00 00 00    	jne    c0012979 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00128db:	83 ec 0c             	sub    esp,0xc
c00128de:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00128e2:	03 06                	add    eax,DWORD PTR [esi]
c00128e4:	50                   	push   eax
c00128e5:	e8 96 41 ff ff       	call   c0006a80 <Krnl::resolveCompatibilitySymbol(char*)>
c00128ea:	83 c4 10             	add    esp,0x10
c00128ed:	89 c2                	mov    edx,eax
c00128ef:	85 c0                	test   eax,eax
c00128f1:	0f 85 82 00 00 00    	jne    c0012979 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c00128f7:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00128fb:	50                   	push   eax
c00128fc:	50                   	push   eax
c00128fd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012901:	03 06                	add    eax,DWORD PTR [esi]
c0012903:	50                   	push   eax
c0012904:	68 87 e3 01 c0       	push   0xc001e387
c0012909:	e8 1a 7e ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001290e:	58                   	pop    eax
c001290f:	5a                   	pop    edx
c0012910:	68 a1 e3 01 c0       	push   0xc001e3a1
c0012915:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001291c:	50                   	push   eax
c001291d:	e8 fe dc fe ff       	call   c0000620 <strcpy>
c0012922:	59                   	pop    ecx
c0012923:	58                   	pop    eax
c0012924:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012928:	03 06                	add    eax,DWORD PTR [esi]
c001292a:	50                   	push   eax
c001292b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012932:	50                   	push   eax
c0012933:	e8 a8 de fe ff       	call   c00007e0 <strcat>
c0012938:	58                   	pop    eax
c0012939:	5a                   	pop    edx
c001293a:	68 37 e4 01 c0       	push   0xc001e437
c001293f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012946:	50                   	push   eax
c0012947:	e8 94 de fe ff       	call   c00007e0 <strcat>
c001294c:	83 c4 10             	add    esp,0x10
c001294f:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012954:	0f 84 5d 01 00 00    	je     c0012ab7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001295a:	83 ec 0c             	sub    esp,0xc
c001295d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0012964:	50                   	push   eax
c0012965:	e8 0d d9 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001296a:	83 c4 10             	add    esp,0x10
c001296d:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0012971:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0012975:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0012979:	80 fb 01             	cmp    bl,0x1
c001297c:	0f 85 88 00 00 00    	jne    c0012a0a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c0012982:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0012989:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001298d:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c0012991:	01 ce                	add    esi,ecx
c0012993:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012999:	0f 94 c0             	sete   al
c001299c:	81 fb 01 01 00 00    	cmp    ebx,0x101
c00129a2:	0f 94 c3             	sete   bl
c00129a5:	09 c3                	or     ebx,eax
c00129a7:	8b 06                	mov    eax,DWORD PTR [esi]
c00129a9:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c00129ae:	74 41                	je     c00129f1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c00129b0:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00129b3:	84 db                	test   bl,bl
c00129b5:	75 15                	jne    c00129cc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c00129b7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00129bb:	66 83 f8 0c          	cmp    ax,0xc
c00129bf:	76 05                	jbe    c00129c6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c00129c1:	b8 0c 00 00 00       	mov    eax,0xc
c00129c6:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00129ca:	76 37                	jbe    c0012a03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00129cc:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c00129d0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c00129d5:	0f 84 dc 00 00 00    	je     c0012ab7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c00129db:	83 ec 0c             	sub    esp,0xc
c00129de:	68 b8 e3 01 c0       	push   0xc001e3b8
c00129e3:	e8 8f d8 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c00129e8:	83 c4 10             	add    esp,0x10
c00129eb:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00129ef:	eb 12                	jmp    c0012a03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00129f1:	01 c1                	add    ecx,eax
c00129f3:	84 db                	test   bl,bl
c00129f5:	75 0c                	jne    c0012a03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c00129f7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00129fb:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c00129ff:	77 02                	ja     c0012a03 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c0012a01:	01 d1                	add    ecx,edx
c0012a03:	89 0e                	mov    DWORD PTR [esi],ecx
c0012a05:	e9 ea 00 00 00       	jmp    c0012af4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012a0a:	80 fb 02             	cmp    bl,0x2
c0012a0d:	75 7c                	jne    c0012a8b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0012a0f:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0012a16:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c0012a1a:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c0012a1e:	81 fb 01 04 00 00    	cmp    ebx,0x401
c0012a24:	74 20                	je     c0012a46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012a26:	81 fb 01 01 00 00    	cmp    ebx,0x101
c0012a2c:	74 18                	je     c0012a46 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c0012a2e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0012a32:	b9 0a 00 00 00       	mov    ecx,0xa
c0012a37:	66 83 f8 0e          	cmp    ax,0xe
c0012a3b:	77 03                	ja     c0012a40 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c0012a3d:	8d 48 fc             	lea    ecx,[eax-0x4]
c0012a40:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c0012a44:	76 1f                	jbe    c0012a65 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c0012a46:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0012a4a:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012a4f:	74 66                	je     c0012ab7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012a51:	83 ec 0c             	sub    esp,0xc
c0012a54:	68 d4 e3 01 c0       	push   0xc001e3d4
c0012a59:	e8 19 d8 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0012a5e:	83 c4 10             	add    esp,0x10
c0012a61:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012a65:	8b 06                	mov    eax,DWORD PTR [esi]
c0012a67:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c0012a6c:	74 13                	je     c0012a81 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c0012a6e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0012a72:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c0012a79:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c0012a7d:	01 c8                	add    eax,ecx
c0012a7f:	eb 04                	jmp    c0012a85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c0012a81:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c0012a85:	01 c2                	add    edx,eax
c0012a87:	89 16                	mov    DWORD PTR [esi],edx
c0012a89:	eb 69                	jmp    c0012af4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012a8b:	0f b6 db             	movzx  ebx,bl
c0012a8e:	50                   	push   eax
c0012a8f:	50                   	push   eax
c0012a90:	53                   	push   ebx
c0012a91:	68 f0 e3 01 c0       	push   0xc001e3f0
c0012a96:	e8 8d 7c ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0012a9b:	83 c4 10             	add    esp,0x10
c0012a9e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0012aa3:	74 12                	je     c0012ab7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c0012aa5:	83 ec 0c             	sub    esp,0xc
c0012aa8:	68 fb e3 01 c0       	push   0xc001e3fb
c0012aad:	e8 c5 d7 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0012ab2:	83 c4 10             	add    esp,0x10
c0012ab5:	eb 3d                	jmp    c0012af4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c0012ab7:	83 ec 0c             	sub    esp,0xc
c0012aba:	55                   	push   ebp
c0012abb:	e8 fc 82 ff ff       	call   c000adbc <File::close()>
c0012ac0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012ac3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012ac6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012ac9:	59                   	pop    ecx
c0012aca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012ace:	e8 d6 4e ff ff       	call   c00079a9 <free>
c0012ad3:	5b                   	pop    ebx
c0012ad4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012ad8:	e8 cc 4e ff ff       	call   c00079a9 <free>
c0012add:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012ae0:	e8 c4 4e ff ff       	call   c00079a9 <free>
c0012ae5:	5e                   	pop    esi
c0012ae6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012aea:	e8 ba 4e ff ff       	call   c00079a9 <free>
c0012aef:	83 c4 10             	add    esp,0x10
c0012af2:	eb 21                	jmp    c0012b15 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c0012af4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0012af8:	e9 76 fd ff ff       	jmp    c0012873 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c0012afd:	83 ec 0c             	sub    esp,0xc
c0012b00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b04:	e8 a0 4e ff ff       	call   c00079a9 <free>
c0012b09:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c0012b0d:	83 c4 10             	add    esp,0x10
c0012b10:	e9 eb fc ff ff       	jmp    c0012800 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c0012b15:	31 c0                	xor    eax,eax
c0012b17:	eb 33                	jmp    c0012b4c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c0012b19:	83 ec 0c             	sub    esp,0xc
c0012b1c:	55                   	push   ebp
c0012b1d:	e8 9a 82 ff ff       	call   c000adbc <File::close()>
c0012b22:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012b25:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012b28:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012b2b:	58                   	pop    eax
c0012b2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b30:	e8 74 4e ff ff       	call   c00079a9 <free>
c0012b35:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b38:	e8 6c 4e ff ff       	call   c00079a9 <free>
c0012b3d:	5a                   	pop    edx
c0012b3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b42:	e8 62 4e ff ff       	call   c00079a9 <free>
c0012b47:	83 c4 10             	add    esp,0x10
c0012b4a:	b0 01                	mov    al,0x1
c0012b4c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0012b52:	5b                   	pop    ebx
c0012b53:	5e                   	pop    esi
c0012b54:	5f                   	pop    edi
c0012b55:	5d                   	pop    ebp
c0012b56:	c3                   	ret    

c0012b57 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0012b57:	56                   	push   esi
c0012b58:	31 d2                	xor    edx,edx
c0012b5a:	53                   	push   ebx
c0012b5b:	8b 1d 80 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023080
c0012b61:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0012b65:	39 d3                	cmp    ebx,edx
c0012b67:	7e 1b                	jle    c0012b84 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0012b69:	8b 04 95 a0 32 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdcd60]
c0012b70:	39 c8                	cmp    eax,ecx
c0012b72:	77 0d                	ja     c0012b81 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0012b74:	8b 34 95 a0 30 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffdcf60]
c0012b7b:	01 c6                	add    esi,eax
c0012b7d:	39 ce                	cmp    esi,ecx
c0012b7f:	77 05                	ja     c0012b86 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0012b81:	42                   	inc    edx
c0012b82:	eb e1                	jmp    c0012b65 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0012b84:	31 c0                	xor    eax,eax
c0012b86:	5b                   	pop    ebx
c0012b87:	5e                   	pop    esi
c0012b88:	c3                   	ret    

c0012b89 <Thr::getDriverNameFromAddress(unsigned long)>:
c0012b89:	53                   	push   ebx
c0012b8a:	31 c0                	xor    eax,eax
c0012b8c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0012b90:	8b 1d 80 30 02 c0    	mov    ebx,DWORD PTR ds:0xc0023080
c0012b96:	39 c3                	cmp    ebx,eax
c0012b98:	7e 22                	jle    c0012bbc <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c0012b9a:	8b 14 85 a0 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd60]
c0012ba1:	39 ca                	cmp    edx,ecx
c0012ba3:	77 14                	ja     c0012bb9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012ba5:	03 14 85 a0 30 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffdcf60]
c0012bac:	39 ca                	cmp    edx,ecx
c0012bae:	76 09                	jbe    c0012bb9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c0012bb0:	8b 04 85 a0 34 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcb60]
c0012bb7:	eb 05                	jmp    c0012bbe <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c0012bb9:	40                   	inc    eax
c0012bba:	eb da                	jmp    c0012b96 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c0012bbc:	31 c0                	xor    eax,eax
c0012bbe:	5b                   	pop    ebx
c0012bbf:	c3                   	ret    

c0012bc0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c0012bc0:	53                   	push   ebx
c0012bc1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012bc5:	53                   	push   ebx
c0012bc6:	e8 8c ff ff ff       	call   c0012b57 <Thr::getDriverBaseFromAddress(unsigned long)>
c0012bcb:	5a                   	pop    edx
c0012bcc:	31 d2                	xor    edx,edx
c0012bce:	85 c0                	test   eax,eax
c0012bd0:	74 04                	je     c0012bd6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c0012bd2:	89 da                	mov    edx,ebx
c0012bd4:	29 c2                	sub    edx,eax
c0012bd6:	89 d0                	mov    eax,edx
c0012bd8:	5b                   	pop    ebx
c0012bd9:	c3                   	ret    

c0012bda <Thr::loadDLL(char const*, bool)>:
c0012bda:	55                   	push   ebp
c0012bdb:	57                   	push   edi
c0012bdc:	56                   	push   esi
c0012bdd:	53                   	push   ebx
c0012bde:	81 ec 34 01 00 00    	sub    esp,0x134
c0012be4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c0012beb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c0012bf2:	56                   	push   esi
c0012bf3:	68 13 e4 01 c0       	push   0xc001e413
c0012bf8:	e8 2b 7b ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0012bfd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012c04:	e8 90 4d ff ff       	call   c0007999 <malloc>
c0012c09:	83 c4 0c             	add    esp,0xc
c0012c0c:	89 c3                	mov    ebx,eax
c0012c0e:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c0012c14:	56                   	push   esi
c0012c15:	50                   	push   eax
c0012c16:	e8 83 80 ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c0012c1b:	83 c4 10             	add    esp,0x10
c0012c1e:	85 db                	test   ebx,ebx
c0012c20:	75 3c                	jne    c0012c5e <Thr::loadDLL(char const*, bool)+0x84>
c0012c22:	89 f8                	mov    eax,edi
c0012c24:	84 c0                	test   al,al
c0012c26:	0f 84 d2 01 00 00    	je     c0012dfe <Thr::loadDLL(char const*, bool)+0x224>
c0012c2c:	55                   	push   ebp
c0012c2d:	55                   	push   ebp
c0012c2e:	68 24 e4 01 c0       	push   0xc001e424
c0012c33:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0012c37:	55                   	push   ebp
c0012c38:	e8 e3 d9 fe ff       	call   c0000620 <strcpy>
c0012c3d:	58                   	pop    eax
c0012c3e:	5a                   	pop    edx
c0012c3f:	56                   	push   esi
c0012c40:	55                   	push   ebp
c0012c41:	e8 9a db fe ff       	call   c00007e0 <strcat>
c0012c46:	59                   	pop    ecx
c0012c47:	58                   	pop    eax
c0012c48:	68 37 e4 01 c0       	push   0xc001e437
c0012c4d:	55                   	push   ebp
c0012c4e:	e8 8d db fe ff       	call   c00007e0 <strcat>
c0012c53:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012c56:	e8 1c d6 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0012c5b:	83 c4 10             	add    esp,0x10
c0012c5e:	51                   	push   ecx
c0012c5f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0012c63:	50                   	push   eax
c0012c64:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012c68:	50                   	push   eax
c0012c69:	53                   	push   ebx
c0012c6a:	e8 9b 83 ff ff       	call   c000b00a <File::stat(unsigned long long*, bool*)>
c0012c6f:	83 c4 10             	add    esp,0x10
c0012c72:	85 db                	test   ebx,ebx
c0012c74:	74 0c                	je     c0012c82 <Thr::loadDLL(char const*, bool)+0xa8>
c0012c76:	83 ec 0c             	sub    esp,0xc
c0012c79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012c7b:	53                   	push   ebx
c0012c7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0012c7f:	83 c4 10             	add    esp,0x10
c0012c82:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0012c87:	75 0a                	jne    c0012c93 <Thr::loadDLL(char const*, bool)+0xb9>
c0012c89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0012c8d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0012c91:	75 3c                	jne    c0012ccf <Thr::loadDLL(char const*, bool)+0xf5>
c0012c93:	89 f8                	mov    eax,edi
c0012c95:	84 c0                	test   al,al
c0012c97:	0f 84 49 01 00 00    	je     c0012de6 <Thr::loadDLL(char const*, bool)+0x20c>
c0012c9d:	51                   	push   ecx
c0012c9e:	51                   	push   ecx
c0012c9f:	68 24 e4 01 c0       	push   0xc001e424
c0012ca4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c0012ca8:	53                   	push   ebx
c0012ca9:	e8 72 d9 fe ff       	call   c0000620 <strcpy>
c0012cae:	5d                   	pop    ebp
c0012caf:	58                   	pop    eax
c0012cb0:	56                   	push   esi
c0012cb1:	53                   	push   ebx
c0012cb2:	e8 29 db fe ff       	call   c00007e0 <strcat>
c0012cb7:	58                   	pop    eax
c0012cb8:	5a                   	pop    edx
c0012cb9:	68 37 e4 01 c0       	push   0xc001e437
c0012cbe:	53                   	push   ebx
c0012cbf:	e8 1c db fe ff       	call   c00007e0 <strcat>
c0012cc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012cc7:	e8 ab d5 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0012ccc:	83 c4 10             	add    esp,0x10
c0012ccf:	52                   	push   edx
c0012cd0:	6a 03                	push   0x3
c0012cd2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012cd6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0012cda:	05 ff 0f 00 00       	add    eax,0xfff
c0012cdf:	83 d2 00             	adc    edx,0x0
c0012ce2:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012ce6:	50                   	push   eax
c0012ce7:	ff 35 70 04 02 c0    	push   DWORD PTR ds:0xc0020470
c0012ced:	e8 7c 6f ff ff       	call   c0009c6e <VAS::allocatePages(int, int)>
c0012cf2:	59                   	pop    ecx
c0012cf3:	89 c3                	mov    ebx,eax
c0012cf5:	5d                   	pop    ebp
c0012cf6:	50                   	push   eax
c0012cf7:	68 1e d2 01 c0       	push   0xc001d21e
c0012cfc:	e8 27 7a ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0012d01:	89 34 24             	mov    DWORD PTR [esp],esi
c0012d04:	e8 57 d8 fe ff       	call   c0000560 <strlen>
c0012d09:	8b 2d 80 30 02 c0    	mov    ebp,DWORD PTR ds:0xc0023080
c0012d0f:	40                   	inc    eax
c0012d10:	89 04 24             	mov    DWORD PTR [esp],eax
c0012d13:	e8 81 4c ff ff       	call   c0007999 <malloc>
c0012d18:	89 04 ad a0 34 02 c0 	mov    DWORD PTR [ebp*4-0x3ffdcb60],eax
c0012d1f:	58                   	pop    eax
c0012d20:	a1 80 30 02 c0       	mov    eax,ds:0xc0023080
c0012d25:	5a                   	pop    edx
c0012d26:	56                   	push   esi
c0012d27:	ff 34 85 a0 34 02 c0 	push   DWORD PTR [eax*4-0x3ffdcb60]
c0012d2e:	e8 ed d8 fe ff       	call   c0000620 <strcpy>
c0012d33:	a1 80 30 02 c0       	mov    eax,ds:0xc0023080
c0012d38:	8d 50 01             	lea    edx,[eax+0x1]
c0012d3b:	89 1c 85 a0 32 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcd60],ebx
c0012d42:	89 15 80 30 02 c0    	mov    DWORD PTR ds:0xc0023080,edx
c0012d48:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0012d4c:	83 c4 0c             	add    esp,0xc
c0012d4f:	89 14 85 a0 30 02 c0 	mov    DWORD PTR [eax*4-0x3ffdcf60],edx
c0012d56:	6a 01                	push   0x1
c0012d58:	53                   	push   ebx
c0012d59:	56                   	push   esi
c0012d5a:	e8 c2 f6 ff ff       	call   c0012421 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c0012d5f:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0012d63:	83 c4 10             	add    esp,0x10
c0012d66:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012d6b:	0f 85 89 00 00 00    	jne    c0012dfa <Thr::loadDLL(char const*, bool)+0x220>
c0012d71:	89 f8                	mov    eax,edi
c0012d73:	84 c0                	test   al,al
c0012d75:	74 73                	je     c0012dea <Thr::loadDLL(char const*, bool)+0x210>
c0012d77:	83 ec 0c             	sub    esp,0xc
c0012d7a:	68 39 e4 01 c0       	push   0xc001e439
c0012d7f:	e8 f3 d4 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0012d84:	83 c4 10             	add    esp,0x10
c0012d87:	eb 61                	jmp    c0012dea <Thr::loadDLL(char const*, bool)+0x210>
c0012d89:	50                   	push   eax
c0012d8a:	50                   	push   eax
c0012d8b:	89 e8                	mov    eax,ebp
c0012d8d:	c1 e0 0c             	shl    eax,0xc
c0012d90:	01 d8                	add    eax,ebx
c0012d92:	50                   	push   eax
c0012d93:	ff 35 70 04 02 c0    	push   DWORD PTR ds:0xc0020470
c0012d99:	e8 48 6a ff ff       	call   c00097e6 <VAS::getPageTableEntry(unsigned long)>
c0012d9e:	83 c4 10             	add    esp,0x10
c0012da1:	8b 00                	mov    eax,DWORD PTR [eax]
c0012da3:	a8 60                	test   al,0x60
c0012da5:	75 11                	jne    c0012db8 <Thr::loadDLL(char const*, bool)+0x1de>
c0012da7:	83 ec 0c             	sub    esp,0xc
c0012daa:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012daf:	50                   	push   eax
c0012db0:	e8 4f 4f ff ff       	call   c0007d04 <Phys::freePage(unsigned long)>
c0012db5:	83 c4 10             	add    esp,0x10
c0012db8:	45                   	inc    ebp
c0012db9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012dbd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012dc1:	05 ff 0f 00 00       	add    eax,0xfff
c0012dc6:	bf 00 00 00 00       	mov    edi,0x0
c0012dcb:	83 d2 00             	adc    edx,0x0
c0012dce:	0f ac d0 0c          	shrd   eax,edx,0xc
c0012dd2:	c1 ea 0c             	shr    edx,0xc
c0012dd5:	39 c5                	cmp    ebp,eax
c0012dd7:	89 d1                	mov    ecx,edx
c0012dd9:	89 f8                	mov    eax,edi
c0012ddb:	19 c8                	sbb    eax,ecx
c0012ddd:	72 aa                	jb     c0012d89 <Thr::loadDLL(char const*, bool)+0x1af>
c0012ddf:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012de4:	75 18                	jne    c0012dfe <Thr::loadDLL(char const*, bool)+0x224>
c0012de6:	31 db                	xor    ebx,ebx
c0012de8:	eb 14                	jmp    c0012dfe <Thr::loadDLL(char const*, bool)+0x224>
c0012dea:	83 ec 0c             	sub    esp,0xc
c0012ded:	68 58 e4 01 c0       	push   0xc001e458
c0012df2:	e8 80 d4 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0012df7:	83 c4 10             	add    esp,0x10
c0012dfa:	31 ed                	xor    ebp,ebp
c0012dfc:	eb bb                	jmp    c0012db9 <Thr::loadDLL(char const*, bool)+0x1df>
c0012dfe:	81 c4 2c 01 00 00    	add    esp,0x12c
c0012e04:	89 d8                	mov    eax,ebx
c0012e06:	5b                   	pop    ebx
c0012e07:	5e                   	pop    esi
c0012e08:	5f                   	pop    edi
c0012e09:	5d                   	pop    ebp
c0012e0a:	c3                   	ret    

c0012e0b <Thr::executeDLL(unsigned long, void*)>:
c0012e0b:	56                   	push   esi
c0012e0c:	53                   	push   ebx
c0012e0d:	52                   	push   edx
c0012e0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012e12:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0012e16:	85 db                	test   ebx,ebx
c0012e18:	75 10                	jne    c0012e2a <Thr::executeDLL(unsigned long, void*)+0x1f>
c0012e1a:	83 ec 0c             	sub    esp,0xc
c0012e1d:	68 74 e4 01 c0       	push   0xc001e474
c0012e22:	e8 50 d4 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0012e27:	83 c4 10             	add    esp,0x10
c0012e2a:	50                   	push   eax
c0012e2b:	50                   	push   eax
c0012e2c:	53                   	push   ebx
c0012e2d:	68 9e e4 01 c0       	push   0xc001e49e
c0012e32:	e8 f1 78 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0012e37:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0012e3b:	89 d8                	mov    eax,ebx
c0012e3d:	83 c4 14             	add    esp,0x14
c0012e40:	5b                   	pop    ebx
c0012e41:	5e                   	pop    esi
c0012e42:	ff e0                	jmp    eax

c0012e44 <userModeEntryPoint(void*)>:
c0012e44:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0012e49:	48                   	dec    eax
c0012e4a:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0012e4f:	75 03                	jne    c0012e54 <userModeEntryPoint(void*)+0x10>
c0012e51:	fb                   	sti    
c0012e52:	66 90                	xchg   ax,ax
c0012e54:	fb                   	sti    
c0012e55:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e5a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012e5d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0012e63:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e67:	e9 f3 d3 fe ff       	jmp    c000025f <goToUsermode>

c0012e6c <changeTSS>:
c0012e6c:	83 ec 14             	sub    esp,0x14
c0012e6f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012e74:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0012e77:	b8 00 00 e8 01       	mov    eax,0x1e80000
c0012e7c:	c1 e2 15             	shl    edx,0x15
c0012e7f:	29 d0                	sub    eax,edx
c0012e81:	50                   	push   eax
c0012e82:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0012e87:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012e8d:	05 7c 11 00 00       	add    eax,0x117c
c0012e92:	50                   	push   eax
c0012e93:	e8 90 5f ff ff       	call   c0008e28 <TSS::setESP(unsigned long)>
c0012e98:	83 c4 1c             	add    esp,0x1c
c0012e9b:	c3                   	ret    

c0012e9c <switchToThread(ThreadControlBlock*)>:
c0012e9c:	57                   	push   edi
c0012e9d:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0012ea2:	56                   	push   esi
c0012ea3:	85 c0                	test   eax,eax
c0012ea5:	53                   	push   ebx
c0012ea6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012eaa:	0f 85 90 00 00 00    	jne    c0012f40 <switchToThread(ThreadControlBlock*)+0xa4>
c0012eb0:	8a 53 40             	mov    dl,BYTE PTR [ebx+0x40]
c0012eb3:	80 fa ff             	cmp    dl,0xff
c0012eb6:	0f 84 80 00 00 00    	je     c0012f3c <switchToThread(ThreadControlBlock*)+0xa0>
c0012ebc:	81 e2 ff 00 00 00    	and    edx,0xff
c0012ec2:	b8 00 04 00 00       	mov    eax,0x400
c0012ec7:	29 d0                	sub    eax,edx
c0012ec9:	d1 f8                	sar    eax,1
c0012ecb:	03 43 34             	add    eax,DWORD PTR [ebx+0x34]
c0012ece:	66 90                	xchg   ax,ax
c0012ed0:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0012ed3:	e8 7b 24 00 00       	call   c0015353 <HalQueryPerformanceCounter()>
c0012ed8:	a3 88 38 02 c0       	mov    ds:0xc0023888,eax
c0012edd:	89 15 8c 38 02 c0    	mov    DWORD PTR ds:0xc002388c,edx
c0012ee3:	89 c6                	mov    esi,eax
c0012ee5:	89 d7                	mov    edi,edx
c0012ee7:	2b 35 78 38 02 c0    	sub    esi,DWORD PTR ds:0xc0023878
c0012eed:	a3 78 38 02 c0       	mov    ds:0xc0023878,eax
c0012ef2:	1b 3d 7c 38 02 c0    	sbb    edi,DWORD PTR ds:0xc002387c
c0012ef8:	89 35 80 38 02 c0    	mov    DWORD PTR ds:0xc0023880,esi
c0012efe:	89 3d 84 38 02 c0    	mov    DWORD PTR ds:0xc0023884,edi
c0012f04:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0012f0a:	89 15 7c 38 02 c0    	mov    DWORD PTR ds:0xc002387c,edx
c0012f10:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c0012f13:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0012f16:	01 c6                	add    esi,eax
c0012f18:	11 d7                	adc    edi,edx
c0012f1a:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0012f1d:	83 ec 0c             	sub    esp,0xc
c0012f20:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c0012f23:	53                   	push   ebx
c0012f24:	e8 6e d3 fe ff       	call   c0000297 <switchToThreadASM>
c0012f29:	0f 20 c0             	mov    eax,cr0
c0012f2c:	83 c8 08             	or     eax,0x8
c0012f2f:	0f 22 c0             	mov    cr0,eax
c0012f32:	83 c4 10             	add    esp,0x10
c0012f35:	5b                   	pop    ebx
c0012f36:	5e                   	pop    esi
c0012f37:	5f                   	pop    edi
c0012f38:	c3                   	ret    
c0012f39:	8d 76 00             	lea    esi,[esi+0x0]
c0012f3c:	31 c0                	xor    eax,eax
c0012f3e:	eb 90                	jmp    c0012ed0 <switchToThread(ThreadControlBlock*)+0x34>
c0012f40:	5b                   	pop    ebx
c0012f41:	c7 05 40 38 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x1
c0012f4b:	5e                   	pop    esi
c0012f4c:	5f                   	pop    edi
c0012f4d:	c3                   	ret    
c0012f4e:	66 90                	xchg   ax,ax

c0012f50 <Process::addArgs(char**)>:
c0012f50:	57                   	push   edi
c0012f51:	56                   	push   esi
c0012f52:	53                   	push   ebx
c0012f53:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012f57:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012f5b:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0012f65:	85 ff                	test   edi,edi
c0012f67:	74 43                	je     c0012fac <Process::addArgs(char**)+0x5c>
c0012f69:	8b 07                	mov    eax,DWORD PTR [edi]
c0012f6b:	85 c0                	test   eax,eax
c0012f6d:	74 3d                	je     c0012fac <Process::addArgs(char**)+0x5c>
c0012f6f:	31 db                	xor    ebx,ebx
c0012f71:	8d 76 00             	lea    esi,[esi+0x0]
c0012f74:	83 ec 0c             	sub    esp,0xc
c0012f77:	50                   	push   eax
c0012f78:	e8 e3 d5 fe ff       	call   c0000560 <strlen>
c0012f7d:	40                   	inc    eax
c0012f7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f81:	e8 13 4a ff ff       	call   c0007999 <malloc>
c0012f86:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c0012f8d:	5a                   	pop    edx
c0012f8e:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0012f91:	59                   	pop    ecx
c0012f92:	43                   	inc    ebx
c0012f93:	52                   	push   edx
c0012f94:	50                   	push   eax
c0012f95:	e8 86 d6 fe ff       	call   c0000620 <strcpy>
c0012f9a:	ff 86 16 05 00 00    	inc    DWORD PTR [esi+0x516]
c0012fa0:	83 c4 10             	add    esp,0x10
c0012fa3:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0012fa6:	85 c0                	test   eax,eax
c0012fa8:	75 ca                	jne    c0012f74 <Process::addArgs(char**)+0x24>
c0012faa:	66 90                	xchg   ax,ax
c0012fac:	5b                   	pop    ebx
c0012fad:	5e                   	pop    esi
c0012fae:	5f                   	pop    edi
c0012faf:	c3                   	ret    

c0012fb0 <Process::Process(char const*, Process*, char**)>:
c0012fb0:	56                   	push   esi
c0012fb1:	53                   	push   ebx
c0012fb2:	83 ec 14             	sub    esp,0x14
c0012fb5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fb9:	05 0c 02 00 00       	add    eax,0x20c
c0012fbe:	bb 07 00 00 00       	mov    ebx,0x7
c0012fc3:	89 c6                	mov    esi,eax
c0012fc5:	8d 76 00             	lea    esi,[esi+0x0]
c0012fc8:	85 db                	test   ebx,ebx
c0012fca:	78 14                	js     c0012fe0 <Process::Process(char const*, Process*, char**)+0x30>
c0012fcc:	83 ec 0c             	sub    esp,0xc
c0012fcf:	56                   	push   esi
c0012fd0:	e8 d7 94 00 00       	call   c001c4ac <ThreadControlBlock::ThreadControlBlock()>
c0012fd5:	83 c4 10             	add    esp,0x10
c0012fd8:	83 c6 5f             	add    esi,0x5f
c0012fdb:	4b                   	dec    ebx
c0012fdc:	eb ea                	jmp    c0012fc8 <Process::Process(char const*, Process*, char**)+0x18>
c0012fde:	66 90                	xchg   ax,ax
c0012fe0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0012fe4:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0012feb:	83 ec 0c             	sub    esp,0xc
c0012fee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0012ff2:	e8 09 d1 ff ff       	call   c0010100 <Krnl::newProcessEnv(Process*)>
c0012ff7:	83 c4 10             	add    esp,0x10
c0012ffa:	89 c2                	mov    edx,eax
c0012ffc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013000:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0013006:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001300a:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0013013:	a1 70 f3 01 c0       	mov    eax,ds:0xc001f370
c0013018:	8d 50 01             	lea    edx,[eax+0x1]
c001301b:	89 15 70 f3 01 c0    	mov    DWORD PTR ds:0xc001f370,edx
c0013021:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013025:	89 02                	mov    DWORD PTR [edx],eax
c0013027:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001302f:	83 ec 0c             	sub    esp,0xc
c0013032:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013036:	e8 5e 49 ff ff       	call   c0007999 <malloc>
c001303b:	83 c4 10             	add    esp,0x10
c001303e:	89 c3                	mov    ebx,eax
c0013040:	83 ec 08             	sub    esp,0x8
c0013043:	6a 00                	push   0x0
c0013045:	53                   	push   ebx
c0013046:	e8 cd 6f ff ff       	call   c000a018 <VAS::VAS(bool)>
c001304b:	83 c4 10             	add    esp,0x10
c001304e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013052:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013058:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001305c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013066:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001306a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001306e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013078:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001307e:	85 c0                	test   eax,eax
c0013080:	74 42                	je     c00130c4 <Process::Process(char const*, Process*, char**)+0x114>
c0013082:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013086:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001308c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013092:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013096:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001309c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00130a6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130b0:	05 0c 01 00 00       	add    eax,0x10c
c00130b5:	83 ec 08             	sub    esp,0x8
c00130b8:	52                   	push   edx
c00130b9:	50                   	push   eax
c00130ba:	e8 61 d5 fe ff       	call   c0000620 <strcpy>
c00130bf:	83 c4 10             	add    esp,0x10
c00130c2:	eb 64                	jmp    c0013128 <Process::Process(char const*, Process*, char**)+0x178>
c00130c4:	c7 44 24 04 34 01 00 00 	mov    DWORD PTR [esp+0x4],0x134
c00130cc:	83 ec 0c             	sub    esp,0xc
c00130cf:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00130d3:	e8 c1 48 ff ff       	call   c0007999 <malloc>
c00130d8:	83 c4 10             	add    esp,0x10
c00130db:	89 c3                	mov    ebx,eax
c00130dd:	83 ec 08             	sub    esp,0x8
c00130e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00130e4:	53                   	push   ebx
c00130e5:	e8 e2 5a ff ff       	call   c0008bcc <VgaText::VgaText(char const*)>
c00130ea:	83 c4 10             	add    esp,0x10
c00130ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130f1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00130f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00130fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013101:	83 ec 0c             	sub    esp,0xc
c0013104:	50                   	push   eax
c0013105:	e8 62 53 ff ff       	call   c000846c <addToTerminalCycle(VgaText*)>
c001310a:	83 c4 10             	add    esp,0x10
c001310d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013111:	05 0c 01 00 00       	add    eax,0x10c
c0013116:	83 ec 08             	sub    esp,0x8
c0013119:	68 bd e4 01 c0       	push   0xc001e4bd
c001311e:	50                   	push   eax
c001311f:	e8 fc d4 fe ff       	call   c0000620 <strcpy>
c0013124:	83 c4 10             	add    esp,0x10
c0013127:	90                   	nop
c0013128:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001312c:	83 c0 0c             	add    eax,0xc
c001312f:	83 ec 08             	sub    esp,0x8
c0013132:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013136:	50                   	push   eax
c0013137:	e8 e4 d4 fe ff       	call   c0000620 <strcpy>
c001313c:	83 c4 10             	add    esp,0x10
c001313f:	83 ec 08             	sub    esp,0x8
c0013142:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013146:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001314a:	e8 01 fe ff ff       	call   c0012f50 <Process::addArgs(char**)>
c001314f:	83 c4 10             	add    esp,0x10
c0013152:	83 ec 08             	sub    esp,0x8
c0013155:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013159:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001315d:	e8 89 ed ff ff       	call   c0011eeb <Thr::loadProgramIntoMemory(Process*, char const*)>
c0013162:	83 c4 10             	add    esp,0x10
c0013165:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0013169:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001316d:	83 f0 01             	xor    eax,0x1
c0013170:	88 c2                	mov    dl,al
c0013172:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013176:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c001317c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0013180:	25 ff 00 00 00       	and    eax,0xff
c0013185:	83 ec 08             	sub    esp,0x8
c0013188:	50                   	push   eax
c0013189:	68 14 e5 01 c0       	push   0xc001e514
c001318e:	e8 95 75 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0013193:	83 c4 10             	add    esp,0x10
c0013196:	90                   	nop
c0013197:	83 c4 14             	add    esp,0x14
c001319a:	5b                   	pop    ebx
c001319b:	5e                   	pop    esi
c001319c:	c3                   	ret    
c001319d:	90                   	nop
c001319e:	66 90                	xchg   ax,ax

c00131a0 <Process::Process(bool, char const*, Process*, char**)>:
c00131a0:	56                   	push   esi
c00131a1:	53                   	push   ebx
c00131a2:	83 ec 24             	sub    esp,0x24
c00131a5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00131a9:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00131ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131b1:	05 0c 02 00 00       	add    eax,0x20c
c00131b6:	bb 07 00 00 00       	mov    ebx,0x7
c00131bb:	89 c6                	mov    esi,eax
c00131bd:	8d 76 00             	lea    esi,[esi+0x0]
c00131c0:	85 db                	test   ebx,ebx
c00131c2:	78 14                	js     c00131d8 <Process::Process(bool, char const*, Process*, char**)+0x38>
c00131c4:	83 ec 0c             	sub    esp,0xc
c00131c7:	56                   	push   esi
c00131c8:	e8 df 92 00 00       	call   c001c4ac <ThreadControlBlock::ThreadControlBlock()>
c00131cd:	83 c4 10             	add    esp,0x10
c00131d0:	83 c6 5f             	add    esi,0x5f
c00131d3:	4b                   	dec    ebx
c00131d4:	eb ea                	jmp    c00131c0 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00131d6:	66 90                	xchg   ax,ax
c00131d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131dc:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00131e3:	83 ec 0c             	sub    esp,0xc
c00131e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00131ea:	e8 11 cf ff ff       	call   c0010100 <Krnl::newProcessEnv(Process*)>
c00131ef:	83 c4 10             	add    esp,0x10
c00131f2:	89 c2                	mov    edx,eax
c00131f4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00131f8:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c00131fe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013202:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001320b:	a1 70 f3 01 c0       	mov    eax,ds:0xc001f370
c0013210:	8d 50 01             	lea    edx,[eax+0x1]
c0013213:	89 15 70 f3 01 c0    	mov    DWORD PTR ds:0xc001f370,edx
c0013219:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001321d:	89 02                	mov    DWORD PTR [edx],eax
c001321f:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0013227:	83 ec 0c             	sub    esp,0xc
c001322a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001322e:	e8 66 47 ff ff       	call   c0007999 <malloc>
c0013233:	83 c4 10             	add    esp,0x10
c0013236:	89 c3                	mov    ebx,eax
c0013238:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c001323c:	25 ff 00 00 00       	and    eax,0xff
c0013241:	83 ec 08             	sub    esp,0x8
c0013244:	50                   	push   eax
c0013245:	53                   	push   ebx
c0013246:	e8 cd 6d ff ff       	call   c000a018 <VAS::VAS(bool)>
c001324b:	83 c4 10             	add    esp,0x10
c001324e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013252:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0013258:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001325c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013266:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001326a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001326e:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0013274:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013278:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001327e:	85 c0                	test   eax,eax
c0013280:	74 42                	je     c00132c4 <Process::Process(bool, char const*, Process*, char**)+0x124>
c0013282:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013286:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c001328c:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013292:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013296:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c001329c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132a0:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00132a6:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00132ac:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132b0:	05 0c 01 00 00       	add    eax,0x10c
c00132b5:	83 ec 08             	sub    esp,0x8
c00132b8:	52                   	push   edx
c00132b9:	50                   	push   eax
c00132ba:	e8 61 d3 fe ff       	call   c0000620 <strcpy>
c00132bf:	83 c4 10             	add    esp,0x10
c00132c2:	eb 64                	jmp    c0013328 <Process::Process(bool, char const*, Process*, char**)+0x188>
c00132c4:	c7 44 24 18 34 01 00 00 	mov    DWORD PTR [esp+0x18],0x134
c00132cc:	83 ec 0c             	sub    esp,0xc
c00132cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00132d3:	e8 c1 46 ff ff       	call   c0007999 <malloc>
c00132d8:	83 c4 10             	add    esp,0x10
c00132db:	89 c3                	mov    ebx,eax
c00132dd:	83 ec 08             	sub    esp,0x8
c00132e0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00132e4:	53                   	push   ebx
c00132e5:	e8 e2 58 ff ff       	call   c0008bcc <VgaText::VgaText(char const*)>
c00132ea:	83 c4 10             	add    esp,0x10
c00132ed:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132f1:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c00132f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00132fb:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013301:	83 ec 0c             	sub    esp,0xc
c0013304:	50                   	push   eax
c0013305:	e8 62 51 ff ff       	call   c000846c <addToTerminalCycle(VgaText*)>
c001330a:	83 c4 10             	add    esp,0x10
c001330d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0013311:	05 0c 01 00 00       	add    eax,0x10c
c0013316:	83 ec 08             	sub    esp,0x8
c0013319:	68 bd e4 01 c0       	push   0xc001e4bd
c001331e:	50                   	push   eax
c001331f:	e8 fc d2 fe ff       	call   c0000620 <strcpy>
c0013324:	83 c4 10             	add    esp,0x10
c0013327:	90                   	nop
c0013328:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001332c:	83 c0 0c             	add    eax,0xc
c001332f:	83 ec 08             	sub    esp,0x8
c0013332:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0013336:	50                   	push   eax
c0013337:	e8 e4 d2 fe ff       	call   c0000620 <strcpy>
c001333c:	83 c4 10             	add    esp,0x10
c001333f:	83 ec 08             	sub    esp,0x8
c0013342:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0013346:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001334a:	e8 01 fc ff ff       	call   c0012f50 <Process::addArgs(char**)>
c001334f:	83 c4 10             	add    esp,0x10
c0013352:	90                   	nop
c0013353:	83 c4 24             	add    esp,0x24
c0013356:	5b                   	pop    ebx
c0013357:	5e                   	pop    esi
c0013358:	c3                   	ret    
c0013359:	8d 76 00             	lea    esi,[esi+0x0]

c001335c <taskStartupFunction>:
c001335c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013361:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c0013364:	c3                   	ret    
c0013365:	90                   	nop
c0013366:	66 90                	xchg   ax,ax

c0013368 <Semaphore::Semaphore(int)>:
c0013368:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001336c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0013370:	89 10                	mov    DWORD PTR [eax],edx
c0013372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013376:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001337d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013381:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013388:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001338c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0013393:	90                   	nop
c0013394:	c3                   	ret    
c0013395:	90                   	nop
c0013396:	66 90                	xchg   ax,ax

c0013398 <Mutex::Mutex()>:
c0013398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001339c:	6a 01                	push   0x1
c001339e:	50                   	push   eax
c001339f:	e8 c4 ff ff ff       	call   c0013368 <Semaphore::Semaphore(int)>
c00133a4:	83 c4 08             	add    esp,0x8
c00133a7:	90                   	nop
c00133a8:	c3                   	ret    
c00133a9:	90                   	nop
c00133aa:	66 90                	xchg   ax,ax

c00133ac <Process::createThread(void (*)(void*), void*, int)>:
c00133ac:	57                   	push   edi
c00133ad:	31 c9                	xor    ecx,ecx
c00133af:	56                   	push   esi
c00133b0:	53                   	push   ebx
c00133b1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00133b5:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00133bc:	89 f2                	mov    edx,esi
c00133be:	66 90                	xchg   ax,ax
c00133c0:	31 c0                	xor    eax,eax
c00133c2:	66 89 d0             	mov    ax,dx
c00133c5:	83 e2 01             	and    edx,0x1
c00133c8:	74 12                	je     c00133dc <Process::createThread(void (*)(void*), void*, int)+0x30>
c00133ca:	d1 f8                	sar    eax,1
c00133cc:	41                   	inc    ecx
c00133cd:	89 c2                	mov    edx,eax
c00133cf:	83 f9 10             	cmp    ecx,0x10
c00133d2:	75 ec                	jne    c00133c0 <Process::createThread(void (*)(void*), void*, int)+0x14>
c00133d4:	31 db                	xor    ebx,ebx
c00133d6:	89 d8                	mov    eax,ebx
c00133d8:	5b                   	pop    ebx
c00133d9:	5e                   	pop    esi
c00133da:	5f                   	pop    edi
c00133db:	c3                   	ret    
c00133dc:	b8 01 00 00 00       	mov    eax,0x1
c00133e1:	d3 e0                	shl    eax,cl
c00133e3:	09 c6                	or     esi,eax
c00133e5:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c00133e8:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c00133ef:	01 c0                	add    eax,eax
c00133f1:	01 c8                	add    eax,ecx
c00133f3:	8d 04 80             	lea    eax,[eax+eax*4]
c00133f6:	01 d8                	add    eax,ebx
c00133f8:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c00133ff:	75 0b                	jne    c001340c <Process::createThread(void (*)(void*), void*, int)+0x60>
c0013401:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c001340b:	90                   	nop
c001340c:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013412:	83 ec 08             	sub    esp,0x8
c0013415:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0013418:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c001341b:	01 c0                	add    eax,eax
c001341d:	01 c8                	add    eax,ecx
c001341f:	8d 3c 80             	lea    edi,[eax+eax*4]
c0013422:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0013425:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001342b:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0013431:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013435:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c001343b:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c0013441:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c0013448:	89 ca                	mov    edx,ecx
c001344a:	f7 da                	neg    edx
c001344c:	c1 e2 15             	shl    edx,0x15
c001344f:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0013455:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001345b:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001345f:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c0013469:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c001346f:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013473:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c0013479:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c0013483:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001348d:	53                   	push   ebx
c001348e:	68 64 38 02 c0       	push   0xc0023864
c0013493:	e8 b4 8d 00 00       	call   c001c24c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013498:	83 c4 10             	add    esp,0x10
c001349b:	89 d8                	mov    eax,ebx
c001349d:	5b                   	pop    ebx
c001349e:	5e                   	pop    esi
c001349f:	5f                   	pop    edi
c00134a0:	c3                   	ret    
c00134a1:	90                   	nop
c00134a2:	66 90                	xchg   ax,ax

c00134a4 <Process::createUserThread()>:
c00134a4:	83 ec 0c             	sub    esp,0xc
c00134a7:	68 80 00 00 00       	push   0x80
c00134ac:	6a 00                	push   0x0
c00134ae:	68 44 2e 01 c0       	push   0xc0012e44
c00134b3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00134b7:	50                   	push   eax
c00134b8:	e8 ef fe ff ff       	call   c00133ac <Process::createThread(void (*)(void*), void*, int)>
c00134bd:	83 c4 1c             	add    esp,0x1c
c00134c0:	c3                   	ret    
c00134c1:	8d 76 00             	lea    esi,[esi+0x0]

c00134c4 <setupMultitasking(void (*)())>:
c00134c4:	56                   	push   esi
c00134c5:	53                   	push   ebx
c00134c6:	53                   	push   ebx
c00134c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134cb:	eb 13                	jmp    c00134e0 <setupMultitasking(void (*)())+0x1c>
c00134cd:	8d 76 00             	lea    esi,[esi+0x0]
c00134d0:	83 ec 0c             	sub    esp,0xc
c00134d3:	68 64 38 02 c0       	push   0xc0023864
c00134d8:	e8 b7 8c 00 00       	call   c001c194 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00134dd:	83 c4 10             	add    esp,0x10
c00134e0:	83 ec 0c             	sub    esp,0xc
c00134e3:	68 64 38 02 c0       	push   0xc0023864
c00134e8:	e8 83 8c 00 00       	call   c001c170 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00134ed:	83 c4 10             	add    esp,0x10
c00134f0:	84 c0                	test   al,al
c00134f2:	74 dc                	je     c00134d0 <setupMultitasking(void (*)())+0xc>
c00134f4:	83 ec 0c             	sub    esp,0xc
c00134f7:	68 1f 07 00 00       	push   0x71f
c00134fc:	e8 98 44 ff ff       	call   c0007999 <malloc>
c0013501:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0013508:	89 c3                	mov    ebx,eax
c001350a:	6a 00                	push   0x0
c001350c:	68 c1 e4 01 c0       	push   0xc001e4c1
c0013511:	6a 01                	push   0x1
c0013513:	50                   	push   eax
c0013514:	e8 87 fc ff ff       	call   c00131a0 <Process::Process(bool, char const*, Process*, char**)>
c0013519:	83 c4 14             	add    esp,0x14
c001351c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0013522:	89 1d 70 38 02 c0    	mov    DWORD PTR ds:0xc0023870,ebx
c0013528:	50                   	push   eax
c0013529:	e8 9b 51 ff ff       	call   c00086c9 <setActiveTerminal(VgaText*)>
c001352e:	66 83 8b 04 05 00 00 01 	or     WORD PTR [ebx+0x504],0x1
c0013536:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0013540:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0013546:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0013549:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0013553:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0013559:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c001355f:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0013569:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0013573:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001357d:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0013583:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0013589:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0013593:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0013599:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c00135a3:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c00135a9:	5a                   	pop    edx
c00135aa:	59                   	pop    ecx
c00135ab:	68 bd e4 01 c0       	push   0xc001e4bd
c00135b0:	50                   	push   eax
c00135b1:	e8 6a d0 fe ff       	call   c0000620 <strcpy>
c00135b6:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c00135bd:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c00135c1:	83 c4 14             	add    esp,0x14
c00135c4:	5b                   	pop    ebx
c00135c5:	5e                   	pop    esi
c00135c6:	e9 be cc fe ff       	jmp    c0000289 <switchToThreadASMFirstTime>
c00135cb:	90                   	nop

c00135cc <schedule()>:
c00135cc:	8b 15 44 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023844
c00135d2:	85 d2                	test   edx,edx
c00135d4:	74 0e                	je     c00135e4 <schedule()+0x18>
c00135d6:	c7 05 40 38 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x1
c00135e0:	c3                   	ret    
c00135e1:	8d 76 00             	lea    esi,[esi+0x0]
c00135e4:	53                   	push   ebx
c00135e5:	83 ec 14             	sub    esp,0x14
c00135e8:	68 64 38 02 c0       	push   0xc0023864
c00135ed:	e8 7e 8b 00 00       	call   c001c170 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00135f2:	83 c4 10             	add    esp,0x10
c00135f5:	84 c0                	test   al,al
c00135f7:	75 3b                	jne    c0013634 <schedule()+0x68>
c00135f9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00135fe:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0013601:	4a                   	dec    edx
c0013602:	74 38                	je     c001363c <schedule()+0x70>
c0013604:	83 ec 0c             	sub    esp,0xc
c0013607:	68 64 38 02 c0       	push   0xc0023864
c001360c:	e8 7b 8b 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013611:	c7 04 24 64 38 02 c0 	mov    DWORD PTR [esp],0xc0023864
c0013618:	89 c3                	mov    ebx,eax
c001361a:	e8 75 8b 00 00       	call   c001c194 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001361f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0013626:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013629:	e8 6e f8 ff ff       	call   c0012e9c <switchToThread(ThreadControlBlock*)>
c001362e:	83 c4 10             	add    esp,0x10
c0013631:	8d 76 00             	lea    esi,[esi+0x0]
c0013634:	83 c4 08             	add    esp,0x8
c0013637:	5b                   	pop    ebx
c0013638:	c3                   	ret    
c0013639:	8d 76 00             	lea    esi,[esi+0x0]
c001363c:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0013643:	83 ec 08             	sub    esp,0x8
c0013646:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001364b:	50                   	push   eax
c001364c:	68 64 38 02 c0       	push   0xc0023864
c0013651:	e8 f6 8b 00 00       	call   c001c24c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013656:	83 c4 10             	add    esp,0x10
c0013659:	eb a9                	jmp    c0013604 <schedule()+0x38>
c001365b:	90                   	nop

c001365c <Semaphore::tryAcquire()>:
c001365c:	53                   	push   ebx
c001365d:	83 ec 08             	sub    esp,0x8
c0013660:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013664:	fa                   	cli    
c0013665:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c001366a:	8d 50 01             	lea    edx,[eax+0x1]
c001366d:	89 15 48 38 02 c0    	mov    DWORD PTR ds:0xc0023848,edx
c0013673:	8b 15 44 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023844
c0013679:	8d 5a 01             	lea    ebx,[edx+0x1]
c001367c:	89 1d 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,ebx
c0013682:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0013685:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0013687:	7c 33                	jl     c00136bc <Semaphore::tryAcquire()+0x60>
c0013689:	89 15 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,edx
c001368f:	85 d2                	test   edx,edx
c0013691:	75 0d                	jne    c00136a0 <Semaphore::tryAcquire()+0x44>
c0013693:	8b 15 40 38 02 c0    	mov    edx,DWORD PTR ds:0xc0023840
c0013699:	85 d2                	test   edx,edx
c001369b:	75 6b                	jne    c0013708 <Semaphore::tryAcquire()+0xac>
c001369d:	8d 76 00             	lea    esi,[esi+0x0]
c00136a0:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00136a5:	85 c0                	test   eax,eax
c00136a7:	74 0b                	je     c00136b4 <Semaphore::tryAcquire()+0x58>
c00136a9:	8d 76 00             	lea    esi,[esi+0x0]
c00136ac:	31 c0                	xor    eax,eax
c00136ae:	83 c4 08             	add    esp,0x8
c00136b1:	5b                   	pop    ebx
c00136b2:	c3                   	ret    
c00136b3:	90                   	nop
c00136b4:	fb                   	sti    
c00136b5:	83 c4 08             	add    esp,0x8
c00136b8:	5b                   	pop    ebx
c00136b9:	c3                   	ret    
c00136ba:	66 90                	xchg   ax,ax
c00136bc:	43                   	inc    ebx
c00136bd:	89 15 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,edx
c00136c3:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c00136c6:	85 d2                	test   edx,edx
c00136c8:	75 22                	jne    c00136ec <Semaphore::tryAcquire()+0x90>
c00136ca:	8b 0d 40 38 02 c0    	mov    ecx,DWORD PTR ds:0xc0023840
c00136d0:	85 c9                	test   ecx,ecx
c00136d2:	74 18                	je     c00136ec <Semaphore::tryAcquire()+0x90>
c00136d4:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c00136de:	e8 e9 fe ff ff       	call   c00135cc <schedule()>
c00136e3:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00136e8:	48                   	dec    eax
c00136e9:	8d 76 00             	lea    esi,[esi+0x0]
c00136ec:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00136f1:	85 c0                	test   eax,eax
c00136f3:	75 0b                	jne    c0013700 <Semaphore::tryAcquire()+0xa4>
c00136f5:	fb                   	sti    
c00136f6:	b0 01                	mov    al,0x1
c00136f8:	83 c4 08             	add    esp,0x8
c00136fb:	5b                   	pop    ebx
c00136fc:	c3                   	ret    
c00136fd:	8d 76 00             	lea    esi,[esi+0x0]
c0013700:	b0 01                	mov    al,0x1
c0013702:	83 c4 08             	add    esp,0x8
c0013705:	5b                   	pop    ebx
c0013706:	c3                   	ret    
c0013707:	90                   	nop
c0013708:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c0013712:	e8 b5 fe ff ff       	call   c00135cc <schedule()>
c0013717:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c001371c:	48                   	dec    eax
c001371d:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013722:	85 c0                	test   eax,eax
c0013724:	75 86                	jne    c00136ac <Semaphore::tryAcquire()+0x50>
c0013726:	eb 8c                	jmp    c00136b4 <Semaphore::tryAcquire()+0x58>

c0013728 <Semaphore::assertLocked(char const*)>:
c0013728:	83 ec 0c             	sub    esp,0xc
c001372b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001372f:	fa                   	cli    
c0013730:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0013736:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c001373b:	8d 48 01             	lea    ecx,[eax+0x1]
c001373e:	89 0d 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,ecx
c0013744:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0013746:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0013749:	7c 29                	jl     c0013774 <Semaphore::assertLocked(char const*)+0x4c>
c001374b:	90                   	nop
c001374c:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c0013751:	85 c0                	test   eax,eax
c0013753:	75 0b                	jne    c0013760 <Semaphore::assertLocked(char const*)+0x38>
c0013755:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c001375a:	85 c0                	test   eax,eax
c001375c:	75 2e                	jne    c001378c <Semaphore::assertLocked(char const*)+0x64>
c001375e:	66 90                	xchg   ax,ax
c0013760:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013765:	48                   	dec    eax
c0013766:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c001376b:	75 03                	jne    c0013770 <Semaphore::assertLocked(char const*)+0x48>
c001376d:	fb                   	sti    
c001376e:	66 90                	xchg   ax,ax
c0013770:	83 c4 0c             	add    esp,0xc
c0013773:	c3                   	ret    
c0013774:	83 ec 0c             	sub    esp,0xc
c0013777:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001377b:	52                   	push   edx
c001377c:	e8 f6 ca ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0013781:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0013786:	83 c4 10             	add    esp,0x10
c0013789:	48                   	dec    eax
c001378a:	eb c0                	jmp    c001374c <Semaphore::assertLocked(char const*)+0x24>
c001378c:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c0013796:	e8 31 fe ff ff       	call   c00135cc <schedule()>
c001379b:	eb c3                	jmp    c0013760 <Semaphore::assertLocked(char const*)+0x38>
c001379d:	8d 76 00             	lea    esi,[esi+0x0]

c00137a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c00137a0:	83 ec 0c             	sub    esp,0xc
c00137a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137a8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137ac:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00137af:	e8 18 fe ff ff       	call   c00135cc <schedule()>
c00137b4:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00137b9:	48                   	dec    eax
c00137ba:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00137bf:	75 03                	jne    c00137c4 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c00137c1:	fb                   	sti    
c00137c2:	66 90                	xchg   ax,ax
c00137c4:	83 c4 0c             	add    esp,0xc
c00137c7:	c3                   	ret    

c00137c8 <blockTask(TaskState)>:
c00137c8:	83 ec 0c             	sub    esp,0xc
c00137cb:	fa                   	cli    
c00137cc:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00137d2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00137db:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00137de:	e8 e9 fd ff ff       	call   c00135cc <schedule()>
c00137e3:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00137e8:	48                   	dec    eax
c00137e9:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00137ee:	75 04                	jne    c00137f4 <blockTask(TaskState)+0x2c>
c00137f0:	fb                   	sti    
c00137f1:	8d 76 00             	lea    esi,[esi+0x0]
c00137f4:	83 c4 0c             	add    esp,0xc
c00137f7:	c3                   	ret    

c00137f8 <waitTask(int, int*, int)>:
c00137f8:	83 ec 18             	sub    esp,0x18
c00137fb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013800:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013804:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0013807:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001380b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013810:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0013813:	6a 07                	push   0x7
c0013815:	e8 ae ff ff ff       	call   c00137c8 <blockTask(TaskState)>
c001381a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001381f:	83 c4 10             	add    esp,0x10
c0013822:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0013825:	85 d2                	test   edx,edx
c0013827:	74 0b                	je     c0013834 <waitTask(int, int*, int)+0x3c>
c0013829:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c001382c:	89 02                	mov    DWORD PTR [edx],eax
c001382e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013833:	90                   	nop
c0013834:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0013837:	83 c4 0c             	add    esp,0xc
c001383a:	c3                   	ret    
c001383b:	90                   	nop

c001383c <milliTenthSleepUntil(unsigned int)>:
c001383c:	83 ec 0c             	sub    esp,0xc
c001383f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013843:	39 05 4c 29 02 c0    	cmp    DWORD PTR ds:0xc002294c,eax
c0013849:	76 05                	jbe    c0013850 <milliTenthSleepUntil(unsigned int)+0x14>
c001384b:	90                   	nop
c001384c:	83 c4 0c             	add    esp,0xc
c001384f:	c3                   	ret    
c0013850:	fa                   	cli    
c0013851:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0013857:	83 ec 08             	sub    esp,0x8
c001385a:	ff 05 44 38 02 c0    	inc    DWORD PTR ds:0xc0023844
c0013860:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0013866:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0013869:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001386f:	52                   	push   edx
c0013870:	68 58 38 02 c0       	push   0xc0023858
c0013875:	e8 d2 89 00 00       	call   c001c24c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001387a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0013881:	e8 42 ff ff ff       	call   c00137c8 <blockTask(TaskState)>
c0013886:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c001388b:	83 c4 10             	add    esp,0x10
c001388e:	48                   	dec    eax
c001388f:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c0013894:	85 c0                	test   eax,eax
c0013896:	75 0c                	jne    c00138a4 <milliTenthSleepUntil(unsigned int)+0x68>
c0013898:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c001389d:	85 c0                	test   eax,eax
c001389f:	75 17                	jne    c00138b8 <milliTenthSleepUntil(unsigned int)+0x7c>
c00138a1:	8d 76 00             	lea    esi,[esi+0x0]
c00138a4:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00138a9:	48                   	dec    eax
c00138aa:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00138af:	75 9b                	jne    c001384c <milliTenthSleepUntil(unsigned int)+0x10>
c00138b1:	fb                   	sti    
c00138b2:	83 c4 0c             	add    esp,0xc
c00138b5:	c3                   	ret    
c00138b6:	66 90                	xchg   ax,ax
c00138b8:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c00138c2:	e8 05 fd ff ff       	call   c00135cc <schedule()>
c00138c7:	eb db                	jmp    c00138a4 <milliTenthSleepUntil(unsigned int)+0x68>
c00138c9:	8d 76 00             	lea    esi,[esi+0x0]

c00138cc <milliTenthSleep(unsigned int)>:
c00138cc:	a1 4c 29 02 c0       	mov    eax,ds:0xc002294c
c00138d1:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c00138d5:	e9 62 ff ff ff       	jmp    c001383c <milliTenthSleepUntil(unsigned int)>
c00138da:	66 90                	xchg   ax,ax

c00138dc <sleep(unsigned int)>:
c00138dc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00138e0:	8d 04 80             	lea    eax,[eax+eax*4]
c00138e3:	8d 04 80             	lea    eax,[eax+eax*4]
c00138e6:	8d 04 80             	lea    eax,[eax+eax*4]
c00138e9:	8d 04 80             	lea    eax,[eax+eax*4]
c00138ec:	c1 e0 04             	shl    eax,0x4
c00138ef:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00138f3:	eb d7                	jmp    c00138cc <milliTenthSleep(unsigned int)>
c00138f5:	90                   	nop
c00138f6:	66 90                	xchg   ax,ax

c00138f8 <Semaphore::acquire()>:
c00138f8:	83 ec 0c             	sub    esp,0xc
c00138fb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00138ff:	fa                   	cli    
c0013900:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0013905:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c001390b:	8d 48 01             	lea    ecx,[eax+0x1]
c001390e:	89 0d 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,ecx
c0013914:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0013917:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0013919:	7d 2d                	jge    c0013948 <Semaphore::acquire()+0x50>
c001391b:	41                   	inc    ecx
c001391c:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001391f:	90                   	nop
c0013920:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c0013925:	85 c0                	test   eax,eax
c0013927:	75 0b                	jne    c0013934 <Semaphore::acquire()+0x3c>
c0013929:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c001392e:	85 c0                	test   eax,eax
c0013930:	75 62                	jne    c0013994 <Semaphore::acquire()+0x9c>
c0013932:	66 90                	xchg   ax,ax
c0013934:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013939:	48                   	dec    eax
c001393a:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c001393f:	75 03                	jne    c0013944 <Semaphore::acquire()+0x4c>
c0013941:	fb                   	sti    
c0013942:	66 90                	xchg   ax,ax
c0013944:	83 c4 0c             	add    esp,0xc
c0013947:	c3                   	ret    
c0013948:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001394d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0013954:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013957:	85 c9                	test   ecx,ecx
c0013959:	74 4d                	je     c00139a8 <Semaphore::acquire()+0xb0>
c001395b:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001395e:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0013964:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0013967:	90                   	nop
c0013968:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001396d:	83 ec 0c             	sub    esp,0xc
c0013970:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0013973:	68 3c e5 01 c0       	push   0xc001e53c
c0013978:	e8 ab 6d ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001397d:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0013984:	e8 3f fe ff ff       	call   c00137c8 <blockTask(TaskState)>
c0013989:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c001398e:	83 c4 10             	add    esp,0x10
c0013991:	48                   	dec    eax
c0013992:	eb 8c                	jmp    c0013920 <Semaphore::acquire()+0x28>
c0013994:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c001399e:	e8 29 fc ff ff       	call   c00135cc <schedule()>
c00139a3:	eb 8f                	jmp    c0013934 <Semaphore::acquire()+0x3c>
c00139a5:	8d 76 00             	lea    esi,[esi+0x0]
c00139a8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139ad:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00139b0:	eb b6                	jmp    c0013968 <Semaphore::acquire()+0x70>
c00139b2:	66 90                	xchg   ax,ax

c00139b4 <taskReturned>:
c00139b4:	83 ec 18             	sub    esp,0x18
c00139b7:	68 5c e5 01 c0       	push   0xc001e55c
c00139bc:	e8 b6 c8 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c00139c1:	83 c4 10             	add    esp,0x10
c00139c4:	83 ec 0c             	sub    esp,0xc
c00139c7:	6a 02                	push   0x2
c00139c9:	e8 fa fd ff ff       	call   c00137c8 <blockTask(TaskState)>
c00139ce:	fa                   	cli    
c00139cf:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00139d5:	e8 f2 fb ff ff       	call   c00135cc <schedule()>
c00139da:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00139df:	83 c4 10             	add    esp,0x10
c00139e2:	48                   	dec    eax
c00139e3:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00139e8:	85 c0                	test   eax,eax
c00139ea:	75 d8                	jne    c00139c4 <taskReturned+0x10>
c00139ec:	fb                   	sti    
c00139ed:	eb d5                	jmp    c00139c4 <taskReturned+0x10>
c00139ef:	90                   	nop

c00139f0 <Thr::processFromPID(int)>:
c00139f0:	57                   	push   edi
c00139f1:	56                   	push   esi
c00139f2:	53                   	push   ebx
c00139f3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00139f7:	fa                   	cli    
c00139f8:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00139fe:	83 ec 0c             	sub    esp,0xc
c0013a01:	68 64 38 02 c0       	push   0xc0023864
c0013a06:	e8 81 87 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a0b:	83 c4 10             	add    esp,0x10
c0013a0e:	89 c7                	mov    edi,eax
c0013a10:	eb 16                	jmp    c0013a28 <Thr::processFromPID(int)+0x38>
c0013a12:	66 90                	xchg   ax,ax
c0013a14:	83 ec 0c             	sub    esp,0xc
c0013a17:	68 64 38 02 c0       	push   0xc0023864
c0013a1c:	e8 6b 87 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a21:	83 c4 10             	add    esp,0x10
c0013a24:	39 f8                	cmp    eax,edi
c0013a26:	74 4c                	je     c0013a74 <Thr::processFromPID(int)+0x84>
c0013a28:	83 ec 0c             	sub    esp,0xc
c0013a2b:	68 64 38 02 c0       	push   0xc0023864
c0013a30:	e8 57 87 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013a35:	c7 04 24 64 38 02 c0 	mov    DWORD PTR [esp],0xc0023864
c0013a3c:	89 c3                	mov    ebx,eax
c0013a3e:	e8 51 87 00 00       	call   c001c194 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013a43:	58                   	pop    eax
c0013a44:	5a                   	pop    edx
c0013a45:	53                   	push   ebx
c0013a46:	68 64 38 02 c0       	push   0xc0023864
c0013a4b:	e8 fc 87 00 00       	call   c001c24c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013a50:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a53:	83 c4 10             	add    esp,0x10
c0013a56:	39 30                	cmp    DWORD PTR [eax],esi
c0013a58:	75 ba                	jne    c0013a14 <Thr::processFromPID(int)+0x24>
c0013a5a:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013a5f:	48                   	dec    eax
c0013a60:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013a65:	74 09                	je     c0013a70 <Thr::processFromPID(int)+0x80>
c0013a67:	90                   	nop
c0013a68:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013a6b:	5b                   	pop    ebx
c0013a6c:	5e                   	pop    esi
c0013a6d:	5f                   	pop    edi
c0013a6e:	c3                   	ret    
c0013a6f:	90                   	nop
c0013a70:	fb                   	sti    
c0013a71:	eb f5                	jmp    c0013a68 <Thr::processFromPID(int)+0x78>
c0013a73:	90                   	nop
c0013a74:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013a79:	48                   	dec    eax
c0013a7a:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013a7f:	75 07                	jne    c0013a88 <Thr::processFromPID(int)+0x98>
c0013a81:	fb                   	sti    
c0013a82:	5b                   	pop    ebx
c0013a83:	5e                   	pop    esi
c0013a84:	5f                   	pop    edi
c0013a85:	c3                   	ret    
c0013a86:	66 90                	xchg   ax,ax
c0013a88:	5b                   	pop    ebx
c0013a89:	31 c0                	xor    eax,eax
c0013a8b:	5e                   	pop    esi
c0013a8c:	5f                   	pop    edi
c0013a8d:	c3                   	ret    
c0013a8e:	66 90                	xchg   ax,ax

c0013a90 <unblockTask(ThreadControlBlock*)>:
c0013a90:	53                   	push   ebx
c0013a91:	83 ec 08             	sub    esp,0x8
c0013a94:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a98:	fa                   	cli    
c0013a99:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0013a9f:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013aa2:	85 c0                	test   eax,eax
c0013aa4:	74 66                	je     c0013b0c <unblockTask(ThreadControlBlock*)+0x7c>
c0013aa6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0013aa9:	48                   	dec    eax
c0013aaa:	74 38                	je     c0013ae4 <unblockTask(ThreadControlBlock*)+0x54>
c0013aac:	83 ec 0c             	sub    esp,0xc
c0013aaf:	68 64 38 02 c0       	push   0xc0023864
c0013ab4:	e8 d3 86 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ab9:	83 c4 10             	add    esp,0x10
c0013abc:	85 c0                	test   eax,eax
c0013abe:	75 1c                	jne    c0013adc <unblockTask(ThreadControlBlock*)+0x4c>
c0013ac0:	eb 5e                	jmp    c0013b20 <unblockTask(ThreadControlBlock*)+0x90>
c0013ac2:	66 90                	xchg   ax,ax
c0013ac4:	83 ec 08             	sub    esp,0x8
c0013ac7:	50                   	push   eax
c0013ac8:	68 64 38 02 c0       	push   0xc0023864
c0013acd:	e8 6a 8a 00 00       	call   c001c53c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ad2:	83 c4 10             	add    esp,0x10
c0013ad5:	85 c0                	test   eax,eax
c0013ad7:	74 47                	je     c0013b20 <unblockTask(ThreadControlBlock*)+0x90>
c0013ad9:	8d 76 00             	lea    esi,[esi+0x0]
c0013adc:	39 c3                	cmp    ebx,eax
c0013ade:	75 e4                	jne    c0013ac4 <unblockTask(ThreadControlBlock*)+0x34>
c0013ae0:	eb 12                	jmp    c0013af4 <unblockTask(ThreadControlBlock*)+0x64>
c0013ae2:	66 90                	xchg   ax,ax
c0013ae4:	83 ec 0c             	sub    esp,0xc
c0013ae7:	68 df e4 01 c0       	push   0xc001e4df
c0013aec:	e8 37 6c ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0013af1:	83 c4 10             	add    esp,0x10
c0013af4:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013af9:	48                   	dec    eax
c0013afa:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013aff:	75 03                	jne    c0013b04 <unblockTask(ThreadControlBlock*)+0x74>
c0013b01:	fb                   	sti    
c0013b02:	66 90                	xchg   ax,ax
c0013b04:	83 c4 08             	add    esp,0x8
c0013b07:	5b                   	pop    ebx
c0013b08:	c3                   	ret    
c0013b09:	8d 76 00             	lea    esi,[esi+0x0]
c0013b0c:	83 ec 0c             	sub    esp,0xc
c0013b0f:	68 c8 e4 01 c0       	push   0xc001e4c8
c0013b14:	e8 0f 6c ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0013b19:	83 c4 10             	add    esp,0x10
c0013b1c:	eb d6                	jmp    c0013af4 <unblockTask(ThreadControlBlock*)+0x64>
c0013b1e:	66 90                	xchg   ax,ax
c0013b20:	83 ec 08             	sub    esp,0x8
c0013b23:	53                   	push   ebx
c0013b24:	68 64 38 02 c0       	push   0xc0023864
c0013b29:	e8 1e 87 00 00       	call   c001c24c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013b2e:	83 c4 10             	add    esp,0x10
c0013b31:	eb c1                	jmp    c0013af4 <unblockTask(ThreadControlBlock*)+0x64>
c0013b33:	90                   	nop

c0013b34 <cleanupTerminatedTask(ThreadControlBlock*)>:
c0013b34:	55                   	push   ebp
c0013b35:	57                   	push   edi
c0013b36:	56                   	push   esi
c0013b37:	53                   	push   ebx
c0013b38:	83 ec 1c             	sub    esp,0x1c
c0013b3b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0013b3f:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b42:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0013b48:	85 ed                	test   ebp,ebp
c0013b4a:	7e 24                	jle    c0013b70 <cleanupTerminatedTask(ThreadControlBlock*)+0x3c>
c0013b4c:	31 f6                	xor    esi,esi
c0013b4e:	66 90                	xchg   ax,ax
c0013b50:	83 ec 0c             	sub    esp,0xc
c0013b53:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0013b5a:	46                   	inc    esi
c0013b5b:	57                   	push   edi
c0013b5c:	e8 48 3e ff ff       	call   c00079a9 <free>
c0013b61:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013b64:	83 c4 10             	add    esp,0x10
c0013b67:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0013b6d:	7f e1                	jg     c0013b50 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0013b6f:	90                   	nop
c0013b70:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0013b7a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0013b7f:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c0013b82:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0013b85:	d3 c0                	rol    eax,cl
c0013b87:	66 21 82 04 05 00 00 	and    WORD PTR [edx+0x504],ax
c0013b8e:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013b91:	89 f7                	mov    edi,esi
c0013b93:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0013b9b:	0f 85 77 01 00 00    	jne    c0013d18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013ba1:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c0013ba7:	85 ed                	test   ebp,ebp
c0013ba9:	74 1d                	je     c0013bc8 <cleanupTerminatedTask(ThreadControlBlock*)+0x94>
c0013bab:	83 ec 0c             	sub    esp,0xc
c0013bae:	55                   	push   ebp
c0013baf:	e8 68 c4 ff ff       	call   c001001c <EnvVarContainer::~EnvVarContainer()>
c0013bb4:	59                   	pop    ecx
c0013bb5:	5e                   	pop    esi
c0013bb6:	6a 0c                	push   0xc
c0013bb8:	55                   	push   ebp
c0013bb9:	e8 74 6a ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c0013bbe:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013bc1:	83 c4 10             	add    esp,0x10
c0013bc4:	89 f7                	mov    edi,esi
c0013bc6:	66 90                	xchg   ax,ax
c0013bc8:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013bce:	85 c0                	test   eax,eax
c0013bd0:	0f 84 b6 00 00 00    	je     c0013c8c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013bd6:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c0013bd9:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013bdd:	31 c9                	xor    ecx,ecx
c0013bdf:	eb 17                	jmp    c0013bf8 <cleanupTerminatedTask(ThreadControlBlock*)+0xc4>
c0013be1:	8d 76 00             	lea    esi,[esi+0x0]
c0013be4:	41                   	inc    ecx
c0013be5:	83 f9 10             	cmp    ecx,0x10
c0013be8:	0f 84 9e 00 00 00    	je     c0013c8c <cleanupTerminatedTask(ThreadControlBlock*)+0x158>
c0013bee:	66 90                	xchg   ax,ax
c0013bf0:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013bf6:	66 90                	xchg   ax,ax
c0013bf8:	31 d2                	xor    edx,edx
c0013bfa:	66 8b 90 04 05 00 00 	mov    dx,WORD PTR [eax+0x504]
c0013c01:	d3 fa                	sar    edx,cl
c0013c03:	83 e2 01             	and    edx,0x1
c0013c06:	74 dc                	je     c0013be4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013c08:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c0013c0b:	01 d2                	add    edx,edx
c0013c0d:	01 ca                	add    edx,ecx
c0013c0f:	8d 14 92             	lea    edx,[edx+edx*4]
c0013c12:	01 d0                	add    eax,edx
c0013c14:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c0013c1a:	83 fd 07             	cmp    ebp,0x7
c0013c1d:	75 c5                	jne    c0013be4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013c1f:	05 40 02 00 00       	add    eax,0x240
c0013c24:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c0013c27:	83 fd ff             	cmp    ebp,0xffffffff
c0013c2a:	0f 8c f0 00 00 00    	jl     c0013d20 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0013c30:	0f 84 ae 01 00 00    	je     c0013de4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b0>
c0013c36:	85 ed                	test   ebp,ebp
c0013c38:	0f 84 92 01 00 00    	je     c0013dd0 <cleanupTerminatedTask(ThreadControlBlock*)+0x29c>
c0013c3e:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0013c40:	75 a2                	jne    c0013be4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013c42:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c0013c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013c4c:	01 d0                	add    eax,edx
c0013c4e:	66 90                	xchg   ax,ax
c0013c50:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0013c54:	83 ec 0c             	sub    esp,0xc
c0013c57:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c0013c5d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013c60:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0013c66:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c0013c6d:	50                   	push   eax
c0013c6e:	e8 1d fe ff ff       	call   c0013a90 <unblockTask(ThreadControlBlock*)>
c0013c73:	83 c4 10             	add    esp,0x10
c0013c76:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013c79:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013c7d:	89 f7                	mov    edi,esi
c0013c7f:	41                   	inc    ecx
c0013c80:	83 f9 10             	cmp    ecx,0x10
c0013c83:	0f 85 67 ff ff ff    	jne    c0013bf0 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0013c89:	8d 76 00             	lea    esi,[esi+0x0]
c0013c8c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0013c92:	85 c0                	test   eax,eax
c0013c94:	74 62                	je     c0013cf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013c96:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c0013c9c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0013ca2:	74 54                	je     c0013cf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c4>
c0013ca4:	83 ec 0c             	sub    esp,0xc
c0013ca7:	68 64 38 02 c0       	push   0xc0023864
c0013cac:	e8 db 84 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013cb1:	c7 04 24 64 38 02 c0 	mov    DWORD PTR [esp],0xc0023864
c0013cb8:	89 c7                	mov    edi,eax
c0013cba:	e8 b1 84 00 00       	call   c001c170 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013cbf:	83 c4 10             	add    esp,0x10
c0013cc2:	84 c0                	test   al,al
c0013cc4:	0f 84 ce 00 00 00    	je     c0013d98 <cleanupTerminatedTask(ThreadControlBlock*)+0x264>
c0013cca:	66 90                	xchg   ax,ax
c0013ccc:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ccf:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c0013cd5:	85 d2                	test   edx,edx
c0013cd7:	74 0f                	je     c0013ce8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1b4>
c0013cd9:	83 ec 0c             	sub    esp,0xc
c0013cdc:	8b 02                	mov    eax,DWORD PTR [edx]
c0013cde:	52                   	push   edx
c0013cdf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013ce2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013ce5:	83 c4 10             	add    esp,0x10
c0013ce8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c0013cf2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c0013cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0013cf8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c0013cfe:	85 db                	test   ebx,ebx
c0013d00:	74 16                	je     c0013d18 <cleanupTerminatedTask(ThreadControlBlock*)+0x1e4>
c0013d02:	83 ec 0c             	sub    esp,0xc
c0013d05:	53                   	push   ebx
c0013d06:	e8 fb 5c ff ff       	call   c0009a06 <VAS::~VAS()>
c0013d0b:	58                   	pop    eax
c0013d0c:	5a                   	pop    edx
c0013d0d:	6a 14                	push   0x14
c0013d0f:	53                   	push   ebx
c0013d10:	e8 1d 69 ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c0013d15:	83 c4 10             	add    esp,0x10
c0013d18:	83 c4 1c             	add    esp,0x1c
c0013d1b:	5b                   	pop    ebx
c0013d1c:	5e                   	pop    esi
c0013d1d:	5f                   	pop    edi
c0013d1e:	5d                   	pop    ebp
c0013d1f:	c3                   	ret    
c0013d20:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013d24:	83 ec 0c             	sub    esp,0xc
c0013d27:	68 90 e5 01 c0       	push   0xc001e590
c0013d2c:	e8 46 c5 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0013d31:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0013d34:	83 c4 10             	add    esp,0x10
c0013d37:	89 f7                	mov    edi,esi
c0013d39:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0013d3d:	e9 a2 fe ff ff       	jmp    c0013be4 <cleanupTerminatedTask(ThreadControlBlock*)+0xb0>
c0013d42:	66 90                	xchg   ax,ax
c0013d44:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0013d4a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0013d50:	75 1e                	jne    c0013d70 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013d52:	83 ec 0c             	sub    esp,0xc
c0013d55:	68 f8 e5 01 c0       	push   0xc001e5f8
c0013d5a:	e8 c9 69 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0013d5f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0013d66:	e8 5d fa ff ff       	call   c00137c8 <blockTask(TaskState)>
c0013d6b:	83 c4 10             	add    esp,0x10
c0013d6e:	66 90                	xchg   ax,ax
c0013d70:	83 ec 08             	sub    esp,0x8
c0013d73:	56                   	push   esi
c0013d74:	68 64 38 02 c0       	push   0xc0023864
c0013d79:	e8 ce 84 00 00       	call   c001c24c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013d7e:	c7 04 24 64 38 02 c0 	mov    DWORD PTR [esp],0xc0023864
c0013d85:	e8 02 84 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013d8a:	83 c4 10             	add    esp,0x10
c0013d8d:	39 f8                	cmp    eax,edi
c0013d8f:	0f 84 37 ff ff ff    	je     c0013ccc <cleanupTerminatedTask(ThreadControlBlock*)+0x198>
c0013d95:	8d 76 00             	lea    esi,[esi+0x0]
c0013d98:	83 ec 0c             	sub    esp,0xc
c0013d9b:	68 64 38 02 c0       	push   0xc0023864
c0013da0:	e8 e7 83 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013da5:	c7 04 24 64 38 02 c0 	mov    DWORD PTR [esp],0xc0023864
c0013dac:	89 c6                	mov    esi,eax
c0013dae:	e8 e1 83 00 00       	call   c001c194 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013db3:	83 c4 10             	add    esp,0x10
c0013db6:	39 f3                	cmp    ebx,esi
c0013db8:	74 b6                	je     c0013d70 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013dba:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c0013dbd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013dc0:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0013dc6:	75 a8                	jne    c0013d70 <cleanupTerminatedTask(ThreadControlBlock*)+0x23c>
c0013dc8:	e9 77 ff ff ff       	jmp    c0013d44 <cleanupTerminatedTask(ThreadControlBlock*)+0x210>
c0013dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0013dd0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013dd4:	83 ec 0c             	sub    esp,0xc
c0013dd7:	68 c4 e5 01 c0       	push   0xc001e5c4
c0013ddc:	e9 4b ff ff ff       	jmp    c0013d2c <cleanupTerminatedTask(ThreadControlBlock*)+0x1f8>
c0013de1:	8d 76 00             	lea    esi,[esi+0x0]
c0013de4:	8b 36                	mov    esi,DWORD PTR [esi]
c0013de6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013dea:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c0013ded:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0013df0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c0013df6:	01 d7                	add    edi,edx
c0013df8:	89 f8                	mov    eax,edi
c0013dfa:	e9 51 fe ff ff       	jmp    c0013c50 <cleanupTerminatedTask(ThreadControlBlock*)+0x11c>
c0013dff:	90                   	nop

c0013e00 <cleanerTaskFunction(void*)>:
c0013e00:	53                   	push   ebx
c0013e01:	83 ec 08             	sub    esp,0x8
c0013e04:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013e09:	48                   	dec    eax
c0013e0a:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013e0f:	75 03                	jne    c0013e14 <cleanerTaskFunction(void*)+0x14>
c0013e11:	fb                   	sti    
c0013e12:	66 90                	xchg   ax,ax
c0013e14:	fa                   	cli    
c0013e15:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013e1a:	80 3d 2c 38 02 c0 00 	cmp    BYTE PTR ds:0xc002382c,0x0
c0013e21:	8d 50 01             	lea    edx,[eax+0x1]
c0013e24:	89 15 48 38 02 c0    	mov    DWORD PTR ds:0xc0023848,edx
c0013e2a:	0f 84 ac 00 00 00    	je     c0013edc <cleanerTaskFunction(void*)+0xdc>
c0013e30:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013e35:	85 c0                	test   eax,eax
c0013e37:	75 03                	jne    c0013e3c <cleanerTaskFunction(void*)+0x3c>
c0013e39:	fb                   	sti    
c0013e3a:	66 90                	xchg   ax,ax
c0013e3c:	c6 05 2c 38 02 c0 00 	mov    BYTE PTR ds:0xc002382c,0x0
c0013e43:	fa                   	cli    
c0013e44:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0013e4a:	ff 05 44 38 02 c0    	inc    DWORD PTR ds:0xc0023844
c0013e50:	fa                   	cli    
c0013e51:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0013e57:	eb 2b                	jmp    c0013e84 <cleanerTaskFunction(void*)+0x84>
c0013e59:	8d 76 00             	lea    esi,[esi+0x0]
c0013e5c:	83 ec 0c             	sub    esp,0xc
c0013e5f:	68 4c 38 02 c0       	push   0xc002384c
c0013e64:	e8 23 83 00 00       	call   c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013e69:	c7 04 24 4c 38 02 c0 	mov    DWORD PTR [esp],0xc002384c
c0013e70:	89 c3                	mov    ebx,eax
c0013e72:	e8 1d 83 00 00       	call   c001c194 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0013e77:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013e7a:	e8 b5 fc ff ff       	call   c0013b34 <cleanupTerminatedTask(ThreadControlBlock*)>
c0013e7f:	83 c4 10             	add    esp,0x10
c0013e82:	66 90                	xchg   ax,ax
c0013e84:	83 ec 0c             	sub    esp,0xc
c0013e87:	68 4c 38 02 c0       	push   0xc002384c
c0013e8c:	e8 df 82 00 00       	call   c001c170 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0013e91:	83 c4 10             	add    esp,0x10
c0013e94:	84 c0                	test   al,al
c0013e96:	74 c4                	je     c0013e5c <cleanerTaskFunction(void*)+0x5c>
c0013e98:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013e9d:	48                   	dec    eax
c0013e9e:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013ea3:	75 03                	jne    c0013ea8 <cleanerTaskFunction(void*)+0xa8>
c0013ea5:	fb                   	sti    
c0013ea6:	66 90                	xchg   ax,ax
c0013ea8:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0013ead:	48                   	dec    eax
c0013eae:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c0013eb3:	0f 85 4b ff ff ff    	jne    c0013e04 <cleanerTaskFunction(void*)+0x4>
c0013eb9:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0013ebe:	85 c0                	test   eax,eax
c0013ec0:	0f 84 3e ff ff ff    	je     c0013e04 <cleanerTaskFunction(void*)+0x4>
c0013ec6:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c0013ed0:	e8 f7 f6 ff ff       	call   c00135cc <schedule()>
c0013ed5:	e9 2a ff ff ff       	jmp    c0013e04 <cleanerTaskFunction(void*)+0x4>
c0013eda:	66 90                	xchg   ax,ax
c0013edc:	83 ec 0c             	sub    esp,0xc
c0013edf:	6a 02                	push   0x2
c0013ee1:	e8 ba f8 ff ff       	call   c00137a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0013ee6:	83 c4 10             	add    esp,0x10
c0013ee9:	e9 4e ff ff ff       	jmp    c0013e3c <cleanerTaskFunction(void*)+0x3c>
c0013eee:	66 90                	xchg   ax,ax

c0013ef0 <terminateTask(int)>:
c0013ef0:	83 ec 14             	sub    esp,0x14
c0013ef3:	fa                   	cli    
c0013ef4:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0013efa:	ff 05 44 38 02 c0    	inc    DWORD PTR ds:0xc0023844
c0013f00:	fa                   	cli    
c0013f01:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0013f07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0013f0b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f10:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0013f13:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f18:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0013f1b:	50                   	push   eax
c0013f1c:	68 4c 38 02 c0       	push   0xc002384c
c0013f21:	e8 26 83 00 00       	call   c001c24c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0013f26:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013f2b:	83 c4 10             	add    esp,0x10
c0013f2e:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0013f35:	a1 28 38 02 c0       	mov    eax,ds:0xc0023828
c0013f3a:	85 c0                	test   eax,eax
c0013f3c:	74 5e                	je     c0013f9c <terminateTask(int)+0xac>
c0013f3e:	83 ec 0c             	sub    esp,0xc
c0013f41:	c6 05 2c 38 02 c0 01 	mov    BYTE PTR ds:0xc002382c,0x1
c0013f48:	50                   	push   eax
c0013f49:	e8 42 fb ff ff       	call   c0013a90 <unblockTask(ThreadControlBlock*)>
c0013f4e:	83 c4 10             	add    esp,0x10
c0013f51:	8d 76 00             	lea    esi,[esi+0x0]
c0013f54:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013f59:	48                   	dec    eax
c0013f5a:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013f5f:	75 03                	jne    c0013f64 <terminateTask(int)+0x74>
c0013f61:	fb                   	sti    
c0013f62:	66 90                	xchg   ax,ax
c0013f64:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0013f69:	48                   	dec    eax
c0013f6a:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c0013f6f:	75 0b                	jne    c0013f7c <terminateTask(int)+0x8c>
c0013f71:	83 3d 40 38 02 c0 00 	cmp    DWORD PTR ds:0xc0023840,0x0
c0013f78:	75 36                	jne    c0013fb0 <terminateTask(int)+0xc0>
c0013f7a:	66 90                	xchg   ax,ax
c0013f7c:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0013f81:	48                   	dec    eax
c0013f82:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0013f87:	75 03                	jne    c0013f8c <terminateTask(int)+0x9c>
c0013f89:	fb                   	sti    
c0013f8a:	66 90                	xchg   ax,ax
c0013f8c:	fa                   	cli    
c0013f8d:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0013f93:	90                   	nop
c0013f94:	e8 33 f6 ff ff       	call   c00135cc <schedule()>
c0013f99:	eb e1                	jmp    c0013f7c <terminateTask(int)+0x8c>
c0013f9b:	90                   	nop
c0013f9c:	83 ec 0c             	sub    esp,0xc
c0013f9f:	68 f6 e4 01 c0       	push   0xc001e4f6
c0013fa4:	e8 7f 67 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0013fa9:	83 c4 10             	add    esp,0x10
c0013fac:	eb a6                	jmp    c0013f54 <terminateTask(int)+0x64>
c0013fae:	66 90                	xchg   ax,ax
c0013fb0:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c0013fba:	eb d8                	jmp    c0013f94 <terminateTask(int)+0xa4>

c0013fbc <Thr::terminateFromIRQ(int)>:
c0013fbc:	83 ec 18             	sub    esp,0x18
c0013fbf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013fc3:	50                   	push   eax
c0013fc4:	e8 27 ff ff ff       	call   c0013ef0 <terminateTask(int)>
c0013fc9:	90                   	nop
c0013fca:	66 90                	xchg   ax,ax

c0013fcc <Semaphore::release()>:
c0013fcc:	83 ec 0c             	sub    esp,0xc
c0013fcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fd3:	fa                   	cli    
c0013fd4:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0013fd9:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0013fdf:	8d 48 01             	lea    ecx,[eax+0x1]
c0013fe2:	89 0d 44 38 02 c0    	mov    DWORD PTR ds:0xc0023844,ecx
c0013fe8:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0013feb:	85 c9                	test   ecx,ecx
c0013fed:	74 41                	je     c0014030 <Semaphore::release()+0x64>
c0013fef:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0013ff2:	83 ec 0c             	sub    esp,0xc
c0013ff5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0013ff8:	51                   	push   ecx
c0013ff9:	e8 92 fa ff ff       	call   c0013a90 <unblockTask(ThreadControlBlock*)>
c0013ffe:	a1 44 38 02 c0       	mov    eax,ds:0xc0023844
c0014003:	83 c4 10             	add    esp,0x10
c0014006:	48                   	dec    eax
c0014007:	90                   	nop
c0014008:	a3 44 38 02 c0       	mov    ds:0xc0023844,eax
c001400d:	85 c0                	test   eax,eax
c001400f:	75 0b                	jne    c001401c <Semaphore::release()+0x50>
c0014011:	a1 40 38 02 c0       	mov    eax,ds:0xc0023840
c0014016:	85 c0                	test   eax,eax
c0014018:	75 1e                	jne    c0014038 <Semaphore::release()+0x6c>
c001401a:	66 90                	xchg   ax,ax
c001401c:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0014021:	48                   	dec    eax
c0014022:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0014027:	75 03                	jne    c001402c <Semaphore::release()+0x60>
c0014029:	fb                   	sti    
c001402a:	66 90                	xchg   ax,ax
c001402c:	83 c4 0c             	add    esp,0xc
c001402f:	c3                   	ret    
c0014030:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c0014033:	eb d3                	jmp    c0014008 <Semaphore::release()+0x3c>
c0014035:	8d 76 00             	lea    esi,[esi+0x0]
c0014038:	c7 05 40 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023840,0x0
c0014042:	e8 85 f5 ff ff       	call   c00135cc <schedule()>
c0014047:	eb d3                	jmp    c001401c <Semaphore::release()+0x50>
c0014049:	8d 76 00             	lea    esi,[esi+0x0]

c001404c <__static_initialization_and_destruction_0(int, int)>:
c001404c:	83 ec 0c             	sub    esp,0xc
c001404f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0014054:	0f 85 8e 00 00 00    	jne    c00140e8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c001405a:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0014062:	0f 85 80 00 00 00    	jne    c00140e8 <__static_initialization_and_destruction_0(int, int)+0x9c>
c0014068:	83 ec 0c             	sub    esp,0xc
c001406b:	68 64 38 02 c0       	push   0xc0023864
c0014070:	e8 83 84 00 00       	call   c001c4f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0014075:	83 c4 10             	add    esp,0x10
c0014078:	83 ec 04             	sub    esp,0x4
c001407b:	68 04 f1 01 c0       	push   0xc001f104
c0014080:	68 64 38 02 c0       	push   0xc0023864
c0014085:	68 a8 c4 01 c0       	push   0xc001c4a8
c001408a:	e8 53 65 ff ff       	call   c000a5e2 <__cxa_atexit>
c001408f:	83 c4 10             	add    esp,0x10
c0014092:	83 ec 0c             	sub    esp,0xc
c0014095:	68 58 38 02 c0       	push   0xc0023858
c001409a:	e8 59 84 00 00       	call   c001c4f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001409f:	83 c4 10             	add    esp,0x10
c00140a2:	83 ec 04             	sub    esp,0x4
c00140a5:	68 04 f1 01 c0       	push   0xc001f104
c00140aa:	68 58 38 02 c0       	push   0xc0023858
c00140af:	68 a8 c4 01 c0       	push   0xc001c4a8
c00140b4:	e8 29 65 ff ff       	call   c000a5e2 <__cxa_atexit>
c00140b9:	83 c4 10             	add    esp,0x10
c00140bc:	83 ec 0c             	sub    esp,0xc
c00140bf:	68 4c 38 02 c0       	push   0xc002384c
c00140c4:	e8 2f 84 00 00       	call   c001c4f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00140c9:	83 c4 10             	add    esp,0x10
c00140cc:	83 ec 04             	sub    esp,0x4
c00140cf:	68 04 f1 01 c0       	push   0xc001f104
c00140d4:	68 4c 38 02 c0       	push   0xc002384c
c00140d9:	68 a8 c4 01 c0       	push   0xc001c4a8
c00140de:	e8 ff 64 ff ff       	call   c000a5e2 <__cxa_atexit>
c00140e3:	83 c4 10             	add    esp,0x10
c00140e6:	66 90                	xchg   ax,ax
c00140e8:	90                   	nop
c00140e9:	83 c4 0c             	add    esp,0xc
c00140ec:	c3                   	ret    
c00140ed:	8d 76 00             	lea    esi,[esi+0x0]

c00140f0 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c00140f0:	83 ec 0c             	sub    esp,0xc
c00140f3:	83 ec 08             	sub    esp,0x8
c00140f6:	68 ff ff 00 00       	push   0xffff
c00140fb:	6a 01                	push   0x1
c00140fd:	e8 4a ff ff ff       	call   c001404c <__static_initialization_and_destruction_0(int, int)>
c0014102:	83 c4 10             	add    esp,0x10
c0014105:	83 c4 0c             	add    esp,0xc
c0014108:	c3                   	ret    

c0014109 <Vm::inbv(unsigned short)>:
c0014109:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001410d:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014112:	75 06                	jne    c001411a <Vm::inbv(unsigned short)+0x11>
c0014114:	a0 ac 38 02 c0       	mov    al,ds:0xc00238ac
c0014119:	c3                   	ret    
c001411a:	ec                   	in     al,dx
c001411b:	c3                   	ret    

c001411c <Vm::outbv(unsigned short, unsigned char)>:
c001411c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014120:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0014124:	66 81 fa fe fe       	cmp    dx,0xfefe
c0014129:	75 25                	jne    c0014150 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001412b:	8b 0d ac 38 02 c0    	mov    ecx,DWORD PTR ds:0xc00238ac
c0014131:	8d 51 01             	lea    edx,[ecx+0x1]
c0014134:	88 81 c0 38 02 c0    	mov    BYTE PTR [ecx-0x3ffdc740],al
c001413a:	89 15 ac 38 02 c0    	mov    DWORD PTR ds:0xc00238ac,edx
c0014140:	83 fa 20             	cmp    edx,0x20
c0014143:	75 0c                	jne    c0014151 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0014145:	c7 05 ac 38 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00238ac,0x1f
c001414f:	c3                   	ret    
c0014150:	ee                   	out    dx,al
c0014151:	c3                   	ret    

c0014152 <Vm::realToLinear(unsigned short, unsigned short)>:
c0014152:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014157:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001415c:	c1 e0 04             	shl    eax,0x4
c001415f:	01 d0                	add    eax,edx
c0014161:	c3                   	ret    

c0014162 <Vm::getSegment(unsigned int)>:
c0014162:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014166:	c1 e8 10             	shr    eax,0x10
c0014169:	c3                   	ret    

c001416a <Vm::getOffset(unsigned int)>:
c001416a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001416e:	c3                   	ret    

c001416f <Vm::mainloop2()>:
c001416f:	83 ec 18             	sub    esp,0x18
c0014172:	fa                   	cli    
c0014173:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c0014179:	6a 02                	push   0x2
c001417b:	c6 05 a5 38 02 c0 01 	mov    BYTE PTR ds:0xc00238a5,0x1
c0014182:	e8 19 f6 ff ff       	call   c00137a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c0014187:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001418c:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c0014190:	52                   	push   edx
c0014191:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c0014195:	52                   	push   edx
c0014196:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c001419a:	52                   	push   edx
c001419b:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c001419f:	50                   	push   eax
c00141a0:	e8 8a c0 fe ff       	call   c000022f <goToVM86>
c00141a5:	83 c4 2c             	add    esp,0x2c
c00141a8:	c3                   	ret    

c00141a9 <Vm::mainVm8086Loop(void*)>:
c00141a9:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00141ae:	48                   	dec    eax
c00141af:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00141b4:	75 01                	jne    c00141b7 <Vm::mainVm8086Loop(void*)+0xe>
c00141b6:	fb                   	sti    
c00141b7:	eb b6                	jmp    c001416f <Vm::mainloop2()>

c00141b9 <Vm::mainloop3(unsigned long)>:
c00141b9:	83 ec 18             	sub    esp,0x18
c00141bc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00141c0:	fa                   	cli    
c00141c1:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00141c7:	6a 02                	push   0x2
c00141c9:	c6 05 a4 38 02 c0 01 	mov    BYTE PTR ds:0xc00238a4,0x1
c00141d0:	a3 a0 38 02 c0       	mov    ds:0xc00238a0,eax
c00141d5:	e8 c6 f5 ff ff       	call   c00137a0 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00141da:	83 c4 1c             	add    esp,0x1c
c00141dd:	eb 90                	jmp    c001416f <Vm::mainloop2()>

c00141df <Vm::initialise8086()>:
c00141df:	83 ec 0c             	sub    esp,0xc
c00141e2:	68 80 00 00 00       	push   0x80
c00141e7:	6a 00                	push   0x0
c00141e9:	68 a9 41 01 c0       	push   0xc00141a9
c00141ee:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c00141f4:	e8 b3 f1 ff ff       	call   c00133ac <Process::createThread(void (*)(void*), void*, int)>
c00141f9:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0014200:	a3 a8 38 02 c0       	mov    ds:0xc00238a8,eax
c0014205:	68 00 01 00 00       	push   0x100
c001420a:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c001420f:	6a 00                	push   0x0
c0014211:	6a 00                	push   0x0
c0014213:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014219:	e8 46 5c ff ff       	call   c0009e64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001421e:	83 c4 2c             	add    esp,0x2c
c0014221:	c3                   	ret    

c0014222 <Vm::finish8086()>:
c0014222:	53                   	push   ebx
c0014223:	83 ec 08             	sub    esp,0x8
c0014226:	fa                   	cli    
c0014227:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c001422d:	80 3d a4 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238a4,0x0
c0014234:	75 15                	jne    c001424b <Vm::finish8086()+0x29>
c0014236:	e8 91 f3 ff ff       	call   c00135cc <schedule()>
c001423b:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0014240:	48                   	dec    eax
c0014241:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0014246:	75 de                	jne    c0014226 <Vm::finish8086()+0x4>
c0014248:	fb                   	sti    
c0014249:	eb db                	jmp    c0014226 <Vm::finish8086()+0x4>
c001424b:	83 ec 0c             	sub    esp,0xc
c001424e:	8b 1d a0 38 02 c0    	mov    ebx,DWORD PTR ds:0xc00238a0
c0014254:	ff 35 a8 38 02 c0    	push   DWORD PTR ds:0xc00238a8
c001425a:	c6 05 a4 38 02 c0 00 	mov    BYTE PTR ds:0xc00238a4,0x0
c0014261:	e8 2a f8 ff ff       	call   c0013a90 <unblockTask(ThreadControlBlock*)>
c0014266:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c001426b:	83 c4 10             	add    esp,0x10
c001426e:	8d 50 ff             	lea    edx,[eax-0x1]
c0014271:	89 15 48 38 02 c0    	mov    DWORD PTR ds:0xc0023848,edx
c0014277:	85 d2                	test   edx,edx
c0014279:	75 01                	jne    c001427c <Vm::finish8086()+0x5a>
c001427b:	fb                   	sti    
c001427c:	89 d8                	mov    eax,ebx
c001427e:	83 c4 08             	add    esp,0x8
c0014281:	5b                   	pop    ebx
c0014282:	c3                   	ret    

c0014283 <Vm::getOutput8086(unsigned char*)>:
c0014283:	57                   	push   edi
c0014284:	8b 0d ac 38 02 c0    	mov    ecx,DWORD PTR ds:0xc00238ac
c001428a:	56                   	push   esi
c001428b:	be c0 38 02 c0       	mov    esi,0xc00238c0
c0014290:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014294:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014296:	a1 ac 38 02 c0       	mov    eax,ds:0xc00238ac
c001429b:	5e                   	pop    esi
c001429c:	c7 05 ac 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00238ac,0x0
c00142a6:	5f                   	pop    edi
c00142a7:	c3                   	ret    

c00142a8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00142a8:	55                   	push   ebp
c00142a9:	57                   	push   edi
c00142aa:	56                   	push   esi
c00142ab:	53                   	push   ebx
c00142ac:	83 ec 0c             	sub    esp,0xc
c00142af:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00142b3:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00142b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00142bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00142bf:	fa                   	cli    
c00142c0:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c00142c6:	80 3d a5 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238a5,0x0
c00142cd:	75 15                	jne    c00142e4 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00142cf:	e8 f8 f2 ff ff       	call   c00135cc <schedule()>
c00142d4:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c00142d9:	48                   	dec    eax
c00142da:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00142df:	75 de                	jne    c00142bf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00142e1:	fb                   	sti    
c00142e2:	eb db                	jmp    c00142bf <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00142e4:	a1 a8 38 02 c0       	mov    eax,ds:0xc00238a8
c00142e9:	c7 05 ac 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00238ac,0x0
c00142f3:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00142f7:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00142fb:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00142ff:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0014303:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c0014307:	0f b7 ff             	movzx  edi,di
c001430a:	0f b7 f6             	movzx  esi,si
c001430d:	50                   	push   eax
c001430e:	6a 20                	push   0x20
c0014310:	6a 00                	push   0x0
c0014312:	68 c0 38 02 c0       	push   0xc00238c0
c0014317:	e8 d4 c1 fe ff       	call   c00004f0 <memset>
c001431c:	5a                   	pop    edx
c001431d:	59                   	pop    ecx
c001431e:	57                   	push   edi
c001431f:	56                   	push   esi
c0014320:	e8 2d fe ff ff       	call   c0014152 <Vm::realToLinear(unsigned short, unsigned short)>
c0014325:	83 c4 10             	add    esp,0x10
c0014328:	89 c7                	mov    edi,eax
c001432a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001432e:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0014332:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0014334:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0014339:	c6 05 a5 38 02 c0 00 	mov    BYTE PTR ds:0xc00238a5,0x0
c0014340:	48                   	dec    eax
c0014341:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0014346:	75 01                	jne    c0014349 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c0014348:	fb                   	sti    
c0014349:	83 ec 0c             	sub    esp,0xc
c001434c:	ff 35 a8 38 02 c0    	push   DWORD PTR ds:0xc00238a8
c0014352:	e8 39 f7 ff ff       	call   c0013a90 <unblockTask(ThreadControlBlock*)>
c0014357:	83 c4 1c             	add    esp,0x1c
c001435a:	b0 01                	mov    al,0x1
c001435c:	5b                   	pop    ebx
c001435d:	5e                   	pop    esi
c001435e:	5f                   	pop    edi
c001435f:	5d                   	pop    ebp
c0014360:	c3                   	ret    

c0014361 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0014361:	55                   	push   ebp
c0014362:	57                   	push   edi
c0014363:	56                   	push   esi
c0014364:	53                   	push   ebx
c0014365:	83 ec 2c             	sub    esp,0x2c
c0014368:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001436c:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0014370:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0014374:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0014378:	fa                   	cli    
c0014379:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c001437f:	0f b6 35 a5 38 02 c0 	movzx  esi,BYTE PTR ds:0xc00238a5
c0014386:	89 f0                	mov    eax,esi
c0014388:	84 c0                	test   al,al
c001438a:	75 1d                	jne    c00143a9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001438c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0014390:	e8 37 f2 ff ff       	call   c00135cc <schedule()>
c0014395:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c001439a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001439e:	48                   	dec    eax
c001439f:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00143a4:	75 d2                	jne    c0014378 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00143a6:	fb                   	sti    
c00143a7:	eb cf                	jmp    c0014378 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00143a9:	a1 a8 38 02 c0       	mov    eax,ds:0xc00238a8
c00143ae:	c7 05 ac 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00238ac,0x0
c00143b8:	66 89 50 59          	mov    WORD PTR [eax+0x59],dx
c00143bc:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c00143c0:	66 89 68 55          	mov    WORD PTR [eax+0x55],bp
c00143c4:	66 89 78 57          	mov    WORD PTR [eax+0x57],di
c00143c8:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00143cc:	50                   	push   eax
c00143cd:	6a 20                	push   0x20
c00143cf:	6a 00                	push   0x0
c00143d1:	68 c0 38 02 c0       	push   0xc00238c0
c00143d6:	e8 15 c1 fe ff       	call   c00004f0 <memset>
c00143db:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00143e2:	e8 b2 35 ff ff       	call   c0007999 <malloc>
c00143e7:	83 c4 0c             	add    esp,0xc
c00143ea:	89 c3                	mov    ebx,eax
c00143ec:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c00143f2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00143f6:	50                   	push   eax
c00143f7:	e8 a2 68 ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c00143fc:	83 c4 10             	add    esp,0x10
c00143ff:	85 db                	test   ebx,ebx
c0014401:	75 0a                	jne    c001440d <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c0014403:	83 ec 0c             	sub    esp,0xc
c0014406:	68 20 e6 01 c0       	push   0xc001e620
c001440b:	eb 3e                	jmp    c001444b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001440d:	50                   	push   eax
c001440e:	8d 44 24 17          	lea    eax,[esp+0x17]
c0014412:	50                   	push   eax
c0014413:	8d 44 24 20          	lea    eax,[esp+0x20]
c0014417:	50                   	push   eax
c0014418:	53                   	push   ebx
c0014419:	e8 ec 6b ff ff       	call   c000b00a <File::stat(unsigned long long*, bool*)>
c001441e:	83 c4 10             	add    esp,0x10
c0014421:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c0014426:	74 0a                	je     c0014432 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c0014428:	83 ec 0c             	sub    esp,0xc
c001442b:	68 34 e6 01 c0       	push   0xc001e634
c0014430:	eb 19                	jmp    c001444b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c0014432:	51                   	push   ecx
c0014433:	51                   	push   ecx
c0014434:	6a 01                	push   0x1
c0014436:	53                   	push   ebx
c0014437:	e8 22 69 ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c001443c:	83 c4 10             	add    esp,0x10
c001443f:	85 c0                	test   eax,eax
c0014441:	74 24                	je     c0014467 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c0014443:	83 ec 0c             	sub    esp,0xc
c0014446:	68 4d e6 01 c0       	push   0xc001e64d
c001444b:	e8 27 be ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0014450:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0014455:	83 c4 10             	add    esp,0x10
c0014458:	48                   	dec    eax
c0014459:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c001445e:	85 c0                	test   eax,eax
c0014460:	75 01                	jne    c0014463 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c0014462:	fb                   	sti    
c0014463:	31 f6                	xor    esi,esi
c0014465:	eb 58                	jmp    c00144bf <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c0014467:	0f b7 ed             	movzx  ebp,bp
c001446a:	50                   	push   eax
c001446b:	0f b7 ff             	movzx  edi,di
c001446e:	50                   	push   eax
c001446f:	55                   	push   ebp
c0014470:	57                   	push   edi
c0014471:	e8 dc fc ff ff       	call   c0014152 <Vm::realToLinear(unsigned short, unsigned short)>
c0014476:	5a                   	pop    edx
c0014477:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014479:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001447d:	51                   	push   ecx
c001447e:	50                   	push   eax
c001447f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014483:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0014487:	53                   	push   ebx
c0014488:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001448b:	83 c4 14             	add    esp,0x14
c001448e:	53                   	push   ebx
c001448f:	e8 28 69 ff ff       	call   c000adbc <File::close()>
c0014494:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0014499:	83 c4 10             	add    esp,0x10
c001449c:	48                   	dec    eax
c001449d:	c6 05 a5 38 02 c0 00 	mov    BYTE PTR ds:0xc00238a5,0x0
c00144a4:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c00144a9:	85 c0                	test   eax,eax
c00144ab:	75 01                	jne    c00144ae <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c00144ad:	fb                   	sti    
c00144ae:	83 ec 0c             	sub    esp,0xc
c00144b1:	ff 35 a8 38 02 c0    	push   DWORD PTR ds:0xc00238a8
c00144b7:	e8 d4 f5 ff ff       	call   c0013a90 <unblockTask(ThreadControlBlock*)>
c00144bc:	83 c4 10             	add    esp,0x10
c00144bf:	83 c4 2c             	add    esp,0x2c
c00144c2:	89 f0                	mov    eax,esi
c00144c4:	5b                   	pop    ebx
c00144c5:	5e                   	pop    esi
c00144c6:	5f                   	pop    edi
c00144c7:	5d                   	pop    ebp
c00144c8:	c3                   	ret    

c00144c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c00144c9:	57                   	push   edi
c00144ca:	56                   	push   esi
c00144cb:	53                   	push   ebx
c00144cc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00144d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144d4:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00144d8:	83 e8 06             	sub    eax,0x6
c00144db:	0f b7 c0             	movzx  eax,ax
c00144de:	50                   	push   eax
c00144df:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c00144e4:	50                   	push   eax
c00144e5:	e8 68 fc ff ff       	call   c0014152 <Vm::realToLinear(unsigned short, unsigned short)>
c00144ea:	5a                   	pop    edx
c00144eb:	5e                   	pop    esi
c00144ec:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c00144ef:	8d 56 fa             	lea    edx,[esi-0x6]
c00144f2:	81 e2 ff ff 00 00    	and    edx,0xffff
c00144f8:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c00144fb:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c00144fe:	83 c2 02             	add    edx,0x2
c0014501:	66 89 10             	mov    WORD PTR [eax],dx
c0014504:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c0014507:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001450b:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001450e:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0014512:	89 d6                	mov    esi,edx
c0014514:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001451a:	66 81 e6 ff fd       	and    si,0xfdff
c001451f:	80 7f 5d 00          	cmp    BYTE PTR [edi+0x5d],0x0
c0014523:	74 07                	je     c001452c <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c0014525:	89 d6                	mov    esi,edx
c0014527:	66 81 ce 00 02       	or     si,0x200
c001452c:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c0014530:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014535:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0014539:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c0014541:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c0014544:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001454c:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001454f:	5b                   	pop    ebx
c0014550:	5e                   	pop    esi
c0014551:	5f                   	pop    edi
c0014552:	c3                   	ret    

c0014553 <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0014553:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014558:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001455d:	c1 e0 04             	shl    eax,0x4
c0014560:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0014563:	c3                   	ret    

c0014564 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0014564:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0014569:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001456e:	c1 e0 04             	shl    eax,0x4
c0014571:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0014575:	c3                   	ret    

c0014576 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0014576:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001457b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014580:	c1 e0 04             	shl    eax,0x4
c0014583:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0014586:	c3                   	ret    

c0014587 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0014587:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001458c:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0014591:	c1 e0 04             	shl    eax,0x4
c0014594:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014598:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001459b:	c3                   	ret    

c001459c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001459c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00145a1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00145a6:	c1 e0 04             	shl    eax,0x4
c00145a9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145ad:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c00145b1:	c3                   	ret    

c00145b2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c00145b2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00145b7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c00145bc:	c1 e0 04             	shl    eax,0x4
c00145bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145c3:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c00145c6:	c3                   	ret    

c00145c7 <Vm::faultHandler(regs*)>:
c00145c7:	55                   	push   ebp
c00145c8:	57                   	push   edi
c00145c9:	56                   	push   esi
c00145ca:	53                   	push   ebx
c00145cb:	83 ec 1c             	sub    esp,0x1c
c00145ce:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00145d2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00145d5:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c00145d9:	0f b7 f8             	movzx  edi,ax
c00145dc:	52                   	push   edx
c00145dd:	0f b7 c0             	movzx  eax,ax
c00145e0:	50                   	push   eax
c00145e1:	e8 6c fb ff ff       	call   c0014152 <Vm::realToLinear(unsigned short, unsigned short)>
c00145e6:	5a                   	pop    edx
c00145e7:	8b 6b 48             	mov    ebp,DWORD PTR [ebx+0x48]
c00145ea:	59                   	pop    ecx
c00145eb:	89 c1                	mov    ecx,eax
c00145ed:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00145f0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00145f4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c00145f9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00145fd:	0f b7 c5             	movzx  eax,bp
c0014600:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014604:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0014608:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001460c:	e8 41 fb ff ff       	call   c0014152 <Vm::realToLinear(unsigned short, unsigned short)>
c0014611:	5e                   	pop    esi
c0014612:	be 06 00 00 00       	mov    esi,0x6
c0014617:	5a                   	pop    edx
c0014618:	c6 44 24 03 00       	mov    BYTE PTR [esp+0x3],0x0
c001461d:	c6 44 24 02 00       	mov    BYTE PTR [esp+0x2],0x0
c0014622:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0014625:	80 fa 9d             	cmp    dl,0x9d
c0014628:	0f 84 2c 02 00 00    	je     c001485a <Vm::faultHandler(regs*)+0x293>
c001462e:	0f 87 91 00 00 00    	ja     c00146c5 <Vm::faultHandler(regs*)+0xfe>
c0014634:	80 fa 66             	cmp    dl,0x66
c0014637:	0f 84 98 01 00 00    	je     c00147d5 <Vm::faultHandler(regs*)+0x20e>
c001463d:	77 47                	ja     c0014686 <Vm::faultHandler(regs*)+0xbf>
c001463f:	80 fa 36             	cmp    dl,0x36
c0014642:	0f 84 80 01 00 00    	je     c00147c8 <Vm::faultHandler(regs*)+0x201>
c0014648:	77 1a                	ja     c0014664 <Vm::faultHandler(regs*)+0x9d>
c001464a:	80 fa 26             	cmp    dl,0x26
c001464d:	0f 84 4e 01 00 00    	je     c00147a1 <Vm::faultHandler(regs*)+0x1da>
c0014653:	80 fa 2e             	cmp    dl,0x2e
c0014656:	0f 85 e2 05 00 00    	jne    c0014c3e <Vm::faultHandler(regs*)+0x677>
c001465c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001465f:	31 f6                	xor    esi,esi
c0014661:	41                   	inc    ecx
c0014662:	eb be                	jmp    c0014622 <Vm::faultHandler(regs*)+0x5b>
c0014664:	80 fa 64             	cmp    dl,0x64
c0014667:	0f 84 41 01 00 00    	je     c00147ae <Vm::faultHandler(regs*)+0x1e7>
c001466d:	0f 87 48 01 00 00    	ja     c00147bb <Vm::faultHandler(regs*)+0x1f4>
c0014673:	80 fa 3e             	cmp    dl,0x3e
c0014676:	0f 85 c2 05 00 00    	jne    c0014c3e <Vm::faultHandler(regs*)+0x677>
c001467c:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001467f:	be 01 00 00 00       	mov    esi,0x1
c0014684:	eb db                	jmp    c0014661 <Vm::faultHandler(regs*)+0x9a>
c0014686:	80 fa 6d             	cmp    dl,0x6d
c0014689:	0f 84 ec 02 00 00    	je     c001497b <Vm::faultHandler(regs*)+0x3b4>
c001468f:	77 17                	ja     c00146a8 <Vm::faultHandler(regs*)+0xe1>
c0014691:	80 fa 67             	cmp    dl,0x67
c0014694:	0f 84 48 01 00 00    	je     c00147e2 <Vm::faultHandler(regs*)+0x21b>
c001469a:	80 fa 6c             	cmp    dl,0x6c
c001469d:	0f 84 69 02 00 00    	je     c001490c <Vm::faultHandler(regs*)+0x345>
c00146a3:	e9 96 05 00 00       	jmp    c0014c3e <Vm::faultHandler(regs*)+0x677>
c00146a8:	80 fa 6f             	cmp    dl,0x6f
c00146ab:	0f 84 f4 03 00 00    	je     c0014aa5 <Vm::faultHandler(regs*)+0x4de>
c00146b1:	0f 82 59 03 00 00    	jb     c0014a10 <Vm::faultHandler(regs*)+0x449>
c00146b7:	80 fa 9c             	cmp    dl,0x9c
c00146ba:	0f 84 2f 01 00 00    	je     c00147ef <Vm::faultHandler(regs*)+0x228>
c00146c0:	e9 79 05 00 00       	jmp    c0014c3e <Vm::faultHandler(regs*)+0x677>
c00146c5:	80 fa ec             	cmp    dl,0xec
c00146c8:	0f 84 14 05 00 00    	je     c0014be2 <Vm::faultHandler(regs*)+0x61b>
c00146ce:	77 7b                	ja     c001474b <Vm::faultHandler(regs*)+0x184>
c00146d0:	80 fa e4             	cmp    dl,0xe4
c00146d3:	0f 84 93 04 00 00    	je     c0014b6c <Vm::faultHandler(regs*)+0x5a5>
c00146d9:	77 53                	ja     c001472e <Vm::faultHandler(regs*)+0x167>
c00146db:	80 fa cd             	cmp    dl,0xcd
c00146de:	0f 84 d9 01 00 00    	je     c00148bd <Vm::faultHandler(regs*)+0x2f6>
c00146e4:	80 fa cf             	cmp    dl,0xcf
c00146e7:	0f 85 51 05 00 00    	jne    c0014c3e <Vm::faultHandler(regs*)+0x677>
c00146ed:	0f b7 10             	movzx  edx,WORD PTR [eax]
c00146f0:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c00146f3:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c00146f7:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c00146fa:	0f b7 50 04          	movzx  edx,WORD PTR [eax+0x4]
c00146fe:	81 ca 00 02 02 00    	or     edx,0x20200
c0014704:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014707:	66 8b 40 04          	mov    ax,WORD PTR [eax+0x4]
c001470b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0014711:	66 c1 e8 09          	shr    ax,0x9
c0014715:	83 e0 01             	and    eax,0x1
c0014718:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c001471b:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c001471e:	83 c0 06             	add    eax,0x6
c0014721:	25 ff ff 00 00       	and    eax,0xffff
c0014726:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0014729:	e9 0c 05 00 00       	jmp    c0014c3a <Vm::faultHandler(regs*)+0x673>
c001472e:	80 fa e6             	cmp    dl,0xe6
c0014731:	0f 84 7f 04 00 00    	je     c0014bb6 <Vm::faultHandler(regs*)+0x5ef>
c0014737:	0f 82 4b 04 00 00    	jb     c0014b88 <Vm::faultHandler(regs*)+0x5c1>
c001473d:	80 fa e7             	cmp    dl,0xe7
c0014740:	0f 84 87 04 00 00    	je     c0014bcd <Vm::faultHandler(regs*)+0x606>
c0014746:	e9 f3 04 00 00       	jmp    c0014c3e <Vm::faultHandler(regs*)+0x677>
c001474b:	80 fa ef             	cmp    dl,0xef
c001474e:	0f 84 d1 04 00 00    	je     c0014c25 <Vm::faultHandler(regs*)+0x65e>
c0014754:	77 28                	ja     c001477e <Vm::faultHandler(regs*)+0x1b7>
c0014756:	80 fa ed             	cmp    dl,0xed
c0014759:	0f 84 9f 04 00 00    	je     c0014bfe <Vm::faultHandler(regs*)+0x637>
c001475f:	80 fa ee             	cmp    dl,0xee
c0014762:	0f 85 d6 04 00 00    	jne    c0014c3e <Vm::faultHandler(regs*)+0x677>
c0014768:	50                   	push   eax
c0014769:	50                   	push   eax
c001476a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c001476e:	50                   	push   eax
c001476f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014773:	50                   	push   eax
c0014774:	e8 a3 f9 ff ff       	call   c001411c <Vm::outbv(unsigned short, unsigned char)>
c0014779:	e9 9f 04 00 00       	jmp    c0014c1d <Vm::faultHandler(regs*)+0x656>
c001477e:	80 fa fa             	cmp    dl,0xfa
c0014781:	0f 84 69 01 00 00    	je     c00148f0 <Vm::faultHandler(regs*)+0x329>
c0014787:	80 fa fb             	cmp    dl,0xfb
c001478a:	0f 84 6e 01 00 00    	je     c00148fe <Vm::faultHandler(regs*)+0x337>
c0014790:	80 fa f3             	cmp    dl,0xf3
c0014793:	0f 85 a5 04 00 00    	jne    c0014c3e <Vm::faultHandler(regs*)+0x677>
c0014799:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c001479c:	e9 c0 fe ff ff       	jmp    c0014661 <Vm::faultHandler(regs*)+0x9a>
c00147a1:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00147a4:	be 02 00 00 00       	mov    esi,0x2
c00147a9:	e9 b3 fe ff ff       	jmp    c0014661 <Vm::faultHandler(regs*)+0x9a>
c00147ae:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00147b1:	be 03 00 00 00       	mov    esi,0x3
c00147b6:	e9 a6 fe ff ff       	jmp    c0014661 <Vm::faultHandler(regs*)+0x9a>
c00147bb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00147be:	be 04 00 00 00       	mov    esi,0x4
c00147c3:	e9 99 fe ff ff       	jmp    c0014661 <Vm::faultHandler(regs*)+0x9a>
c00147c8:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00147cb:	be 05 00 00 00       	mov    esi,0x5
c00147d0:	e9 8c fe ff ff       	jmp    c0014661 <Vm::faultHandler(regs*)+0x9a>
c00147d5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00147d8:	c6 44 24 02 01       	mov    BYTE PTR [esp+0x2],0x1
c00147dd:	e9 7f fe ff ff       	jmp    c0014661 <Vm::faultHandler(regs*)+0x9a>
c00147e2:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00147e5:	c6 44 24 03 01       	mov    BYTE PTR [esp+0x3],0x1
c00147ea:	e9 72 fe ff ff       	jmp    c0014661 <Vm::faultHandler(regs*)+0x9a>
c00147ef:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c00147f2:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00147f6:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00147fb:	74 30                	je     c001482d <Vm::faultHandler(regs*)+0x266>
c00147fd:	83 e9 04             	sub    ecx,0x4
c0014800:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014806:	81 e1 ff ff 00 00    	and    ecx,0xffff
c001480c:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c001480f:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014812:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014818:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c001481c:	0f 84 15 04 00 00    	je     c0014c37 <Vm::faultHandler(regs*)+0x670>
c0014822:	80 ce 02             	or     dh,0x2
c0014825:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0014828:	e9 0a 04 00 00       	jmp    c0014c37 <Vm::faultHandler(regs*)+0x670>
c001482d:	83 e9 02             	sub    ecx,0x2
c0014830:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0014836:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0014839:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c001483d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0014843:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0014847:	74 05                	je     c001484e <Vm::faultHandler(regs*)+0x287>
c0014849:	80 ce 02             	or     dh,0x2
c001484c:	eb 03                	jmp    c0014851 <Vm::faultHandler(regs*)+0x28a>
c001484e:	80 e6 fd             	and    dh,0xfd
c0014851:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0014855:	e9 dd 03 00 00       	jmp    c0014c37 <Vm::faultHandler(regs*)+0x670>
c001485a:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c001485f:	74 2a                	je     c001488b <Vm::faultHandler(regs*)+0x2c4>
c0014861:	8b 10                	mov    edx,DWORD PTR [eax]
c0014863:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0014869:	81 ca 00 02 02 00    	or     edx,0x20200
c001486f:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014872:	8b 00                	mov    eax,DWORD PTR [eax]
c0014874:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001487a:	c1 e8 09             	shr    eax,0x9
c001487d:	83 e0 01             	and    eax,0x1
c0014880:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0014883:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0014886:	83 c0 04             	add    eax,0x4
c0014889:	eb 25                	jmp    c00148b0 <Vm::faultHandler(regs*)+0x2e9>
c001488b:	0f b7 10             	movzx  edx,WORD PTR [eax]
c001488e:	81 ca 00 02 02 00    	or     edx,0x20200
c0014894:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0014897:	66 8b 00             	mov    ax,WORD PTR [eax]
c001489a:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00148a0:	66 c1 e8 09          	shr    ax,0x9
c00148a4:	83 e0 01             	and    eax,0x1
c00148a7:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c00148aa:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c00148ad:	83 c0 02             	add    eax,0x2
c00148b0:	25 ff ff 00 00       	and    eax,0xffff
c00148b5:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c00148b8:	e9 7a 03 00 00       	jmp    c0014c37 <Vm::faultHandler(regs*)+0x670>
c00148bd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00148c1:	3c ee                	cmp    al,0xee
c00148c3:	75 10                	jne    c00148d5 <Vm::faultHandler(regs*)+0x30e>
c00148c5:	83 ec 0c             	sub    esp,0xc
c00148c8:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c00148cb:	e8 e9 f8 ff ff       	call   c00141b9 <Vm::mainloop3(unsigned long)>
c00148d0:	e9 4b 03 00 00       	jmp    c0014c20 <Vm::faultHandler(regs*)+0x659>
c00148d5:	83 ec 0c             	sub    esp,0xc
c00148d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00148dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00148e0:	51                   	push   ecx
c00148e1:	50                   	push   eax
c00148e2:	53                   	push   ebx
c00148e3:	e8 e1 fb ff ff       	call   c00144c9 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c00148e8:	83 c4 20             	add    esp,0x20
c00148eb:	e9 4a 03 00 00       	jmp    c0014c3a <Vm::faultHandler(regs*)+0x673>
c00148f0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00148f5:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c00148f9:	e9 39 03 00 00       	jmp    c0014c37 <Vm::faultHandler(regs*)+0x670>
c00148fe:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014903:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0014907:	e9 2b 03 00 00       	jmp    c0014c37 <Vm::faultHandler(regs*)+0x670>
c001490c:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001490f:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014914:	74 2b                	je     c0014941 <Vm::faultHandler(regs*)+0x37a>
c0014916:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c001491d:	76 22                	jbe    c0014941 <Vm::faultHandler(regs*)+0x37a>
c001491f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014923:	50                   	push   eax
c0014924:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014928:	50                   	push   eax
c0014929:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001492d:	50                   	push   eax
c001492e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014932:	50                   	push   eax
c0014933:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014937:	50                   	push   eax
c0014938:	6a 6c                	push   0x6c
c001493a:	6a 6c                	push   0x6c
c001493c:	e9 b9 01 00 00       	jmp    c0014afa <Vm::faultHandler(regs*)+0x533>
c0014941:	83 ec 0c             	sub    esp,0xc
c0014944:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014948:	0f b7 f6             	movzx  esi,si
c001494b:	50                   	push   eax
c001494c:	e8 b8 f7 ff ff       	call   c0014109 <Vm::inbv(unsigned short)>
c0014951:	83 c4 0c             	add    esp,0xc
c0014954:	0f b6 c0             	movzx  eax,al
c0014957:	50                   	push   eax
c0014958:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c001495c:	50                   	push   eax
c001495d:	56                   	push   esi
c001495e:	e8 24 fc ff ff       	call   c0014587 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c0014963:	83 c4 10             	add    esp,0x10
c0014966:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014969:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001496d:	74 03                	je     c0014972 <Vm::faultHandler(regs*)+0x3ab>
c001496f:	48                   	dec    eax
c0014970:	eb 01                	jmp    c0014973 <Vm::faultHandler(regs*)+0x3ac>
c0014972:	40                   	inc    eax
c0014973:	0f b7 c0             	movzx  eax,ax
c0014976:	e9 8d 00 00 00       	jmp    c0014a08 <Vm::faultHandler(regs*)+0x441>
c001497b:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c001497e:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014981:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014986:	74 29                	je     c00149b1 <Vm::faultHandler(regs*)+0x3ea>
c0014988:	3d ff ff 00 00       	cmp    eax,0xffff
c001498d:	76 22                	jbe    c00149b1 <Vm::faultHandler(regs*)+0x3ea>
c001498f:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014993:	50                   	push   eax
c0014994:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014998:	50                   	push   eax
c0014999:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c001499d:	50                   	push   eax
c001499e:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00149a2:	50                   	push   eax
c00149a3:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00149a7:	50                   	push   eax
c00149a8:	6a 6d                	push   0x6d
c00149aa:	6a 6d                	push   0x6d
c00149ac:	e9 49 01 00 00       	jmp    c0014afa <Vm::faultHandler(regs*)+0x533>
c00149b1:	0f b7 c8             	movzx  ecx,ax
c00149b4:	0f b7 f6             	movzx  esi,si
c00149b7:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00149ba:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c00149bf:	74 20                	je     c00149e1 <Vm::faultHandler(regs*)+0x41a>
c00149c1:	ed                   	in     eax,dx
c00149c2:	55                   	push   ebp
c00149c3:	50                   	push   eax
c00149c4:	51                   	push   ecx
c00149c5:	56                   	push   esi
c00149c6:	e8 e7 fb ff ff       	call   c00145b2 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c00149cb:	83 c4 10             	add    esp,0x10
c00149ce:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00149d1:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00149d5:	74 05                	je     c00149dc <Vm::faultHandler(regs*)+0x415>
c00149d7:	83 e8 04             	sub    eax,0x4
c00149da:	eb 27                	jmp    c0014a03 <Vm::faultHandler(regs*)+0x43c>
c00149dc:	83 c0 04             	add    eax,0x4
c00149df:	eb 22                	jmp    c0014a03 <Vm::faultHandler(regs*)+0x43c>
c00149e1:	66 ed                	in     ax,dx
c00149e3:	0f b7 c0             	movzx  eax,ax
c00149e6:	57                   	push   edi
c00149e7:	50                   	push   eax
c00149e8:	51                   	push   ecx
c00149e9:	56                   	push   esi
c00149ea:	e8 ad fb ff ff       	call   c001459c <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c00149ef:	83 c4 10             	add    esp,0x10
c00149f2:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00149f5:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c00149f9:	74 05                	je     c0014a00 <Vm::faultHandler(regs*)+0x439>
c00149fb:	83 e8 02             	sub    eax,0x2
c00149fe:	eb 03                	jmp    c0014a03 <Vm::faultHandler(regs*)+0x43c>
c0014a00:	83 c0 02             	add    eax,0x2
c0014a03:	25 ff ff 00 00       	and    eax,0xffff
c0014a08:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0014a0b:	e9 27 02 00 00       	jmp    c0014c37 <Vm::faultHandler(regs*)+0x670>
c0014a10:	8d 46 ff             	lea    eax,[esi-0x1]
c0014a13:	3c 05                	cmp    al,0x5
c0014a15:	77 24                	ja     c0014a3b <Vm::faultHandler(regs*)+0x474>
c0014a17:	0f b6 c0             	movzx  eax,al
c0014a1a:	ff 24 85 c0 e6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1940]
c0014a21:	0f b7 fd             	movzx  edi,bp
c0014a24:	eb 15                	jmp    c0014a3b <Vm::faultHandler(regs*)+0x474>
c0014a26:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c0014a2a:	eb 0f                	jmp    c0014a3b <Vm::faultHandler(regs*)+0x474>
c0014a2c:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c0014a30:	eb 09                	jmp    c0014a3b <Vm::faultHandler(regs*)+0x474>
c0014a32:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c0014a36:	eb 03                	jmp    c0014a3b <Vm::faultHandler(regs*)+0x474>
c0014a38:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c0014a3b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014a3e:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014a43:	74 29                	je     c0014a6e <Vm::faultHandler(regs*)+0x4a7>
c0014a45:	3d ff ff 00 00       	cmp    eax,0xffff
c0014a4a:	76 22                	jbe    c0014a6e <Vm::faultHandler(regs*)+0x4a7>
c0014a4c:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014a50:	50                   	push   eax
c0014a51:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014a55:	50                   	push   eax
c0014a56:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014a5a:	50                   	push   eax
c0014a5b:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014a5f:	50                   	push   eax
c0014a60:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014a64:	50                   	push   eax
c0014a65:	6a 6e                	push   0x6e
c0014a67:	6a 6e                	push   0x6e
c0014a69:	e9 8c 00 00 00       	jmp    c0014afa <Vm::faultHandler(regs*)+0x533>
c0014a6e:	0f b7 c0             	movzx  eax,ax
c0014a71:	52                   	push   edx
c0014a72:	52                   	push   edx
c0014a73:	50                   	push   eax
c0014a74:	57                   	push   edi
c0014a75:	e8 d9 fa ff ff       	call   c0014553 <Vm::readByteFromReal(unsigned short, unsigned short)>
c0014a7a:	59                   	pop    ecx
c0014a7b:	0f b6 c0             	movzx  eax,al
c0014a7e:	5e                   	pop    esi
c0014a7f:	50                   	push   eax
c0014a80:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014a84:	50                   	push   eax
c0014a85:	e8 92 f6 ff ff       	call   c001411c <Vm::outbv(unsigned short, unsigned char)>
c0014a8a:	83 c4 10             	add    esp,0x10
c0014a8d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014a90:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0014a94:	74 03                	je     c0014a99 <Vm::faultHandler(regs*)+0x4d2>
c0014a96:	48                   	dec    eax
c0014a97:	eb 01                	jmp    c0014a9a <Vm::faultHandler(regs*)+0x4d3>
c0014a99:	40                   	inc    eax
c0014a9a:	0f b7 c0             	movzx  eax,ax
c0014a9d:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0014aa0:	e9 92 01 00 00       	jmp    c0014c37 <Vm::faultHandler(regs*)+0x670>
c0014aa5:	8d 46 ff             	lea    eax,[esi-0x1]
c0014aa8:	3c 05                	cmp    al,0x5
c0014aaa:	77 1f                	ja     c0014acb <Vm::faultHandler(regs*)+0x504>
c0014aac:	0f b6 c0             	movzx  eax,al
c0014aaf:	ff 24 85 d8 e6 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe1928]
c0014ab6:	89 ef                	mov    edi,ebp
c0014ab8:	eb 11                	jmp    c0014acb <Vm::faultHandler(regs*)+0x504>
c0014aba:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0014abd:	eb 0c                	jmp    c0014acb <Vm::faultHandler(regs*)+0x504>
c0014abf:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c0014ac2:	eb 07                	jmp    c0014acb <Vm::faultHandler(regs*)+0x504>
c0014ac4:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0014ac7:	eb 02                	jmp    c0014acb <Vm::faultHandler(regs*)+0x504>
c0014ac9:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0014acb:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0014ace:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0014ad3:	74 37                	je     c0014b0c <Vm::faultHandler(regs*)+0x545>
c0014ad5:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0014adb:	76 2f                	jbe    c0014b0c <Vm::faultHandler(regs*)+0x545>
c0014add:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014ae1:	50                   	push   eax
c0014ae2:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014ae6:	50                   	push   eax
c0014ae7:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014aeb:	50                   	push   eax
c0014aec:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014af0:	50                   	push   eax
c0014af1:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014af5:	50                   	push   eax
c0014af6:	6a 6f                	push   0x6f
c0014af8:	6a 6f                	push   0x6f
c0014afa:	68 66 e6 01 c0       	push   0xc001e666
c0014aff:	e8 24 5c ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0014b04:	83 c4 20             	add    esp,0x20
c0014b07:	e9 86 01 00 00       	jmp    c0014c92 <Vm::faultHandler(regs*)+0x6cb>
c0014b0c:	0f b7 d7             	movzx  edx,di
c0014b0f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0014b12:	0f b7 c6             	movzx  eax,si
c0014b15:	81 e1 00 04 00 00    	and    ecx,0x400
c0014b1b:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c0014b1e:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b23:	74 1d                	je     c0014b42 <Vm::faultHandler(regs*)+0x57b>
c0014b25:	55                   	push   ebp
c0014b26:	55                   	push   ebp
c0014b27:	50                   	push   eax
c0014b28:	52                   	push   edx
c0014b29:	e8 48 fa ff ff       	call   c0014576 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c0014b2e:	83 c4 10             	add    esp,0x10
c0014b31:	89 fa                	mov    edx,edi
c0014b33:	ef                   	out    dx,eax
c0014b34:	85 c9                	test   ecx,ecx
c0014b36:	74 05                	je     c0014b3d <Vm::faultHandler(regs*)+0x576>
c0014b38:	83 ee 04             	sub    esi,0x4
c0014b3b:	eb 21                	jmp    c0014b5e <Vm::faultHandler(regs*)+0x597>
c0014b3d:	83 c6 04             	add    esi,0x4
c0014b40:	eb 1c                	jmp    c0014b5e <Vm::faultHandler(regs*)+0x597>
c0014b42:	55                   	push   ebp
c0014b43:	55                   	push   ebp
c0014b44:	50                   	push   eax
c0014b45:	52                   	push   edx
c0014b46:	e8 19 fa ff ff       	call   c0014564 <Vm::readWordFromReal(unsigned short, unsigned short)>
c0014b4b:	83 c4 10             	add    esp,0x10
c0014b4e:	89 fa                	mov    edx,edi
c0014b50:	66 ef                	out    dx,ax
c0014b52:	85 c9                	test   ecx,ecx
c0014b54:	74 05                	je     c0014b5b <Vm::faultHandler(regs*)+0x594>
c0014b56:	83 ee 02             	sub    esi,0x2
c0014b59:	eb 03                	jmp    c0014b5e <Vm::faultHandler(regs*)+0x597>
c0014b5b:	83 c6 02             	add    esi,0x2
c0014b5e:	81 e6 ff ff 00 00    	and    esi,0xffff
c0014b64:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0014b67:	e9 cb 00 00 00       	jmp    c0014c37 <Vm::faultHandler(regs*)+0x670>
c0014b6c:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014b73:	83 ec 0c             	sub    esp,0xc
c0014b76:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014b7a:	50                   	push   eax
c0014b7b:	e8 89 f5 ff ff       	call   c0014109 <Vm::inbv(unsigned short)>
c0014b80:	0f b6 c0             	movzx  eax,al
c0014b83:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014b86:	eb 3f                	jmp    c0014bc7 <Vm::faultHandler(regs*)+0x600>
c0014b88:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014b8d:	74 07                	je     c0014b96 <Vm::faultHandler(regs*)+0x5cf>
c0014b8f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014b93:	ed                   	in     eax,dx
c0014b94:	eb 14                	jmp    c0014baa <Vm::faultHandler(regs*)+0x5e3>
c0014b96:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0014b99:	66 31 f6             	xor    si,si
c0014b9c:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0014b9f:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014ba3:	66 ed                	in     ax,dx
c0014ba5:	0f b7 c0             	movzx  eax,ax
c0014ba8:	09 f0                	or     eax,esi
c0014baa:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014bad:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014bb1:	e9 84 00 00 00       	jmp    c0014c3a <Vm::faultHandler(regs*)+0x673>
c0014bb6:	52                   	push   edx
c0014bb7:	52                   	push   edx
c0014bb8:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0014bbc:	50                   	push   eax
c0014bbd:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014bc1:	50                   	push   eax
c0014bc2:	e8 55 f5 ff ff       	call   c001411c <Vm::outbv(unsigned short, unsigned char)>
c0014bc7:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0014bcb:	eb 53                	jmp    c0014c20 <Vm::faultHandler(regs*)+0x659>
c0014bcd:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014bd0:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0014bd4:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014bd9:	74 03                	je     c0014bde <Vm::faultHandler(regs*)+0x617>
c0014bdb:	ef                   	out    dx,eax
c0014bdc:	eb cf                	jmp    c0014bad <Vm::faultHandler(regs*)+0x5e6>
c0014bde:	66 ef                	out    dx,ax
c0014be0:	eb cb                	jmp    c0014bad <Vm::faultHandler(regs*)+0x5e6>
c0014be2:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c0014be9:	83 ec 0c             	sub    esp,0xc
c0014bec:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0014bf0:	50                   	push   eax
c0014bf1:	e8 13 f5 ff ff       	call   c0014109 <Vm::inbv(unsigned short)>
c0014bf6:	0f b6 c0             	movzx  eax,al
c0014bf9:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c0014bfc:	eb 1f                	jmp    c0014c1d <Vm::faultHandler(regs*)+0x656>
c0014bfe:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014c01:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c06:	74 03                	je     c0014c0b <Vm::faultHandler(regs*)+0x644>
c0014c08:	ed                   	in     eax,dx
c0014c09:	eb 0d                	jmp    c0014c18 <Vm::faultHandler(regs*)+0x651>
c0014c0b:	66 ed                	in     ax,dx
c0014c0d:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0014c10:	0f b7 c0             	movzx  eax,ax
c0014c13:	66 31 d2             	xor    dx,dx
c0014c16:	09 d0                	or     eax,edx
c0014c18:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0014c1b:	eb 1a                	jmp    c0014c37 <Vm::faultHandler(regs*)+0x670>
c0014c1d:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c20:	83 c4 10             	add    esp,0x10
c0014c23:	eb 15                	jmp    c0014c3a <Vm::faultHandler(regs*)+0x673>
c0014c25:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0014c28:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0014c2b:	80 7c 24 02 00       	cmp    BYTE PTR [esp+0x2],0x0
c0014c30:	74 03                	je     c0014c35 <Vm::faultHandler(regs*)+0x66e>
c0014c32:	ef                   	out    dx,eax
c0014c33:	eb 02                	jmp    c0014c37 <Vm::faultHandler(regs*)+0x670>
c0014c35:	66 ef                	out    dx,ax
c0014c37:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0014c3a:	b0 01                	mov    al,0x1
c0014c3c:	eb 56                	jmp    c0014c94 <Vm::faultHandler(regs*)+0x6cd>
c0014c3e:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0014c42:	50                   	push   eax
c0014c43:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0014c47:	50                   	push   eax
c0014c48:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0014c4c:	50                   	push   eax
c0014c4d:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0014c51:	50                   	push   eax
c0014c52:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0014c56:	50                   	push   eax
c0014c57:	52                   	push   edx
c0014c58:	52                   	push   edx
c0014c59:	68 93 e6 01 c0       	push   0xc001e693
c0014c5e:	e8 c5 5a ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0014c63:	83 c4 20             	add    esp,0x20
c0014c66:	83 ec 0c             	sub    esp,0xc
c0014c69:	6a 60                	push   0x60
c0014c6b:	e8 99 f4 ff ff       	call   c0014109 <Vm::inbv(unsigned short)>
c0014c70:	83 c4 10             	add    esp,0x10
c0014c73:	3c 1c                	cmp    al,0x1c
c0014c75:	74 04                	je     c0014c7b <Vm::faultHandler(regs*)+0x6b4>
c0014c77:	3c 5a                	cmp    al,0x5a
c0014c79:	75 eb                	jne    c0014c66 <Vm::faultHandler(regs*)+0x69f>
c0014c7b:	3c 5a                	cmp    al,0x5a
c0014c7d:	74 04                	je     c0014c83 <Vm::faultHandler(regs*)+0x6bc>
c0014c7f:	3c 1c                	cmp    al,0x1c
c0014c81:	75 0f                	jne    c0014c92 <Vm::faultHandler(regs*)+0x6cb>
c0014c83:	83 ec 0c             	sub    esp,0xc
c0014c86:	6a 60                	push   0x60
c0014c88:	e8 7c f4 ff ff       	call   c0014109 <Vm::inbv(unsigned short)>
c0014c8d:	83 c4 10             	add    esp,0x10
c0014c90:	eb e9                	jmp    c0014c7b <Vm::faultHandler(regs*)+0x6b4>
c0014c92:	31 c0                	xor    eax,eax
c0014c94:	83 c4 1c             	add    esp,0x1c
c0014c97:	5b                   	pop    ebx
c0014c98:	5e                   	pop    esi
c0014c99:	5f                   	pop    edi
c0014c9a:	5d                   	pop    ebp
c0014c9b:	c3                   	ret    

c0014c9c <noCopro(unsigned long)>:
c0014c9c:	c3                   	ret    

c0014c9d <nmiHandler(regs*, void*)>:
c0014c9d:	83 ec 0c             	sub    esp,0xc
c0014ca0:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0014ca5:	83 ec 0c             	sub    esp,0xc
c0014ca8:	50                   	push   eax
c0014ca9:	e8 10 25 ff ff       	call   c00071be <Computer::handleNMI()>
c0014cae:	83 c4 10             	add    esp,0x10
c0014cb1:	90                   	nop
c0014cb2:	83 c4 0c             	add    esp,0xc
c0014cb5:	c3                   	ret    

c0014cb6 <doubleFault(regs*, void*)>:
c0014cb6:	55                   	push   ebp
c0014cb7:	89 e5                	mov    ebp,esp
c0014cb9:	83 ec 08             	sub    esp,0x8
c0014cbc:	83 ec 0c             	sub    esp,0xc
c0014cbf:	68 f0 e6 01 c0       	push   0xc001e6f0
c0014cc4:	e8 ae b5 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0014cc9:	83 c4 10             	add    esp,0x10
c0014ccc:	90                   	nop
c0014ccd:	c9                   	leave  
c0014cce:	c3                   	ret    

c0014ccf <displayDebugInfo(regs*)>:
c0014ccf:	83 ec 1c             	sub    esp,0x1c
c0014cd2:	0f 20 c0             	mov    eax,cr0
c0014cd5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014cd9:	0f 20 d0             	mov    eax,cr2
c0014cdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0014ce0:	0f 20 d8             	mov    eax,cr3
c0014ce3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014ce7:	0f 20 e0             	mov    eax,cr4
c0014cea:	89 04 24             	mov    DWORD PTR [esp],eax
c0014ced:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014cf1:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0014cf4:	83 ec 08             	sub    esp,0x8
c0014cf7:	50                   	push   eax
c0014cf8:	68 0c e7 01 c0       	push   0xc001e70c
c0014cfd:	e8 26 5a ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0014d02:	83 c4 10             	add    esp,0x10
c0014d05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d09:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0014d0c:	83 ec 08             	sub    esp,0x8
c0014d0f:	50                   	push   eax
c0014d10:	68 fd e6 01 c0       	push   0xc001e6fd
c0014d15:	e8 0e 5a ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0014d1a:	83 c4 10             	add    esp,0x10
c0014d1d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d21:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0014d24:	83 ec 08             	sub    esp,0x8
c0014d27:	50                   	push   eax
c0014d28:	68 08 e7 01 c0       	push   0xc001e708
c0014d2d:	e8 f6 59 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0014d32:	83 c4 10             	add    esp,0x10
c0014d35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014d3c:	83 ec 08             	sub    esp,0x8
c0014d3f:	50                   	push   eax
c0014d40:	68 17 e7 01 c0       	push   0xc001e717
c0014d45:	e8 de 59 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0014d4a:	83 c4 10             	add    esp,0x10
c0014d4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d51:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c0014d54:	83 ec 08             	sub    esp,0x8
c0014d57:	50                   	push   eax
c0014d58:	68 22 e7 01 c0       	push   0xc001e722
c0014d5d:	e8 c6 59 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0014d62:	83 c4 10             	add    esp,0x10
c0014d65:	83 ec 08             	sub    esp,0x8
c0014d68:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014d6c:	68 2d e7 01 c0       	push   0xc001e72d
c0014d71:	e8 b2 59 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0014d76:	83 c4 10             	add    esp,0x10
c0014d79:	83 ec 08             	sub    esp,0x8
c0014d7c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014d80:	68 38 e7 01 c0       	push   0xc001e738
c0014d85:	e8 9e 59 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0014d8a:	83 c4 10             	add    esp,0x10
c0014d8d:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014d92:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014d98:	83 ec 0c             	sub    esp,0xc
c0014d9b:	50                   	push   eax
c0014d9c:	e8 28 39 ff ff       	call   c00086c9 <setActiveTerminal(VgaText*)>
c0014da1:	83 c4 10             	add    esp,0x10
c0014da4:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014da9:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014daf:	83 ec 08             	sub    esp,0x8
c0014db2:	68 43 e7 01 c0       	push   0xc001e743
c0014db7:	50                   	push   eax
c0014db8:	e8 4b 3c ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0014dbd:	83 c4 10             	add    esp,0x10
c0014dc0:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014dc5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014dcb:	ba 00 20 00 c2       	mov    edx,0xc2002000
c0014dd0:	8b 12                	mov    edx,DWORD PTR [edx]
c0014dd2:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014dd5:	83 c2 0c             	add    edx,0xc
c0014dd8:	83 ec 08             	sub    esp,0x8
c0014ddb:	52                   	push   edx
c0014ddc:	50                   	push   eax
c0014ddd:	e8 26 3c ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0014de2:	83 c4 10             	add    esp,0x10
c0014de5:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014dea:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014df0:	83 ec 08             	sub    esp,0x8
c0014df3:	68 4c e7 01 c0       	push   0xc001e74c
c0014df8:	50                   	push   eax
c0014df9:	e8 0a 3c ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0014dfe:	83 c4 10             	add    esp,0x10
c0014e01:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014e06:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e0c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e10:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c0014e13:	83 ec 08             	sub    esp,0x8
c0014e16:	52                   	push   edx
c0014e17:	50                   	push   eax
c0014e18:	e8 a5 3b ff ff       	call   c00089c2 <VgaText::putx(unsigned int)>
c0014e1d:	83 c4 10             	add    esp,0x10
c0014e20:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014e25:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e2b:	83 ec 08             	sub    esp,0x8
c0014e2e:	68 54 e7 01 c0       	push   0xc001e754
c0014e33:	50                   	push   eax
c0014e34:	e8 cf 3b ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0014e39:	83 c4 10             	add    esp,0x10
c0014e3c:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014e41:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e47:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e4b:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c0014e4e:	83 ec 08             	sub    esp,0x8
c0014e51:	52                   	push   edx
c0014e52:	50                   	push   eax
c0014e53:	e8 6a 3b ff ff       	call   c00089c2 <VgaText::putx(unsigned int)>
c0014e58:	83 c4 10             	add    esp,0x10
c0014e5b:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014e60:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e66:	83 ec 08             	sub    esp,0x8
c0014e69:	68 5c e7 01 c0       	push   0xc001e75c
c0014e6e:	50                   	push   eax
c0014e6f:	e8 94 3b ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0014e74:	83 c4 10             	add    esp,0x10
c0014e77:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014e7c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014e82:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014e86:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0014e89:	83 ec 08             	sub    esp,0x8
c0014e8c:	52                   	push   edx
c0014e8d:	50                   	push   eax
c0014e8e:	e8 2f 3b ff ff       	call   c00089c2 <VgaText::putx(unsigned int)>
c0014e93:	83 c4 10             	add    esp,0x10
c0014e96:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014e9b:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ea1:	83 ec 08             	sub    esp,0x8
c0014ea4:	68 64 e7 01 c0       	push   0xc001e764
c0014ea9:	50                   	push   eax
c0014eaa:	e8 59 3b ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0014eaf:	83 c4 10             	add    esp,0x10
c0014eb2:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014eb7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ebd:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014ec1:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c0014ec4:	83 ec 08             	sub    esp,0x8
c0014ec7:	52                   	push   edx
c0014ec8:	50                   	push   eax
c0014ec9:	e8 f4 3a ff ff       	call   c00089c2 <VgaText::putx(unsigned int)>
c0014ece:	83 c4 10             	add    esp,0x10
c0014ed1:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014ed6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014edc:	83 ec 08             	sub    esp,0x8
c0014edf:	68 6c e7 01 c0       	push   0xc001e76c
c0014ee4:	50                   	push   eax
c0014ee5:	e8 1e 3b ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0014eea:	83 c4 10             	add    esp,0x10
c0014eed:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014ef2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014ef8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014efc:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c0014eff:	83 ec 08             	sub    esp,0x8
c0014f02:	52                   	push   edx
c0014f03:	50                   	push   eax
c0014f04:	e8 b9 3a ff ff       	call   c00089c2 <VgaText::putx(unsigned int)>
c0014f09:	83 c4 10             	add    esp,0x10
c0014f0c:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014f11:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f17:	83 ec 08             	sub    esp,0x8
c0014f1a:	68 74 e7 01 c0       	push   0xc001e774
c0014f1f:	50                   	push   eax
c0014f20:	e8 e3 3a ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0014f25:	83 c4 10             	add    esp,0x10
c0014f28:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014f2d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f33:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014f37:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0014f3a:	83 ec 08             	sub    esp,0x8
c0014f3d:	52                   	push   edx
c0014f3e:	50                   	push   eax
c0014f3f:	e8 7e 3a ff ff       	call   c00089c2 <VgaText::putx(unsigned int)>
c0014f44:	83 c4 10             	add    esp,0x10
c0014f47:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014f4c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f52:	83 ec 08             	sub    esp,0x8
c0014f55:	68 7c e7 01 c0       	push   0xc001e77c
c0014f5a:	50                   	push   eax
c0014f5b:	e8 a8 3a ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0014f60:	83 c4 10             	add    esp,0x10
c0014f63:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014f68:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f6e:	83 ec 08             	sub    esp,0x8
c0014f71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014f75:	50                   	push   eax
c0014f76:	e8 47 3a ff ff       	call   c00089c2 <VgaText::putx(unsigned int)>
c0014f7b:	83 c4 10             	add    esp,0x10
c0014f7e:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014f83:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014f89:	83 ec 08             	sub    esp,0x8
c0014f8c:	68 85 e7 01 c0       	push   0xc001e785
c0014f91:	50                   	push   eax
c0014f92:	e8 71 3a ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0014f97:	83 c4 10             	add    esp,0x10
c0014f9a:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014f9f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fa5:	83 ec 08             	sub    esp,0x8
c0014fa8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014fac:	50                   	push   eax
c0014fad:	e8 10 3a ff ff       	call   c00089c2 <VgaText::putx(unsigned int)>
c0014fb2:	83 c4 10             	add    esp,0x10
c0014fb5:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014fba:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fc0:	83 ec 08             	sub    esp,0x8
c0014fc3:	68 8d e7 01 c0       	push   0xc001e78d
c0014fc8:	50                   	push   eax
c0014fc9:	e8 3a 3a ff ff       	call   c0008a08 <VgaText::puts(char const*)>
c0014fce:	83 c4 10             	add    esp,0x10
c0014fd1:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c0014fd6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0014fdc:	83 ec 08             	sub    esp,0x8
c0014fdf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0014fe3:	50                   	push   eax
c0014fe4:	e8 d9 39 ff ff       	call   c00089c2 <VgaText::putx(unsigned int)>
c0014fe9:	83 c4 10             	add    esp,0x10
c0014fec:	fa                   	cli    
c0014fed:	f4                   	hlt    
c0014fee:	eb fe                	jmp    c0014fee <displayDebugInfo(regs*)+0x31f>

c0014ff0 <displayProgramFault(char const*)>:
c0014ff0:	83 ec 0c             	sub    esp,0xc
c0014ff3:	83 ec 0c             	sub    esp,0xc
c0014ff6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ffa:	e8 29 57 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0014fff:	83 c4 10             	add    esp,0x10
c0015002:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0015007:	8b 00                	mov    eax,DWORD PTR [eax]
c0015009:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001500c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015012:	85 c0                	test   eax,eax
c0015014:	74 21                	je     c0015037 <displayProgramFault(char const*)+0x47>
c0015016:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001501b:	8b 00                	mov    eax,DWORD PTR [eax]
c001501d:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015020:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015026:	6a 04                	push   0x4
c0015028:	6a 0f                	push   0xf
c001502a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001502e:	50                   	push   eax
c001502f:	e8 46 3a ff ff       	call   c0008a7a <VgaText::puts(char const*, VgaColour, VgaColour)>
c0015034:	83 c4 10             	add    esp,0x10
c0015037:	90                   	nop
c0015038:	83 c4 0c             	add    esp,0xc
c001503b:	c3                   	ret    

c001503c <gpFault(regs*, void*)>:
c001503c:	83 ec 1c             	sub    esp,0x1c
c001503f:	c7 05 f0 38 02 c0 c7 45 01 c0 	mov    DWORD PTR ds:0xc00238f0,0xc00145c7
c0015049:	a1 f0 38 02 c0       	mov    eax,ds:0xc00238f0
c001504e:	85 c0                	test   eax,eax
c0015050:	74 1c                	je     c001506e <gpFault(regs*, void*)+0x32>
c0015052:	a1 f0 38 02 c0       	mov    eax,ds:0xc00238f0
c0015057:	83 ec 0c             	sub    esp,0xc
c001505a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001505e:	ff d0                	call   eax
c0015060:	83 c4 10             	add    esp,0x10
c0015063:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015067:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001506c:	75 2e                	jne    c001509c <gpFault(regs*, void*)+0x60>
c001506e:	83 ec 0c             	sub    esp,0xc
c0015071:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015075:	e8 55 fc ff ff       	call   c0014ccf <displayDebugInfo(regs*)>
c001507a:	83 c4 10             	add    esp,0x10
c001507d:	83 ec 0c             	sub    esp,0xc
c0015080:	68 95 e7 01 c0       	push   0xc001e795
c0015085:	e8 66 ff ff ff       	call   c0014ff0 <displayProgramFault(char const*)>
c001508a:	83 c4 10             	add    esp,0x10
c001508d:	83 ec 0c             	sub    esp,0xc
c0015090:	6a 00                	push   0x0
c0015092:	e8 25 ef ff ff       	call   c0013fbc <Thr::terminateFromIRQ(int)>
c0015097:	83 c4 10             	add    esp,0x10
c001509a:	eb 01                	jmp    c001509d <gpFault(regs*, void*)+0x61>
c001509c:	90                   	nop
c001509d:	83 c4 1c             	add    esp,0x1c
c00150a0:	c3                   	ret    

c00150a1 <pgFault(regs*, void*)>:
c00150a1:	83 ec 1c             	sub    esp,0x1c
c00150a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00150a8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00150ab:	0f 20 d0             	mov    eax,cr2
c00150ae:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00150b2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00150b6:	83 ec 04             	sub    esp,0x4
c00150b9:	52                   	push   edx
c00150ba:	50                   	push   eax
c00150bb:	68 00 e8 01 c0       	push   0xc001e800
c00150c0:	e8 63 56 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c00150c5:	83 c4 10             	add    esp,0x10
c00150c8:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00150cd:	8b 00                	mov    eax,DWORD PTR [eax]
c00150cf:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00150d2:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c00150d8:	0f 20 d2             	mov    edx,cr2
c00150db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00150df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00150e3:	83 ec 08             	sub    esp,0x8
c00150e6:	52                   	push   edx
c00150e7:	50                   	push   eax
c00150e8:	e8 6d 52 ff ff       	call   c000a35a <VAS::tryLoadBackOffDisk(unsigned long)>
c00150ed:	83 c4 10             	add    esp,0x10
c00150f0:	84 c0                	test   al,al
c00150f2:	75 2e                	jne    c0015122 <pgFault(regs*, void*)+0x81>
c00150f4:	83 ec 0c             	sub    esp,0xc
c00150f7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00150fb:	e8 cf fb ff ff       	call   c0014ccf <displayDebugInfo(regs*)>
c0015100:	83 c4 10             	add    esp,0x10
c0015103:	83 ec 0c             	sub    esp,0xc
c0015106:	68 ae e7 01 c0       	push   0xc001e7ae
c001510b:	e8 e0 fe ff ff       	call   c0014ff0 <displayProgramFault(char const*)>
c0015110:	83 c4 10             	add    esp,0x10
c0015113:	83 ec 0c             	sub    esp,0xc
c0015116:	6a 00                	push   0x0
c0015118:	e8 9f ee ff ff       	call   c0013fbc <Thr::terminateFromIRQ(int)>
c001511d:	83 c4 10             	add    esp,0x10
c0015120:	eb 01                	jmp    c0015123 <pgFault(regs*, void*)+0x82>
c0015122:	90                   	nop
c0015123:	83 c4 1c             	add    esp,0x1c
c0015126:	c3                   	ret    

c0015127 <otherISRHandler(regs*, void*)>:
c0015127:	83 ec 0c             	sub    esp,0xc
c001512a:	83 ec 0c             	sub    esp,0xc
c001512d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015131:	e8 99 fb ff ff       	call   c0014ccf <displayDebugInfo(regs*)>
c0015136:	83 c4 10             	add    esp,0x10
c0015139:	83 ec 0c             	sub    esp,0xc
c001513c:	68 28 e8 01 c0       	push   0xc001e828
c0015141:	e8 aa fe ff ff       	call   c0014ff0 <displayProgramFault(char const*)>
c0015146:	83 c4 10             	add    esp,0x10
c0015149:	83 ec 0c             	sub    esp,0xc
c001514c:	6a 00                	push   0x0
c001514e:	e8 69 ee ff ff       	call   c0013fbc <Thr::terminateFromIRQ(int)>
c0015153:	83 c4 10             	add    esp,0x10
c0015156:	90                   	nop
c0015157:	83 c4 0c             	add    esp,0xc
c001515a:	c3                   	ret    

c001515b <opcodeFault(regs*, void*)>:
c001515b:	55                   	push   ebp
c001515c:	89 e5                	mov    ebp,esp
c001515e:	83 ec 08             	sub    esp,0x8
c0015161:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015164:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015167:	83 ec 08             	sub    esp,0x8
c001516a:	50                   	push   eax
c001516b:	68 b9 e7 01 c0       	push   0xc001e7b9
c0015170:	e8 b3 55 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c0015175:	83 c4 10             	add    esp,0x10
c0015178:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c001517d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015183:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0015189:	84 c0                	test   al,al
c001518b:	74 21                	je     c00151ae <opcodeFault(regs*, void*)+0x53>
c001518d:	83 ec 0c             	sub    esp,0xc
c0015190:	68 50 e8 01 c0       	push   0xc001e850
c0015195:	e8 8e 55 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001519a:	83 c4 10             	add    esp,0x10
c001519d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00151a3:	8d 50 19             	lea    edx,[eax+0x19]
c00151a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00151ac:	eb 2b                	jmp    c00151d9 <opcodeFault(regs*, void*)+0x7e>
c00151ae:	83 ec 0c             	sub    esp,0xc
c00151b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00151b4:	e8 16 fb ff ff       	call   c0014ccf <displayDebugInfo(regs*)>
c00151b9:	83 c4 10             	add    esp,0x10
c00151bc:	83 ec 0c             	sub    esp,0xc
c00151bf:	68 c7 e7 01 c0       	push   0xc001e7c7
c00151c4:	e8 27 fe ff ff       	call   c0014ff0 <displayProgramFault(char const*)>
c00151c9:	83 c4 10             	add    esp,0x10
c00151cc:	83 ec 0c             	sub    esp,0xc
c00151cf:	6a 00                	push   0x0
c00151d1:	e8 e6 ed ff ff       	call   c0013fbc <Thr::terminateFromIRQ(int)>
c00151d6:	83 c4 10             	add    esp,0x10
c00151d9:	c9                   	leave  
c00151da:	c3                   	ret    

c00151db <i386SaveCoprocessor(void*)>:
c00151db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151df:	83 c0 3f             	add    eax,0x3f
c00151e2:	83 e0 c0             	and    eax,0xffffffc0
c00151e5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151e9:	ff 25 ec 38 02 c0    	jmp    DWORD PTR ds:0xc00238ec

c00151ef <i386LoadCoprocessor(void*)>:
c00151ef:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00151f3:	83 c0 3f             	add    eax,0x3f
c00151f6:	83 e0 c0             	and    eax,0xffffffc0
c00151f9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00151fd:	ff 25 e8 38 02 c0    	jmp    DWORD PTR ds:0xc00238e8

c0015203 <x87EmulHandler(regs*, void*)>:
c0015203:	53                   	push   ebx
c0015204:	83 ec 08             	sub    esp,0x8
c0015207:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001520c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c0015210:	74 10                	je     c0015222 <x87EmulHandler(regs*, void*)+0x1f>
c0015212:	83 ec 0c             	sub    esp,0xc
c0015215:	68 d4 e7 01 c0       	push   0xc001e7d4
c001521a:	e8 58 b0 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001521f:	83 c4 10             	add    esp,0x10
c0015222:	0f 20 c0             	mov    eax,cr0
c0015225:	a8 08                	test   al,0x8
c0015227:	74 59                	je     c0015282 <x87EmulHandler(regs*, void*)+0x7f>
c0015229:	0f 06                	clts   
c001522b:	a1 e4 38 02 c0       	mov    eax,ds:0xc00238e4
c0015230:	85 c0                	test   eax,eax
c0015232:	74 0e                	je     c0015242 <x87EmulHandler(regs*, void*)+0x3f>
c0015234:	83 ec 0c             	sub    esp,0xc
c0015237:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001523a:	e8 9c ff ff ff       	call   c00151db <i386SaveCoprocessor(void*)>
c001523f:	83 c4 10             	add    esp,0x10
c0015242:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c0015248:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c001524c:	75 12                	jne    c0015260 <x87EmulHandler(regs*, void*)+0x5d>
c001524e:	83 ec 0c             	sub    esp,0xc
c0015251:	68 40 02 00 00       	push   0x240
c0015256:	e8 3e 27 ff ff       	call   c0007999 <malloc>
c001525b:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c001525e:	eb 10                	jmp    c0015270 <x87EmulHandler(regs*, void*)+0x6d>
c0015260:	83 ec 0c             	sub    esp,0xc
c0015263:	a1 e4 38 02 c0       	mov    eax,ds:0xc00238e4
c0015268:	ff 70 55             	push   DWORD PTR [eax+0x55]
c001526b:	e8 7f ff ff ff       	call   c00151ef <i386LoadCoprocessor(void*)>
c0015270:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015275:	83 c4 10             	add    esp,0x10
c0015278:	a3 e4 38 02 c0       	mov    ds:0xc00238e4,eax
c001527d:	83 c4 08             	add    esp,0x8
c0015280:	5b                   	pop    ebx
c0015281:	c3                   	ret    
c0015282:	83 ec 0c             	sub    esp,0xc
c0015285:	68 e8 e7 01 c0       	push   0xc001e7e8
c001528a:	e8 99 54 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001528f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0015297:	83 c4 18             	add    esp,0x18
c001529a:	5b                   	pop    ebx
c001529b:	e9 1c ed ff ff       	jmp    c0013fbc <Thr::terminateFromIRQ(int)>

c00152a0 <HalInitialiseCoprocessor()>:
c00152a0:	83 ec 10             	sub    esp,0x10
c00152a3:	c7 05 e4 38 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00238e4,0x0
c00152ad:	6a 00                	push   0x0
c00152af:	68 03 52 01 c0       	push   0xc0015203
c00152b4:	6a 07                	push   0x7
c00152b6:	e8 e1 6d ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00152bb:	e8 e0 62 00 00       	call   c001b5a0 <avxDetect>
c00152c0:	83 c4 10             	add    esp,0x10
c00152c3:	85 c0                	test   eax,eax
c00152c5:	74 1c                	je     c00152e3 <HalInitialiseCoprocessor()+0x43>
c00152c7:	c7 05 ec 38 02 c0 ca b5 01 c0 	mov    DWORD PTR ds:0xc00238ec,0xc001b5ca
c00152d1:	c7 05 e8 38 02 c0 db b5 01 c0 	mov    DWORD PTR ds:0xc00238e8,0xc001b5db
c00152db:	83 c4 0c             	add    esp,0xc
c00152de:	e9 09 63 00 00       	jmp    c001b5ec <avxInit>
c00152e3:	e8 38 65 00 00       	call   c001b820 <absolutelyNoChanceInHell>
c00152e8:	85 c0                	test   eax,eax
c00152ea:	74 1c                	je     c0015308 <HalInitialiseCoprocessor()+0x68>
c00152ec:	c7 05 ec 38 02 c0 38 b8 01 c0 	mov    DWORD PTR ds:0xc00238ec,0xc001b838
c00152f6:	c7 05 e8 38 02 c0 40 b8 01 c0 	mov    DWORD PTR ds:0xc00238e8,0xc001b840
c0015300:	83 c4 0c             	add    esp,0xc
c0015303:	e9 40 65 00 00       	jmp    c001b848 <sseInit>
c0015308:	e8 59 65 00 00       	call   c001b866 <x87Detect>
c001530d:	85 c0                	test   eax,eax
c001530f:	74 1c                	je     c001532d <HalInitialiseCoprocessor()+0x8d>
c0015311:	c7 05 ec 38 02 c0 81 b8 01 c0 	mov    DWORD PTR ds:0xc00238ec,0xc001b881
c001531b:	c7 05 e8 38 02 c0 88 b8 01 c0 	mov    DWORD PTR ds:0xc00238e8,0xc001b888
c0015325:	83 c4 0c             	add    esp,0xc
c0015328:	e9 62 65 00 00       	jmp    c001b88f <x87Init>
c001532d:	c7 05 ec 38 02 c0 9c 4c 01 c0 	mov    DWORD PTR ds:0xc00238ec,0xc0014c9c
c0015337:	c7 05 e8 38 02 c0 9c 4c 01 c0 	mov    DWORD PTR ds:0xc00238e8,0xc0014c9c
c0015341:	0f 20 c0             	mov    eax,cr0
c0015344:	83 c8 04             	or     eax,0x4
c0015347:	0f 22 c0             	mov    cr0,eax
c001534a:	83 c4 0c             	add    esp,0xc
c001534d:	c3                   	ret    

c001534e <HalPanic(char const*)>:
c001534e:	e9 24 af ff ff       	jmp    c0010277 <Krnl::panic(char const*)>

c0015353 <HalQueryPerformanceCounter()>:
c0015353:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0015358:	31 d2                	xor    edx,edx
c001535a:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0015360:	31 c0                	xor    eax,eax
c0015362:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0015369:	74 02                	je     c001536d <HalQueryPerformanceCounter()+0x1a>
c001536b:	0f 31                	rdtsc  
c001536d:	c3                   	ret    

c001536e <HalInitialise()>:
c001536e:	53                   	push   ebx
c001536f:	83 ec 08             	sub    esp,0x8
c0015372:	e8 58 6f ff ff       	call   c000c2cf <setupINTS()>
c0015377:	80 3d 40 2c 02 c0 00 	cmp    BYTE PTR ds:0xc0022c40,0x0
c001537e:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0015383:	75 07                	jne    c001538c <HalInitialise()+0x1e>
c0015385:	80 a0 6c 01 00 00 fe 	and    BYTE PTR [eax+0x16c],0xfe
c001538c:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c0015392:	83 e0 01             	and    eax,0x1
c0015395:	a2 e0 38 02 c0       	mov    ds:0xc00238e0,al
c001539a:	e8 a9 02 00 00       	call   c0015648 <picOpen()>
c001539f:	80 3d e0 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238e0,0x0
c00153a6:	74 0a                	je     c00153b2 <HalInitialise()+0x44>
c00153a8:	e8 e3 01 00 00       	call   c0015590 <picDisable()>
c00153ad:	e8 5e 5b 00 00       	call   c001af10 <apicOpen()>
c00153b2:	bb 0f 00 00 00       	mov    ebx,0xf
c00153b7:	50                   	push   eax
c00153b8:	6a 00                	push   0x0
c00153ba:	68 27 51 01 c0       	push   0xc0015127
c00153bf:	6a 00                	push   0x0
c00153c1:	e8 d6 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153c6:	83 c4 0c             	add    esp,0xc
c00153c9:	6a 00                	push   0x0
c00153cb:	68 27 51 01 c0       	push   0xc0015127
c00153d0:	6a 01                	push   0x1
c00153d2:	e8 c5 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153d7:	83 c4 0c             	add    esp,0xc
c00153da:	6a 00                	push   0x0
c00153dc:	68 9d 4c 01 c0       	push   0xc0014c9d
c00153e1:	6a 02                	push   0x2
c00153e3:	e8 b4 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153e8:	83 c4 0c             	add    esp,0xc
c00153eb:	6a 00                	push   0x0
c00153ed:	68 27 51 01 c0       	push   0xc0015127
c00153f2:	6a 03                	push   0x3
c00153f4:	e8 a3 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00153f9:	83 c4 0c             	add    esp,0xc
c00153fc:	6a 00                	push   0x0
c00153fe:	68 27 51 01 c0       	push   0xc0015127
c0015403:	6a 04                	push   0x4
c0015405:	e8 92 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001540a:	83 c4 0c             	add    esp,0xc
c001540d:	6a 00                	push   0x0
c001540f:	68 27 51 01 c0       	push   0xc0015127
c0015414:	6a 05                	push   0x5
c0015416:	e8 81 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001541b:	83 c4 0c             	add    esp,0xc
c001541e:	6a 00                	push   0x0
c0015420:	68 5b 51 01 c0       	push   0xc001515b
c0015425:	6a 06                	push   0x6
c0015427:	e8 70 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001542c:	83 c4 0c             	add    esp,0xc
c001542f:	6a 00                	push   0x0
c0015431:	68 b6 4c 01 c0       	push   0xc0014cb6
c0015436:	6a 08                	push   0x8
c0015438:	e8 5f 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001543d:	83 c4 0c             	add    esp,0xc
c0015440:	6a 00                	push   0x0
c0015442:	68 27 51 01 c0       	push   0xc0015127
c0015447:	6a 09                	push   0x9
c0015449:	e8 4e 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001544e:	83 c4 0c             	add    esp,0xc
c0015451:	6a 00                	push   0x0
c0015453:	68 27 51 01 c0       	push   0xc0015127
c0015458:	6a 0a                	push   0xa
c001545a:	e8 3d 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c001545f:	83 c4 0c             	add    esp,0xc
c0015462:	6a 00                	push   0x0
c0015464:	68 27 51 01 c0       	push   0xc0015127
c0015469:	6a 0b                	push   0xb
c001546b:	e8 2c 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015470:	83 c4 0c             	add    esp,0xc
c0015473:	6a 00                	push   0x0
c0015475:	68 3c 50 01 c0       	push   0xc001503c
c001547a:	6a 0d                	push   0xd
c001547c:	e8 1b 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015481:	83 c4 0c             	add    esp,0xc
c0015484:	6a 00                	push   0x0
c0015486:	68 a1 50 01 c0       	push   0xc00150a1
c001548b:	6a 0e                	push   0xe
c001548d:	e8 0a 6c ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c0015492:	83 c4 10             	add    esp,0x10
c0015495:	50                   	push   eax
c0015496:	6a 00                	push   0x0
c0015498:	68 27 51 01 c0       	push   0xc0015127
c001549d:	53                   	push   ebx
c001549e:	43                   	inc    ebx
c001549f:	e8 f8 6b ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154a4:	83 c4 10             	add    esp,0x10
c00154a7:	83 fb 1e             	cmp    ebx,0x1e
c00154aa:	75 e9                	jne    c0015495 <HalInitialise()+0x127>
c00154ac:	50                   	push   eax
c00154ad:	6a 00                	push   0x0
c00154af:	68 1d 1c 01 c0       	push   0xc0011c1d
c00154b4:	6a 60                	push   0x60
c00154b6:	e8 e1 6b ff ff       	call   c000c09c <installISRHandler(int, void (*)(regs*, void*), void*)>
c00154bb:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c00154c0:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c00154ca:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c00154d1:	e8 c3 24 ff ff       	call   c0007999 <malloc>
c00154d6:	89 04 24             	mov    DWORD PTR [esp],eax
c00154d9:	89 c3                	mov    ebx,eax
c00154db:	e8 30 09 00 00       	call   c0015e10 <RTC::RTC()>
c00154e0:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c00154ea:	5a                   	pop    edx
c00154eb:	59                   	pop    ecx
c00154ec:	53                   	push   ebx
c00154ed:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c00154f3:	e8 70 66 ff ff       	call   c000bb68 <Device::addChild(Device*)>
c00154f8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00154fa:	6a 00                	push   0x0
c00154fc:	6a 00                	push   0x0
c00154fe:	6a 00                	push   0x0
c0015500:	53                   	push   ebx
c0015501:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0015504:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0015509:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c001550f:	83 c4 28             	add    esp,0x28
c0015512:	5b                   	pop    ebx
c0015513:	c3                   	ret    

c0015514 <HalMakeBeep(int)>:
c0015514:	53                   	push   ebx
c0015515:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0015519:	85 db                	test   ebx,ebx
c001551b:	75 07                	jne    c0015524 <HalMakeBeep(int)+0x10>
c001551d:	e4 61                	in     al,0x61
c001551f:	83 e0 fc             	and    eax,0xfffffffc
c0015522:	eb 26                	jmp    c001554a <HalMakeBeep(int)+0x36>
c0015524:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0015529:	99                   	cdq    
c001552a:	f7 fb                	idiv   ebx
c001552c:	89 c1                	mov    ecx,eax
c001552e:	b0 b6                	mov    al,0xb6
c0015530:	e6 43                	out    0x43,al
c0015532:	88 c8                	mov    al,cl
c0015534:	e6 42                	out    0x42,al
c0015536:	89 c8                	mov    eax,ecx
c0015538:	c1 e8 08             	shr    eax,0x8
c001553b:	e6 42                	out    0x42,al
c001553d:	e4 61                	in     al,0x61
c001553f:	88 c2                	mov    dl,al
c0015541:	83 ca 03             	or     edx,0x3
c0015544:	38 c2                	cmp    dl,al
c0015546:	74 04                	je     c001554c <HalMakeBeep(int)+0x38>
c0015548:	88 d0                	mov    al,dl
c001554a:	e6 61                	out    0x61,al
c001554c:	5b                   	pop    ebx
c001554d:	c3                   	ret    

c001554e <HalGetRand()>:
c001554e:	31 c0                	xor    eax,eax
c0015550:	c3                   	ret    

c0015551 <HalEndOfInterrupt(int)>:
c0015551:	80 3d e0 38 02 c0 00 	cmp    BYTE PTR ds:0xc00238e0,0x0
c0015558:	74 23                	je     c001557d <HalEndOfInterrupt(int)+0x2c>
c001555a:	83 ec 14             	sub    esp,0x14
c001555d:	6a 1b                	push   0x1b
c001555f:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015565:	e8 6c 1a ff ff       	call   c0006fd6 <Computer::rdmsr(unsigned int)>
c001556a:	25 00 f0 ff ff       	and    eax,0xfffff000
c001556f:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0015579:	83 c4 1c             	add    esp,0x1c
c001557c:	c3                   	ret    
c001557d:	e9 56 02 00 00       	jmp    c00157d8 <picEOI(int)>

c0015582 <HalRestart()>:
c0015582:	c3                   	ret    

c0015583 <HalShutdown()>:
c0015583:	c3                   	ret    

c0015584 <HalSleep()>:
c0015584:	c3                   	ret    
c0015585:	66 90                	xchg   ax,ax
c0015587:	90                   	nop

c0015588 <picIoWait()>:
c0015588:	eb 00                	jmp    c001558a <picIoWait()+0x2>
c001558a:	eb 00                	jmp    c001558c <picIoWait()+0x4>
c001558c:	90                   	nop
c001558d:	c3                   	ret    
c001558e:	66 90                	xchg   ax,ax

c0015590 <picDisable()>:
c0015590:	83 ec 10             	sub    esp,0x10
c0015593:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c001559a:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c001559f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00155a3:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00155a8:	ee                   	out    dx,al
c00155a9:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c00155b0:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c00155b5:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c00155b9:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c00155be:	ee                   	out    dx,al
c00155bf:	90                   	nop
c00155c0:	83 c4 10             	add    esp,0x10
c00155c3:	c3                   	ret    

c00155c4 <picGetIRQReg(int)>:
c00155c4:	83 ec 10             	sub    esp,0x10
c00155c7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00155cb:	25 ff 00 00 00       	and    eax,0xff
c00155d0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00155d7:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c00155db:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00155df:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00155e4:	ee                   	out    dx,al
c00155e5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00155e9:	25 ff 00 00 00       	and    eax,0xff
c00155ee:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00155f5:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00155f9:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00155fd:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015602:	ee                   	out    dx,al
c0015603:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c001560a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c001560f:	89 c2                	mov    edx,eax
c0015611:	ec                   	in     al,dx
c0015612:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0015616:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001561a:	25 ff 00 00 00       	and    eax,0xff
c001561f:	c1 e0 08             	shl    eax,0x8
c0015622:	89 c1                	mov    ecx,eax
c0015624:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c001562b:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0015630:	89 c2                	mov    edx,eax
c0015632:	ec                   	in     al,dx
c0015633:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0015637:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c001563b:	25 ff 00 00 00       	and    eax,0xff
c0015640:	09 c8                	or     eax,ecx
c0015642:	83 c4 10             	add    esp,0x10
c0015645:	c3                   	ret    
c0015646:	66 90                	xchg   ax,ax

c0015648 <picOpen()>:
c0015648:	83 ec 50             	sub    esp,0x50
c001564b:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0015652:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0015657:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001565b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001565f:	ee                   	out    dx,al
c0015660:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0015667:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c001566c:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0015670:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0015674:	ee                   	out    dx,al
c0015675:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c001567d:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0015685:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c001568c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015690:	89 c2                	mov    edx,eax
c0015692:	ec                   	in     al,dx
c0015693:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0015697:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001569b:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c001569f:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c00156a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00156aa:	89 c2                	mov    edx,eax
c00156ac:	ec                   	in     al,dx
c00156ad:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00156b1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00156b5:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c00156b9:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c00156c0:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c00156c5:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c00156c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00156cd:	ee                   	out    dx,al
c00156ce:	e8 b5 fe ff ff       	call   c0015588 <picIoWait()>
c00156d3:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c00156da:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c00156df:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c00156e3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00156e7:	ee                   	out    dx,al
c00156e8:	e8 9b fe ff ff       	call   c0015588 <picIoWait()>
c00156ed:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00156f1:	25 ff 00 00 00       	and    eax,0xff
c00156f6:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c00156fd:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0015701:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0015705:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015709:	ee                   	out    dx,al
c001570a:	e8 79 fe ff ff       	call   c0015588 <picIoWait()>
c001570f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0015713:	25 ff 00 00 00       	and    eax,0xff
c0015718:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c001571f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0015723:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0015727:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001572b:	ee                   	out    dx,al
c001572c:	e8 57 fe ff ff       	call   c0015588 <picIoWait()>
c0015731:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0015738:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c001573d:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0015741:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0015745:	ee                   	out    dx,al
c0015746:	e8 3d fe ff ff       	call   c0015588 <picIoWait()>
c001574b:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0015752:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0015757:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001575b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001575f:	ee                   	out    dx,al
c0015760:	e8 23 fe ff ff       	call   c0015588 <picIoWait()>
c0015765:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001576c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0015771:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0015775:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0015779:	ee                   	out    dx,al
c001577a:	e8 09 fe ff ff       	call   c0015588 <picIoWait()>
c001577f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0015786:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001578b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001578f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015793:	ee                   	out    dx,al
c0015794:	e8 ef fd ff ff       	call   c0015588 <picIoWait()>
c0015799:	8a 44 24 47          	mov    al,BYTE PTR [esp+0x47]
c001579d:	25 ff 00 00 00       	and    eax,0xff
c00157a2:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c00157a9:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c00157ad:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00157b1:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00157b5:	ee                   	out    dx,al
c00157b6:	8a 44 24 46          	mov    al,BYTE PTR [esp+0x46]
c00157ba:	25 ff 00 00 00       	and    eax,0xff
c00157bf:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c00157c6:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c00157ca:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c00157ce:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00157d2:	ee                   	out    dx,al
c00157d3:	90                   	nop
c00157d4:	83 c4 50             	add    esp,0x50
c00157d7:	c3                   	ret    

c00157d8 <picEOI(int)>:
c00157d8:	83 ec 10             	sub    esp,0x10
c00157db:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00157e0:	75 22                	jne    c0015804 <picEOI(int)+0x2c>
c00157e2:	6a 0b                	push   0xb
c00157e4:	e8 db fd ff ff       	call   c00155c4 <picGetIRQReg(int)>
c00157e9:	83 c4 04             	add    esp,0x4
c00157ec:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c00157f1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c00157f6:	25 ff ff 00 00       	and    eax,0xffff
c00157fb:	25 80 00 00 00       	and    eax,0x80
c0015800:	74 72                	je     c0015874 <picEOI(int)+0x9c>
c0015802:	66 90                	xchg   ax,ax
c0015804:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0015809:	75 31                	jne    c001583c <picEOI(int)+0x64>
c001580b:	6a 0b                	push   0xb
c001580d:	e8 b2 fd ff ff       	call   c00155c4 <picGetIRQReg(int)>
c0015812:	83 c4 04             	add    esp,0x4
c0015815:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001581a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001581e:	66 85 c0             	test   ax,ax
c0015821:	78 19                	js     c001583c <picEOI(int)+0x64>
c0015823:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c001582a:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c001582f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0015833:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0015838:	ee                   	out    dx,al
c0015839:	eb 3d                	jmp    c0015878 <picEOI(int)+0xa0>
c001583b:	90                   	nop
c001583c:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0015841:	7e 19                	jle    c001585c <picEOI(int)+0x84>
c0015843:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c001584a:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c001584f:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0015853:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0015858:	ee                   	out    dx,al
c0015859:	8d 76 00             	lea    esi,[esi+0x0]
c001585c:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0015863:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c0015868:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001586c:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0015871:	ee                   	out    dx,al
c0015872:	eb 04                	jmp    c0015878 <picEOI(int)+0xa0>
c0015874:	90                   	nop
c0015875:	8d 76 00             	lea    esi,[esi+0x0]
c0015878:	83 c4 10             	add    esp,0x10
c001587b:	c3                   	ret    

c001587c <RTC::open(int, int, void*)>:
c001587c:	31 c0                	xor    eax,eax
c001587e:	c3                   	ret    
c001587f:	90                   	nop

c0015880 <RTC::close(int, int, void*)>:
c0015880:	31 c0                	xor    eax,eax
c0015882:	c3                   	ret    
c0015883:	90                   	nop

c0015884 <RTC::timeInSecondsUTC()>:
c0015884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015888:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001588e:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0015894:	c3                   	ret    
c0015895:	90                   	nop

c0015896 <RTC::timeInDatetimeUTC()>:
c0015896:	53                   	push   ebx
c0015897:	83 ec 14             	sub    esp,0x14
c001589a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001589e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00158a2:	8b 10                	mov    edx,DWORD PTR [eax]
c00158a4:	50                   	push   eax
c00158a5:	ff 52 24             	call   DWORD PTR [edx+0x24]
c00158a8:	83 c4 0c             	add    esp,0xc
c00158ab:	52                   	push   edx
c00158ac:	50                   	push   eax
c00158ad:	53                   	push   ebx
c00158ae:	e8 29 60 ff ff       	call   c000b8dc <secondsToDatetime(unsigned long long)>
c00158b3:	89 d8                	mov    eax,ebx
c00158b5:	83 c4 14             	add    esp,0x14
c00158b8:	5b                   	pop    ebx
c00158b9:	c2 04 00             	ret    0x4

c00158bc <RTC::setTimeInSecondsUTC(unsigned long long)>:
c00158bc:	56                   	push   esi
c00158bd:	53                   	push   ebx
c00158be:	83 ec 14             	sub    esp,0x14
c00158c1:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00158c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00158c7:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c00158ca:	8d 44 24 08          	lea    eax,[esp+0x8]
c00158ce:	52                   	push   edx
c00158cf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158d3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00158d7:	50                   	push   eax
c00158d8:	e8 ff 5f ff ff       	call   c000b8dc <secondsToDatetime(unsigned long long)>
c00158dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00158e1:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00158e5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00158e9:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c00158ed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00158f1:	89 f0                	mov    eax,esi
c00158f3:	83 c4 20             	add    esp,0x20
c00158f6:	5b                   	pop    ebx
c00158f7:	5e                   	pop    esi
c00158f8:	ff e0                	jmp    eax

c00158fa <RTC::~RTC()>:
c00158fa:	83 ec 0c             	sub    esp,0xc
c00158fd:	ba 90 e8 01 c0       	mov    edx,0xc001e890
c0015902:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015906:	89 10                	mov    DWORD PTR [eax],edx
c0015908:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001590c:	83 ec 0c             	sub    esp,0xc
c001590f:	50                   	push   eax
c0015910:	e8 4b 5d ff ff       	call   c000b660 <Clock::~Clock()>
c0015915:	83 c4 10             	add    esp,0x10
c0015918:	90                   	nop
c0015919:	83 c4 0c             	add    esp,0xc
c001591c:	c3                   	ret    
c001591d:	90                   	nop

c001591e <RTC::~RTC()>:
c001591e:	83 ec 0c             	sub    esp,0xc
c0015921:	83 ec 0c             	sub    esp,0xc
c0015924:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015928:	e8 cd ff ff ff       	call   c00158fa <RTC::~RTC()>
c001592d:	83 c4 10             	add    esp,0x10
c0015930:	83 ec 08             	sub    esp,0x8
c0015933:	68 60 01 00 00       	push   0x160
c0015938:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001593c:	e8 f1 4c ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c0015941:	83 c4 10             	add    esp,0x10
c0015944:	83 c4 0c             	add    esp,0xc
c0015947:	c3                   	ret    

c0015948 <RTC::get_update_in_progress_flag()>:
c0015948:	83 ec 14             	sub    esp,0x14
c001594b:	6a 0a                	push   0xa
c001594d:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015953:	e8 32 17 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c0015958:	83 c4 1c             	add    esp,0x1c
c001595b:	c0 e8 07             	shr    al,0x7
c001595e:	c3                   	ret    
c001595f:	90                   	nop

c0015960 <RTC::completeRTCRefresh()>:
c0015960:	55                   	push   ebp
c0015961:	57                   	push   edi
c0015962:	56                   	push   esi
c0015963:	53                   	push   ebx
c0015964:	83 ec 2c             	sub    esp,0x2c
c0015967:	8b 1d 4c 29 02 c0    	mov    ebx,DWORD PTR ds:0xc002294c
c001596d:	83 ec 0c             	sub    esp,0xc
c0015970:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015974:	e8 cf ff ff ff       	call   c0015948 <RTC::get_update_in_progress_flag()>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	84 c0                	test   al,al
c001597e:	74 0e                	je     c001598e <RTC::completeRTCRefresh()+0x2e>
c0015980:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015986:	3b 05 4c 29 02 c0    	cmp    eax,DWORD PTR ds:0xc002294c
c001598c:	73 df                	jae    c001596d <RTC::completeRTCRefresh()+0xd>
c001598e:	55                   	push   ebp
c001598f:	55                   	push   ebp
c0015990:	6a 00                	push   0x0
c0015992:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015998:	e8 ed 16 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c001599d:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c00159a1:	58                   	pop    eax
c00159a2:	5a                   	pop    edx
c00159a3:	6a 02                	push   0x2
c00159a5:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c00159ab:	e8 da 16 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c00159b0:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00159b4:	59                   	pop    ecx
c00159b5:	5b                   	pop    ebx
c00159b6:	6a 04                	push   0x4
c00159b8:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c00159be:	e8 c7 16 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c00159c3:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00159c7:	5e                   	pop    esi
c00159c8:	5f                   	pop    edi
c00159c9:	6a 07                	push   0x7
c00159cb:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c00159d1:	e8 b4 16 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c00159d6:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c00159da:	5d                   	pop    ebp
c00159db:	58                   	pop    eax
c00159dc:	6a 08                	push   0x8
c00159de:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c00159e4:	e8 a1 16 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c00159e9:	88 44 24 2f          	mov    BYTE PTR [esp+0x2f],al
c00159ed:	58                   	pop    eax
c00159ee:	5a                   	pop    edx
c00159ef:	6a 09                	push   0x9
c00159f1:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c00159f7:	e8 8e 16 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c00159fc:	83 c4 10             	add    esp,0x10
c00159ff:	0f b6 e8             	movzx  ebp,al
c0015a02:	8b 1d 4c 29 02 c0    	mov    ebx,DWORD PTR ds:0xc002294c
c0015a08:	83 ec 0c             	sub    esp,0xc
c0015a0b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015a0f:	e8 34 ff ff ff       	call   c0015948 <RTC::get_update_in_progress_flag()>
c0015a14:	83 c4 10             	add    esp,0x10
c0015a17:	84 c0                	test   al,al
c0015a19:	74 0e                	je     c0015a29 <RTC::completeRTCRefresh()+0xc9>
c0015a1b:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c0015a21:	3b 05 4c 29 02 c0    	cmp    eax,DWORD PTR ds:0xc002294c
c0015a27:	73 df                	jae    c0015a08 <RTC::completeRTCRefresh()+0xa8>
c0015a29:	50                   	push   eax
c0015a2a:	50                   	push   eax
c0015a2b:	6a 00                	push   0x0
c0015a2d:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015a33:	e8 52 16 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c0015a38:	88 44 24 2a          	mov    BYTE PTR [esp+0x2a],al
c0015a3c:	58                   	pop    eax
c0015a3d:	5a                   	pop    edx
c0015a3e:	6a 02                	push   0x2
c0015a40:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015a46:	e8 3f 16 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c0015a4b:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015a4f:	59                   	pop    ecx
c0015a50:	5b                   	pop    ebx
c0015a51:	6a 04                	push   0x4
c0015a53:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015a59:	e8 2c 16 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c0015a5e:	5e                   	pop    esi
c0015a5f:	88 c3                	mov    bl,al
c0015a61:	5f                   	pop    edi
c0015a62:	6a 07                	push   0x7
c0015a64:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015a6a:	e8 1b 16 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c0015a6f:	89 c6                	mov    esi,eax
c0015a71:	58                   	pop    eax
c0015a72:	5a                   	pop    edx
c0015a73:	6a 08                	push   0x8
c0015a75:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015a7b:	e8 0a 16 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c0015a80:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0015a84:	59                   	pop    ecx
c0015a85:	5f                   	pop    edi
c0015a86:	6a 09                	push   0x9
c0015a88:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015a8e:	e8 f7 15 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c0015a93:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0015a97:	0f b6 f8             	movzx  edi,al
c0015a9a:	83 c4 10             	add    esp,0x10
c0015a9d:	8a 4c 24 1a          	mov    cl,BYTE PTR [esp+0x1a]
c0015aa1:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015aa5:	38 4c 24 1b          	cmp    BYTE PTR [esp+0x1b],cl
c0015aa9:	89 f1                	mov    ecx,esi
c0015aab:	0f 94 c0             	sete   al
c0015aae:	38 54 24 1c          	cmp    BYTE PTR [esp+0x1c],dl
c0015ab2:	0f 94 c2             	sete   dl
c0015ab5:	21 d0                	and    eax,edx
c0015ab7:	38 5c 24 1d          	cmp    BYTE PTR [esp+0x1d],bl
c0015abb:	0f 94 c2             	sete   dl
c0015abe:	21 c2                	and    edx,eax
c0015ac0:	38 4c 24 1e          	cmp    BYTE PTR [esp+0x1e],cl
c0015ac4:	0f 94 c0             	sete   al
c0015ac7:	21 d0                	and    eax,edx
c0015ac9:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015acd:	38 54 24 1f          	cmp    BYTE PTR [esp+0x1f],dl
c0015ad1:	0f 94 c1             	sete   cl
c0015ad4:	84 c8                	test   al,cl
c0015ad6:	75 29                	jne    c0015b01 <RTC::completeRTCRefresh()+0x1a1>
c0015ad8:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015adc:	89 fd                	mov    ebp,edi
c0015ade:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0015ae2:	88 5c 24 1d          	mov    BYTE PTR [esp+0x1d],bl
c0015ae6:	89 f0                	mov    eax,esi
c0015ae8:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0015aec:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015af0:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0015af4:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015af8:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0015afc:	e9 01 ff ff ff       	jmp    c0015a02 <RTC::completeRTCRefresh()+0xa2>
c0015b01:	39 fd                	cmp    ebp,edi
c0015b03:	75 d3                	jne    c0015ad8 <RTC::completeRTCRefresh()+0x178>
c0015b05:	55                   	push   ebp
c0015b06:	55                   	push   ebp
c0015b07:	6a 0b                	push   0xb
c0015b09:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015b0f:	e8 76 15 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c0015b14:	83 c4 10             	add    esp,0x10
c0015b17:	89 c5                	mov    ebp,eax
c0015b19:	a8 04                	test   al,0x4
c0015b1b:	75 78                	jne    c0015b95 <RTC::completeRTCRefresh()+0x235>
c0015b1d:	b1 0a                	mov    cl,0xa
c0015b1f:	8a 54 24 1a          	mov    dl,BYTE PTR [esp+0x1a]
c0015b23:	8a 44 24 1a          	mov    al,BYTE PTR [esp+0x1a]
c0015b27:	83 e2 0f             	and    edx,0xf
c0015b2a:	c0 e8 04             	shr    al,0x4
c0015b2d:	c1 ef 04             	shr    edi,0x4
c0015b30:	f6 e1                	mul    cl
c0015b32:	6b ff 0a             	imul   edi,edi,0xa
c0015b35:	01 d0                	add    eax,edx
c0015b37:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0015b3b:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0015b3f:	83 e2 0f             	and    edx,0xf
c0015b42:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0015b46:	c0 e8 04             	shr    al,0x4
c0015b49:	f6 e1                	mul    cl
c0015b4b:	01 d0                	add    eax,edx
c0015b4d:	88 da                	mov    dl,bl
c0015b4f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0015b53:	83 e2 0f             	and    edx,0xf
c0015b56:	88 d8                	mov    al,bl
c0015b58:	83 e3 80             	and    ebx,0xffffff80
c0015b5b:	c0 e8 04             	shr    al,0x4
c0015b5e:	83 e0 07             	and    eax,0x7
c0015b61:	f6 e1                	mul    cl
c0015b63:	01 d0                	add    eax,edx
c0015b65:	89 f2                	mov    edx,esi
c0015b67:	09 c3                	or     ebx,eax
c0015b69:	83 e2 0f             	and    edx,0xf
c0015b6c:	89 f0                	mov    eax,esi
c0015b6e:	c0 e8 04             	shr    al,0x4
c0015b71:	f6 e1                	mul    cl
c0015b73:	8d 34 02             	lea    esi,[edx+eax*1]
c0015b76:	8a 54 24 10          	mov    dl,BYTE PTR [esp+0x10]
c0015b7a:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0015b7e:	83 e2 0f             	and    edx,0xf
c0015b81:	c0 e8 04             	shr    al,0x4
c0015b84:	f6 e1                	mul    cl
c0015b86:	01 d0                	add    eax,edx
c0015b88:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0015b8c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015b90:	83 e0 0f             	and    eax,0xf
c0015b93:	01 c7                	add    edi,eax
c0015b95:	83 e5 02             	and    ebp,0x2
c0015b98:	75 14                	jne    c0015bae <RTC::completeRTCRefresh()+0x24e>
c0015b9a:	84 db                	test   bl,bl
c0015b9c:	79 10                	jns    c0015bae <RTC::completeRTCRefresh()+0x24e>
c0015b9e:	83 e3 7f             	and    ebx,0x7f
c0015ba1:	b9 18 00 00 00       	mov    ecx,0x18
c0015ba6:	8d 43 0c             	lea    eax,[ebx+0xc]
c0015ba9:	99                   	cdq    
c0015baa:	f7 f9                	idiv   ecx
c0015bac:	88 d3                	mov    bl,dl
c0015bae:	8d af d0 07 00 00    	lea    ebp,[edi+0x7d0]
c0015bb4:	81 fd e3 07 00 00    	cmp    ebp,0x7e3
c0015bba:	77 06                	ja     c0015bc2 <RTC::completeRTCRefresh()+0x262>
c0015bbc:	8d af 34 08 00 00    	lea    ebp,[edi+0x834]
c0015bc2:	0f b6 4c 24 1a       	movzx  ecx,BYTE PTR [esp+0x1a]
c0015bc7:	31 d2                	xor    edx,edx
c0015bc9:	c1 e1 10             	shl    ecx,0x10
c0015bcc:	89 d7                	mov    edi,edx
c0015bce:	c1 e5 10             	shl    ebp,0x10
c0015bd1:	31 c0                	xor    eax,eax
c0015bd3:	81 e7 ff ff 00 ff    	and    edi,0xff00ffff
c0015bd9:	09 cf                	or     edi,ecx
c0015bdb:	89 fa                	mov    edx,edi
c0015bdd:	8a 74 24 0c          	mov    dh,BYTE PTR [esp+0xc]
c0015be1:	88 da                	mov    dl,bl
c0015be3:	89 f3                	mov    ebx,esi
c0015be5:	88 5c 24 1a          	mov    BYTE PTR [esp+0x1a],bl
c0015be9:	88 d8                	mov    al,bl
c0015beb:	8a 64 24 10          	mov    ah,BYTE PTR [esp+0x10]
c0015bef:	0f b7 c8             	movzx  ecx,ax
c0015bf2:	09 e9                	or     ecx,ebp
c0015bf4:	89 c8                	mov    eax,ecx
c0015bf6:	51                   	push   ecx
c0015bf7:	51                   	push   ecx
c0015bf8:	52                   	push   edx
c0015bf9:	50                   	push   eax
c0015bfa:	e8 50 5b ff ff       	call   c000b74f <datetimeToSeconds(datetime_t)>
c0015bff:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0015c03:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c0015c09:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c0015c0f:	83 c4 3c             	add    esp,0x3c
c0015c12:	5b                   	pop    ebx
c0015c13:	5e                   	pop    esi
c0015c14:	5f                   	pop    edi
c0015c15:	5d                   	pop    ebp
c0015c16:	c3                   	ret    
c0015c17:	90                   	nop

c0015c18 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c0015c18:	55                   	push   ebp
c0015c19:	57                   	push   edi
c0015c1a:	56                   	push   esi
c0015c1b:	53                   	push   ebx
c0015c1c:	83 ec 30             	sub    esp,0x30
c0015c1f:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0015c23:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0015c27:	6a 00                	push   0x0
c0015c29:	6a 00                	push   0x0
c0015c2b:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015c31:	e8 6a 15 ff ff       	call   c00071a0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c36:	83 c4 0c             	add    esp,0xc
c0015c39:	6a 00                	push   0x0
c0015c3b:	6a 02                	push   0x2
c0015c3d:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015c43:	e8 58 15 ff ff       	call   c00071a0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015c48:	31 d2                	xor    edx,edx
c0015c4a:	89 f9                	mov    ecx,edi
c0015c4c:	89 f8                	mov    eax,edi
c0015c4e:	c1 e9 10             	shr    ecx,0x10
c0015c51:	0f b6 c4             	movzx  eax,ah
c0015c54:	88 4c 24 27          	mov    BYTE PTR [esp+0x27],cl
c0015c58:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0015c5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0015c60:	b9 64 00 00 00       	mov    ecx,0x64
c0015c65:	89 f0                	mov    eax,esi
c0015c67:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0015c6b:	89 f0                	mov    eax,esi
c0015c6d:	0f b6 c4             	movzx  eax,ah
c0015c70:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0015c74:	89 f0                	mov    eax,esi
c0015c76:	c1 e8 10             	shr    eax,0x10
c0015c79:	66 f7 f1             	div    cx
c0015c7c:	66 89 54 24 2a       	mov    WORD PTR [esp+0x2a],dx
c0015c81:	0f b6 6c 24 2a       	movzx  ebp,BYTE PTR [esp+0x2a]
c0015c86:	59                   	pop    ecx
c0015c87:	5b                   	pop    ebx
c0015c88:	89 fb                	mov    ebx,edi
c0015c8a:	6a 0b                	push   0xb
c0015c8c:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015c92:	e8 f3 13 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c0015c97:	88 44 24 29          	mov    BYTE PTR [esp+0x29],al
c0015c9b:	83 c4 10             	add    esp,0x10
c0015c9e:	f6 44 24 19 04       	test   BYTE PTR [esp+0x19],0x4
c0015ca3:	75 74                	jne    c0015d19 <RTC::setTimeInDatetimeUTC(datetime_t)+0x101>
c0015ca5:	b2 0a                	mov    dl,0xa
c0015ca7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0015cab:	0f b6 c1             	movzx  eax,cl
c0015cae:	f6 f2                	div    dl
c0015cb0:	88 c3                	mov    bl,al
c0015cb2:	88 e0                	mov    al,ah
c0015cb4:	c1 e3 04             	shl    ebx,0x4
c0015cb7:	09 c3                	or     ebx,eax
c0015cb9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0015cbe:	88 5c 24 17          	mov    BYTE PTR [esp+0x17],bl
c0015cc2:	f6 f2                	div    dl
c0015cc4:	88 c1                	mov    cl,al
c0015cc6:	88 e0                	mov    al,ah
c0015cc8:	c1 e1 04             	shl    ecx,0x4
c0015ccb:	09 c1                	or     ecx,eax
c0015ccd:	89 f8                	mov    eax,edi
c0015ccf:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0015cd3:	0f b6 c0             	movzx  eax,al
c0015cd6:	f6 f2                	div    dl
c0015cd8:	88 c3                	mov    bl,al
c0015cda:	88 e0                	mov    al,ah
c0015cdc:	c1 e3 04             	shl    ebx,0x4
c0015cdf:	09 c3                	or     ebx,eax
c0015ce1:	89 f0                	mov    eax,esi
c0015ce3:	0f b6 c0             	movzx  eax,al
c0015ce6:	f6 f2                	div    dl
c0015ce8:	88 c1                	mov    cl,al
c0015cea:	88 e0                	mov    al,ah
c0015cec:	c1 e1 04             	shl    ecx,0x4
c0015cef:	09 c1                	or     ecx,eax
c0015cf1:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015cf6:	88 4c 24 18          	mov    BYTE PTR [esp+0x18],cl
c0015cfa:	f6 f2                	div    dl
c0015cfc:	88 c1                	mov    cl,al
c0015cfe:	88 e0                	mov    al,ah
c0015d00:	c1 e1 04             	shl    ecx,0x4
c0015d03:	09 c1                	or     ecx,eax
c0015d05:	0f b6 44 24 1a       	movzx  eax,BYTE PTR [esp+0x1a]
c0015d0a:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c0015d0e:	f6 f2                	div    dl
c0015d10:	89 c5                	mov    ebp,eax
c0015d12:	88 e0                	mov    al,ah
c0015d14:	c1 e5 04             	shl    ebp,0x4
c0015d17:	09 c5                	or     ebp,eax
c0015d19:	f6 44 24 19 02       	test   BYTE PTR [esp+0x19],0x2
c0015d1e:	75 17                	jne    c0015d37 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015d20:	80 fb 0b             	cmp    bl,0xb
c0015d23:	76 0c                	jbe    c0015d31 <RTC::setTimeInDatetimeUTC(datetime_t)+0x119>
c0015d25:	80 eb 0c             	sub    bl,0xc
c0015d28:	75 02                	jne    c0015d2c <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c0015d2a:	b3 0c                	mov    bl,0xc
c0015d2c:	83 cb 80             	or     ebx,0xffffff80
c0015d2f:	eb 06                	jmp    c0015d37 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015d31:	84 db                	test   bl,bl
c0015d33:	75 02                	jne    c0015d37 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11f>
c0015d35:	b3 0c                	mov    bl,0xc
c0015d37:	0f b6 db             	movzx  ebx,bl
c0015d3a:	50                   	push   eax
c0015d3b:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0015d40:	50                   	push   eax
c0015d41:	6a 00                	push   0x0
c0015d43:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015d49:	e8 52 14 ff ff       	call   c00071a0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015d4e:	83 c4 0c             	add    esp,0xc
c0015d51:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0015d56:	50                   	push   eax
c0015d57:	6a 02                	push   0x2
c0015d59:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015d5f:	e8 3c 14 ff ff       	call   c00071a0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015d64:	83 c4 0c             	add    esp,0xc
c0015d67:	53                   	push   ebx
c0015d68:	6a 04                	push   0x4
c0015d6a:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015d70:	e8 2b 14 ff ff       	call   c00071a0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015d75:	83 c4 0c             	add    esp,0xc
c0015d78:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0015d7d:	50                   	push   eax
c0015d7e:	6a 07                	push   0x7
c0015d80:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015d86:	e8 15 14 ff ff       	call   c00071a0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015d8b:	83 c4 0c             	add    esp,0xc
c0015d8e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0015d93:	50                   	push   eax
c0015d94:	6a 08                	push   0x8
c0015d96:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015d9c:	e8 ff 13 ff ff       	call   c00071a0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015da1:	83 c4 0c             	add    esp,0xc
c0015da4:	89 e8                	mov    eax,ebp
c0015da6:	0f b6 e8             	movzx  ebp,al
c0015da9:	55                   	push   ebp
c0015daa:	6a 09                	push   0x9
c0015dac:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015db2:	e8 e9 13 ff ff       	call   c00071a0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015db7:	5a                   	pop    edx
c0015db8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0015dbc:	e8 9f fb ff ff       	call   c0015960 <RTC::completeRTCRefresh()>
c0015dc1:	83 c4 3c             	add    esp,0x3c
c0015dc4:	b0 01                	mov    al,0x1
c0015dc6:	5b                   	pop    ebx
c0015dc7:	5e                   	pop    esi
c0015dc8:	5f                   	pop    edi
c0015dc9:	5d                   	pop    ebp
c0015dca:	c3                   	ret    

c0015dcb <rtcIRQHandler(regs*, void*)>:
c0015dcb:	53                   	push   ebx
c0015dcc:	83 ec 10             	sub    esp,0x10
c0015dcf:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0015dd3:	6a 0c                	push   0xc
c0015dd5:	ff 35 84 03 02 c0    	push   DWORD PTR ds:0xc0020384
c0015ddb:	e8 aa 12 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c0015de0:	83 c4 10             	add    esp,0x10
c0015de3:	84 c0                	test   al,al
c0015de5:	79 24                	jns    c0015e0b <rtcIRQHandler(regs*, void*)+0x40>
c0015de7:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c0015dee:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c0015df5:	66 ff 05 f4 38 02 c0 	inc    WORD PTR ds:0xc00238f4
c0015dfc:	75 0d                	jne    c0015e0b <rtcIRQHandler(regs*, void*)+0x40>
c0015dfe:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0015e02:	83 c4 08             	add    esp,0x8
c0015e05:	5b                   	pop    ebx
c0015e06:	e9 55 fb ff ff       	jmp    c0015960 <RTC::completeRTCRefresh()>
c0015e0b:	83 c4 08             	add    esp,0x8
c0015e0e:	5b                   	pop    ebx
c0015e0f:	c3                   	ret    

c0015e10 <RTC::RTC()>:
c0015e10:	83 ec 1c             	sub    esp,0x1c
c0015e13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e17:	83 ec 08             	sub    esp,0x8
c0015e1a:	68 73 e8 01 c0       	push   0xc001e873
c0015e1f:	50                   	push   eax
c0015e20:	e8 05 58 ff ff       	call   c000b62a <Clock::Clock(char const*)>
c0015e25:	83 c4 10             	add    esp,0x10
c0015e28:	ba 90 e8 01 c0       	mov    edx,0xc001e890
c0015e2d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e31:	89 10                	mov    DWORD PTR [eax],edx
c0015e33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e37:	83 ec 0c             	sub    esp,0xc
c0015e3a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015e3e:	6a 01                	push   0x1
c0015e40:	68 cb 5d 01 c0       	push   0xc0015dcb
c0015e45:	6a 08                	push   0x8
c0015e47:	50                   	push   eax
c0015e48:	e8 c7 5c ff ff       	call   c000bb14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0015e4d:	83 c4 20             	add    esp,0x20
c0015e50:	89 c2                	mov    edx,eax
c0015e52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015e56:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0015e5c:	fa                   	cli    
c0015e5d:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0015e62:	40                   	inc    eax
c0015e63:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0015e68:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0015e6d:	83 ec 08             	sub    esp,0x8
c0015e70:	6a 0b                	push   0xb
c0015e72:	50                   	push   eax
c0015e73:	e8 12 12 ff ff       	call   c000708a <Computer::readCMOS(unsigned char)>
c0015e78:	83 c4 10             	add    esp,0x10
c0015e7b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0015e7f:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c0015e84:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0015e88:	83 ca 10             	or     edx,0x10
c0015e8b:	81 e2 ff 00 00 00    	and    edx,0xff
c0015e91:	83 ec 04             	sub    esp,0x4
c0015e94:	52                   	push   edx
c0015e95:	6a 0b                	push   0xb
c0015e97:	50                   	push   eax
c0015e98:	e8 03 13 ff ff       	call   c00071a0 <Computer::writeCMOS(unsigned char, unsigned char)>
c0015e9d:	83 c4 10             	add    esp,0x10
c0015ea0:	83 ec 0c             	sub    esp,0xc
c0015ea3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015ea7:	e8 b4 fa ff ff       	call   c0015960 <RTC::completeRTCRefresh()>
c0015eac:	83 c4 10             	add    esp,0x10
c0015eaf:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0015eb4:	48                   	dec    eax
c0015eb5:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c0015eba:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c0015ebf:	85 c0                	test   eax,eax
c0015ec1:	75 01                	jne    c0015ec4 <RTC::RTC()+0xb4>
c0015ec3:	fb                   	sti    
c0015ec4:	90                   	nop
c0015ec5:	83 c4 1c             	add    esp,0x1c
c0015ec8:	c3                   	ret    
c0015ec9:	66 90                	xchg   ax,ax
c0015ecb:	90                   	nop

c0015ecc <HalConsoleScroll(int, int)>:
c0015ecc:	83 ec 10             	sub    esp,0x10
c0015ecf:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c0015ed7:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0015edf:	90                   	nop
c0015ee0:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015ee5:	0f 8f e1 00 00 00    	jg     c0015fcc <HalConsoleScroll(int, int)+0x100>
c0015eeb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0015ef3:	90                   	nop
c0015ef4:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c0015efc:	0f 8f be 00 00 00    	jg     c0015fc0 <HalConsoleScroll(int, int)+0xf4>
c0015f02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f06:	89 d0                	mov    eax,edx
c0015f08:	c1 e0 02             	shl    eax,0x2
c0015f0b:	01 d0                	add    eax,edx
c0015f0d:	c1 e0 05             	shl    eax,0x5
c0015f10:	89 c2                	mov    edx,eax
c0015f12:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f16:	01 d0                	add    eax,edx
c0015f18:	89 c2                	mov    edx,eax
c0015f1a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f1e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0015f21:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f25:	89 d0                	mov    eax,edx
c0015f27:	c1 e0 02             	shl    eax,0x2
c0015f2a:	01 d0                	add    eax,edx
c0015f2c:	c1 e0 05             	shl    eax,0x5
c0015f2f:	89 c2                	mov    edx,eax
c0015f31:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f35:	01 d0                	add    eax,edx
c0015f37:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c0015f3d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f41:	01 c2                	add    edx,eax
c0015f43:	8a 01                	mov    al,BYTE PTR [ecx]
c0015f45:	88 02                	mov    BYTE PTR [edx],al
c0015f47:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0015f4c:	75 66                	jne    c0015fb4 <HalConsoleScroll(int, int)+0xe8>
c0015f4e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f52:	83 e0 01             	and    eax,0x1
c0015f55:	74 39                	je     c0015f90 <HalConsoleScroll(int, int)+0xc4>
c0015f57:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0015f5b:	83 e0 0f             	and    eax,0xf
c0015f5e:	88 c2                	mov    dl,al
c0015f60:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015f64:	c1 e0 04             	shl    eax,0x4
c0015f67:	88 d1                	mov    cl,dl
c0015f69:	09 c1                	or     ecx,eax
c0015f6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f6f:	89 d0                	mov    eax,edx
c0015f71:	c1 e0 02             	shl    eax,0x2
c0015f74:	01 d0                	add    eax,edx
c0015f76:	c1 e0 05             	shl    eax,0x5
c0015f79:	89 c2                	mov    edx,eax
c0015f7b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015f7f:	01 d0                	add    eax,edx
c0015f81:	89 c2                	mov    edx,eax
c0015f83:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015f87:	01 d0                	add    eax,edx
c0015f89:	88 ca                	mov    dl,cl
c0015f8b:	88 10                	mov    BYTE PTR [eax],dl
c0015f8d:	eb 25                	jmp    c0015fb4 <HalConsoleScroll(int, int)+0xe8>
c0015f8f:	90                   	nop
c0015f90:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0015f94:	89 d0                	mov    eax,edx
c0015f96:	c1 e0 02             	shl    eax,0x2
c0015f99:	01 d0                	add    eax,edx
c0015f9b:	c1 e0 05             	shl    eax,0x5
c0015f9e:	89 c2                	mov    edx,eax
c0015fa0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0015fa4:	01 d0                	add    eax,edx
c0015fa6:	89 c2                	mov    edx,eax
c0015fa8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015fac:	01 d0                	add    eax,edx
c0015fae:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0015fb1:	8d 76 00             	lea    esi,[esi+0x0]
c0015fb4:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0015fb8:	e9 37 ff ff ff       	jmp    c0015ef4 <HalConsoleScroll(int, int)+0x28>
c0015fbd:	8d 76 00             	lea    esi,[esi+0x0]
c0015fc0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0015fc4:	e9 17 ff ff ff       	jmp    c0015ee0 <HalConsoleScroll(int, int)+0x14>
c0015fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0015fcc:	90                   	nop
c0015fcd:	83 c4 10             	add    esp,0x10
c0015fd0:	c3                   	ret    
c0015fd1:	8d 76 00             	lea    esi,[esi+0x0]

c0015fd4 <HalConsoleWriteCharacter(char, int, int, int, int)>:
c0015fd4:	83 ec 14             	sub    esp,0x14
c0015fd7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0015fdb:	88 04 24             	mov    BYTE PTR [esp],al
c0015fde:	8a 04 24             	mov    al,BYTE PTR [esp]
c0015fe1:	25 ff 00 00 00       	and    eax,0xff
c0015fe6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015fea:	89 d1                	mov    ecx,edx
c0015fec:	83 e1 0f             	and    ecx,0xf
c0015fef:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015ff3:	c1 e2 04             	shl    edx,0x4
c0015ff6:	81 e2 ff 00 00 00    	and    edx,0xff
c0015ffc:	09 ca                	or     edx,ecx
c0015ffe:	c1 e2 08             	shl    edx,0x8
c0016001:	09 d0                	or     eax,edx
c0016003:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0016008:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c0016010:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016014:	89 d0                	mov    eax,edx
c0016016:	c1 e0 02             	shl    eax,0x2
c0016019:	01 d0                	add    eax,edx
c001601b:	c1 e0 04             	shl    eax,0x4
c001601e:	89 c2                	mov    edx,eax
c0016020:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016024:	01 d0                	add    eax,edx
c0016026:	01 c0                	add    eax,eax
c0016028:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c001602c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016030:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0016035:	66 89 02             	mov    WORD PTR [edx],ax
c0016038:	90                   	nop
c0016039:	83 c4 14             	add    esp,0x14
c001603c:	c3                   	ret    
c001603d:	8d 76 00             	lea    esi,[esi+0x0]

c0016040 <HalConsoleCursorUpdate(int, int)>:
c0016040:	83 ec 20             	sub    esp,0x20
c0016043:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016047:	89 c2                	mov    edx,eax
c0016049:	89 d0                	mov    eax,edx
c001604b:	c1 e0 02             	shl    eax,0x2
c001604e:	01 d0                	add    eax,edx
c0016050:	c1 e0 04             	shl    eax,0x4
c0016053:	89 c2                	mov    edx,eax
c0016055:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016059:	01 d0                	add    eax,edx
c001605b:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c0016060:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0016067:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001606c:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0016070:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016074:	ee                   	out    dx,al
c0016075:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c001607a:	25 ff 00 00 00       	and    eax,0xff
c001607f:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0016086:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c001608a:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001608e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016092:	ee                   	out    dx,al
c0016093:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c001609a:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001609f:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c00160a3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00160a7:	ee                   	out    dx,al
c00160a8:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c00160ad:	66 c1 e8 08          	shr    ax,0x8
c00160b1:	25 ff 00 00 00       	and    eax,0xff
c00160b6:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c00160bd:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c00160c1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00160c5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00160c9:	ee                   	out    dx,al
c00160ca:	90                   	nop
c00160cb:	83 c4 20             	add    esp,0x20
c00160ce:	c3                   	ret    
c00160cf:	90                   	nop

c00160d0 <FAT::getName()>:
c00160d0:	b8 c4 e8 01 c0       	mov    eax,0xc001e8c4
c00160d5:	c3                   	ret    
c00160d6:	66 90                	xchg   ax,ax

c00160d8 <FAT::tell(void*, unsigned long long*)>:
c00160d8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00160dd:	75 09                	jne    c00160e8 <FAT::tell(void*, unsigned long long*)+0x10>
c00160df:	b8 04 00 00 00       	mov    eax,0x4
c00160e4:	c3                   	ret    
c00160e5:	8d 76 00             	lea    esi,[esi+0x0]
c00160e8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00160ed:	75 09                	jne    c00160f8 <FAT::tell(void*, unsigned long long*)+0x20>
c00160ef:	b8 04 00 00 00       	mov    eax,0x4
c00160f4:	c3                   	ret    
c00160f5:	8d 76 00             	lea    esi,[esi+0x0]
c00160f8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00160fc:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00160ff:	ba 00 00 00 00       	mov    edx,0x0
c0016104:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016108:	89 01                	mov    DWORD PTR [ecx],eax
c001610a:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c001610d:	b8 00 00 00 00       	mov    eax,0x0
c0016112:	c3                   	ret    
c0016113:	90                   	nop

c0016114 <FAT::stat(void*, unsigned long long*)>:
c0016114:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0016119:	75 09                	jne    c0016124 <FAT::stat(void*, unsigned long long*)+0x10>
c001611b:	b8 04 00 00 00       	mov    eax,0x4
c0016120:	c3                   	ret    
c0016121:	8d 76 00             	lea    esi,[esi+0x0]
c0016124:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016129:	75 09                	jne    c0016134 <FAT::stat(void*, unsigned long long*)+0x20>
c001612b:	b8 04 00 00 00       	mov    eax,0x4
c0016130:	c3                   	ret    
c0016131:	8d 76 00             	lea    esi,[esi+0x0]
c0016134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016138:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001613b:	ba 00 00 00 00       	mov    edx,0x0
c0016140:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016144:	89 01                	mov    DWORD PTR [ecx],eax
c0016146:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0016149:	b8 00 00 00 00       	mov    eax,0x0
c001614e:	c3                   	ret    
c001614f:	90                   	nop

c0016150 <FAT::~FAT()>:
c0016150:	83 ec 0c             	sub    esp,0xc
c0016153:	ba 10 e9 01 c0       	mov    edx,0xc001e910
c0016158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001615c:	89 10                	mov    DWORD PTR [eax],edx
c001615e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016162:	83 ec 0c             	sub    esp,0xc
c0016165:	50                   	push   eax
c0016166:	e8 03 49 ff ff       	call   c000aa6e <Filesystem::~Filesystem()>
c001616b:	83 c4 10             	add    esp,0x10
c001616e:	90                   	nop
c001616f:	83 c4 0c             	add    esp,0xc
c0016172:	c3                   	ret    
c0016173:	90                   	nop

c0016174 <FAT::~FAT()>:
c0016174:	83 ec 0c             	sub    esp,0xc
c0016177:	83 ec 0c             	sub    esp,0xc
c001617a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001617e:	e8 cd ff ff ff       	call   c0016150 <FAT::~FAT()>
c0016183:	83 c4 10             	add    esp,0x10
c0016186:	83 ec 08             	sub    esp,0x8
c0016189:	6a 08                	push   0x8
c001618b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001618f:	e8 9e 44 ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c0016194:	83 c4 10             	add    esp,0x10
c0016197:	83 c4 0c             	add    esp,0xc
c001619a:	c3                   	ret    
c001619b:	90                   	nop

c001619c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c001619c:	83 ec 1c             	sub    esp,0x1c
c001619f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c00161a6:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c00161ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00161af:	8b 04 85 20 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6e0]
c00161b6:	83 f8 ff             	cmp    eax,0xffffffff
c00161b9:	75 35                	jne    c00161f0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c00161bb:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00161bf:	88 c2                	mov    dl,al
c00161c1:	a1 00 39 02 c0       	mov    eax,ds:0xc0023900
c00161c6:	01 d0                	add    eax,edx
c00161c8:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c00161cc:	8b 15 00 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023900
c00161d2:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00161d6:	89 14 85 20 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc6e0],edx
c00161dd:	a1 00 39 02 c0       	mov    eax,ds:0xc0023900
c00161e2:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00161e6:	89 14 85 a0 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc660],edx
c00161ed:	eb 19                	jmp    c0016208 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c00161ef:	90                   	nop
c00161f0:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00161f4:	88 c2                	mov    dl,al
c00161f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00161fa:	8b 04 85 20 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6e0]
c0016201:	01 d0                	add    eax,edx
c0016203:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0016207:	90                   	nop
c0016208:	83 ec 04             	sub    esp,0x4
c001620b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001620f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016213:	8d 44 24 15          	lea    eax,[esp+0x15]
c0016217:	50                   	push   eax
c0016218:	e8 57 ec fe ff       	call   c0004e74 <f_getlabel>
c001621d:	83 c4 10             	add    esp,0x10
c0016220:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016224:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0016229:	75 09                	jne    c0016234 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c001622b:	b8 00 00 00 00       	mov    eax,0x0
c0016230:	eb 0a                	jmp    c001623c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0016232:	66 90                	xchg   ax,ax
c0016234:	b8 01 00 00 00       	mov    eax,0x1
c0016239:	8d 76 00             	lea    esi,[esi+0x0]
c001623c:	83 c4 1c             	add    esp,0x1c
c001623f:	c3                   	ret    

c0016240 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0016240:	57                   	push   edi
c0016241:	83 ec 58             	sub    esp,0x58
c0016244:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c001624c:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016250:	b8 00 00 00 00       	mov    eax,0x0
c0016255:	b9 0f 00 00 00       	mov    ecx,0xf
c001625a:	fc                   	cld    
c001625b:	89 d7                	mov    edi,edx
c001625d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001625f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0016263:	8b 04 85 20 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6e0]
c001626a:	83 f8 ff             	cmp    eax,0xffffffff
c001626d:	75 35                	jne    c00162a4 <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c001626f:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016273:	88 c2                	mov    dl,al
c0016275:	a1 00 39 02 c0       	mov    eax,ds:0xc0023900
c001627a:	01 d0                	add    eax,edx
c001627c:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016280:	8b 15 00 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023900
c0016286:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001628a:	89 14 85 20 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc6e0],edx
c0016291:	a1 00 39 02 c0       	mov    eax,ds:0xc0023900
c0016296:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c001629a:	89 14 85 a0 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc660],edx
c00162a1:	eb 19                	jmp    c00162bc <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c00162a3:	90                   	nop
c00162a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00162a8:	88 c2                	mov    dl,al
c00162aa:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00162ae:	8b 04 85 20 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6e0]
c00162b5:	01 d0                	add    eax,edx
c00162b7:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00162bb:	90                   	nop
c00162bc:	83 ec 08             	sub    esp,0x8
c00162bf:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c00162c3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00162c7:	50                   	push   eax
c00162c8:	e8 13 a5 fe ff       	call   c00007e0 <strcat>
c00162cd:	83 c4 10             	add    esp,0x10
c00162d0:	83 ec 0c             	sub    esp,0xc
c00162d3:	8d 44 24 18          	lea    eax,[esp+0x18]
c00162d7:	50                   	push   eax
c00162d8:	e8 e8 ec fe ff       	call   c0004fc5 <f_setlabel>
c00162dd:	83 c4 10             	add    esp,0x10
c00162e0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00162e4:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c00162e9:	75 09                	jne    c00162f4 <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c00162eb:	b8 00 00 00 00       	mov    eax,0x0
c00162f0:	eb 0a                	jmp    c00162fc <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c00162f2:	66 90                	xchg   ax,ax
c00162f4:	b8 01 00 00 00       	mov    eax,0x1
c00162f9:	8d 76 00             	lea    esi,[esi+0x0]
c00162fc:	83 c4 58             	add    esp,0x58
c00162ff:	5f                   	pop    edi
c0016300:	c3                   	ret    
c0016301:	90                   	nop
c0016302:	66 90                	xchg   ax,ax

c0016304 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0016304:	83 ec 2c             	sub    esp,0x2c
c0016307:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001630f:	83 ec 08             	sub    esp,0x8
c0016312:	68 e8 e8 01 c0       	push   0xc001e8e8
c0016317:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001631b:	e8 e0 a3 fe ff       	call   c0000700 <strcmp>
c0016320:	83 c4 10             	add    esp,0x10
c0016323:	85 c0                	test   eax,eax
c0016325:	0f 94 c0             	sete   al
c0016328:	84 c0                	test   al,al
c001632a:	74 10                	je     c001633c <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c001632c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016334:	e9 b3 00 00 00       	jmp    c00163ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016339:	8d 76 00             	lea    esi,[esi+0x0]
c001633c:	83 ec 08             	sub    esp,0x8
c001633f:	68 da e8 01 c0       	push   0xc001e8da
c0016344:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016348:	e8 b3 a3 fe ff       	call   c0000700 <strcmp>
c001634d:	83 c4 10             	add    esp,0x10
c0016350:	85 c0                	test   eax,eax
c0016352:	0f 94 c0             	sete   al
c0016355:	84 c0                	test   al,al
c0016357:	74 0f                	je     c0016368 <FAT::format(LogicalDisk*, int, char const*, int)+0x64>
c0016359:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0016361:	e9 86 00 00 00       	jmp    c00163ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c0016366:	66 90                	xchg   ax,ax
c0016368:	83 ec 08             	sub    esp,0x8
c001636b:	68 e0 e8 01 c0       	push   0xc001e8e0
c0016370:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016374:	e8 87 a3 fe ff       	call   c0000700 <strcmp>
c0016379:	83 c4 10             	add    esp,0x10
c001637c:	85 c0                	test   eax,eax
c001637e:	0f 94 c0             	sete   al
c0016381:	84 c0                	test   al,al
c0016383:	74 0b                	je     c0016390 <FAT::format(LogicalDisk*, int, char const*, int)+0x8c>
c0016385:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c001638d:	eb 5d                	jmp    c00163ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c001638f:	90                   	nop
c0016390:	83 ec 08             	sub    esp,0x8
c0016393:	68 9c c9 01 c0       	push   0xc001c99c
c0016398:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001639c:	e8 5f a3 fe ff       	call   c0000700 <strcmp>
c00163a1:	83 c4 10             	add    esp,0x10
c00163a4:	85 c0                	test   eax,eax
c00163a6:	0f 94 c0             	sete   al
c00163a9:	84 c0                	test   al,al
c00163ab:	74 0b                	je     c00163b8 <FAT::format(LogicalDisk*, int, char const*, int)+0xb4>
c00163ad:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c00163b5:	eb 35                	jmp    c00163ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00163b7:	90                   	nop
c00163b8:	83 ec 08             	sub    esp,0x8
c00163bb:	68 e6 e8 01 c0       	push   0xc001e8e6
c00163c0:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00163c4:	e8 37 a3 fe ff       	call   c0000700 <strcmp>
c00163c9:	83 c4 10             	add    esp,0x10
c00163cc:	85 c0                	test   eax,eax
c00163ce:	0f 94 c0             	sete   al
c00163d1:	84 c0                	test   al,al
c00163d3:	74 0b                	je     c00163e0 <FAT::format(LogicalDisk*, int, char const*, int)+0xdc>
c00163d5:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c00163dd:	eb 0d                	jmp    c00163ec <FAT::format(LogicalDisk*, int, char const*, int)+0xe8>
c00163df:	90                   	nop
c00163e0:	b8 08 00 00 00       	mov    eax,0x8
c00163e5:	e9 ea 00 00 00       	jmp    c00164d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00163ea:	66 90                	xchg   ax,ax
c00163ec:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c00163f3:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c00163f8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00163fc:	8b 04 85 20 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6e0]
c0016403:	83 f8 ff             	cmp    eax,0xffffffff
c0016406:	75 34                	jne    c001643c <FAT::format(LogicalDisk*, int, char const*, int)+0x138>
c0016408:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c001640c:	88 c2                	mov    dl,al
c001640e:	a1 00 39 02 c0       	mov    eax,ds:0xc0023900
c0016413:	01 d0                	add    eax,edx
c0016415:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016419:	8b 15 00 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023900
c001641f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016423:	89 14 85 20 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc6e0],edx
c001642a:	a1 00 39 02 c0       	mov    eax,ds:0xc0023900
c001642f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0016433:	89 14 85 a0 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc660],edx
c001643a:	eb 18                	jmp    c0016454 <FAT::format(LogicalDisk*, int, char const*, int)+0x150>
c001643c:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0016440:	88 c2                	mov    dl,al
c0016442:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016446:	8b 04 85 20 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6e0]
c001644d:	01 d0                	add    eax,edx
c001644f:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0016453:	90                   	nop
c0016454:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016458:	88 04 24             	mov    BYTE PTR [esp],al
c001645b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001645f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016463:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001646b:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0016470:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0016478:	83 ec 0c             	sub    esp,0xc
c001647b:	68 00 20 00 00       	push   0x2000
c0016480:	e8 14 15 ff ff       	call   c0007999 <malloc>
c0016485:	83 c4 10             	add    esp,0x10
c0016488:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001648c:	68 00 20 00 00       	push   0x2000
c0016491:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016495:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016499:	50                   	push   eax
c001649a:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c001649e:	50                   	push   eax
c001649f:	e8 11 ee fe ff       	call   c00052b5 <f_mkfs>
c00164a4:	83 c4 10             	add    esp,0x10
c00164a7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164ab:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00164b0:	75 0a                	jne    c00164bc <FAT::format(LogicalDisk*, int, char const*, int)+0x1b8>
c00164b2:	b8 00 00 00 00       	mov    eax,0x0
c00164b7:	eb 1b                	jmp    c00164d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00164b9:	8d 76 00             	lea    esi,[esi+0x0]
c00164bc:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c00164c1:	75 09                	jne    c00164cc <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c00164c3:	b8 09 00 00 00       	mov    eax,0x9
c00164c8:	eb 0a                	jmp    c00164d4 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d0>
c00164ca:	66 90                	xchg   ax,ax
c00164cc:	b8 01 00 00 00       	mov    eax,0x1
c00164d1:	8d 76 00             	lea    esi,[esi+0x0]
c00164d4:	83 c4 2c             	add    esp,0x2c
c00164d7:	c3                   	ret    

c00164d8 <FAT::tryMount(LogicalDisk*, int)>:
c00164d8:	81 ec 4c 03 00 00    	sub    esp,0x34c
c00164de:	a1 00 39 02 c0       	mov    eax,ds:0xc0023900
c00164e3:	83 f8 14             	cmp    eax,0x14
c00164e6:	75 18                	jne    c0016500 <FAT::tryMount(LogicalDisk*, int)+0x28>
c00164e8:	83 ec 0c             	sub    esp,0xc
c00164eb:	68 ec e8 01 c0       	push   0xc001e8ec
c00164f0:	e8 82 9d ff ff       	call   c0010277 <Krnl::panic(char const*)>
c00164f5:	83 c4 10             	add    esp,0x10
c00164f8:	b0 00                	mov    al,0x0
c00164fa:	e9 e9 01 00 00       	jmp    c00166e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00164ff:	90                   	nop
c0016500:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0016507:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001650d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016513:	3d 00 02 00 00       	cmp    eax,0x200
c0016518:	74 0a                	je     c0016524 <FAT::tryMount(LogicalDisk*, int)+0x4c>
c001651a:	b0 00                	mov    al,0x0
c001651c:	e9 c7 01 00 00       	jmp    c00166e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016521:	8d 76 00             	lea    esi,[esi+0x0]
c0016524:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c001652c:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0016533:	8b 04 85 20 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6e0]
c001653a:	83 f8 ff             	cmp    eax,0xffffffff
c001653d:	74 09                	je     c0016548 <FAT::tryMount(LogicalDisk*, int)+0x70>
c001653f:	b0 01                	mov    al,0x1
c0016541:	e9 a2 01 00 00       	jmp    c00166e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c0016546:	66 90                	xchg   ax,ax
c0016548:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0016552:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c001655a:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0016561:	88 c2                	mov    dl,al
c0016563:	a1 00 39 02 c0       	mov    eax,ds:0xc0023900
c0016568:	01 d0                	add    eax,edx
c001656a:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0016571:	8b 15 00 39 02 c0    	mov    edx,DWORD PTR ds:0xc0023900
c0016577:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c001657e:	89 14 85 20 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc6e0],edx
c0016585:	a1 00 39 02 c0       	mov    eax,ds:0xc0023900
c001658a:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0016591:	89 14 85 a0 39 02 c0 	mov    DWORD PTR [eax*4-0x3ffdc660],edx
c0016598:	83 ec 0c             	sub    esp,0xc
c001659b:	68 34 02 00 00       	push   0x234
c00165a0:	e8 f4 13 ff ff       	call   c0007999 <malloc>
c00165a5:	83 c4 10             	add    esp,0x10
c00165a8:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c00165af:	83 ec 04             	sub    esp,0x4
c00165b2:	6a 00                	push   0x0
c00165b4:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00165bb:	50                   	push   eax
c00165bc:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00165c3:	e8 13 d5 fe ff       	call   c0003adb <f_mount>
c00165c8:	83 c4 10             	add    esp,0x10
c00165cb:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c00165d2:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c00165da:	74 1c                	je     c00165f8 <FAT::tryMount(LogicalDisk*, int)+0x120>
c00165dc:	83 ec 0c             	sub    esp,0xc
c00165df:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00165e6:	e8 ce 13 ff ff       	call   c00079b9 <rfree>
c00165eb:	83 c4 10             	add    esp,0x10
c00165ee:	b0 00                	mov    al,0x0
c00165f0:	e9 f3 00 00 00       	jmp    c00166e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00165f5:	8d 76 00             	lea    esi,[esi+0x0]
c00165f8:	83 ec 04             	sub    esp,0x4
c00165fb:	68 00 01 00 00       	push   0x100
c0016600:	6a 00                	push   0x0
c0016602:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016609:	50                   	push   eax
c001660a:	e8 e1 9e fe ff       	call   c00004f0 <memset>
c001660f:	83 c4 10             	add    esp,0x10
c0016612:	83 ec 08             	sub    esp,0x8
c0016615:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c001661c:	50                   	push   eax
c001661d:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0016624:	50                   	push   eax
c0016625:	e8 b6 a1 fe ff       	call   c00007e0 <strcat>
c001662a:	83 c4 10             	add    esp,0x10
c001662d:	83 ec 08             	sub    esp,0x8
c0016630:	68 fa e8 01 c0       	push   0xc001e8fa
c0016635:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c001663c:	50                   	push   eax
c001663d:	e8 9e a1 fe ff       	call   c00007e0 <strcat>
c0016642:	83 c4 10             	add    esp,0x10
c0016645:	83 ec 04             	sub    esp,0x4
c0016648:	6a 01                	push   0x1
c001664a:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0016651:	50                   	push   eax
c0016652:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016656:	50                   	push   eax
c0016657:	e8 e1 d4 fe ff       	call   c0003b3d <f_open>
c001665c:	83 c4 10             	add    esp,0x10
c001665f:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0016666:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c001666d:	85 c0                	test   eax,eax
c001666f:	74 0b                	je     c001667c <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0016671:	78 31                	js     c00166a4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0016673:	83 e8 04             	sub    eax,0x4
c0016676:	83 f8 01             	cmp    eax,0x1
c0016679:	77 29                	ja     c00166a4 <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c001667b:	90                   	nop
c001667c:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0016684:	83 ec 0c             	sub    esp,0xc
c0016687:	8d 44 24 14          	lea    eax,[esp+0x14]
c001668b:	50                   	push   eax
c001668c:	e8 5f dc fe ff       	call   c00042f0 <f_close>
c0016691:	83 c4 10             	add    esp,0x10
c0016694:	90                   	nop
c0016695:	80 bc 24 3f 03 00 00 00 	cmp    BYTE PTR [esp+0x33f],0x0
c001669d:	74 41                	je     c00166e0 <FAT::tryMount(LogicalDisk*, int)+0x208>
c001669f:	eb 33                	jmp    c00166d4 <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c00166a1:	8d 76 00             	lea    esi,[esi+0x0]
c00166a4:	83 ec 0c             	sub    esp,0xc
c00166a7:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c00166ae:	e8 06 13 ff ff       	call   c00079b9 <rfree>
c00166b3:	83 c4 10             	add    esp,0x10
c00166b6:	83 ec 04             	sub    esp,0x4
c00166b9:	6a 00                	push   0x0
c00166bb:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c00166c2:	50                   	push   eax
c00166c3:	6a 00                	push   0x0
c00166c5:	e8 11 d4 fe ff       	call   c0003adb <f_mount>
c00166ca:	83 c4 10             	add    esp,0x10
c00166cd:	b0 00                	mov    al,0x0
c00166cf:	eb 17                	jmp    c00166e8 <FAT::tryMount(LogicalDisk*, int)+0x210>
c00166d1:	8d 76 00             	lea    esi,[esi+0x0]
c00166d4:	a1 00 39 02 c0       	mov    eax,ds:0xc0023900
c00166d9:	40                   	inc    eax
c00166da:	a3 00 39 02 c0       	mov    ds:0xc0023900,eax
c00166df:	90                   	nop
c00166e0:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c00166e7:	90                   	nop
c00166e8:	81 c4 4c 03 00 00    	add    esp,0x34c
c00166ee:	c3                   	ret    
c00166ef:	90                   	nop

c00166f0 <FAT::allocateSwapfile(char const*, int)>:
c00166f0:	55                   	push   ebp
c00166f1:	57                   	push   edi
c00166f2:	56                   	push   esi
c00166f3:	53                   	push   ebx
c00166f4:	81 ec 3c 04 00 00    	sub    esp,0x43c
c00166fa:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0016705:	83 ec 0c             	sub    esp,0xc
c0016708:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c001670f:	e8 85 12 ff ff       	call   c0007999 <malloc>
c0016714:	83 c4 10             	add    esp,0x10
c0016717:	89 c7                	mov    edi,eax
c0016719:	a1 70 38 02 c0       	mov    eax,ds:0xc0023870
c001671e:	83 ec 04             	sub    esp,0x4
c0016721:	50                   	push   eax
c0016722:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0016729:	57                   	push   edi
c001672a:	e8 6f 45 ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c001672f:	83 c4 10             	add    esp,0x10
c0016732:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0016739:	83 ec 04             	sub    esp,0x4
c001673c:	8d 44 24 13          	lea    eax,[esp+0x13]
c0016740:	50                   	push   eax
c0016741:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016745:	50                   	push   eax
c0016746:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001674d:	e8 b8 48 ff ff       	call   c000b00a <File::stat(unsigned long long*, bool*)>
c0016752:	83 c4 10             	add    esp,0x10
c0016755:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c001675c:	c1 e0 14             	shl    eax,0x14
c001675f:	89 c7                	mov    edi,eax
c0016761:	89 c5                	mov    ebp,eax
c0016763:	c1 fd 1f             	sar    ebp,0x1f
c0016766:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001676a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001676e:	89 f9                	mov    ecx,edi
c0016770:	31 c1                	xor    ecx,eax
c0016772:	89 cb                	mov    ebx,ecx
c0016774:	89 e9                	mov    ecx,ebp
c0016776:	31 d1                	xor    ecx,edx
c0016778:	89 ce                	mov    esi,ecx
c001677a:	89 f0                	mov    eax,esi
c001677c:	09 d8                	or     eax,ebx
c001677e:	0f 84 9c 00 00 00    	je     c0016820 <FAT::allocateSwapfile(char const*, int)+0x130>
c0016784:	83 ec 0c             	sub    esp,0xc
c0016787:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001678e:	e8 43 47 ff ff       	call   c000aed6 <File::unlink()>
c0016793:	83 c4 10             	add    esp,0x10
c0016796:	83 ec 08             	sub    esp,0x8
c0016799:	6a 12                	push   0x12
c001679b:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00167a2:	e8 b7 45 ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c00167a7:	83 c4 10             	add    esp,0x10
c00167aa:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00167b1:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00167b7:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c00167be:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c00167c5:	c1 e0 14             	shl    eax,0x14
c00167c8:	83 ec 04             	sub    esp,0x4
c00167cb:	6a 01                	push   0x1
c00167cd:	50                   	push   eax
c00167ce:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c00167d5:	e8 7b e9 fe ff       	call   c0005155 <f_expand>
c00167da:	83 c4 10             	add    esp,0x10
c00167dd:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00167e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00167e6:	83 c0 10             	add    eax,0x10
c00167e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00167eb:	83 ec 0c             	sub    esp,0xc
c00167ee:	8d 54 24 24          	lea    edx,[esp+0x24]
c00167f2:	52                   	push   edx
c00167f3:	8d 54 24 30          	lea    edx,[esp+0x30]
c00167f7:	52                   	push   edx
c00167f8:	6a 00                	push   0x0
c00167fa:	68 00 04 00 00       	push   0x400
c00167ff:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0016806:	ff d0                	call   eax
c0016808:	83 c4 20             	add    esp,0x20
c001680b:	83 ec 0c             	sub    esp,0xc
c001680e:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0016815:	e8 a2 45 ff ff       	call   c000adbc <File::close()>
c001681a:	83 c4 10             	add    esp,0x10
c001681d:	8d 76 00             	lea    esi,[esi+0x0]
c0016820:	83 ec 08             	sub    esp,0x8
c0016823:	6a 01                	push   0x1
c0016825:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001682c:	e8 2d 45 ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c0016831:	83 c4 10             	add    esp,0x10
c0016834:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001683b:	8b 00                	mov    eax,DWORD PTR [eax]
c001683d:	83 c0 0c             	add    eax,0xc
c0016840:	8b 00                	mov    eax,DWORD PTR [eax]
c0016842:	83 ec 0c             	sub    esp,0xc
c0016845:	8d 54 24 24          	lea    edx,[esp+0x24]
c0016849:	52                   	push   edx
c001684a:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001684e:	52                   	push   edx
c001684f:	6a 00                	push   0x0
c0016851:	6a 04                	push   0x4
c0016853:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c001685a:	ff d0                	call   eax
c001685c:	83 c4 20             	add    esp,0x20
c001685f:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0016866:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c001686c:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c0016873:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c001687a:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001687d:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0016884:	83 ec 0c             	sub    esp,0xc
c0016887:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001688e:	e8 29 45 ff ff       	call   c000adbc <File::close()>
c0016893:	83 c4 10             	add    esp,0x10
c0016896:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c001689d:	ba 00 00 00 00       	mov    edx,0x0
c00168a2:	81 c4 3c 04 00 00    	add    esp,0x43c
c00168a8:	5b                   	pop    ebx
c00168a9:	5e                   	pop    esi
c00168aa:	5f                   	pop    edi
c00168ab:	5d                   	pop    ebp
c00168ac:	c3                   	ret    
c00168ad:	90                   	nop
c00168ae:	66 90                	xchg   ax,ax

c00168b0 <FAT::readDir(void*, unsigned long, void*, int*)>:
c00168b0:	57                   	push   edi
c00168b1:	56                   	push   esi
c00168b2:	53                   	push   ebx
c00168b3:	81 ec 50 02 00 00    	sub    esp,0x250
c00168b9:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c00168c1:	74 0d                	je     c00168d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c00168c3:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c00168cb:	75 0f                	jne    c00168dc <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c00168cd:	8d 76 00             	lea    esi,[esi+0x0]
c00168d0:	b8 04 00 00 00       	mov    eax,0x4
c00168d5:	e9 36 01 00 00       	jmp    c0016a10 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00168da:	66 90                	xchg   ax,ax
c00168dc:	83 ec 08             	sub    esp,0x8
c00168df:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00168e6:	50                   	push   eax
c00168e7:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00168ee:	e8 c0 dc fe ff       	call   c00045b3 <f_readdir>
c00168f3:	83 c4 10             	add    esp,0x10
c00168f6:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00168fd:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c0016904:	83 ec 0c             	sub    esp,0xc
c0016907:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c001690e:	83 c0 16             	add    eax,0x16
c0016911:	50                   	push   eax
c0016912:	e8 49 9c fe ff       	call   c0000560 <strlen>
c0016917:	83 c4 10             	add    esp,0x10
c001691a:	ba 00 00 00 00       	mov    edx,0x0
c001691f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016923:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016927:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c001692e:	25 ff 00 00 00       	and    eax,0xff
c0016933:	83 e0 10             	and    eax,0x10
c0016936:	74 08                	je     c0016940 <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c0016938:	b8 02 00 00 00       	mov    eax,0x2
c001693d:	eb 09                	jmp    c0016948 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c001693f:	90                   	nop
c0016940:	b8 01 00 00 00       	mov    eax,0x1
c0016945:	8d 76 00             	lea    esi,[esi+0x0]
c0016948:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001694c:	83 ec 08             	sub    esp,0x8
c001694f:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0016956:	83 c0 16             	add    eax,0x16
c0016959:	50                   	push   eax
c001695a:	8d 44 24 14          	lea    eax,[esp+0x14]
c001695e:	83 c0 10             	add    eax,0x10
c0016961:	50                   	push   eax
c0016962:	e8 b9 9c fe ff       	call   c0000620 <strcpy>
c0016967:	83 c4 10             	add    esp,0x10
c001696a:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c0016971:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0016978:	8d 44 24 08          	lea    eax,[esp+0x8]
c001697c:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c0016983:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c001698a:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c0016991:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0016998:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001699f:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c00169a6:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c00169ad:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c00169b4:	89 c6                	mov    esi,eax
c00169b6:	89 d7                	mov    edi,edx
c00169b8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00169ba:	89 c8                	mov    eax,ecx
c00169bc:	89 fa                	mov    edx,edi
c00169be:	89 f3                	mov    ebx,esi
c00169c0:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c00169c7:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c00169ce:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c00169d5:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c00169dc:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00169e2:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00169e9:	84 c0                	test   al,al
c00169eb:	75 07                	jne    c00169f4 <FAT::readDir(void*, unsigned long, void*, int*)+0x144>
c00169ed:	b8 07 00 00 00       	mov    eax,0x7
c00169f2:	eb 1c                	jmp    c0016a10 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c00169f4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00169fb:	85 c0                	test   eax,eax
c00169fd:	75 09                	jne    c0016a08 <FAT::readDir(void*, unsigned long, void*, int*)+0x158>
c00169ff:	b8 00 00 00 00       	mov    eax,0x0
c0016a04:	eb 0a                	jmp    c0016a10 <FAT::readDir(void*, unsigned long, void*, int*)+0x160>
c0016a06:	66 90                	xchg   ax,ax
c0016a08:	b8 01 00 00 00       	mov    eax,0x1
c0016a0d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a10:	81 c4 50 02 00 00    	add    esp,0x250
c0016a16:	5b                   	pop    ebx
c0016a17:	5e                   	pop    esi
c0016a18:	5f                   	pop    edi
c0016a19:	c3                   	ret    
c0016a1a:	66 90                	xchg   ax,ax

c0016a1c <FAT::read(void*, unsigned long, void*, int*)>:
c0016a1c:	83 ec 1c             	sub    esp,0x1c
c0016a1f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016a24:	74 0a                	je     c0016a30 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c0016a26:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016a2b:	75 0b                	jne    c0016a38 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c0016a2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a30:	b8 04 00 00 00       	mov    eax,0x4
c0016a35:	eb 41                	jmp    c0016a78 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016a37:	90                   	nop
c0016a38:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016a3c:	50                   	push   eax
c0016a3d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016a41:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016a45:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016a49:	e8 ba d3 fe ff       	call   c0003e08 <f_read>
c0016a4e:	83 c4 10             	add    esp,0x10
c0016a51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016a55:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016a59:	89 c2                	mov    edx,eax
c0016a5b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016a5f:	89 10                	mov    DWORD PTR [eax],edx
c0016a61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016a65:	85 c0                	test   eax,eax
c0016a67:	75 07                	jne    c0016a70 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0016a69:	b8 00 00 00 00       	mov    eax,0x0
c0016a6e:	eb 08                	jmp    c0016a78 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0016a70:	b8 01 00 00 00       	mov    eax,0x1
c0016a75:	8d 76 00             	lea    esi,[esi+0x0]
c0016a78:	83 c4 1c             	add    esp,0x1c
c0016a7b:	c3                   	ret    

c0016a7c <FAT::write(void*, unsigned long, void*, int*)>:
c0016a7c:	83 ec 1c             	sub    esp,0x1c
c0016a7f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016a84:	74 0a                	je     c0016a90 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0016a86:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0016a8b:	75 0b                	jne    c0016a98 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c0016a8d:	8d 76 00             	lea    esi,[esi+0x0]
c0016a90:	b8 04 00 00 00       	mov    eax,0x4
c0016a95:	eb 41                	jmp    c0016ad8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016a97:	90                   	nop
c0016a98:	8d 44 24 08          	lea    eax,[esp+0x8]
c0016a9c:	50                   	push   eax
c0016a9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016aa1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0016aa5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016aa9:	e8 59 d5 fe ff       	call   c0004007 <f_write>
c0016aae:	83 c4 10             	add    esp,0x10
c0016ab1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016ab5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ab9:	89 c2                	mov    edx,eax
c0016abb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016abf:	89 10                	mov    DWORD PTR [eax],edx
c0016ac1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016ac5:	85 c0                	test   eax,eax
c0016ac7:	75 07                	jne    c0016ad0 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0016ac9:	b8 00 00 00 00       	mov    eax,0x0
c0016ace:	eb 08                	jmp    c0016ad8 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0016ad0:	b8 01 00 00 00       	mov    eax,0x1
c0016ad5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ad8:	83 c4 1c             	add    esp,0x1c
c0016adb:	c3                   	ret    

c0016adc <FAT::close(void*)>:
c0016adc:	83 ec 1c             	sub    esp,0x1c
c0016adf:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016ae4:	75 0a                	jne    c0016af0 <FAT::close(void*)+0x14>
c0016ae6:	b8 04 00 00 00       	mov    eax,0x4
c0016aeb:	eb 3f                	jmp    c0016b2c <FAT::close(void*)+0x50>
c0016aed:	8d 76 00             	lea    esi,[esi+0x0]
c0016af0:	83 ec 0c             	sub    esp,0xc
c0016af3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016af7:	e8 f4 d7 fe ff       	call   c00042f0 <f_close>
c0016afc:	83 c4 10             	add    esp,0x10
c0016aff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b03:	83 ec 0c             	sub    esp,0xc
c0016b06:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b0a:	e8 9a 0e ff ff       	call   c00079a9 <free>
c0016b0f:	83 c4 10             	add    esp,0x10
c0016b12:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b16:	85 c0                	test   eax,eax
c0016b18:	75 0a                	jne    c0016b24 <FAT::close(void*)+0x48>
c0016b1a:	b8 00 00 00 00       	mov    eax,0x0
c0016b1f:	eb 0b                	jmp    c0016b2c <FAT::close(void*)+0x50>
c0016b21:	8d 76 00             	lea    esi,[esi+0x0]
c0016b24:	b8 01 00 00 00       	mov    eax,0x1
c0016b29:	8d 76 00             	lea    esi,[esi+0x0]
c0016b2c:	83 c4 1c             	add    esp,0x1c
c0016b2f:	c3                   	ret    

c0016b30 <FAT::closeDir(void*)>:
c0016b30:	83 ec 1c             	sub    esp,0x1c
c0016b33:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0016b38:	75 0a                	jne    c0016b44 <FAT::closeDir(void*)+0x14>
c0016b3a:	b8 04 00 00 00       	mov    eax,0x4
c0016b3f:	eb 3f                	jmp    c0016b80 <FAT::closeDir(void*)+0x50>
c0016b41:	8d 76 00             	lea    esi,[esi+0x0]
c0016b44:	83 ec 0c             	sub    esp,0xc
c0016b47:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b4b:	e8 41 da fe ff       	call   c0004591 <f_closedir>
c0016b50:	83 c4 10             	add    esp,0x10
c0016b53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b57:	83 ec 0c             	sub    esp,0xc
c0016b5a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016b5e:	e8 46 0e ff ff       	call   c00079a9 <free>
c0016b63:	83 c4 10             	add    esp,0x10
c0016b66:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016b6a:	85 c0                	test   eax,eax
c0016b6c:	75 0a                	jne    c0016b78 <FAT::closeDir(void*)+0x48>
c0016b6e:	b8 00 00 00 00       	mov    eax,0x0
c0016b73:	eb 0b                	jmp    c0016b80 <FAT::closeDir(void*)+0x50>
c0016b75:	8d 76 00             	lea    esi,[esi+0x0]
c0016b78:	b8 01 00 00 00       	mov    eax,0x1
c0016b7d:	8d 76 00             	lea    esi,[esi+0x0]
c0016b80:	83 c4 1c             	add    esp,0x1c
c0016b83:	c3                   	ret    

c0016b84 <FAT::seek(void*, unsigned long long)>:
c0016b84:	83 ec 2c             	sub    esp,0x2c
c0016b87:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016b8b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016b8f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0016b93:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016b97:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c0016b9c:	75 0a                	jne    c0016ba8 <FAT::seek(void*, unsigned long long)+0x24>
c0016b9e:	b8 04 00 00 00       	mov    eax,0x4
c0016ba3:	eb 33                	jmp    c0016bd8 <FAT::seek(void*, unsigned long long)+0x54>
c0016ba5:	8d 76 00             	lea    esi,[esi+0x0]
c0016ba8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016bac:	83 ec 08             	sub    esp,0x8
c0016baf:	50                   	push   eax
c0016bb0:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0016bb4:	e8 66 d7 fe ff       	call   c000431f <f_lseek>
c0016bb9:	83 c4 10             	add    esp,0x10
c0016bbc:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016bc0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0016bc4:	85 c0                	test   eax,eax
c0016bc6:	75 08                	jne    c0016bd0 <FAT::seek(void*, unsigned long long)+0x4c>
c0016bc8:	b8 00 00 00 00       	mov    eax,0x0
c0016bcd:	eb 09                	jmp    c0016bd8 <FAT::seek(void*, unsigned long long)+0x54>
c0016bcf:	90                   	nop
c0016bd0:	b8 01 00 00 00       	mov    eax,0x1
c0016bd5:	8d 76 00             	lea    esi,[esi+0x0]
c0016bd8:	83 c4 2c             	add    esp,0x2c
c0016bdb:	c3                   	ret    

c0016bdc <fatWrapperReadDisk>:
c0016bdc:	53                   	push   ebx
c0016bdd:	83 ec 18             	sub    esp,0x18
c0016be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016be4:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016be8:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016bec:	25 ff 00 00 00       	and    eax,0xff
c0016bf1:	8b 0c 85 e0 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd720]
c0016bf8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016bfc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c00:	ba 00 00 00 00       	mov    edx,0x0
c0016c05:	83 ec 0c             	sub    esp,0xc
c0016c08:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c0c:	53                   	push   ebx
c0016c0d:	52                   	push   edx
c0016c0e:	50                   	push   eax
c0016c0f:	51                   	push   ecx
c0016c10:	e8 fb 61 ff ff       	call   c000ce10 <LogicalDisk::read(unsigned long long, int, void*)>
c0016c15:	83 c4 20             	add    esp,0x20
c0016c18:	83 c4 18             	add    esp,0x18
c0016c1b:	5b                   	pop    ebx
c0016c1c:	c3                   	ret    
c0016c1d:	8d 76 00             	lea    esi,[esi+0x0]

c0016c20 <fatWrapperWriteDisk>:
c0016c20:	53                   	push   ebx
c0016c21:	83 ec 18             	sub    esp,0x18
c0016c24:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c28:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0016c2c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016c30:	25 ff 00 00 00       	and    eax,0xff
c0016c35:	8b 0c 85 e0 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd720]
c0016c3c:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0016c40:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016c44:	ba 00 00 00 00       	mov    edx,0x0
c0016c49:	83 ec 0c             	sub    esp,0xc
c0016c4c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016c50:	53                   	push   ebx
c0016c51:	52                   	push   edx
c0016c52:	50                   	push   eax
c0016c53:	51                   	push   ecx
c0016c54:	e8 23 62 ff ff       	call   c000ce7c <LogicalDisk::write(unsigned long long, int, void*)>
c0016c59:	83 c4 20             	add    esp,0x20
c0016c5c:	83 c4 18             	add    esp,0x18
c0016c5f:	5b                   	pop    ebx
c0016c60:	c3                   	ret    
c0016c61:	8d 76 00             	lea    esi,[esi+0x0]

c0016c64 <fatWrapperIoctl>:
c0016c64:	53                   	push   ebx
c0016c65:	83 ec 28             	sub    esp,0x28
c0016c68:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0016c6c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016c70:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0016c74:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0016c78:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0016c7d:	75 35                	jne    c0016cb4 <fatWrapperIoctl+0x50>
c0016c7f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016c83:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c87:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016c8b:	25 ff 00 00 00       	and    eax,0xff
c0016c90:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c0016c97:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016c9d:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016ca3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0016ca7:	66 89 02             	mov    WORD PTR [edx],ax
c0016caa:	b8 00 00 00 00       	mov    eax,0x0
c0016caf:	e9 c4 00 00 00       	jmp    c0016d78 <fatWrapperIoctl+0x114>
c0016cb4:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0016cb9:	75 75                	jne    c0016d30 <fatWrapperIoctl+0xcc>
c0016cbb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016cbf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016cc3:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0016cc7:	25 ff 00 00 00       	and    eax,0xff
c0016ccc:	8b 04 85 e0 28 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd720]
c0016cd3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016cd9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0016cdf:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0016ce5:	89 c8                	mov    eax,ecx
c0016ce7:	89 da                	mov    edx,ebx
c0016ce9:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ced:	c1 e0 0a             	shl    eax,0xa
c0016cf0:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0016cf4:	81 e1 ff 00 00 00    	and    ecx,0xff
c0016cfa:	8b 0c 8d e0 28 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffdd720]
c0016d01:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0016d07:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0016d0d:	89 cb                	mov    ebx,ecx
c0016d0f:	c1 fb 1f             	sar    ebx,0x1f
c0016d12:	53                   	push   ebx
c0016d13:	51                   	push   ecx
c0016d14:	52                   	push   edx
c0016d15:	50                   	push   eax
c0016d16:	e8 85 4e 00 00       	call   c001bba0 <__udivdi3>
c0016d1b:	83 c4 10             	add    esp,0x10
c0016d1e:	89 c2                	mov    edx,eax
c0016d20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0016d24:	89 10                	mov    DWORD PTR [eax],edx
c0016d26:	b8 00 00 00 00       	mov    eax,0x0
c0016d2b:	eb 4b                	jmp    c0016d78 <fatWrapperIoctl+0x114>
c0016d2d:	8d 76 00             	lea    esi,[esi+0x0]
c0016d30:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0016d35:	75 09                	jne    c0016d40 <fatWrapperIoctl+0xdc>
c0016d37:	b8 00 00 00 00       	mov    eax,0x0
c0016d3c:	eb 3a                	jmp    c0016d78 <fatWrapperIoctl+0x114>
c0016d3e:	66 90                	xchg   ax,ax
c0016d40:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0016d45:	75 19                	jne    c0016d60 <fatWrapperIoctl+0xfc>
c0016d47:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016d4b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016d4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0016d53:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0016d59:	b8 00 00 00 00       	mov    eax,0x0
c0016d5e:	eb 18                	jmp    c0016d78 <fatWrapperIoctl+0x114>
c0016d60:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0016d65:	75 09                	jne    c0016d70 <fatWrapperIoctl+0x10c>
c0016d67:	b8 00 00 00 00       	mov    eax,0x0
c0016d6c:	eb 0a                	jmp    c0016d78 <fatWrapperIoctl+0x114>
c0016d6e:	66 90                	xchg   ax,ax
c0016d70:	b8 04 00 00 00       	mov    eax,0x4
c0016d75:	8d 76 00             	lea    esi,[esi+0x0]
c0016d78:	83 c4 28             	add    esp,0x28
c0016d7b:	5b                   	pop    ebx
c0016d7c:	c3                   	ret    
c0016d7d:	90                   	nop
c0016d7e:	66 90                	xchg   ax,ax

c0016d80 <FAT::FAT()>:
c0016d80:	83 ec 1c             	sub    esp,0x1c
c0016d83:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d87:	83 ec 0c             	sub    esp,0xc
c0016d8a:	50                   	push   eax
c0016d8b:	e8 ba 3c ff ff       	call   c000aa4a <Filesystem::Filesystem()>
c0016d90:	83 c4 10             	add    esp,0x10
c0016d93:	ba 10 e9 01 c0       	mov    edx,0xc001e910
c0016d98:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016d9c:	89 10                	mov    DWORD PTR [eax],edx
c0016d9e:	c7 05 00 39 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0023900,0x0
c0016da8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0016db0:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0016db5:	7f 15                	jg     c0016dcc <FAT::FAT()+0x4c>
c0016db7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0016dbb:	c7 04 85 20 39 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffdc6e0],0xffffffff
c0016dc6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0016dca:	eb e4                	jmp    c0016db0 <FAT::FAT()+0x30>
c0016dcc:	90                   	nop
c0016dcd:	83 c4 1c             	add    esp,0x1c
c0016dd0:	c3                   	ret    
c0016dd1:	90                   	nop
c0016dd2:	66 90                	xchg   ax,ax

c0016dd4 <FAT::fixFilepath(char*)>:
c0016dd4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016dd8:	8a 00                	mov    al,BYTE PTR [eax]
c0016dda:	3c 40                	cmp    al,0x40
c0016ddc:	7e 2e                	jle    c0016e0c <FAT::fixFilepath(char*)+0x38>
c0016dde:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016de2:	8a 00                	mov    al,BYTE PTR [eax]
c0016de4:	83 e8 41             	sub    eax,0x41
c0016de7:	88 c2                	mov    dl,al
c0016de9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016ded:	88 10                	mov    BYTE PTR [eax],dl
c0016def:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016df3:	8a 00                	mov    al,BYTE PTR [eax]
c0016df5:	0f be c0             	movsx  eax,al
c0016df8:	8b 04 85 20 39 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdc6e0]
c0016dff:	83 c0 30             	add    eax,0x30
c0016e02:	88 c2                	mov    dl,al
c0016e04:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016e08:	88 10                	mov    BYTE PTR [eax],dl
c0016e0a:	66 90                	xchg   ax,ax
c0016e0c:	90                   	nop
c0016e0d:	c3                   	ret    
c0016e0e:	66 90                	xchg   ax,ax

c0016e10 <FAT::open(char const*, void**, FileOpenMode)>:
c0016e10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016e16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016e1e:	74 0c                	je     c0016e2c <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c0016e20:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016e28:	75 0e                	jne    c0016e38 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0016e2a:	66 90                	xchg   ax,ax
c0016e2c:	b8 04 00 00 00       	mov    eax,0x4
c0016e31:	e9 0a 01 00 00       	jmp    c0016f40 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016e36:	66 90                	xchg   ax,ax
c0016e38:	83 ec 08             	sub    esp,0x8
c0016e3b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016e46:	50                   	push   eax
c0016e47:	e8 d4 97 fe ff       	call   c0000620 <strcpy>
c0016e4c:	83 c4 10             	add    esp,0x10
c0016e4f:	83 ec 08             	sub    esp,0x8
c0016e52:	8d 44 24 10          	lea    eax,[esp+0x10]
c0016e56:	50                   	push   eax
c0016e57:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016e5e:	e8 71 ff ff ff       	call   c0016dd4 <FAT::fixFilepath(char*)>
c0016e63:	83 c4 10             	add    esp,0x10
c0016e66:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0016e6e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016e75:	83 e0 01             	and    eax,0x1
c0016e78:	74 0a                	je     c0016e84 <FAT::open(char const*, void**, FileOpenMode)+0x74>
c0016e7a:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0016e82:	66 90                	xchg   ax,ax
c0016e84:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016e8b:	83 e0 04             	and    eax,0x4
c0016e8e:	74 10                	je     c0016ea0 <FAT::open(char const*, void**, FileOpenMode)+0x90>
c0016e90:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0016e98:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016ea0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016ea7:	83 e0 02             	and    eax,0x2
c0016eaa:	74 08                	je     c0016eb4 <FAT::open(char const*, void**, FileOpenMode)+0xa4>
c0016eac:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0016eb4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016ebb:	83 e0 08             	and    eax,0x8
c0016ebe:	74 08                	je     c0016ec8 <FAT::open(char const*, void**, FileOpenMode)+0xb8>
c0016ec0:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0016ec8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0016ecf:	83 e0 10             	and    eax,0x10
c0016ed2:	74 08                	je     c0016edc <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c0016ed4:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0016edc:	83 ec 0c             	sub    esp,0xc
c0016edf:	68 28 02 00 00       	push   0x228
c0016ee4:	e8 b0 0a ff ff       	call   c0007999 <malloc>
c0016ee9:	83 c4 10             	add    esp,0x10
c0016eec:	89 c2                	mov    edx,eax
c0016eee:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016ef5:	89 10                	mov    DWORD PTR [eax],edx
c0016ef7:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c0016efe:	31 d2                	xor    edx,edx
c0016f00:	88 c2                	mov    dl,al
c0016f02:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016f09:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f0b:	83 ec 04             	sub    esp,0x4
c0016f0e:	52                   	push   edx
c0016f0f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0016f13:	52                   	push   edx
c0016f14:	50                   	push   eax
c0016f15:	e8 23 cc fe ff       	call   c0003b3d <f_open>
c0016f1a:	83 c4 10             	add    esp,0x10
c0016f1d:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0016f24:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0016f2c:	74 0a                	je     c0016f38 <FAT::open(char const*, void**, FileOpenMode)+0x128>
c0016f2e:	b8 01 00 00 00       	mov    eax,0x1
c0016f33:	eb 0b                	jmp    c0016f40 <FAT::open(char const*, void**, FileOpenMode)+0x130>
c0016f35:	8d 76 00             	lea    esi,[esi+0x0]
c0016f38:	b8 00 00 00 00       	mov    eax,0x0
c0016f3d:	8d 76 00             	lea    esi,[esi+0x0]
c0016f40:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016f46:	c3                   	ret    
c0016f47:	90                   	nop

c0016f48 <FAT::openDir(char const*, void**)>:
c0016f48:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0016f4e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0016f56:	74 0c                	je     c0016f64 <FAT::openDir(char const*, void**)+0x1c>
c0016f58:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0016f60:	75 0e                	jne    c0016f70 <FAT::openDir(char const*, void**)+0x28>
c0016f62:	66 90                	xchg   ax,ax
c0016f64:	b8 04 00 00 00       	mov    eax,0x4
c0016f69:	e9 82 00 00 00       	jmp    c0016ff0 <FAT::openDir(char const*, void**)+0xa8>
c0016f6e:	66 90                	xchg   ax,ax
c0016f70:	83 ec 08             	sub    esp,0x8
c0016f73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016f7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0016f7e:	50                   	push   eax
c0016f7f:	e8 9c 96 fe ff       	call   c0000620 <strcpy>
c0016f84:	83 c4 10             	add    esp,0x10
c0016f87:	83 ec 08             	sub    esp,0x8
c0016f8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0016f8e:	50                   	push   eax
c0016f8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0016f96:	e8 39 fe ff ff       	call   c0016dd4 <FAT::fixFilepath(char*)>
c0016f9b:	83 c4 10             	add    esp,0x10
c0016f9e:	83 ec 0c             	sub    esp,0xc
c0016fa1:	6a 30                	push   0x30
c0016fa3:	e8 f1 09 ff ff       	call   c0007999 <malloc>
c0016fa8:	83 c4 10             	add    esp,0x10
c0016fab:	89 c2                	mov    edx,eax
c0016fad:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016fb4:	89 10                	mov    DWORD PTR [eax],edx
c0016fb6:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0016fbd:	8b 00                	mov    eax,DWORD PTR [eax]
c0016fbf:	83 ec 08             	sub    esp,0x8
c0016fc2:	8d 54 24 14          	lea    edx,[esp+0x14]
c0016fc6:	52                   	push   edx
c0016fc7:	50                   	push   eax
c0016fc8:	e8 f9 d4 fe ff       	call   c00044c6 <f_opendir>
c0016fcd:	83 c4 10             	add    esp,0x10
c0016fd0:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0016fd7:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0016fdf:	74 07                	je     c0016fe8 <FAT::openDir(char const*, void**)+0xa0>
c0016fe1:	b8 01 00 00 00       	mov    eax,0x1
c0016fe6:	eb 08                	jmp    c0016ff0 <FAT::openDir(char const*, void**)+0xa8>
c0016fe8:	b8 00 00 00 00       	mov    eax,0x0
c0016fed:	8d 76 00             	lea    esi,[esi+0x0]
c0016ff0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0016ff6:	c3                   	ret    
c0016ff7:	90                   	nop

c0016ff8 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0016ff8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0016ffe:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0017006:	75 0c                	jne    c0017014 <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0017008:	b8 04 00 00 00       	mov    eax,0x4
c001700d:	e9 d6 00 00 00       	jmp    c00170e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017012:	66 90                	xchg   ax,ax
c0017014:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c001701c:	75 0a                	jne    c0017028 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c001701e:	b8 04 00 00 00       	mov    eax,0x4
c0017023:	e9 c0 00 00 00       	jmp    c00170e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0017028:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0017030:	75 0a                	jne    c001703c <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c0017032:	b8 04 00 00 00       	mov    eax,0x4
c0017037:	e9 ac 00 00 00       	jmp    c00170e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001703c:	83 ec 08             	sub    esp,0x8
c001703f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017046:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001704d:	50                   	push   eax
c001704e:	e8 cd 95 fe ff       	call   c0000620 <strcpy>
c0017053:	83 c4 10             	add    esp,0x10
c0017056:	83 ec 08             	sub    esp,0x8
c0017059:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0017060:	50                   	push   eax
c0017061:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017068:	e8 67 fd ff ff       	call   c0016dd4 <FAT::fixFilepath(char*)>
c001706d:	83 c4 10             	add    esp,0x10
c0017070:	83 ec 08             	sub    esp,0x8
c0017073:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017077:	50                   	push   eax
c0017078:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c001707f:	50                   	push   eax
c0017080:	e8 c0 d5 fe ff       	call   c0004645 <f_stat>
c0017085:	83 c4 10             	add    esp,0x10
c0017088:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001708f:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0017096:	85 c0                	test   eax,eax
c0017098:	74 0a                	je     c00170a4 <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c001709a:	83 f8 04             	cmp    eax,0x4
c001709d:	74 39                	je     c00170d8 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c001709f:	eb 3f                	jmp    c00170e0 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c00170a1:	8d 76 00             	lea    esi,[esi+0x0]
c00170a4:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00170a8:	25 ff 00 00 00       	and    eax,0xff
c00170ad:	83 e0 10             	and    eax,0x10
c00170b0:	0f 95 c2             	setne  dl
c00170b3:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00170ba:	88 10                	mov    BYTE PTR [eax],dl
c00170bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00170c0:	ba 00 00 00 00       	mov    edx,0x0
c00170c5:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00170cc:	89 01                	mov    DWORD PTR [ecx],eax
c00170ce:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00170d1:	b8 00 00 00 00       	mov    eax,0x0
c00170d6:	eb 10                	jmp    c00170e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00170d8:	b8 02 00 00 00       	mov    eax,0x2
c00170dd:	eb 09                	jmp    c00170e8 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00170df:	90                   	nop
c00170e0:	b8 01 00 00 00       	mov    eax,0x1
c00170e5:	8d 76 00             	lea    esi,[esi+0x0]
c00170e8:	81 c4 2c 02 00 00    	add    esp,0x22c
c00170ee:	c3                   	ret    
c00170ef:	90                   	nop

c00170f0 <FAT::unlink(char const*)>:
c00170f0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00170f6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00170fe:	75 08                	jne    c0017108 <FAT::unlink(char const*)+0x18>
c0017100:	b8 04 00 00 00       	mov    eax,0x4
c0017105:	eb 61                	jmp    c0017168 <FAT::unlink(char const*)+0x78>
c0017107:	90                   	nop
c0017108:	83 ec 08             	sub    esp,0x8
c001710b:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017112:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017116:	50                   	push   eax
c0017117:	e8 04 95 fe ff       	call   c0000620 <strcpy>
c001711c:	83 c4 10             	add    esp,0x10
c001711f:	83 ec 08             	sub    esp,0x8
c0017122:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017126:	50                   	push   eax
c0017127:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001712e:	e8 a1 fc ff ff       	call   c0016dd4 <FAT::fixFilepath(char*)>
c0017133:	83 c4 10             	add    esp,0x10
c0017136:	83 ec 0c             	sub    esp,0xc
c0017139:	8d 44 24 18          	lea    eax,[esp+0x18]
c001713d:	50                   	push   eax
c001713e:	e8 67 d7 fe ff       	call   c00048aa <f_unlink>
c0017143:	83 c4 10             	add    esp,0x10
c0017146:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001714d:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0017154:	85 c0                	test   eax,eax
c0017156:	75 08                	jne    c0017160 <FAT::unlink(char const*)+0x70>
c0017158:	b8 00 00 00 00       	mov    eax,0x0
c001715d:	eb 09                	jmp    c0017168 <FAT::unlink(char const*)+0x78>
c001715f:	90                   	nop
c0017160:	b8 01 00 00 00       	mov    eax,0x1
c0017165:	8d 76 00             	lea    esi,[esi+0x0]
c0017168:	81 c4 1c 01 00 00    	add    esp,0x11c
c001716e:	c3                   	ret    
c001716f:	90                   	nop

c0017170 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0017170:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0017176:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c001717d:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0017184:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0017188:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001718c:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0017194:	75 0a                	jne    c00171a0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0017196:	b8 04 00 00 00       	mov    eax,0x4
c001719b:	e9 54 01 00 00       	jmp    c00172f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00171a0:	83 ec 08             	sub    esp,0x8
c00171a3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00171aa:	8d 44 24 24          	lea    eax,[esp+0x24]
c00171ae:	50                   	push   eax
c00171af:	e8 6c 94 fe ff       	call   c0000620 <strcpy>
c00171b4:	83 c4 10             	add    esp,0x10
c00171b7:	83 ec 08             	sub    esp,0x8
c00171ba:	8d 44 24 20          	lea    eax,[esp+0x20]
c00171be:	50                   	push   eax
c00171bf:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00171c6:	e8 09 fc ff ff       	call   c0016dd4 <FAT::fixFilepath(char*)>
c00171cb:	83 c4 10             	add    esp,0x10
c00171ce:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c00171d6:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c00171de:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00171e2:	25 ff 00 00 00       	and    eax,0xff
c00171e7:	83 e0 01             	and    eax,0x1
c00171ea:	74 08                	je     c00171f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x84>
c00171ec:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c00171f4:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c00171f8:	25 ff 00 00 00       	and    eax,0xff
c00171fd:	83 e0 02             	and    eax,0x2
c0017200:	74 0a                	je     c001720c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x9c>
c0017202:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c001720a:	66 90                	xchg   ax,ax
c001720c:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017210:	25 ff 00 00 00       	and    eax,0xff
c0017215:	83 e0 04             	and    eax,0x4
c0017218:	74 0a                	je     c0017224 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb4>
c001721a:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0017222:	66 90                	xchg   ax,ax
c0017224:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017228:	25 ff 00 00 00       	and    eax,0xff
c001722d:	83 e0 08             	and    eax,0x8
c0017230:	74 0a                	je     c001723c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xcc>
c0017232:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c001723a:	66 90                	xchg   ax,ax
c001723c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017240:	25 ff 00 00 00       	and    eax,0xff
c0017245:	83 e0 01             	and    eax,0x1
c0017248:	74 0a                	je     c0017254 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe4>
c001724a:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0017252:	66 90                	xchg   ax,ax
c0017254:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017258:	25 ff 00 00 00       	and    eax,0xff
c001725d:	83 e0 02             	and    eax,0x2
c0017260:	74 0a                	je     c001726c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0017262:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c001726a:	66 90                	xchg   ax,ax
c001726c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017270:	25 ff 00 00 00       	and    eax,0xff
c0017275:	83 e0 04             	and    eax,0x4
c0017278:	74 0a                	je     c0017284 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x114>
c001727a:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0017282:	66 90                	xchg   ax,ax
c0017284:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0017288:	25 ff 00 00 00       	and    eax,0xff
c001728d:	83 e0 08             	and    eax,0x8
c0017290:	74 0a                	je     c001729c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x12c>
c0017292:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c001729a:	66 90                	xchg   ax,ax
c001729c:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00172a3:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c00172aa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c00172b1:	31 d2                	xor    edx,edx
c00172b3:	88 c2                	mov    dl,al
c00172b5:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c00172bc:	25 ff 00 00 00       	and    eax,0xff
c00172c1:	83 ec 04             	sub    esp,0x4
c00172c4:	52                   	push   edx
c00172c5:	50                   	push   eax
c00172c6:	8d 44 24 24          	lea    eax,[esp+0x24]
c00172ca:	50                   	push   eax
c00172cb:	e8 4d da fe ff       	call   c0004d1d <f_chmod>
c00172d0:	83 c4 10             	add    esp,0x10
c00172d3:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c00172da:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c00172e1:	85 c0                	test   eax,eax
c00172e3:	75 07                	jne    c00172ec <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x17c>
c00172e5:	b8 00 00 00 00       	mov    eax,0x0
c00172ea:	eb 08                	jmp    c00172f4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x184>
c00172ec:	b8 01 00 00 00       	mov    eax,0x1
c00172f1:	8d 76 00             	lea    esi,[esi+0x0]
c00172f4:	81 c4 2c 01 00 00    	add    esp,0x12c
c00172fa:	c3                   	ret    
c00172fb:	90                   	nop

c00172fc <FAT::rename(char const*, char const*)>:
c00172fc:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0017302:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c001730a:	74 0c                	je     c0017318 <FAT::rename(char const*, char const*)+0x1c>
c001730c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0017314:	75 0e                	jne    c0017324 <FAT::rename(char const*, char const*)+0x28>
c0017316:	66 90                	xchg   ax,ax
c0017318:	b8 04 00 00 00       	mov    eax,0x4
c001731d:	e9 9e 00 00 00       	jmp    c00173c0 <FAT::rename(char const*, char const*)+0xc4>
c0017322:	66 90                	xchg   ax,ax
c0017324:	83 ec 08             	sub    esp,0x8
c0017327:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001732e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017335:	50                   	push   eax
c0017336:	e8 e5 92 fe ff       	call   c0000620 <strcpy>
c001733b:	83 c4 10             	add    esp,0x10
c001733e:	83 ec 08             	sub    esp,0x8
c0017341:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0017348:	50                   	push   eax
c0017349:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0017350:	e8 7f fa ff ff       	call   c0016dd4 <FAT::fixFilepath(char*)>
c0017355:	83 c4 10             	add    esp,0x10
c0017358:	83 ec 08             	sub    esp,0x8
c001735b:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0017362:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017366:	50                   	push   eax
c0017367:	e8 b4 92 fe ff       	call   c0000620 <strcpy>
c001736c:	83 c4 10             	add    esp,0x10
c001736f:	83 ec 08             	sub    esp,0x8
c0017372:	8d 44 24 14          	lea    eax,[esp+0x14]
c0017376:	50                   	push   eax
c0017377:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c001737e:	e8 51 fa ff ff       	call   c0016dd4 <FAT::fixFilepath(char*)>
c0017383:	83 c4 10             	add    esp,0x10
c0017386:	83 ec 08             	sub    esp,0x8
c0017389:	8d 44 24 14          	lea    eax,[esp+0x14]
c001738d:	50                   	push   eax
c001738e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0017395:	50                   	push   eax
c0017396:	e8 cc d7 fe ff       	call   c0004b67 <f_rename>
c001739b:	83 c4 10             	add    esp,0x10
c001739e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c00173a5:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c00173ac:	85 c0                	test   eax,eax
c00173ae:	75 08                	jne    c00173b8 <FAT::rename(char const*, char const*)+0xbc>
c00173b0:	b8 00 00 00 00       	mov    eax,0x0
c00173b5:	eb 09                	jmp    c00173c0 <FAT::rename(char const*, char const*)+0xc4>
c00173b7:	90                   	nop
c00173b8:	b8 01 00 00 00       	mov    eax,0x1
c00173bd:	8d 76 00             	lea    esi,[esi+0x0]
c00173c0:	81 c4 1c 02 00 00    	add    esp,0x21c
c00173c6:	c3                   	ret    
c00173c7:	90                   	nop

c00173c8 <FAT::mkdir(char const*)>:
c00173c8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00173ce:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00173d6:	75 08                	jne    c00173e0 <FAT::mkdir(char const*)+0x18>
c00173d8:	b8 04 00 00 00       	mov    eax,0x4
c00173dd:	eb 61                	jmp    c0017440 <FAT::mkdir(char const*)+0x78>
c00173df:	90                   	nop
c00173e0:	83 ec 08             	sub    esp,0x8
c00173e3:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00173ea:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173ee:	50                   	push   eax
c00173ef:	e8 2c 92 fe ff       	call   c0000620 <strcpy>
c00173f4:	83 c4 10             	add    esp,0x10
c00173f7:	83 ec 08             	sub    esp,0x8
c00173fa:	8d 44 24 14          	lea    eax,[esp+0x14]
c00173fe:	50                   	push   eax
c00173ff:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0017406:	e8 c9 f9 ff ff       	call   c0016dd4 <FAT::fixFilepath(char*)>
c001740b:	83 c4 10             	add    esp,0x10
c001740e:	83 ec 0c             	sub    esp,0xc
c0017411:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017415:	50                   	push   eax
c0017416:	e8 b1 d5 fe ff       	call   c00049cc <f_mkdir>
c001741b:	83 c4 10             	add    esp,0x10
c001741e:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0017425:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c001742c:	85 c0                	test   eax,eax
c001742e:	75 08                	jne    c0017438 <FAT::mkdir(char const*)+0x70>
c0017430:	b8 00 00 00 00       	mov    eax,0x0
c0017435:	eb 09                	jmp    c0017440 <FAT::mkdir(char const*)+0x78>
c0017437:	90                   	nop
c0017438:	b8 01 00 00 00       	mov    eax,0x1
c001743d:	8d 76 00             	lea    esi,[esi+0x0]
c0017440:	81 c4 1c 01 00 00    	add    esp,0x11c
c0017446:	c3                   	ret    
c0017447:	90                   	nop

c0017448 <FAT::exists(char const*)>:
c0017448:	81 ec 2c 02 00 00    	sub    esp,0x22c
c001744e:	83 ec 08             	sub    esp,0x8
c0017451:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017458:	8d 44 24 10          	lea    eax,[esp+0x10]
c001745c:	50                   	push   eax
c001745d:	e8 be 91 fe ff       	call   c0000620 <strcpy>
c0017462:	83 c4 10             	add    esp,0x10
c0017465:	83 ec 08             	sub    esp,0x8
c0017468:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001746c:	50                   	push   eax
c001746d:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0017474:	e8 5b f9 ff ff       	call   c0016dd4 <FAT::fixFilepath(char*)>
c0017479:	83 c4 10             	add    esp,0x10
c001747c:	83 ec 08             	sub    esp,0x8
c001747f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0017486:	50                   	push   eax
c0017487:	8d 44 24 10          	lea    eax,[esp+0x10]
c001748b:	50                   	push   eax
c001748c:	e8 b4 d1 fe ff       	call   c0004645 <f_stat>
c0017491:	83 c4 10             	add    esp,0x10
c0017494:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c001749b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00174a2:	85 c0                	test   eax,eax
c00174a4:	75 06                	jne    c00174ac <FAT::exists(char const*)+0x64>
c00174a6:	b0 01                	mov    al,0x1
c00174a8:	eb 06                	jmp    c00174b0 <FAT::exists(char const*)+0x68>
c00174aa:	66 90                	xchg   ax,ax
c00174ac:	b0 00                	mov    al,0x0
c00174ae:	66 90                	xchg   ax,ax
c00174b0:	81 c4 2c 02 00 00    	add    esp,0x22c
c00174b6:	c3                   	ret    
c00174b7:	90                   	nop

c00174b8 <isoReadDiscSectorHelper>:
c00174b8:	83 ec 2c             	sub    esp,0x2c
c00174bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174bf:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00174c3:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00174c8:	83 e8 41             	sub    eax,0x41
c00174cb:	8b 0c 85 e0 28 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdd720]
c00174d2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00174d6:	ba 00 00 00 00       	mov    edx,0x0
c00174db:	83 ec 0c             	sub    esp,0xc
c00174de:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00174e2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00174e6:	52                   	push   edx
c00174e7:	50                   	push   eax
c00174e8:	51                   	push   ecx
c00174e9:	e8 22 59 ff ff       	call   c000ce10 <LogicalDisk::read(unsigned long long, int, void*)>
c00174ee:	83 c4 20             	add    esp,0x20
c00174f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00174f5:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00174fa:	74 0c                	je     c0017508 <isoReadDiscSectorHelper+0x50>
c00174fc:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017500:	c1 e0 0b             	shl    eax,0xb
c0017503:	eb 0b                	jmp    c0017510 <isoReadDiscSectorHelper+0x58>
c0017505:	8d 76 00             	lea    esi,[esi+0x0]
c0017508:	b8 00 00 00 00       	mov    eax,0x0
c001750d:	8d 76 00             	lea    esi,[esi+0x0]
c0017510:	83 c4 2c             	add    esp,0x2c
c0017513:	c3                   	ret    

c0017514 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0017514:	b8 08 00 00 00       	mov    eax,0x8
c0017519:	c3                   	ret    

c001751a <ISO9660::getName()>:
c001751a:	b8 70 e9 01 c0       	mov    eax,0xc001e970
c001751f:	c3                   	ret    

c0017520 <ISO9660::closeDir(void*)>:
c0017520:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017524:	8b 00                	mov    eax,DWORD PTR [eax]
c0017526:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0017529:	90                   	nop

c001752a <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c001752a:	b8 01 00 00 00       	mov    eax,0x1
c001752f:	c3                   	ret    

c0017530 <ISO9660::unlink(char const*)>:
c0017530:	b8 01 00 00 00       	mov    eax,0x1
c0017535:	c3                   	ret    

c0017536 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0017536:	b8 03 00 00 00       	mov    eax,0x3
c001753b:	c3                   	ret    

c001753c <ISO9660::rename(char const*, char const*)>:
c001753c:	b8 01 00 00 00       	mov    eax,0x1
c0017541:	c3                   	ret    

c0017542 <ISO9660::mkdir(char const*)>:
c0017542:	b8 01 00 00 00       	mov    eax,0x1
c0017547:	c3                   	ret    

c0017548 <ISO9660::~ISO9660()>:
c0017548:	83 ec 0c             	sub    esp,0xc
c001754b:	ba 3c ea 01 c0       	mov    edx,0xc001ea3c
c0017550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017554:	89 10                	mov    DWORD PTR [eax],edx
c0017556:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001755a:	83 ec 0c             	sub    esp,0xc
c001755d:	50                   	push   eax
c001755e:	e8 0b 35 ff ff       	call   c000aa6e <Filesystem::~Filesystem()>
c0017563:	83 c4 10             	add    esp,0x10
c0017566:	90                   	nop
c0017567:	83 c4 0c             	add    esp,0xc
c001756a:	c3                   	ret    
c001756b:	90                   	nop

c001756c <ISO9660::~ISO9660()>:
c001756c:	83 ec 0c             	sub    esp,0xc
c001756f:	83 ec 0c             	sub    esp,0xc
c0017572:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017576:	e8 cd ff ff ff       	call   c0017548 <ISO9660::~ISO9660()>
c001757b:	83 c4 10             	add    esp,0x10
c001757e:	83 ec 08             	sub    esp,0x8
c0017581:	6a 08                	push   0x8
c0017583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017587:	e8 a6 30 ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001758c:	83 c4 10             	add    esp,0x10
c001758f:	83 c4 0c             	add    esp,0xc
c0017592:	c3                   	ret    
c0017593:	90                   	nop

c0017594 <ISO9660::exists(char const*)>:
c0017594:	83 ec 18             	sub    esp,0x18
c0017597:	68 8b e9 01 c0       	push   0xc001e98b
c001759c:	e8 ad dd ff ff       	call   c001534e <HalPanic(char const*)>
c00175a1:	31 c0                	xor    eax,eax
c00175a3:	83 c4 1c             	add    esp,0x1c
c00175a6:	c3                   	ret    
c00175a7:	90                   	nop

c00175a8 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c00175a8:	53                   	push   ebx
c00175a9:	83 ec 08             	sub    esp,0x8
c00175ac:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00175b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00175b4:	85 c0                	test   eax,eax
c00175b6:	0f 94 c3             	sete   bl
c00175b9:	85 d2                	test   edx,edx
c00175bb:	0f 94 c1             	sete   cl
c00175be:	08 cb                	or     bl,cl
c00175c0:	75 2e                	jne    c00175f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x48>
c00175c2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c00175c7:	74 27                	je     c00175f0 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x48>
c00175c9:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00175cc:	83 ec 0c             	sub    esp,0xc
c00175cf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00175d5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00175dc:	68 a9 e9 01 c0       	push   0xc001e9a9
c00175e1:	e8 68 dd ff ff       	call   c001534e <HalPanic(char const*)>
c00175e6:	83 c4 10             	add    esp,0x10
c00175e9:	b8 01 00 00 00       	mov    eax,0x1
c00175ee:	eb 05                	jmp    c00175f5 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x4d>
c00175f0:	b8 04 00 00 00       	mov    eax,0x4
c00175f5:	83 c4 08             	add    esp,0x8
c00175f8:	5b                   	pop    ebx
c00175f9:	c3                   	ret    

c00175fa <ISO9660::openDir(char const*, void**)>:
c00175fa:	83 ec 0c             	sub    esp,0xc
c00175fd:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0017602:	74 1b                	je     c001761f <ISO9660::openDir(char const*, void**)+0x25>
c0017604:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017609:	74 14                	je     c001761f <ISO9660::openDir(char const*, void**)+0x25>
c001760b:	83 ec 0c             	sub    esp,0xc
c001760e:	68 c9 e9 01 c0       	push   0xc001e9c9
c0017613:	e8 36 dd ff ff       	call   c001534e <HalPanic(char const*)>
c0017618:	83 c4 10             	add    esp,0x10
c001761b:	31 c0                	xor    eax,eax
c001761d:	eb 05                	jmp    c0017624 <ISO9660::openDir(char const*, void**)+0x2a>
c001761f:	b8 04 00 00 00       	mov    eax,0x4
c0017624:	83 c4 0c             	add    esp,0xc
c0017627:	c3                   	ret    

c0017628 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0017628:	83 ec 0c             	sub    esp,0xc
c001762b:	83 7c 24 20 00       	cmp    DWORD PTR [esp+0x20],0x0
c0017630:	74 1b                	je     c001764d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25>
c0017632:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0017637:	74 14                	je     c001764d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25>
c0017639:	83 ec 0c             	sub    esp,0xc
c001763c:	68 e8 e9 01 c0       	push   0xc001e9e8
c0017641:	e8 08 dd ff ff       	call   c001534e <HalPanic(char const*)>
c0017646:	83 c4 10             	add    esp,0x10
c0017649:	31 c0                	xor    eax,eax
c001764b:	eb 05                	jmp    c0017652 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2a>
c001764d:	b8 04 00 00 00       	mov    eax,0x4
c0017652:	83 c4 0c             	add    esp,0xc
c0017655:	c3                   	ret    

c0017656 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0017656:	56                   	push   esi
c0017657:	53                   	push   ebx
c0017658:	51                   	push   ecx
c0017659:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001765d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017661:	85 db                	test   ebx,ebx
c0017663:	0f 84 80 00 00 00    	je     c00176e9 <ISO9660::open(char const*, void**, FileOpenMode)+0x93>
c0017669:	85 f6                	test   esi,esi
c001766b:	74 7c                	je     c00176e9 <ISO9660::open(char const*, void**, FileOpenMode)+0x93>
c001766d:	ba 03 00 00 00       	mov    edx,0x3
c0017672:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0017677:	75 75                	jne    c00176ee <ISO9660::open(char const*, void**, FileOpenMode)+0x98>
c0017679:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001767c:	3a 05 00 3a 02 c0    	cmp    al,BYTE PTR ds:0xc0023a00
c0017682:	74 43                	je     c00176c7 <ISO9660::open(char const*, void**, FileOpenMode)+0x71>
c0017684:	83 ec 0c             	sub    esp,0xc
c0017687:	50                   	push   eax
c0017688:	e8 5b f1 fe ff       	call   c00067e8 <init_percd>
c001768d:	83 c4 10             	add    esp,0x10
c0017690:	ba 0b 00 00 00       	mov    edx,0xb
c0017695:	40                   	inc    eax
c0017696:	74 56                	je     c00176ee <ISO9660::open(char const*, void**, FileOpenMode)+0x98>
c0017698:	83 ec 0c             	sub    esp,0xc
c001769b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001769e:	50                   	push   eax
c001769f:	e8 46 f2 fe ff       	call   c00068ea <fs_iso9660_init>
c00176a4:	83 c4 10             	add    esp,0x10
c00176a7:	80 3d 00 3a 02 c0 00 	cmp    BYTE PTR ds:0xc0023a00,0x0
c00176ae:	74 10                	je     c00176c0 <ISO9660::open(char const*, void**, FileOpenMode)+0x6a>
c00176b0:	83 ec 0c             	sub    esp,0xc
c00176b3:	68 07 ea 01 c0       	push   0xc001ea07
c00176b8:	e8 91 dc ff ff       	call   c001534e <HalPanic(char const*)>
c00176bd:	83 c4 10             	add    esp,0x10
c00176c0:	8a 03                	mov    al,BYTE PTR [ebx]
c00176c2:	a2 00 3a 02 c0       	mov    ds:0xc0023a00,al
c00176c7:	83 ec 0c             	sub    esp,0xc
c00176ca:	83 c3 03             	add    ebx,0x3
c00176cd:	53                   	push   ebx
c00176ce:	e8 48 ec fe ff       	call   c000631b <iso_open>
c00176d3:	83 c4 10             	add    esp,0x10
c00176d6:	ba 01 00 00 00       	mov    edx,0x1
c00176db:	83 f8 ff             	cmp    eax,0xffffffff
c00176de:	74 0e                	je     c00176ee <ISO9660::open(char const*, void**, FileOpenMode)+0x98>
c00176e0:	83 c0 64             	add    eax,0x64
c00176e3:	31 d2                	xor    edx,edx
c00176e5:	89 06                	mov    DWORD PTR [esi],eax
c00176e7:	eb 05                	jmp    c00176ee <ISO9660::open(char const*, void**, FileOpenMode)+0x98>
c00176e9:	ba 04 00 00 00       	mov    edx,0x4
c00176ee:	89 d0                	mov    eax,edx
c00176f0:	5a                   	pop    edx
c00176f1:	5b                   	pop    ebx
c00176f2:	5e                   	pop    esi
c00176f3:	c3                   	ret    

c00176f4 <ISO9660::read(void*, unsigned long, void*, int*)>:
c00176f4:	53                   	push   ebx
c00176f5:	83 ec 08             	sub    esp,0x8
c00176f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00176fc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0017700:	85 c0                	test   eax,eax
c0017702:	74 25                	je     c0017729 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017704:	85 db                	test   ebx,ebx
c0017706:	74 21                	je     c0017729 <ISO9660::read(void*, unsigned long, void*, int*)+0x35>
c0017708:	83 e8 64             	sub    eax,0x64
c001770b:	52                   	push   edx
c001770c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017710:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017714:	50                   	push   eax
c0017715:	e8 9d ec fe ff       	call   c00063b7 <iso_read>
c001771a:	83 c4 10             	add    esp,0x10
c001771d:	89 03                	mov    DWORD PTR [ebx],eax
c001771f:	09 d0                	or     eax,edx
c0017721:	0f 94 c0             	sete   al
c0017724:	0f b6 c0             	movzx  eax,al
c0017727:	eb 05                	jmp    c001772e <ISO9660::read(void*, unsigned long, void*, int*)+0x3a>
c0017729:	b8 04 00 00 00       	mov    eax,0x4
c001772e:	83 c4 08             	add    esp,0x8
c0017731:	5b                   	pop    ebx
c0017732:	c3                   	ret    
c0017733:	90                   	nop

c0017734 <ISO9660::seek(void*, unsigned long long)>:
c0017734:	57                   	push   edi
c0017735:	56                   	push   esi
c0017736:	b8 04 00 00 00       	mov    eax,0x4
c001773b:	51                   	push   ecx
c001773c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017740:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0017744:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017748:	85 d2                	test   edx,edx
c001774a:	74 1c                	je     c0017768 <ISO9660::seek(void*, unsigned long long)+0x34>
c001774c:	6a 00                	push   0x0
c001774e:	83 ea 64             	sub    edx,0x64
c0017751:	57                   	push   edi
c0017752:	56                   	push   esi
c0017753:	52                   	push   edx
c0017754:	e8 74 ed fe ff       	call   c00064cd <iso_seek>
c0017759:	83 c4 10             	add    esp,0x10
c001775c:	31 f0                	xor    eax,esi
c001775e:	31 fa                	xor    edx,edi
c0017760:	09 d0                	or     eax,edx
c0017762:	0f 95 c0             	setne  al
c0017765:	0f b6 c0             	movzx  eax,al
c0017768:	5a                   	pop    edx
c0017769:	5e                   	pop    esi
c001776a:	5f                   	pop    edi
c001776b:	c3                   	ret    

c001776c <ISO9660::tell(void*, unsigned long long*)>:
c001776c:	53                   	push   ebx
c001776d:	83 ec 08             	sub    esp,0x8
c0017770:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017774:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017778:	85 c0                	test   eax,eax
c001777a:	74 1c                	je     c0017798 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c001777c:	85 db                	test   ebx,ebx
c001777e:	74 18                	je     c0017798 <ISO9660::tell(void*, unsigned long long*)+0x2c>
c0017780:	83 ec 0c             	sub    esp,0xc
c0017783:	83 e8 64             	sub    eax,0x64
c0017786:	50                   	push   eax
c0017787:	e8 c5 ed fe ff       	call   c0006551 <iso_tell>
c001778c:	83 c4 10             	add    esp,0x10
c001778f:	89 03                	mov    DWORD PTR [ebx],eax
c0017791:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0017794:	31 c0                	xor    eax,eax
c0017796:	eb 05                	jmp    c001779d <ISO9660::tell(void*, unsigned long long*)+0x31>
c0017798:	b8 04 00 00 00       	mov    eax,0x4
c001779d:	83 c4 08             	add    esp,0x8
c00177a0:	5b                   	pop    ebx
c00177a1:	c3                   	ret    

c00177a2 <ISO9660::stat(void*, unsigned long long*)>:
c00177a2:	53                   	push   ebx
c00177a3:	83 ec 08             	sub    esp,0x8
c00177a6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00177aa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00177ae:	85 c0                	test   eax,eax
c00177b0:	74 20                	je     c00177d2 <ISO9660::stat(void*, unsigned long long*)+0x30>
c00177b2:	85 db                	test   ebx,ebx
c00177b4:	74 1c                	je     c00177d2 <ISO9660::stat(void*, unsigned long long*)+0x30>
c00177b6:	83 ec 0c             	sub    esp,0xc
c00177b9:	83 e8 64             	sub    eax,0x64
c00177bc:	50                   	push   eax
c00177bd:	e8 c0 ed fe ff       	call   c0006582 <iso_total>
c00177c2:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00177c9:	89 03                	mov    DWORD PTR [ebx],eax
c00177cb:	83 c4 10             	add    esp,0x10
c00177ce:	31 c0                	xor    eax,eax
c00177d0:	eb 05                	jmp    c00177d7 <ISO9660::stat(void*, unsigned long long*)+0x35>
c00177d2:	b8 04 00 00 00       	mov    eax,0x4
c00177d7:	83 c4 08             	add    esp,0x8
c00177da:	5b                   	pop    ebx
c00177db:	c3                   	ret    

c00177dc <ISO9660::close(void*)>:
c00177dc:	83 ec 0c             	sub    esp,0xc
c00177df:	b8 04 00 00 00       	mov    eax,0x4
c00177e4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00177e8:	85 d2                	test   edx,edx
c00177ea:	74 11                	je     c00177fd <ISO9660::close(void*)+0x21>
c00177ec:	83 ec 0c             	sub    esp,0xc
c00177ef:	83 ea 64             	sub    edx,0x64
c00177f2:	52                   	push   edx
c00177f3:	e8 a5 eb fe ff       	call   c000639d <iso_close>
c00177f8:	83 c4 10             	add    esp,0x10
c00177fb:	31 c0                	xor    eax,eax
c00177fd:	83 c4 0c             	add    esp,0xc
c0017800:	c3                   	ret    

c0017801 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0017801:	57                   	push   edi
c0017802:	56                   	push   esi
c0017803:	53                   	push   ebx
c0017804:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017808:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001780c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017810:	39 35 04 3a 02 c0    	cmp    DWORD PTR ds:0xc0023a04,esi
c0017816:	75 08                	jne    c0017820 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c0017818:	38 1d 74 f3 01 c0    	cmp    BYTE PTR ds:0xc001f374,bl
c001781e:	74 59                	je     c0017879 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017820:	83 ec 0c             	sub    esp,0xc
c0017823:	31 d2                	xor    edx,edx
c0017825:	68 20 3a 02 c0       	push   0xc0023a20
c001782a:	0f be c3             	movsx  eax,bl
c001782d:	6a 01                	push   0x1
c001782f:	52                   	push   edx
c0017830:	56                   	push   esi
c0017831:	ff 34 85 dc 27 02 c0 	push   DWORD PTR [eax*4-0x3ffdd824]
c0017838:	e8 d3 55 ff ff       	call   c000ce10 <LogicalDisk::read(unsigned long long, int, void*)>
c001783d:	83 c4 20             	add    esp,0x20
c0017840:	85 c0                	test   eax,eax
c0017842:	75 0e                	jne    c0017852 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x51>
c0017844:	89 35 04 3a 02 c0    	mov    DWORD PTR ds:0xc0023a04,esi
c001784a:	88 1d 74 f3 01 c0    	mov    BYTE PTR ds:0xc001f374,bl
c0017850:	eb 27                	jmp    c0017879 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x78>
c0017852:	83 ec 0c             	sub    esp,0xc
c0017855:	68 17 ea 01 c0       	push   0xc001ea17
c001785a:	e8 c9 2e ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001785f:	83 c4 0c             	add    esp,0xc
c0017862:	68 00 08 00 00       	push   0x800
c0017867:	6a 00                	push   0x0
c0017869:	57                   	push   edi
c001786a:	e8 81 8c fe ff       	call   c00004f0 <memset>
c001786f:	83 c4 10             	add    esp,0x10
c0017872:	b8 01 00 00 00       	mov    eax,0x1
c0017877:	eb 0e                	jmp    c0017887 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x86>
c0017879:	be 20 3a 02 c0       	mov    esi,0xc0023a20
c001787e:	b9 00 08 00 00       	mov    ecx,0x800
c0017883:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017885:	31 c0                	xor    eax,eax
c0017887:	5b                   	pop    ebx
c0017888:	5e                   	pop    esi
c0017889:	5f                   	pop    edi
c001788a:	c3                   	ret    
c001788b:	90                   	nop

c001788c <ISO9660::tryMount(LogicalDisk*, int)>:
c001788c:	53                   	push   ebx
c001788d:	81 ec 0c 08 00 00    	sub    esp,0x80c
c0017893:	c7 05 04 3a 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0023a04,0xdeadbeef
c001789d:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c00178a4:	8d 58 41             	lea    ebx,[eax+0x41]
c00178a7:	0f be db             	movsx  ebx,bl
c00178aa:	53                   	push   ebx
c00178ab:	8d 44 24 08          	lea    eax,[esp+0x8]
c00178af:	50                   	push   eax
c00178b0:	6a 10                	push   0x10
c00178b2:	e8 4a ff ff ff       	call   c0017801 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00178b7:	83 c4 10             	add    esp,0x10
c00178ba:	85 c0                	test   eax,eax
c00178bc:	74 04                	je     c00178c2 <ISO9660::tryMount(LogicalDisk*, int)+0x36>
c00178be:	31 c0                	xor    eax,eax
c00178c0:	eb 40                	jmp    c0017902 <ISO9660::tryMount(LogicalDisk*, int)+0x76>
c00178c2:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c00178c7:	75 f5                	jne    c00178be <ISO9660::tryMount(LogicalDisk*, int)+0x32>
c00178c9:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c00178ce:	75 ee                	jne    c00178be <ISO9660::tryMount(LogicalDisk*, int)+0x32>
c00178d0:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c00178d5:	75 e7                	jne    c00178be <ISO9660::tryMount(LogicalDisk*, int)+0x32>
c00178d7:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c00178dc:	75 e0                	jne    c00178be <ISO9660::tryMount(LogicalDisk*, int)+0x32>
c00178de:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c00178e3:	75 d9                	jne    c00178be <ISO9660::tryMount(LogicalDisk*, int)+0x32>
c00178e5:	83 ec 0c             	sub    esp,0xc
c00178e8:	53                   	push   ebx
c00178e9:	e8 fa ee fe ff       	call   c00067e8 <init_percd>
c00178ee:	83 c4 10             	add    esp,0x10
c00178f1:	40                   	inc    eax
c00178f2:	74 ca                	je     c00178be <ISO9660::tryMount(LogicalDisk*, int)+0x32>
c00178f4:	83 ec 0c             	sub    esp,0xc
c00178f7:	53                   	push   ebx
c00178f8:	e8 ed ef fe ff       	call   c00068ea <fs_iso9660_init>
c00178fd:	83 c4 10             	add    esp,0x10
c0017900:	b0 01                	mov    al,0x1
c0017902:	81 c4 08 08 00 00    	add    esp,0x808
c0017908:	5b                   	pop    ebx
c0017909:	c3                   	ret    

c001790a <ISO9660::ISO9660()>:
c001790a:	83 ec 0c             	sub    esp,0xc
c001790d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017911:	83 ec 0c             	sub    esp,0xc
c0017914:	50                   	push   eax
c0017915:	e8 30 31 ff ff       	call   c000aa4a <Filesystem::Filesystem()>
c001791a:	83 c4 10             	add    esp,0x10
c001791d:	ba 3c ea 01 c0       	mov    edx,0xc001ea3c
c0017922:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017926:	89 10                	mov    DWORD PTR [eax],edx
c0017928:	90                   	nop
c0017929:	83 c4 0c             	add    esp,0xc
c001792c:	c3                   	ret    
c001792d:	90                   	nop

c001792e <SoundCard::beginPlayback()>:
c001792e:	c7 44 24 04 9c ea 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ea9c
c0017936:	e9 3c 89 ff ff       	jmp    c0010277 <Krnl::panic(char const*)>
c001793b:	90                   	nop

c001793c <SoundCard::stopPlayback()>:
c001793c:	c7 44 24 04 9c ea 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ea9c
c0017944:	e9 2e 89 ff ff       	jmp    c0010277 <Krnl::panic(char const*)>
c0017949:	90                   	nop

c001794a <SoundCard::SoundCard(char const*)>:
c001794a:	83 ec 1c             	sub    esp,0x1c
c001794d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017951:	83 ec 08             	sub    esp,0x8
c0017954:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017958:	50                   	push   eax
c0017959:	e8 a2 43 ff ff       	call   c000bd00 <Device::Device(char const*)>
c001795e:	83 c4 10             	add    esp,0x10
c0017961:	ba e8 ea 01 c0       	mov    edx,0xc001eae8
c0017966:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001796a:	89 10                	mov    DWORD PTR [eax],edx
c001796c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017970:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c0017977:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001797b:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c0017985:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017989:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c0017993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017997:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c00179a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179a5:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c00179af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00179b7:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00179bc:	7f 19                	jg     c00179d7 <SoundCard::SoundCard(char const*)+0x8d>
c00179be:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00179c6:	83 c2 54             	add    edx,0x54
c00179c9:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c00179d1:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00179d5:	eb e0                	jmp    c00179b7 <SoundCard::SoundCard(char const*)+0x6d>
c00179d7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00179db:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c00179e2:	90                   	nop
c00179e3:	83 c4 1c             	add    esp,0x1c
c00179e6:	c3                   	ret    
c00179e7:	90                   	nop

c00179e8 <SoundCard::~SoundCard()>:
c00179e8:	83 ec 0c             	sub    esp,0xc
c00179eb:	ba e8 ea 01 c0       	mov    edx,0xc001eae8
c00179f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179f4:	89 10                	mov    DWORD PTR [eax],edx
c00179f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00179fa:	83 ec 0c             	sub    esp,0xc
c00179fd:	50                   	push   eax
c00179fe:	e8 67 40 ff ff       	call   c000ba6a <Device::~Device()>
c0017a03:	83 c4 10             	add    esp,0x10
c0017a06:	90                   	nop
c0017a07:	83 c4 0c             	add    esp,0xc
c0017a0a:	c3                   	ret    
c0017a0b:	90                   	nop

c0017a0c <SoundCard::~SoundCard()>:
c0017a0c:	83 ec 0c             	sub    esp,0xc
c0017a0f:	83 ec 0c             	sub    esp,0xc
c0017a12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a16:	e8 cd ff ff ff       	call   c00179e8 <SoundCard::~SoundCard()>
c0017a1b:	83 c4 10             	add    esp,0x10
c0017a1e:	83 ec 08             	sub    esp,0x8
c0017a21:	68 e8 01 00 00       	push   0x1e8
c0017a26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017a2a:	e8 03 2c ff ff       	call   c000a632 <operator delete(void*, unsigned long)>
c0017a2f:	83 c4 10             	add    esp,0x10
c0017a32:	83 c4 0c             	add    esp,0xc
c0017a35:	c3                   	ret    

c0017a36 <SoundCard::configureRates(int, int, int)>:
c0017a36:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0017a3a:	31 c0                	xor    eax,eax
c0017a3c:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c0017a43:	75 20                	jne    c0017a65 <SoundCard::configureRates(int, int, int)+0x2f>
c0017a45:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017a49:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c0017a4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a53:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c0017a59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017a5d:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c0017a63:	b0 01                	mov    al,0x1
c0017a65:	c3                   	ret    

c0017a66 <SoundCard::getSamples16(int, short*)>:
c0017a66:	55                   	push   ebp
c0017a67:	57                   	push   edi
c0017a68:	31 ff                	xor    edi,edi
c0017a6a:	56                   	push   esi
c0017a6b:	53                   	push   ebx
c0017a6c:	31 db                	xor    ebx,ebx
c0017a6e:	83 ec 10             	sub    esp,0x10
c0017a71:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0017a75:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017a79:	8d 04 36             	lea    eax,[esi+esi*1]
c0017a7c:	50                   	push   eax
c0017a7d:	6a 00                	push   0x0
c0017a7f:	55                   	push   ebp
c0017a80:	e8 6b 8a fe ff       	call   c00004f0 <memset>
c0017a85:	83 c4 10             	add    esp,0x10
c0017a88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017a8c:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c0017a93:	85 c0                	test   eax,eax
c0017a95:	74 1b                	je     c0017ab2 <SoundCard::getSamples16(int, short*)+0x4c>
c0017a97:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017a9b:	75 15                	jne    c0017ab2 <SoundCard::getSamples16(int, short*)+0x4c>
c0017a9d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017aa1:	55                   	push   ebp
c0017aa2:	56                   	push   esi
c0017aa3:	50                   	push   eax
c0017aa4:	e8 ef 02 00 00       	call   c0017d98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c0017aa9:	83 c4 10             	add    esp,0x10
c0017aac:	39 c7                	cmp    edi,eax
c0017aae:	7d 02                	jge    c0017ab2 <SoundCard::getSamples16(int, short*)+0x4c>
c0017ab0:	89 c7                	mov    edi,eax
c0017ab2:	43                   	inc    ebx
c0017ab3:	83 fb 20             	cmp    ebx,0x20
c0017ab6:	75 d0                	jne    c0017a88 <SoundCard::getSamples16(int, short*)+0x22>
c0017ab8:	83 c4 0c             	add    esp,0xc
c0017abb:	89 f8                	mov    eax,edi
c0017abd:	5b                   	pop    ebx
c0017abe:	5e                   	pop    esi
c0017abf:	5f                   	pop    edi
c0017ac0:	5d                   	pop    ebp
c0017ac1:	c3                   	ret    

c0017ac2 <SoundCard::getSamples32(int, int*)>:
c0017ac2:	55                   	push   ebp
c0017ac3:	57                   	push   edi
c0017ac4:	31 ff                	xor    edi,edi
c0017ac6:	56                   	push   esi
c0017ac7:	31 f6                	xor    esi,esi
c0017ac9:	53                   	push   ebx
c0017aca:	83 ec 10             	sub    esp,0x10
c0017acd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ad1:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c0017ad5:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c0017ad9:	c1 e0 02             	shl    eax,0x2
c0017adc:	50                   	push   eax
c0017add:	6a 00                	push   0x0
c0017adf:	55                   	push   ebp
c0017ae0:	e8 0b 8a fe ff       	call   c00004f0 <memset>
c0017ae5:	83 c4 10             	add    esp,0x10
c0017ae8:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c0017aef:	85 c0                	test   eax,eax
c0017af1:	74 1b                	je     c0017b0e <SoundCard::getSamples32(int, int*)+0x4c>
c0017af3:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c0017af7:	75 15                	jne    c0017b0e <SoundCard::getSamples32(int, int*)+0x4c>
c0017af9:	53                   	push   ebx
c0017afa:	55                   	push   ebp
c0017afb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017aff:	50                   	push   eax
c0017b00:	e8 57 03 00 00       	call   c0017e5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c0017b05:	83 c4 10             	add    esp,0x10
c0017b08:	39 c6                	cmp    esi,eax
c0017b0a:	7d 02                	jge    c0017b0e <SoundCard::getSamples32(int, int*)+0x4c>
c0017b0c:	89 c6                	mov    esi,eax
c0017b0e:	47                   	inc    edi
c0017b0f:	83 ff 20             	cmp    edi,0x20
c0017b12:	75 d4                	jne    c0017ae8 <SoundCard::getSamples32(int, int*)+0x26>
c0017b14:	8a 83 d8 01 00 00    	mov    al,BYTE PTR [ebx+0x1d8]
c0017b1a:	85 f6                	test   esi,esi
c0017b1c:	75 0f                	jne    c0017b2d <SoundCard::getSamples32(int, int*)+0x6b>
c0017b1e:	84 c0                	test   al,al
c0017b20:	74 1b                	je     c0017b3d <SoundCard::getSamples32(int, int*)+0x7b>
c0017b22:	83 ec 0c             	sub    esp,0xc
c0017b25:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b27:	53                   	push   ebx
c0017b28:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0017b2b:	eb 0d                	jmp    c0017b3a <SoundCard::getSamples32(int, int*)+0x78>
c0017b2d:	84 c0                	test   al,al
c0017b2f:	75 0c                	jne    c0017b3d <SoundCard::getSamples32(int, int*)+0x7b>
c0017b31:	83 ec 0c             	sub    esp,0xc
c0017b34:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017b36:	53                   	push   ebx
c0017b37:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017b3a:	83 c4 10             	add    esp,0x10
c0017b3d:	83 c4 0c             	add    esp,0xc
c0017b40:	89 f0                	mov    eax,esi
c0017b42:	5b                   	pop    ebx
c0017b43:	5e                   	pop    esi
c0017b44:	5f                   	pop    edi
c0017b45:	5d                   	pop    ebp
c0017b46:	c3                   	ret    
c0017b47:	90                   	nop

c0017b48 <SoundCard::addChannel(SoundPort*)>:
c0017b48:	83 ec 0c             	sub    esp,0xc
c0017b4b:	31 c0                	xor    eax,eax
c0017b4d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017b51:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0017b59:	74 1b                	je     c0017b76 <SoundCard::addChannel(SoundPort*)+0x2e>
c0017b5b:	40                   	inc    eax
c0017b5c:	83 f8 20             	cmp    eax,0x20
c0017b5f:	75 f0                	jne    c0017b51 <SoundCard::addChannel(SoundPort*)+0x9>
c0017b61:	83 ec 0c             	sub    esp,0xc
c0017b64:	68 c1 ea 01 c0       	push   0xc001eac1
c0017b69:	e8 09 87 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0017b6e:	83 c4 10             	add    esp,0x10
c0017b71:	83 c8 ff             	or     eax,0xffffffff
c0017b74:	eb 0b                	jmp    c0017b81 <SoundCard::addChannel(SoundPort*)+0x39>
c0017b76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0017b7a:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c0017b81:	83 c4 0c             	add    esp,0xc
c0017b84:	c3                   	ret    
c0017b85:	90                   	nop

c0017b86 <SoundCard::removeChannel(int)>:
c0017b86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017b8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017b8e:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c0017b99:	c3                   	ret    
c0017b9a:	66 90                	xchg   ax,ax

c0017b9c <SoundPort::SoundPort(int, int, int, int)>:
c0017b9c:	83 ec 0c             	sub    esp,0xc
c0017b9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017ba3:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017baa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bae:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017bb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bb6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017bba:	89 10                	mov    DWORD PTR [eax],edx
c0017bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bc0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017bc4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0017bc7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bcb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017bcf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0017bd2:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c0017bd7:	75 13                	jne    c0017bec <SoundPort::SoundPort(int, int, int, int)+0x50>
c0017bd9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bdd:	8b 00                	mov    eax,DWORD PTR [eax]
c0017bdf:	05 a0 0f 00 00       	add    eax,0xfa0
c0017be4:	01 c0                	add    eax,eax
c0017be6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017bea:	66 90                	xchg   ax,ax
c0017bec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bf0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017bf4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0017bf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017bfb:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0017c02:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017c09:	c1 e0 02             	shl    eax,0x2
c0017c0c:	83 ec 0c             	sub    esp,0xc
c0017c0f:	50                   	push   eax
c0017c10:	e8 84 fd fe ff       	call   c0007999 <malloc>
c0017c15:	83 c4 10             	add    esp,0x10
c0017c18:	89 c2                	mov    edx,eax
c0017c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c1e:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0017c21:	90                   	nop
c0017c22:	83 c4 0c             	add    esp,0xc
c0017c25:	c3                   	ret    
c0017c26:	66 90                	xchg   ax,ax

c0017c28 <SoundPort::~SoundPort()>:
c0017c28:	83 ec 0c             	sub    esp,0xc
c0017c2b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c2f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017c32:	85 c0                	test   eax,eax
c0017c34:	74 1e                	je     c0017c54 <SoundPort::~SoundPort()+0x2c>
c0017c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c3a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0017c3d:	83 ec 0c             	sub    esp,0xc
c0017c40:	50                   	push   eax
c0017c41:	e8 63 fd fe ff       	call   c00079a9 <free>
c0017c46:	83 c4 10             	add    esp,0x10
c0017c49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c4d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c0017c54:	90                   	nop
c0017c55:	83 c4 0c             	add    esp,0xc
c0017c58:	c3                   	ret    
c0017c59:	90                   	nop
c0017c5a:	66 90                	xchg   ax,ax

c0017c5c <SoundPort::unpause()>:
c0017c5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c60:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c0017c64:	c3                   	ret    
c0017c65:	90                   	nop
c0017c66:	66 90                	xchg   ax,ax

c0017c68 <SoundPort::pause()>:
c0017c68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c6c:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c0017c70:	c3                   	ret    
c0017c71:	90                   	nop
c0017c72:	66 90                	xchg   ax,ax

c0017c74 <SoundPort::getBufferUsed()>:
c0017c74:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c78:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0017c7b:	c3                   	ret    

c0017c7c <SoundPort::getBufferSize()>:
c0017c7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017c80:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0017c83:	c3                   	ret    

c0017c84 <SoundPort::buffer16(short*, int)>:
c0017c84:	55                   	push   ebp
c0017c85:	57                   	push   edi
c0017c86:	56                   	push   esi
c0017c87:	53                   	push   ebx
c0017c88:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017c8c:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0017c90:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0017c93:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c0017c96:	74 68                	je     c0017d00 <SoundPort::buffer16(short*, int)+0x7c>
c0017c98:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0017c9c:	85 c9                	test   ecx,ecx
c0017c9e:	7e 60                	jle    c0017d00 <SoundPort::buffer16(short*, int)+0x7c>
c0017ca0:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c0017ca4:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017ca7:	c1 e1 0f             	shl    ecx,0xf
c0017caa:	8d 70 01             	lea    esi,[eax+0x1]
c0017cad:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017cb0:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c0017cb3:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017cb6:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017cb9:	74 4d                	je     c0017d08 <SoundPort::buffer16(short*, int)+0x84>
c0017cbb:	31 f6                	xor    esi,esi
c0017cbd:	eb 21                	jmp    c0017ce0 <SoundPort::buffer16(short*, int)+0x5c>
c0017cbf:	90                   	nop
c0017cc0:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c0017cc5:	8d 79 01             	lea    edi,[ecx+0x1]
c0017cc8:	c1 e3 0f             	shl    ebx,0xf
c0017ccb:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c0017cce:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0017cd1:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c0017cd4:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017cd7:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017cda:	74 1c                	je     c0017cf8 <SoundPort::buffer16(short*, int)+0x74>
c0017cdc:	89 c6                	mov    esi,eax
c0017cde:	66 90                	xchg   ax,ax
c0017ce0:	8d 46 01             	lea    eax,[esi+0x1]
c0017ce3:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c0017ce7:	75 d7                	jne    c0017cc0 <SoundPort::buffer16(short*, int)+0x3c>
c0017ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017ced:	8d 76 00             	lea    esi,[esi+0x0]
c0017cf0:	5b                   	pop    ebx
c0017cf1:	5e                   	pop    esi
c0017cf2:	5f                   	pop    edi
c0017cf3:	5d                   	pop    ebp
c0017cf4:	c3                   	ret    
c0017cf5:	8d 76 00             	lea    esi,[esi+0x0]
c0017cf8:	5b                   	pop    ebx
c0017cf9:	8d 46 02             	lea    eax,[esi+0x2]
c0017cfc:	5e                   	pop    esi
c0017cfd:	5f                   	pop    edi
c0017cfe:	5d                   	pop    ebp
c0017cff:	c3                   	ret    
c0017d00:	5b                   	pop    ebx
c0017d01:	31 c0                	xor    eax,eax
c0017d03:	5e                   	pop    esi
c0017d04:	5f                   	pop    edi
c0017d05:	5d                   	pop    ebp
c0017d06:	c3                   	ret    
c0017d07:	90                   	nop
c0017d08:	b8 01 00 00 00       	mov    eax,0x1
c0017d0d:	eb e1                	jmp    c0017cf0 <SoundPort::buffer16(short*, int)+0x6c>
c0017d0f:	90                   	nop

c0017d10 <SoundPort::buffer32(int*, int)>:
c0017d10:	55                   	push   ebp
c0017d11:	57                   	push   edi
c0017d12:	56                   	push   esi
c0017d13:	53                   	push   ebx
c0017d14:	51                   	push   ecx
c0017d15:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017d19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017d1d:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d20:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017d24:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d27:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d2a:	74 5c                	je     c0017d88 <SoundPort::buffer32(int*, int)+0x78>
c0017d2c:	85 c0                	test   eax,eax
c0017d2e:	7e 58                	jle    c0017d88 <SoundPort::buffer32(int*, int)+0x78>
c0017d30:	8d 71 01             	lea    esi,[ecx+0x1]
c0017d33:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0017d36:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c0017d39:	8b 37                	mov    esi,DWORD PTR [edi]
c0017d3b:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c0017d3e:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d41:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d44:	74 4a                	je     c0017d90 <SoundPort::buffer32(int*, int)+0x80>
c0017d46:	31 f6                	xor    esi,esi
c0017d48:	eb 1e                	jmp    c0017d68 <SoundPort::buffer32(int*, int)+0x58>
c0017d4a:	66 90                	xchg   ax,ax
c0017d4c:	8d 69 01             	lea    ebp,[ecx+0x1]
c0017d4f:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c0017d52:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c0017d55:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c0017d58:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c0017d5c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0017d5f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c0017d62:	74 18                	je     c0017d7c <SoundPort::buffer32(int*, int)+0x6c>
c0017d64:	89 de                	mov    esi,ebx
c0017d66:	66 90                	xchg   ax,ax
c0017d68:	8d 5e 01             	lea    ebx,[esi+0x1]
c0017d6b:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c0017d6e:	75 dc                	jne    c0017d4c <SoundPort::buffer32(int*, int)+0x3c>
c0017d70:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017d73:	90                   	nop
c0017d74:	5a                   	pop    edx
c0017d75:	5b                   	pop    ebx
c0017d76:	5e                   	pop    esi
c0017d77:	5f                   	pop    edi
c0017d78:	5d                   	pop    ebp
c0017d79:	c3                   	ret    
c0017d7a:	66 90                	xchg   ax,ax
c0017d7c:	5a                   	pop    edx
c0017d7d:	8d 46 02             	lea    eax,[esi+0x2]
c0017d80:	5b                   	pop    ebx
c0017d81:	5e                   	pop    esi
c0017d82:	5f                   	pop    edi
c0017d83:	5d                   	pop    ebp
c0017d84:	c3                   	ret    
c0017d85:	8d 76 00             	lea    esi,[esi+0x0]
c0017d88:	5a                   	pop    edx
c0017d89:	31 c0                	xor    eax,eax
c0017d8b:	5b                   	pop    ebx
c0017d8c:	5e                   	pop    esi
c0017d8d:	5f                   	pop    edi
c0017d8e:	5d                   	pop    ebp
c0017d8f:	c3                   	ret    
c0017d90:	b8 01 00 00 00       	mov    eax,0x1
c0017d95:	eb dd                	jmp    c0017d74 <SoundPort::buffer32(int*, int)+0x64>
c0017d97:	90                   	nop

c0017d98 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c0017d98:	57                   	push   edi
c0017d99:	56                   	push   esi
c0017d9a:	53                   	push   ebx
c0017d9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0017d9f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0017da3:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c0017da9:	39 03                	cmp    DWORD PTR [ebx],eax
c0017dab:	74 13                	je     c0017dc0 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c0017dad:	83 ec 0c             	sub    esp,0xc
c0017db0:	68 14 eb 01 c0       	push   0xc001eb14
c0017db5:	e8 bd 84 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0017dba:	83 c4 10             	add    esp,0x10
c0017dbd:	8d 76 00             	lea    esi,[esi+0x0]
c0017dc0:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c0017dc6:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c0017dc9:	74 11                	je     c0017ddc <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c0017dcb:	83 ec 0c             	sub    esp,0xc
c0017dce:	68 53 eb 01 c0       	push   0xc001eb53
c0017dd3:	e8 9f 84 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0017dd8:	83 c4 10             	add    esp,0x10
c0017ddb:	90                   	nop
c0017ddc:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c0017de2:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c0017de5:	74 11                	je     c0017df8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c0017de7:	83 ec 0c             	sub    esp,0xc
c0017dea:	68 53 eb 01 c0       	push   0xc001eb53
c0017def:	e8 83 84 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0017df4:	83 c4 10             	add    esp,0x10
c0017df7:	90                   	nop
c0017df8:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017dfb:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c0017dff:	7e 07                	jle    c0017e08 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c0017e01:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0017e05:	8d 76 00             	lea    esi,[esi+0x0]
c0017e08:	85 f6                	test   esi,esi
c0017e0a:	7e 2c                	jle    c0017e38 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c0017e0c:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e10:	8d 3c 36             	lea    edi,[esi+esi*1]
c0017e13:	31 c9                	xor    ecx,ecx
c0017e15:	01 d7                	add    edi,edx
c0017e17:	90                   	nop
c0017e18:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0017e1b:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c0017e1e:	85 c0                	test   eax,eax
c0017e20:	79 06                	jns    c0017e28 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c0017e22:	05 ff 7f 00 00       	add    eax,0x7fff
c0017e27:	90                   	nop
c0017e28:	c1 f8 0f             	sar    eax,0xf
c0017e2b:	83 c1 04             	add    ecx,0x4
c0017e2e:	66 01 02             	add    WORD PTR [edx],ax
c0017e31:	83 c2 02             	add    edx,0x2
c0017e34:	39 d7                	cmp    edi,edx
c0017e36:	75 e0                	jne    c0017e18 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c0017e38:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0017e3b:	50                   	push   eax
c0017e3c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017e3f:	29 f0                	sub    eax,esi
c0017e41:	c1 e0 02             	shl    eax,0x2
c0017e44:	50                   	push   eax
c0017e45:	8d 04 b2             	lea    eax,[edx+esi*4]
c0017e48:	50                   	push   eax
c0017e49:	52                   	push   edx
c0017e4a:	e8 b1 85 fe ff       	call   c0000400 <memmove>
c0017e4f:	29 73 14             	sub    DWORD PTR [ebx+0x14],esi
c0017e52:	83 c4 10             	add    esp,0x10
c0017e55:	89 f0                	mov    eax,esi
c0017e57:	5b                   	pop    ebx
c0017e58:	5e                   	pop    esi
c0017e59:	5f                   	pop    edi
c0017e5a:	c3                   	ret    
c0017e5b:	90                   	nop

c0017e5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c0017e5c:	57                   	push   edi
c0017e5d:	56                   	push   esi
c0017e5e:	53                   	push   ebx
c0017e5f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0017e63:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0017e67:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017e6b:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c0017e71:	39 06                	cmp    DWORD PTR [esi],eax
c0017e73:	74 13                	je     c0017e88 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c0017e75:	83 ec 0c             	sub    esp,0xc
c0017e78:	68 34 eb 01 c0       	push   0xc001eb34
c0017e7d:	e8 f5 83 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0017e82:	83 c4 10             	add    esp,0x10
c0017e85:	8d 76 00             	lea    esi,[esi+0x0]
c0017e88:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c0017e8e:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c0017e91:	74 11                	je     c0017ea4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c0017e93:	83 ec 0c             	sub    esp,0xc
c0017e96:	68 6f eb 01 c0       	push   0xc001eb6f
c0017e9b:	e8 d7 83 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0017ea0:	83 c4 10             	add    esp,0x10
c0017ea3:	90                   	nop
c0017ea4:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c0017eaa:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c0017ead:	74 11                	je     c0017ec0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c0017eaf:	83 ec 0c             	sub    esp,0xc
c0017eb2:	68 6f eb 01 c0       	push   0xc001eb6f
c0017eb7:	e8 bb 83 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0017ebc:	83 c4 10             	add    esp,0x10
c0017ebf:	90                   	nop
c0017ec0:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c0017ec3:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c0017ec7:	7e 07                	jle    c0017ed0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c0017ec9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017ecd:	8d 76 00             	lea    esi,[esi+0x0]
c0017ed0:	85 ff                	test   edi,edi
c0017ed2:	7e 1c                	jle    c0017ef0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c0017ed4:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c0017edb:	31 c0                	xor    eax,eax
c0017edd:	8d 76 00             	lea    esi,[esi+0x0]
c0017ee0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017ee3:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c0017ee6:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c0017ee9:	83 c0 04             	add    eax,0x4
c0017eec:	39 c1                	cmp    ecx,eax
c0017eee:	75 f0                	jne    c0017ee0 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c0017ef0:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0017ef3:	50                   	push   eax
c0017ef4:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0017ef7:	29 f8                	sub    eax,edi
c0017ef9:	c1 e0 02             	shl    eax,0x2
c0017efc:	50                   	push   eax
c0017efd:	8d 04 ba             	lea    eax,[edx+edi*4]
c0017f00:	50                   	push   eax
c0017f01:	52                   	push   edx
c0017f02:	e8 f9 84 fe ff       	call   c0000400 <memmove>
c0017f07:	29 7e 14             	sub    DWORD PTR [esi+0x14],edi
c0017f0a:	83 c4 10             	add    esp,0x10
c0017f0d:	89 f8                	mov    eax,edi
c0017f0f:	5b                   	pop    ebx
c0017f10:	5e                   	pop    esi
c0017f11:	5f                   	pop    edi
c0017f12:	c3                   	ret    
c0017f13:	90                   	nop

c0017f14 <PCI::open(int, int, void*)>:
c0017f14:	83 ec 18             	sub    esp,0x18
c0017f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f1b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f1f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0017f25:	8b 10                	mov    edx,DWORD PTR [eax]
c0017f27:	50                   	push   eax
c0017f28:	ff 52 18             	call   DWORD PTR [edx+0x18]
c0017f2b:	31 c0                	xor    eax,eax
c0017f2d:	83 c4 1c             	add    esp,0x1c
c0017f30:	c3                   	ret    
c0017f31:	90                   	nop

c0017f32 <PCI::close(int, int, void*)>:
c0017f32:	31 c0                	xor    eax,eax
c0017f34:	c3                   	ret    
c0017f35:	90                   	nop

c0017f36 <PCI::PCI()>:
c0017f36:	83 ec 0c             	sub    esp,0xc
c0017f39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f3d:	83 ec 08             	sub    esp,0x8
c0017f40:	68 8b eb 01 c0       	push   0xc001eb8b
c0017f45:	50                   	push   eax
c0017f46:	e8 71 35 ff ff       	call   c000b4bc <Bus::Bus(char const*)>
c0017f4b:	83 c4 10             	add    esp,0x10
c0017f4e:	ba 34 ec 01 c0       	mov    edx,0xc001ec34
c0017f53:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f57:	89 10                	mov    DWORD PTR [eax],edx
c0017f59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f5d:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c0017f67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f6b:	a3 20 42 02 c0       	mov    ds:0xc0024220,eax
c0017f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f74:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017f7a:	31 d2                	xor    edx,edx
c0017f7c:	88 c2                	mov    dl,al
c0017f7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f82:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0017f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f8d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017f93:	31 d2                	xor    edx,edx
c0017f95:	88 c2                	mov    dl,al
c0017f97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017f9b:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0017fa0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fa4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0017faa:	8d 50 01             	lea    edx,[eax+0x1]
c0017fad:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017fb1:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0017fb7:	31 d2                	xor    edx,edx
c0017fb9:	88 c2                	mov    dl,al
c0017fbb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017fbf:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0017fc3:	83 c9 c0             	or     ecx,0xffffffc0
c0017fc6:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0017fca:	90                   	nop
c0017fcb:	83 c4 0c             	add    esp,0xc
c0017fce:	c3                   	ret    
c0017fcf:	90                   	nop

c0017fd0 <PCI::readBAR8(unsigned int, int)>:
c0017fd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017fd4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017fd8:	f6 c2 01             	test   dl,0x1
c0017fdb:	74 07                	je     c0017fe4 <PCI::readBAR8(unsigned int, int)+0x14>
c0017fdd:	83 e2 fc             	and    edx,0xfffffffc
c0017fe0:	01 c2                	add    edx,eax
c0017fe2:	ec                   	in     al,dx
c0017fe3:	c3                   	ret    
c0017fe4:	83 e2 f0             	and    edx,0xfffffff0
c0017fe7:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c0017fea:	c3                   	ret    
c0017feb:	90                   	nop

c0017fec <PCI::readBAR16(unsigned int, int)>:
c0017fec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017ff0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017ff4:	f6 c2 01             	test   dl,0x1
c0017ff7:	74 08                	je     c0018001 <PCI::readBAR16(unsigned int, int)+0x15>
c0017ff9:	83 e2 fc             	and    edx,0xfffffffc
c0017ffc:	01 c2                	add    edx,eax
c0017ffe:	66 ed                	in     ax,dx
c0018000:	c3                   	ret    
c0018001:	83 e2 f0             	and    edx,0xfffffff0
c0018004:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c0018008:	c3                   	ret    
c0018009:	90                   	nop

c001800a <PCI::readBAR32(unsigned int, int)>:
c001800a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001800e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018012:	f6 c2 01             	test   dl,0x1
c0018015:	74 07                	je     c001801e <PCI::readBAR32(unsigned int, int)+0x14>
c0018017:	83 e2 fc             	and    edx,0xfffffffc
c001801a:	01 c2                	add    edx,eax
c001801c:	ed                   	in     eax,dx
c001801d:	c3                   	ret    
c001801e:	83 e2 f0             	and    edx,0xfffffff0
c0018021:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c0018024:	c3                   	ret    
c0018025:	90                   	nop

c0018026 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c0018026:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001802a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001802e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018032:	f6 c2 01             	test   dl,0x1
c0018035:	74 07                	je     c001803e <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0018037:	83 e2 fc             	and    edx,0xfffffffc
c001803a:	01 ca                	add    edx,ecx
c001803c:	ee                   	out    dx,al
c001803d:	c3                   	ret    
c001803e:	83 e2 f0             	and    edx,0xfffffff0
c0018041:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c0018044:	c3                   	ret    
c0018045:	90                   	nop

c0018046 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0018046:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001804a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001804e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018052:	f6 c2 01             	test   dl,0x1
c0018055:	74 08                	je     c001805f <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0018057:	83 e2 fc             	and    edx,0xfffffffc
c001805a:	01 ca                	add    edx,ecx
c001805c:	66 ef                	out    dx,ax
c001805e:	c3                   	ret    
c001805f:	83 e2 f0             	and    edx,0xfffffff0
c0018062:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0018066:	c3                   	ret    
c0018067:	90                   	nop

c0018068 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0018068:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001806c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018070:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018074:	f6 c2 01             	test   dl,0x1
c0018077:	74 07                	je     c0018080 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0018079:	83 e2 fc             	and    edx,0xfffffffc
c001807c:	01 ca                	add    edx,ecx
c001807e:	ef                   	out    dx,eax
c001807f:	c3                   	ret    
c0018080:	83 e2 f0             	and    edx,0xfffffff0
c0018083:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0018086:	c3                   	ret    
c0018087:	90                   	nop

c0018088 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0018088:	55                   	push   ebp
c0018089:	57                   	push   edi
c001808a:	56                   	push   esi
c001808b:	53                   	push   ebx
c001808c:	83 ec 0c             	sub    esp,0xc
c001808f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0018093:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0018097:	89 f0                	mov    eax,esi
c0018099:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001809d:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00180a1:	3c 07                	cmp    al,0x7
c00180a3:	76 10                	jbe    c00180b5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c00180a5:	83 ec 0c             	sub    esp,0xc
c00180a8:	68 93 eb 01 c0       	push   0xc001eb93
c00180ad:	e8 c5 81 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c00180b2:	83 c4 10             	add    esp,0x10
c00180b5:	80 fb 0f             	cmp    bl,0xf
c00180b8:	76 10                	jbe    c00180ca <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x42>
c00180ba:	83 ec 0c             	sub    esp,0xc
c00180bd:	68 c3 eb 01 c0       	push   0xc001ebc3
c00180c2:	e8 b0 81 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c00180c7:	83 c4 10             	add    esp,0x10
c00180ca:	8d 04 36             	lea    eax,[esi+esi*1]
c00180cd:	ba f8 0c 00 00       	mov    edx,0xcf8
c00180d2:	83 c8 f0             	or     eax,0xfffffff0
c00180d5:	ee                   	out    dx,al
c00180d6:	ba fa 0c 00 00       	mov    edx,0xcfa
c00180db:	89 e8                	mov    eax,ebp
c00180dd:	ee                   	out    dx,al
c00180de:	83 c4 0c             	add    esp,0xc
c00180e1:	89 d8                	mov    eax,ebx
c00180e3:	66 81 e7 fc 00       	and    di,0xfc
c00180e8:	5b                   	pop    ebx
c00180e9:	c1 e0 08             	shl    eax,0x8
c00180ec:	5e                   	pop    esi
c00180ed:	09 f8                	or     eax,edi
c00180ef:	5f                   	pop    edi
c00180f0:	66 0d 00 c0          	or     ax,0xc000
c00180f4:	5d                   	pop    ebp
c00180f5:	c3                   	ret    

c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00180f6:	57                   	push   edi
c00180f7:	56                   	push   esi
c00180f8:	53                   	push   ebx
c00180f9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00180fd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018101:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c0018107:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001810b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001810f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018113:	83 ff 01             	cmp    edi,0x1
c0018116:	75 3e                	jne    c0018156 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x60>
c0018118:	89 de                	mov    esi,ebx
c001811a:	0f b6 c0             	movzx  eax,al
c001811d:	81 e6 fc 00 00 00    	and    esi,0xfc
c0018123:	c1 e0 10             	shl    eax,0x10
c0018126:	0f b6 c9             	movzx  ecx,cl
c0018129:	09 f0                	or     eax,esi
c001812b:	c1 e1 08             	shl    ecx,0x8
c001812e:	0f b6 d2             	movzx  edx,dl
c0018131:	09 c8                	or     eax,ecx
c0018133:	c1 e2 0b             	shl    edx,0xb
c0018136:	09 d0                	or     eax,edx
c0018138:	ba f8 0c 00 00       	mov    edx,0xcf8
c001813d:	0d 00 00 00 80       	or     eax,0x80000000
c0018142:	ef                   	out    dx,eax
c0018143:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018148:	ed                   	in     eax,dx
c0018149:	83 e3 02             	and    ebx,0x2
c001814c:	0f b6 cb             	movzx  ecx,bl
c001814f:	c1 e1 03             	shl    ecx,0x3
c0018152:	d3 e8                	shr    eax,cl
c0018154:	eb 43                	jmp    c0018199 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018156:	83 ff 02             	cmp    edi,0x2
c0018159:	75 2c                	jne    c0018187 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x91>
c001815b:	83 ec 0c             	sub    esp,0xc
c001815e:	0f b6 c9             	movzx  ecx,cl
c0018161:	0f b6 d2             	movzx  edx,dl
c0018164:	0f b6 fb             	movzx  edi,bl
c0018167:	0f b6 c0             	movzx  eax,al
c001816a:	57                   	push   edi
c001816b:	51                   	push   ecx
c001816c:	52                   	push   edx
c001816d:	50                   	push   eax
c001816e:	56                   	push   esi
c001816f:	e8 14 ff ff ff       	call   c0018088 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018174:	89 c2                	mov    edx,eax
c0018176:	ed                   	in     eax,dx
c0018177:	83 e3 02             	and    ebx,0x2
c001817a:	83 c4 20             	add    esp,0x20
c001817d:	0f b6 cb             	movzx  ecx,bl
c0018180:	c1 e1 03             	shl    ecx,0x3
c0018183:	d3 e8                	shr    eax,cl
c0018185:	eb 12                	jmp    c0018199 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa3>
c0018187:	83 ec 0c             	sub    esp,0xc
c001818a:	68 f3 eb 01 c0       	push   0xc001ebf3
c001818f:	e8 e3 80 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0018194:	83 c4 10             	add    esp,0x10
c0018197:	31 c0                	xor    eax,eax
c0018199:	5b                   	pop    ebx
c001819a:	5e                   	pop    esi
c001819b:	5f                   	pop    edi
c001819c:	c3                   	ret    
c001819d:	90                   	nop

c001819e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001819e:	83 ec 18             	sub    esp,0x18
c00181a1:	6a 00                	push   0x0
c00181a3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00181a8:	50                   	push   eax
c00181a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00181ae:	50                   	push   eax
c00181af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00181b4:	50                   	push   eax
c00181b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181b9:	e8 38 ff ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00181be:	83 c4 2c             	add    esp,0x2c
c00181c1:	c3                   	ret    

c00181c2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00181c2:	83 ec 18             	sub    esp,0x18
c00181c5:	6a 0e                	push   0xe
c00181c7:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00181cc:	50                   	push   eax
c00181cd:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00181d2:	50                   	push   eax
c00181d3:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00181d8:	50                   	push   eax
c00181d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00181dd:	e8 14 ff ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00181e2:	83 c4 2c             	add    esp,0x2c
c00181e5:	0f b6 c0             	movzx  eax,al
c00181e8:	c3                   	ret    
c00181e9:	90                   	nop

c00181ea <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00181ea:	55                   	push   ebp
c00181eb:	57                   	push   edi
c00181ec:	56                   	push   esi
c00181ed:	53                   	push   ebx
c00181ee:	83 ec 18             	sub    esp,0x18
c00181f1:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c00181f6:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c00181fb:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c0018200:	6a 0a                	push   0xa
c0018202:	56                   	push   esi
c0018203:	55                   	push   ebp
c0018204:	57                   	push   edi
c0018205:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0018209:	e8 e8 fe ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001820e:	83 c4 14             	add    esp,0x14
c0018211:	89 c3                	mov    ebx,eax
c0018213:	6a 0a                	push   0xa
c0018215:	0f b6 db             	movzx  ebx,bl
c0018218:	56                   	push   esi
c0018219:	55                   	push   ebp
c001821a:	57                   	push   edi
c001821b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001821f:	e8 d2 fe ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018224:	83 c4 2c             	add    esp,0x2c
c0018227:	25 00 ff 00 00       	and    eax,0xff00
c001822c:	09 d8                	or     eax,ebx
c001822e:	5b                   	pop    ebx
c001822f:	5e                   	pop    esi
c0018230:	5f                   	pop    edi
c0018231:	5d                   	pop    ebp
c0018232:	c3                   	ret    
c0018233:	90                   	nop

c0018234 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0018234:	83 ec 18             	sub    esp,0x18
c0018237:	6a 08                	push   0x8
c0018239:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001823e:	50                   	push   eax
c001823f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018244:	50                   	push   eax
c0018245:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001824a:	50                   	push   eax
c001824b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001824f:	e8 a2 fe ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018254:	83 c4 2c             	add    esp,0x2c
c0018257:	0f b6 c4             	movzx  eax,ah
c001825a:	c3                   	ret    
c001825b:	90                   	nop

c001825c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001825c:	83 ec 18             	sub    esp,0x18
c001825f:	6a 08                	push   0x8
c0018261:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018266:	50                   	push   eax
c0018267:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001826c:	50                   	push   eax
c001826d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018272:	50                   	push   eax
c0018273:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018277:	e8 7a fe ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001827c:	83 c4 2c             	add    esp,0x2c
c001827f:	c3                   	ret    

c0018280 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c0018280:	83 ec 18             	sub    esp,0x18
c0018283:	6a 3c                	push   0x3c
c0018285:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001828a:	50                   	push   eax
c001828b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018290:	50                   	push   eax
c0018291:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0018296:	50                   	push   eax
c0018297:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001829b:	e8 56 fe ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182a0:	83 c4 2c             	add    esp,0x2c
c00182a3:	c3                   	ret    

c00182a4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00182a4:	83 ec 18             	sub    esp,0x18
c00182a7:	6a 18                	push   0x18
c00182a9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182ae:	50                   	push   eax
c00182af:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182b4:	50                   	push   eax
c00182b5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c00182ba:	50                   	push   eax
c00182bb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00182bf:	e8 32 fe ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00182c4:	83 c4 2c             	add    esp,0x2c
c00182c7:	0f b6 c4             	movzx  eax,ah
c00182ca:	c3                   	ret    
c00182cb:	90                   	nop

c00182cc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00182cc:	55                   	push   ebp
c00182cd:	57                   	push   edi
c00182ce:	56                   	push   esi
c00182cf:	53                   	push   ebx
c00182d0:	83 ec 28             	sub    esp,0x28
c00182d3:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00182d7:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c00182dc:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c00182e1:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c00182e6:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00182ed:	8d 43 12             	lea    eax,[ebx+0x12]
c00182f0:	83 c3 10             	add    ebx,0x10
c00182f3:	0f b6 c0             	movzx  eax,al
c00182f6:	0f b6 db             	movzx  ebx,bl
c00182f9:	50                   	push   eax
c00182fa:	51                   	push   ecx
c00182fb:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c00182ff:	57                   	push   edi
c0018300:	55                   	push   ebp
c0018301:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018305:	e8 ec fd ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001830a:	83 c4 14             	add    esp,0x14
c001830d:	89 c6                	mov    esi,eax
c001830f:	53                   	push   ebx
c0018310:	c1 e6 10             	shl    esi,0x10
c0018313:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018317:	51                   	push   ecx
c0018318:	57                   	push   edi
c0018319:	55                   	push   ebp
c001831a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001831e:	e8 d3 fd ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018323:	83 c4 3c             	add    esp,0x3c
c0018326:	0f b7 c0             	movzx  eax,ax
c0018329:	5b                   	pop    ebx
c001832a:	09 f0                	or     eax,esi
c001832c:	5e                   	pop    esi
c001832d:	5f                   	pop    edi
c001832e:	5d                   	pop    ebp
c001832f:	c3                   	ret    

c0018330 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0018330:	55                   	push   ebp
c0018331:	57                   	push   edi
c0018332:	56                   	push   esi
c0018333:	53                   	push   ebx
c0018334:	83 ec 0c             	sub    esp,0xc
c0018337:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001833b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001833f:	89 f5                	mov    ebp,esi
c0018341:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c0018347:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001834b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001834f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0018353:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0018357:	83 f9 01             	cmp    ecx,0x1
c001835a:	75 5d                	jne    c00183b9 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001835c:	0f b6 c8             	movzx  ecx,al
c001835f:	0f b6 d2             	movzx  edx,dl
c0018362:	c1 e1 10             	shl    ecx,0x10
c0018365:	c1 e2 0b             	shl    edx,0xb
c0018368:	89 f0                	mov    eax,esi
c001836a:	25 fc 00 00 00       	and    eax,0xfc
c001836f:	09 c1                	or     ecx,eax
c0018371:	89 e8                	mov    eax,ebp
c0018373:	0f b6 c0             	movzx  eax,al
c0018376:	c1 e0 08             	shl    eax,0x8
c0018379:	09 c1                	or     ecx,eax
c001837b:	09 d1                	or     ecx,edx
c001837d:	ba f8 0c 00 00       	mov    edx,0xcf8
c0018382:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0018388:	89 c8                	mov    eax,ecx
c001838a:	ef                   	out    dx,eax
c001838b:	ba fc 0c 00 00       	mov    edx,0xcfc
c0018390:	ed                   	in     eax,dx
c0018391:	0f b7 db             	movzx  ebx,bx
c0018394:	83 e6 02             	and    esi,0x2
c0018397:	74 0a                	je     c00183a3 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c0018399:	0f b7 d0             	movzx  edx,ax
c001839c:	c1 e3 10             	shl    ebx,0x10
c001839f:	09 d3                	or     ebx,edx
c00183a1:	eb 05                	jmp    c00183a8 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c00183a3:	66 31 c0             	xor    ax,ax
c00183a6:	09 c3                	or     ebx,eax
c00183a8:	ba f8 0c 00 00       	mov    edx,0xcf8
c00183ad:	89 c8                	mov    eax,ecx
c00183af:	ef                   	out    dx,eax
c00183b0:	ba fc 0c 00 00       	mov    edx,0xcfc
c00183b5:	89 d8                	mov    eax,ebx
c00183b7:	eb 41                	jmp    c00183fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00183b9:	83 f9 02             	cmp    ecx,0x2
c00183bc:	75 45                	jne    c0018403 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c00183be:	83 ec 0c             	sub    esp,0xc
c00183c1:	0f b6 d2             	movzx  edx,dl
c00183c4:	89 f1                	mov    ecx,esi
c00183c6:	0f b6 c0             	movzx  eax,al
c00183c9:	0f b6 f1             	movzx  esi,cl
c00183cc:	89 e9                	mov    ecx,ebp
c00183ce:	56                   	push   esi
c00183cf:	0f b6 c9             	movzx  ecx,cl
c00183d2:	51                   	push   ecx
c00183d3:	52                   	push   edx
c00183d4:	50                   	push   eax
c00183d5:	57                   	push   edi
c00183d6:	e8 ad fc ff ff       	call   c0018088 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c00183db:	89 c2                	mov    edx,eax
c00183dd:	ed                   	in     eax,dx
c00183de:	83 c4 20             	add    esp,0x20
c00183e1:	0f b7 db             	movzx  ebx,bx
c00183e4:	f6 c2 02             	test   dl,0x2
c00183e7:	74 0c                	je     c00183f5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c00183e9:	0f b7 c8             	movzx  ecx,ax
c00183ec:	89 d8                	mov    eax,ebx
c00183ee:	c1 e0 10             	shl    eax,0x10
c00183f1:	09 c8                	or     eax,ecx
c00183f3:	eb 05                	jmp    c00183fa <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c00183f5:	66 31 c0             	xor    ax,ax
c00183f8:	09 d8                	or     eax,ebx
c00183fa:	ef                   	out    dx,eax
c00183fb:	83 c4 0c             	add    esp,0xc
c00183fe:	5b                   	pop    ebx
c00183ff:	5e                   	pop    esi
c0018400:	5f                   	pop    edi
c0018401:	5d                   	pop    ebp
c0018402:	c3                   	ret    
c0018403:	c7 44 24 20 f3 eb 01 c0 	mov    DWORD PTR [esp+0x20],0xc001ebf3
c001840b:	83 c4 0c             	add    esp,0xc
c001840e:	5b                   	pop    ebx
c001840f:	5e                   	pop    esi
c0018410:	5f                   	pop    edi
c0018411:	5d                   	pop    ebp
c0018412:	e9 60 7e ff ff       	jmp    c0010277 <Krnl::panic(char const*)>
c0018417:	90                   	nop

c0018418 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c0018418:	55                   	push   ebp
c0018419:	57                   	push   edi
c001841a:	56                   	push   esi
c001841b:	53                   	push   ebx
c001841c:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0018422:	80 3d 2c 42 02 c0 00 	cmp    BYTE PTR ds:0xc002422c,0x0
c0018429:	0f 85 84 00 00 00    	jne    c00184b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x9b>
c001842f:	83 ec 0c             	sub    esp,0xc
c0018432:	68 14 01 00 00       	push   0x114
c0018437:	e8 5d f5 fe ff       	call   c0007999 <malloc>
c001843c:	83 c4 0c             	add    esp,0xc
c001843f:	89 c3                	mov    ebx,eax
c0018441:	ff 35 70 38 02 c0    	push   DWORD PTR ds:0xc0023870
c0018447:	68 f9 eb 01 c0       	push   0xc001ebf9
c001844c:	50                   	push   eax
c001844d:	e8 4c 28 ff ff       	call   c000ac9e <File::File(char const*, Process*)>
c0018452:	5a                   	pop    edx
c0018453:	59                   	pop    ecx
c0018454:	6a 01                	push   0x1
c0018456:	53                   	push   ebx
c0018457:	e8 02 29 ff ff       	call   c000ad5e <File::open(FileOpenMode)>
c001845c:	83 c4 0c             	add    esp,0xc
c001845f:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c0018463:	50                   	push   eax
c0018464:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018468:	50                   	push   eax
c0018469:	53                   	push   ebx
c001846a:	e8 9b 2b ff ff       	call   c000b00a <File::stat(unsigned long long*, bool*)>
c001846f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018473:	40                   	inc    eax
c0018474:	89 04 24             	mov    DWORD PTR [esp],eax
c0018477:	e8 1d f5 fe ff       	call   c0007999 <malloc>
c001847c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018480:	a3 28 42 02 c0       	mov    ds:0xc0024228,eax
c0018485:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c0018489:	5e                   	pop    esi
c001848a:	8b 13                	mov    edx,DWORD PTR [ebx]
c001848c:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c0018490:	51                   	push   ecx
c0018491:	50                   	push   eax
c0018492:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018496:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001849a:	53                   	push   ebx
c001849b:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001849e:	83 c4 14             	add    esp,0x14
c00184a1:	53                   	push   ebx
c00184a2:	e8 15 29 ff ff       	call   c000adbc <File::close()>
c00184a7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00184ab:	83 c4 10             	add    esp,0x10
c00184ae:	a3 24 42 02 c0       	mov    ds:0xc0024224,eax
c00184b3:	a1 24 42 02 c0       	mov    eax,ds:0xc0024224
c00184b8:	8b 15 28 42 02 c0    	mov    edx,DWORD PTR ds:0xc0024228
c00184be:	89 04 24             	mov    DWORD PTR [esp],eax
c00184c1:	31 ff                	xor    edi,edi
c00184c3:	66 8b 84 24 42 01 00 00 	mov    ax,WORD PTR [esp+0x142]
c00184cb:	31 f6                	xor    esi,esi
c00184cd:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c00184d2:	31 db                	xor    ebx,ebx
c00184d4:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c00184dc:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00184e1:	8a 84 24 40 01 00 00 	mov    al,BYTE PTR [esp+0x140]
c00184e8:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c00184ec:	8a 84 24 41 01 00 00 	mov    al,BYTE PTR [esp+0x141]
c00184f3:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00184f7:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00184fa:	0f 8e 6b 01 00 00    	jle    c001866b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x253>
c0018500:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c0018503:	d4 40                	aam    0x40
c0018505:	d5 39                	aad    0x39
c0018507:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001850b:	8a 44 3a 01          	mov    al,BYTE PTR [edx+edi*1+0x1]
c001850f:	d4 40                	aam    0x40
c0018511:	d5 39                	aad    0x39
c0018513:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0018517:	8a 44 3a 03          	mov    al,BYTE PTR [edx+edi*1+0x3]
c001851b:	d4 40                	aam    0x40
c001851d:	d5 39                	aad    0x39
c001851f:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c0018523:	8a 44 3a 04          	mov    al,BYTE PTR [edx+edi*1+0x4]
c0018527:	d4 40                	aam    0x40
c0018529:	d5 39                	aad    0x39
c001852b:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001852f:	8a 44 3a 06          	mov    al,BYTE PTR [edx+edi*1+0x6]
c0018533:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0018537:	3c 56                	cmp    al,0x56
c0018539:	74 45                	je     c0018580 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x168>
c001853b:	d4 40                	aam    0x40
c001853d:	d5 39                	aad    0x39
c001853f:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018542:	8a 44 3a 07          	mov    al,BYTE PTR [edx+edi*1+0x7]
c0018546:	0f b6 c9             	movzx  ecx,cl
c0018549:	c1 e1 04             	shl    ecx,0x4
c001854c:	d4 40                	aam    0x40
c001854e:	d5 39                	aad    0x39
c0018550:	8d 58 d0             	lea    ebx,[eax-0x30]
c0018553:	8a 44 3a 08          	mov    al,BYTE PTR [edx+edi*1+0x8]
c0018557:	0f b6 db             	movzx  ebx,bl
c001855a:	09 cb                	or     ebx,ecx
c001855c:	c1 e3 04             	shl    ebx,0x4
c001855f:	d4 40                	aam    0x40
c0018561:	d5 39                	aad    0x39
c0018563:	8d 48 d0             	lea    ecx,[eax-0x30]
c0018566:	8a 44 3a 09          	mov    al,BYTE PTR [edx+edi*1+0x9]
c001856a:	0f b6 c9             	movzx  ecx,cl
c001856d:	09 cb                	or     ebx,ecx
c001856f:	c1 e3 04             	shl    ebx,0x4
c0018572:	89 d9                	mov    ecx,ebx
c0018574:	d4 40                	aam    0x40
c0018576:	d5 39                	aad    0x39
c0018578:	8d 58 d0             	lea    ebx,[eax-0x30]
c001857b:	0f b6 db             	movzx  ebx,bl
c001857e:	09 cb                	or     ebx,ecx
c0018580:	8a 4c 3a 0b          	mov    cl,BYTE PTR [edx+edi*1+0xb]
c0018584:	80 f9 44             	cmp    cl,0x44
c0018587:	74 47                	je     c00185d0 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1b8>
c0018589:	88 c8                	mov    al,cl
c001858b:	d4 40                	aam    0x40
c001858d:	d5 39                	aad    0x39
c001858f:	83 e8 30             	sub    eax,0x30
c0018592:	0f b6 e8             	movzx  ebp,al
c0018595:	8a 44 3a 0c          	mov    al,BYTE PTR [edx+edi*1+0xc]
c0018599:	c1 e5 04             	shl    ebp,0x4
c001859c:	d4 40                	aam    0x40
c001859e:	d5 39                	aad    0x39
c00185a0:	83 e8 30             	sub    eax,0x30
c00185a3:	0f b6 f0             	movzx  esi,al
c00185a6:	8a 44 3a 0d          	mov    al,BYTE PTR [edx+edi*1+0xd]
c00185aa:	09 ee                	or     esi,ebp
c00185ac:	c1 e6 04             	shl    esi,0x4
c00185af:	d4 40                	aam    0x40
c00185b1:	d5 39                	aad    0x39
c00185b3:	83 e8 30             	sub    eax,0x30
c00185b6:	0f b6 e8             	movzx  ebp,al
c00185b9:	8a 44 3a 0e          	mov    al,BYTE PTR [edx+edi*1+0xe]
c00185bd:	09 ee                	or     esi,ebp
c00185bf:	c1 e6 04             	shl    esi,0x4
c00185c2:	89 f5                	mov    ebp,esi
c00185c4:	d4 40                	aam    0x40
c00185c6:	d5 39                	aad    0x39
c00185c8:	83 e8 30             	sub    eax,0x30
c00185cb:	0f b6 f0             	movzx  esi,al
c00185ce:	09 ee                	or     esi,ebp
c00185d0:	83 c7 10             	add    edi,0x10
c00185d3:	8d 6c 24 20          	lea    ebp,[esp+0x20]
c00185d7:	8a 04 3a             	mov    al,BYTE PTR [edx+edi*1]
c00185da:	3c 0a                	cmp    al,0xa
c00185dc:	74 09                	je     c00185e7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1cf>
c00185de:	45                   	inc    ebp
c00185df:	39 3c 24             	cmp    DWORD PTR [esp],edi
c00185e2:	75 16                	jne    c00185fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1e2>
c00185e4:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00185e7:	3c 0a                	cmp    al,0xa
c00185e9:	0f 94 c0             	sete   al
c00185ec:	0f b6 c0             	movzx  eax,al
c00185ef:	01 c7                	add    edi,eax
c00185f1:	80 7c 24 05 56       	cmp    BYTE PTR [esp+0x5],0x56
c00185f6:	75 0c                	jne    c0018604 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1ec>
c00185f8:	eb 15                	jmp    c001860f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1f7>
c00185fa:	47                   	inc    edi
c00185fb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
c00185fe:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0018602:	eb d3                	jmp    c00185d7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1bf>
c0018604:	66 39 5c 24 06       	cmp    WORD PTR [esp+0x6],bx
c0018609:	0f 85 e8 fe ff ff    	jne    c00184f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001860f:	80 f9 44             	cmp    cl,0x44
c0018612:	74 0b                	je     c001861f <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x207>
c0018614:	66 39 74 24 08       	cmp    WORD PTR [esp+0x8],si
c0018619:	0f 85 d8 fe ff ff    	jne    c00184f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c001861f:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018623:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0018627:	c1 e1 04             	shl    ecx,0x4
c001862a:	83 e8 30             	sub    eax,0x30
c001862d:	09 c8                	or     eax,ecx
c001862f:	38 44 24 0a          	cmp    BYTE PTR [esp+0xa],al
c0018633:	0f 85 be fe ff ff    	jne    c00184f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018639:	8a 4c 24 0e          	mov    cl,BYTE PTR [esp+0xe]
c001863d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018641:	c1 e1 04             	shl    ecx,0x4
c0018644:	83 e8 30             	sub    eax,0x30
c0018647:	09 c8                	or     eax,ecx
c0018649:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c001864d:	0f 85 a4 fe ff ff    	jne    c00184f7 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdf>
c0018653:	50                   	push   eax
c0018654:	50                   	push   eax
c0018655:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018659:	50                   	push   eax
c001865a:	ff b4 24 70 01 00 00 	push   DWORD PTR [esp+0x170]
c0018661:	e8 ba 7f fe ff       	call   c0000620 <strcpy>
c0018666:	83 c4 10             	add    esp,0x10
c0018669:	eb 15                	jmp    c0018680 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x268>
c001866b:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018672:	c7 84 24 64 01 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x164],0x0
c001867d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0018680:	8b 84 24 64 01 00 00 	mov    eax,DWORD PTR [esp+0x164]
c0018687:	81 c4 2c 01 00 00    	add    esp,0x12c
c001868d:	5b                   	pop    ebx
c001868e:	5e                   	pop    esi
c001868f:	5f                   	pop    edi
c0018690:	5d                   	pop    ebp
c0018691:	c3                   	ret    

c0018692 <PCI::checkBus(unsigned char)>:
c0018692:	56                   	push   esi
c0018693:	53                   	push   ebx
c0018694:	31 f6                	xor    esi,esi
c0018696:	51                   	push   ecx
c0018697:	8a 5c 24 14          	mov    bl,BYTE PTR [esp+0x14]
c001869b:	0f b6 c3             	movzx  eax,bl
c001869e:	52                   	push   edx
c001869f:	56                   	push   esi
c00186a0:	46                   	inc    esi
c00186a1:	50                   	push   eax
c00186a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00186a6:	e8 f3 02 00 00       	call   c001899e <PCI::checkDevice(unsigned char, unsigned char)>
c00186ab:	83 c4 10             	add    esp,0x10
c00186ae:	83 fe 20             	cmp    esi,0x20
c00186b1:	75 e8                	jne    c001869b <PCI::checkBus(unsigned char)+0x9>
c00186b3:	58                   	pop    eax
c00186b4:	5b                   	pop    ebx
c00186b5:	5e                   	pop    esi
c00186b6:	c3                   	ret    
c00186b7:	90                   	nop

c00186b8 <PCI::foundDevice(PCIDeviceInfo)>:
c00186b8:	55                   	push   ebp
c00186b9:	57                   	push   edi
c00186ba:	56                   	push   esi
c00186bb:	53                   	push   ebx
c00186bc:	83 ec 1c             	sub    esp,0x1c
c00186bf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00186c3:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00186c9:	0f 84 52 01 00 00    	je     c0018821 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00186cf:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00186d3:	66 81 f9 06 04       	cmp    cx,0x406
c00186d8:	75 2c                	jne    c0018706 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00186da:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00186df:	50                   	push   eax
c00186e0:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00186e5:	50                   	push   eax
c00186e6:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00186eb:	50                   	push   eax
c00186ec:	56                   	push   esi
c00186ed:	e8 b2 fb ff ff       	call   c00182a4 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00186f2:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00186f6:	0f b6 c0             	movzx  eax,al
c00186f9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00186fd:	83 c4 2c             	add    esp,0x2c
c0018700:	5b                   	pop    ebx
c0018701:	5e                   	pop    esi
c0018702:	5f                   	pop    edi
c0018703:	5d                   	pop    ebp
c0018704:	eb 8c                	jmp    c0018692 <PCI::checkBus(unsigned char)>
c0018706:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001870a:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0018710:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0018714:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0018718:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c001871c:	88 d3                	mov    bl,dl
c001871e:	85 c0                	test   eax,eax
c0018720:	74 33                	je     c0018755 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c0018722:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0018725:	85 d2                	test   edx,edx
c0018727:	74 28                	je     c0018751 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018729:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c001872f:	31 ef                	xor    edi,ebp
c0018731:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0018737:	75 18                	jne    c0018751 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018739:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001873d:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c0018743:	75 0c                	jne    c0018751 <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0018745:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c001874b:	0f 84 d0 00 00 00    	je     c0018821 <PCI::foundDevice(PCIDeviceInfo)+0x169>
c0018751:	8b 00                	mov    eax,DWORD PTR [eax]
c0018753:	eb c9                	jmp    c001871e <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0018755:	66 81 f9 01 06       	cmp    cx,0x601
c001875a:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c001875e:	75 19                	jne    c0018779 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c0018760:	83 ec 0c             	sub    esp,0xc
c0018763:	68 64 01 00 00       	push   0x164
c0018768:	e8 2c f2 fe ff       	call   c0007999 <malloc>
c001876d:	89 c5                	mov    ebp,eax
c001876f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018772:	e8 47 0e 00 00       	call   c00195be <SATABus::SATABus()>
c0018777:	eb 1e                	jmp    c0018797 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0018779:	66 81 f9 01 01       	cmp    cx,0x101
c001877e:	75 60                	jne    c00187e0 <PCI::foundDevice(PCIDeviceInfo)+0x128>
c0018780:	83 ec 0c             	sub    esp,0xc
c0018783:	68 70 02 00 00       	push   0x270
c0018788:	e8 0c f2 fe ff       	call   c0007999 <malloc>
c001878d:	89 c5                	mov    ebp,eax
c001878f:	89 04 24             	mov    DWORD PTR [esp],eax
c0018792:	e8 cb 02 00 00       	call   c0018a62 <IDE::IDE()>
c0018797:	58                   	pop    eax
c0018798:	5a                   	pop    edx
c0018799:	55                   	push   ebp
c001879a:	56                   	push   esi
c001879b:	e8 c8 33 ff ff       	call   c000bb68 <Device::addChild(Device*)>
c00187a0:	83 ec 1c             	sub    esp,0x1c
c00187a3:	b9 09 00 00 00       	mov    ecx,0x9
c00187a8:	fc                   	cld    
c00187a9:	89 e7                	mov    edi,esp
c00187ab:	89 de                	mov    esi,ebx
c00187ad:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00187af:	55                   	push   ebp
c00187b0:	e8 f9 32 ff ff       	call   c000baae <Device::preOpenPCI(PCIDeviceInfo)>
c00187b5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00187b8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00187bc:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00187c4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00187cc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00187d4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00187d7:	83 c4 4c             	add    esp,0x4c
c00187da:	5b                   	pop    ebx
c00187db:	5e                   	pop    esi
c00187dc:	5f                   	pop    edi
c00187dd:	5d                   	pop    ebp
c00187de:	ff e0                	jmp    eax
c00187e0:	83 ec 0c             	sub    esp,0xc
c00187e3:	68 58 01 00 00       	push   0x158
c00187e8:	e8 ac f1 fe ff       	call   c0007999 <malloc>
c00187ed:	89 c5                	mov    ebp,eax
c00187ef:	58                   	pop    eax
c00187f0:	5a                   	pop    edx
c00187f1:	68 12 ec 01 c0       	push   0xc001ec12
c00187f6:	55                   	push   ebp
c00187f7:	e8 0a 36 ff ff       	call   c000be06 <DriverlessDevice::DriverlessDevice(char const*)>
c00187fc:	59                   	pop    ecx
c00187fd:	5f                   	pop    edi
c00187fe:	55                   	push   ebp
c00187ff:	56                   	push   esi
c0018800:	e8 63 33 ff ff       	call   c000bb68 <Device::addChild(Device*)>
c0018805:	b9 09 00 00 00       	mov    ecx,0x9
c001880a:	fc                   	cld    
c001880b:	89 df                	mov    edi,ebx
c001880d:	89 de                	mov    esi,ebx
c001880f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018811:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0018815:	83 c4 2c             	add    esp,0x2c
c0018818:	5b                   	pop    ebx
c0018819:	5e                   	pop    esi
c001881a:	5f                   	pop    edi
c001881b:	5d                   	pop    ebp
c001881c:	e9 8d 32 ff ff       	jmp    c000baae <Device::preOpenPCI(PCIDeviceInfo)>
c0018821:	83 c4 1c             	add    esp,0x1c
c0018824:	5b                   	pop    ebx
c0018825:	5e                   	pop    esi
c0018826:	5f                   	pop    edi
c0018827:	5d                   	pop    ebp
c0018828:	c3                   	ret    
c0018829:	90                   	nop

c001882a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001882a:	55                   	push   ebp
c001882b:	57                   	push   edi
c001882c:	56                   	push   esi
c001882d:	53                   	push   ebx
c001882e:	83 ec 68             	sub    esp,0x68
c0018831:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c0018835:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001883c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018840:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0018847:	0f b6 74 24 1c       	movzx  esi,BYTE PTR [esp+0x1c]
c001884c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0018850:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c0018857:	0f b6 5c 24 20       	movzx  ebx,BYTE PTR [esp+0x20]
c001885c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0018860:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0018865:	6a 0c                	push   0xc
c0018867:	57                   	push   edi
c0018868:	53                   	push   ebx
c0018869:	56                   	push   esi
c001886a:	55                   	push   ebp
c001886b:	e8 86 f8 ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018870:	83 c4 20             	add    esp,0x20
c0018873:	57                   	push   edi
c0018874:	53                   	push   ebx
c0018875:	56                   	push   esi
c0018876:	55                   	push   ebp
c0018877:	e8 6e f9 ff ff       	call   c00181ea <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001887c:	66 89 44 24 2e       	mov    WORD PTR [esp+0x2e],ax
c0018881:	57                   	push   edi
c0018882:	53                   	push   ebx
c0018883:	56                   	push   esi
c0018884:	55                   	push   ebp
c0018885:	e8 f6 f9 ff ff       	call   c0018280 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001888a:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001888e:	83 c4 14             	add    esp,0x14
c0018891:	6a 3c                	push   0x3c
c0018893:	57                   	push   edi
c0018894:	53                   	push   ebx
c0018895:	56                   	push   esi
c0018896:	55                   	push   ebp
c0018897:	e8 5a f8 ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001889c:	0f b6 c4             	movzx  eax,ah
c001889f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00188a3:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c00188a7:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c00188ab:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c00188b0:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c00188b6:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c00188bc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00188c0:	83 c4 20             	add    esp,0x20
c00188c3:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00188c8:	74 30                	je     c00188fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00188ca:	31 c0                	xor    eax,eax
c00188cc:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00188d0:	7e 28                	jle    c00188fa <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c00188d2:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c00188da:	39 cb                	cmp    ebx,ecx
c00188dc:	75 19                	jne    c00188f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00188de:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c00188e6:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00188ea:	75 0b                	jne    c00188f7 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c00188ec:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c00188f3:	88 4c 24 1d          	mov    BYTE PTR [esp+0x1d],cl
c00188f7:	40                   	inc    eax
c00188f8:	eb d2                	jmp    c00188cc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c00188fa:	31 d2                	xor    edx,edx
c00188fc:	83 ec 0c             	sub    esp,0xc
c00188ff:	57                   	push   edi
c0018900:	53                   	push   ebx
c0018901:	56                   	push   esi
c0018902:	52                   	push   edx
c0018903:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0018907:	55                   	push   ebp
c0018908:	e8 bf f9 ff ff       	call   c00182cc <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001890d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018911:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0018915:	42                   	inc    edx
c0018916:	83 c4 20             	add    esp,0x20
c0018919:	83 fa 06             	cmp    edx,0x6
c001891c:	75 de                	jne    c00188fc <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001891e:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018923:	83 ec 0c             	sub    esp,0xc
c0018926:	86 e0                	xchg   al,ah
c0018928:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001892d:	6a 02                	push   0x2
c001892f:	57                   	push   edi
c0018930:	53                   	push   ebx
c0018931:	56                   	push   esi
c0018932:	55                   	push   ebp
c0018933:	e8 be f7 ff ff       	call   c00180f6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0018938:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001893d:	83 c4 20             	add    esp,0x20
c0018940:	57                   	push   edi
c0018941:	53                   	push   ebx
c0018942:	56                   	push   esi
c0018943:	55                   	push   ebp
c0018944:	e8 eb f8 ff ff       	call   c0018234 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0018949:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001894d:	57                   	push   edi
c001894e:	53                   	push   ebx
c001894f:	56                   	push   esi
c0018950:	55                   	push   ebp
c0018951:	e8 48 f8 ff ff       	call   c001819e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018956:	b9 09 00 00 00       	mov    ecx,0x9
c001895b:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c0018960:	8a 44 24 3d          	mov    al,BYTE PTR [esp+0x3d]
c0018964:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c0018968:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001896c:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c0018970:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c0018974:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c0018978:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001897c:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c0018980:	83 ec 0c             	sub    esp,0xc
c0018983:	fc                   	cld    
c0018984:	89 e7                	mov    edi,esp
c0018986:	8d 74 24 58          	lea    esi,[esp+0x58]
c001898a:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001898c:	55                   	push   ebp
c001898d:	e8 26 fd ff ff       	call   c00186b8 <PCI::foundDevice(PCIDeviceInfo)>
c0018992:	81 c4 8c 00 00 00    	add    esp,0x8c
c0018998:	5b                   	pop    ebx
c0018999:	5e                   	pop    esi
c001899a:	5f                   	pop    edi
c001899b:	5d                   	pop    ebp
c001899c:	c3                   	ret    
c001899d:	90                   	nop

c001899e <PCI::checkDevice(unsigned char, unsigned char)>:
c001899e:	55                   	push   ebp
c001899f:	57                   	push   edi
c00189a0:	56                   	push   esi
c00189a1:	53                   	push   ebx
c00189a2:	83 ec 0c             	sub    esp,0xc
c00189a5:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00189a9:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00189ae:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00189b3:	6a 00                	push   0x0
c00189b5:	56                   	push   esi
c00189b6:	57                   	push   edi
c00189b7:	55                   	push   ebp
c00189b8:	e8 e1 f7 ff ff       	call   c001819e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00189bd:	6a 00                	push   0x0
c00189bf:	56                   	push   esi
c00189c0:	57                   	push   edi
c00189c1:	55                   	push   ebp
c00189c2:	e8 63 fe ff ff       	call   c001882a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00189c7:	83 c4 20             	add    esp,0x20
c00189ca:	6a 00                	push   0x0
c00189cc:	56                   	push   esi
c00189cd:	57                   	push   edi
c00189ce:	55                   	push   ebp
c00189cf:	e8 ee f7 ff ff       	call   c00181c2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c00189d4:	83 c4 10             	add    esp,0x10
c00189d7:	84 c0                	test   al,al
c00189d9:	79 27                	jns    c0018a02 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c00189db:	bb 01 00 00 00       	mov    ebx,0x1
c00189e0:	53                   	push   ebx
c00189e1:	56                   	push   esi
c00189e2:	57                   	push   edi
c00189e3:	55                   	push   ebp
c00189e4:	e8 b5 f7 ff ff       	call   c001819e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00189e9:	83 c4 10             	add    esp,0x10
c00189ec:	66 40                	inc    ax
c00189ee:	74 0c                	je     c00189fc <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c00189f0:	53                   	push   ebx
c00189f1:	56                   	push   esi
c00189f2:	57                   	push   edi
c00189f3:	55                   	push   ebp
c00189f4:	e8 31 fe ff ff       	call   c001882a <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c00189f9:	83 c4 10             	add    esp,0x10
c00189fc:	43                   	inc    ebx
c00189fd:	83 fb 08             	cmp    ebx,0x8
c0018a00:	75 de                	jne    c00189e0 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0018a02:	83 c4 0c             	add    esp,0xc
c0018a05:	5b                   	pop    ebx
c0018a06:	5e                   	pop    esi
c0018a07:	5f                   	pop    edi
c0018a08:	5d                   	pop    ebp
c0018a09:	c3                   	ret    

c0018a0a <PCI::detect()>:
c0018a0a:	56                   	push   esi
c0018a0b:	53                   	push   ebx
c0018a0c:	53                   	push   ebx
c0018a0d:	31 db                	xor    ebx,ebx
c0018a0f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0018a13:	6a 00                	push   0x0
c0018a15:	6a 00                	push   0x0
c0018a17:	6a 00                	push   0x0
c0018a19:	56                   	push   esi
c0018a1a:	e8 a3 f7 ff ff       	call   c00181c2 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0018a1f:	83 c4 10             	add    esp,0x10
c0018a22:	a8 80                	test   al,0x80
c0018a24:	75 21                	jne    c0018a47 <PCI::detect()+0x3d>
c0018a26:	51                   	push   ecx
c0018a27:	51                   	push   ecx
c0018a28:	6a 00                	push   0x0
c0018a2a:	56                   	push   esi
c0018a2b:	e8 62 fc ff ff       	call   c0018692 <PCI::checkBus(unsigned char)>
c0018a30:	83 c4 10             	add    esp,0x10
c0018a33:	eb 24                	jmp    c0018a59 <PCI::detect()+0x4f>
c0018a35:	52                   	push   edx
c0018a36:	52                   	push   edx
c0018a37:	53                   	push   ebx
c0018a38:	43                   	inc    ebx
c0018a39:	56                   	push   esi
c0018a3a:	e8 53 fc ff ff       	call   c0018692 <PCI::checkBus(unsigned char)>
c0018a3f:	83 c4 10             	add    esp,0x10
c0018a42:	83 fb 08             	cmp    ebx,0x8
c0018a45:	74 12                	je     c0018a59 <PCI::detect()+0x4f>
c0018a47:	53                   	push   ebx
c0018a48:	6a 00                	push   0x0
c0018a4a:	6a 00                	push   0x0
c0018a4c:	56                   	push   esi
c0018a4d:	e8 4c f7 ff ff       	call   c001819e <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0018a52:	83 c4 10             	add    esp,0x10
c0018a55:	66 40                	inc    ax
c0018a57:	74 dc                	je     c0018a35 <PCI::detect()+0x2b>
c0018a59:	58                   	pop    eax
c0018a5a:	5b                   	pop    ebx
c0018a5b:	5e                   	pop    esi
c0018a5c:	c3                   	ret    
c0018a5d:	90                   	nop

c0018a5e <IDE::close(int, int, void*)>:
c0018a5e:	83 c8 ff             	or     eax,0xffffffff
c0018a61:	c3                   	ret    

c0018a62 <IDE::IDE()>:
c0018a62:	83 ec 0c             	sub    esp,0xc
c0018a65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a69:	83 ec 08             	sub    esp,0x8
c0018a6c:	68 58 ec 01 c0       	push   0xc001ec58
c0018a71:	50                   	push   eax
c0018a72:	e8 35 34 ff ff       	call   c000beac <HardDiskController::HardDiskController(char const*)>
c0018a77:	83 c4 10             	add    esp,0x10
c0018a7a:	ba e8 ec 01 c0       	mov    edx,0xc001ece8
c0018a7f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a83:	89 10                	mov    DWORD PTR [eax],edx
c0018a85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a89:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0018a90:	90                   	nop
c0018a91:	83 c4 0c             	add    esp,0xc
c0018a94:	c3                   	ret    
c0018a95:	90                   	nop

c0018a96 <IDE::prepareInterrupt(unsigned char)>:
c0018a96:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018a9b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0018a9f:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0018aa7:	c3                   	ret    

c0018aa8 <selectDrive(unsigned char, unsigned char)>:
c0018aa8:	c3                   	ret    
c0018aa9:	90                   	nop

c0018aaa <IDE::getBase(unsigned char)>:
c0018aaa:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0018aaf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018ab3:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0018abb:	c3                   	ret    

c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0018abc:	55                   	push   ebp
c0018abd:	57                   	push   edi
c0018abe:	56                   	push   esi
c0018abf:	53                   	push   ebx
c0018ac0:	83 ec 1c             	sub    esp,0x1c
c0018ac3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018ac7:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018acb:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0018ace:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018ad2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0018ad6:	80 f9 03             	cmp    cl,0x3
c0018ad9:	77 51                	ja     c0018b2c <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0018adb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018adf:	0f b6 f2             	movzx  esi,dl
c0018ae2:	0f b6 db             	movzx  ebx,bl
c0018ae5:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018ae8:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0018aec:	83 ca 80             	or     edx,0xffffff80
c0018aef:	0f b6 d2             	movzx  edx,dl
c0018af2:	52                   	push   edx
c0018af3:	6a 0c                	push   0xc
c0018af5:	56                   	push   esi
c0018af6:	57                   	push   edi
c0018af7:	e8 c0 ff ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018afc:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0018b01:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018b05:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0018b09:	ee                   	out    dx,al
c0018b0a:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0018b0f:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0018b13:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0018b17:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b1b:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0018b23:	83 c4 2c             	add    esp,0x2c
c0018b26:	5b                   	pop    ebx
c0018b27:	5e                   	pop    esi
c0018b28:	5f                   	pop    edi
c0018b29:	5d                   	pop    ebp
c0018b2a:	eb 90                	jmp    c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018b2c:	80 fb 07             	cmp    bl,0x7
c0018b2f:	77 12                	ja     c0018b43 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0018b31:	0f b6 d2             	movzx  edx,dl
c0018b34:	0f b6 db             	movzx  ebx,bl
c0018b37:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0018b3f:	89 da                	mov    edx,ebx
c0018b41:	eb 2f                	jmp    c0018b72 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018b43:	80 fb 0d             	cmp    bl,0xd
c0018b46:	77 13                	ja     c0018b5b <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0018b48:	0f b6 d2             	movzx  edx,dl
c0018b4b:	0f b6 db             	movzx  ebx,bl
c0018b4e:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0018b55:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0018b59:	eb 17                	jmp    c0018b72 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0018b5b:	80 fb 15             	cmp    bl,0x15
c0018b5e:	77 13                	ja     c0018b73 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0018b60:	0f b6 d2             	movzx  edx,dl
c0018b63:	0f b6 db             	movzx  ebx,bl
c0018b66:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0018b6e:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0018b72:	ee                   	out    dx,al
c0018b73:	83 c4 1c             	add    esp,0x1c
c0018b76:	5b                   	pop    ebx
c0018b77:	5e                   	pop    esi
c0018b78:	5f                   	pop    edi
c0018b79:	5d                   	pop    ebp
c0018b7a:	c3                   	ret    
c0018b7b:	90                   	nop

c0018b7c <IDE::read(unsigned char, unsigned char)>:
c0018b7c:	55                   	push   ebp
c0018b7d:	57                   	push   edi
c0018b7e:	56                   	push   esi
c0018b7f:	53                   	push   ebx
c0018b80:	83 ec 1c             	sub    esp,0x1c
c0018b83:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0018b87:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0018b8b:	8d 43 f8             	lea    eax,[ebx-0x8]
c0018b8e:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0018b92:	3c 03                	cmp    al,0x3
c0018b94:	77 43                	ja     c0018bd9 <IDE::read(unsigned char, unsigned char)+0x5d>
c0018b96:	0f b6 f2             	movzx  esi,dl
c0018b99:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0018b9c:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0018ba0:	83 c8 80             	or     eax,0xffffff80
c0018ba3:	0f b6 c0             	movzx  eax,al
c0018ba6:	50                   	push   eax
c0018ba7:	6a 0c                	push   0xc
c0018ba9:	56                   	push   esi
c0018baa:	57                   	push   edi
c0018bab:	e8 0c ff ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018bb0:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0018bb5:	0f b6 c3             	movzx  eax,bl
c0018bb8:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0018bbc:	ec                   	in     al,dx
c0018bbd:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0018bc1:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0018bc6:	52                   	push   edx
c0018bc7:	6a 0c                	push   0xc
c0018bc9:	56                   	push   esi
c0018bca:	57                   	push   edi
c0018bcb:	e8 ec fe ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018bd0:	83 c4 20             	add    esp,0x20
c0018bd3:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0018bd7:	eb 49                	jmp    c0018c22 <IDE::read(unsigned char, unsigned char)+0xa6>
c0018bd9:	80 fb 07             	cmp    bl,0x7
c0018bdc:	77 12                	ja     c0018bf0 <IDE::read(unsigned char, unsigned char)+0x74>
c0018bde:	0f b6 d2             	movzx  edx,dl
c0018be1:	0f b6 c3             	movzx  eax,bl
c0018be4:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0018bec:	89 c2                	mov    edx,eax
c0018bee:	eb 31                	jmp    c0018c21 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018bf0:	80 fb 0d             	cmp    bl,0xd
c0018bf3:	77 13                	ja     c0018c08 <IDE::read(unsigned char, unsigned char)+0x8c>
c0018bf5:	0f b6 d2             	movzx  edx,dl
c0018bf8:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0018bff:	0f b6 d3             	movzx  edx,bl
c0018c02:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0018c06:	eb 19                	jmp    c0018c21 <IDE::read(unsigned char, unsigned char)+0xa5>
c0018c08:	31 c0                	xor    eax,eax
c0018c0a:	80 fb 15             	cmp    bl,0x15
c0018c0d:	77 13                	ja     c0018c22 <IDE::read(unsigned char, unsigned char)+0xa6>
c0018c0f:	0f b6 d2             	movzx  edx,dl
c0018c12:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0018c1a:	0f b6 d3             	movzx  edx,bl
c0018c1d:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0018c21:	ec                   	in     al,dx
c0018c22:	83 c4 1c             	add    esp,0x1c
c0018c25:	5b                   	pop    ebx
c0018c26:	5e                   	pop    esi
c0018c27:	5f                   	pop    edi
c0018c28:	5d                   	pop    ebp
c0018c29:	c3                   	ret    

c0018c2a <IDE::waitInterrupt(unsigned char)>:
c0018c2a:	57                   	push   edi
c0018c2b:	56                   	push   esi
c0018c2c:	31 f6                	xor    esi,esi
c0018c2e:	53                   	push   ebx
c0018c2f:	83 ec 10             	sub    esp,0x10
c0018c32:	8a 44 24 24          	mov    al,BYTE PTR [esp+0x24]
c0018c36:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0018c3a:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018c3e:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c0018c43:	8a 9c 07 6c 02 00 00 	mov    bl,BYTE PTR [edi+eax*1+0x26c]
c0018c4a:	84 db                	test   bl,bl
c0018c4c:	75 33                	jne    c0018c81 <IDE::waitInterrupt(unsigned char)+0x57>
c0018c4e:	52                   	push   edx
c0018c4f:	6a 0c                	push   0xc
c0018c51:	50                   	push   eax
c0018c52:	57                   	push   edi
c0018c53:	e8 24 ff ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c0018c58:	83 c4 10             	add    esp,0x10
c0018c5b:	a8 01                	test   al,0x1
c0018c5d:	75 2a                	jne    c0018c89 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018c5f:	f7 c6 04 00 00 00    	test   esi,0x4
c0018c65:	75 12                	jne    c0018c79 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018c67:	83 fe 32             	cmp    esi,0x32
c0018c6a:	7e 0d                	jle    c0018c79 <IDE::waitInterrupt(unsigned char)+0x4f>
c0018c6c:	83 ec 0c             	sub    esp,0xc
c0018c6f:	6a 64                	push   0x64
c0018c71:	e8 56 ac ff ff       	call   c00138cc <milliTenthSleep(unsigned int)>
c0018c76:	83 c4 10             	add    esp,0x10
c0018c79:	83 fe 3c             	cmp    esi,0x3c
c0018c7c:	74 0b                	je     c0018c89 <IDE::waitInterrupt(unsigned char)+0x5f>
c0018c7e:	46                   	inc    esi
c0018c7f:	eb bd                	jmp    c0018c3e <IDE::waitInterrupt(unsigned char)+0x14>
c0018c81:	c6 84 07 6c 02 00 00 00 	mov    BYTE PTR [edi+eax*1+0x26c],0x0
c0018c89:	83 c4 10             	add    esp,0x10
c0018c8c:	88 d8                	mov    al,bl
c0018c8e:	5b                   	pop    ebx
c0018c8f:	5e                   	pop    esi
c0018c90:	5f                   	pop    edi
c0018c91:	c3                   	ret    

c0018c92 <ideChannel0IRQHandler(regs*, void*)>:
c0018c92:	83 ec 10             	sub    esp,0x10
c0018c95:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018c99:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0018ca0:	6a 07                	push   0x7
c0018ca2:	6a 00                	push   0x0
c0018ca4:	50                   	push   eax
c0018ca5:	e8 d2 fe ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c0018caa:	83 c4 1c             	add    esp,0x1c
c0018cad:	c3                   	ret    

c0018cae <ideChannel1IRQHandler(regs*, void*)>:
c0018cae:	83 ec 10             	sub    esp,0x10
c0018cb1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018cb5:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0018cbc:	6a 07                	push   0x7
c0018cbe:	6a 01                	push   0x1
c0018cc0:	50                   	push   eax
c0018cc1:	e8 b6 fe ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c0018cc6:	83 c4 1c             	add    esp,0x1c
c0018cc9:	c3                   	ret    

c0018cca <IDE::enableIRQs(unsigned char, bool)>:
c0018cca:	57                   	push   edi
c0018ccb:	56                   	push   esi
c0018ccc:	be 04 00 00 00       	mov    esi,0x4
c0018cd1:	53                   	push   ebx
c0018cd2:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0018cd7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0018cdb:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0018ce0:	0f 94 c0             	sete   al
c0018ce3:	01 c0                	add    eax,eax
c0018ce5:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0018cec:	0f b6 c0             	movzx  eax,al
c0018cef:	50                   	push   eax
c0018cf0:	6a 0c                	push   0xc
c0018cf2:	57                   	push   edi
c0018cf3:	53                   	push   ebx
c0018cf4:	e8 c3 fd ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0018cf9:	83 c4 10             	add    esp,0x10
c0018cfc:	50                   	push   eax
c0018cfd:	6a 0c                	push   0xc
c0018cff:	57                   	push   edi
c0018d00:	53                   	push   ebx
c0018d01:	e8 76 fe ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c0018d06:	83 c4 10             	add    esp,0x10
c0018d09:	4e                   	dec    esi
c0018d0a:	75 f0                	jne    c0018cfc <IDE::enableIRQs(unsigned char, bool)+0x32>
c0018d0c:	5b                   	pop    ebx
c0018d0d:	5e                   	pop    esi
c0018d0e:	5f                   	pop    edi
c0018d0f:	c3                   	ret    

c0018d10 <IDE::open(int, int, void*)>:
c0018d10:	55                   	push   ebp
c0018d11:	57                   	push   edi
c0018d12:	56                   	push   esi
c0018d13:	53                   	push   ebx
c0018d14:	83 ec 1c             	sub    esp,0x1c
c0018d17:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0018d1b:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0018d24:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0018d2d:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0018d34:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0018d3b:	0f 85 b0 02 00 00    	jne    c0018ff1 <IDE::open(int, int, void*)+0x2e1>
c0018d41:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0018d47:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0018d4b:	83 e0 7f             	and    eax,0x7f
c0018d4e:	3c 05                	cmp    al,0x5
c0018d50:	74 04                	je     c0018d56 <IDE::open(int, int, void*)+0x46>
c0018d52:	3c 0f                	cmp    al,0xf
c0018d54:	75 32                	jne    c0018d88 <IDE::open(int, int, void*)+0x78>
c0018d56:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0018d5c:	83 e0 fc             	and    eax,0xfffffffc
c0018d5f:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0018d66:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0018d6c:	83 e0 fc             	and    eax,0xfffffffc
c0018d6f:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0018d76:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0018d7c:	83 e0 fc             	and    eax,0xfffffffc
c0018d7f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018d86:	eb 14                	jmp    c0018d9c <IDE::open(int, int, void*)+0x8c>
c0018d88:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0018d92:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0018d9c:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0018da3:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0018daa:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0018dae:	89 c6                	mov    esi,eax
c0018db0:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018db5:	c1 e6 10             	shl    esi,0x10
c0018db8:	89 e8                	mov    eax,ebp
c0018dba:	89 fa                	mov    edx,edi
c0018dbc:	c1 e0 0b             	shl    eax,0xb
c0018dbf:	09 f0                	or     eax,esi
c0018dc1:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0018dc8:	c1 e6 08             	shl    esi,0x8
c0018dcb:	09 c6                	or     esi,eax
c0018dcd:	89 f0                	mov    eax,esi
c0018dcf:	0d 08 00 00 80       	or     eax,0x80000008
c0018dd4:	ef                   	out    dx,eax
c0018dd5:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0018dda:	89 ca                	mov    edx,ecx
c0018ddc:	ed                   	in     eax,dx
c0018ddd:	c1 e8 10             	shr    eax,0x10
c0018de0:	3d ff ff 00 00       	cmp    eax,0xffff
c0018de5:	0f 84 f5 00 00 00    	je     c0018ee0 <IDE::open(int, int, void*)+0x1d0>
c0018deb:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0018df1:	89 fa                	mov    edx,edi
c0018df3:	89 f0                	mov    eax,esi
c0018df5:	ef                   	out    dx,eax
c0018df6:	b0 fe                	mov    al,0xfe
c0018df8:	89 ca                	mov    edx,ecx
c0018dfa:	ee                   	out    dx,al
c0018dfb:	89 f0                	mov    eax,esi
c0018dfd:	89 fa                	mov    edx,edi
c0018dff:	ef                   	out    dx,eax
c0018e00:	89 ca                	mov    edx,ecx
c0018e02:	ed                   	in     eax,dx
c0018e03:	3c fe                	cmp    al,0xfe
c0018e05:	0f 85 a9 00 00 00    	jne    c0018eb4 <IDE::open(int, int, void*)+0x1a4>
c0018e0b:	8b 15 84 03 02 c0    	mov    edx,DWORD PTR ds:0xc0020384
c0018e11:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c0018e18:	74 33                	je     c0018e4d <IDE::open(int, int, void*)+0x13d>
c0018e1a:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0018e20:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0018e24:	40                   	inc    eax
c0018e25:	83 ec 0c             	sub    esp,0xc
c0018e28:	0f b6 c0             	movzx  eax,al
c0018e2b:	50                   	push   eax
c0018e2c:	55                   	push   ebp
c0018e2d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018e31:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c0018e37:	51                   	push   ecx
c0018e38:	e8 b7 5a ff ff       	call   c000e8f4 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0018e3d:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0018e42:	83 c4 1c             	add    esp,0x1c
c0018e45:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0018e4b:	eb 0a                	jmp    c0018e57 <IDE::open(int, int, void*)+0x147>
c0018e4d:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0018e57:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0018e5e:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0018e65:	c1 e1 10             	shl    ecx,0x10
c0018e68:	c1 e0 08             	shl    eax,0x8
c0018e6b:	bf f8 0c 00 00       	mov    edi,0xcf8
c0018e70:	09 c1                	or     ecx,eax
c0018e72:	89 fa                	mov    edx,edi
c0018e74:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0018e7b:	c1 e0 0b             	shl    eax,0xb
c0018e7e:	09 c1                	or     ecx,eax
c0018e80:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0018e86:	89 c8                	mov    eax,ecx
c0018e88:	ef                   	out    dx,eax
c0018e89:	be fc 0c 00 00       	mov    esi,0xcfc
c0018e8e:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0018e94:	89 f2                	mov    edx,esi
c0018e96:	ee                   	out    dx,al
c0018e97:	89 c8                	mov    eax,ecx
c0018e99:	89 fa                	mov    edx,edi
c0018e9b:	ef                   	out    dx,eax
c0018e9c:	89 f2                	mov    edx,esi
c0018e9e:	ed                   	in     eax,dx
c0018e9f:	0f b6 c0             	movzx  eax,al
c0018ea2:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0018ea8:	74 46                	je     c0018ef0 <IDE::open(int, int, void*)+0x1e0>
c0018eaa:	83 ec 0c             	sub    esp,0xc
c0018ead:	68 70 ec 01 c0       	push   0xc001ec70
c0018eb2:	eb 34                	jmp    c0018ee8 <IDE::open(int, int, void*)+0x1d8>
c0018eb4:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0018ebd:	75 17                	jne    c0018ed6 <IDE::open(int, int, void*)+0x1c6>
c0018ebf:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0018ec4:	74 07                	je     c0018ecd <IDE::open(int, int, void*)+0x1bd>
c0018ec6:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0018ecb:	75 09                	jne    c0018ed6 <IDE::open(int, int, void*)+0x1c6>
c0018ecd:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018ed4:	eb 1a                	jmp    c0018ef0 <IDE::open(int, int, void*)+0x1e0>
c0018ed6:	83 ec 0c             	sub    esp,0xc
c0018ed9:	68 78 ec 01 c0       	push   0xc001ec78
c0018ede:	eb 08                	jmp    c0018ee8 <IDE::open(int, int, void*)+0x1d8>
c0018ee0:	83 ec 0c             	sub    esp,0xc
c0018ee3:	68 a9 ec 01 c0       	push   0xc001eca9
c0018ee8:	e8 8a 73 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c0018eed:	83 c4 10             	add    esp,0x10
c0018ef0:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0018ef7:	79 1a                	jns    c0018f13 <IDE::open(int, int, void*)+0x203>
c0018ef9:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0018eff:	83 e0 fc             	and    eax,0xfffffffc
c0018f02:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0018f09:	83 c0 08             	add    eax,0x8
c0018f0c:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0018f13:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018f19:	89 c2                	mov    edx,eax
c0018f1b:	83 e2 0f             	and    edx,0xf
c0018f1e:	66 83 fa 08          	cmp    dx,0x8
c0018f22:	75 0a                	jne    c0018f2e <IDE::open(int, int, void*)+0x21e>
c0018f24:	83 e8 02             	sub    eax,0x2
c0018f27:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0018f2e:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0018f34:	89 c2                	mov    edx,eax
c0018f36:	83 e2 0f             	and    edx,0xf
c0018f39:	66 83 fa 08          	cmp    dx,0x8
c0018f3d:	75 0a                	jne    c0018f49 <IDE::open(int, int, void*)+0x239>
c0018f3f:	83 e8 02             	sub    eax,0x2
c0018f42:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0018f49:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0018f50:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0018f57:	89 d0                	mov    eax,edx
c0018f59:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018f5c:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018f60:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0018f64:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018f67:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018f6c:	0f b6 c9             	movzx  ecx,cl
c0018f6f:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0018f76:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018f79:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018f7d:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0018f81:	8d 50 02             	lea    edx,[eax+0x2]
c0018f84:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018f89:	0f b6 d2             	movzx  edx,dl
c0018f8c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0018f92:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018f95:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018f99:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0018f9d:	8d 48 03             	lea    ecx,[eax+0x3]
c0018fa0:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018fa5:	0f b6 c9             	movzx  ecx,cl
c0018fa8:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0018fae:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0018fb1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0018fb5:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0018fb9:	8d 50 04             	lea    edx,[eax+0x4]
c0018fbc:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0018fc2:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0018fc7:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0018fce:	66 85 f6             	test   si,si
c0018fd1:	74 5b                	je     c001902e <IDE::open(int, int, void*)+0x31e>
c0018fd3:	0f b6 d2             	movzx  edx,dl
c0018fd6:	83 c0 05             	add    eax,0x5
c0018fd9:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0018fdc:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0018fe0:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0018fe4:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0018fea:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0018fef:	eb 3d                	jmp    c001902e <IDE::open(int, int, void*)+0x31e>
c0018ff1:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c0018ff7:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0018ffe:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0019005:	66 05 06 02          	add    ax,0x206
c0019009:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0019010:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c0019017:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001901e:	66 05 06 02          	add    ax,0x206
c0019022:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0019029:	e9 e5 fe ff ff       	jmp    c0018f13 <IDE::open(int, int, void*)+0x203>
c001902e:	50                   	push   eax
c001902f:	50                   	push   eax
c0019030:	6a 00                	push   0x0
c0019032:	53                   	push   ebx
c0019033:	e8 5e fa ff ff       	call   c0018a96 <IDE::prepareInterrupt(unsigned char)>
c0019038:	5a                   	pop    edx
c0019039:	59                   	pop    ecx
c001903a:	6a 01                	push   0x1
c001903c:	53                   	push   ebx
c001903d:	e8 54 fa ff ff       	call   c0018a96 <IDE::prepareInterrupt(unsigned char)>
c0019042:	83 c4 0c             	add    esp,0xc
c0019045:	6a 00                	push   0x0
c0019047:	6a 00                	push   0x0
c0019049:	53                   	push   ebx
c001904a:	e8 7b fc ff ff       	call   c0018cca <IDE::enableIRQs(unsigned char, bool)>
c001904f:	83 c4 0c             	add    esp,0xc
c0019052:	6a 00                	push   0x0
c0019054:	6a 01                	push   0x1
c0019056:	53                   	push   ebx
c0019057:	e8 6e fc ff ff       	call   c0018cca <IDE::enableIRQs(unsigned char, bool)>
c001905c:	83 c4 10             	add    esp,0x10
c001905f:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0019066:	74 34                	je     c001909c <IDE::open(int, int, void*)+0x38c>
c0019068:	83 ec 0c             	sub    esp,0xc
c001906b:	53                   	push   ebx
c001906c:	6a 01                	push   0x1
c001906e:	68 92 8c 01 c0       	push   0xc0018c92
c0019073:	6a 0e                	push   0xe
c0019075:	53                   	push   ebx
c0019076:	e8 99 2a ff ff       	call   c000bb14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001907b:	83 c4 14             	add    esp,0x14
c001907e:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0019084:	53                   	push   ebx
c0019085:	6a 01                	push   0x1
c0019087:	68 ae 8c 01 c0       	push   0xc0018cae
c001908c:	6a 0f                	push   0xf
c001908e:	53                   	push   ebx
c001908f:	e8 80 2a ff ff       	call   c000bb14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0019094:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001909a:	eb 38                	jmp    c00190d4 <IDE::open(int, int, void*)+0x3c4>
c001909c:	83 ec 0c             	sub    esp,0xc
c001909f:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00190a9:	53                   	push   ebx
c00190aa:	6a 00                	push   0x0
c00190ac:	68 92 8c 01 c0       	push   0xc0018c92
c00190b1:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c00190b7:	53                   	push   ebx
c00190b8:	e8 57 2a ff ff       	call   c000bb14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00190bd:	83 c4 14             	add    esp,0x14
c00190c0:	53                   	push   ebx
c00190c1:	6a 00                	push   0x0
c00190c3:	68 ae 8c 01 c0       	push   0xc0018cae
c00190c8:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c00190ce:	53                   	push   ebx
c00190cf:	e8 40 2a ff ff       	call   c000bb14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00190d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c00190d6:	83 c4 20             	add    esp,0x20
c00190d9:	83 ec 0c             	sub    esp,0xc
c00190dc:	53                   	push   ebx
c00190dd:	ff 50 18             	call   DWORD PTR [eax+0x18]
c00190e0:	83 c4 0c             	add    esp,0xc
c00190e3:	6a 07                	push   0x7
c00190e5:	6a 00                	push   0x0
c00190e7:	53                   	push   ebx
c00190e8:	e8 8f fa ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c00190ed:	83 c4 0c             	add    esp,0xc
c00190f0:	6a 07                	push   0x7
c00190f2:	6a 01                	push   0x1
c00190f4:	53                   	push   ebx
c00190f5:	e8 82 fa ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c00190fa:	83 c4 0c             	add    esp,0xc
c00190fd:	6a 01                	push   0x1
c00190ff:	6a 00                	push   0x0
c0019101:	53                   	push   ebx
c0019102:	e8 c3 fb ff ff       	call   c0018cca <IDE::enableIRQs(unsigned char, bool)>
c0019107:	83 c4 0c             	add    esp,0xc
c001910a:	6a 01                	push   0x1
c001910c:	6a 01                	push   0x1
c001910e:	53                   	push   ebx
c001910f:	e8 b6 fb ff ff       	call   c0018cca <IDE::enableIRQs(unsigned char, bool)>
c0019114:	83 c4 2c             	add    esp,0x2c
c0019117:	31 c0                	xor    eax,eax
c0019119:	5b                   	pop    ebx
c001911a:	5e                   	pop    esi
c001911b:	5f                   	pop    edi
c001911c:	5d                   	pop    ebp
c001911d:	c3                   	ret    

c001911e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001911e:	55                   	push   ebp
c001911f:	57                   	push   edi
c0019120:	56                   	push   esi
c0019121:	53                   	push   ebx
c0019122:	83 ec 1c             	sub    esp,0x1c
c0019125:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019129:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001912d:	8d 50 f8             	lea    edx,[eax-0x8]
c0019130:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019134:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0019138:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001913c:	80 fa 03             	cmp    dl,0x3
c001913f:	77 5d                	ja     c001919e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0019141:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0019145:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0019149:	0f b6 db             	movzx  ebx,bl
c001914c:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001914f:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0019153:	83 ca 80             	or     edx,0xffffff80
c0019156:	0f b6 d2             	movzx  edx,dl
c0019159:	52                   	push   edx
c001915a:	6a 0c                	push   0xc
c001915c:	53                   	push   ebx
c001915d:	56                   	push   esi
c001915e:	e8 59 f9 ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019163:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0019168:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001916c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019170:	0f b6 c0             	movzx  eax,al
c0019173:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0019177:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0019179:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001917e:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0019182:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0019186:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001918a:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0019192:	83 c4 2c             	add    esp,0x2c
c0019195:	5b                   	pop    ebx
c0019196:	5e                   	pop    esi
c0019197:	5f                   	pop    edi
c0019198:	5d                   	pop    ebp
c0019199:	e9 1e f9 ff ff       	jmp    c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001919e:	3c 07                	cmp    al,0x7
c00191a0:	77 10                	ja     c00191b2 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c00191a2:	0f b6 db             	movzx  ebx,bl
c00191a5:	0f b6 d0             	movzx  edx,al
c00191a8:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c00191b0:	eb 2d                	jmp    c00191df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00191b2:	3c 0d                	cmp    al,0xd
c00191b4:	77 13                	ja     c00191c9 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c00191b6:	0f b6 db             	movzx  ebx,bl
c00191b9:	0f b6 c0             	movzx  eax,al
c00191bc:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c00191c3:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c00191c7:	eb 16                	jmp    c00191df <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c00191c9:	3c 15                	cmp    al,0x15
c00191cb:	77 14                	ja     c00191e1 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c00191cd:	0f b6 db             	movzx  ebx,bl
c00191d0:	0f b6 c0             	movzx  eax,al
c00191d3:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c00191db:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c00191df:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00191e1:	83 c4 1c             	add    esp,0x1c
c00191e4:	5b                   	pop    ebx
c00191e5:	5e                   	pop    esi
c00191e6:	5f                   	pop    edi
c00191e7:	5d                   	pop    ebp
c00191e8:	c3                   	ret    
c00191e9:	90                   	nop

c00191ea <IDE::detect()>:
c00191ea:	55                   	push   ebp
c00191eb:	57                   	push   edi
c00191ec:	56                   	push   esi
c00191ed:	53                   	push   ebx
c00191ee:	81 ec 1c 02 00 00    	sub    esp,0x21c
c00191f4:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c00191fb:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0019202:	0f 85 97 02 00 00    	jne    c001949f <IDE::detect()+0x2b5>
c0019208:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001920f:	31 f6                	xor    esi,esi
c0019211:	31 ed                	xor    ebp,ebp
c0019213:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001921b:	89 e8                	mov    eax,ebp
c001921d:	c1 e0 06             	shl    eax,0x6
c0019220:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0019228:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001922c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019230:	c1 e0 04             	shl    eax,0x4
c0019233:	83 c8 a0             	or     eax,0xffffffa0
c0019236:	0f b6 c0             	movzx  eax,al
c0019239:	50                   	push   eax
c001923a:	6a 06                	push   0x6
c001923c:	56                   	push   esi
c001923d:	53                   	push   ebx
c001923e:	e8 79 f8 ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019243:	83 c4 0c             	add    esp,0xc
c0019246:	6a 0c                	push   0xc
c0019248:	56                   	push   esi
c0019249:	53                   	push   ebx
c001924a:	e8 2d f9 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c001924f:	83 c4 0c             	add    esp,0xc
c0019252:	6a 0c                	push   0xc
c0019254:	56                   	push   esi
c0019255:	53                   	push   ebx
c0019256:	e8 21 f9 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c001925b:	83 c4 0c             	add    esp,0xc
c001925e:	6a 0c                	push   0xc
c0019260:	56                   	push   esi
c0019261:	53                   	push   ebx
c0019262:	e8 15 f9 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c0019267:	83 c4 0c             	add    esp,0xc
c001926a:	6a 0c                	push   0xc
c001926c:	56                   	push   esi
c001926d:	53                   	push   ebx
c001926e:	e8 09 f9 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c0019273:	68 ec 00 00 00       	push   0xec
c0019278:	6a 07                	push   0x7
c001927a:	56                   	push   esi
c001927b:	53                   	push   ebx
c001927c:	e8 3b f8 ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019281:	83 c4 1c             	add    esp,0x1c
c0019284:	6a 0c                	push   0xc
c0019286:	56                   	push   esi
c0019287:	53                   	push   ebx
c0019288:	e8 ef f8 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c001928d:	83 c4 0c             	add    esp,0xc
c0019290:	6a 0c                	push   0xc
c0019292:	56                   	push   esi
c0019293:	53                   	push   ebx
c0019294:	e8 e3 f8 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c0019299:	83 c4 0c             	add    esp,0xc
c001929c:	6a 0c                	push   0xc
c001929e:	56                   	push   esi
c001929f:	53                   	push   ebx
c00192a0:	e8 d7 f8 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c00192a5:	83 c4 0c             	add    esp,0xc
c00192a8:	6a 0c                	push   0xc
c00192aa:	56                   	push   esi
c00192ab:	53                   	push   ebx
c00192ac:	e8 cb f8 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c00192b1:	83 c4 0c             	add    esp,0xc
c00192b4:	6a 0c                	push   0xc
c00192b6:	56                   	push   esi
c00192b7:	53                   	push   ebx
c00192b8:	e8 bf f8 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c00192bd:	83 c4 10             	add    esp,0x10
c00192c0:	84 c0                	test   al,al
c00192c2:	0f 84 5f 01 00 00    	je     c0019427 <IDE::detect()+0x23d>
c00192c8:	31 ff                	xor    edi,edi
c00192ca:	50                   	push   eax
c00192cb:	6a 0c                	push   0xc
c00192cd:	56                   	push   esi
c00192ce:	53                   	push   ebx
c00192cf:	e8 a8 f8 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c00192d4:	83 c4 10             	add    esp,0x10
c00192d7:	a8 01                	test   al,0x1
c00192d9:	0f 85 69 01 00 00    	jne    c0019448 <IDE::detect()+0x25e>
c00192df:	84 c0                	test   al,al
c00192e1:	78 04                	js     c00192e7 <IDE::detect()+0xfd>
c00192e3:	a8 08                	test   al,0x8
c00192e5:	75 23                	jne    c001930a <IDE::detect()+0x120>
c00192e7:	47                   	inc    edi
c00192e8:	81 ff 17 01 00 00    	cmp    edi,0x117
c00192ee:	7e da                	jle    c00192ca <IDE::detect()+0xe0>
c00192f0:	83 ec 0c             	sub    esp,0xc
c00192f3:	6a 32                	push   0x32
c00192f5:	e8 d2 a5 ff ff       	call   c00138cc <milliTenthSleep(unsigned int)>
c00192fa:	83 c4 10             	add    esp,0x10
c00192fd:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0019303:	75 c5                	jne    c00192ca <IDE::detect()+0xe0>
c0019305:	e9 3e 01 00 00       	jmp    c0019448 <IDE::detect()+0x25e>
c001930a:	31 c9                	xor    ecx,ecx
c001930c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0019310:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0019314:	83 ec 0c             	sub    esp,0xc
c0019317:	68 80 00 00 00       	push   0x80
c001931c:	57                   	push   edi
c001931d:	6a 00                	push   0x0
c001931f:	56                   	push   esi
c0019320:	53                   	push   ebx
c0019321:	e8 f8 fd ff ff       	call   c001911e <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0019326:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001932b:	89 e8                	mov    eax,ebp
c001932d:	89 d1                	mov    ecx,edx
c001932f:	c1 e0 06             	shl    eax,0x6
c0019332:	01 d8                	add    eax,ebx
c0019334:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001933b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0019342:	89 f2                	mov    edx,esi
c0019344:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001934a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001934e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0019354:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019358:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001935f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c0019367:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001936e:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c0019376:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001937c:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c0019383:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c0019389:	8d 54 24 58          	lea    edx,[esp+0x58]
c001938d:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0019391:	83 c4 20             	add    esp,0x20
c0019394:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0019397:	83 c0 02             	add    eax,0x2
c001939a:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00193a0:	83 c7 02             	add    edi,0x2
c00193a3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00193a6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00193ac:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00193b0:	75 e2                	jne    c0019394 <IDE::detect()+0x1aa>
c00193b2:	89 e8                	mov    eax,ebp
c00193b4:	c1 e0 06             	shl    eax,0x6
c00193b7:	01 d8                	add    eax,ebx
c00193b9:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c00193bf:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c00193c6:	66 c1 ea 09          	shr    dx,0x9
c00193ca:	83 e2 01             	and    edx,0x1
c00193cd:	84 c9                	test   cl,cl
c00193cf:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c00193d5:	75 22                	jne    c00193f9 <IDE::detect()+0x20f>
c00193d7:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c00193de:	74 46                	je     c0019426 <IDE::detect()+0x23c>
c00193e0:	83 ec 0c             	sub    esp,0xc
c00193e3:	68 7c 01 00 00       	push   0x17c
c00193e8:	e8 ac e5 fe ff       	call   c0007999 <malloc>
c00193ed:	89 c7                	mov    edi,eax
c00193ef:	89 04 24             	mov    DWORD PTR [esp],eax
c00193f2:	e8 11 05 00 00       	call   c0019908 <ATA::ATA()>
c00193f7:	eb 17                	jmp    c0019410 <IDE::detect()+0x226>
c00193f9:	83 ec 0c             	sub    esp,0xc
c00193fc:	68 84 01 00 00       	push   0x184
c0019401:	e8 93 e5 fe ff       	call   c0007999 <malloc>
c0019406:	89 c7                	mov    edi,eax
c0019408:	89 04 24             	mov    DWORD PTR [esp],eax
c001940b:	e8 f0 0a 00 00       	call   c0019f00 <ATAPI::ATAPI()>
c0019410:	5a                   	pop    edx
c0019411:	59                   	pop    ecx
c0019412:	57                   	push   edi
c0019413:	53                   	push   ebx
c0019414:	e8 4f 27 ff ff       	call   c000bb68 <Device::addChild(Device*)>
c0019419:	8b 07                	mov    eax,DWORD PTR [edi]
c001941b:	53                   	push   ebx
c001941c:	55                   	push   ebp
c001941d:	6a 00                	push   0x0
c001941f:	57                   	push   edi
c0019420:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0019423:	83 c4 20             	add    esp,0x20
c0019426:	45                   	inc    ebp
c0019427:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001942c:	74 0d                	je     c001943b <IDE::detect()+0x251>
c001942e:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0019436:	e9 e0 fd ff ff       	jmp    c001921b <IDE::detect()+0x31>
c001943b:	4e                   	dec    esi
c001943c:	74 61                	je     c001949f <IDE::detect()+0x2b5>
c001943e:	be 01 00 00 00       	mov    esi,0x1
c0019443:	e9 cb fd ff ff       	jmp    c0019213 <IDE::detect()+0x29>
c0019448:	50                   	push   eax
c0019449:	6a 04                	push   0x4
c001944b:	56                   	push   esi
c001944c:	53                   	push   ebx
c001944d:	e8 2a f7 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c0019452:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0019456:	83 c4 0c             	add    esp,0xc
c0019459:	6a 05                	push   0x5
c001945b:	56                   	push   esi
c001945c:	53                   	push   ebx
c001945d:	e8 1a f7 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c0019462:	83 c4 10             	add    esp,0x10
c0019465:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019469:	80 fa 14             	cmp    dl,0x14
c001946c:	75 04                	jne    c0019472 <IDE::detect()+0x288>
c001946e:	3c eb                	cmp    al,0xeb
c0019470:	eb 07                	jmp    c0019479 <IDE::detect()+0x28f>
c0019472:	3c 96                	cmp    al,0x96
c0019474:	75 b1                	jne    c0019427 <IDE::detect()+0x23d>
c0019476:	80 fa 69             	cmp    dl,0x69
c0019479:	75 ac                	jne    c0019427 <IDE::detect()+0x23d>
c001947b:	68 a1 00 00 00       	push   0xa1
c0019480:	6a 07                	push   0x7
c0019482:	56                   	push   esi
c0019483:	53                   	push   ebx
c0019484:	e8 33 f6 ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019489:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c0019490:	e8 37 a4 ff ff       	call   c00138cc <milliTenthSleep(unsigned int)>
c0019495:	83 c4 10             	add    esp,0x10
c0019498:	b1 01                	mov    cl,0x1
c001949a:	e9 6d fe ff ff       	jmp    c001930c <IDE::detect()+0x122>
c001949f:	81 c4 1c 02 00 00    	add    esp,0x21c
c00194a5:	5b                   	pop    ebx
c00194a6:	5e                   	pop    esi
c00194a7:	5f                   	pop    edi
c00194a8:	5d                   	pop    ebp
c00194a9:	c3                   	ret    

c00194aa <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c00194aa:	55                   	push   ebp
c00194ab:	57                   	push   edi
c00194ac:	56                   	push   esi
c00194ad:	53                   	push   ebx
c00194ae:	83 ec 1c             	sub    esp,0x1c
c00194b1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00194b5:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00194b9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00194bd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00194c1:	88 c3                	mov    bl,al
c00194c3:	84 c0                	test   al,al
c00194c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194c9:	0f 84 81 00 00 00    	je     c0019550 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c00194cf:	83 ec 0c             	sub    esp,0xc
c00194d2:	68 d3 ec 01 c0       	push   0xc001ecd3
c00194d7:	e8 4c 12 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c00194dc:	83 c4 10             	add    esp,0x10
c00194df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00194e3:	3c 01                	cmp    al,0x1
c00194e5:	74 63                	je     c001954a <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa0>
c00194e7:	3c 02                	cmp    al,0x2
c00194e9:	75 53                	jne    c001953e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c00194eb:	01 f6                	add    esi,esi
c00194ed:	09 ee                	or     esi,ebp
c00194ef:	50                   	push   eax
c00194f0:	89 f0                	mov    eax,esi
c00194f2:	6a 01                	push   0x1
c00194f4:	0f b6 f0             	movzx  esi,al
c00194f7:	c1 e6 06             	shl    esi,0x6
c00194fa:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c0019502:	50                   	push   eax
c0019503:	57                   	push   edi
c0019504:	e8 73 f6 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c0019509:	83 c4 10             	add    esp,0x10
c001950c:	a8 01                	test   al,0x1
c001950e:	74 02                	je     c0019512 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x68>
c0019510:	b3 07                	mov    bl,0x7
c0019512:	a8 02                	test   al,0x2
c0019514:	74 02                	je     c0019518 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x6e>
c0019516:	b3 03                	mov    bl,0x3
c0019518:	a8 04                	test   al,0x4
c001951a:	74 02                	je     c001951e <IDE::printError(unsigned char, unsigned char, unsigned char)+0x74>
c001951c:	b3 14                	mov    bl,0x14
c001951e:	a8 08                	test   al,0x8
c0019520:	74 02                	je     c0019524 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7a>
c0019522:	b3 03                	mov    bl,0x3
c0019524:	a8 10                	test   al,0x10
c0019526:	74 02                	je     c001952a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x80>
c0019528:	b3 15                	mov    bl,0x15
c001952a:	a8 20                	test   al,0x20
c001952c:	74 02                	je     c0019530 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x86>
c001952e:	b3 03                	mov    bl,0x3
c0019530:	a8 40                	test   al,0x40
c0019532:	74 02                	je     c0019536 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8c>
c0019534:	b3 16                	mov    bl,0x16
c0019536:	84 c0                	test   al,al
c0019538:	79 16                	jns    c0019550 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001953a:	b3 0d                	mov    bl,0xd
c001953c:	eb 12                	jmp    c0019550 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001953e:	3c 03                	cmp    al,0x3
c0019540:	74 0c                	je     c001954e <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa4>
c0019542:	3c 04                	cmp    al,0x4
c0019544:	75 0a                	jne    c0019550 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c0019546:	b3 08                	mov    bl,0x8
c0019548:	eb 06                	jmp    c0019550 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001954a:	b3 13                	mov    bl,0x13
c001954c:	eb 02                	jmp    c0019550 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xa6>
c001954e:	b3 17                	mov    bl,0x17
c0019550:	83 c4 1c             	add    esp,0x1c
c0019553:	88 d8                	mov    al,bl
c0019555:	5b                   	pop    ebx
c0019556:	5e                   	pop    esi
c0019557:	5f                   	pop    edi
c0019558:	5d                   	pop    ebp
c0019559:	c3                   	ret    

c001955a <IDE::polling(unsigned char, unsigned int)>:
c001955a:	55                   	push   ebp
c001955b:	bd 04 00 00 00       	mov    ebp,0x4
c0019560:	57                   	push   edi
c0019561:	56                   	push   esi
c0019562:	53                   	push   ebx
c0019563:	83 ec 0c             	sub    esp,0xc
c0019566:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001956a:	8a 5c 24 24          	mov    bl,BYTE PTR [esp+0x24]
c001956e:	0f b6 f3             	movzx  esi,bl
c0019571:	52                   	push   edx
c0019572:	6a 0c                	push   0xc
c0019574:	56                   	push   esi
c0019575:	57                   	push   edi
c0019576:	e8 01 f6 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c001957b:	83 c4 10             	add    esp,0x10
c001957e:	4d                   	dec    ebp
c001957f:	75 ed                	jne    c001956e <IDE::polling(unsigned char, unsigned int)+0x14>
c0019581:	bb a0 86 01 00       	mov    ebx,0x186a0
c0019586:	50                   	push   eax
c0019587:	6a 0c                	push   0xc
c0019589:	56                   	push   esi
c001958a:	57                   	push   edi
c001958b:	e8 ec f5 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c0019590:	83 c4 10             	add    esp,0x10
c0019593:	a8 01                	test   al,0x1
c0019595:	75 17                	jne    c00195ae <IDE::polling(unsigned char, unsigned int)+0x54>
c0019597:	a8 20                	test   al,0x20
c0019599:	75 0f                	jne    c00195aa <IDE::polling(unsigned char, unsigned int)+0x50>
c001959b:	4b                   	dec    ebx
c001959c:	74 10                	je     c00195ae <IDE::polling(unsigned char, unsigned int)+0x54>
c001959e:	84 c0                	test   al,al
c00195a0:	78 e4                	js     c0019586 <IDE::polling(unsigned char, unsigned int)+0x2c>
c00195a2:	a8 08                	test   al,0x8
c00195a4:	74 e0                	je     c0019586 <IDE::polling(unsigned char, unsigned int)+0x2c>
c00195a6:	31 c0                	xor    eax,eax
c00195a8:	eb 06                	jmp    c00195b0 <IDE::polling(unsigned char, unsigned int)+0x56>
c00195aa:	b0 01                	mov    al,0x1
c00195ac:	eb 02                	jmp    c00195b0 <IDE::polling(unsigned char, unsigned int)+0x56>
c00195ae:	b0 02                	mov    al,0x2
c00195b0:	83 c4 0c             	add    esp,0xc
c00195b3:	5b                   	pop    ebx
c00195b4:	5e                   	pop    esi
c00195b5:	5f                   	pop    edi
c00195b6:	5d                   	pop    ebp
c00195b7:	c3                   	ret    

c00195b8 <SATABus::close(int, int, void*)>:
c00195b8:	31 c0                	xor    eax,eax
c00195ba:	c3                   	ret    
c00195bb:	90                   	nop

c00195bc <SATABus::detect()>:
c00195bc:	c3                   	ret    
c00195bd:	90                   	nop

c00195be <SATABus::SATABus()>:
c00195be:	83 ec 0c             	sub    esp,0xc
c00195c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195c5:	83 ec 08             	sub    esp,0x8
c00195c8:	68 0c ed 01 c0       	push   0xc001ed0c
c00195cd:	50                   	push   eax
c00195ce:	e8 d9 28 ff ff       	call   c000beac <HardDiskController::HardDiskController(char const*)>
c00195d3:	83 c4 10             	add    esp,0x10
c00195d6:	ba 38 ed 01 c0       	mov    edx,0xc001ed38
c00195db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195df:	89 10                	mov    DWORD PTR [eax],edx
c00195e1:	83 ec 0c             	sub    esp,0xc
c00195e4:	6a 50                	push   0x50
c00195e6:	e8 39 e8 fe ff       	call   c0007e24 <Phys::allocateContiguousPages(int)>
c00195eb:	83 c4 10             	add    esp,0x10
c00195ee:	89 c2                	mov    edx,eax
c00195f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00195f4:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00195fa:	83 ec 0c             	sub    esp,0xc
c00195fd:	6a 50                	push   0x50
c00195ff:	e8 d1 fe fe ff       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c0019604:	83 c4 10             	add    esp,0x10
c0019607:	89 c2                	mov    edx,eax
c0019609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001960d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0019613:	a1 70 04 02 c0       	mov    eax,ds:0xc0020470
c0019618:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001961c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0019622:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019626:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001962c:	83 ec 0c             	sub    esp,0xc
c001962f:	6a 03                	push   0x3
c0019631:	6a 50                	push   0x50
c0019633:	51                   	push   ecx
c0019634:	52                   	push   edx
c0019635:	50                   	push   eax
c0019636:	e8 29 08 ff ff       	call   c0009e64 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001963b:	83 c4 20             	add    esp,0x20
c001963e:	90                   	nop
c001963f:	83 c4 0c             	add    esp,0xc
c0019642:	c3                   	ret    
c0019643:	90                   	nop

c0019644 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c0019644:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019648:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001964b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001964e:	09 c2                	or     edx,eax
c0019650:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019654:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001965a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001965c:	31 c0                	xor    eax,eax
c001965e:	c1 e9 08             	shr    ecx,0x8
c0019661:	83 e1 0f             	and    ecx,0xf
c0019664:	39 c8                	cmp    eax,ecx
c0019666:	74 0a                	je     c0019672 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c0019668:	f6 c2 01             	test   dl,0x1
c001966b:	74 08                	je     c0019675 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001966d:	d1 ea                	shr    edx,1
c001966f:	40                   	inc    eax
c0019670:	eb f2                	jmp    c0019664 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c0019672:	83 c8 ff             	or     eax,0xffffffff
c0019675:	c3                   	ret    

c0019676 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0019676:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001967a:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001967d:	89 c2                	mov    edx,eax
c001967f:	c1 ea 08             	shr    edx,0x8
c0019682:	83 e2 0f             	and    edx,0xf
c0019685:	fe ca                	dec    dl
c0019687:	75 31                	jne    c00196ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019689:	83 e0 0f             	and    eax,0xf
c001968c:	3c 03                	cmp    al,0x3
c001968e:	75 2a                	jne    c00196ba <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0019690:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0019693:	b8 02 00 00 00       	mov    eax,0x2
c0019698:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001969e:	74 1c                	je     c00196bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00196a0:	b8 04 00 00 00       	mov    eax,0x4
c00196a5:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c00196ab:	74 0f                	je     c00196bc <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c00196ad:	31 c0                	xor    eax,eax
c00196af:	83 fa 03             	cmp    edx,0x3
c00196b2:	0f 94 c0             	sete   al
c00196b5:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c00196b9:	c3                   	ret    
c00196ba:	31 c0                	xor    eax,eax
c00196bc:	c3                   	ret    
c00196bd:	90                   	nop

c00196be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c00196be:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196c2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00196c5:	0f ba e2 0f          	bt     edx,0xf
c00196c9:	72 f7                	jb     c00196c2 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c00196cb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00196ce:	83 ca 10             	or     edx,0x10
c00196d1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00196d4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00196d7:	83 ca 01             	or     edx,0x1
c00196da:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00196dd:	c3                   	ret    

c00196de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c00196de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00196e2:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00196e5:	83 e2 fe             	and    edx,0xfffffffe
c00196e8:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00196eb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00196ee:	83 e2 ef             	and    edx,0xffffffef
c00196f1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00196f4:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00196f7:	0f ba e2 0e          	bt     edx,0xe
c00196fb:	72 f7                	jb     c00196f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00196fd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0019700:	0f ba e2 0f          	bt     edx,0xf
c0019704:	72 ee                	jb     c00196f4 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0019706:	c3                   	ret    
c0019707:	90                   	nop

c0019708 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0019708:	55                   	push   ebp
c0019709:	57                   	push   edi
c001970a:	56                   	push   esi
c001970b:	53                   	push   ebx
c001970c:	83 ec 1c             	sub    esp,0x1c
c001970f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0019713:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0019717:	53                   	push   ebx
c0019718:	56                   	push   esi
c0019719:	e8 c0 ff ff ff       	call   c00196de <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001971e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0019722:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019728:	83 ec 0c             	sub    esp,0xc
c001972b:	c1 e5 0a             	shl    ebp,0xa
c001972e:	01 e8                	add    eax,ebp
c0019730:	89 03                	mov    DWORD PTR [ebx],eax
c0019732:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019734:	68 00 04 00 00       	push   0x400
c0019739:	6a 00                	push   0x0
c001973b:	50                   	push   eax
c001973c:	e8 af 6d fe ff       	call   c00004f0 <memset>
c0019741:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c0019747:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001974b:	01 e8                	add    eax,ebp
c001974d:	83 c4 1c             	add    esp,0x1c
c0019750:	89 03                	mov    DWORD PTR [ebx],eax
c0019752:	c1 e2 08             	shl    edx,0x8
c0019755:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001975c:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c0019762:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c0019768:	01 f8                	add    eax,edi
c001976a:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001976d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0019770:	68 00 01 00 00       	push   0x100
c0019775:	6a 00                	push   0x0
c0019777:	50                   	push   eax
c0019778:	e8 73 6d fe ff       	call   c00004f0 <memset>
c001977d:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c0019783:	01 fa                	add    edx,edi
c0019785:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0019789:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001978c:	c1 e7 0d             	shl    edi,0xd
c001978f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0019796:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001979c:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c00197a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00197a6:	31 ff                	xor    edi,edi
c00197a8:	83 c4 10             	add    esp,0x10
c00197ab:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c00197b1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00197b5:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00197bb:	83 c5 20             	add    ebp,0x20
c00197be:	01 f8                	add    eax,edi
c00197c0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00197c3:	52                   	push   edx
c00197c4:	68 00 01 00 00       	push   0x100
c00197c9:	6a 00                	push   0x0
c00197cb:	50                   	push   eax
c00197cc:	e8 1f 6d fe ff       	call   c00004f0 <memset>
c00197d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00197d5:	83 c4 10             	add    esp,0x10
c00197d8:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c00197de:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c00197e5:	01 f8                	add    eax,edi
c00197e7:	81 c7 00 01 00 00    	add    edi,0x100
c00197ed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00197f0:	81 ff 00 20 00 00    	cmp    edi,0x2000
c00197f6:	75 b3                	jne    c00197ab <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c00197f8:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c00197ff:	50                   	push   eax
c0019800:	50                   	push   eax
c0019801:	53                   	push   ebx
c0019802:	56                   	push   esi
c0019803:	e8 b6 fe ff ff       	call   c00196be <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c0019808:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001980f:	83 c4 2c             	add    esp,0x2c
c0019812:	5b                   	pop    ebx
c0019813:	5e                   	pop    esi
c0019814:	5f                   	pop    edi
c0019815:	5d                   	pop    ebp
c0019816:	c3                   	ret    
c0019817:	90                   	nop

c0019818 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0019818:	55                   	push   ebp
c0019819:	57                   	push   edi
c001981a:	56                   	push   esi
c001981b:	53                   	push   ebx
c001981c:	31 db                	xor    ebx,ebx
c001981e:	83 ec 0c             	sub    esp,0xc
c0019821:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0019825:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019829:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001982c:	f7 c7 01 00 00 00    	test   edi,0x1
c0019832:	74 7a                	je     c00198ae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019834:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0019838:	89 d8                	mov    eax,ebx
c001983a:	c1 e0 07             	shl    eax,0x7
c001983d:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c0019844:	55                   	push   ebp
c0019845:	56                   	push   esi
c0019846:	e8 2b fe ff ff       	call   c0019676 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001984b:	5a                   	pop    edx
c001984c:	83 f8 01             	cmp    eax,0x1
c001984f:	59                   	pop    ecx
c0019850:	75 21                	jne    c0019873 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c0019852:	50                   	push   eax
c0019853:	53                   	push   ebx
c0019854:	55                   	push   ebp
c0019855:	56                   	push   esi
c0019856:	e8 ad fe ff ff       	call   c0019708 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001985b:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0019862:	e8 32 e1 fe ff       	call   c0007999 <malloc>
c0019867:	89 c5                	mov    ebp,eax
c0019869:	89 04 24             	mov    DWORD PTR [esp],eax
c001986c:	e8 43 0d 00 00       	call   c001a5b4 <SATA::SATA()>
c0019871:	eb 24                	jmp    c0019897 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c0019873:	83 f8 04             	cmp    eax,0x4
c0019876:	75 36                	jne    c00198ae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c0019878:	51                   	push   ecx
c0019879:	53                   	push   ebx
c001987a:	55                   	push   ebp
c001987b:	56                   	push   esi
c001987c:	e8 87 fe ff ff       	call   c0019708 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0019881:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c0019888:	e8 0c e1 fe ff       	call   c0007999 <malloc>
c001988d:	89 c5                	mov    ebp,eax
c001988f:	89 04 24             	mov    DWORD PTR [esp],eax
c0019892:	e8 71 11 00 00       	call   c001aa08 <SATAPI::SATAPI()>
c0019897:	58                   	pop    eax
c0019898:	5a                   	pop    edx
c0019899:	55                   	push   ebp
c001989a:	56                   	push   esi
c001989b:	e8 c8 22 ff ff       	call   c000bb68 <Device::addChild(Device*)>
c00198a0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c00198a3:	56                   	push   esi
c00198a4:	6a 00                	push   0x0
c00198a6:	53                   	push   ebx
c00198a7:	55                   	push   ebp
c00198a8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00198ab:	83 c4 20             	add    esp,0x20
c00198ae:	d1 ef                	shr    edi,1
c00198b0:	43                   	inc    ebx
c00198b1:	83 fb 20             	cmp    ebx,0x20
c00198b4:	0f 85 72 ff ff ff    	jne    c001982c <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c00198ba:	83 c4 0c             	add    esp,0xc
c00198bd:	5b                   	pop    ebx
c00198be:	5e                   	pop    esi
c00198bf:	5f                   	pop    edi
c00198c0:	5d                   	pop    ebp
c00198c1:	c3                   	ret    

c00198c2 <SATABus::open(int, int, void*)>:
c00198c2:	83 ec 14             	sub    esp,0x14
c00198c5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00198c9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c00198cf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00198d5:	52                   	push   edx
c00198d6:	50                   	push   eax
c00198d7:	e8 3c ff ff ff       	call   c0019818 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c00198dc:	31 c0                	xor    eax,eax
c00198de:	83 c4 1c             	add    esp,0x1c
c00198e1:	c3                   	ret    

c00198e2 <ATA::close(int, int, void*)>:
c00198e2:	83 ec 0c             	sub    esp,0xc
c00198e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00198e9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00198ef:	85 c0                	test   eax,eax
c00198f1:	74 0c                	je     c00198ff <ATA::close(int, int, void*)+0x1d>
c00198f3:	83 ec 0c             	sub    esp,0xc
c00198f6:	8b 10                	mov    edx,DWORD PTR [eax]
c00198f8:	50                   	push   eax
c00198f9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00198fc:	83 c4 10             	add    esp,0x10
c00198ff:	31 c0                	xor    eax,eax
c0019901:	83 c4 0c             	add    esp,0xc
c0019904:	c3                   	ret    
c0019905:	90                   	nop

c0019906 <ATA::powerSaving(PowerSavingLevel)>:
c0019906:	c3                   	ret    
c0019907:	90                   	nop

c0019908 <ATA::ATA()>:
c0019908:	83 ec 0c             	sub    esp,0xc
c001990b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001990f:	83 ec 04             	sub    esp,0x4
c0019912:	68 00 02 00 00       	push   0x200
c0019917:	68 05 ee 01 c0       	push   0xc001ee05
c001991c:	50                   	push   eax
c001991d:	e8 14 26 ff ff       	call   c000bf36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019922:	83 c4 10             	add    esp,0x10
c0019925:	ba 78 ed 01 c0       	mov    edx,0xc001ed78
c001992a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001992e:	89 10                	mov    DWORD PTR [eax],edx
c0019930:	90                   	nop
c0019931:	83 c4 0c             	add    esp,0xc
c0019934:	c3                   	ret    
c0019935:	90                   	nop

c0019936 <ATA::flush(bool)>:
c0019936:	53                   	push   ebx
c0019937:	83 ec 08             	sub    esp,0x8
c001993a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c001993f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019943:	19 c0                	sbb    eax,eax
c0019945:	83 e0 fd             	and    eax,0xfffffffd
c0019948:	05 ea 00 00 00       	add    eax,0xea
c001994d:	50                   	push   eax
c001994e:	6a 07                	push   0x7
c0019950:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019957:	50                   	push   eax
c0019958:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001995e:	e8 59 f1 ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019963:	83 c4 0c             	add    esp,0xc
c0019966:	6a 00                	push   0x0
c0019968:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001996f:	50                   	push   eax
c0019970:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019976:	e8 df fb ff ff       	call   c001955a <IDE::polling(unsigned char, unsigned int)>
c001997b:	83 c4 18             	add    esp,0x18
c001997e:	5b                   	pop    ebx
c001997f:	c3                   	ret    

c0019980 <ATA::readyForCommand()>:
c0019980:	56                   	push   esi
c0019981:	53                   	push   ebx
c0019982:	53                   	push   ebx
c0019983:	31 db                	xor    ebx,ebx
c0019985:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019989:	51                   	push   ecx
c001998a:	6a 0c                	push   0xc
c001998c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019993:	50                   	push   eax
c0019994:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001999a:	e8 dd f1 ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c001999f:	83 c4 10             	add    esp,0x10
c00199a2:	a8 88                	test   al,0x88
c00199a4:	74 1f                	je     c00199c5 <ATA::readyForCommand()+0x45>
c00199a6:	43                   	inc    ebx
c00199a7:	83 fb 63             	cmp    ebx,0x63
c00199aa:	7e dd                	jle    c0019989 <ATA::readyForCommand()+0x9>
c00199ac:	83 ec 0c             	sub    esp,0xc
c00199af:	6a 0a                	push   0xa
c00199b1:	e8 16 9f ff ff       	call   c00138cc <milliTenthSleep(unsigned int)>
c00199b6:	83 c4 10             	add    esp,0x10
c00199b9:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c00199bf:	75 c8                	jne    c0019989 <ATA::readyForCommand()+0x9>
c00199c1:	31 c0                	xor    eax,eax
c00199c3:	eb 02                	jmp    c00199c7 <ATA::readyForCommand()+0x47>
c00199c5:	b0 01                	mov    al,0x1
c00199c7:	5a                   	pop    edx
c00199c8:	5b                   	pop    ebx
c00199c9:	5e                   	pop    esi
c00199ca:	c3                   	ret    
c00199cb:	90                   	nop

c00199cc <ATA::access(unsigned long long, int, void*, bool)>:
c00199cc:	55                   	push   ebp
c00199cd:	57                   	push   edi
c00199ce:	56                   	push   esi
c00199cf:	53                   	push   ebx
c00199d0:	83 ec 2c             	sub    esp,0x2c
c00199d3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00199d7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00199db:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00199df:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00199e3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00199e7:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00199eb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00199ef:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00199f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00199f9:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00199ff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0019a03:	c1 e0 06             	shl    eax,0x6
c0019a06:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0019a0e:	74 5d                	je     c0019a6d <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0019a10:	89 fa                	mov    edx,edi
c0019a12:	89 f0                	mov    eax,esi
c0019a14:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0019a18:	c1 ea 1c             	shr    edx,0x1c
c0019a1b:	89 d1                	mov    ecx,edx
c0019a1d:	09 c1                	or     ecx,eax
c0019a1f:	74 25                	je     c0019a46 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0019a21:	31 ed                	xor    ebp,ebp
c0019a23:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0019a2a:	89 fa                	mov    edx,edi
c0019a2c:	89 f0                	mov    eax,esi
c0019a2e:	0f ad d0             	shrd   eax,edx,cl
c0019a31:	d3 ea                	shr    edx,cl
c0019a33:	f6 c1 20             	test   cl,0x20
c0019a36:	74 02                	je     c0019a3a <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0019a38:	89 d0                	mov    eax,edx
c0019a3a:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0019a3e:	45                   	inc    ebp
c0019a3f:	83 fd 06             	cmp    ebp,0x6
c0019a42:	75 df                	jne    c0019a23 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0019a44:	eb 76                	jmp    c0019abc <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0019a46:	89 f0                	mov    eax,esi
c0019a48:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0019a4d:	89 fa                	mov    edx,edi
c0019a4f:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019a56:	0f ac d0 10          	shrd   eax,edx,0x10
c0019a5a:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019a5f:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0019a63:	c1 ee 18             	shr    esi,0x18
c0019a66:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0019a6b:	eb 56                	jmp    c0019ac3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019a6d:	6a 00                	push   0x0
c0019a6f:	6a 3f                	push   0x3f
c0019a71:	57                   	push   edi
c0019a72:	56                   	push   esi
c0019a73:	e8 28 22 00 00       	call   c001bca0 <__umoddi3>
c0019a78:	83 c4 10             	add    esp,0x10
c0019a7b:	40                   	inc    eax
c0019a7c:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0019a80:	6a 00                	push   0x0
c0019a82:	68 f0 03 00 00       	push   0x3f0
c0019a87:	57                   	push   edi
c0019a88:	56                   	push   esi
c0019a89:	e8 12 21 00 00       	call   c001bba0 <__udivdi3>
c0019a8e:	83 c4 10             	add    esp,0x10
c0019a91:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0019a96:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0019a9d:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0019aa2:	6a 00                	push   0x0
c0019aa4:	6a 3f                	push   0x3f
c0019aa6:	57                   	push   edi
c0019aa7:	56                   	push   esi
c0019aa8:	e8 f3 20 00 00       	call   c001bba0 <__udivdi3>
c0019aad:	83 c4 10             	add    esp,0x10
c0019ab0:	89 c6                	mov    esi,eax
c0019ab2:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0019ab7:	83 e6 0f             	and    esi,0xf
c0019aba:	eb 07                	jmp    c0019ac3 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0019abc:	31 f6                	xor    esi,esi
c0019abe:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0019ac3:	bf 01 00 00 00       	mov    edi,0x1
c0019ac8:	50                   	push   eax
c0019ac9:	6a 00                	push   0x0
c0019acb:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ad2:	50                   	push   eax
c0019ad3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019ad7:	e8 ee f1 ff ff       	call   c0018cca <IDE::enableIRQs(unsigned char, bool)>
c0019adc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019adf:	e8 9c fe ff ff       	call   c0019980 <ATA::readyForCommand()>
c0019ae4:	83 c4 10             	add    esp,0x10
c0019ae7:	84 c0                	test   al,al
c0019ae9:	0f 84 4e 02 00 00    	je     c0019d3d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019aef:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0019af5:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019afb:	c1 e0 04             	shl    eax,0x4
c0019afe:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0019b05:	09 c6                	or     esi,eax
c0019b07:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0019b0c:	75 05                	jne    c0019b13 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0019b0e:	83 ce a0             	or     esi,0xffffffa0
c0019b11:	eb 03                	jmp    c0019b16 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0019b13:	83 ce e0             	or     esi,0xffffffe0
c0019b16:	89 f0                	mov    eax,esi
c0019b18:	0f b6 f0             	movzx  esi,al
c0019b1b:	56                   	push   esi
c0019b1c:	6a 06                	push   0x6
c0019b1e:	51                   	push   ecx
c0019b1f:	52                   	push   edx
c0019b20:	e8 97 ef ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b25:	83 c4 10             	add    esp,0x10
c0019b28:	6a 00                	push   0x0
c0019b2a:	6a 01                	push   0x1
c0019b2c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b33:	50                   	push   eax
c0019b34:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b3a:	e8 7d ef ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b3f:	83 c4 10             	add    esp,0x10
c0019b42:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019b47:	75 6e                	jne    c0019bb7 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0019b49:	6a 00                	push   0x0
c0019b4b:	6a 08                	push   0x8
c0019b4d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b54:	50                   	push   eax
c0019b55:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b5b:	e8 5c ef ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b60:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0019b65:	50                   	push   eax
c0019b66:	6a 09                	push   0x9
c0019b68:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b6f:	50                   	push   eax
c0019b70:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b76:	e8 41 ef ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b7b:	83 c4 20             	add    esp,0x20
c0019b7e:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0019b83:	50                   	push   eax
c0019b84:	6a 0a                	push   0xa
c0019b86:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019b8d:	50                   	push   eax
c0019b8e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019b94:	e8 23 ef ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019b99:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0019b9e:	50                   	push   eax
c0019b9f:	6a 0b                	push   0xb
c0019ba1:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ba8:	50                   	push   eax
c0019ba9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019baf:	e8 08 ef ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bb4:	83 c4 20             	add    esp,0x20
c0019bb7:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0019bbc:	50                   	push   eax
c0019bbd:	6a 02                	push   0x2
c0019bbf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bc6:	50                   	push   eax
c0019bc7:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019bcd:	e8 ea ee ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bd2:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0019bd7:	50                   	push   eax
c0019bd8:	6a 03                	push   0x3
c0019bda:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019be1:	50                   	push   eax
c0019be2:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019be8:	e8 cf ee ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019bed:	83 c4 20             	add    esp,0x20
c0019bf0:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0019bf5:	50                   	push   eax
c0019bf6:	6a 04                	push   0x4
c0019bf8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019bff:	50                   	push   eax
c0019c00:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c06:	e8 b1 ee ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c0b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0019c10:	50                   	push   eax
c0019c11:	6a 05                	push   0x5
c0019c13:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c1a:	50                   	push   eax
c0019c1b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c21:	e8 96 ee ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c26:	83 c4 20             	add    esp,0x20
c0019c29:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0019c2e:	0f 94 c0             	sete   al
c0019c31:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019c36:	74 09                	je     c0019c41 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0019c38:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0019c3f:	eb 07                	jmp    c0019c48 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0019c41:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0019c48:	0f b6 c0             	movzx  eax,al
c0019c4b:	50                   	push   eax
c0019c4c:	6a 07                	push   0x7
c0019c4e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c55:	50                   	push   eax
c0019c56:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c5c:	e8 5b ee ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019c61:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0019c65:	83 c4 10             	add    esp,0x10
c0019c68:	85 f6                	test   esi,esi
c0019c6a:	0f 84 ae 00 00 00    	je     c0019d1e <ATA::access(unsigned long long, int, void*, bool)+0x352>
c0019c70:	50                   	push   eax
c0019c71:	6a 01                	push   0x1
c0019c73:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019c7a:	50                   	push   eax
c0019c7b:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019c81:	e8 d4 f8 ff ff       	call   c001955a <IDE::polling(unsigned char, unsigned int)>
c0019c86:	83 c4 10             	add    esp,0x10
c0019c89:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0019c8f:	84 c0                	test   al,al
c0019c91:	74 20                	je     c0019cb3 <ATA::access(unsigned long long, int, void*, bool)+0x2e7>
c0019c93:	0f b6 f8             	movzx  edi,al
c0019c96:	0f b6 d2             	movzx  edx,dl
c0019c99:	57                   	push   edi
c0019c9a:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0019ca1:	50                   	push   eax
c0019ca2:	52                   	push   edx
c0019ca3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019ca9:	e8 fc f7 ff ff       	call   c00194aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0019cae:	e9 87 00 00 00       	jmp    c0019d3a <ATA::access(unsigned long long, int, void*, bool)+0x36e>
c0019cb3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0019cb8:	74 33                	je     c0019ced <ATA::access(unsigned long long, int, void*, bool)+0x321>
c0019cba:	31 ed                	xor    ebp,ebp
c0019cbc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0019cc0:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0019cc4:	50                   	push   eax
c0019cc5:	50                   	push   eax
c0019cc6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019ccd:	50                   	push   eax
c0019cce:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cd4:	e8 d1 ed ff ff       	call   c0018aaa <IDE::getBase(unsigned char)>
c0019cd9:	89 c2                	mov    edx,eax
c0019cdb:	89 f8                	mov    eax,edi
c0019cdd:	66 ef                	out    dx,ax
c0019cdf:	45                   	inc    ebp
c0019ce0:	83 c4 10             	add    esp,0x10
c0019ce3:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0019ce9:	75 d1                	jne    c0019cbc <ATA::access(unsigned long long, int, void*, bool)+0x2f0>
c0019ceb:	eb 23                	jmp    c0019d10 <ATA::access(unsigned long long, int, void*, bool)+0x344>
c0019ced:	0f b6 d2             	movzx  edx,dl
c0019cf0:	51                   	push   ecx
c0019cf1:	51                   	push   ecx
c0019cf2:	52                   	push   edx
c0019cf3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019cf9:	e8 ac ed ff ff       	call   c0018aaa <IDE::getBase(unsigned char)>
c0019cfe:	b9 00 01 00 00       	mov    ecx,0x100
c0019d03:	89 c2                	mov    edx,eax
c0019d05:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0019d09:	fc                   	cld    
c0019d0a:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0019d0d:	83 c4 10             	add    esp,0x10
c0019d10:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0019d18:	4e                   	dec    esi
c0019d19:	e9 4a ff ff ff       	jmp    c0019c68 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0019d1e:	31 ff                	xor    edi,edi
c0019d20:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0019d25:	74 16                	je     c0019d3d <ATA::access(unsigned long long, int, void*, bool)+0x371>
c0019d27:	50                   	push   eax
c0019d28:	50                   	push   eax
c0019d29:	31 c0                	xor    eax,eax
c0019d2b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0019d30:	0f 94 c0             	sete   al
c0019d33:	50                   	push   eax
c0019d34:	53                   	push   ebx
c0019d35:	e8 fc fb ff ff       	call   c0019936 <ATA::flush(bool)>
c0019d3a:	83 c4 10             	add    esp,0x10
c0019d3d:	83 c4 2c             	add    esp,0x2c
c0019d40:	89 f8                	mov    eax,edi
c0019d42:	5b                   	pop    ebx
c0019d43:	5e                   	pop    esi
c0019d44:	5f                   	pop    edi
c0019d45:	5d                   	pop    ebp
c0019d46:	c3                   	ret    
c0019d47:	90                   	nop

c0019d48 <ATA::read(unsigned long long, int, void*)>:
c0019d48:	57                   	push   edi
c0019d49:	b8 04 00 00 00       	mov    eax,0x4
c0019d4e:	56                   	push   esi
c0019d4f:	53                   	push   ebx
c0019d50:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019d54:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019d58:	8d 7a ff             	lea    edi,[edx-0x1]
c0019d5b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019d5f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019d63:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019d69:	77 25                	ja     c0019d90 <ATA::read(unsigned long long, int, void*)+0x48>
c0019d6b:	b8 06 00 00 00       	mov    eax,0x6
c0019d70:	85 f6                	test   esi,esi
c0019d72:	74 1c                	je     c0019d90 <ATA::read(unsigned long long, int, void*)+0x48>
c0019d74:	50                   	push   eax
c0019d75:	50                   	push   eax
c0019d76:	6a 00                	push   0x0
c0019d78:	56                   	push   esi
c0019d79:	52                   	push   edx
c0019d7a:	53                   	push   ebx
c0019d7b:	51                   	push   ecx
c0019d7c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019d80:	e8 47 fc ff ff       	call   c00199cc <ATA::access(unsigned long long, int, void*, bool)>
c0019d85:	83 c4 20             	add    esp,0x20
c0019d88:	85 c0                	test   eax,eax
c0019d8a:	0f 95 c0             	setne  al
c0019d8d:	0f b6 c0             	movzx  eax,al
c0019d90:	5b                   	pop    ebx
c0019d91:	5e                   	pop    esi
c0019d92:	5f                   	pop    edi
c0019d93:	c3                   	ret    

c0019d94 <ATA::write(unsigned long long, int, void*)>:
c0019d94:	57                   	push   edi
c0019d95:	b8 04 00 00 00       	mov    eax,0x4
c0019d9a:	56                   	push   esi
c0019d9b:	53                   	push   ebx
c0019d9c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019da0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0019da4:	8d 7a ff             	lea    edi,[edx-0x1]
c0019da7:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019dab:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0019daf:	81 ff fe 00 00 00    	cmp    edi,0xfe
c0019db5:	77 25                	ja     c0019ddc <ATA::write(unsigned long long, int, void*)+0x48>
c0019db7:	b8 06 00 00 00       	mov    eax,0x6
c0019dbc:	85 f6                	test   esi,esi
c0019dbe:	74 1c                	je     c0019ddc <ATA::write(unsigned long long, int, void*)+0x48>
c0019dc0:	50                   	push   eax
c0019dc1:	50                   	push   eax
c0019dc2:	6a 01                	push   0x1
c0019dc4:	56                   	push   esi
c0019dc5:	52                   	push   edx
c0019dc6:	53                   	push   ebx
c0019dc7:	51                   	push   ecx
c0019dc8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019dcc:	e8 fb fb ff ff       	call   c00199cc <ATA::access(unsigned long long, int, void*, bool)>
c0019dd1:	83 c4 20             	add    esp,0x20
c0019dd4:	85 c0                	test   eax,eax
c0019dd6:	0f 95 c0             	setne  al
c0019dd9:	0f b6 c0             	movzx  eax,al
c0019ddc:	5b                   	pop    ebx
c0019ddd:	5e                   	pop    esi
c0019dde:	5f                   	pop    edi
c0019ddf:	c3                   	ret    

c0019de0 <ATA::detectCHS()>:
c0019de0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0019de4:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0019dea:	c1 e0 06             	shl    eax,0x6
c0019ded:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0019df3:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0019dfd:	c7 44 24 04 5c ed 01 c0 	mov    DWORD PTR [esp+0x4],0xc001ed5c
c0019e05:	e9 6d 64 ff ff       	jmp    c0010277 <Krnl::panic(char const*)>

c0019e0a <ATA::open(int, int, void*)>:
c0019e0a:	53                   	push   ebx
c0019e0b:	83 ec 08             	sub    esp,0x8
c0019e0e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e12:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0019e16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019e1a:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0019e20:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0019e26:	c1 e0 06             	shl    eax,0x6
c0019e29:	01 d0                	add    eax,edx
c0019e2b:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0019e32:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0019e38:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0019e3f:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0019e49:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0019e4f:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0019e56:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0019e5d:	75 0c                	jne    c0019e6b <ATA::open(int, int, void*)+0x61>
c0019e5f:	83 ec 0c             	sub    esp,0xc
c0019e62:	53                   	push   ebx
c0019e63:	e8 78 ff ff ff       	call   c0019de0 <ATA::detectCHS()>
c0019e68:	83 c4 10             	add    esp,0x10
c0019e6b:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0019e71:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0019e77:	c1 e0 06             	shl    eax,0x6
c0019e7a:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0019e81:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0019e8b:	d1 e8                	shr    eax,1
c0019e8d:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0019e93:	6a 04                	push   0x4
c0019e95:	6a 0c                	push   0xc
c0019e97:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019e9e:	50                   	push   eax
c0019e9f:	52                   	push   edx
c0019ea0:	e8 17 ec ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ea5:	90                   	nop
c0019ea6:	90                   	nop
c0019ea7:	6a 00                	push   0x0
c0019ea9:	6a 0c                	push   0xc
c0019eab:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0019eb2:	50                   	push   eax
c0019eb3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019eb9:	e8 fe eb ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c0019ebe:	83 c4 14             	add    esp,0x14
c0019ec1:	53                   	push   ebx
c0019ec2:	e8 d7 20 ff ff       	call   c000bf9e <PhysicalDisk::startCache()>
c0019ec7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019eca:	e8 47 31 ff ff       	call   c000d016 <createPartitionsForDisk(PhysicalDisk*)>
c0019ecf:	31 c0                	xor    eax,eax
c0019ed1:	83 c4 18             	add    esp,0x18
c0019ed4:	5b                   	pop    ebx
c0019ed5:	c3                   	ret    

c0019ed6 <ATAPI::write(unsigned long long, int, void*)>:
c0019ed6:	b8 03 00 00 00       	mov    eax,0x3
c0019edb:	c3                   	ret    

c0019edc <ATAPI::close(int, int, void*)>:
c0019edc:	83 ec 0c             	sub    esp,0xc
c0019edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019ee3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0019ee9:	85 c0                	test   eax,eax
c0019eeb:	74 0c                	je     c0019ef9 <ATAPI::close(int, int, void*)+0x1d>
c0019eed:	83 ec 0c             	sub    esp,0xc
c0019ef0:	8b 10                	mov    edx,DWORD PTR [eax]
c0019ef2:	50                   	push   eax
c0019ef3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0019ef6:	83 c4 10             	add    esp,0x10
c0019ef9:	31 c0                	xor    eax,eax
c0019efb:	83 c4 0c             	add    esp,0xc
c0019efe:	c3                   	ret    
c0019eff:	90                   	nop

c0019f00 <ATAPI::ATAPI()>:
c0019f00:	83 ec 0c             	sub    esp,0xc
c0019f03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f07:	83 ec 04             	sub    esp,0x4
c0019f0a:	68 00 08 00 00       	push   0x800
c0019f0f:	68 c9 ee 01 c0       	push   0xc001eec9
c0019f14:	50                   	push   eax
c0019f15:	e8 1c 20 ff ff       	call   c000bf36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c0019f1a:	83 c4 10             	add    esp,0x10
c0019f1d:	ba c0 ed 01 c0       	mov    edx,0xc001edc0
c0019f22:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f26:	89 10                	mov    DWORD PTR [eax],edx
c0019f28:	90                   	nop
c0019f29:	83 c4 0c             	add    esp,0xc
c0019f2c:	c3                   	ret    
c0019f2d:	90                   	nop

c0019f2e <ATAPI::readyForCommand()>:
c0019f2e:	56                   	push   esi
c0019f2f:	53                   	push   ebx
c0019f30:	53                   	push   ebx
c0019f31:	31 db                	xor    ebx,ebx
c0019f33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019f37:	51                   	push   ecx
c0019f38:	6a 0c                	push   0xc
c0019f3a:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0019f41:	50                   	push   eax
c0019f42:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0019f48:	e8 2f ec ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c0019f4d:	83 c4 10             	add    esp,0x10
c0019f50:	a8 88                	test   al,0x88
c0019f52:	74 25                	je     c0019f79 <ATAPI::readyForCommand()+0x4b>
c0019f54:	43                   	inc    ebx
c0019f55:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c0019f5b:	7e da                	jle    c0019f37 <ATAPI::readyForCommand()+0x9>
c0019f5d:	83 ec 0c             	sub    esp,0xc
c0019f60:	68 5e 01 00 00       	push   0x15e
c0019f65:	e8 62 99 ff ff       	call   c00138cc <milliTenthSleep(unsigned int)>
c0019f6a:	83 c4 10             	add    esp,0x10
c0019f6d:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c0019f73:	75 c2                	jne    c0019f37 <ATAPI::readyForCommand()+0x9>
c0019f75:	31 c0                	xor    eax,eax
c0019f77:	eb 02                	jmp    c0019f7b <ATAPI::readyForCommand()+0x4d>
c0019f79:	b0 01                	mov    al,0x1
c0019f7b:	5a                   	pop    edx
c0019f7c:	5b                   	pop    ebx
c0019f7d:	5e                   	pop    esi
c0019f7e:	c3                   	ret    
c0019f7f:	90                   	nop

c0019f80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0019f80:	55                   	push   ebp
c0019f81:	57                   	push   edi
c0019f82:	56                   	push   esi
c0019f83:	53                   	push   ebx
c0019f84:	83 ec 20             	sub    esp,0x20
c0019f87:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0019f8b:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0019f8f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0019f93:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0019f97:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0019f9b:	6a 01                	push   0x1
c0019f9d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019fa4:	50                   	push   eax
c0019fa5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019fab:	e8 1a ed ff ff       	call   c0018cca <IDE::enableIRQs(unsigned char, bool)>
c0019fb0:	5e                   	pop    esi
c0019fb1:	58                   	pop    eax
c0019fb2:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019fb9:	50                   	push   eax
c0019fba:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019fc0:	e8 d1 ea ff ff       	call   c0018a96 <IDE::prepareInterrupt(unsigned char)>
c0019fc5:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019fc8:	e8 61 ff ff ff       	call   c0019f2e <ATAPI::readyForCommand()>
c0019fcd:	83 c4 10             	add    esp,0x10
c0019fd0:	84 c0                	test   al,al
c0019fd2:	75 0a                	jne    c0019fde <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0019fd4:	bb 01 00 00 00       	mov    ebx,0x1
c0019fd9:	e9 57 02 00 00       	jmp    c001a235 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0019fde:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0019fe4:	c1 e0 04             	shl    eax,0x4
c0019fe7:	0f b6 c0             	movzx  eax,al
c0019fea:	50                   	push   eax
c0019feb:	6a 06                	push   0x6
c0019fed:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0019ff4:	50                   	push   eax
c0019ff5:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0019ffb:	e8 bc ea ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a000:	6a 00                	push   0x0
c001a002:	6a 01                	push   0x1
c001a004:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a00b:	50                   	push   eax
c001a00c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a012:	e8 a5 ea ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a017:	83 c4 20             	add    esp,0x20
c001a01a:	0f b6 c3             	movzx  eax,bl
c001a01d:	0f b6 df             	movzx  ebx,bh
c001a020:	50                   	push   eax
c001a021:	6a 04                	push   0x4
c001a023:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a02a:	50                   	push   eax
c001a02b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a031:	e8 86 ea ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a036:	53                   	push   ebx
c001a037:	6a 05                	push   0x5
c001a039:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a040:	50                   	push   eax
c001a041:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a047:	e8 70 ea ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a04c:	83 c4 20             	add    esp,0x20
c001a04f:	68 a0 00 00 00       	push   0xa0
c001a054:	6a 07                	push   0x7
c001a056:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a05d:	50                   	push   eax
c001a05e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a064:	e8 53 ea ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a069:	83 c4 0c             	add    esp,0xc
c001a06c:	6a 01                	push   0x1
c001a06e:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a075:	50                   	push   eax
c001a076:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a07c:	e8 d9 f4 ff ff       	call   c001955a <IDE::polling(unsigned char, unsigned int)>
c001a081:	83 c4 10             	add    esp,0x10
c001a084:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c001a08a:	84 c0                	test   al,al
c001a08c:	74 23                	je     c001a0b1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001a08e:	0f b6 d8             	movzx  ebx,al
c001a091:	0f b6 d2             	movzx  edx,dl
c001a094:	53                   	push   ebx
c001a095:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c001a09c:	50                   	push   eax
c001a09d:	52                   	push   edx
c001a09e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0a4:	e8 01 f4 ff ff       	call   c00194aa <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001a0a9:	83 c4 10             	add    esp,0x10
c001a0ac:	e9 84 01 00 00       	jmp    c001a235 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a0b1:	0f b6 d2             	movzx  edx,dl
c001a0b4:	53                   	push   ebx
c001a0b5:	53                   	push   ebx
c001a0b6:	52                   	push   edx
c001a0b7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a0bd:	e8 e8 e9 ff ff       	call   c0018aaa <IDE::getBase(unsigned char)>
c001a0c2:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001a0c6:	b9 06 00 00 00       	mov    ecx,0x6
c001a0cb:	89 c2                	mov    edx,eax
c001a0cd:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001a0d0:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001a0d4:	83 c4 10             	add    esp,0x10
c001a0d7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a0dd:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a0e4:	85 db                	test   ebx,ebx
c001a0e6:	0f 84 ec 00 00 00    	je     c001a1d8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c001a0ec:	51                   	push   ecx
c001a0ed:	51                   	push   ecx
c001a0ee:	52                   	push   edx
c001a0ef:	50                   	push   eax
c001a0f0:	e8 35 eb ff ff       	call   c0018c2a <IDE::waitInterrupt(unsigned char)>
c001a0f5:	83 c4 10             	add    esp,0x10
c001a0f8:	84 c0                	test   al,al
c001a0fa:	0f 84 d4 fe ff ff    	je     c0019fd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a100:	56                   	push   esi
c001a101:	56                   	push   esi
c001a102:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a109:	50                   	push   eax
c001a10a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a110:	e8 81 e9 ff ff       	call   c0018a96 <IDE::prepareInterrupt(unsigned char)>
c001a115:	83 c4 0c             	add    esp,0xc
c001a118:	6a 04                	push   0x4
c001a11a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a121:	50                   	push   eax
c001a122:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a128:	e8 4f ea ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c001a12d:	83 c4 0c             	add    esp,0xc
c001a130:	89 c6                	mov    esi,eax
c001a132:	6a 05                	push   0x5
c001a134:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a13b:	50                   	push   eax
c001a13c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a142:	e8 35 ea ff ff       	call   c0018b7c <IDE::read(unsigned char, unsigned char)>
c001a147:	89 f1                	mov    ecx,esi
c001a149:	0f b6 c0             	movzx  eax,al
c001a14c:	0f b6 f1             	movzx  esi,cl
c001a14f:	c1 e0 08             	shl    eax,0x8
c001a152:	09 c6                	or     esi,eax
c001a154:	d1 fe                	sar    esi,1
c001a156:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001a15a:	83 c4 10             	add    esp,0x10
c001a15d:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001a162:	74 41                	je     c001a1a5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c001a164:	31 c9                	xor    ecx,ecx
c001a166:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a16c:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a173:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001a177:	75 0a                	jne    c001a183 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c001a179:	01 c9                	add    ecx,ecx
c001a17b:	01 cd                	add    ebp,ecx
c001a17d:	4b                   	dec    ebx
c001a17e:	e9 54 ff ff ff       	jmp    c001a0d7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c001a183:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001a188:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001a18c:	51                   	push   ecx
c001a18d:	51                   	push   ecx
c001a18e:	52                   	push   edx
c001a18f:	50                   	push   eax
c001a190:	e8 15 e9 ff ff       	call   c0018aaa <IDE::getBase(unsigned char)>
c001a195:	89 c2                	mov    edx,eax
c001a197:	89 f0                	mov    eax,esi
c001a199:	66 ef                	out    dx,ax
c001a19b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a19f:	83 c4 10             	add    esp,0x10
c001a1a2:	41                   	inc    ecx
c001a1a3:	eb c1                	jmp    c001a166 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c001a1a5:	31 f6                	xor    esi,esi
c001a1a7:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001a1ad:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001a1b4:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001a1b8:	75 06                	jne    c001a1c0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c001a1ba:	01 f6                	add    esi,esi
c001a1bc:	01 f5                	add    ebp,esi
c001a1be:	eb bd                	jmp    c001a17d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c001a1c0:	51                   	push   ecx
c001a1c1:	51                   	push   ecx
c001a1c2:	52                   	push   edx
c001a1c3:	50                   	push   eax
c001a1c4:	e8 e1 e8 ff ff       	call   c0018aaa <IDE::getBase(unsigned char)>
c001a1c9:	89 c2                	mov    edx,eax
c001a1cb:	66 ed                	in     ax,dx
c001a1cd:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001a1d2:	83 c4 10             	add    esp,0x10
c001a1d5:	46                   	inc    esi
c001a1d6:	eb cf                	jmp    c001a1a7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c001a1d8:	51                   	push   ecx
c001a1d9:	51                   	push   ecx
c001a1da:	52                   	push   edx
c001a1db:	50                   	push   eax
c001a1dc:	e8 49 ea ff ff       	call   c0018c2a <IDE::waitInterrupt(unsigned char)>
c001a1e1:	83 c4 10             	add    esp,0x10
c001a1e4:	84 c0                	test   al,al
c001a1e6:	0f 84 e8 fd ff ff    	je     c0019fd4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001a1ec:	bb a0 86 01 00       	mov    ebx,0x186a0
c001a1f1:	52                   	push   edx
c001a1f2:	52                   	push   edx
c001a1f3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a1fa:	50                   	push   eax
c001a1fb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a201:	e8 90 e8 ff ff       	call   c0018a96 <IDE::prepareInterrupt(unsigned char)>
c001a206:	83 c4 10             	add    esp,0x10
c001a209:	50                   	push   eax
c001a20a:	50                   	push   eax
c001a20b:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001a212:	50                   	push   eax
c001a213:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001a219:	e8 8c e8 ff ff       	call   c0018aaa <IDE::getBase(unsigned char)>
c001a21e:	8d 50 07             	lea    edx,[eax+0x7]
c001a221:	ec                   	in     al,dx
c001a222:	83 c4 10             	add    esp,0x10
c001a225:	a8 88                	test   al,0x88
c001a227:	74 0a                	je     c001a233 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c001a229:	4b                   	dec    ebx
c001a22a:	75 dd                	jne    c001a209 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c001a22c:	bb 02 00 00 00       	mov    ebx,0x2
c001a231:	eb 02                	jmp    c001a235 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c001a233:	31 db                	xor    ebx,ebx
c001a235:	83 c4 1c             	add    esp,0x1c
c001a238:	89 d8                	mov    eax,ebx
c001a23a:	5b                   	pop    ebx
c001a23b:	5e                   	pop    esi
c001a23c:	5f                   	pop    edi
c001a23d:	5d                   	pop    ebp
c001a23e:	c3                   	ret    
c001a23f:	90                   	nop

c001a240 <ATAPI::diskRemoved()>:
c001a240:	53                   	push   ebx
c001a241:	83 ec 14             	sub    esp,0x14
c001a244:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001a248:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a24f:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001a255:	e8 3c 2b ff ff       	call   c000cd96 <LogicalDisk::unmount()>
c001a25a:	58                   	pop    eax
c001a25b:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001a261:	e8 76 34 ff ff       	call   c000d6dc <VCache::writeWriteBuffer()>
c001a266:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001a26c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a270:	83 c4 18             	add    esp,0x18
c001a273:	5b                   	pop    ebx
c001a274:	e9 53 34 ff ff       	jmp    c000d6cc <VCache::invalidateReadBuffer()>
c001a279:	90                   	nop

c001a27a <ATAPI::eject()>:
c001a27a:	57                   	push   edi
c001a27b:	b9 03 00 00 00       	mov    ecx,0x3
c001a280:	53                   	push   ebx
c001a281:	83 ec 14             	sub    esp,0x14
c001a284:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a288:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a28c:	fc                   	cld    
c001a28d:	31 c0                	xor    eax,eax
c001a28f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a291:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001a296:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001a29b:	50                   	push   eax
c001a29c:	50                   	push   eax
c001a29d:	6a 00                	push   0x0
c001a29f:	6a 00                	push   0x0
c001a2a1:	6a 00                	push   0x0
c001a2a3:	6a 02                	push   0x2
c001a2a5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a2a9:	50                   	push   eax
c001a2aa:	53                   	push   ebx
c001a2ab:	e8 d0 fc ff ff       	call   c0019f80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a2b0:	83 c4 14             	add    esp,0x14
c001a2b3:	53                   	push   ebx
c001a2b4:	e8 87 ff ff ff       	call   c001a240 <ATAPI::diskRemoved()>
c001a2b9:	83 c4 24             	add    esp,0x24
c001a2bc:	31 c0                	xor    eax,eax
c001a2be:	5b                   	pop    ebx
c001a2bf:	5f                   	pop    edi
c001a2c0:	c3                   	ret    
c001a2c1:	90                   	nop

c001a2c2 <ATAPI::diskInserted()>:
c001a2c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a2c6:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001a2cd:	c3                   	ret    

c001a2ce <ATAPI::detectMedia()>:
c001a2ce:	56                   	push   esi
c001a2cf:	53                   	push   ebx
c001a2d0:	83 ec 28             	sub    esp,0x28
c001a2d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001a2d7:	6a 0c                	push   0xc
c001a2d9:	6a 00                	push   0x0
c001a2db:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001a2df:	56                   	push   esi
c001a2e0:	e8 0b 62 fe ff       	call   c00004f0 <memset>
c001a2e5:	58                   	pop    eax
c001a2e6:	5a                   	pop    edx
c001a2e7:	6a 00                	push   0x0
c001a2e9:	6a 00                	push   0x0
c001a2eb:	6a 00                	push   0x0
c001a2ed:	6a 00                	push   0x0
c001a2ef:	56                   	push   esi
c001a2f0:	53                   	push   ebx
c001a2f1:	e8 8a fc ff ff       	call   c0019f80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a2f6:	83 c4 1c             	add    esp,0x1c
c001a2f9:	6a 0c                	push   0xc
c001a2fb:	6a 00                	push   0x0
c001a2fd:	56                   	push   esi
c001a2fe:	e8 ed 61 fe ff       	call   c00004f0 <memset>
c001a303:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001a308:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001a30d:	59                   	pop    ecx
c001a30e:	58                   	pop    eax
c001a30f:	6a 01                	push   0x1
c001a311:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001a315:	50                   	push   eax
c001a316:	6a 00                	push   0x0
c001a318:	6a 12                	push   0x12
c001a31a:	56                   	push   esi
c001a31b:	53                   	push   ebx
c001a31c:	e8 5f fc ff ff       	call   c0019f80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a321:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001a325:	83 c4 20             	add    esp,0x20
c001a328:	83 e0 7f             	and    eax,0x7f
c001a32b:	3c 70                	cmp    al,0x70
c001a32d:	74 15                	je     c001a344 <ATAPI::detectMedia()+0x76>
c001a32f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a336:	75 0c                	jne    c001a344 <ATAPI::detectMedia()+0x76>
c001a338:	83 ec 0c             	sub    esp,0xc
c001a33b:	53                   	push   ebx
c001a33c:	e8 81 ff ff ff       	call   c001a2c2 <ATAPI::diskInserted()>
c001a341:	83 c4 10             	add    esp,0x10
c001a344:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001a348:	83 e0 0f             	and    eax,0xf
c001a34b:	3c 02                	cmp    al,0x2
c001a34d:	75 1b                	jne    c001a36a <ATAPI::detectMedia()+0x9c>
c001a34f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001a354:	75 2d                	jne    c001a383 <ATAPI::detectMedia()+0xb5>
c001a356:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a35d:	74 24                	je     c001a383 <ATAPI::detectMedia()+0xb5>
c001a35f:	83 ec 0c             	sub    esp,0xc
c001a362:	53                   	push   ebx
c001a363:	e8 d8 fe ff ff       	call   c001a240 <ATAPI::diskRemoved()>
c001a368:	eb 16                	jmp    c001a380 <ATAPI::detectMedia()+0xb2>
c001a36a:	84 c0                	test   al,al
c001a36c:	75 15                	jne    c001a383 <ATAPI::detectMedia()+0xb5>
c001a36e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a375:	75 0c                	jne    c001a383 <ATAPI::detectMedia()+0xb5>
c001a377:	83 ec 0c             	sub    esp,0xc
c001a37a:	53                   	push   ebx
c001a37b:	e8 42 ff ff ff       	call   c001a2c2 <ATAPI::diskInserted()>
c001a380:	83 c4 10             	add    esp,0x10
c001a383:	83 c4 24             	add    esp,0x24
c001a386:	5b                   	pop    ebx
c001a387:	5e                   	pop    esi
c001a388:	c3                   	ret    
c001a389:	90                   	nop

c001a38a <ATAPI::open(int, int, void*)>:
c001a38a:	56                   	push   esi
c001a38b:	53                   	push   ebx
c001a38c:	50                   	push   eax
c001a38d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a391:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a395:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a399:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a39f:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001a3a5:	c1 e0 06             	shl    eax,0x6
c001a3a8:	01 d0                	add    eax,edx
c001a3aa:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001a3b1:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001a3b7:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001a3be:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a3c8:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a3ce:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a3d5:	6a 04                	push   0x4
c001a3d7:	6a 0c                	push   0xc
c001a3d9:	51                   	push   ecx
c001a3da:	52                   	push   edx
c001a3db:	e8 dc e6 ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3e0:	90                   	nop
c001a3e1:	90                   	nop
c001a3e2:	6a 00                	push   0x0
c001a3e4:	6a 0c                	push   0xc
c001a3e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001a3ed:	50                   	push   eax
c001a3ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001a3f4:	e8 c3 e6 ff ff       	call   c0018abc <IDE::write(unsigned char, unsigned char, unsigned char)>
c001a3f9:	83 c4 14             	add    esp,0x14
c001a3fc:	68 74 01 00 00       	push   0x174
c001a401:	e8 93 d5 fe ff       	call   c0007999 <malloc>
c001a406:	83 c4 0c             	add    esp,0xc
c001a409:	89 c6                	mov    esi,eax
c001a40b:	6a 00                	push   0x0
c001a40d:	68 ff ff ff 7f       	push   0x7fffffff
c001a412:	6a 00                	push   0x0
c001a414:	6a 00                	push   0x0
c001a416:	53                   	push   ebx
c001a417:	68 bb ee 01 c0       	push   0xc001eebb
c001a41c:	50                   	push   eax
c001a41d:	e8 c0 27 ff ff       	call   c000cbe2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a422:	83 c4 14             	add    esp,0x14
c001a425:	56                   	push   esi
c001a426:	e8 6d 28 ff ff       	call   c000cc98 <LogicalDisk::assignDriveLetter()>
c001a42b:	5a                   	pop    edx
c001a42c:	0f be c0             	movsx  eax,al
c001a42f:	59                   	pop    ecx
c001a430:	50                   	push   eax
c001a431:	68 a8 ed 01 c0       	push   0xc001eda8
c001a436:	e8 ed 02 ff ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001a43b:	58                   	pop    eax
c001a43c:	5a                   	pop    edx
c001a43d:	56                   	push   esi
c001a43e:	53                   	push   ebx
c001a43f:	e8 24 17 ff ff       	call   c000bb68 <Device::addChild(Device*)>
c001a444:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001a44a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a44d:	e8 4c 1b ff ff       	call   c000bf9e <PhysicalDisk::startCache()>
c001a452:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001a459:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a45c:	e8 6d fe ff ff       	call   c001a2ce <ATAPI::detectMedia()>
c001a461:	83 c4 14             	add    esp,0x14
c001a464:	31 c0                	xor    eax,eax
c001a466:	5b                   	pop    ebx
c001a467:	5e                   	pop    esi
c001a468:	c3                   	ret    
c001a469:	90                   	nop

c001a46a <ATAPI::read(unsigned long long, int, void*)>:
c001a46a:	55                   	push   ebp
c001a46b:	57                   	push   edi
c001a46c:	56                   	push   esi
c001a46d:	53                   	push   ebx
c001a46e:	83 ec 1c             	sub    esp,0x1c
c001a471:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a475:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001a479:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001a47d:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a484:	74 3c                	je     c001a4c2 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001a486:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001a48a:	b9 03 00 00 00       	mov    ecx,0x3
c001a48f:	fc                   	cld    
c001a490:	31 c0                	xor    eax,eax
c001a492:	0f ce                	bswap  esi
c001a494:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001a496:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001a49b:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001a49f:	89 e8                	mov    eax,ebp
c001a4a1:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001a4a5:	50                   	push   eax
c001a4a6:	50                   	push   eax
c001a4a7:	55                   	push   ebp
c001a4a8:	c1 e5 0b             	shl    ebp,0xb
c001a4ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001a4af:	6a 00                	push   0x0
c001a4b1:	55                   	push   ebp
c001a4b2:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a4b6:	50                   	push   eax
c001a4b7:	53                   	push   ebx
c001a4b8:	e8 c3 fa ff ff       	call   c0019f80 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001a4bd:	83 c4 20             	add    esp,0x20
c001a4c0:	eb 1a                	jmp    c001a4dc <ATAPI::read(unsigned long long, int, void*)+0x72>
c001a4c2:	83 ec 0c             	sub    esp,0xc
c001a4c5:	53                   	push   ebx
c001a4c6:	e8 03 fe ff ff       	call   c001a2ce <ATAPI::detectMedia()>
c001a4cb:	83 c4 10             	add    esp,0x10
c001a4ce:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001a4d5:	75 af                	jne    c001a486 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001a4d7:	b8 02 00 00 00       	mov    eax,0x2
c001a4dc:	83 c4 1c             	add    esp,0x1c
c001a4df:	5b                   	pop    ebx
c001a4e0:	5e                   	pop    esi
c001a4e1:	5f                   	pop    edi
c001a4e2:	5d                   	pop    ebp
c001a4e3:	c3                   	ret    

c001a4e4 <SATA::close(int, int, void*)>:
c001a4e4:	83 ec 0c             	sub    esp,0xc
c001a4e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a4eb:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a4f1:	85 c0                	test   eax,eax
c001a4f3:	74 0c                	je     c001a501 <SATA::close(int, int, void*)+0x1d>
c001a4f5:	83 ec 0c             	sub    esp,0xc
c001a4f8:	8b 10                	mov    edx,DWORD PTR [eax]
c001a4fa:	50                   	push   eax
c001a4fb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a4fe:	83 c4 10             	add    esp,0x10
c001a501:	31 c0                	xor    eax,eax
c001a503:	83 c4 0c             	add    esp,0xc
c001a506:	c3                   	ret    
c001a507:	90                   	nop

c001a508 <SATA::powerSaving(PowerSavingLevel)>:
c001a508:	c3                   	ret    
c001a509:	90                   	nop

c001a50a <SATA::open(int, int, void*)>:
c001a50a:	56                   	push   esi
c001a50b:	53                   	push   ebx
c001a50c:	50                   	push   eax
c001a50d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a511:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a515:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001a51f:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a525:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a52f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a533:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a53d:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a543:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001a54a:	e8 17 d8 fe ff       	call   c0007d66 <Phys::allocatePage()>
c001a54f:	89 c6                	mov    esi,eax
c001a551:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001a557:	81 c6 00 10 00 00    	add    esi,0x1000
c001a55d:	e8 04 d8 fe ff       	call   c0007d66 <Phys::allocatePage()>
c001a562:	39 c6                	cmp    esi,eax
c001a564:	74 10                	je     c001a576 <SATA::open(int, int, void*)+0x6c>
c001a566:	83 ec 0c             	sub    esp,0xc
c001a569:	68 f0 ed 01 c0       	push   0xc001edf0
c001a56e:	e8 04 5d ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001a573:	83 c4 10             	add    esp,0x10
c001a576:	83 ec 0c             	sub    esp,0xc
c001a579:	6a 02                	push   0x2
c001a57b:	e8 55 ef fe ff       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c001a580:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001a586:	6a 03                	push   0x3
c001a588:	50                   	push   eax
c001a589:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001a58f:	ff 35 70 04 02 c0    	push   DWORD PTR ds:0xc0020470
c001a595:	e8 d0 f5 fe ff       	call   c0009b6a <VAS::mapPage(unsigned long, unsigned long, int)>
c001a59a:	83 c4 14             	add    esp,0x14
c001a59d:	53                   	push   ebx
c001a59e:	e8 fb 19 ff ff       	call   c000bf9e <PhysicalDisk::startCache()>
c001a5a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a5a6:	e8 6b 2a ff ff       	call   c000d016 <createPartitionsForDisk(PhysicalDisk*)>
c001a5ab:	83 c4 14             	add    esp,0x14
c001a5ae:	31 c0                	xor    eax,eax
c001a5b0:	5b                   	pop    ebx
c001a5b1:	5e                   	pop    esi
c001a5b2:	c3                   	ret    
c001a5b3:	90                   	nop

c001a5b4 <SATA::SATA()>:
c001a5b4:	83 ec 0c             	sub    esp,0xc
c001a5b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5bb:	83 ec 04             	sub    esp,0x4
c001a5be:	68 00 02 00 00       	push   0x200
c001a5c3:	68 04 ee 01 c0       	push   0xc001ee04
c001a5c8:	50                   	push   eax
c001a5c9:	e8 68 19 ff ff       	call   c000bf36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001a5ce:	83 c4 10             	add    esp,0x10
c001a5d1:	ba 74 ee 01 c0       	mov    edx,0xc001ee74
c001a5d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5da:	89 10                	mov    DWORD PTR [eax],edx
c001a5dc:	90                   	nop
c001a5dd:	83 c4 0c             	add    esp,0xc
c001a5e0:	c3                   	ret    
c001a5e1:	90                   	nop

c001a5e2 <SATA::access(unsigned long long, int, void*, bool)>:
c001a5e2:	55                   	push   ebp
c001a5e3:	57                   	push   edi
c001a5e4:	56                   	push   esi
c001a5e5:	53                   	push   ebx
c001a5e6:	83 ec 2c             	sub    esp,0x2c
c001a5e9:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001a5ed:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001a5f1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a5f5:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a5f9:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001a5fd:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001a602:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a606:	7e 10                	jle    c001a618 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001a608:	83 ec 0c             	sub    esp,0xc
c001a60b:	68 14 ee 01 c0       	push   0xc001ee14
c001a610:	e8 62 5c ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001a615:	83 c4 10             	add    esp,0x10
c001a618:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001a61e:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001a624:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001a62a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a62e:	89 d0                	mov    eax,edx
c001a630:	c1 e0 07             	shl    eax,0x7
c001a633:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a637:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001a641:	51                   	push   ecx
c001a642:	8d 42 02             	lea    eax,[edx+0x2]
c001a645:	51                   	push   ecx
c001a646:	c1 e0 07             	shl    eax,0x7
c001a649:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a64d:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001a651:	50                   	push   eax
c001a652:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001a658:	e8 e7 ef ff ff       	call   c0019644 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001a65d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a661:	83 c4 10             	add    esp,0x10
c001a664:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001a669:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a66d:	0f 84 4f 01 00 00    	je     c001a7c2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a673:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a677:	c1 e0 09             	shl    eax,0x9
c001a67a:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a67f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a683:	74 0e                	je     c001a693 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001a685:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001a68b:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001a68f:	89 c1                	mov    ecx,eax
c001a691:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a693:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a697:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a69d:	8d 42 02             	lea    eax,[edx+0x2]
c001a6a0:	c1 e0 07             	shl    eax,0x7
c001a6a3:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001a6a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001a6a9:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001a6af:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001a6b5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001a6b9:	c1 e1 05             	shl    ecx,0x5
c001a6bc:	01 c8                	add    eax,ecx
c001a6be:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c001a6c2:	83 e1 01             	and    ecx,0x1
c001a6c5:	89 ce                	mov    esi,ecx
c001a6c7:	8a 08                	mov    cl,BYTE PTR [eax]
c001a6c9:	c1 e6 06             	shl    esi,0x6
c001a6cc:	83 e1 bf             	and    ecx,0xffffffbf
c001a6cf:	09 f1                	or     ecx,esi
c001a6d1:	88 08                	mov    BYTE PTR [eax],cl
c001a6d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001a6d5:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001a6db:	81 c9 05 00 01 00    	or     ecx,0x10005
c001a6e1:	89 08                	mov    DWORD PTR [eax],ecx
c001a6e3:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001a6e9:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001a6ef:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001a6f5:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001a6f8:	50                   	push   eax
c001a6f9:	68 90 00 00 00       	push   0x90
c001a6fe:	6a 00                	push   0x0
c001a700:	56                   	push   esi
c001a701:	e8 ea 5d fe ff       	call   c00004f0 <memset>
c001a706:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001a70c:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001a710:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001a716:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001a71a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a71e:	83 c4 10             	add    esp,0x10
c001a721:	48                   	dec    eax
c001a722:	25 ff ff 3f 00       	and    eax,0x3fffff
c001a727:	89 c1                	mov    ecx,eax
c001a729:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001a72f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001a734:	09 c8                	or     eax,ecx
c001a736:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001a73c:	66 8b 06             	mov    ax,WORD PTR [esi]
c001a73f:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c001a746:	66 25 00 7f          	and    ax,0x7f00
c001a74a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a74e:	66 0d 27 80          	or     ax,0x8027
c001a752:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c001a757:	66 89 06             	mov    WORD PTR [esi],ax
c001a75a:	19 c0                	sbb    eax,eax
c001a75c:	83 e0 f0             	and    eax,0xfffffff0
c001a75f:	83 c0 35             	add    eax,0x35
c001a762:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001a765:	89 e8                	mov    eax,ebp
c001a767:	c1 e8 10             	shr    eax,0x10
c001a76a:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001a76d:	89 e8                	mov    eax,ebp
c001a76f:	c1 e8 18             	shr    eax,0x18
c001a772:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001a775:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001a779:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001a77c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a780:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001a783:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001a787:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001a78b:	89 d6                	mov    esi,edx
c001a78d:	31 c0                	xor    eax,eax
c001a78f:	c1 e6 07             	shl    esi,0x7
c001a792:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001a796:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001a79c:	80 e1 88             	and    cl,0x88
c001a79f:	74 0a                	je     c001a7ab <SATA::access(unsigned long long, int, void*, bool)+0x1c9>
c001a7a1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a7a6:	74 0a                	je     c001a7b2 <SATA::access(unsigned long long, int, void*, bool)+0x1d0>
c001a7a8:	40                   	inc    eax
c001a7a9:	eb eb                	jmp    c001a796 <SATA::access(unsigned long long, int, void*, bool)+0x1b4>
c001a7ab:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001a7b0:	75 17                	jne    c001a7c9 <SATA::access(unsigned long long, int, void*, bool)+0x1e7>
c001a7b2:	83 ec 0c             	sub    esp,0xc
c001a7b5:	68 4d ee 01 c0       	push   0xc001ee4d
c001a7ba:	e8 69 ff fe ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001a7bf:	83 c4 10             	add    esp,0x10
c001a7c2:	b8 01 00 00 00       	mov    eax,0x1
c001a7c7:	eb 5d                	jmp    c001a826 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a7c9:	b8 01 00 00 00       	mov    eax,0x1
c001a7ce:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001a7d2:	c1 e2 07             	shl    edx,0x7
c001a7d5:	d3 e0                	shl    eax,cl
c001a7d7:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001a7db:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001a7e1:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001a7e7:	85 c8                	test   eax,ecx
c001a7e9:	74 16                	je     c001a801 <SATA::access(unsigned long long, int, void*, bool)+0x21f>
c001a7eb:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001a7f1:	0f ba e1 1e          	bt     ecx,0x1e
c001a7f5:	73 ea                	jae    c001a7e1 <SATA::access(unsigned long long, int, void*, bool)+0x1ff>
c001a7f7:	83 ec 0c             	sub    esp,0xc
c001a7fa:	68 5b ee 01 c0       	push   0xc001ee5b
c001a7ff:	eb b9                	jmp    c001a7ba <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001a801:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001a807:	0f ba e0 1e          	bt     eax,0x1e
c001a80b:	72 b5                	jb     c001a7c2 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001a80d:	31 c0                	xor    eax,eax
c001a80f:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001a814:	75 10                	jne    c001a826 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c001a816:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001a81c:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001a820:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a824:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a826:	83 c4 2c             	add    esp,0x2c
c001a829:	5b                   	pop    ebx
c001a82a:	5e                   	pop    esi
c001a82b:	5f                   	pop    edi
c001a82c:	5d                   	pop    ebp
c001a82d:	c3                   	ret    

c001a82e <SATA::read(unsigned long long, int, void*)>:
c001a82e:	57                   	push   edi
c001a82f:	b8 04 00 00 00       	mov    eax,0x4
c001a834:	56                   	push   esi
c001a835:	53                   	push   ebx
c001a836:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a83a:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a83e:	8d 7a ff             	lea    edi,[edx-0x1]
c001a841:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a845:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001a849:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001a84f:	77 25                	ja     c001a876 <SATA::read(unsigned long long, int, void*)+0x48>
c001a851:	b8 06 00 00 00       	mov    eax,0x6
c001a856:	85 f6                	test   esi,esi
c001a858:	74 1c                	je     c001a876 <SATA::read(unsigned long long, int, void*)+0x48>
c001a85a:	50                   	push   eax
c001a85b:	50                   	push   eax
c001a85c:	6a 00                	push   0x0
c001a85e:	56                   	push   esi
c001a85f:	52                   	push   edx
c001a860:	53                   	push   ebx
c001a861:	51                   	push   ecx
c001a862:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a866:	e8 77 fd ff ff       	call   c001a5e2 <SATA::access(unsigned long long, int, void*, bool)>
c001a86b:	83 c4 20             	add    esp,0x20
c001a86e:	85 c0                	test   eax,eax
c001a870:	0f 95 c0             	setne  al
c001a873:	0f b6 c0             	movzx  eax,al
c001a876:	5b                   	pop    ebx
c001a877:	5e                   	pop    esi
c001a878:	5f                   	pop    edi
c001a879:	c3                   	ret    

c001a87a <SATA::write(unsigned long long, int, void*)>:
c001a87a:	55                   	push   ebp
c001a87b:	b8 04 00 00 00       	mov    eax,0x4
c001a880:	57                   	push   edi
c001a881:	56                   	push   esi
c001a882:	53                   	push   ebx
c001a883:	83 ec 0c             	sub    esp,0xc
c001a886:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001a88a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a88e:	8d 73 ff             	lea    esi,[ebx-0x1]
c001a891:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001a895:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001a899:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a89f:	77 3d                	ja     c001a8de <SATA::write(unsigned long long, int, void*)+0x64>
c001a8a1:	b8 06 00 00 00       	mov    eax,0x6
c001a8a6:	85 ed                	test   ebp,ebp
c001a8a8:	74 34                	je     c001a8de <SATA::write(unsigned long long, int, void*)+0x64>
c001a8aa:	c1 e3 09             	shl    ebx,0x9
c001a8ad:	01 eb                	add    ebx,ebp
c001a8af:	89 d6                	mov    esi,edx
c001a8b1:	89 cf                	mov    edi,ecx
c001a8b3:	83 c6 01             	add    esi,0x1
c001a8b6:	83 d7 00             	adc    edi,0x0
c001a8b9:	50                   	push   eax
c001a8ba:	50                   	push   eax
c001a8bb:	6a 01                	push   0x1
c001a8bd:	55                   	push   ebp
c001a8be:	81 c5 00 02 00 00    	add    ebp,0x200
c001a8c4:	6a 01                	push   0x1
c001a8c6:	51                   	push   ecx
c001a8c7:	52                   	push   edx
c001a8c8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a8cc:	e8 11 fd ff ff       	call   c001a5e2 <SATA::access(unsigned long long, int, void*, bool)>
c001a8d1:	83 c4 20             	add    esp,0x20
c001a8d4:	89 f2                	mov    edx,esi
c001a8d6:	89 f9                	mov    ecx,edi
c001a8d8:	39 dd                	cmp    ebp,ebx
c001a8da:	75 d3                	jne    c001a8af <SATA::write(unsigned long long, int, void*)+0x35>
c001a8dc:	31 c0                	xor    eax,eax
c001a8de:	83 c4 0c             	add    esp,0xc
c001a8e1:	5b                   	pop    ebx
c001a8e2:	5e                   	pop    esi
c001a8e3:	5f                   	pop    edi
c001a8e4:	5d                   	pop    ebp
c001a8e5:	c3                   	ret    

c001a8e6 <SATAPI::write(unsigned long long, int, void*)>:
c001a8e6:	b8 03 00 00 00       	mov    eax,0x3
c001a8eb:	c3                   	ret    

c001a8ec <SATAPI::close(int, int, void*)>:
c001a8ec:	83 ec 0c             	sub    esp,0xc
c001a8ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8f3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001a8f9:	85 c0                	test   eax,eax
c001a8fb:	74 0c                	je     c001a909 <SATAPI::close(int, int, void*)+0x1d>
c001a8fd:	83 ec 0c             	sub    esp,0xc
c001a900:	8b 10                	mov    edx,DWORD PTR [eax]
c001a902:	50                   	push   eax
c001a903:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001a906:	83 c4 10             	add    esp,0x10
c001a909:	31 c0                	xor    eax,eax
c001a90b:	83 c4 0c             	add    esp,0xc
c001a90e:	c3                   	ret    
c001a90f:	90                   	nop

c001a910 <SATAPI::open(int, int, void*)>:
c001a910:	56                   	push   esi
c001a911:	53                   	push   ebx
c001a912:	51                   	push   ecx
c001a913:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001a917:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a91b:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001a925:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001a92b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001a935:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a939:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001a943:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001a949:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001a950:	e8 11 d4 fe ff       	call   c0007d66 <Phys::allocatePage()>
c001a955:	89 c6                	mov    esi,eax
c001a957:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001a95d:	81 c6 00 10 00 00    	add    esi,0x1000
c001a963:	e8 fe d3 fe ff       	call   c0007d66 <Phys::allocatePage()>
c001a968:	39 c6                	cmp    esi,eax
c001a96a:	74 10                	je     c001a97c <SATAPI::open(int, int, void*)+0x6c>
c001a96c:	83 ec 0c             	sub    esp,0xc
c001a96f:	68 a4 ee 01 c0       	push   0xc001eea4
c001a974:	e8 fe 58 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001a979:	83 c4 10             	add    esp,0x10
c001a97c:	83 ec 0c             	sub    esp,0xc
c001a97f:	6a 02                	push   0x2
c001a981:	e8 4f eb fe ff       	call   c00094d5 <Virt::allocateKernelVirtualPages(int)>
c001a986:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001a98c:	6a 03                	push   0x3
c001a98e:	50                   	push   eax
c001a98f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001a995:	ff 35 70 04 02 c0    	push   DWORD PTR ds:0xc0020470
c001a99b:	e8 ca f1 fe ff       	call   c0009b6a <VAS::mapPage(unsigned long, unsigned long, int)>
c001a9a0:	83 c4 14             	add    esp,0x14
c001a9a3:	68 74 01 00 00       	push   0x174
c001a9a8:	e8 ec cf fe ff       	call   c0007999 <malloc>
c001a9ad:	83 c4 0c             	add    esp,0xc
c001a9b0:	89 c6                	mov    esi,eax
c001a9b2:	6a 00                	push   0x0
c001a9b4:	68 ff ff ff 7f       	push   0x7fffffff
c001a9b9:	6a 00                	push   0x0
c001a9bb:	6a 00                	push   0x0
c001a9bd:	53                   	push   ebx
c001a9be:	68 ba ee 01 c0       	push   0xc001eeba
c001a9c3:	50                   	push   eax
c001a9c4:	e8 19 22 ff ff       	call   c000cbe2 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001a9c9:	83 c4 14             	add    esp,0x14
c001a9cc:	56                   	push   esi
c001a9cd:	e8 c6 22 ff ff       	call   c000cc98 <LogicalDisk::assignDriveLetter()>
c001a9d2:	5a                   	pop    edx
c001a9d3:	0f be c0             	movsx  eax,al
c001a9d6:	59                   	pop    ecx
c001a9d7:	50                   	push   eax
c001a9d8:	68 a8 ed 01 c0       	push   0xc001eda8
c001a9dd:	e8 46 fd fe ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001a9e2:	58                   	pop    eax
c001a9e3:	5a                   	pop    edx
c001a9e4:	56                   	push   esi
c001a9e5:	53                   	push   ebx
c001a9e6:	e8 7d 11 ff ff       	call   c000bb68 <Device::addChild(Device*)>
c001a9eb:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001a9f1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a9f4:	e8 a5 15 ff ff       	call   c000bf9e <PhysicalDisk::startCache()>
c001a9f9:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001aa00:	31 c0                	xor    eax,eax
c001aa02:	83 c4 14             	add    esp,0x14
c001aa05:	5b                   	pop    ebx
c001aa06:	5e                   	pop    esi
c001aa07:	c3                   	ret    

c001aa08 <SATAPI::SATAPI()>:
c001aa08:	83 ec 0c             	sub    esp,0xc
c001aa0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa0f:	83 ec 04             	sub    esp,0x4
c001aa12:	68 00 08 00 00       	push   0x800
c001aa17:	68 c8 ee 01 c0       	push   0xc001eec8
c001aa1c:	50                   	push   eax
c001aa1d:	e8 14 15 ff ff       	call   c000bf36 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001aa22:	83 c4 10             	add    esp,0x10
c001aa25:	ba 04 f0 01 c0       	mov    edx,0xc001f004
c001aa2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aa2e:	89 10                	mov    DWORD PTR [eax],edx
c001aa30:	90                   	nop
c001aa31:	83 c4 0c             	add    esp,0xc
c001aa34:	c3                   	ret    
c001aa35:	90                   	nop

c001aa36 <SATAPI::diskRemoved()>:
c001aa36:	c3                   	ret    
c001aa37:	90                   	nop

c001aa38 <SATAPI::diskInserted()>:
c001aa38:	83 ec 18             	sub    esp,0x18
c001aa3b:	68 d4 ee 01 c0       	push   0xc001eed4
c001aa40:	e8 e3 fc fe ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001aa45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001aa49:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001aa50:	83 c4 1c             	add    esp,0x1c
c001aa53:	c3                   	ret    

c001aa54 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001aa54:	55                   	push   ebp
c001aa55:	57                   	push   edi
c001aa56:	56                   	push   esi
c001aa57:	53                   	push   ebx
c001aa58:	83 ec 38             	sub    esp,0x38
c001aa5b:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001aa5f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c001aa63:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001aa67:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa6b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001aa6f:	68 ec ee 01 c0       	push   0xc001eeec
c001aa74:	e8 af fc fe ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001aa79:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001aa7f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001aa85:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001aa89:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001aa8f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001aa93:	c1 e0 07             	shl    eax,0x7
c001aa96:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001aa9a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001aa9e:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001aaa8:	58                   	pop    eax
c001aaa9:	5a                   	pop    edx
c001aaaa:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aaae:	8d 58 02             	lea    ebx,[eax+0x2]
c001aab1:	c1 e3 07             	shl    ebx,0x7
c001aab4:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001aab8:	53                   	push   ebx
c001aab9:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001aabf:	e8 80 eb ff ff       	call   c0019644 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001aac4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001aac8:	83 c4 10             	add    esp,0x10
c001aacb:	b8 01 00 00 00       	mov    eax,0x1
c001aad0:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001aad5:	0f 84 4c 02 00 00    	je     c001ad27 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001aadb:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001aae1:	8b 03                	mov    eax,DWORD PTR [ebx]
c001aae3:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001aae9:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001aaef:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001aaf3:	c1 e1 05             	shl    ecx,0x5
c001aaf6:	01 c8                	add    eax,ecx
c001aaf8:	8b 08                	mov    ecx,DWORD PTR [eax]
c001aafa:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001ab00:	81 c9 25 00 01 00    	or     ecx,0x10025
c001ab06:	89 08                	mov    DWORD PTR [eax],ecx
c001ab08:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001ab0e:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001ab14:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001ab1a:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001ab1d:	8d 7b 40             	lea    edi,[ebx+0x40]
c001ab20:	50                   	push   eax
c001ab21:	68 90 00 00 00       	push   0x90
c001ab26:	6a 00                	push   0x0
c001ab28:	53                   	push   ebx
c001ab29:	e8 c2 59 fe ff       	call   c00004f0 <memset>
c001ab2e:	b9 0c 00 00 00       	mov    ecx,0xc
c001ab33:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001ab37:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ab39:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001ab3f:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001ab43:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001ab49:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001ab4d:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001ab51:	48                   	dec    eax
c001ab52:	25 ff ff 3f 00       	and    eax,0x3fffff
c001ab57:	89 c1                	mov    ecx,eax
c001ab59:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001ab5f:	25 00 00 c0 ff       	and    eax,0xffc00000
c001ab64:	09 c8                	or     eax,ecx
c001ab66:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001ab6c:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001ab6f:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c001ab76:	66 25 00 7f          	and    ax,0x7f00
c001ab7a:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001ab7e:	66 0d 27 80          	or     ax,0x8027
c001ab82:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001ab86:	66 89 03             	mov    WORD PTR [ebx],ax
c001ab89:	89 d0                	mov    eax,edx
c001ab8b:	c1 ea 18             	shr    edx,0x18
c001ab8e:	c1 e8 10             	shr    eax,0x10
c001ab91:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001ab94:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001ab97:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001ab9b:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001ab9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001aba2:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001aba5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001aba9:	83 c4 10             	add    esp,0x10
c001abac:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001abb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001abb4:	31 c0                	xor    eax,eax
c001abb6:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001abbc:	80 e1 88             	and    cl,0x88
c001abbf:	74 0a                	je     c001abcb <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x177>
c001abc1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001abc6:	74 0a                	je     c001abd2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17e>
c001abc8:	40                   	inc    eax
c001abc9:	eb eb                	jmp    c001abb6 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x162>
c001abcb:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001abd0:	75 16                	jne    c001abe8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x194>
c001abd2:	83 ec 0c             	sub    esp,0xc
c001abd5:	68 06 ef 01 c0       	push   0xc001ef06
c001abda:	e8 49 fb fe ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001abdf:	5f                   	pop    edi
c001abe0:	5d                   	pop    ebp
c001abe1:	68 1b ef 01 c0       	push   0xc001ef1b
c001abe6:	eb 4f                	jmp    c001ac37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001abe8:	be 01 00 00 00       	mov    esi,0x1
c001abed:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001abf1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001abf5:	d3 e6                	shl    esi,cl
c001abf7:	c1 e7 07             	shl    edi,0x7
c001abfa:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001ac00:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001ac05:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001ac09:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001ac0f:	85 c6                	test   esi,eax
c001ac11:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001ac17:	0f 84 cb 00 00 00    	je     c001ace8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x294>
c001ac1d:	0f ba e0 1e          	bt     eax,0x1e
c001ac21:	73 2c                	jae    c001ac4f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c001ac23:	83 ec 0c             	sub    esp,0xc
c001ac26:	68 2d ef 01 c0       	push   0xc001ef2d
c001ac2b:	e8 f8 fa fe ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001ac30:	5b                   	pop    ebx
c001ac31:	5e                   	pop    esi
c001ac32:	68 40 ef 01 c0       	push   0xc001ef40
c001ac37:	ff 35 d0 03 02 c0    	push   DWORD PTR ds:0xc00203d0
c001ac3d:	e8 c6 dd fe ff       	call   c0008a08 <VgaText::puts(char const*)>
c001ac42:	83 c4 10             	add    esp,0x10
c001ac45:	b8 01 00 00 00       	mov    eax,0x1
c001ac4a:	e9 d8 00 00 00       	jmp    c001ad27 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001ac4f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001ac55:	83 f8 0d             	cmp    eax,0xd
c001ac58:	77 0a                	ja     c001ac64 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x210>
c001ac5a:	83 ec 0c             	sub    esp,0xc
c001ac5d:	68 c8 00 00 00       	push   0xc8
c001ac62:	eb 28                	jmp    c001ac8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001ac64:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001ac6a:	83 f8 0d             	cmp    eax,0xd
c001ac6d:	77 0a                	ja     c001ac79 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x225>
c001ac6f:	83 ec 0c             	sub    esp,0xc
c001ac72:	68 58 02 00 00       	push   0x258
c001ac77:	eb 13                	jmp    c001ac8c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x238>
c001ac79:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001ac7f:	83 f8 06             	cmp    eax,0x6
c001ac82:	77 10                	ja     c001ac94 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x240>
c001ac84:	83 ec 0c             	sub    esp,0xc
c001ac87:	68 dc 05 00 00       	push   0x5dc
c001ac8c:	e8 3b 8c ff ff       	call   c00138cc <milliTenthSleep(unsigned int)>
c001ac91:	83 c4 10             	add    esp,0x10
c001ac94:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001ac98:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001ac9b:	75 06                	jne    c001aca3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x24f>
c001ac9d:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001aca1:	74 15                	je     c001acb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001aca3:	83 fb 06             	cmp    ebx,0x6
c001aca6:	77 10                	ja     c001acb8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001aca8:	83 ec 0c             	sub    esp,0xc
c001acab:	68 c4 09 00 00       	push   0x9c4
c001acb0:	e8 17 8c ff ff       	call   c00138cc <milliTenthSleep(unsigned int)>
c001acb5:	83 c4 10             	add    esp,0x10
c001acb8:	43                   	inc    ebx
c001acb9:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001acbf:	0f 85 44 ff ff ff    	jne    c001ac09 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b5>
c001acc5:	51                   	push   ecx
c001acc6:	51                   	push   ecx
c001acc7:	68 51 ef 01 c0       	push   0xc001ef51
c001accc:	ff 35 d0 03 02 c0    	push   DWORD PTR ds:0xc00203d0
c001acd2:	e8 31 dd fe ff       	call   c0008a08 <VgaText::puts(char const*)>
c001acd7:	c7 04 24 61 ef 01 c0 	mov    DWORD PTR [esp],0xc001ef61
c001acde:	e8 45 fa fe ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001ace3:	e9 5a ff ff ff       	jmp    c001ac42 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ee>
c001ace8:	0f ba e0 1e          	bt     eax,0x1e
c001acec:	73 19                	jae    c001ad07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b3>
c001acee:	83 ec 0c             	sub    esp,0xc
c001acf1:	68 75 ef 01 c0       	push   0xc001ef75
c001acf6:	e8 2d fa fe ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001acfb:	58                   	pop    eax
c001acfc:	5a                   	pop    edx
c001acfd:	68 8a ef 01 c0       	push   0xc001ef8a
c001ad02:	e9 30 ff ff ff       	jmp    c001ac37 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e3>
c001ad07:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001ad0c:	74 17                	je     c001ad25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001ad0e:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001ad13:	74 10                	je     c001ad25 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d1>
c001ad15:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001ad1b:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001ad1f:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001ad23:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad25:	31 c0                	xor    eax,eax
c001ad27:	83 c4 2c             	add    esp,0x2c
c001ad2a:	5b                   	pop    ebx
c001ad2b:	5e                   	pop    esi
c001ad2c:	5f                   	pop    edi
c001ad2d:	5d                   	pop    ebp
c001ad2e:	c3                   	ret    
c001ad2f:	90                   	nop

c001ad30 <SATAPI::eject()>:
c001ad30:	57                   	push   edi
c001ad31:	b9 03 00 00 00       	mov    ecx,0x3
c001ad36:	83 ec 18             	sub    esp,0x18
c001ad39:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001ad3d:	fc                   	cld    
c001ad3e:	31 c0                	xor    eax,eax
c001ad40:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ad42:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001ad47:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001ad4c:	50                   	push   eax
c001ad4d:	6a 00                	push   0x0
c001ad4f:	6a 00                	push   0x0
c001ad51:	6a 00                	push   0x0
c001ad53:	6a 00                	push   0x0
c001ad55:	6a 02                	push   0x2
c001ad57:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001ad5b:	50                   	push   eax
c001ad5c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad60:	e8 ef fc ff ff       	call   c001aa54 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ad65:	31 c0                	xor    eax,eax
c001ad67:	83 c4 38             	add    esp,0x38
c001ad6a:	5f                   	pop    edi
c001ad6b:	c3                   	ret    

c001ad6c <SATAPI::read(unsigned long long, int, void*)>:
c001ad6c:	57                   	push   edi
c001ad6d:	56                   	push   esi
c001ad6e:	53                   	push   ebx
c001ad6f:	83 ec 3c             	sub    esp,0x3c
c001ad72:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ad76:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001ad7a:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c001ad7e:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c001ad82:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad86:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c001ad8a:	68 9d ef 01 c0       	push   0xc001ef9d
c001ad8f:	e8 94 f9 fe ff       	call   c000a728 <Dbg::kprintf(char const*, ...)>
c001ad94:	83 c4 10             	add    esp,0x10
c001ad97:	83 fe 04             	cmp    esi,0x4
c001ad9a:	7e 10                	jle    c001adac <SATAPI::read(unsigned long long, int, void*)+0x40>
c001ad9c:	83 ec 0c             	sub    esp,0xc
c001ad9f:	68 ae ef 01 c0       	push   0xc001efae
c001ada4:	e8 ce 54 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001ada9:	83 c4 10             	add    esp,0x10
c001adac:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001adb2:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001adb8:	51                   	push   ecx
c001adb9:	50                   	push   eax
c001adba:	83 c0 02             	add    eax,0x2
c001adbd:	c1 e0 07             	shl    eax,0x7
c001adc0:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001adc6:	50                   	push   eax
c001adc7:	52                   	push   edx
c001adc8:	e8 3b e9 ff ff       	call   c0019708 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001adcd:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001add1:	b9 03 00 00 00       	mov    ecx,0x3
c001add6:	fc                   	cld    
c001add7:	31 c0                	xor    eax,eax
c001add9:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001addb:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001ade0:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001ade5:	83 c4 0c             	add    esp,0xc
c001ade8:	6a 00                	push   0x0
c001adea:	6a 00                	push   0x0
c001adec:	6a 00                	push   0x0
c001adee:	6a 00                	push   0x0
c001adf0:	6a 02                	push   0x2
c001adf2:	8d 44 24 30          	lea    eax,[esp+0x30]
c001adf6:	50                   	push   eax
c001adf7:	53                   	push   ebx
c001adf8:	e8 57 fc ff ff       	call   c001aa54 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001adfd:	83 c4 20             	add    esp,0x20
c001ae00:	85 c0                	test   eax,eax
c001ae02:	74 1f                	je     c001ae23 <SATAPI::read(unsigned long long, int, void*)+0xb7>
c001ae04:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ae08:	50                   	push   eax
c001ae09:	50                   	push   eax
c001ae0a:	68 d8 ef 01 c0       	push   0xc001efd8
c001ae0f:	ff 35 d0 03 02 c0    	push   DWORD PTR ds:0xc00203d0
c001ae15:	e8 ee db fe ff       	call   c0008a08 <VgaText::puts(char const*)>
c001ae1a:	58                   	pop    eax
c001ae1b:	5a                   	pop    edx
c001ae1c:	68 e0 ef 01 c0       	push   0xc001efe0
c001ae21:	eb 61                	jmp    c001ae84 <SATAPI::read(unsigned long long, int, void*)+0x118>
c001ae23:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001ae27:	b9 03 00 00 00       	mov    ecx,0x3
c001ae2c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001ae2e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae32:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001ae37:	0f c8                	bswap  eax
c001ae39:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001ae3d:	89 f0                	mov    eax,esi
c001ae3f:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001ae43:	57                   	push   edi
c001ae44:	56                   	push   esi
c001ae45:	c1 e6 0b             	shl    esi,0xb
c001ae48:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001ae4c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae50:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001ae54:	56                   	push   esi
c001ae55:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ae59:	50                   	push   eax
c001ae5a:	53                   	push   ebx
c001ae5b:	e8 f4 fb ff ff       	call   c001aa54 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001ae60:	83 c4 20             	add    esp,0x20
c001ae63:	85 c0                	test   eax,eax
c001ae65:	74 2f                	je     c001ae96 <SATAPI::read(unsigned long long, int, void*)+0x12a>
c001ae67:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001ae6b:	50                   	push   eax
c001ae6c:	50                   	push   eax
c001ae6d:	68 ea ef 01 c0       	push   0xc001efea
c001ae72:	ff 35 d0 03 02 c0    	push   DWORD PTR ds:0xc00203d0
c001ae78:	e8 8b db fe ff       	call   c0008a08 <VgaText::puts(char const*)>
c001ae7d:	5a                   	pop    edx
c001ae7e:	59                   	pop    ecx
c001ae7f:	68 f2 ef 01 c0       	push   0xc001eff2
c001ae84:	ff 35 d0 03 02 c0    	push   DWORD PTR ds:0xc00203d0
c001ae8a:	e8 79 db fe ff       	call   c0008a08 <VgaText::puts(char const*)>
c001ae8f:	83 c4 10             	add    esp,0x10
c001ae92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ae96:	83 c4 30             	add    esp,0x30
c001ae99:	5b                   	pop    ebx
c001ae9a:	5e                   	pop    esi
c001ae9b:	5f                   	pop    edi
c001ae9c:	c3                   	ret    
c001ae9d:	90                   	nop

c001ae9e <SATAPI::detectMedia()>:
c001ae9e:	c3                   	ret    
c001ae9f:	90                   	nop

c001aea0 <IOAPIC::close(int, int, void*)>:
c001aea0:	b8 00 00 00 00       	mov    eax,0x0
c001aea5:	c3                   	ret    

c001aea6 <apicGetBase()>:
c001aea6:	55                   	push   ebp
c001aea7:	89 e5                	mov    ebp,esp
c001aea9:	83 ec 18             	sub    esp,0x18
c001aeac:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c001aeb1:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001aeb7:	83 e0 08             	and    eax,0x8
c001aeba:	84 c0                	test   al,al
c001aebc:	75 07                	jne    c001aec5 <apicGetBase()+0x1f>
c001aebe:	b8 00 00 00 00       	mov    eax,0x0
c001aec3:	eb 21                	jmp    c001aee6 <apicGetBase()+0x40>
c001aec5:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c001aeca:	83 ec 08             	sub    esp,0x8
c001aecd:	6a 1b                	push   0x1b
c001aecf:	50                   	push   eax
c001aed0:	e8 01 c1 fe ff       	call   c0006fd6 <Computer::rdmsr(unsigned int)>
c001aed5:	83 c4 10             	add    esp,0x10
c001aed8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001aedb:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001aede:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001aee1:	25 00 00 ff ff       	and    eax,0xffff0000
c001aee6:	c9                   	leave  
c001aee7:	c3                   	ret    

c001aee8 <IOAPIC::IOAPIC()>:
c001aee8:	83 ec 0c             	sub    esp,0xc
c001aeeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001aeef:	83 ec 08             	sub    esp,0x8
c001aef2:	68 34 f0 01 c0       	push   0xc001f034
c001aef7:	50                   	push   eax
c001aef8:	e8 03 0e ff ff       	call   c000bd00 <Device::Device(char const*)>
c001aefd:	83 c4 10             	add    esp,0x10
c001af00:	ba 44 f0 01 c0       	mov    edx,0xc001f044
c001af05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af09:	89 10                	mov    DWORD PTR [eax],edx
c001af0b:	90                   	nop
c001af0c:	83 c4 0c             	add    esp,0xc
c001af0f:	c3                   	ret    

c001af10 <apicOpen()>:
c001af10:	55                   	push   ebp
c001af11:	89 e5                	mov    ebp,esp
c001af13:	53                   	push   ebx
c001af14:	83 ec 34             	sub    esp,0x34
c001af17:	a0 80 42 02 c0       	mov    al,ds:0xc0024280
c001af1c:	83 f0 01             	xor    eax,0x1
c001af1f:	84 c0                	test   al,al
c001af21:	0f 84 9d 00 00 00    	je     c001afc4 <apicOpen()+0xb4>
c001af27:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001af2b:	a0 40 2c 02 c0       	mov    al,ds:0xc0022c40
c001af30:	38 45 f7             	cmp    BYTE PTR [ebp-0x9],al
c001af33:	0f 83 84 00 00 00    	jae    c001afbd <apicOpen()+0xad>
c001af39:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001af40:	83 ec 0c             	sub    esp,0xc
c001af43:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001af46:	e8 4e ca fe ff       	call   c0007999 <malloc>
c001af4b:	83 c4 10             	add    esp,0x10
c001af4e:	89 c3                	mov    ebx,eax
c001af50:	83 ec 0c             	sub    esp,0xc
c001af53:	53                   	push   ebx
c001af54:	e8 8f ff ff ff       	call   c001aee8 <IOAPIC::IOAPIC()>
c001af59:	83 c4 10             	add    esp,0x10
c001af5c:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001af5f:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001af62:	25 ff 00 00 00       	and    eax,0xff
c001af67:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001af6a:	89 14 85 60 42 02 c0 	mov    DWORD PTR [eax*4-0x3ffdbda0],edx
c001af71:	a1 40 42 02 c0       	mov    eax,ds:0xc0024240
c001af76:	40                   	inc    eax
c001af77:	a3 40 42 02 c0       	mov    ds:0xc0024240,eax
c001af7c:	a1 84 03 02 c0       	mov    eax,ds:0xc0020384
c001af81:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001af87:	83 ec 08             	sub    esp,0x8
c001af8a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001af8d:	50                   	push   eax
c001af8e:	e8 d5 0b ff ff       	call   c000bb68 <Device::addChild(Device*)>
c001af93:	83 c4 10             	add    esp,0x10
c001af96:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001af99:	8b 00                	mov    eax,DWORD PTR [eax]
c001af9b:	83 c0 08             	add    eax,0x8
c001af9e:	8b 10                	mov    edx,DWORD PTR [eax]
c001afa0:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001afa3:	25 ff 00 00 00       	and    eax,0xff
c001afa8:	6a 00                	push   0x0
c001afaa:	6a 00                	push   0x0
c001afac:	50                   	push   eax
c001afad:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001afb0:	ff d2                	call   edx
c001afb2:	83 c4 10             	add    esp,0x10
c001afb5:	fe 45 f7             	inc    BYTE PTR [ebp-0x9]
c001afb8:	e9 6e ff ff ff       	jmp    c001af2b <apicOpen()+0x1b>
c001afbd:	c6 05 80 42 02 c0 01 	mov    BYTE PTR ds:0xc0024280,0x1
c001afc4:	e8 dd fe ff ff       	call   c001aea6 <apicGetBase()>
c001afc9:	05 f0 00 00 00       	add    eax,0xf0
c001afce:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001afd1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001afd4:	8b 00                	mov    eax,DWORD PTR [eax]
c001afd6:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001afd9:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001afe0:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001afe7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001afea:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001afed:	89 10                	mov    DWORD PTR [eax],edx
c001afef:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001aff6:	a1 90 2b 02 c0       	mov    eax,ds:0xc0022b90
c001affb:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001affe:	7d 70                	jge    c001b070 <apicOpen()+0x160>
c001b000:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b003:	8b 04 85 a0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd460]
c001b00a:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001b00d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b010:	8b 04 85 a0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd460]
c001b017:	c1 e8 08             	shr    eax,0x8
c001b01a:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001b01e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b021:	8b 04 85 a0 2b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdd460]
c001b028:	c1 e8 18             	shr    eax,0x18
c001b02b:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001b02e:	80 7d e3 ff          	cmp    BYTE PTR [ebp-0x1d],0xff
c001b032:	75 37                	jne    c001b06b <apicOpen()+0x15b>
c001b034:	e8 6d fe ff ff       	call   c001aea6 <apicGetBase()>
c001b039:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001b03d:	75 07                	jne    c001b046 <apicOpen()+0x136>
c001b03f:	ba 60 03 00 00       	mov    edx,0x360
c001b044:	eb 05                	jmp    c001b04b <apicOpen()+0x13b>
c001b046:	ba 50 03 00 00       	mov    edx,0x350
c001b04b:	01 d0                	add    eax,edx
c001b04d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b050:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b053:	8b 00                	mov    eax,DWORD PTR [eax]
c001b055:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001b058:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001b05f:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001b063:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b066:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001b069:	89 10                	mov    DWORD PTR [eax],edx
c001b06b:	ff 45 f0             	inc    DWORD PTR [ebp-0x10]
c001b06e:	eb 86                	jmp    c001aff6 <apicOpen()+0xe6>
c001b070:	90                   	nop
c001b071:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b074:	c9                   	leave  
c001b075:	c3                   	ret    

c001b076 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001b076:	55                   	push   ebp
c001b077:	89 e5                	mov    ebp,esp
c001b079:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b07c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001b082:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b085:	72 1d                	jb     c001b0a4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b08a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001b090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b093:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001b099:	01 d0                	add    eax,edx
c001b09b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001b09e:	73 04                	jae    c001b0a4 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001b0a0:	b0 01                	mov    al,0x1
c001b0a2:	eb 02                	jmp    c001b0a6 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001b0a4:	b0 00                	mov    al,0x0
c001b0a6:	5d                   	pop    ebp
c001b0a7:	c3                   	ret    

c001b0a8 <IOAPIC::read(int)>:
c001b0a8:	55                   	push   ebp
c001b0a9:	89 e5                	mov    ebp,esp
c001b0ab:	83 ec 10             	sub    esp,0x10
c001b0ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0b1:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b0b7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b0ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b0bd:	31 d2                	xor    edx,edx
c001b0bf:	88 c2                	mov    dl,al
c001b0c1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b0c4:	89 10                	mov    DWORD PTR [eax],edx
c001b0c6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b0c9:	83 c0 10             	add    eax,0x10
c001b0cc:	8b 00                	mov    eax,DWORD PTR [eax]
c001b0ce:	c9                   	leave  
c001b0cf:	c3                   	ret    

c001b0d0 <IOAPIC::open(int, int, void*)>:
c001b0d0:	55                   	push   ebp
c001b0d1:	89 e5                	mov    ebp,esp
c001b0d3:	57                   	push   edi
c001b0d4:	56                   	push   esi
c001b0d5:	53                   	push   ebx
c001b0d6:	83 ec 04             	sub    esp,0x4
c001b0d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0dc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001b0df:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b0e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0e8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b0ee:	8b 14 85 80 2c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd380]
c001b0f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b0f8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b0fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b101:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001b107:	8b 14 85 00 2d 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdd300]
c001b10e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b111:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001b117:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b11a:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001b120:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b123:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b129:	89 c6                	mov    esi,eax
c001b12b:	81 e6 ff 00 00 00    	and    esi,0xff
c001b131:	89 d0                	mov    eax,edx
c001b133:	ba 00 00 00 00       	mov    edx,0x0
c001b138:	89 c7                	mov    edi,eax
c001b13a:	83 e7 ff             	and    edi,0xffffffff
c001b13d:	89 f9                	mov    ecx,edi
c001b13f:	89 d0                	mov    eax,edx
c001b141:	25 ff 00 00 00       	and    eax,0xff
c001b146:	89 c3                	mov    ebx,eax
c001b148:	89 c8                	mov    eax,ecx
c001b14a:	89 da                	mov    edx,ebx
c001b14c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b14f:	8d 5e 08             	lea    ebx,[esi+0x8]
c001b152:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001b156:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001b15a:	83 e0 00             	and    eax,0x0
c001b15d:	09 d0                	or     eax,edx
c001b15f:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001b163:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b166:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001b16c:	8d 50 01             	lea    edx,[eax+0x1]
c001b16f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001b172:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c001b178:	31 d2                	xor    edx,edx
c001b17a:	88 c2                	mov    dl,al
c001b17c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b17f:	83 c2 08             	add    edx,0x8
c001b182:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001b186:	81 e1 ff 00 00 00    	and    ecx,0xff
c001b18c:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001b192:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001b196:	6a 01                	push   0x1
c001b198:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b19b:	e8 08 ff ff ff       	call   c001b0a8 <IOAPIC::read(int)>
c001b1a0:	83 c4 08             	add    esp,0x8
c001b1a3:	c1 f8 10             	sar    eax,0x10
c001b1a6:	25 ff 00 00 00       	and    eax,0xff
c001b1ab:	8d 50 01             	lea    edx,[eax+0x1]
c001b1ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1b1:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001b1b7:	b8 00 00 00 00       	mov    eax,0x0
c001b1bc:	8d 65 f4             	lea    esp,[ebp-0xc]
c001b1bf:	5b                   	pop    ebx
c001b1c0:	5e                   	pop    esi
c001b1c1:	5f                   	pop    edi
c001b1c2:	5d                   	pop    ebp
c001b1c3:	c3                   	ret    

c001b1c4 <IOAPIC::write(int, int)>:
c001b1c4:	55                   	push   ebp
c001b1c5:	89 e5                	mov    ebp,esp
c001b1c7:	83 ec 10             	sub    esp,0x10
c001b1ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001b1cd:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001b1d3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001b1d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b1d9:	31 d2                	xor    edx,edx
c001b1db:	88 c2                	mov    dl,al
c001b1dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b1e0:	89 10                	mov    DWORD PTR [eax],edx
c001b1e2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001b1e5:	8d 50 10             	lea    edx,[eax+0x10]
c001b1e8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b1eb:	89 02                	mov    DWORD PTR [edx],eax
c001b1ed:	90                   	nop
c001b1ee:	c9                   	leave  
c001b1ef:	c3                   	ret    

c001b1f0 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001b1f0:	55                   	push   ebp
c001b1f1:	89 e5                	mov    ebp,esp
c001b1f3:	53                   	push   ebx
c001b1f4:	83 ec 2c             	sub    esp,0x2c
c001b1f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001b1fa:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001b1fd:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001b200:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001b203:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001b206:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001b209:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001b20c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001b20f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001b212:	88 d8                	mov    al,bl
c001b214:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001b217:	88 c8                	mov    al,cl
c001b219:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001b21c:	88 d0                	mov    al,dl
c001b21e:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001b221:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b224:	25 ff 00 00 00       	and    eax,0xff
c001b229:	83 c0 08             	add    eax,0x8
c001b22c:	01 c0                	add    eax,eax
c001b22e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001b231:	8a 45 e4             	mov    al,BYTE PTR [ebp-0x1c]
c001b234:	25 ff 00 00 00       	and    eax,0xff
c001b239:	83 c0 08             	add    eax,0x8
c001b23c:	01 c0                	add    eax,eax
c001b23e:	40                   	inc    eax
c001b23f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001b242:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b245:	50                   	push   eax
c001b246:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b249:	e8 5a fe ff ff       	call   c001b0a8 <IOAPIC::read(int)>
c001b24e:	83 c4 08             	add    esp,0x8
c001b251:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001b254:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001b25b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001b25e:	c1 e0 18             	shl    eax,0x18
c001b261:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001b264:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001b267:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001b26a:	52                   	push   edx
c001b26b:	50                   	push   eax
c001b26c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b26f:	e8 50 ff ff ff       	call   c001b1c4 <IOAPIC::write(int, int)>
c001b274:	83 c4 0c             	add    esp,0xc
c001b277:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b27a:	50                   	push   eax
c001b27b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b27e:	e8 25 fe ff ff       	call   c001b0a8 <IOAPIC::read(int)>
c001b283:	83 c4 08             	add    esp,0x8
c001b286:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001b289:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001b290:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001b297:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001b29e:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c001b2a2:	74 09                	je     c001b2ad <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbd>
c001b2a4:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001b2ab:	eb 07                	jmp    c001b2b4 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc4>
c001b2ad:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001b2b4:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c001b2b8:	74 09                	je     c001b2c3 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd3>
c001b2ba:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001b2c1:	eb 07                	jmp    c001b2ca <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xda>
c001b2c3:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001b2ca:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001b2d1:	8a 45 e0             	mov    al,BYTE PTR [ebp-0x20]
c001b2d4:	25 ff 00 00 00       	and    eax,0xff
c001b2d9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001b2dc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001b2df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001b2e2:	52                   	push   edx
c001b2e3:	50                   	push   eax
c001b2e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001b2e7:	e8 d8 fe ff ff       	call   c001b1c4 <IOAPIC::write(int, int)>
c001b2ec:	83 c4 0c             	add    esp,0xc
c001b2ef:	90                   	nop
c001b2f0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001b2f3:	c9                   	leave  
c001b2f4:	c3                   	ret    
c001b2f5:	66 90                	xchg   ax,ax
c001b2f7:	90                   	nop

c001b2f8 <APICTimer::close(int, int, void*)>:
c001b2f8:	b8 00 00 00 00       	mov    eax,0x0
c001b2fd:	c3                   	ret    
c001b2fe:	66 90                	xchg   ax,ax

c001b300 <apicTimerHandler(regs*, void*)>:
c001b300:	83 ec 0c             	sub    esp,0xc
c001b303:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b307:	8b 08                	mov    ecx,DWORD PTR [eax]
c001b309:	b8 10 27 00 00       	mov    eax,0x2710
c001b30e:	ba 00 00 00 00       	mov    edx,0x0
c001b313:	f7 f1                	div    ecx
c001b315:	83 ec 0c             	sub    esp,0xc
c001b318:	50                   	push   eax
c001b319:	e8 de 20 ff ff       	call   c000d3fc <timerHandler(unsigned int)>
c001b31e:	83 c4 10             	add    esp,0x10
c001b321:	90                   	nop
c001b322:	83 c4 0c             	add    esp,0xc
c001b325:	c3                   	ret    
c001b326:	66 90                	xchg   ax,ax

c001b328 <APICTimer::open(int, int, void*)>:
c001b328:	83 ec 0c             	sub    esp,0xc
c001b32b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b32f:	8b 00                	mov    eax,DWORD PTR [eax]
c001b331:	83 c0 24             	add    eax,0x24
c001b334:	8b 00                	mov    eax,DWORD PTR [eax]
c001b336:	83 ec 08             	sub    esp,0x8
c001b339:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b341:	ff d0                	call   eax
c001b343:	83 c4 10             	add    esp,0x10
c001b346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b34a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b34e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001b354:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b358:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b35c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001b362:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b366:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001b36c:	83 ec 0c             	sub    esp,0xc
c001b36f:	51                   	push   ecx
c001b370:	6a 01                	push   0x1
c001b372:	68 00 b3 01 c0       	push   0xc001b300
c001b377:	52                   	push   edx
c001b378:	50                   	push   eax
c001b379:	e8 96 07 ff ff       	call   c000bb14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b37e:	83 c4 20             	add    esp,0x20
c001b381:	89 c2                	mov    edx,eax
c001b383:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b387:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b38d:	b8 00 00 00 00       	mov    eax,0x0
c001b392:	83 c4 0c             	add    esp,0xc
c001b395:	c3                   	ret    
c001b396:	66 90                	xchg   ax,ax

c001b398 <APICTimer::write(int)>:
c001b398:	83 ec 0c             	sub    esp,0xc
c001b39b:	83 ec 0c             	sub    esp,0xc
c001b39e:	68 68 f0 01 c0       	push   0xc001f068
c001b3a3:	e8 cf 4e ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001b3a8:	83 c4 10             	add    esp,0x10
c001b3ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001b3b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b3b9:	90                   	nop
c001b3ba:	83 c4 0c             	add    esp,0xc
c001b3bd:	c3                   	ret    
c001b3be:	66 90                	xchg   ax,ax

c001b3c0 <APICTimer::APICTimer()>:
c001b3c0:	83 ec 0c             	sub    esp,0xc
c001b3c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3c7:	83 ec 08             	sub    esp,0x8
c001b3ca:	68 78 f0 01 c0       	push   0xc001f078
c001b3cf:	50                   	push   eax
c001b3d0:	e8 5b 1f ff ff       	call   c000d330 <Timer::Timer(char const*)>
c001b3d5:	83 c4 10             	add    esp,0x10
c001b3d8:	ba 8c f0 01 c0       	mov    edx,0xc001f08c
c001b3dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3e1:	89 10                	mov    DWORD PTR [eax],edx
c001b3e3:	90                   	nop
c001b3e4:	83 c4 0c             	add    esp,0xc
c001b3e7:	c3                   	ret    

c001b3e8 <PIT::write(int)>:
c001b3e8:	83 ec 10             	sub    esp,0x10
c001b3eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b3ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001b3f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001b3f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b3fd:	a3 84 42 02 c0       	mov    ds:0xc0024284,eax
c001b402:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001b407:	99                   	cdq    
c001b408:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001b40c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b410:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001b417:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001b41c:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001b420:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001b425:	ee                   	out    dx,al
c001b426:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b42a:	25 ff 00 00 00       	and    eax,0xff
c001b42f:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001b436:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001b43a:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001b43e:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001b443:	ee                   	out    dx,al
c001b444:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b448:	c1 f8 08             	sar    eax,0x8
c001b44b:	25 ff 00 00 00       	and    eax,0xff
c001b450:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001b457:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001b45b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001b45f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001b464:	ee                   	out    dx,al
c001b465:	90                   	nop
c001b466:	83 c4 10             	add    esp,0x10
c001b469:	c3                   	ret    
c001b46a:	66 90                	xchg   ax,ax

c001b46c <pitHandler(regs*, void*)>:
c001b46c:	83 ec 0c             	sub    esp,0xc
c001b46f:	8b 0d 84 42 02 c0    	mov    ecx,DWORD PTR ds:0xc0024284
c001b475:	b8 10 27 00 00       	mov    eax,0x2710
c001b47a:	99                   	cdq    
c001b47b:	f7 f9                	idiv   ecx
c001b47d:	83 ec 0c             	sub    esp,0xc
c001b480:	50                   	push   eax
c001b481:	e8 76 1f ff ff       	call   c000d3fc <timerHandler(unsigned int)>
c001b486:	83 c4 10             	add    esp,0x10
c001b489:	90                   	nop
c001b48a:	83 c4 0c             	add    esp,0xc
c001b48d:	c3                   	ret    
c001b48e:	66 90                	xchg   ax,ax

c001b490 <PIT::open(int, int, void*)>:
c001b490:	83 ec 0c             	sub    esp,0xc
c001b493:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b497:	8b 00                	mov    eax,DWORD PTR [eax]
c001b499:	83 c0 24             	add    eax,0x24
c001b49c:	8b 00                	mov    eax,DWORD PTR [eax]
c001b49e:	83 ec 08             	sub    esp,0x8
c001b4a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4a9:	ff d0                	call   eax
c001b4ab:	83 c4 10             	add    esp,0x10
c001b4ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4b2:	83 ec 0c             	sub    esp,0xc
c001b4b5:	6a 00                	push   0x0
c001b4b7:	6a 01                	push   0x1
c001b4b9:	68 6c b4 01 c0       	push   0xc001b46c
c001b4be:	6a 00                	push   0x0
c001b4c0:	50                   	push   eax
c001b4c1:	e8 4e 06 ff ff       	call   c000bb14 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001b4c6:	83 c4 20             	add    esp,0x20
c001b4c9:	89 c2                	mov    edx,eax
c001b4cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4cf:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001b4d5:	b8 00 00 00 00       	mov    eax,0x0
c001b4da:	83 c4 0c             	add    esp,0xc
c001b4dd:	c3                   	ret    
c001b4de:	66 90                	xchg   ax,ax

c001b4e0 <PIT::close(int, int, void*)>:
c001b4e0:	83 ec 0c             	sub    esp,0xc
c001b4e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4e7:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001b4f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b4f5:	6a 01                	push   0x1
c001b4f7:	68 6c b4 01 c0       	push   0xc001b46c
c001b4fc:	6a 00                	push   0x0
c001b4fe:	50                   	push   eax
c001b4ff:	e8 46 06 ff ff       	call   c000bb4a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001b504:	83 c4 10             	add    esp,0x10
c001b507:	b8 00 00 00 00       	mov    eax,0x0
c001b50c:	83 c4 0c             	add    esp,0xc
c001b50f:	c3                   	ret    

c001b510 <PIT::PIT()>:
c001b510:	83 ec 0c             	sub    esp,0xc
c001b513:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b517:	83 ec 08             	sub    esp,0x8
c001b51a:	68 b4 f0 01 c0       	push   0xc001f0b4
c001b51f:	50                   	push   eax
c001b520:	e8 0b 1e ff ff       	call   c000d330 <Timer::Timer(char const*)>
c001b525:	83 c4 10             	add    esp,0x10
c001b528:	ba dc f0 01 c0       	mov    edx,0xc001f0dc
c001b52d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b531:	89 10                	mov    DWORD PTR [eax],edx
c001b533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b537:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b53d:	31 d2                	xor    edx,edx
c001b53f:	88 c2                	mov    dl,al
c001b541:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b545:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001b54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b550:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b556:	31 d2                	xor    edx,edx
c001b558:	88 c2                	mov    dl,al
c001b55a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b55e:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001b563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b567:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001b56d:	8d 50 01             	lea    edx,[eax+0x1]
c001b570:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001b574:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c001b57a:	31 d2                	xor    edx,edx
c001b57c:	88 c2                	mov    dl,al
c001b57e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b582:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001b586:	83 e1 3f             	and    ecx,0x3f
c001b589:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001b58d:	90                   	nop
c001b58e:	83 c4 0c             	add    esp,0xc
c001b591:	c3                   	ret    
c001b592:	66 90                	xchg   ax,ax
c001b594:	66 90                	xchg   ax,ax
c001b596:	66 90                	xchg   ax,ax
c001b598:	66 90                	xchg   ax,ax
c001b59a:	66 90                	xchg   ax,ax
c001b59c:	66 90                	xchg   ax,ax
c001b59e:	66 90                	xchg   ax,ax

c001b5a0 <avxDetect>:
c001b5a0:	b8 01 00 00 00       	mov    eax,0x1
c001b5a5:	0f a2                	cpuid  
c001b5a7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001b5ad:	74 15                	je     c001b5c4 <avxDetect.noAVX>
c001b5af:	b8 01 00 00 00       	mov    eax,0x1
c001b5b4:	0f a2                	cpuid  
c001b5b6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001b5bc:	74 06                	je     c001b5c4 <avxDetect.noAVX>
c001b5be:	b8 01 00 00 00       	mov    eax,0x1
c001b5c3:	c3                   	ret    

c001b5c4 <avxDetect.noAVX>:
c001b5c4:	b8 00 00 00 00       	mov    eax,0x0
c001b5c9:	c3                   	ret    

c001b5ca <avxSave>:
c001b5ca:	53                   	push   ebx
c001b5cb:	52                   	push   edx
c001b5cc:	31 c0                	xor    eax,eax
c001b5ce:	48                   	dec    eax
c001b5cf:	89 c2                	mov    edx,eax
c001b5d1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b5d5:	0f ae 23             	xsave  [ebx]
c001b5d8:	5a                   	pop    edx
c001b5d9:	5b                   	pop    ebx
c001b5da:	c3                   	ret    

c001b5db <avxLoad>:
c001b5db:	53                   	push   ebx
c001b5dc:	52                   	push   edx
c001b5dd:	31 c0                	xor    eax,eax
c001b5df:	48                   	dec    eax
c001b5e0:	89 c2                	mov    edx,eax
c001b5e2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b5e6:	0f ae 2b             	xrstor [ebx]
c001b5e9:	5a                   	pop    edx
c001b5ea:	5b                   	pop    ebx
c001b5eb:	c3                   	ret    

c001b5ec <avxInit>:
c001b5ec:	e8 57 02 00 00       	call   c001b848 <sseInit>
c001b5f1:	50                   	push   eax
c001b5f2:	51                   	push   ecx
c001b5f3:	0f 20 e0             	mov    eax,cr4
c001b5f6:	0d 00 00 04 00       	or     eax,0x40000
c001b5fb:	0f 22 e0             	mov    cr4,eax
c001b5fe:	31 c9                	xor    ecx,ecx
c001b600:	0f 01 d0             	xgetbv 
c001b603:	0d 07 00 00 00       	or     eax,0x7
c001b608:	0f 01 d1             	xsetbv 
c001b60b:	59                   	pop    ecx
c001b60c:	58                   	pop    eax
c001b60d:	c3                   	ret    

c001b60e <avxClose>:
c001b60e:	c3                   	ret    

c001b60f <wouldSheSayYes>:
c001b60f:	c3                   	ret    
c001b610:	49                   	dec    ecx
c001b611:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001b615:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001b619:	75 20                	jne    c001b63b <isr0+0xb>
c001b61b:	4e                   	dec    esi
c001b61c:	79 61                	jns    c001b67f <isr7+0x3>
c001b61e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001b623:	66 90                	xchg   ax,ax
c001b625:	66 90                	xchg   ax,ax
c001b627:	66 90                	xchg   ax,ax
c001b629:	66 90                	xchg   ax,ax
c001b62b:	66 90                	xchg   ax,ax
c001b62d:	66 90                	xchg   ax,ax
c001b62f:	90                   	nop

c001b630 <isr0>:
c001b630:	fa                   	cli    
c001b631:	68 00 00 00 00       	push   0x0
c001b636:	68 00 00 00 00       	push   0x0
c001b63b:	e9 44 01 00 00       	jmp    c001b784 <int_common_stub>

c001b640 <isr1>:
c001b640:	fa                   	cli    
c001b641:	6a 00                	push   0x0
c001b643:	6a 01                	push   0x1
c001b645:	e9 3a 01 00 00       	jmp    c001b784 <int_common_stub>

c001b64a <isr2>:
c001b64a:	fa                   	cli    
c001b64b:	6a 00                	push   0x0
c001b64d:	6a 02                	push   0x2
c001b64f:	e9 30 01 00 00       	jmp    c001b784 <int_common_stub>

c001b654 <isr3>:
c001b654:	fa                   	cli    
c001b655:	6a 00                	push   0x0
c001b657:	6a 03                	push   0x3
c001b659:	e9 26 01 00 00       	jmp    c001b784 <int_common_stub>

c001b65e <isr4>:
c001b65e:	fa                   	cli    
c001b65f:	6a 00                	push   0x0
c001b661:	6a 04                	push   0x4
c001b663:	e9 1c 01 00 00       	jmp    c001b784 <int_common_stub>

c001b668 <isr5>:
c001b668:	fa                   	cli    
c001b669:	6a 00                	push   0x0
c001b66b:	6a 05                	push   0x5
c001b66d:	e9 12 01 00 00       	jmp    c001b784 <int_common_stub>

c001b672 <isr6>:
c001b672:	fa                   	cli    
c001b673:	6a 00                	push   0x0
c001b675:	6a 06                	push   0x6
c001b677:	e9 08 01 00 00       	jmp    c001b784 <int_common_stub>

c001b67c <isr7>:
c001b67c:	fa                   	cli    
c001b67d:	6a 00                	push   0x0
c001b67f:	6a 07                	push   0x7
c001b681:	e9 fe 00 00 00       	jmp    c001b784 <int_common_stub>

c001b686 <isr8>:
c001b686:	fa                   	cli    
c001b687:	6a 08                	push   0x8
c001b689:	e9 f6 00 00 00       	jmp    c001b784 <int_common_stub>

c001b68e <isr9>:
c001b68e:	fa                   	cli    
c001b68f:	6a 00                	push   0x0
c001b691:	6a 09                	push   0x9
c001b693:	e9 ec 00 00 00       	jmp    c001b784 <int_common_stub>

c001b698 <isr10>:
c001b698:	fa                   	cli    
c001b699:	6a 0a                	push   0xa
c001b69b:	e9 e4 00 00 00       	jmp    c001b784 <int_common_stub>

c001b6a0 <isr11>:
c001b6a0:	fa                   	cli    
c001b6a1:	6a 0b                	push   0xb
c001b6a3:	e9 dc 00 00 00       	jmp    c001b784 <int_common_stub>

c001b6a8 <isr12>:
c001b6a8:	fa                   	cli    
c001b6a9:	6a 0c                	push   0xc
c001b6ab:	e9 d4 00 00 00       	jmp    c001b784 <int_common_stub>

c001b6b0 <isr13>:
c001b6b0:	fa                   	cli    
c001b6b1:	6a 0d                	push   0xd
c001b6b3:	e9 cc 00 00 00       	jmp    c001b784 <int_common_stub>

c001b6b8 <isr14>:
c001b6b8:	fa                   	cli    
c001b6b9:	6a 0e                	push   0xe
c001b6bb:	e9 c4 00 00 00       	jmp    c001b784 <int_common_stub>

c001b6c0 <isr15>:
c001b6c0:	fa                   	cli    
c001b6c1:	6a 00                	push   0x0
c001b6c3:	6a 0f                	push   0xf
c001b6c5:	e9 ba 00 00 00       	jmp    c001b784 <int_common_stub>

c001b6ca <isr16>:
c001b6ca:	fa                   	cli    
c001b6cb:	6a 00                	push   0x0
c001b6cd:	6a 10                	push   0x10
c001b6cf:	e9 b0 00 00 00       	jmp    c001b784 <int_common_stub>

c001b6d4 <isr17>:
c001b6d4:	fa                   	cli    
c001b6d5:	6a 00                	push   0x0
c001b6d7:	6a 11                	push   0x11
c001b6d9:	e9 a6 00 00 00       	jmp    c001b784 <int_common_stub>

c001b6de <isr18>:
c001b6de:	fa                   	cli    
c001b6df:	6a 00                	push   0x0
c001b6e1:	6a 12                	push   0x12
c001b6e3:	e9 9c 00 00 00       	jmp    c001b784 <int_common_stub>

c001b6e8 <irq3>:
c001b6e8:	fa                   	cli    
c001b6e9:	6a 00                	push   0x0
c001b6eb:	6a 23                	push   0x23
c001b6ed:	e9 92 00 00 00       	jmp    c001b784 <int_common_stub>

c001b6f2 <irq4>:
c001b6f2:	fa                   	cli    
c001b6f3:	6a 00                	push   0x0
c001b6f5:	6a 24                	push   0x24
c001b6f7:	e9 88 00 00 00       	jmp    c001b784 <int_common_stub>

c001b6fc <irq5>:
c001b6fc:	fa                   	cli    
c001b6fd:	6a 00                	push   0x0
c001b6ff:	6a 25                	push   0x25
c001b701:	e9 7e 00 00 00       	jmp    c001b784 <int_common_stub>

c001b706 <irq6>:
c001b706:	fa                   	cli    
c001b707:	6a 00                	push   0x0
c001b709:	6a 26                	push   0x26
c001b70b:	e9 74 00 00 00       	jmp    c001b784 <int_common_stub>

c001b710 <irq7>:
c001b710:	fa                   	cli    
c001b711:	6a 00                	push   0x0
c001b713:	6a 27                	push   0x27
c001b715:	e9 6a 00 00 00       	jmp    c001b784 <int_common_stub>

c001b71a <irq8>:
c001b71a:	fa                   	cli    
c001b71b:	6a 00                	push   0x0
c001b71d:	6a 28                	push   0x28
c001b71f:	e9 60 00 00 00       	jmp    c001b784 <int_common_stub>

c001b724 <irq9>:
c001b724:	fa                   	cli    
c001b725:	6a 00                	push   0x0
c001b727:	6a 29                	push   0x29
c001b729:	e9 56 00 00 00       	jmp    c001b784 <int_common_stub>

c001b72e <irq10>:
c001b72e:	fa                   	cli    
c001b72f:	6a 00                	push   0x0
c001b731:	6a 2a                	push   0x2a
c001b733:	e9 4c 00 00 00       	jmp    c001b784 <int_common_stub>

c001b738 <irq11>:
c001b738:	fa                   	cli    
c001b739:	6a 00                	push   0x0
c001b73b:	6a 2b                	push   0x2b
c001b73d:	e9 42 00 00 00       	jmp    c001b784 <int_common_stub>

c001b742 <irq12>:
c001b742:	fa                   	cli    
c001b743:	6a 00                	push   0x0
c001b745:	6a 2c                	push   0x2c
c001b747:	e9 38 00 00 00       	jmp    c001b784 <int_common_stub>

c001b74c <irq13>:
c001b74c:	fa                   	cli    
c001b74d:	6a 00                	push   0x0
c001b74f:	6a 2d                	push   0x2d
c001b751:	e9 2e 00 00 00       	jmp    c001b784 <int_common_stub>

c001b756 <irq14>:
c001b756:	fa                   	cli    
c001b757:	6a 00                	push   0x0
c001b759:	6a 2e                	push   0x2e
c001b75b:	e9 24 00 00 00       	jmp    c001b784 <int_common_stub>

c001b760 <irq15>:
c001b760:	fa                   	cli    
c001b761:	6a 00                	push   0x0
c001b763:	6a 2f                	push   0x2f
c001b765:	e9 1a 00 00 00       	jmp    c001b784 <int_common_stub>

c001b76a <irq1>:
c001b76a:	fa                   	cli    
c001b76b:	6a 00                	push   0x0
c001b76d:	6a 21                	push   0x21
c001b76f:	eb 13                	jmp    c001b784 <int_common_stub>

c001b771 <irq2>:
c001b771:	fa                   	cli    
c001b772:	6a 00                	push   0x0
c001b774:	6a 22                	push   0x22
c001b776:	eb 0c                	jmp    c001b784 <int_common_stub>

c001b778 <isr96>:
c001b778:	6a 00                	push   0x0
c001b77a:	6a 60                	push   0x60
c001b77c:	fb                   	sti    
c001b77d:	eb 05                	jmp    c001b784 <int_common_stub>

c001b77f <irq0>:
c001b77f:	fa                   	cli    
c001b780:	6a 00                	push   0x0
c001b782:	6a 20                	push   0x20

c001b784 <int_common_stub>:
c001b784:	60                   	pusha  
c001b785:	1e                   	push   ds
c001b786:	06                   	push   es
c001b787:	0f a0                	push   fs
c001b789:	0f a8                	push   gs
c001b78b:	66 b8 10 00          	mov    ax,0x10
c001b78f:	66 8e d8             	mov    ds,ax
c001b792:	66 8e c0             	mov    es,ax
c001b795:	66 8e e0             	mov    fs,ax
c001b798:	66 8e e8             	mov    gs,ax
c001b79b:	54                   	push   esp
c001b79c:	fc                   	cld    
c001b79d:	e8 72 08 ff ff       	call   c000c014 <int_handler>
c001b7a2:	81 c4 04 00 00 00    	add    esp,0x4
c001b7a8:	0f a9                	pop    gs
c001b7aa:	0f a1                	pop    fs
c001b7ac:	07                   	pop    es
c001b7ad:	1f                   	pop    ds
c001b7ae:	61                   	popa   
c001b7af:	81 c4 08 00 00 00    	add    esp,0x8
c001b7b5:	cf                   	iret   

c001b7b6 <irq16>:
c001b7b6:	fa                   	cli    
c001b7b7:	6a 00                	push   0x0
c001b7b9:	6a 30                	push   0x30
c001b7bb:	e9 c4 ff ff ff       	jmp    c001b784 <int_common_stub>

c001b7c0 <irq17>:
c001b7c0:	fa                   	cli    
c001b7c1:	6a 00                	push   0x0
c001b7c3:	6a 31                	push   0x31
c001b7c5:	e9 ba ff ff ff       	jmp    c001b784 <int_common_stub>

c001b7ca <irq18>:
c001b7ca:	fa                   	cli    
c001b7cb:	6a 00                	push   0x0
c001b7cd:	6a 32                	push   0x32
c001b7cf:	e9 b0 ff ff ff       	jmp    c001b784 <int_common_stub>

c001b7d4 <irq19>:
c001b7d4:	fa                   	cli    
c001b7d5:	6a 00                	push   0x0
c001b7d7:	6a 33                	push   0x33
c001b7d9:	e9 a6 ff ff ff       	jmp    c001b784 <int_common_stub>

c001b7de <irq20>:
c001b7de:	fa                   	cli    
c001b7df:	6a 00                	push   0x0
c001b7e1:	6a 34                	push   0x34
c001b7e3:	e9 9c ff ff ff       	jmp    c001b784 <int_common_stub>

c001b7e8 <irq21>:
c001b7e8:	fa                   	cli    
c001b7e9:	6a 00                	push   0x0
c001b7eb:	6a 35                	push   0x35
c001b7ed:	e9 92 ff ff ff       	jmp    c001b784 <int_common_stub>

c001b7f2 <irq22>:
c001b7f2:	fa                   	cli    
c001b7f3:	6a 00                	push   0x0
c001b7f5:	6a 36                	push   0x36
c001b7f7:	e9 88 ff ff ff       	jmp    c001b784 <int_common_stub>

c001b7fc <irq23>:
c001b7fc:	fa                   	cli    
c001b7fd:	6a 00                	push   0x0
c001b7ff:	6a 37                	push   0x37
c001b801:	e9 7e ff ff ff       	jmp    c001b784 <int_common_stub>
c001b806:	66 90                	xchg   ax,ax
c001b808:	66 90                	xchg   ax,ax
c001b80a:	66 90                	xchg   ax,ax
c001b80c:	66 90                	xchg   ax,ax
c001b80e:	66 90                	xchg   ax,ax

c001b810 <i386GetRDRAND>:
c001b810:	b9 64 00 00 00       	mov    ecx,0x64

c001b815 <retry>:
c001b815:	0f c7 f0             	rdrand eax
c001b818:	72 05                	jb     c001b81f <retry.done>
c001b81a:	e2 f9                	loop   c001b815 <retry>

c001b81c <retry.fail>:
c001b81c:	31 c0                	xor    eax,eax
c001b81e:	c3                   	ret    

c001b81f <retry.done>:
c001b81f:	c3                   	ret    

c001b820 <absolutelyNoChanceInHell>:
c001b820:	b8 01 00 00 00       	mov    eax,0x1
c001b825:	0f a2                	cpuid  
c001b827:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001b82d:	74 06                	je     c001b835 <sseDetect.noSSE>
c001b82f:	b8 01 00 00 00       	mov    eax,0x1
c001b834:	c3                   	ret    

c001b835 <sseDetect.noSSE>:
c001b835:	31 c0                	xor    eax,eax
c001b837:	c3                   	ret    

c001b838 <sseSave>:
c001b838:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b83c:	0f ae 00             	fxsave [eax]
c001b83f:	c3                   	ret    

c001b840 <sseLoad>:
c001b840:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b844:	0f ae 08             	fxrstor [eax]
c001b847:	c3                   	ret    

c001b848 <sseInit>:
c001b848:	e8 42 00 00 00       	call   c001b88f <x87Init>
c001b84d:	0f 20 e0             	mov    eax,cr4
c001b850:	66 0d 00 06          	or     ax,0x600
c001b854:	0f 22 e0             	mov    cr4,eax
c001b857:	c3                   	ret    

c001b858 <sseClose>:
c001b858:	c3                   	ret    
c001b859:	66 90                	xchg   ax,ax
c001b85b:	66 90                	xchg   ax,ax
c001b85d:	66 90                	xchg   ax,ax
c001b85f:	90                   	nop

c001b860 <value_37F>:
c001b860:	7f 03                	jg     c001b865 <value_37A+0x1>

c001b862 <value_37E>:
c001b862:	7e 03                	jle    c001b867 <x87Detect+0x1>

c001b864 <value_37A>:
c001b864:	7a 03                	jp     c001b869 <x87Detect+0x3>

c001b866 <x87Detect>:
c001b866:	b8 01 00 00 00       	mov    eax,0x1
c001b86b:	0f a2                	cpuid  
c001b86d:	f7 c2 01 00 00 00    	test   edx,0x1
c001b873:	74 06                	je     c001b87b <x87Detect.nox87>
c001b875:	b8 01 00 00 00       	mov    eax,0x1
c001b87a:	c3                   	ret    

c001b87b <x87Detect.nox87>:
c001b87b:	b8 00 00 00 00       	mov    eax,0x0
c001b880:	c3                   	ret    

c001b881 <x87Save>:
c001b881:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b885:	dd 30                	fnsave [eax]
c001b887:	c3                   	ret    

c001b888 <x87Load>:
c001b888:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b88c:	dd 20                	frstor [eax]
c001b88e:	c3                   	ret    

c001b88f <x87Init>:
c001b88f:	0f 20 c0             	mov    eax,cr0
c001b892:	66 25 fb ff          	and    ax,0xfffb
c001b896:	66 0d 22 00          	or     ax,0x22
c001b89a:	0f 22 c0             	mov    cr0,eax
c001b89d:	db e3                	fninit 
c001b89f:	0f 06                	clts   
c001b8a1:	d9 2d 64 b8 01 c0    	fldcw  WORD PTR ds:0xc001b864
c001b8a7:	c3                   	ret    

c001b8a8 <x87Close>:
c001b8a8:	c3                   	ret    
c001b8a9:	66 90                	xchg   ax,ax
c001b8ab:	90                   	nop

c001b8ac <__do_global_ctors_aux>:
c001b8ac:	a1 5c c8 01 c0       	mov    eax,ds:0xc001c85c
c001b8b1:	83 f8 ff             	cmp    eax,0xffffffff
c001b8b4:	74 1a                	je     c001b8d0 <__do_global_ctors_aux+0x24>
c001b8b6:	55                   	push   ebp
c001b8b7:	89 e5                	mov    ebp,esp
c001b8b9:	53                   	push   ebx
c001b8ba:	52                   	push   edx
c001b8bb:	bb 5c c8 01 c0       	mov    ebx,0xc001c85c
c001b8c0:	ff d0                	call   eax
c001b8c2:	83 eb 04             	sub    ebx,0x4
c001b8c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b8c7:	83 f8 ff             	cmp    eax,0xffffffff
c001b8ca:	75 f4                	jne    c001b8c0 <__do_global_ctors_aux+0x14>
c001b8cc:	58                   	pop    eax
c001b8cd:	5b                   	pop    ebx
c001b8ce:	5d                   	pop    ebp
c001b8cf:	c3                   	ret    
c001b8d0:	c3                   	ret    
c001b8d1:	66 90                	xchg   ax,ax
c001b8d3:	90                   	nop

c001b8d4 <__divdi3>:
c001b8d4:	55                   	push   ebp
c001b8d5:	57                   	push   edi
c001b8d6:	56                   	push   esi
c001b8d7:	53                   	push   ebx
c001b8d8:	83 ec 1c             	sub    esp,0x1c
c001b8db:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001b8df:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b8e3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b8e6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b8ea:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001b8ee:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001b8f2:	85 db                	test   ebx,ebx
c001b8f4:	0f 88 8e 00 00 00    	js     c001b988 <__divdi3+0xb4>
c001b8fa:	89 dd                	mov    ebp,ebx
c001b8fc:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001b904:	89 d3                	mov    ebx,edx
c001b906:	85 d2                	test   edx,edx
c001b908:	79 0d                	jns    c001b917 <__divdi3+0x43>
c001b90a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001b90e:	f7 d8                	neg    eax
c001b910:	83 d2 00             	adc    edx,0x0
c001b913:	f7 da                	neg    edx
c001b915:	89 d3                	mov    ebx,edx
c001b917:	89 c7                	mov    edi,eax
c001b919:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b91c:	85 db                	test   ebx,ebx
c001b91e:	75 48                	jne    c001b968 <__divdi3+0x94>
c001b920:	39 ef                	cmp    edi,ebp
c001b922:	76 24                	jbe    c001b948 <__divdi3+0x74>
c001b924:	89 ea                	mov    edx,ebp
c001b926:	f7 f7                	div    edi
c001b928:	89 c1                	mov    ecx,eax
c001b92a:	31 f6                	xor    esi,esi
c001b92c:	89 c8                	mov    eax,ecx
c001b92e:	89 f2                	mov    edx,esi
c001b930:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001b934:	85 c9                	test   ecx,ecx
c001b936:	74 07                	je     c001b93f <__divdi3+0x6b>
c001b938:	f7 d8                	neg    eax
c001b93a:	83 d2 00             	adc    edx,0x0
c001b93d:	f7 da                	neg    edx
c001b93f:	83 c4 1c             	add    esp,0x1c
c001b942:	5b                   	pop    ebx
c001b943:	5e                   	pop    esi
c001b944:	5f                   	pop    edi
c001b945:	5d                   	pop    ebp
c001b946:	c3                   	ret    
c001b947:	90                   	nop
c001b948:	85 ff                	test   edi,edi
c001b94a:	75 0b                	jne    c001b957 <__divdi3+0x83>
c001b94c:	b8 01 00 00 00       	mov    eax,0x1
c001b951:	31 d2                	xor    edx,edx
c001b953:	f7 f3                	div    ebx
c001b955:	89 c7                	mov    edi,eax
c001b957:	31 d2                	xor    edx,edx
c001b959:	89 e8                	mov    eax,ebp
c001b95b:	f7 f7                	div    edi
c001b95d:	89 c6                	mov    esi,eax
c001b95f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001b962:	f7 f7                	div    edi
c001b964:	89 c1                	mov    ecx,eax
c001b966:	eb c4                	jmp    c001b92c <__divdi3+0x58>
c001b968:	39 eb                	cmp    ebx,ebp
c001b96a:	77 3c                	ja     c001b9a8 <__divdi3+0xd4>
c001b96c:	0f bd f3             	bsr    esi,ebx
c001b96f:	83 f6 1f             	xor    esi,0x1f
c001b972:	75 40                	jne    c001b9b4 <__divdi3+0xe0>
c001b974:	39 eb                	cmp    ebx,ebp
c001b976:	72 09                	jb     c001b981 <__divdi3+0xad>
c001b978:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001b97b:	0f 87 97 00 00 00    	ja     c001ba18 <__divdi3+0x144>
c001b981:	b9 01 00 00 00       	mov    ecx,0x1
c001b986:	eb a4                	jmp    c001b92c <__divdi3+0x58>
c001b988:	f7 d9                	neg    ecx
c001b98a:	83 d3 00             	adc    ebx,0x0
c001b98d:	f7 db                	neg    ebx
c001b98f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001b992:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001b996:	89 dd                	mov    ebp,ebx
c001b998:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001b9a0:	e9 5f ff ff ff       	jmp    c001b904 <__divdi3+0x30>
c001b9a5:	8d 76 00             	lea    esi,[esi+0x0]
c001b9a8:	31 f6                	xor    esi,esi
c001b9aa:	31 c9                	xor    ecx,ecx
c001b9ac:	e9 7b ff ff ff       	jmp    c001b92c <__divdi3+0x58>
c001b9b1:	8d 76 00             	lea    esi,[esi+0x0]
c001b9b4:	b8 20 00 00 00       	mov    eax,0x20
c001b9b9:	29 f0                	sub    eax,esi
c001b9bb:	89 f1                	mov    ecx,esi
c001b9bd:	d3 e3                	shl    ebx,cl
c001b9bf:	89 fa                	mov    edx,edi
c001b9c1:	88 c1                	mov    cl,al
c001b9c3:	d3 ea                	shr    edx,cl
c001b9c5:	09 da                	or     edx,ebx
c001b9c7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b9cb:	89 f1                	mov    ecx,esi
c001b9cd:	d3 e7                	shl    edi,cl
c001b9cf:	89 eb                	mov    ebx,ebp
c001b9d1:	88 c1                	mov    cl,al
c001b9d3:	d3 eb                	shr    ebx,cl
c001b9d5:	89 f1                	mov    ecx,esi
c001b9d7:	d3 e5                	shl    ebp,cl
c001b9d9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001b9dc:	88 c1                	mov    cl,al
c001b9de:	d3 ea                	shr    edx,cl
c001b9e0:	09 d5                	or     ebp,edx
c001b9e2:	89 e8                	mov    eax,ebp
c001b9e4:	89 da                	mov    edx,ebx
c001b9e6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001b9ea:	89 d3                	mov    ebx,edx
c001b9ec:	89 c5                	mov    ebp,eax
c001b9ee:	f7 e7                	mul    edi
c001b9f0:	39 d3                	cmp    ebx,edx
c001b9f2:	72 18                	jb     c001ba0c <__divdi3+0x138>
c001b9f4:	74 0a                	je     c001ba00 <__divdi3+0x12c>
c001b9f6:	89 e9                	mov    ecx,ebp
c001b9f8:	31 f6                	xor    esi,esi
c001b9fa:	e9 2d ff ff ff       	jmp    c001b92c <__divdi3+0x58>
c001b9ff:	90                   	nop
c001ba00:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001ba03:	89 f1                	mov    ecx,esi
c001ba05:	d3 e7                	shl    edi,cl
c001ba07:	39 c7                	cmp    edi,eax
c001ba09:	73 eb                	jae    c001b9f6 <__divdi3+0x122>
c001ba0b:	90                   	nop
c001ba0c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001ba0f:	31 f6                	xor    esi,esi
c001ba11:	e9 16 ff ff ff       	jmp    c001b92c <__divdi3+0x58>
c001ba16:	66 90                	xchg   ax,ax
c001ba18:	31 c9                	xor    ecx,ecx
c001ba1a:	e9 0d ff ff ff       	jmp    c001b92c <__divdi3+0x58>
c001ba1f:	90                   	nop

c001ba20 <__moddi3>:
c001ba20:	55                   	push   ebp
c001ba21:	57                   	push   edi
c001ba22:	56                   	push   esi
c001ba23:	53                   	push   ebx
c001ba24:	83 ec 2c             	sub    esp,0x2c
c001ba27:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001ba2b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001ba2f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001ba33:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ba37:	85 db                	test   ebx,ebx
c001ba39:	0f 88 85 00 00 00    	js     c001bac4 <__moddi3+0xa4>
c001ba3f:	89 de                	mov    esi,ebx
c001ba41:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001ba49:	89 d7                	mov    edi,edx
c001ba4b:	85 d2                	test   edx,edx
c001ba4d:	79 09                	jns    c001ba58 <__moddi3+0x38>
c001ba4f:	f7 d8                	neg    eax
c001ba51:	83 d2 00             	adc    edx,0x0
c001ba54:	f7 da                	neg    edx
c001ba56:	89 d7                	mov    edi,edx
c001ba58:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba5c:	89 cd                	mov    ebp,ecx
c001ba5e:	85 ff                	test   edi,edi
c001ba60:	75 52                	jne    c001bab4 <__moddi3+0x94>
c001ba62:	89 c3                	mov    ebx,eax
c001ba64:	39 f0                	cmp    eax,esi
c001ba66:	76 24                	jbe    c001ba8c <__moddi3+0x6c>
c001ba68:	89 c8                	mov    eax,ecx
c001ba6a:	89 f2                	mov    edx,esi
c001ba6c:	f7 f3                	div    ebx
c001ba6e:	89 d6                	mov    esi,edx
c001ba70:	89 f0                	mov    eax,esi
c001ba72:	31 d2                	xor    edx,edx
c001ba74:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ba78:	85 c9                	test   ecx,ecx
c001ba7a:	74 07                	je     c001ba83 <__moddi3+0x63>
c001ba7c:	f7 d8                	neg    eax
c001ba7e:	83 d2 00             	adc    edx,0x0
c001ba81:	f7 da                	neg    edx
c001ba83:	83 c4 2c             	add    esp,0x2c
c001ba86:	5b                   	pop    ebx
c001ba87:	5e                   	pop    esi
c001ba88:	5f                   	pop    edi
c001ba89:	5d                   	pop    ebp
c001ba8a:	c3                   	ret    
c001ba8b:	90                   	nop
c001ba8c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ba90:	85 db                	test   ebx,ebx
c001ba92:	75 0d                	jne    c001baa1 <__moddi3+0x81>
c001ba94:	b8 01 00 00 00       	mov    eax,0x1
c001ba99:	31 d2                	xor    edx,edx
c001ba9b:	f7 f7                	div    edi
c001ba9d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001baa1:	89 f0                	mov    eax,esi
c001baa3:	31 d2                	xor    edx,edx
c001baa5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001baa9:	f7 f7                	div    edi
c001baab:	89 e8                	mov    eax,ebp
c001baad:	f7 f7                	div    edi
c001baaf:	89 d6                	mov    esi,edx
c001bab1:	eb bd                	jmp    c001ba70 <__moddi3+0x50>
c001bab3:	90                   	nop
c001bab4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bab8:	39 f7                	cmp    edi,esi
c001baba:	76 20                	jbe    c001badc <__moddi3+0xbc>
c001babc:	89 c8                	mov    eax,ecx
c001babe:	89 f2                	mov    edx,esi
c001bac0:	eb b2                	jmp    c001ba74 <__moddi3+0x54>
c001bac2:	66 90                	xchg   ax,ax
c001bac4:	f7 d9                	neg    ecx
c001bac6:	83 d3 00             	adc    ebx,0x0
c001bac9:	f7 db                	neg    ebx
c001bacb:	89 de                	mov    esi,ebx
c001bacd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001bad5:	e9 6f ff ff ff       	jmp    c001ba49 <__moddi3+0x29>
c001bada:	66 90                	xchg   ax,ax
c001badc:	0f bd c7             	bsr    eax,edi
c001badf:	83 f0 1f             	xor    eax,0x1f
c001bae2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001bae6:	75 24                	jne    c001bb0c <__moddi3+0xec>
c001bae8:	39 f7                	cmp    edi,esi
c001baea:	72 06                	jb     c001baf2 <__moddi3+0xd2>
c001baec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001baf0:	77 0c                	ja     c001bafe <__moddi3+0xde>
c001baf2:	89 e9                	mov    ecx,ebp
c001baf4:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001baf8:	19 fe                	sbb    esi,edi
c001bafa:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001bafe:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001bb02:	89 f2                	mov    edx,esi
c001bb04:	e9 6b ff ff ff       	jmp    c001ba74 <__moddi3+0x54>
c001bb09:	8d 76 00             	lea    esi,[esi+0x0]
c001bb0c:	b8 20 00 00 00       	mov    eax,0x20
c001bb11:	89 c2                	mov    edx,eax
c001bb13:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001bb17:	29 da                	sub    edx,ebx
c001bb19:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001bb1d:	88 d9                	mov    cl,bl
c001bb1f:	d3 e7                	shl    edi,cl
c001bb21:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bb25:	88 d1                	mov    cl,dl
c001bb27:	d3 e8                	shr    eax,cl
c001bb29:	09 c7                	or     edi,eax
c001bb2b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001bb2f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001bb33:	89 d8                	mov    eax,ebx
c001bb35:	88 d9                	mov    cl,bl
c001bb37:	d3 e7                	shl    edi,cl
c001bb39:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bb3d:	89 f3                	mov    ebx,esi
c001bb3f:	88 d1                	mov    cl,dl
c001bb41:	d3 eb                	shr    ebx,cl
c001bb43:	89 c7                	mov    edi,eax
c001bb45:	88 c1                	mov    cl,al
c001bb47:	d3 e6                	shl    esi,cl
c001bb49:	89 e8                	mov    eax,ebp
c001bb4b:	88 d1                	mov    cl,dl
c001bb4d:	d3 e8                	shr    eax,cl
c001bb4f:	09 f0                	or     eax,esi
c001bb51:	89 f9                	mov    ecx,edi
c001bb53:	d3 e5                	shl    ebp,cl
c001bb55:	89 da                	mov    edx,ebx
c001bb57:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001bb5b:	89 d3                	mov    ebx,edx
c001bb5d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bb61:	89 c6                	mov    esi,eax
c001bb63:	89 d1                	mov    ecx,edx
c001bb65:	39 d3                	cmp    ebx,edx
c001bb67:	72 27                	jb     c001bb90 <__moddi3+0x170>
c001bb69:	74 21                	je     c001bb8c <__moddi3+0x16c>
c001bb6b:	29 f5                	sub    ebp,esi
c001bb6d:	19 cb                	sbb    ebx,ecx
c001bb6f:	89 de                	mov    esi,ebx
c001bb71:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001bb75:	d3 e6                	shl    esi,cl
c001bb77:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bb7b:	89 f9                	mov    ecx,edi
c001bb7d:	d3 ed                	shr    ebp,cl
c001bb7f:	09 ee                	or     esi,ebp
c001bb81:	89 f0                	mov    eax,esi
c001bb83:	d3 eb                	shr    ebx,cl
c001bb85:	89 da                	mov    edx,ebx
c001bb87:	e9 e8 fe ff ff       	jmp    c001ba74 <__moddi3+0x54>
c001bb8c:	39 c5                	cmp    ebp,eax
c001bb8e:	73 db                	jae    c001bb6b <__moddi3+0x14b>
c001bb90:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bb94:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001bb98:	89 d1                	mov    ecx,edx
c001bb9a:	89 c6                	mov    esi,eax
c001bb9c:	eb cd                	jmp    c001bb6b <__moddi3+0x14b>
c001bb9e:	66 90                	xchg   ax,ax

c001bba0 <__udivdi3>:
c001bba0:	55                   	push   ebp
c001bba1:	57                   	push   edi
c001bba2:	56                   	push   esi
c001bba3:	53                   	push   ebx
c001bba4:	83 ec 1c             	sub    esp,0x1c
c001bba7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001bbab:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001bbaf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bbb3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001bbb7:	85 d2                	test   edx,edx
c001bbb9:	75 41                	jne    c001bbfc <__udivdi3+0x5c>
c001bbbb:	39 f7                	cmp    edi,esi
c001bbbd:	76 15                	jbe    c001bbd4 <__udivdi3+0x34>
c001bbbf:	89 e8                	mov    eax,ebp
c001bbc1:	89 f2                	mov    edx,esi
c001bbc3:	f7 f7                	div    edi
c001bbc5:	31 db                	xor    ebx,ebx
c001bbc7:	89 da                	mov    edx,ebx
c001bbc9:	83 c4 1c             	add    esp,0x1c
c001bbcc:	5b                   	pop    ebx
c001bbcd:	5e                   	pop    esi
c001bbce:	5f                   	pop    edi
c001bbcf:	5d                   	pop    ebp
c001bbd0:	c3                   	ret    
c001bbd1:	8d 76 00             	lea    esi,[esi+0x0]
c001bbd4:	89 f9                	mov    ecx,edi
c001bbd6:	85 ff                	test   edi,edi
c001bbd8:	75 0b                	jne    c001bbe5 <__udivdi3+0x45>
c001bbda:	b8 01 00 00 00       	mov    eax,0x1
c001bbdf:	31 d2                	xor    edx,edx
c001bbe1:	f7 f7                	div    edi
c001bbe3:	89 c1                	mov    ecx,eax
c001bbe5:	31 d2                	xor    edx,edx
c001bbe7:	89 f0                	mov    eax,esi
c001bbe9:	f7 f1                	div    ecx
c001bbeb:	89 c3                	mov    ebx,eax
c001bbed:	89 e8                	mov    eax,ebp
c001bbef:	f7 f1                	div    ecx
c001bbf1:	89 da                	mov    edx,ebx
c001bbf3:	83 c4 1c             	add    esp,0x1c
c001bbf6:	5b                   	pop    ebx
c001bbf7:	5e                   	pop    esi
c001bbf8:	5f                   	pop    edi
c001bbf9:	5d                   	pop    ebp
c001bbfa:	c3                   	ret    
c001bbfb:	90                   	nop
c001bbfc:	39 f2                	cmp    edx,esi
c001bbfe:	77 1c                	ja     c001bc1c <__udivdi3+0x7c>
c001bc00:	0f bd da             	bsr    ebx,edx
c001bc03:	83 f3 1f             	xor    ebx,0x1f
c001bc06:	75 24                	jne    c001bc2c <__udivdi3+0x8c>
c001bc08:	39 f2                	cmp    edx,esi
c001bc0a:	72 08                	jb     c001bc14 <__udivdi3+0x74>
c001bc0c:	39 ef                	cmp    edi,ebp
c001bc0e:	0f 87 84 00 00 00    	ja     c001bc98 <__udivdi3+0xf8>
c001bc14:	b8 01 00 00 00       	mov    eax,0x1
c001bc19:	eb ac                	jmp    c001bbc7 <__udivdi3+0x27>
c001bc1b:	90                   	nop
c001bc1c:	31 db                	xor    ebx,ebx
c001bc1e:	31 c0                	xor    eax,eax
c001bc20:	89 da                	mov    edx,ebx
c001bc22:	83 c4 1c             	add    esp,0x1c
c001bc25:	5b                   	pop    ebx
c001bc26:	5e                   	pop    esi
c001bc27:	5f                   	pop    edi
c001bc28:	5d                   	pop    ebp
c001bc29:	c3                   	ret    
c001bc2a:	66 90                	xchg   ax,ax
c001bc2c:	b8 20 00 00 00       	mov    eax,0x20
c001bc31:	29 d8                	sub    eax,ebx
c001bc33:	88 d9                	mov    cl,bl
c001bc35:	d3 e2                	shl    edx,cl
c001bc37:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bc3b:	89 fa                	mov    edx,edi
c001bc3d:	88 c1                	mov    cl,al
c001bc3f:	d3 ea                	shr    edx,cl
c001bc41:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bc45:	09 d1                	or     ecx,edx
c001bc47:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bc4b:	88 d9                	mov    cl,bl
c001bc4d:	d3 e7                	shl    edi,cl
c001bc4f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bc53:	89 f7                	mov    edi,esi
c001bc55:	88 c1                	mov    cl,al
c001bc57:	d3 ef                	shr    edi,cl
c001bc59:	88 d9                	mov    cl,bl
c001bc5b:	d3 e6                	shl    esi,cl
c001bc5d:	89 ea                	mov    edx,ebp
c001bc5f:	88 c1                	mov    cl,al
c001bc61:	d3 ea                	shr    edx,cl
c001bc63:	09 d6                	or     esi,edx
c001bc65:	89 f0                	mov    eax,esi
c001bc67:	89 fa                	mov    edx,edi
c001bc69:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bc6d:	89 d7                	mov    edi,edx
c001bc6f:	89 c6                	mov    esi,eax
c001bc71:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bc75:	39 d7                	cmp    edi,edx
c001bc77:	72 13                	jb     c001bc8c <__udivdi3+0xec>
c001bc79:	74 09                	je     c001bc84 <__udivdi3+0xe4>
c001bc7b:	89 f0                	mov    eax,esi
c001bc7d:	31 db                	xor    ebx,ebx
c001bc7f:	e9 43 ff ff ff       	jmp    c001bbc7 <__udivdi3+0x27>
c001bc84:	88 d9                	mov    cl,bl
c001bc86:	d3 e5                	shl    ebp,cl
c001bc88:	39 c5                	cmp    ebp,eax
c001bc8a:	73 ef                	jae    c001bc7b <__udivdi3+0xdb>
c001bc8c:	8d 46 ff             	lea    eax,[esi-0x1]
c001bc8f:	31 db                	xor    ebx,ebx
c001bc91:	e9 31 ff ff ff       	jmp    c001bbc7 <__udivdi3+0x27>
c001bc96:	66 90                	xchg   ax,ax
c001bc98:	31 c0                	xor    eax,eax
c001bc9a:	e9 28 ff ff ff       	jmp    c001bbc7 <__udivdi3+0x27>
c001bc9f:	90                   	nop

c001bca0 <__umoddi3>:
c001bca0:	55                   	push   ebp
c001bca1:	57                   	push   edi
c001bca2:	56                   	push   esi
c001bca3:	53                   	push   ebx
c001bca4:	83 ec 1c             	sub    esp,0x1c
c001bca7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bcab:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001bcaf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001bcb3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001bcb7:	89 da                	mov    edx,ebx
c001bcb9:	85 c0                	test   eax,eax
c001bcbb:	75 37                	jne    c001bcf4 <__umoddi3+0x54>
c001bcbd:	39 df                	cmp    edi,ebx
c001bcbf:	76 13                	jbe    c001bcd4 <__umoddi3+0x34>
c001bcc1:	89 f0                	mov    eax,esi
c001bcc3:	f7 f7                	div    edi
c001bcc5:	89 d0                	mov    eax,edx
c001bcc7:	31 d2                	xor    edx,edx
c001bcc9:	83 c4 1c             	add    esp,0x1c
c001bccc:	5b                   	pop    ebx
c001bccd:	5e                   	pop    esi
c001bcce:	5f                   	pop    edi
c001bccf:	5d                   	pop    ebp
c001bcd0:	c3                   	ret    
c001bcd1:	8d 76 00             	lea    esi,[esi+0x0]
c001bcd4:	89 fd                	mov    ebp,edi
c001bcd6:	85 ff                	test   edi,edi
c001bcd8:	75 0b                	jne    c001bce5 <__umoddi3+0x45>
c001bcda:	b8 01 00 00 00       	mov    eax,0x1
c001bcdf:	31 d2                	xor    edx,edx
c001bce1:	f7 f7                	div    edi
c001bce3:	89 c5                	mov    ebp,eax
c001bce5:	89 d8                	mov    eax,ebx
c001bce7:	31 d2                	xor    edx,edx
c001bce9:	f7 f5                	div    ebp
c001bceb:	89 f0                	mov    eax,esi
c001bced:	f7 f5                	div    ebp
c001bcef:	89 d0                	mov    eax,edx
c001bcf1:	eb d4                	jmp    c001bcc7 <__umoddi3+0x27>
c001bcf3:	90                   	nop
c001bcf4:	89 f1                	mov    ecx,esi
c001bcf6:	39 d8                	cmp    eax,ebx
c001bcf8:	76 0a                	jbe    c001bd04 <__umoddi3+0x64>
c001bcfa:	89 f0                	mov    eax,esi
c001bcfc:	83 c4 1c             	add    esp,0x1c
c001bcff:	5b                   	pop    ebx
c001bd00:	5e                   	pop    esi
c001bd01:	5f                   	pop    edi
c001bd02:	5d                   	pop    ebp
c001bd03:	c3                   	ret    
c001bd04:	0f bd e8             	bsr    ebp,eax
c001bd07:	83 f5 1f             	xor    ebp,0x1f
c001bd0a:	75 1c                	jne    c001bd28 <__umoddi3+0x88>
c001bd0c:	39 d8                	cmp    eax,ebx
c001bd0e:	72 04                	jb     c001bd14 <__umoddi3+0x74>
c001bd10:	39 f7                	cmp    edi,esi
c001bd12:	77 08                	ja     c001bd1c <__umoddi3+0x7c>
c001bd14:	89 da                	mov    edx,ebx
c001bd16:	29 fe                	sub    esi,edi
c001bd18:	19 c2                	sbb    edx,eax
c001bd1a:	89 f1                	mov    ecx,esi
c001bd1c:	89 c8                	mov    eax,ecx
c001bd1e:	83 c4 1c             	add    esp,0x1c
c001bd21:	5b                   	pop    ebx
c001bd22:	5e                   	pop    esi
c001bd23:	5f                   	pop    edi
c001bd24:	5d                   	pop    ebp
c001bd25:	c3                   	ret    
c001bd26:	66 90                	xchg   ax,ax
c001bd28:	ba 20 00 00 00       	mov    edx,0x20
c001bd2d:	29 ea                	sub    edx,ebp
c001bd2f:	89 e9                	mov    ecx,ebp
c001bd31:	d3 e0                	shl    eax,cl
c001bd33:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001bd37:	89 f8                	mov    eax,edi
c001bd39:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001bd3d:	88 d1                	mov    cl,dl
c001bd3f:	d3 e8                	shr    eax,cl
c001bd41:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001bd45:	09 c1                	or     ecx,eax
c001bd47:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001bd4b:	89 e9                	mov    ecx,ebp
c001bd4d:	d3 e7                	shl    edi,cl
c001bd4f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001bd53:	89 d8                	mov    eax,ebx
c001bd55:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001bd59:	88 d1                	mov    cl,dl
c001bd5b:	d3 e8                	shr    eax,cl
c001bd5d:	89 c7                	mov    edi,eax
c001bd5f:	89 e9                	mov    ecx,ebp
c001bd61:	d3 e3                	shl    ebx,cl
c001bd63:	89 f0                	mov    eax,esi
c001bd65:	88 d1                	mov    cl,dl
c001bd67:	d3 e8                	shr    eax,cl
c001bd69:	09 d8                	or     eax,ebx
c001bd6b:	89 e9                	mov    ecx,ebp
c001bd6d:	d3 e6                	shl    esi,cl
c001bd6f:	89 f3                	mov    ebx,esi
c001bd71:	89 fa                	mov    edx,edi
c001bd73:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001bd77:	89 d1                	mov    ecx,edx
c001bd79:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001bd7d:	89 c6                	mov    esi,eax
c001bd7f:	89 d7                	mov    edi,edx
c001bd81:	39 d1                	cmp    ecx,edx
c001bd83:	72 27                	jb     c001bdac <__umoddi3+0x10c>
c001bd85:	74 21                	je     c001bda8 <__umoddi3+0x108>
c001bd87:	89 ca                	mov    edx,ecx
c001bd89:	29 f3                	sub    ebx,esi
c001bd8b:	19 fa                	sbb    edx,edi
c001bd8d:	89 d0                	mov    eax,edx
c001bd8f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001bd93:	d3 e0                	shl    eax,cl
c001bd95:	89 e9                	mov    ecx,ebp
c001bd97:	d3 eb                	shr    ebx,cl
c001bd99:	09 d8                	or     eax,ebx
c001bd9b:	d3 ea                	shr    edx,cl
c001bd9d:	83 c4 1c             	add    esp,0x1c
c001bda0:	5b                   	pop    ebx
c001bda1:	5e                   	pop    esi
c001bda2:	5f                   	pop    edi
c001bda3:	5d                   	pop    ebp
c001bda4:	c3                   	ret    
c001bda5:	8d 76 00             	lea    esi,[esi+0x0]
c001bda8:	39 c3                	cmp    ebx,eax
c001bdaa:	73 db                	jae    c001bd87 <__umoddi3+0xe7>
c001bdac:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001bdb0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001bdb4:	89 d7                	mov    edi,edx
c001bdb6:	89 c6                	mov    esi,eax
c001bdb8:	eb cd                	jmp    c001bd87 <__umoddi3+0xe7>

Disassembly of section .init:

c001bdba <_init>:
c001bdba:	55                   	push   ebp
c001bdbb:	89 e5                	mov    ebp,esp
c001bdbd:	e8 56 43 fe ff       	call   c0000118 <frame_dummy>
c001bdc2:	e8 e5 fa ff ff       	call   c001b8ac <__do_global_ctors_aux>
c001bdc7:	5d                   	pop    ebp
c001bdc8:	c3                   	ret    

Disassembly of section .fini:

c001bdc9 <_fini>:
c001bdc9:	55                   	push   ebp
c001bdca:	89 e5                	mov    ebp,esp
c001bdcc:	e8 d7 42 fe ff       	call   c00000a8 <__do_global_dtors_aux>
c001bdd1:	5d                   	pop    ebp
c001bdd2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001bdd4 <Computer::~Computer()>:
c001bdd4:	83 ec 0c             	sub    esp,0xc
c001bdd7:	ba e0 d0 01 c0       	mov    edx,0xc001d0e0
c001bddc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde0:	89 10                	mov    DWORD PTR [eax],edx
c001bde2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bde6:	83 ec 0c             	sub    esp,0xc
c001bde9:	50                   	push   eax
c001bdea:	e8 7b fc fe ff       	call   c000ba6a <Device::~Device()>
c001bdef:	83 c4 10             	add    esp,0x10
c001bdf2:	90                   	nop
c001bdf3:	83 c4 0c             	add    esp,0xc
c001bdf6:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001bdf8 <Computer::~Computer()>:
c001bdf8:	83 ec 0c             	sub    esp,0xc
c001bdfb:	83 ec 0c             	sub    esp,0xc
c001bdfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be02:	e8 cd ff ff ff       	call   c001bdd4 <Computer::~Computer()>
c001be07:	83 c4 10             	add    esp,0x10
c001be0a:	83 ec 08             	sub    esp,0x8
c001be0d:	68 70 01 00 00       	push   0x170
c001be12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001be16:	e8 17 e8 fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001be1b:	83 c4 10             	add    esp,0x10
c001be1e:	83 c4 0c             	add    esp,0xc
c001be21:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001be22 <idleCommon()>:
c001be22:	83 ec 0c             	sub    esp,0xc
c001be25:	fa                   	cli    
c001be26:	ff 05 48 38 02 c0    	inc    DWORD PTR ds:0xc0023848
c001be2c:	e8 9b 77 ff ff       	call   c00135cc <schedule()>
c001be31:	a1 48 38 02 c0       	mov    eax,ds:0xc0023848
c001be36:	48                   	dec    eax
c001be37:	a3 48 38 02 c0       	mov    ds:0xc0023848,eax
c001be3c:	75 01                	jne    c001be3f <idleCommon()+0x1d>
c001be3e:	fb                   	sti    
c001be3f:	83 c4 0c             	add    esp,0xc
c001be42:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001be44 <LinkedList<UnixFile>::~LinkedList()>:
c001be44:	90                   	nop
c001be45:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001be46 <LinkedList<UnixFile>::LinkedList()>:
c001be46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be4a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be54:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be5b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be5f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001be66:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be6a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be74:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001be7f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001be86:	90                   	nop
c001be87:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001be88 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001be88:	83 ec 0c             	sub    esp,0xc
c001be8b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001be90:	75 10                	jne    c001bea2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001be92:	83 ec 0c             	sub    esp,0xc
c001be95:	68 34 d3 01 c0       	push   0xc001d334
c001be9a:	e8 d8 43 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001be9f:	83 c4 10             	add    esp,0x10
c001bea2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bea6:	8b 00                	mov    eax,DWORD PTR [eax]
c001bea8:	85 c0                	test   eax,eax
c001beaa:	74 34                	je     c001bee0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001beac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beb0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001beb3:	85 c0                	test   eax,eax
c001beb5:	74 29                	je     c001bee0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001beb7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bebb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bebe:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bec2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bec5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bec9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001becd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bed0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bed4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bed7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bede:	eb 65                	jmp    c001bf45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bee0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bee4:	8b 00                	mov    eax,DWORD PTR [eax]
c001bee6:	85 c0                	test   eax,eax
c001bee8:	75 4b                	jne    c001bf35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001beea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001beee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bef1:	85 c0                	test   eax,eax
c001bef3:	75 40                	jne    c001bf35 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001bef5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bef9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001befd:	89 10                	mov    DWORD PTR [eax],edx
c001beff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf03:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001bf07:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001bf0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf0e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf11:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001bf18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf1c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf1f:	85 c0                	test   eax,eax
c001bf21:	74 22                	je     c001bf45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf23:	83 ec 0c             	sub    esp,0xc
c001bf26:	68 56 d3 01 c0       	push   0xc001d356
c001bf2b:	e8 47 43 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001bf30:	83 c4 10             	add    esp,0x10
c001bf33:	eb 10                	jmp    c001bf45 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001bf35:	83 ec 0c             	sub    esp,0xc
c001bf38:	68 60 d3 01 c0       	push   0xc001d360
c001bf3d:	e8 35 43 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001bf42:	83 c4 10             	add    esp,0x10
c001bf45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf49:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf4c:	8d 50 01             	lea    edx,[eax+0x1]
c001bf4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf53:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001bf56:	90                   	nop
c001bf57:	83 c4 0c             	add    esp,0xc
c001bf5a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001bf5c <LinkedList<UnixFile>::getFirstElement()>:
c001bf5c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bf60:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf62:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001bf64 <LinkedList<UnixFile>::removeFirst()>:
c001bf64:	83 ec 0c             	sub    esp,0xc
c001bf67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf6b:	8b 00                	mov    eax,DWORD PTR [eax]
c001bf6d:	85 c0                	test   eax,eax
c001bf6f:	75 12                	jne    c001bf83 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001bf71:	83 ec 0c             	sub    esp,0xc
c001bf74:	68 6c d3 01 c0       	push   0xc001d36c
c001bf79:	e8 f9 42 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001bf7e:	83 c4 10             	add    esp,0x10
c001bf81:	eb 7e                	jmp    c001c001 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001bf83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf87:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001bf8a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bf8d:	85 c0                	test   eax,eax
c001bf8f:	74 10                	je     c001bfa1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001bf91:	83 ec 0c             	sub    esp,0xc
c001bf94:	68 b7 d3 01 c0       	push   0xc001d3b7
c001bf99:	e8 d9 42 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001bf9e:	83 c4 10             	add    esp,0x10
c001bfa1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfa5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfa7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfaa:	85 c0                	test   eax,eax
c001bfac:	75 33                	jne    c001bfe1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001bfae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfb2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bfb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfbc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bfc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfc7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bfca:	83 f8 01             	cmp    eax,0x1
c001bfcd:	74 21                	je     c001bff0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001bfcf:	83 ec 0c             	sub    esp,0xc
c001bfd2:	68 90 d3 01 c0       	push   0xc001d390
c001bfd7:	e8 9b 42 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001bfdc:	83 c4 10             	add    esp,0x10
c001bfdf:	eb 0f                	jmp    c001bff0 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001bfe1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfe5:	8b 00                	mov    eax,DWORD PTR [eax]
c001bfe7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001bfea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bfee:	89 10                	mov    DWORD PTR [eax],edx
c001bff0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bff4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001bff7:	8d 50 ff             	lea    edx,[eax-0x1]
c001bffa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bffe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c001:	83 c4 0c             	add    esp,0xc
c001c004:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001c006 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001c006:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c00a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c00d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001c00e <DriverlessDevice::~DriverlessDevice()>:
c001c00e:	ba fc d9 01 c0       	mov    edx,0xc001d9fc
c001c013:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c017:	89 10                	mov    DWORD PTR [eax],edx
c001c019:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c01d:	50                   	push   eax
c001c01e:	e8 47 fa fe ff       	call   c000ba6a <Device::~Device()>
c001c023:	83 c4 04             	add    esp,0x4
c001c026:	90                   	nop
c001c027:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001c028 <DriverlessDevice::~DriverlessDevice()>:
c001c028:	83 ec 0c             	sub    esp,0xc
c001c02b:	83 ec 0c             	sub    esp,0xc
c001c02e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c032:	e8 d7 ff ff ff       	call   c001c00e <DriverlessDevice::~DriverlessDevice()>
c001c037:	83 c4 10             	add    esp,0x10
c001c03a:	83 ec 08             	sub    esp,0x8
c001c03d:	68 58 01 00 00       	push   0x158
c001c042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c046:	e8 e7 e5 fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c04b:	83 c4 10             	add    esp,0x10
c001c04e:	83 c4 0c             	add    esp,0xc
c001c051:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001c052 <LinkedList<Device>::addElement(Device*)>:
c001c052:	83 ec 0c             	sub    esp,0xc
c001c055:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c05a:	75 10                	jne    c001c06c <LinkedList<Device>::addElement(Device*)+0x1a>
c001c05c:	83 ec 0c             	sub    esp,0xc
c001c05f:	68 34 d3 01 c0       	push   0xc001d334
c001c064:	e8 0e 42 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001c069:	83 c4 10             	add    esp,0x10
c001c06c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c070:	8b 00                	mov    eax,DWORD PTR [eax]
c001c072:	85 c0                	test   eax,eax
c001c074:	74 3a                	je     c001c0b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c076:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c07a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c07d:	85 c0                	test   eax,eax
c001c07f:	74 2f                	je     c001c0b0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001c081:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c085:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c088:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c08c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001c092:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c096:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c09a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c09d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c0a4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c0ae:	eb 68                	jmp    c001c118 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c0b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0b4:	8b 00                	mov    eax,DWORD PTR [eax]
c001c0b6:	85 c0                	test   eax,eax
c001c0b8:	75 4e                	jne    c001c108 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c0ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0be:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c0c1:	85 c0                	test   eax,eax
c001c0c3:	75 43                	jne    c001c108 <LinkedList<Device>::addElement(Device*)+0xb6>
c001c0c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0cd:	89 10                	mov    DWORD PTR [eax],edx
c001c0cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0d3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c0d7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c0da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c0e1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001c0eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c0ef:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c0f2:	85 c0                	test   eax,eax
c001c0f4:	74 22                	je     c001c118 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c0f6:	83 ec 0c             	sub    esp,0xc
c001c0f9:	68 56 d3 01 c0       	push   0xc001d356
c001c0fe:	e8 74 41 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001c103:	83 c4 10             	add    esp,0x10
c001c106:	eb 10                	jmp    c001c118 <LinkedList<Device>::addElement(Device*)+0xc6>
c001c108:	83 ec 0c             	sub    esp,0xc
c001c10b:	68 60 d3 01 c0       	push   0xc001d360
c001c110:	e8 62 41 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001c115:	83 c4 10             	add    esp,0x10
c001c118:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c11c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c11f:	8d 50 01             	lea    edx,[eax+0x1]
c001c122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c126:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c129:	90                   	nop
c001c12a:	83 c4 0c             	add    esp,0xc
c001c12d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001c12e <LinkedList<Device>::LinkedList()>:
c001c12e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c132:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c138:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c13c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c143:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c147:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c14e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c152:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c15c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c163:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c167:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c16e:	90                   	nop
c001c16f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001c170 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001c170:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c174:	8b 00                	mov    eax,DWORD PTR [eax]
c001c176:	85 c0                	test   eax,eax
c001c178:	75 0e                	jne    c001c188 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c17a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c17e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c181:	85 c0                	test   eax,eax
c001c183:	75 03                	jne    c001c188 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001c185:	b0 01                	mov    al,0x1
c001c187:	c3                   	ret    
c001c188:	b0 00                	mov    al,0x0
c001c18a:	90                   	nop
c001c18b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001c18c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001c18c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c190:	8b 00                	mov    eax,DWORD PTR [eax]
c001c192:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001c194 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001c194:	83 ec 0c             	sub    esp,0xc
c001c197:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c19b:	8b 00                	mov    eax,DWORD PTR [eax]
c001c19d:	85 c0                	test   eax,eax
c001c19f:	75 17                	jne    c001c1b8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001c1a1:	83 ec 0c             	sub    esp,0xc
c001c1a4:	68 6c d3 01 c0       	push   0xc001d36c
c001c1a9:	e8 c9 40 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001c1ae:	83 c4 10             	add    esp,0x10
c001c1b1:	e9 92 00 00 00       	jmp    c001c248 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb4>
c001c1b6:	66 90                	xchg   ax,ax
c001c1b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1bc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c1bf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c1c2:	85 c0                	test   eax,eax
c001c1c4:	0f 95 c0             	setne  al
c001c1c7:	84 c0                	test   al,al
c001c1c9:	74 11                	je     c001c1dc <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x48>
c001c1cb:	83 ec 0c             	sub    esp,0xc
c001c1ce:	68 b7 d3 01 c0       	push   0xc001d3b7
c001c1d3:	e8 9f 40 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001c1d8:	83 c4 10             	add    esp,0x10
c001c1db:	90                   	nop
c001c1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1e0:	8b 00                	mov    eax,DWORD PTR [eax]
c001c1e2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c1e5:	85 c0                	test   eax,eax
c001c1e7:	0f 94 c0             	sete   al
c001c1ea:	84 c0                	test   al,al
c001c1ec:	74 36                	je     c001c224 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x90>
c001c1ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1f2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c1f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c1fc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c203:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c207:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c20a:	83 f8 01             	cmp    eax,0x1
c001c20d:	74 25                	je     c001c234 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c20f:	83 ec 0c             	sub    esp,0xc
c001c212:	68 90 d3 01 c0       	push   0xc001d390
c001c217:	e8 5b 40 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001c21c:	83 c4 10             	add    esp,0x10
c001c21f:	eb 13                	jmp    c001c234 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa0>
c001c221:	8d 76 00             	lea    esi,[esi+0x0]
c001c224:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c228:	8b 00                	mov    eax,DWORD PTR [eax]
c001c22a:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001c22d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c231:	89 10                	mov    DWORD PTR [eax],edx
c001c233:	90                   	nop
c001c234:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c238:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c23b:	8d 50 ff             	lea    edx,[eax-0x1]
c001c23e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c242:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c245:	8d 76 00             	lea    esi,[esi+0x0]
c001c248:	83 c4 0c             	add    esp,0xc
c001c24b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001c24c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001c24c:	83 ec 0c             	sub    esp,0xc
c001c24f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001c254:	75 12                	jne    c001c268 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001c256:	83 ec 0c             	sub    esp,0xc
c001c259:	68 34 d3 01 c0       	push   0xc001d334
c001c25e:	e8 14 40 ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001c263:	83 c4 10             	add    esp,0x10
c001c266:	66 90                	xchg   ax,ax
c001c268:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c26c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c26e:	85 c0                	test   eax,eax
c001c270:	74 36                	je     c001c2a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c272:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c276:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c279:	85 c0                	test   eax,eax
c001c27b:	74 2b                	je     c001c2a8 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001c27d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c281:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c284:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c288:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001c28b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c28f:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c293:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c296:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c29a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c29d:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c2a4:	eb 6a                	jmp    c001c310 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c2a6:	66 90                	xchg   ax,ax
c001c2a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2ac:	8b 00                	mov    eax,DWORD PTR [eax]
c001c2ae:	85 c0                	test   eax,eax
c001c2b0:	75 4e                	jne    c001c300 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c2b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2b9:	85 c0                	test   eax,eax
c001c2bb:	75 43                	jne    c001c300 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001c2bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c2c5:	89 10                	mov    DWORD PTR [eax],edx
c001c2c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2cb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001c2cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001c2d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c2d9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c2e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c2e4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c2e7:	85 c0                	test   eax,eax
c001c2e9:	74 25                	je     c001c310 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c2eb:	83 ec 0c             	sub    esp,0xc
c001c2ee:	68 56 d3 01 c0       	push   0xc001d356
c001c2f3:	e8 7f 3f ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001c2f8:	83 c4 10             	add    esp,0x10
c001c2fb:	eb 13                	jmp    c001c310 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001c2fd:	8d 76 00             	lea    esi,[esi+0x0]
c001c300:	83 ec 0c             	sub    esp,0xc
c001c303:	68 60 d3 01 c0       	push   0xc001d360
c001c308:	e8 6a 3f ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001c30d:	83 c4 10             	add    esp,0x10
c001c310:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c314:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c317:	8d 50 01             	lea    edx,[eax+0x1]
c001c31a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c31e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c321:	90                   	nop
c001c322:	83 c4 0c             	add    esp,0xc
c001c325:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001c328 <ACPI::~ACPI()>:
c001c328:	83 ec 0c             	sub    esp,0xc
c001c32b:	ba 64 df 01 c0       	mov    edx,0xc001df64
c001c330:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c334:	89 10                	mov    DWORD PTR [eax],edx
c001c336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c33a:	83 ec 0c             	sub    esp,0xc
c001c33d:	50                   	push   eax
c001c33e:	e8 27 f7 fe ff       	call   c000ba6a <Device::~Device()>
c001c343:	83 c4 10             	add    esp,0x10
c001c346:	90                   	nop
c001c347:	83 c4 0c             	add    esp,0xc
c001c34a:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001c34c <ACPI::~ACPI()>:
c001c34c:	83 ec 0c             	sub    esp,0xc
c001c34f:	83 ec 0c             	sub    esp,0xc
c001c352:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c356:	e8 cd ff ff ff       	call   c001c328 <ACPI::~ACPI()>
c001c35b:	83 c4 10             	add    esp,0x10
c001c35e:	83 ec 08             	sub    esp,0x8
c001c361:	68 64 12 00 00       	push   0x1264
c001c366:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c36a:	e8 c3 e2 fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c36f:	83 c4 10             	add    esp,0x10
c001c372:	83 c4 0c             	add    esp,0xc
c001c375:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001c378 <LinkedList<Device>::~LinkedList()>:
c001c378:	90                   	nop
c001c379:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001c37c <LinkedList<Device>::isEmpty()>:
c001c37c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c380:	8b 00                	mov    eax,DWORD PTR [eax]
c001c382:	85 c0                	test   eax,eax
c001c384:	75 0e                	jne    c001c394 <LinkedList<Device>::isEmpty()+0x18>
c001c386:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c38a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c38d:	85 c0                	test   eax,eax
c001c38f:	75 03                	jne    c001c394 <LinkedList<Device>::isEmpty()+0x18>
c001c391:	b0 01                	mov    al,0x1
c001c393:	c3                   	ret    
c001c394:	b0 00                	mov    al,0x0
c001c396:	90                   	nop
c001c397:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001c398 <LinkedList<Device>::getFirstElement()>:
c001c398:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c39c:	8b 00                	mov    eax,DWORD PTR [eax]
c001c39e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001c3a0 <LinkedList<Device>::removeFirst()>:
c001c3a0:	83 ec 0c             	sub    esp,0xc
c001c3a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3a7:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3a9:	85 c0                	test   eax,eax
c001c3ab:	75 17                	jne    c001c3c4 <LinkedList<Device>::removeFirst()+0x24>
c001c3ad:	83 ec 0c             	sub    esp,0xc
c001c3b0:	68 6c d3 01 c0       	push   0xc001d36c
c001c3b5:	e8 bd 3e ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001c3ba:	83 c4 10             	add    esp,0x10
c001c3bd:	e9 92 00 00 00       	jmp    c001c454 <LinkedList<Device>::removeFirst()+0xb4>
c001c3c2:	66 90                	xchg   ax,ax
c001c3c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001c3cb:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c3d1:	85 c0                	test   eax,eax
c001c3d3:	74 13                	je     c001c3e8 <LinkedList<Device>::removeFirst()+0x48>
c001c3d5:	83 ec 0c             	sub    esp,0xc
c001c3d8:	68 b7 d3 01 c0       	push   0xc001d3b7
c001c3dd:	e8 95 3e ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001c3e2:	83 c4 10             	add    esp,0x10
c001c3e5:	8d 76 00             	lea    esi,[esi+0x0]
c001c3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3ec:	8b 00                	mov    eax,DWORD PTR [eax]
c001c3ee:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001c3f4:	85 c0                	test   eax,eax
c001c3f6:	75 34                	jne    c001c42c <LinkedList<Device>::removeFirst()+0x8c>
c001c3f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c3fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c406:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c40d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c411:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c414:	83 f8 01             	cmp    eax,0x1
c001c417:	74 27                	je     c001c440 <LinkedList<Device>::removeFirst()+0xa0>
c001c419:	83 ec 0c             	sub    esp,0xc
c001c41c:	68 90 d3 01 c0       	push   0xc001d390
c001c421:	e8 51 3e ff ff       	call   c0010277 <Krnl::panic(char const*)>
c001c426:	83 c4 10             	add    esp,0x10
c001c429:	eb 15                	jmp    c001c440 <LinkedList<Device>::removeFirst()+0xa0>
c001c42b:	90                   	nop
c001c42c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c430:	8b 00                	mov    eax,DWORD PTR [eax]
c001c432:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001c438:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c43c:	89 10                	mov    DWORD PTR [eax],edx
c001c43e:	66 90                	xchg   ax,ax
c001c440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c444:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001c447:	8d 50 ff             	lea    edx,[eax-0x1]
c001c44a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c44e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001c451:	8d 76 00             	lea    esi,[esi+0x0]
c001c454:	83 c4 0c             	add    esp,0xc
c001c457:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001c458 <CPU::~CPU()>:
c001c458:	83 ec 0c             	sub    esp,0xc
c001c45b:	ba 00 e1 01 c0       	mov    edx,0xc001e100
c001c460:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c464:	89 10                	mov    DWORD PTR [eax],edx
c001c466:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c46a:	83 ec 0c             	sub    esp,0xc
c001c46d:	50                   	push   eax
c001c46e:	e8 f7 f5 fe ff       	call   c000ba6a <Device::~Device()>
c001c473:	83 c4 10             	add    esp,0x10
c001c476:	90                   	nop
c001c477:	83 c4 0c             	add    esp,0xc
c001c47a:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001c47c <CPU::~CPU()>:
c001c47c:	83 ec 0c             	sub    esp,0xc
c001c47f:	83 ec 0c             	sub    esp,0xc
c001c482:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c486:	e8 cd ff ff ff       	call   c001c458 <CPU::~CPU()>
c001c48b:	83 c4 10             	add    esp,0x10
c001c48e:	83 ec 08             	sub    esp,0x8
c001c491:	68 94 11 00 00       	push   0x1194
c001c496:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c49a:	e8 93 e1 fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c49f:	83 c4 10             	add    esp,0x10
c001c4a2:	83 c4 0c             	add    esp,0xc
c001c4a5:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001c4a8 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001c4a8:	90                   	nop
c001c4a9:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001c4ac <ThreadControlBlock::ThreadControlBlock()>:
c001c4ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4b0:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001c4b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4bb:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001c4c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4c6:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001c4cd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4d1:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001c4d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4dc:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001c4e3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4e7:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001c4eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4ef:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001c4f3:	90                   	nop
c001c4f4:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001c4f8 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001c4f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c4fc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c502:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c506:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c50d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c511:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c518:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c51c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001c522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c526:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c52d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c531:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001c538:	90                   	nop
c001c539:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001c53c <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001c53c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c540:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c543:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001c544 <PCI::~PCI()>:
c001c544:	83 ec 0c             	sub    esp,0xc
c001c547:	ba 34 ec 01 c0       	mov    edx,0xc001ec34
c001c54c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c550:	89 10                	mov    DWORD PTR [eax],edx
c001c552:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c556:	83 ec 0c             	sub    esp,0xc
c001c559:	50                   	push   eax
c001c55a:	e8 95 ef fe ff       	call   c000b4f4 <Bus::~Bus()>
c001c55f:	83 c4 10             	add    esp,0x10
c001c562:	90                   	nop
c001c563:	83 c4 0c             	add    esp,0xc
c001c566:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001c568 <PCI::~PCI()>:
c001c568:	83 ec 0c             	sub    esp,0xc
c001c56b:	83 ec 0c             	sub    esp,0xc
c001c56e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c572:	e8 cd ff ff ff       	call   c001c544 <PCI::~PCI()>
c001c577:	83 c4 10             	add    esp,0x10
c001c57a:	83 ec 08             	sub    esp,0x8
c001c57d:	68 5c 01 00 00       	push   0x15c
c001c582:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c586:	e8 a7 e0 fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c58b:	83 c4 10             	add    esp,0x10
c001c58e:	83 c4 0c             	add    esp,0xc
c001c591:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001c592 <IDE::~IDE()>:
c001c592:	83 ec 0c             	sub    esp,0xc
c001c595:	ba e8 ec 01 c0       	mov    edx,0xc001ece8
c001c59a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c59e:	89 10                	mov    DWORD PTR [eax],edx
c001c5a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5a4:	83 ec 0c             	sub    esp,0xc
c001c5a7:	50                   	push   eax
c001c5a8:	e8 37 f9 fe ff       	call   c000bee4 <HardDiskController::~HardDiskController()>
c001c5ad:	83 c4 10             	add    esp,0x10
c001c5b0:	90                   	nop
c001c5b1:	83 c4 0c             	add    esp,0xc
c001c5b4:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001c5b6 <IDE::~IDE()>:
c001c5b6:	83 ec 0c             	sub    esp,0xc
c001c5b9:	83 ec 0c             	sub    esp,0xc
c001c5bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5c0:	e8 cd ff ff ff       	call   c001c592 <IDE::~IDE()>
c001c5c5:	83 c4 10             	add    esp,0x10
c001c5c8:	83 ec 08             	sub    esp,0x8
c001c5cb:	68 70 02 00 00       	push   0x270
c001c5d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c5d4:	e8 59 e0 fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c5d9:	83 c4 10             	add    esp,0x10
c001c5dc:	83 c4 0c             	add    esp,0xc
c001c5df:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001c5e0 <SATABus::~SATABus()>:
c001c5e0:	83 ec 0c             	sub    esp,0xc
c001c5e3:	ba 38 ed 01 c0       	mov    edx,0xc001ed38
c001c5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5ec:	89 10                	mov    DWORD PTR [eax],edx
c001c5ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c5f2:	83 ec 0c             	sub    esp,0xc
c001c5f5:	50                   	push   eax
c001c5f6:	e8 e9 f8 fe ff       	call   c000bee4 <HardDiskController::~HardDiskController()>
c001c5fb:	83 c4 10             	add    esp,0x10
c001c5fe:	90                   	nop
c001c5ff:	83 c4 0c             	add    esp,0xc
c001c602:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001c604 <SATABus::~SATABus()>:
c001c604:	83 ec 0c             	sub    esp,0xc
c001c607:	83 ec 0c             	sub    esp,0xc
c001c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c60e:	e8 cd ff ff ff       	call   c001c5e0 <SATABus::~SATABus()>
c001c613:	83 c4 10             	add    esp,0x10
c001c616:	83 ec 08             	sub    esp,0x8
c001c619:	68 64 01 00 00       	push   0x164
c001c61e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c622:	e8 0b e0 fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c627:	83 c4 10             	add    esp,0x10
c001c62a:	83 c4 0c             	add    esp,0xc
c001c62d:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001c62e <ATA::~ATA()>:
c001c62e:	83 ec 0c             	sub    esp,0xc
c001c631:	ba 78 ed 01 c0       	mov    edx,0xc001ed78
c001c636:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c63a:	89 10                	mov    DWORD PTR [eax],edx
c001c63c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c640:	83 ec 0c             	sub    esp,0xc
c001c643:	50                   	push   eax
c001c644:	e8 7d f9 fe ff       	call   c000bfc6 <PhysicalDisk::~PhysicalDisk()>
c001c649:	83 c4 10             	add    esp,0x10
c001c64c:	90                   	nop
c001c64d:	83 c4 0c             	add    esp,0xc
c001c650:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001c652 <ATA::~ATA()>:
c001c652:	83 ec 0c             	sub    esp,0xc
c001c655:	83 ec 0c             	sub    esp,0xc
c001c658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c65c:	e8 cd ff ff ff       	call   c001c62e <ATA::~ATA()>
c001c661:	83 c4 10             	add    esp,0x10
c001c664:	83 ec 08             	sub    esp,0x8
c001c667:	68 7c 01 00 00       	push   0x17c
c001c66c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c670:	e8 bd df fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c675:	83 c4 10             	add    esp,0x10
c001c678:	83 c4 0c             	add    esp,0xc
c001c67b:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001c67c <ATAPI::~ATAPI()>:
c001c67c:	83 ec 0c             	sub    esp,0xc
c001c67f:	ba c0 ed 01 c0       	mov    edx,0xc001edc0
c001c684:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c688:	89 10                	mov    DWORD PTR [eax],edx
c001c68a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c68e:	83 ec 0c             	sub    esp,0xc
c001c691:	50                   	push   eax
c001c692:	e8 2f f9 fe ff       	call   c000bfc6 <PhysicalDisk::~PhysicalDisk()>
c001c697:	83 c4 10             	add    esp,0x10
c001c69a:	90                   	nop
c001c69b:	83 c4 0c             	add    esp,0xc
c001c69e:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001c6a0 <ATAPI::~ATAPI()>:
c001c6a0:	83 ec 0c             	sub    esp,0xc
c001c6a3:	83 ec 0c             	sub    esp,0xc
c001c6a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6aa:	e8 cd ff ff ff       	call   c001c67c <ATAPI::~ATAPI()>
c001c6af:	83 c4 10             	add    esp,0x10
c001c6b2:	83 ec 08             	sub    esp,0x8
c001c6b5:	68 84 01 00 00       	push   0x184
c001c6ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6be:	e8 6f df fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c6c3:	83 c4 10             	add    esp,0x10
c001c6c6:	83 c4 0c             	add    esp,0xc
c001c6c9:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001c6ca <SATA::~SATA()>:
c001c6ca:	83 ec 0c             	sub    esp,0xc
c001c6cd:	ba 74 ee 01 c0       	mov    edx,0xc001ee74
c001c6d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6d6:	89 10                	mov    DWORD PTR [eax],edx
c001c6d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6dc:	83 ec 0c             	sub    esp,0xc
c001c6df:	50                   	push   eax
c001c6e0:	e8 e1 f8 fe ff       	call   c000bfc6 <PhysicalDisk::~PhysicalDisk()>
c001c6e5:	83 c4 10             	add    esp,0x10
c001c6e8:	90                   	nop
c001c6e9:	83 c4 0c             	add    esp,0xc
c001c6ec:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001c6ee <SATA::~SATA()>:
c001c6ee:	83 ec 0c             	sub    esp,0xc
c001c6f1:	83 ec 0c             	sub    esp,0xc
c001c6f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c6f8:	e8 cd ff ff ff       	call   c001c6ca <SATA::~SATA()>
c001c6fd:	83 c4 10             	add    esp,0x10
c001c700:	83 ec 08             	sub    esp,0x8
c001c703:	68 7c 01 00 00       	push   0x17c
c001c708:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c70c:	e8 21 df fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c711:	83 c4 10             	add    esp,0x10
c001c714:	83 c4 0c             	add    esp,0xc
c001c717:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001c718 <SATAPI::~SATAPI()>:
c001c718:	83 ec 0c             	sub    esp,0xc
c001c71b:	ba 04 f0 01 c0       	mov    edx,0xc001f004
c001c720:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c724:	89 10                	mov    DWORD PTR [eax],edx
c001c726:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c72a:	83 ec 0c             	sub    esp,0xc
c001c72d:	50                   	push   eax
c001c72e:	e8 93 f8 fe ff       	call   c000bfc6 <PhysicalDisk::~PhysicalDisk()>
c001c733:	83 c4 10             	add    esp,0x10
c001c736:	90                   	nop
c001c737:	83 c4 0c             	add    esp,0xc
c001c73a:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001c73c <SATAPI::~SATAPI()>:
c001c73c:	83 ec 0c             	sub    esp,0xc
c001c73f:	83 ec 0c             	sub    esp,0xc
c001c742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c746:	e8 cd ff ff ff       	call   c001c718 <SATAPI::~SATAPI()>
c001c74b:	83 c4 10             	add    esp,0x10
c001c74e:	83 ec 08             	sub    esp,0x8
c001c751:	68 84 01 00 00       	push   0x184
c001c756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c75a:	e8 d3 de fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c75f:	83 c4 10             	add    esp,0x10
c001c762:	83 c4 0c             	add    esp,0xc
c001c765:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001c766 <IOAPIC::~IOAPIC()>:
c001c766:	83 ec 0c             	sub    esp,0xc
c001c769:	ba 44 f0 01 c0       	mov    edx,0xc001f044
c001c76e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c772:	89 10                	mov    DWORD PTR [eax],edx
c001c774:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c778:	83 ec 0c             	sub    esp,0xc
c001c77b:	50                   	push   eax
c001c77c:	e8 e9 f2 fe ff       	call   c000ba6a <Device::~Device()>
c001c781:	83 c4 10             	add    esp,0x10
c001c784:	90                   	nop
c001c785:	83 c4 0c             	add    esp,0xc
c001c788:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001c78a <IOAPIC::~IOAPIC()>:
c001c78a:	83 ec 0c             	sub    esp,0xc
c001c78d:	83 ec 0c             	sub    esp,0xc
c001c790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c794:	e8 cd ff ff ff       	call   c001c766 <IOAPIC::~IOAPIC()>
c001c799:	83 c4 10             	add    esp,0x10
c001c79c:	83 ec 08             	sub    esp,0x8
c001c79f:	68 68 01 00 00       	push   0x168
c001c7a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7a8:	e8 85 de fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c7ad:	83 c4 10             	add    esp,0x10
c001c7b0:	83 c4 0c             	add    esp,0xc
c001c7b3:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001c7b4 <APICTimer::~APICTimer()>:
c001c7b4:	83 ec 0c             	sub    esp,0xc
c001c7b7:	ba 8c f0 01 c0       	mov    edx,0xc001f08c
c001c7bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c0:	89 10                	mov    DWORD PTR [eax],edx
c001c7c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c7c6:	83 ec 0c             	sub    esp,0xc
c001c7c9:	50                   	push   eax
c001c7ca:	e8 99 0b ff ff       	call   c000d368 <Timer::~Timer()>
c001c7cf:	83 c4 10             	add    esp,0x10
c001c7d2:	90                   	nop
c001c7d3:	83 c4 0c             	add    esp,0xc
c001c7d6:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001c7d8 <APICTimer::~APICTimer()>:
c001c7d8:	83 ec 0c             	sub    esp,0xc
c001c7db:	83 ec 0c             	sub    esp,0xc
c001c7de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7e2:	e8 cd ff ff ff       	call   c001c7b4 <APICTimer::~APICTimer()>
c001c7e7:	83 c4 10             	add    esp,0x10
c001c7ea:	83 ec 08             	sub    esp,0x8
c001c7ed:	68 60 01 00 00       	push   0x160
c001c7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7f6:	e8 37 de fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c7fb:	83 c4 10             	add    esp,0x10
c001c7fe:	83 c4 0c             	add    esp,0xc
c001c801:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001c804 <PIT::~PIT()>:
c001c804:	83 ec 0c             	sub    esp,0xc
c001c807:	ba dc f0 01 c0       	mov    edx,0xc001f0dc
c001c80c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c810:	89 10                	mov    DWORD PTR [eax],edx
c001c812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c816:	83 ec 0c             	sub    esp,0xc
c001c819:	50                   	push   eax
c001c81a:	e8 49 0b ff ff       	call   c000d368 <Timer::~Timer()>
c001c81f:	83 c4 10             	add    esp,0x10
c001c822:	90                   	nop
c001c823:	83 c4 0c             	add    esp,0xc
c001c826:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001c828 <PIT::~PIT()>:
c001c828:	83 ec 0c             	sub    esp,0xc
c001c82b:	83 ec 0c             	sub    esp,0xc
c001c82e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c832:	e8 cd ff ff ff       	call   c001c804 <PIT::~PIT()>
c001c837:	83 c4 10             	add    esp,0x10
c001c83a:	83 ec 08             	sub    esp,0x8
c001c83d:	68 5c 01 00 00       	push   0x15c
c001c842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c846:	e8 e7 dd fe ff       	call   c000a632 <operator delete(void*, unsigned long)>
c001c84b:	83 c4 10             	add    esp,0x10
c001c84e:	83 c4 0c             	add    esp,0xc
c001c851:	c3                   	ret    
